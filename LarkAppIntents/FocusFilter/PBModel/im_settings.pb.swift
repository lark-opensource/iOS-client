// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: im_settings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import LarkHTTP

// swiftlint:disable all

/// 默认个人状态持续时间
public enum ServerPB_Im_settings_UserCustomStatusDuration: LarkHTTP.Enum {
  public typealias RawValue = Int
  case minutes30 // = 1
  case hour1 // = 2
  case hour2 // = 3
  case hour4 // = 4
  case untilTonight // = 5

  public init() {
    self = .minutes30
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .minutes30
    case 2: self = .hour1
    case 3: self = .hour2
    case 4: self = .hour4
    case 5: self = .untilTonight
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .minutes30: return 1
    case .hour1: return 2
    case .hour2: return 3
    case .hour4: return 4
    case .untilTonight: return 5
    }
  }

}

extension ServerPB_Im_settings_UserCustomStatusDuration: CaseIterable {
  // Support synthesized by the compiler.
}

public enum ServerPB_Im_settings_UserCustomStatusField: LarkHTTP.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case title // = 1
  case iconKey // = 2
  case isNotDisturbMode // = 3
  case effectiveInterval // = 4
  case lastSelectedDefaultDuration // = 5
  case lastCustomizedEndTime // = 6
  case synSettings // = 7
  case synSettingsV2 // = 8

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .title
    case 2: self = .iconKey
    case 3: self = .isNotDisturbMode
    case 4: self = .effectiveInterval
    case 5: self = .lastSelectedDefaultDuration
    case 6: self = .lastCustomizedEndTime
    case 7: self = .synSettings
    case 8: self = .synSettingsV2
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .title: return 1
    case .iconKey: return 2
    case .isNotDisturbMode: return 3
    case .effectiveInterval: return 4
    case .lastSelectedDefaultDuration: return 5
    case .lastCustomizedEndTime: return 6
    case .synSettings: return 7
    case .synSettingsV2: return 8
    }
  }

}

extension ServerPB_Im_settings_UserCustomStatusField: CaseIterable {
  // Support synthesized by the compiler.
}

public struct ServerPB_Im_settings_CustomStatusSynSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var key: ServerPB_Im_settings_CustomStatusSynSetting.CustomStatusSynField {
    get { return _key ?? .isSynOnLeave }
    set { _key = newValue }
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool { return self._key != nil }
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() { self._key = nil }

  public var isOpen: Bool {
    get { return _isOpen ?? false }
    set { _isOpen = newValue }
  }
  /// Returns true if `isOpen` has been explicitly set.
  public var hasIsOpen: Bool { return self._isOpen != nil }
  /// Clears the value of `isOpen`. Subsequent reads from it will return its default value.
  public mutating func clearIsOpen() { self._isOpen = nil }

  public var unknownFields = LarkHTTP.UnknownStorage()

  /// 自动同步请假会议设置
  public enum CustomStatusSynField: LarkHTTP.Enum {
    public typealias RawValue = Int

    /// 同步请假状态
    case isSynOnLeave // = 1

    /// 同步发起或接受的会议
    case isSynMeeting // = 2

    /// 同步日程会议
    case isSynSchedule // = 3

    public init() {
      self = .isSynOnLeave
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .isSynOnLeave
      case 2: self = .isSynMeeting
      case 3: self = .isSynSchedule
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .isSynOnLeave: return 1
      case .isSynMeeting: return 2
      case .isSynSchedule: return 3
      }
    }

  }

  public init() {}

  fileprivate var _key: ServerPB_Im_settings_CustomStatusSynSetting.CustomStatusSynField?
  fileprivate var _isOpen: Bool?
}

#if swift(>=4.2)

extension ServerPB_Im_settings_CustomStatusSynSetting.CustomStatusSynField: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct ServerPB_Im_settings_CustomStatusSettingV2 {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 用于服务端识别不同的设置
  public var id: Int64 {
    get { return _id ?? 0 }
    set { _id = newValue }
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool { return self._id != nil }
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() { self._id = nil }

  public var settingType: ServerPB_Im_settings_CustomStatusSettingV2.SettingType {
    get { return _settingType ?? .unknown }
    set { _settingType = newValue }
  }
  /// Returns true if `settingType` has been explicitly set.
  public var hasSettingType: Bool { return self._settingType != nil }
  /// Clears the value of `settingType`. Subsequent reads from it will return its default value.
  public mutating func clearSettingType() { self._settingType = nil }

  /// 设置内容
  public var content: String {
    get { return _content ?? String() }
    set { _content = newValue }
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool { return self._content != nil }
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() { self._content = nil }

  public var i18NContent: [String: String] = [:]

  /// 设置解释
  public var explain: String {
    get { return _explain ?? String() }
    set { _explain = newValue }
  }
  /// Returns true if `explain` has been explicitly set.
  public var hasExplain: Bool { return self._explain != nil }
  /// Clears the value of `explain`. Subsequent reads from it will return its default value.
  public mutating func clearExplain() { self._explain = nil }

  public var i18NExplain: [String: String] = [:]

  public var isOpen: Bool {
    get { return _isOpen ?? false }
    set { _isOpen = newValue }
  }
  /// Returns true if `isOpen` has been explicitly set.
  public var hasIsOpen: Bool { return self._isOpen != nil }
  /// Clears the value of `isOpen`. Subsequent reads from it will return its default value.
  public mutating func clearIsOpen() { self._isOpen = nil }

  public var unknownFields = LarkHTTP.UnknownStorage()

  /// 服务端下发的设置
  public enum SettingType: LarkHTTP.Enum {
    public typealias RawValue = Int

    /// 新增需要客户端识别的设置，旧版被兼容为UNKNOWN，设置不展示
    case unknown // = 0

    /// 服务端下发的普通设置，无需客户端上识别
    case common // = 1

    /// 后续新增为需要客户端识别的设置
    /// 日程会议设置，需要sdk识别上报日程会议
    case calendarMeeting // = 2

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .common
      case 2: self = .calendarMeeting
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .common: return 1
      case .calendarMeeting: return 2
      }
    }

  }

  public init() {}

  fileprivate var _id: Int64?
  fileprivate var _settingType: ServerPB_Im_settings_CustomStatusSettingV2.SettingType?
  fileprivate var _content: String?
  fileprivate var _explain: String?
  fileprivate var _isOpen: Bool?
}

#if swift(>=4.2)

extension ServerPB_Im_settings_CustomStatusSettingV2.SettingType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// 面向user个人的状态
public struct ServerPB_Im_settings_UserCustomStatus {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  ///  系统id从1开始
  public var id: Int64 {
    get { return _storage._id ?? 0 }
    set { _uniqueStorage()._id = newValue }
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool { return _storage._id != nil }
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() { _uniqueStorage()._id = nil }

  public var type: ServerPB_Im_settings_UserCustomStatus.TypeEnum {
    get { return _storage._type ?? .unknown }
    set { _uniqueStorage()._type = newValue }
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool { return _storage._type != nil }
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() { _uniqueStorage()._type = nil }

  /// i18n支持
  public var title: String {
    get { return _storage._title ?? String() }
    set { _uniqueStorage()._title = newValue }
  }
  /// Returns true if `title` has been explicitly set.
  public var hasTitle: Bool { return _storage._title != nil }
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  public mutating func clearTitle() { _uniqueStorage()._title = nil }

  public var i18NTitle: [String: String] {
    get { return _storage._i18NTitle }
    set { _uniqueStorage()._i18NTitle = newValue }
  }

  public var iconKey: String {
    get { return _storage._iconKey ?? String() }
    set { _uniqueStorage()._iconKey = newValue }
  }
  /// Returns true if `iconKey` has been explicitly set.
  public var hasIconKey: Bool { return _storage._iconKey != nil }
  /// Clears the value of `iconKey`. Subsequent reads from it will return its default value.
  public mutating func clearIconKey() { _uniqueStorage()._iconKey = nil }

  /// server & sdk
  public var fsUnit: String {
    get { return _storage._fsUnit ?? String() }
    set { _uniqueStorage()._fsUnit = newValue }
  }
  /// Returns true if `fsUnit` has been explicitly set.
  public var hasFsUnit: Bool { return _storage._fsUnit != nil }
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
  public mutating func clearFsUnit() { _uniqueStorage()._fsUnit = nil }

  public var effectiveInterval: ServerPB_Entities_EffectiveInterval {
    get { return _storage._effectiveInterval ?? ServerPB_Entities_EffectiveInterval() }
    set { _uniqueStorage()._effectiveInterval = newValue }
  }
  /// Returns true if `effectiveInterval` has been explicitly set.
  public var hasEffectiveInterval: Bool { return _storage._effectiveInterval != nil }
  /// Clears the value of `effectiveInterval`. Subsequent reads from it will return its default value.
  public mutating func clearEffectiveInterval() { _uniqueStorage()._effectiveInterval = nil }

  public var isNotDisturbMode: Bool {
    get { return _storage._isNotDisturbMode ?? false }
    set { _uniqueStorage()._isNotDisturbMode = newValue }
  }
  /// Returns true if `isNotDisturbMode` has been explicitly set.
  public var hasIsNotDisturbMode: Bool { return _storage._isNotDisturbMode != nil }
  /// Clears the value of `isNotDisturbMode`. Subsequent reads from it will return its default value.
  public mutating func clearIsNotDisturbMode() { _uniqueStorage()._isNotDisturbMode = nil }

  /// 上次选择非自定义持续时间
  public var lastSelectedDefaultDuration: ServerPB_Im_settings_UserCustomStatusDuration {
    get { return _storage._lastSelectedDefaultDuration ?? .minutes30 }
    set { _uniqueStorage()._lastSelectedDefaultDuration = newValue }
  }
  /// Returns true if `lastSelectedDefaultDuration` has been explicitly set.
  public var hasLastSelectedDefaultDuration: Bool { return _storage._lastSelectedDefaultDuration != nil }
  /// Clears the value of `lastSelectedDefaultDuration`. Subsequent reads from it will return its default value.
  public mutating func clearLastSelectedDefaultDuration() { _uniqueStorage()._lastSelectedDefaultDuration = nil }

  /// 上次用户自定义的结束时间，当自定义存在时，优先级高于非自定义。
  public var lastCustomizedEndTime: Int64 {
    get { return _storage._lastCustomizedEndTime ?? 0 }
    set { _uniqueStorage()._lastCustomizedEndTime = newValue }
  }
  /// Returns true if `lastCustomizedEndTime` has been explicitly set.
  public var hasLastCustomizedEndTime: Bool { return _storage._lastCustomizedEndTime != nil }
  /// Clears the value of `lastCustomizedEndTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastCustomizedEndTime() { _uniqueStorage()._lastCustomizedEndTime = nil }

  /// 额外设置，如：是否同步请假会议
  public var synSettings: [ServerPB_Im_settings_CustomStatusSynSetting] {
    get { return _storage._synSettings }
    set { _uniqueStorage()._synSettings = newValue }
  }

  /// 状态优先级
  public var priority: Int32 {
    get { return _storage._priority ?? 0 }
    set { _uniqueStorage()._priority = newValue }
  }
  /// Returns true if `priority` has been explicitly set.
  public var hasPriority: Bool { return _storage._priority != nil }
  /// Clears the value of `priority`. Subsequent reads from it will return its default value.
  public mutating func clearPriority() { _uniqueStorage()._priority = nil }

  public var typeV2: ServerPB_Im_settings_UserCustomStatus.TypeV2 {
    get { return _storage._typeV2 ?? .unknownV2 }
    set { _uniqueStorage()._typeV2 = newValue }
  }
  /// Returns true if `typeV2` has been explicitly set.
  public var hasTypeV2: Bool { return _storage._typeV2 != nil }
  /// Clears the value of `typeV2`. Subsequent reads from it will return its default value.
  public mutating func clearTypeV2() { _uniqueStorage()._typeV2 = nil }

  /// 服务端下发的设置
  public var settingsV2: [ServerPB_Im_settings_CustomStatusSettingV2] {
    get { return _storage._settingsV2 }
    set { _uniqueStorage()._settingsV2 = newValue }
  }

  public var timeFormat: ServerPB_Entities_TimeFormat {
    get { return _storage._timeFormat ?? ServerPB_Entities_TimeFormat() }
    set { _uniqueStorage()._timeFormat = newValue }
  }
  /// Returns true if `timeFormat` has been explicitly set.
  public var hasTimeFormat: Bool { return _storage._timeFormat != nil }
  /// Clears the value of `timeFormat`. Subsequent reads from it will return its default value.
  public mutating func clearTimeFormat() { _uniqueStorage()._timeFormat = nil }

  /// 系统状态的生效时间，由系统审批决定
  public var systemValidInterval: ServerPB_Entities_EffectiveInterval {
    get { return _storage._systemValidInterval ?? ServerPB_Entities_EffectiveInterval() }
    set { _uniqueStorage()._systemValidInterval = newValue }
  }
  /// Returns true if `systemValidInterval` has been explicitly set.
  public var hasSystemValidInterval: Bool { return _storage._systemValidInterval != nil }
  /// Clears the value of `systemValidInterval`. Subsequent reads from it will return its default value.
  public mutating func clearSystemValidInterval() { _uniqueStorage()._systemValidInterval = nil }

  public var tagInfo: ServerPB_Entities_TagInfo {
    get { return _storage._tagInfo ?? ServerPB_Entities_TagInfo() }
    set { _uniqueStorage()._tagInfo = newValue }
  }
  /// Returns true if `tagInfo` has been explicitly set.
  public var hasTagInfo: Bool { return _storage._tagInfo != nil }
  /// Clears the value of `tagInfo`. Subsequent reads from it will return its default value.
  public mutating func clearTagInfo() { _uniqueStorage()._tagInfo = nil }

  /// 用于排序
  public var orderWeight: Int32 {
    get { return _storage._orderWeight ?? 0 }
    set { _uniqueStorage()._orderWeight = newValue }
  }
  /// Returns true if `orderWeight` has been explicitly set.
  public var hasOrderWeight: Bool { return _storage._orderWeight != nil }
  /// Clears the value of `orderWeight`. Subsequent reads from it will return its default value.
  public mutating func clearOrderWeight() { _uniqueStorage()._orderWeight = nil }

  /// 服务端下发的埋点名称
  public var eventName: String {
    get { return _storage._eventName ?? String() }
    set { _uniqueStorage()._eventName = newValue }
  }
  /// Returns true if `eventName` has been explicitly set.
  public var hasEventName: Bool { return _storage._eventName != nil }
  /// Clears the value of `eventName`. Subsequent reads from it will return its default value.
  public mutating func clearEventName() { _uniqueStorage()._eventName = nil }

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum TypeEnum: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknown // = 0

    /// 自定义状态
    case custom // = 1

    /// 以下为系统默认状态
    case noDisturb // = 2

    /// 会议中
    case inMeeting // = 3

    /// 请假中
    case onLeave // = 4

    /// 非自定义状态（无同步设置）
    case notCustom // = 5

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .custom
      case 2: self = .noDisturb
      case 3: self = .inMeeting
      case 4: self = .onLeave
      case 5: self = .notCustom
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .custom: return 1
      case .noDisturb: return 2
      case .inMeeting: return 3
      case .onLeave: return 4
      case .notCustom: return 5
      }
    }

  }

  public enum TypeV2: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownV2 // = 0

    /// 系统状态
    case systemV2 // = 1

    /// 普通状态
    case commonV2 // = 2

    /// 自定义状态
    case customV2 // = 3

    public init() {
      self = .unknownV2
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownV2
      case 1: self = .systemV2
      case 2: self = .commonV2
      case 3: self = .customV2
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownV2: return 0
      case .systemV2: return 1
      case .commonV2: return 2
      case .customV2: return 3
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension ServerPB_Im_settings_UserCustomStatus.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

extension ServerPB_Im_settings_UserCustomStatus.TypeV2: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// 自定义个人状态上限20个
/// command: IS_ALLOWED_CREATE_USER_CUSTOM_STATUS = 1103402
/// 描述：获取是否能添加自定义个人状态
public struct ServerPB_Im_settings_IsAllowedCreateUserCustomStatusRequest {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}
}

public struct ServerPB_Im_settings_IsAllowedCreateUserCustomStatusResponse {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var isAllowed: Bool {
    get { return _isAllowed ?? false }
    set { _isAllowed = newValue }
  }
  /// Returns true if `isAllowed` has been explicitly set.
  public var hasIsAllowed: Bool { return self._isAllowed != nil }
  /// Clears the value of `isAllowed`. Subsequent reads from it will return its default value.
  public mutating func clearIsAllowed() { self._isAllowed = nil }

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _isAllowed: Bool?
}

public struct ServerPB_Im_settings_UpdateUserCustomStatus {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var id: Int64 {
    get { return _storage._id ?? 0 }
    set { _uniqueStorage()._id = newValue }
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool { return _storage._id != nil }
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() { _uniqueStorage()._id = nil }

  public var title: String {
    get { return _storage._title ?? String() }
    set { _uniqueStorage()._title = newValue }
  }
  /// Returns true if `title` has been explicitly set.
  public var hasTitle: Bool { return _storage._title != nil }
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  public mutating func clearTitle() { _uniqueStorage()._title = nil }

  public var iconKey: String {
    get { return _storage._iconKey ?? String() }
    set { _uniqueStorage()._iconKey = newValue }
  }
  /// Returns true if `iconKey` has been explicitly set.
  public var hasIconKey: Bool { return _storage._iconKey != nil }
  /// Clears the value of `iconKey`. Subsequent reads from it will return its default value.
  public mutating func clearIconKey() { _uniqueStorage()._iconKey = nil }

  public var isNotDisturbMode: Bool {
    get { return _storage._isNotDisturbMode ?? false }
    set { _uniqueStorage()._isNotDisturbMode = newValue }
  }
  /// Returns true if `isNotDisturbMode` has been explicitly set.
  public var hasIsNotDisturbMode: Bool { return _storage._isNotDisturbMode != nil }
  /// Clears the value of `isNotDisturbMode`. Subsequent reads from it will return its default value.
  public mutating func clearIsNotDisturbMode() { _uniqueStorage()._isNotDisturbMode = nil }

  /// 更新状态的开始时间和结束时间来控制状态的开始和结束
  public var effectiveInterval: ServerPB_Entities_EffectiveInterval {
    get { return _storage._effectiveInterval ?? ServerPB_Entities_EffectiveInterval() }
    set { _uniqueStorage()._effectiveInterval = newValue }
  }
  /// Returns true if `effectiveInterval` has been explicitly set.
  public var hasEffectiveInterval: Bool { return _storage._effectiveInterval != nil }
  /// Clears the value of `effectiveInterval`. Subsequent reads from it will return its default value.
  public mutating func clearEffectiveInterval() { _uniqueStorage()._effectiveInterval = nil }

  public var lastSelectedDefaultDuration: ServerPB_Im_settings_UserCustomStatusDuration {
    get { return _storage._lastSelectedDefaultDuration ?? .minutes30 }
    set { _uniqueStorage()._lastSelectedDefaultDuration = newValue }
  }
  /// Returns true if `lastSelectedDefaultDuration` has been explicitly set.
  public var hasLastSelectedDefaultDuration: Bool { return _storage._lastSelectedDefaultDuration != nil }
  /// Clears the value of `lastSelectedDefaultDuration`. Subsequent reads from it will return its default value.
  public mutating func clearLastSelectedDefaultDuration() { _uniqueStorage()._lastSelectedDefaultDuration = nil }

  public var lastCustomizedEndTime: Int64 {
    get { return _storage._lastCustomizedEndTime ?? 0 }
    set { _uniqueStorage()._lastCustomizedEndTime = newValue }
  }
  /// Returns true if `lastCustomizedEndTime` has been explicitly set.
  public var hasLastCustomizedEndTime: Bool { return _storage._lastCustomizedEndTime != nil }
  /// Clears the value of `lastCustomizedEndTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastCustomizedEndTime() { _uniqueStorage()._lastCustomizedEndTime = nil }

  public var synSettings: [ServerPB_Im_settings_CustomStatusSynSetting] {
    get { return _storage._synSettings }
    set { _uniqueStorage()._synSettings = newValue }
  }

  public var fields: [ServerPB_Im_settings_UserCustomStatusField] {
    get { return _storage._fields }
    set { _uniqueStorage()._fields = newValue }
  }

  /// 修改的设置v2
  public var synSettingsV2: [ServerPB_Im_settings_UpdateUserCustomStatus.UpdateSynSettingsV2] {
    get { return _storage._synSettingsV2 }
    set { _uniqueStorage()._synSettingsV2 = newValue }
  }

  public var unknownFields = LarkHTTP.UnknownStorage()

  public struct UpdateSynSettingsV2 {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// 服务端下发的设置id
    public var id: Int64 {
      get { return _id ?? 0 }
      set { _id = newValue }
    }
    /// Returns true if `id` has been explicitly set.
    public var hasID: Bool { return self._id != nil }
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    public mutating func clearID() { self._id = nil }

    public var isOpen: Bool {
      get { return _isOpen ?? false }
      set { _isOpen = newValue }
    }
    /// Returns true if `isOpen` has been explicitly set.
    public var hasIsOpen: Bool { return self._isOpen != nil }
    /// Clears the value of `isOpen`. Subsequent reads from it will return its default value.
    public mutating func clearIsOpen() { self._isOpen = nil }

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _id: Int64?
    fileprivate var _isOpen: Bool?
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct ServerPB_Im_settings_UpdateUserCustomStatusRequest {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var updateStatuses: [ServerPB_Im_settings_UpdateUserCustomStatus] = []

  /// 从系统同步，需求背景：ios直接从客户端调用同步ios系统状态
  public var isSynFromSys: Bool {
    get { return _isSynFromSys ?? false }
    set { _isSynFromSys = newValue }
  }
  /// Returns true if `isSynFromSys` has been explicitly set.
  public var hasIsSynFromSys: Bool { return self._isSynFromSys != nil }
  /// Clears the value of `isSynFromSys`. Subsequent reads from it will return its default value.
  public mutating func clearIsSynFromSys() { self._isSynFromSys = nil }

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _isSynFromSys: Bool? = nil
}

public struct ServerPB_Im_settings_UpdateUserCustomStatusResponse {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 返回更新完的状态
  public var customStatuses: [ServerPB_Im_settings_UserCustomStatus] = []

  public var version: Int64 {
    get { return _version ?? 0 }
    set { _version = newValue }
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool { return self._version != nil }
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() { self._version = nil }

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _version: Int64?
}

/// 获取用户自定义状态列表，一次全量返回所有状态
public struct ServerPB_Im_settings_PullUserCustomStatusesRequest {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 初始请求version=0
  public var version: Int64 {
    get { return _version ?? 0 }
    set { _version = newValue }
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool { return self._version != nil }
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() { self._version = nil }

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _version: Int64?
}

public struct ServerPB_Im_settings_PullUserCustomStatusesResponse {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 没有更新返回空，否则最少返回所有系统默认状态
  public var customStatuses: [ServerPB_Im_settings_UserCustomStatus] = []

  public var version: Int64 {
    get { return _version ?? 0 }
    set { _version = newValue }
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool { return self._version != nil }
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() { self._version = nil }

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _version: Int64?
}

/// 储存值
public struct ServerPB_Im_settings_UserCustomStatuses {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var customStatuses: [ServerPB_Im_settings_UserCustomStatus] = []

  public var version: Int64 {
    get { return _version ?? 0 }
    set { _version = newValue }
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool { return self._version != nil }
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() { self._version = nil }

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _version: Int64?
}

// MARK: - Code below here is support for the LarkHTTP runtime.

fileprivate let _protobuf_package = "im_settings"

extension ServerPB_Im_settings_UserCustomStatusDuration: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "MINUTES_30"),
    2: .same(proto: "HOUR_1"),
    3: .same(proto: "HOUR_2"),
    4: .same(proto: "HOUR_4"),
    5: .same(proto: "UNTIL_TONIGHT")
  ]
}

extension ServerPB_Im_settings_UserCustomStatusField: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "TITLE"),
    2: .same(proto: "ICON_KEY"),
    3: .same(proto: "IS_NOT_DISTURB_MODE"),
    4: .same(proto: "EFFECTIVE_INTERVAL"),
    5: .same(proto: "LAST_SELECTED_DEFAULT_DURATION"),
    6: .same(proto: "LAST_CUSTOMIZED_END_TIME"),
    7: .same(proto: "SYN_SETTINGS"),
    8: .same(proto: "SYN_SETTINGS_V2")
  ]
}

extension ServerPB_Im_settings_CustomStatusSynSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomStatusSynSetting"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "key"),
    2: .standard(proto: "is_open")
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._key)
      case 2: try decoder.decodeSingularBoolField(value: &self._isOpen)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._key {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._isOpen {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ServerPB_Im_settings_CustomStatusSynSetting, rhs: ServerPB_Im_settings_CustomStatusSynSetting) -> Bool {
    if lhs._key != rhs._key { return false }
    if lhs._isOpen != rhs._isOpen { return false }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}

extension ServerPB_Im_settings_CustomStatusSynSetting.CustomStatusSynField: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "IS_SYN_ON_LEAVE"),
    2: .same(proto: "IS_SYN_MEETING"),
    3: .same(proto: "IS_SYN_SCHEDULE")
  ]
}

extension ServerPB_Im_settings_CustomStatusSettingV2: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomStatusSettingV2"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "setting_type"),
    3: .same(proto: "content"),
    4: .standard(proto: "i18n_content"),
    5: .same(proto: "explain"),
    6: .standard(proto: "i18n_explain"),
    7: .standard(proto: "is_open")
  ]

  public var isInitialized: Bool {
    if self._settingType == nil { return false }
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._id)
      case 2: try decoder.decodeSingularEnumField(value: &self._settingType)
      case 3: try decoder.decodeSingularStringField(value: &self._content)
      case 4: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString, LarkHTTP.ProtobufString>.self, value: &self.i18NContent)
      case 5: try decoder.decodeSingularStringField(value: &self._explain)
      case 6: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString, LarkHTTP.ProtobufString>.self, value: &self.i18NExplain)
      case 7: try decoder.decodeSingularBoolField(value: &self._isOpen)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._settingType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._content {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if !self.i18NContent.isEmpty {
      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString, LarkHTTP.ProtobufString>.self, value: self.i18NContent, fieldNumber: 4)
    }
    if let v = self._explain {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if !self.i18NExplain.isEmpty {
      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString, LarkHTTP.ProtobufString>.self, value: self.i18NExplain, fieldNumber: 6)
    }
    if let v = self._isOpen {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ServerPB_Im_settings_CustomStatusSettingV2, rhs: ServerPB_Im_settings_CustomStatusSettingV2) -> Bool {
    if lhs._id != rhs._id { return false }
    if lhs._settingType != rhs._settingType { return false }
    if lhs._content != rhs._content { return false }
    if lhs.i18NContent != rhs.i18NContent { return false }
    if lhs._explain != rhs._explain { return false }
    if lhs.i18NExplain != rhs.i18NExplain { return false }
    if lhs._isOpen != rhs._isOpen { return false }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}

extension ServerPB_Im_settings_CustomStatusSettingV2.SettingType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "COMMON"),
    2: .same(proto: "CALENDAR_MEETING")
  ]
}

extension ServerPB_Im_settings_UserCustomStatus: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserCustomStatus"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "title"),
    4: .standard(proto: "i18n_title"),
    5: .standard(proto: "icon_key"),
    6: .standard(proto: "fs_unit"),
    7: .standard(proto: "effective_interval"),
    8: .standard(proto: "is_not_disturb_mode"),
    9: .standard(proto: "last_selected_default_duration"),
    10: .standard(proto: "last_customized_end_time"),
    11: .standard(proto: "syn_settings"),
    12: .same(proto: "priority"),
    13: .standard(proto: "type_v2"),
    14: .standard(proto: "settings_v2"),
    15: .standard(proto: "time_format"),
    16: .standard(proto: "system_valid_interval"),
    17: .standard(proto: "tag_info"),
    21: .standard(proto: "order_weight"),
    22: .standard(proto: "event_name")
  ]

  fileprivate class _StorageClass {
    var _id: Int64?
    var _type: ServerPB_Im_settings_UserCustomStatus.TypeEnum?
    var _title: String?
    var _i18NTitle: [String: String] = [:]
    var _iconKey: String?
    var _fsUnit: String?
    var _effectiveInterval: ServerPB_Entities_EffectiveInterval?
    var _isNotDisturbMode: Bool?
    var _lastSelectedDefaultDuration: ServerPB_Im_settings_UserCustomStatusDuration?
    var _lastCustomizedEndTime: Int64?
    var _synSettings: [ServerPB_Im_settings_CustomStatusSynSetting] = []
    var _priority: Int32?
    var _typeV2: ServerPB_Im_settings_UserCustomStatus.TypeV2?
    var _settingsV2: [ServerPB_Im_settings_CustomStatusSettingV2] = []
    var _timeFormat: ServerPB_Entities_TimeFormat?
    var _systemValidInterval: ServerPB_Entities_EffectiveInterval?
    var _tagInfo: ServerPB_Entities_TagInfo?
    var _orderWeight: Int32?
    var _eventName: String?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _type = source._type
      _title = source._title
      _i18NTitle = source._i18NTitle
      _iconKey = source._iconKey
      _fsUnit = source._fsUnit
      _effectiveInterval = source._effectiveInterval
      _isNotDisturbMode = source._isNotDisturbMode
      _lastSelectedDefaultDuration = source._lastSelectedDefaultDuration
      _lastCustomizedEndTime = source._lastCustomizedEndTime
      _synSettings = source._synSettings
      _priority = source._priority
      _typeV2 = source._typeV2
      _settingsV2 = source._settingsV2
      _timeFormat = source._timeFormat
      _systemValidInterval = source._systemValidInterval
      _tagInfo = source._tagInfo
      _orderWeight = source._orderWeight
      _eventName = source._eventName
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !LarkHTTP.Internal.areAllInitialized(_storage._settingsV2) { return false }
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 3: try decoder.decodeSingularStringField(value: &_storage._title)
        case 4: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString, LarkHTTP.ProtobufString>.self, value: &_storage._i18NTitle)
        case 5: try decoder.decodeSingularStringField(value: &_storage._iconKey)
        case 6: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._effectiveInterval)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._isNotDisturbMode)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._lastSelectedDefaultDuration)
        case 10: try decoder.decodeSingularInt64Field(value: &_storage._lastCustomizedEndTime)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._synSettings)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._priority)
        case 13: try decoder.decodeSingularEnumField(value: &_storage._typeV2)
        case 14: try decoder.decodeRepeatedMessageField(value: &_storage._settingsV2)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._timeFormat)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._systemValidInterval)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._tagInfo)
        case 21: try decoder.decodeSingularInt32Field(value: &_storage._orderWeight)
        case 22: try decoder.decodeSingularStringField(value: &_storage._eventName)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      }
      if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if !_storage._i18NTitle.isEmpty {
        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString, LarkHTTP.ProtobufString>.self, value: _storage._i18NTitle, fieldNumber: 4)
      }
      if let v = _storage._iconKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._fsUnit {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._effectiveInterval {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._isNotDisturbMode {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      }
      if let v = _storage._lastSelectedDefaultDuration {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
      }
      if let v = _storage._lastCustomizedEndTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
      }
      if !_storage._synSettings.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._synSettings, fieldNumber: 11)
      }
      if let v = _storage._priority {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      }
      if let v = _storage._typeV2 {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
      }
      if !_storage._settingsV2.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._settingsV2, fieldNumber: 14)
      }
      if let v = _storage._timeFormat {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._systemValidInterval {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._tagInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._orderWeight {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      }
      if let v = _storage._eventName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ServerPB_Im_settings_UserCustomStatus, rhs: ServerPB_Im_settings_UserCustomStatus) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id { return false }
        if _storage._type != rhs_storage._type { return false }
        if _storage._title != rhs_storage._title { return false }
        if _storage._i18NTitle != rhs_storage._i18NTitle { return false }
        if _storage._iconKey != rhs_storage._iconKey { return false }
        if _storage._fsUnit != rhs_storage._fsUnit { return false }
        if _storage._effectiveInterval != rhs_storage._effectiveInterval { return false }
        if _storage._isNotDisturbMode != rhs_storage._isNotDisturbMode { return false }
        if _storage._lastSelectedDefaultDuration != rhs_storage._lastSelectedDefaultDuration { return false }
        if _storage._lastCustomizedEndTime != rhs_storage._lastCustomizedEndTime { return false }
        if _storage._synSettings != rhs_storage._synSettings { return false }
        if _storage._priority != rhs_storage._priority { return false }
        if _storage._typeV2 != rhs_storage._typeV2 { return false }
        if _storage._settingsV2 != rhs_storage._settingsV2 { return false }
        if _storage._timeFormat != rhs_storage._timeFormat { return false }
        if _storage._systemValidInterval != rhs_storage._systemValidInterval { return false }
        if _storage._tagInfo != rhs_storage._tagInfo { return false }
        if _storage._orderWeight != rhs_storage._orderWeight { return false }
        if _storage._eventName != rhs_storage._eventName { return false }
        return true
      }
      if !storagesAreEqual { return false }
    }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}

extension ServerPB_Im_settings_UserCustomStatus.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "CUSTOM"),
    2: .same(proto: "NO_DISTURB"),
    3: .same(proto: "IN_MEETING"),
    4: .same(proto: "ON_LEAVE"),
    5: .same(proto: "NOT_CUSTOM")
  ]
}

extension ServerPB_Im_settings_UserCustomStatus.TypeV2: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_V2"),
    1: .same(proto: "SYSTEM_V2"),
    2: .same(proto: "COMMON_V2"),
    3: .same(proto: "CUSTOM_V2")
  ]
}

extension ServerPB_Im_settings_UpdateUserCustomStatus: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateUserCustomStatus"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .standard(proto: "icon_key"),
    4: .standard(proto: "is_not_disturb_mode"),
    5: .standard(proto: "effective_interval"),
    6: .standard(proto: "last_selected_default_duration"),
    7: .standard(proto: "last_customized_end_time"),
    8: .standard(proto: "syn_settings"),
    9: .same(proto: "fields"),
    10: .standard(proto: "syn_settings_v2"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64? = nil
    var _title: String? = nil
    var _iconKey: String? = nil
    var _isNotDisturbMode: Bool? = nil
    var _effectiveInterval: ServerPB_Entities_EffectiveInterval? = nil
    var _lastSelectedDefaultDuration: ServerPB_Im_settings_UserCustomStatusDuration? = nil
    var _lastCustomizedEndTime: Int64? = nil
    var _synSettings: [ServerPB_Im_settings_CustomStatusSynSetting] = []
    var _fields: [ServerPB_Im_settings_UserCustomStatusField] = []
    var _synSettingsV2: [ServerPB_Im_settings_UpdateUserCustomStatus.UpdateSynSettingsV2] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _iconKey = source._iconKey
      _isNotDisturbMode = source._isNotDisturbMode
      _effectiveInterval = source._effectiveInterval
      _lastSelectedDefaultDuration = source._lastSelectedDefaultDuration
      _lastCustomizedEndTime = source._lastCustomizedEndTime
      _synSettings = source._synSettings
      _fields = source._fields
      _synSettingsV2 = source._synSettingsV2
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._iconKey)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._isNotDisturbMode)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._effectiveInterval)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._lastSelectedDefaultDuration)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._lastCustomizedEndTime)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._synSettings)
        case 9: try decoder.decodeRepeatedEnumField(value: &_storage._fields)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._synSettingsV2)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._iconKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._isNotDisturbMode {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      }
      if let v = _storage._effectiveInterval {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._lastSelectedDefaultDuration {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
      }
      if let v = _storage._lastCustomizedEndTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
      }
      if !_storage._synSettings.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._synSettings, fieldNumber: 8)
      }
      if !_storage._fields.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._fields, fieldNumber: 9)
      }
      if !_storage._synSettingsV2.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._synSettingsV2, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ServerPB_Im_settings_UpdateUserCustomStatus, rhs: ServerPB_Im_settings_UpdateUserCustomStatus) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id { return false }
        if _storage._title != rhs_storage._title { return false }
        if _storage._iconKey != rhs_storage._iconKey { return false }
        if _storage._isNotDisturbMode != rhs_storage._isNotDisturbMode { return false }
        if _storage._effectiveInterval != rhs_storage._effectiveInterval { return false }
        if _storage._lastSelectedDefaultDuration != rhs_storage._lastSelectedDefaultDuration { return false }
        if _storage._lastCustomizedEndTime != rhs_storage._lastCustomizedEndTime { return false }
        if _storage._synSettings != rhs_storage._synSettings { return false }
        if _storage._fields != rhs_storage._fields { return false }
        if _storage._synSettingsV2 != rhs_storage._synSettingsV2 { return false }
        return true
      }
      if !storagesAreEqual { return false }
    }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}

extension ServerPB_Im_settings_UpdateUserCustomStatus.UpdateSynSettingsV2: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = ServerPB_Im_settings_UpdateUserCustomStatus.protoMessageName + ".UpdateSynSettingsV2"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "is_open")
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._id)
      case 2: try decoder.decodeSingularBoolField(value: &self._isOpen)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._isOpen {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ServerPB_Im_settings_UpdateUserCustomStatus.UpdateSynSettingsV2, rhs: ServerPB_Im_settings_UpdateUserCustomStatus.UpdateSynSettingsV2) -> Bool {
    if lhs._id != rhs._id { return false }
    if lhs._isOpen != rhs._isOpen { return false }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}

extension ServerPB_Im_settings_UpdateUserCustomStatusRequest: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateUserCustomStatusRequest"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "update_statuses"),
    2: .standard(proto: "is_syn_from_sys"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.updateStatuses)
      case 2: try decoder.decodeSingularBoolField(value: &self._isSynFromSys)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if !self.updateStatuses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.updateStatuses, fieldNumber: 1)
    }
    if let v = self._isSynFromSys {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ServerPB_Im_settings_UpdateUserCustomStatusRequest, rhs: ServerPB_Im_settings_UpdateUserCustomStatusRequest) -> Bool {
    if lhs.updateStatuses != rhs.updateStatuses { return false }
    if lhs._isSynFromSys != rhs._isSynFromSys { return false }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}

extension ServerPB_Im_settings_UpdateUserCustomStatusResponse: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateUserCustomStatusResponse"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "custom_statuses"),
    2: .same(proto: "version")
  ]

  public var isInitialized: Bool {
    if !LarkHTTP.Internal.areAllInitialized(self.customStatuses) { return false }
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.customStatuses)
      case 2: try decoder.decodeSingularInt64Field(value: &self._version)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if !self.customStatuses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customStatuses, fieldNumber: 1)
    }
    if let v = self._version {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ServerPB_Im_settings_UpdateUserCustomStatusResponse, rhs: ServerPB_Im_settings_UpdateUserCustomStatusResponse) -> Bool {
    if lhs.customStatuses != rhs.customStatuses { return false }
    if lhs._version != rhs._version { return false }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}

extension ServerPB_Im_settings_PullUserCustomStatusesRequest: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PullUserCustomStatusesRequest"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "version")
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._version)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._version {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ServerPB_Im_settings_PullUserCustomStatusesRequest, rhs: ServerPB_Im_settings_PullUserCustomStatusesRequest) -> Bool {
    if lhs._version != rhs._version { return false }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}

extension ServerPB_Im_settings_PullUserCustomStatusesResponse: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PullUserCustomStatusesResponse"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "custom_statuses"),
    2: .same(proto: "version")
  ]

  public var isInitialized: Bool {
    if !LarkHTTP.Internal.areAllInitialized(self.customStatuses) { return false }
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.customStatuses)
      case 2: try decoder.decodeSingularInt64Field(value: &self._version)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if !self.customStatuses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customStatuses, fieldNumber: 1)
    }
    if let v = self._version {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ServerPB_Im_settings_PullUserCustomStatusesResponse, rhs: ServerPB_Im_settings_PullUserCustomStatusesResponse) -> Bool {
    if lhs.customStatuses != rhs.customStatuses { return false }
    if lhs._version != rhs._version { return false }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}

extension ServerPB_Im_settings_UserCustomStatuses: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserCustomStatuses"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "custom_statuses"),
    2: .same(proto: "version")
  ]

  public var isInitialized: Bool {
    if !LarkHTTP.Internal.areAllInitialized(self.customStatuses) { return false }
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.customStatuses)
      case 2: try decoder.decodeSingularInt64Field(value: &self._version)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if !self.customStatuses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customStatuses, fieldNumber: 1)
    }
    if let v = self._version {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ServerPB_Im_settings_UserCustomStatuses, rhs: ServerPB_Im_settings_UserCustomStatuses) -> Bool {
    if lhs.customStatuses != rhs.customStatuses { return false }
    if lhs._version != rhs._version { return false }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}

// swiftlint:enable all
