// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video_model.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "TTVideoEngineModelPb.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TTVideoEnginePbVideoModelRoot

@implementation TTVideoEnginePbVideoModelRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - TTVideoEnginePbVideoModelRoot_FileDescriptor

static GPBFileDescriptor *TTVideoEnginePbVideoModelRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"video_model"
                                                 objcPrefix:@"TTVideoEnginePb"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TTVideoEnginePbMetaDataInfo

@implementation TTVideoEnginePbMetaDataInfo

@dynamic id_p;
@dynamic mediaType;
@dynamic status;
@dynamic posterUri;
@dynamic thumbsArray, thumbsArray_Count;
@dynamic hasOriginalStream, originalStream;
@dynamic staticStreamsArray, staticStreamsArray_Count;
@dynamic hlsStreamsArray, hlsStreamsArray_Count;
@dynamic dashStreamsArray, dashStreamsArray_Count;
@dynamic barrageMaskURL;

typedef struct TTVideoEnginePbMetaDataInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *mediaType;
  NSString *posterUri;
  NSMutableArray *thumbsArray;
  TTVideoEnginePbPlayInfo *originalStream;
  NSMutableArray *staticStreamsArray;
  NSMutableArray *hlsStreamsArray;
  NSMutableArray *dashStreamsArray;
  NSString *barrageMaskURL;
  int64_t status;
} TTVideoEnginePbMetaDataInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbMetaDataInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbMetaDataInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mediaType",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbMetaDataInfo_FieldNumber_MediaType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbMetaDataInfo__storage_, mediaType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbMetaDataInfo_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbMetaDataInfo__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "posterUri",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbMetaDataInfo_FieldNumber_PosterUri,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbMetaDataInfo__storage_, posterUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumbsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbBigThumb),
        .number = TTVideoEnginePbMetaDataInfo_FieldNumber_ThumbsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbMetaDataInfo__storage_, thumbsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "originalStream",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbPlayInfo),
        .number = TTVideoEnginePbMetaDataInfo_FieldNumber_OriginalStream,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TTVideoEnginePbMetaDataInfo__storage_, originalStream),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "staticStreamsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbPlayInfo),
        .number = TTVideoEnginePbMetaDataInfo_FieldNumber_StaticStreamsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbMetaDataInfo__storage_, staticStreamsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hlsStreamsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbPlayInfo),
        .number = TTVideoEnginePbMetaDataInfo_FieldNumber_HlsStreamsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbMetaDataInfo__storage_, hlsStreamsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dashStreamsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbDynamicPlayInfo),
        .number = TTVideoEnginePbMetaDataInfo_FieldNumber_DashStreamsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbMetaDataInfo__storage_, dashStreamsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "barrageMaskURL",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbMetaDataInfo_FieldNumber_BarrageMaskURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TTVideoEnginePbMetaDataInfo__storage_, barrageMaskURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbMetaDataInfo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbMetaDataInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\n\007\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbPlayInfo

@implementation TTVideoEnginePbPlayInfo

@dynamic hasMeta, meta;
@dynamic playUri;
@dynamic hasEncryptInfo, encryptInfo;
@dynamic hasBaseRangeInfo, baseRangeInfo;
@dynamic hasCheckInfo, checkInfo;
@dynamic keyframeAlignment;

typedef struct TTVideoEnginePbPlayInfo__storage_ {
  uint32_t _has_storage_[1];
  TTVideoEnginePbBaseMeta *meta;
  NSString *playUri;
  TTVideoEnginePbEncryptInfo *encryptInfo;
  TTVideoEnginePbBaseRangeInfo *baseRangeInfo;
  TTVideoEnginePbCheckInfo *checkInfo;
  NSString *keyframeAlignment;
} TTVideoEnginePbPlayInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "meta",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbBaseMeta),
        .number = TTVideoEnginePbPlayInfo_FieldNumber_Meta,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbPlayInfo__storage_, meta),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "playUri",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbPlayInfo_FieldNumber_PlayUri,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbPlayInfo__storage_, playUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "encryptInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbEncryptInfo),
        .number = TTVideoEnginePbPlayInfo_FieldNumber_EncryptInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbPlayInfo__storage_, encryptInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "baseRangeInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbBaseRangeInfo),
        .number = TTVideoEnginePbPlayInfo_FieldNumber_BaseRangeInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbPlayInfo__storage_, baseRangeInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "checkInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbCheckInfo),
        .number = TTVideoEnginePbPlayInfo_FieldNumber_CheckInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TTVideoEnginePbPlayInfo__storage_, checkInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "keyframeAlignment",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbPlayInfo_FieldNumber_KeyframeAlignment,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TTVideoEnginePbPlayInfo__storage_, keyframeAlignment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbPlayInfo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbPlayInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbDynamicPlayInfo

@implementation TTVideoEnginePbDynamicPlayInfo

@dynamic dynamicVideoListArray, dynamicVideoListArray_Count;
@dynamic dynamicAudioListArray, dynamicAudioListArray_Count;

typedef struct TTVideoEnginePbDynamicPlayInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *dynamicVideoListArray;
  NSMutableArray *dynamicAudioListArray;
} TTVideoEnginePbDynamicPlayInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dynamicVideoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbPlayInfo),
        .number = TTVideoEnginePbDynamicPlayInfo_FieldNumber_DynamicVideoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbDynamicPlayInfo__storage_, dynamicVideoListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dynamicAudioListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbPlayInfo),
        .number = TTVideoEnginePbDynamicPlayInfo_FieldNumber_DynamicAudioListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbDynamicPlayInfo__storage_, dynamicAudioListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbDynamicPlayInfo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbDynamicPlayInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbBaseMeta

@implementation TTVideoEnginePbBaseMeta

@dynamic fileId;
@dynamic codecType;
@dynamic size;
@dynamic duration;
@dynamic formatType;
@dynamic width;
@dynamic height;
@dynamic bitrate;
@dynamic definition;
@dynamic quality;
@dynamic qualityDesc;
@dynamic fps;
@dynamic md5;

typedef struct TTVideoEnginePbBaseMeta__storage_ {
  uint32_t _has_storage_[1];
  NSString *fileId;
  NSString *codecType;
  NSString *formatType;
  NSString *definition;
  NSString *quality;
  NSString *qualityDesc;
  NSString *md5;
  int64_t size;
  double duration;
  int64_t width;
  int64_t height;
  int64_t bitrate;
  int64_t fps;
} TTVideoEnginePbBaseMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseMeta_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseMeta__storage_, fileId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "codecType",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseMeta_FieldNumber_CodecType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseMeta__storage_, codecType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseMeta_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseMeta__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseMeta_FieldNumber_Duration,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseMeta__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "formatType",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseMeta_FieldNumber_FormatType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseMeta__storage_, formatType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseMeta_FieldNumber_Width,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseMeta__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseMeta_FieldNumber_Height,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseMeta__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bitrate",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseMeta_FieldNumber_Bitrate,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseMeta__storage_, bitrate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "definition",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseMeta_FieldNumber_Definition,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseMeta__storage_, definition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "quality",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseMeta_FieldNumber_Quality,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseMeta__storage_, quality),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "qualityDesc",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseMeta_FieldNumber_QualityDesc,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseMeta__storage_, qualityDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fps",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseMeta_FieldNumber_Fps,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseMeta__storage_, fps),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "md5",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseMeta_FieldNumber_Md5,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseMeta__storage_, md5),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbBaseMeta class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbBaseMeta__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbSegment

@implementation TTVideoEnginePbSegment

@dynamic begin;
@dynamic end;
@dynamic speed;

typedef struct TTVideoEnginePbSegment__storage_ {
  uint32_t _has_storage_[1];
  double begin;
  double end;
  double speed;
} TTVideoEnginePbSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "begin",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSegment_FieldNumber_Begin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSegment__storage_, begin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "end",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSegment_FieldNumber_End,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSegment__storage_, end),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "speed",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSegment_FieldNumber_Speed,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSegment__storage_, speed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbSegment class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbAISpeedInfo

@implementation TTVideoEnginePbAISpeedInfo

@dynamic version;
@dynamic file;
@dynamic segmentsArray, segmentsArray_Count;

typedef struct TTVideoEnginePbAISpeedInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *version;
  NSString *file;
  NSMutableArray *segmentsArray;
} TTVideoEnginePbAISpeedInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAISpeedInfo_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAISpeedInfo__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "file",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAISpeedInfo_FieldNumber_File,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAISpeedInfo__storage_, file),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "segmentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbSegment),
        .number = TTVideoEnginePbAISpeedInfo_FieldNumber_SegmentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAISpeedInfo__storage_, segmentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbAISpeedInfo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbAISpeedInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbDepthEstimation

@implementation TTVideoEnginePbDepthEstimation

@dynamic constDepth;

typedef struct TTVideoEnginePbDepthEstimation__storage_ {
  uint32_t _has_storage_[1];
  double constDepth;
} TTVideoEnginePbDepthEstimation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "constDepth",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbDepthEstimation_FieldNumber_ConstDepth,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbDepthEstimation__storage_, constDepth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbDepthEstimation class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbDepthEstimation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbSubtitlePosition

@implementation TTVideoEnginePbSubtitlePosition

@dynamic x;
@dynamic y;

typedef struct TTVideoEnginePbSubtitlePosition__storage_ {
  uint32_t _has_storage_[1];
  double x;
  double y;
} TTVideoEnginePbSubtitlePosition__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "x",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSubtitlePosition_FieldNumber_X,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSubtitlePosition__storage_, x),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "y",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSubtitlePosition_FieldNumber_Y,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSubtitlePosition__storage_, y),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbSubtitlePosition class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbSubtitlePosition__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbLuminance

@implementation TTVideoEnginePbLuminance

@dynamic brightRatio;
@dynamic brightness;
@dynamic overexposureRatio;
@dynamic stdBrightness;
@dynamic diffOverexposureRatio;

typedef struct TTVideoEnginePbLuminance__storage_ {
  uint32_t _has_storage_[1];
  double brightRatio;
  double brightness;
  double overexposureRatio;
  double stdBrightness;
  double diffOverexposureRatio;
} TTVideoEnginePbLuminance__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "brightRatio",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbLuminance_FieldNumber_BrightRatio,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbLuminance__storage_, brightRatio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "brightness",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbLuminance_FieldNumber_Brightness,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbLuminance__storage_, brightness),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "overexposureRatio",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbLuminance_FieldNumber_OverexposureRatio,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbLuminance__storage_, overexposureRatio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "stdBrightness",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbLuminance_FieldNumber_StdBrightness,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbLuminance__storage_, stdBrightness),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "diffOverexposureRatio",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbLuminance_FieldNumber_DiffOverexposureRatio,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TTVideoEnginePbLuminance__storage_, diffOverexposureRatio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbLuminance class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbLuminance__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbVideoInfo

@implementation TTVideoEnginePbVideoInfo

@dynamic status;
@dynamic message;
@dynamic version;
@dynamic videoId;
@dynamic enableSsl;
@dynamic videoDuration;
@dynamic mediaType;
@dynamic URLExpire;
@dynamic bigThumbsArray, bigThumbsArray_Count;
@dynamic barrageMaskURL;
@dynamic hasFallbackApi, fallbackApi;
@dynamic hasSeekTs, seekTs;
@dynamic hasDnsInfo, dnsInfo;
@dynamic videoListArray, videoListArray_Count;
@dynamic hasDynamicVideo, dynamicVideo;
@dynamic enableAdaptive;
@dynamic fullScreenStrategy;
@dynamic hasVolume, volume;
@dynamic popularityLevel;
@dynamic subtitleLangsArray, subtitleLangsArray_Count;
@dynamic hasSandwich, sandwich;
@dynamic subtitleInfosArray, subtitleInfosArray_Count;
@dynamic hasEmbeddedSubtitle;
@dynamic dubbedAudioListArray, dubbedAudioListArray_Count;
@dynamic effectBarrageURL;
@dynamic aiSpeedInfoArray, aiSpeedInfoArray_Count;
@dynamic hasVideoStyle, videoStyle;
@dynamic hasDepthEstimation, depthEstimation;
@dynamic pallasVidLabels;
@dynamic pallasDidLabels;
@dynamic hasSubtitlePosition, subtitlePosition;
@dynamic hasLuminance, luminance;
@dynamic titleInfo;

typedef struct TTVideoEnginePbVideoInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *message;
  NSString *videoId;
  NSString *mediaType;
  NSMutableArray *bigThumbsArray;
  NSString *barrageMaskURL;
  TTVideoEnginePbFallBackAPI *fallbackApi;
  TTVideoEnginePbSeekOffSet *seekTs;
  TTVideoEnginePbDNSInfo *dnsInfo;
  NSMutableArray *videoListArray;
  TTVideoEnginePbDynamicVideo *dynamicVideo;
  NSString *fullScreenStrategy;
  TTVideoEnginePbVolume *volume;
  GPBInt64Array *subtitleLangsArray;
  TTVideoEnginePbSandwich *sandwich;
  NSMutableArray *subtitleInfosArray;
  NSMutableArray *dubbedAudioListArray;
  NSString *effectBarrageURL;
  NSMutableArray *aiSpeedInfoArray;
  TTVideoEnginePbVideoStyle *videoStyle;
  TTVideoEnginePbDepthEstimation *depthEstimation;
  NSString *pallasVidLabels;
  NSString *pallasDidLabels;
  TTVideoEnginePbSubtitlePosition *subtitlePosition;
  TTVideoEnginePbLuminance *luminance;
  NSString *titleInfo;
  int64_t status;
  int64_t version;
  double videoDuration;
  int64_t URLExpire;
  int64_t popularityLevel;
} TTVideoEnginePbVideoInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "videoId",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_VideoId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, videoId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enableSsl",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_EnableSsl,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "videoDuration",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_VideoDuration,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, videoDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "mediaType",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_MediaType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, mediaType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URLExpire",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_URLExpire,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, URLExpire),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bigThumbsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbBigThumb),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_BigThumbsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, bigThumbsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "barrageMaskURL",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_BarrageMaskURL,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, barrageMaskURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fallbackApi",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbFallBackAPI),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_FallbackApi,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, fallbackApi),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "seekTs",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbSeekOffSet),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_SeekTs,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, seekTs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dnsInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbDNSInfo),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_DnsInfo,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, dnsInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "videoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbVideo),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_VideoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, videoListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dynamicVideo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbDynamicVideo),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_DynamicVideo,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, dynamicVideo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "enableAdaptive",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_EnableAdaptive,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fullScreenStrategy",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_FullScreenStrategy,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, fullScreenStrategy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "volume",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbVolume),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_Volume,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, volume),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "popularityLevel",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_PopularityLevel,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, popularityLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "subtitleLangsArray",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_SubtitleLangsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, subtitleLangsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sandwich",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbSandwich),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_Sandwich,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, sandwich),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subtitleInfosArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbSubtitleInfo),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_SubtitleInfosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, subtitleInfosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hasEmbeddedSubtitle",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_HasEmbeddedSubtitle,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "dubbedAudioListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbVideo),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_DubbedAudioListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, dubbedAudioListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effectBarrageURL",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_EffectBarrageURL,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, effectBarrageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "aiSpeedInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbAISpeedInfo),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_AiSpeedInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, aiSpeedInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "videoStyle",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbVideoStyle),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_VideoStyle,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, videoStyle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "depthEstimation",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbDepthEstimation),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_DepthEstimation,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, depthEstimation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pallasVidLabels",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_PallasVidLabels,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, pallasVidLabels),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pallasDidLabels",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_PallasDidLabels,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, pallasDidLabels),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subtitlePosition",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbSubtitlePosition),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_SubtitlePosition,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, subtitlePosition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "luminance",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbLuminance),
        .number = TTVideoEnginePbVideoInfo_FieldNumber_Luminance,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, luminance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "titleInfo",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoInfo_FieldNumber_TitleInfo,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoInfo__storage_, titleInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbVideoInfo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbVideoInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\010!!!\246\000\n\007\244\241!!\000\031\006\247\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbVolume

@implementation TTVideoEnginePbVolume

@dynamic loudness;
@dynamic peak;

typedef struct TTVideoEnginePbVolume__storage_ {
  uint32_t _has_storage_[1];
  double loudness;
  double peak;
} TTVideoEnginePbVolume__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loudness",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVolume_FieldNumber_Loudness,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVolume__storage_, loudness),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "peak",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVolume_FieldNumber_Peak,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVolume__storage_, peak),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbVolume class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbVolume__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbSandwich

@implementation TTVideoEnginePbSandwich

@dynamic top;
@dynamic bottom;
@dynamic left;
@dynamic right;

typedef struct TTVideoEnginePbSandwich__storage_ {
  uint32_t _has_storage_[1];
  double top;
  double bottom;
  double left;
  double right;
} TTVideoEnginePbSandwich__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "top",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSandwich_FieldNumber_Top,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSandwich__storage_, top),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "bottom",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSandwich_FieldNumber_Bottom,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSandwich__storage_, bottom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "left",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSandwich_FieldNumber_Left,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSandwich__storage_, left),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "right",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSandwich_FieldNumber_Right,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSandwich__storage_, right),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbSandwich class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbSandwich__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbSubtitleInfo

@implementation TTVideoEnginePbSubtitleInfo

@dynamic subId;
@dynamic languageId;
@dynamic format;
@dynamic version;
@dynamic size;

typedef struct TTVideoEnginePbSubtitleInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t subId;
  NSString *format;
  NSString *version;
  int64_t languageId;
  int64_t size;
} TTVideoEnginePbSubtitleInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subId",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSubtitleInfo_FieldNumber_SubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSubtitleInfo__storage_, subId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "languageId",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSubtitleInfo_FieldNumber_LanguageId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSubtitleInfo__storage_, languageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "format",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSubtitleInfo_FieldNumber_Format,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSubtitleInfo__storage_, format),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSubtitleInfo_FieldNumber_Version,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSubtitleInfo__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSubtitleInfo_FieldNumber_Size,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSubtitleInfo__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbSubtitleInfo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbSubtitleInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbFallBackAPI

@implementation TTVideoEnginePbFallBackAPI

@dynamic fallbackApi;
@dynamic keySeed;

typedef struct TTVideoEnginePbFallBackAPI__storage_ {
  uint32_t _has_storage_[1];
  NSString *fallbackApi;
  NSString *keySeed;
} TTVideoEnginePbFallBackAPI__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fallbackApi",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbFallBackAPI_FieldNumber_FallbackApi,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbFallBackAPI__storage_, fallbackApi),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "keySeed",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbFallBackAPI_FieldNumber_KeySeed,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbFallBackAPI__storage_, keySeed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbFallBackAPI class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbFallBackAPI__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbDynamicVideo

@implementation TTVideoEnginePbDynamicVideo

@dynamic dynamicType;
@dynamic dynamicVideoListArray, dynamicVideoListArray_Count;
@dynamic dynamicAudioListArray, dynamicAudioListArray_Count;
@dynamic mainURL;
@dynamic backupURL;
@dynamic dynamicDubbedAudiosArray, dynamicDubbedAudiosArray_Count;
@dynamic dynamicVrVideoListArray, dynamicVrVideoListArray_Count;

typedef struct TTVideoEnginePbDynamicVideo__storage_ {
  uint32_t _has_storage_[1];
  NSString *dynamicType;
  NSMutableArray *dynamicVideoListArray;
  NSMutableArray *dynamicAudioListArray;
  NSString *mainURL;
  NSString *backupURL;
  NSMutableArray *dynamicDubbedAudiosArray;
  NSMutableArray *dynamicVrVideoListArray;
} TTVideoEnginePbDynamicVideo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dynamicType",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbDynamicVideo_FieldNumber_DynamicType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbDynamicVideo__storage_, dynamicType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dynamicVideoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbVideo),
        .number = TTVideoEnginePbDynamicVideo_FieldNumber_DynamicVideoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbDynamicVideo__storage_, dynamicVideoListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dynamicAudioListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbAudio),
        .number = TTVideoEnginePbDynamicVideo_FieldNumber_DynamicAudioListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbDynamicVideo__storage_, dynamicAudioListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mainURL",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbDynamicVideo_FieldNumber_MainURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbDynamicVideo__storage_, mainURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backupURL",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbDynamicVideo_FieldNumber_BackupURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbDynamicVideo__storage_, backupURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dynamicDubbedAudiosArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbAudio),
        .number = TTVideoEnginePbDynamicVideo_FieldNumber_DynamicDubbedAudiosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbDynamicVideo__storage_, dynamicDubbedAudiosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dynamicVrVideoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbVRVideo),
        .number = TTVideoEnginePbDynamicVideo_FieldNumber_DynamicVrVideoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbDynamicVideo__storage_, dynamicVrVideoListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbDynamicVideo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbDynamicVideo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\004\004\241!!\000\005\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbVideoStyle

@implementation TTVideoEnginePbVideoStyle

@dynamic vstyle;
@dynamic dimension;
@dynamic projectionModel;
@dynamic viewSize;

typedef struct TTVideoEnginePbVideoStyle__storage_ {
  uint32_t _has_storage_[1];
  int64_t vstyle;
  int64_t dimension;
  int64_t projectionModel;
  int64_t viewSize;
} TTVideoEnginePbVideoStyle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "vstyle",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoStyle_FieldNumber_Vstyle,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoStyle__storage_, vstyle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dimension",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoStyle_FieldNumber_Dimension,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoStyle__storage_, dimension),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "projectionModel",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoStyle_FieldNumber_ProjectionModel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoStyle__storage_, projectionModel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "viewSize",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoStyle_FieldNumber_ViewSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoStyle__storage_, viewSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbVideoStyle class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbVideoStyle__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbVRView

@implementation TTVideoEnginePbVRView

@dynamic uriSuffix;
@dynamic hasBaseRangeInfo, baseRangeInfo;
@dynamic hasP2PInfo, p2PInfo;
@dynamic hasCheckInfo, checkInfo;
@dynamic viewportArray, viewportArray_Count;
@dynamic hasVideoMetaExtra, videoMetaExtra;

typedef struct TTVideoEnginePbVRView__storage_ {
  uint32_t _has_storage_[1];
  NSString *uriSuffix;
  TTVideoEnginePbBaseRangeInfo *baseRangeInfo;
  TTVideoEnginePbP2PInfo *p2PInfo;
  TTVideoEnginePbCheckInfo *checkInfo;
  GPBDoubleArray *viewportArray;
  TTVideoEnginePbVideoMetaExtra *videoMetaExtra;
} TTVideoEnginePbVRView__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uriSuffix",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVRView_FieldNumber_UriSuffix,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRView__storage_, uriSuffix),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "baseRangeInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbBaseRangeInfo),
        .number = TTVideoEnginePbVRView_FieldNumber_BaseRangeInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRView__storage_, baseRangeInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "p2PInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbP2PInfo),
        .number = TTVideoEnginePbVRView_FieldNumber_P2PInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRView__storage_, p2PInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "checkInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbCheckInfo),
        .number = TTVideoEnginePbVRView_FieldNumber_CheckInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRView__storage_, checkInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "viewportArray",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVRView_FieldNumber_ViewportArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRView__storage_, viewportArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "videoMetaExtra",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbVideoMetaExtra),
        .number = TTVideoEnginePbVRView_FieldNumber_VideoMetaExtra,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRView__storage_, videoMetaExtra),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbVRView class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbVRView__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\002!\244\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbVRVideo

@implementation TTVideoEnginePbVRVideo

@dynamic mainURL;
@dynamic backupURL;
@dynamic hasVideoMeta, videoMeta;
@dynamic hasEncryptInfo, encryptInfo;
@dynamic qualityType;
@dynamic languageId;
@dynamic languageCode;
@dynamic dubVersion;
@dynamic viewVideoListArray, viewVideoListArray_Count;

typedef struct TTVideoEnginePbVRVideo__storage_ {
  uint32_t _has_storage_[1];
  NSString *mainURL;
  NSString *backupURL;
  TTVideoEnginePbVideoMeta *videoMeta;
  TTVideoEnginePbEncryptInfo *encryptInfo;
  NSString *languageCode;
  NSString *dubVersion;
  NSMutableArray *viewVideoListArray;
  int64_t qualityType;
  int64_t languageId;
} TTVideoEnginePbVRVideo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mainURL",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVRVideo_FieldNumber_MainURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRVideo__storage_, mainURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backupURL",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVRVideo_FieldNumber_BackupURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRVideo__storage_, backupURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "videoMeta",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbVideoMeta),
        .number = TTVideoEnginePbVRVideo_FieldNumber_VideoMeta,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRVideo__storage_, videoMeta),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "encryptInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbEncryptInfo),
        .number = TTVideoEnginePbVRVideo_FieldNumber_EncryptInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRVideo__storage_, encryptInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "qualityType",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVRVideo_FieldNumber_QualityType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRVideo__storage_, qualityType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "languageId",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVRVideo_FieldNumber_LanguageId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRVideo__storage_, languageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVRVideo_FieldNumber_LanguageCode,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRVideo__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dubVersion",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVRVideo_FieldNumber_DubVersion,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRVideo__storage_, dubVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "viewVideoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbVRView),
        .number = TTVideoEnginePbVRVideo_FieldNumber_ViewVideoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVRVideo__storage_, viewVideoListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbVRVideo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbVRVideo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\004\241!!\000\002\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbVideo

@implementation TTVideoEnginePbVideo

@dynamic mainURL;
@dynamic backupURL;
@dynamic hasVideoMeta, videoMeta;
@dynamic hasEncryptInfo, encryptInfo;
@dynamic hasBaseRangeInfo, baseRangeInfo;
@dynamic hasP2PInfo, p2PInfo;
@dynamic hasCheckInfo, checkInfo;
@dynamic hasBarrageInfo, barrageInfo;
@dynamic hasFitterInfo, fitterInfo;
@dynamic hasVolume, volume;
@dynamic qualityType;
@dynamic pktOffset;
@dynamic languageId;
@dynamic languageCode;
@dynamic dubVersion;
@dynamic pallasFidLabels;
@dynamic extraAttrs;

typedef struct TTVideoEnginePbVideo__storage_ {
  uint32_t _has_storage_[1];
  NSString *mainURL;
  NSString *backupURL;
  TTVideoEnginePbVideoMeta *videoMeta;
  TTVideoEnginePbEncryptInfo *encryptInfo;
  TTVideoEnginePbBaseRangeInfo *baseRangeInfo;
  TTVideoEnginePbP2PInfo *p2PInfo;
  TTVideoEnginePbCheckInfo *checkInfo;
  TTVideoEnginePbBarrageInfo *barrageInfo;
  TTVideoEnginePbFitterInfo *fitterInfo;
  TTVideoEnginePbVolume *volume;
  NSString *pktOffset;
  NSString *languageCode;
  NSString *dubVersion;
  NSString *pallasFidLabels;
  NSString *extraAttrs;
  int64_t qualityType;
  int64_t languageId;
} TTVideoEnginePbVideo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mainURL",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideo_FieldNumber_MainURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, mainURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backupURL",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideo_FieldNumber_BackupURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, backupURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "videoMeta",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbVideoMeta),
        .number = TTVideoEnginePbVideo_FieldNumber_VideoMeta,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, videoMeta),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "encryptInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbEncryptInfo),
        .number = TTVideoEnginePbVideo_FieldNumber_EncryptInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, encryptInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "baseRangeInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbBaseRangeInfo),
        .number = TTVideoEnginePbVideo_FieldNumber_BaseRangeInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, baseRangeInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "p2PInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbP2PInfo),
        .number = TTVideoEnginePbVideo_FieldNumber_P2PInfo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, p2PInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "checkInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbCheckInfo),
        .number = TTVideoEnginePbVideo_FieldNumber_CheckInfo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, checkInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "barrageInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbBarrageInfo),
        .number = TTVideoEnginePbVideo_FieldNumber_BarrageInfo,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, barrageInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fitterInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbFitterInfo),
        .number = TTVideoEnginePbVideo_FieldNumber_FitterInfo,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, fitterInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "volume",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbVolume),
        .number = TTVideoEnginePbVideo_FieldNumber_Volume,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, volume),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "qualityType",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideo_FieldNumber_QualityType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, qualityType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pktOffset",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideo_FieldNumber_PktOffset,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, pktOffset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageId",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideo_FieldNumber_LanguageId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, languageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideo_FieldNumber_LanguageCode,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dubVersion",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideo_FieldNumber_DubVersion,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, dubVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pallasFidLabels",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideo_FieldNumber_PallasFidLabels,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, pallasFidLabels),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extraAttrs",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideo_FieldNumber_ExtraAttrs,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideo__storage_, extraAttrs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbVideo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbVideo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\004\241!!\000\002\006\241!!\000\006\002!\244\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbAudio

@implementation TTVideoEnginePbAudio

@dynamic mainURL;
@dynamic backupURL;
@dynamic hasAudioMeta, audioMeta;
@dynamic hasEncryptInfo, encryptInfo;
@dynamic hasBaseRangeInfo, baseRangeInfo;
@dynamic hasP2PInfo, p2PInfo;
@dynamic hasCheckInfo, checkInfo;
@dynamic hasFitterInfo, fitterInfo;
@dynamic hasVolume, volume;
@dynamic pktOffset;
@dynamic languageId;
@dynamic languageCode;
@dynamic dubVersion;
@dynamic extraAttrs;

typedef struct TTVideoEnginePbAudio__storage_ {
  uint32_t _has_storage_[1];
  NSString *mainURL;
  NSString *backupURL;
  TTVideoEnginePbAudioMeta *audioMeta;
  TTVideoEnginePbEncryptInfo *encryptInfo;
  TTVideoEnginePbBaseRangeInfo *baseRangeInfo;
  TTVideoEnginePbP2PInfo *p2PInfo;
  TTVideoEnginePbCheckInfo *checkInfo;
  TTVideoEnginePbFitterInfo *fitterInfo;
  TTVideoEnginePbVolume *volume;
  NSString *pktOffset;
  NSString *languageCode;
  NSString *dubVersion;
  NSString *extraAttrs;
  int64_t languageId;
} TTVideoEnginePbAudio__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mainURL",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudio_FieldNumber_MainURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudio__storage_, mainURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backupURL",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudio_FieldNumber_BackupURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudio__storage_, backupURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audioMeta",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbAudioMeta),
        .number = TTVideoEnginePbAudio_FieldNumber_AudioMeta,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudio__storage_, audioMeta),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "encryptInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbEncryptInfo),
        .number = TTVideoEnginePbAudio_FieldNumber_EncryptInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudio__storage_, encryptInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "baseRangeInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbBaseRangeInfo),
        .number = TTVideoEnginePbAudio_FieldNumber_BaseRangeInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudio__storage_, baseRangeInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "p2PInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbP2PInfo),
        .number = TTVideoEnginePbAudio_FieldNumber_P2PInfo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudio__storage_, p2PInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "checkInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbCheckInfo),
        .number = TTVideoEnginePbAudio_FieldNumber_CheckInfo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudio__storage_, checkInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fitterInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbFitterInfo),
        .number = TTVideoEnginePbAudio_FieldNumber_FitterInfo,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudio__storage_, fitterInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "volume",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbVolume),
        .number = TTVideoEnginePbAudio_FieldNumber_Volume,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudio__storage_, volume),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pktOffset",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudio_FieldNumber_PktOffset,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudio__storage_, pktOffset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageId",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudio_FieldNumber_LanguageId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudio__storage_, languageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudio_FieldNumber_LanguageCode,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudio__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dubVersion",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudio_FieldNumber_DubVersion,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudio__storage_, dubVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extraAttrs",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudio_FieldNumber_ExtraAttrs,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudio__storage_, extraAttrs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbAudio class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbAudio__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\004\241!!\000\002\006\241!!\000\006\002!\244\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbVideoMeta

@implementation TTVideoEnginePbVideoMeta

@dynamic definition;
@dynamic quality;
@dynamic qualityDesc;
@dynamic vtype;
@dynamic vwidth;
@dynamic vheight;
@dynamic bitrate;
@dynamic codecType;
@dynamic size;
@dynamic fileId;
@dynamic fps;
@dynamic fileHash;
@dynamic realBitrate;
@dynamic audioChannels;
@dynamic audioLayout;

typedef struct TTVideoEnginePbVideoMeta__storage_ {
  uint32_t _has_storage_[1];
  NSString *definition;
  NSString *quality;
  NSString *qualityDesc;
  NSString *vtype;
  NSString *codecType;
  NSString *fileId;
  NSString *fileHash;
  NSString *audioChannels;
  NSString *audioLayout;
  int64_t vwidth;
  int64_t vheight;
  int64_t bitrate;
  int64_t size;
  int64_t fps;
  int64_t realBitrate;
} TTVideoEnginePbVideoMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "definition",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_Definition,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, definition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "quality",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_Quality,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, quality),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "qualityDesc",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_QualityDesc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, qualityDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "vtype",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_Vtype,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, vtype),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "vwidth",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_Vwidth,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, vwidth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "vheight",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_Vheight,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, vheight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bitrate",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_Bitrate,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, bitrate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "codecType",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_CodecType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, codecType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_Size,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fileId",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_FileId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, fileId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fps",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_Fps,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, fps),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fileHash",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_FileHash,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, fileHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "realBitrate",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_RealBitrate,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, realBitrate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "audioChannels",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_AudioChannels,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, audioChannels),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audioLayout",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMeta_FieldNumber_AudioLayout,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMeta__storage_, audioLayout),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbVideoMeta class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbVideoMeta__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbVideoMetaExtra

@implementation TTVideoEnginePbVideoMetaExtra

@dynamic bitrate;
@dynamic size;
@dynamic fileHash;
@dynamic fileId;

typedef struct TTVideoEnginePbVideoMetaExtra__storage_ {
  uint32_t _has_storage_[1];
  NSString *fileHash;
  NSString *fileId;
  int64_t bitrate;
  int64_t size;
} TTVideoEnginePbVideoMetaExtra__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bitrate",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMetaExtra_FieldNumber_Bitrate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMetaExtra__storage_, bitrate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMetaExtra_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMetaExtra__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fileHash",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMetaExtra_FieldNumber_FileHash,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMetaExtra__storage_, fileHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileId",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbVideoMetaExtra_FieldNumber_FileId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbVideoMetaExtra__storage_, fileId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbVideoMetaExtra class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbVideoMetaExtra__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbAudioMeta

@implementation TTVideoEnginePbAudioMeta

@dynamic definition;
@dynamic quality;
@dynamic qualityDesc;
@dynamic atype;
@dynamic bitrate;
@dynamic codecType;
@dynamic size;
@dynamic fileId;
@dynamic fileHash;
@dynamic realBitrate;
@dynamic audioChannels;
@dynamic audioLayout;

typedef struct TTVideoEnginePbAudioMeta__storage_ {
  uint32_t _has_storage_[1];
  NSString *definition;
  NSString *quality;
  NSString *qualityDesc;
  NSString *atype;
  NSString *codecType;
  NSString *fileId;
  NSString *fileHash;
  NSString *audioChannels;
  NSString *audioLayout;
  int64_t bitrate;
  int64_t size;
  int64_t realBitrate;
} TTVideoEnginePbAudioMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "definition",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudioMeta_FieldNumber_Definition,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudioMeta__storage_, definition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "quality",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudioMeta_FieldNumber_Quality,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudioMeta__storage_, quality),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "qualityDesc",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudioMeta_FieldNumber_QualityDesc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudioMeta__storage_, qualityDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "atype",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudioMeta_FieldNumber_Atype,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudioMeta__storage_, atype),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bitrate",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudioMeta_FieldNumber_Bitrate,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudioMeta__storage_, bitrate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "codecType",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudioMeta_FieldNumber_CodecType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudioMeta__storage_, codecType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudioMeta_FieldNumber_Size,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudioMeta__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fileId",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudioMeta_FieldNumber_FileId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudioMeta__storage_, fileId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileHash",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudioMeta_FieldNumber_FileHash,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudioMeta__storage_, fileHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "realBitrate",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudioMeta_FieldNumber_RealBitrate,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudioMeta__storage_, realBitrate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "audioChannels",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudioMeta_FieldNumber_AudioChannels,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudioMeta__storage_, audioChannels),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audioLayout",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbAudioMeta_FieldNumber_AudioLayout,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(TTVideoEnginePbAudioMeta__storage_, audioLayout),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbAudioMeta class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbAudioMeta__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbEncryptInfo

@implementation TTVideoEnginePbEncryptInfo

@dynamic encrypt;
@dynamic kid;
@dynamic spadeA;
@dynamic encryptionMethod;

typedef struct TTVideoEnginePbEncryptInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *kid;
  NSString *spadeA;
  NSString *encryptionMethod;
} TTVideoEnginePbEncryptInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "encrypt",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbEncryptInfo_FieldNumber_Encrypt,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "kid",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbEncryptInfo_FieldNumber_Kid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbEncryptInfo__storage_, kid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "spadeA",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbEncryptInfo_FieldNumber_SpadeA,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbEncryptInfo__storage_, spadeA),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "encryptionMethod",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbEncryptInfo_FieldNumber_EncryptionMethod,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TTVideoEnginePbEncryptInfo__storage_, encryptionMethod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbEncryptInfo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbEncryptInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbP2PInfo

@implementation TTVideoEnginePbP2PInfo

@dynamic p2PVerifyURL;

typedef struct TTVideoEnginePbP2PInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *p2PVerifyURL;
} TTVideoEnginePbP2PInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "p2PVerifyURL",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbP2PInfo_FieldNumber_P2PVerifyURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbP2PInfo__storage_, p2PVerifyURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbP2PInfo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbP2PInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\002!\246\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbBaseRangeInfo

@implementation TTVideoEnginePbBaseRangeInfo

@dynamic initRange;
@dynamic indexRange;
@dynamic firstMoofRange;

typedef struct TTVideoEnginePbBaseRangeInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *initRange;
  NSString *indexRange;
  NSString *firstMoofRange;
} TTVideoEnginePbBaseRangeInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "initRange",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseRangeInfo_FieldNumber_InitRange,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseRangeInfo__storage_, initRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "indexRange",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseRangeInfo_FieldNumber_IndexRange,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseRangeInfo__storage_, indexRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firstMoofRange",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBaseRangeInfo_FieldNumber_FirstMoofRange,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBaseRangeInfo__storage_, firstMoofRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbBaseRangeInfo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbBaseRangeInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbBarrageInfo

@implementation TTVideoEnginePbBarrageInfo

@dynamic barrageMaskOffset;

typedef struct TTVideoEnginePbBarrageInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *barrageMaskOffset;
} TTVideoEnginePbBarrageInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "barrageMaskOffset",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBarrageInfo_FieldNumber_BarrageMaskOffset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBarrageInfo__storage_, barrageMaskOffset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbBarrageInfo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbBarrageInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbCheckInfo

@implementation TTVideoEnginePbCheckInfo

@dynamic checkInfo;

typedef struct TTVideoEnginePbCheckInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *checkInfo;
} TTVideoEnginePbCheckInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "checkInfo",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbCheckInfo_FieldNumber_CheckInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbCheckInfo__storage_, checkInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbCheckInfo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbCheckInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbBigThumb

@implementation TTVideoEnginePbBigThumb

@dynamic imgNum;
@dynamic imgUri;
@dynamic imgURL;
@dynamic imgXSize;
@dynamic imgYSize;
@dynamic imgXLen;
@dynamic imgYLen;
@dynamic duration;
@dynamic interval;
@dynamic fext;
@dynamic imgUrlsArray, imgUrlsArray_Count;

typedef struct TTVideoEnginePbBigThumb__storage_ {
  uint32_t _has_storage_[1];
  NSString *imgUri;
  NSString *imgURL;
  NSString *fext;
  NSMutableArray *imgUrlsArray;
  int64_t imgNum;
  int64_t imgXSize;
  int64_t imgYSize;
  int64_t imgXLen;
  int64_t imgYLen;
  double duration;
  double interval;
} TTVideoEnginePbBigThumb__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imgNum",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBigThumb_FieldNumber_ImgNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBigThumb__storage_, imgNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "imgUri",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBigThumb_FieldNumber_ImgUri,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBigThumb__storage_, imgUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgURL",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBigThumb_FieldNumber_ImgURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBigThumb__storage_, imgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgXSize",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBigThumb_FieldNumber_ImgXSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBigThumb__storage_, imgXSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "imgYSize",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBigThumb_FieldNumber_ImgYSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBigThumb__storage_, imgYSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "imgXLen",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBigThumb_FieldNumber_ImgXLen,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBigThumb__storage_, imgXLen),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "imgYLen",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBigThumb_FieldNumber_ImgYLen,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBigThumb__storage_, imgYLen),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBigThumb_FieldNumber_Duration,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBigThumb__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "interval",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBigThumb_FieldNumber_Interval,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBigThumb__storage_, interval),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "fext",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBigThumb_FieldNumber_Fext,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBigThumb__storage_, fext),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgUrlsArray",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbBigThumb_FieldNumber_ImgUrlsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbBigThumb__storage_, imgUrlsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbBigThumb class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbBigThumb__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\003\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbFitterInfo

@implementation TTVideoEnginePbFitterInfo

@dynamic funcParamsArray, funcParamsArray_Count;
@dynamic headerSize;
@dynamic duration;
@dynamic funcMethod;

typedef struct TTVideoEnginePbFitterInfo__storage_ {
  uint32_t _has_storage_[1];
  GPBDoubleArray *funcParamsArray;
  int64_t headerSize;
  double duration;
  int64_t funcMethod;
} TTVideoEnginePbFitterInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "funcParamsArray",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbFitterInfo_FieldNumber_FuncParamsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbFitterInfo__storage_, funcParamsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "headerSize",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbFitterInfo_FieldNumber_HeaderSize,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbFitterInfo__storage_, headerSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbFitterInfo_FieldNumber_Duration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbFitterInfo__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "funcMethod",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbFitterInfo_FieldNumber_FuncMethod,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TTVideoEnginePbFitterInfo__storage_, funcMethod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbFitterInfo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbFitterInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbSeekOffSet

@implementation TTVideoEnginePbSeekOffSet

@dynamic opening;
@dynamic ending;

typedef struct TTVideoEnginePbSeekOffSet__storage_ {
  uint32_t _has_storage_[1];
  double opening;
  double ending;
} TTVideoEnginePbSeekOffSet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opening",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSeekOffSet_FieldNumber_Opening,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSeekOffSet__storage_, opening),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "ending",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbSeekOffSet_FieldNumber_Ending,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TTVideoEnginePbSeekOffSet__storage_, ending),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbSeekOffSet class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbSeekOffSet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbDNS

@implementation TTVideoEnginePbDNS

@dynamic dnsArray, dnsArray_Count;

typedef struct TTVideoEnginePbDNS__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *dnsArray;
} TTVideoEnginePbDNS__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dnsArray",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbDNS_FieldNumber_DnsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbDNS__storage_, dnsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbDNS class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbDNS__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TTVideoEnginePbDNSInfo

@implementation TTVideoEnginePbDNSInfo

@dynamic dnsInfo, dnsInfo_Count;
@dynamic dnsTime;

typedef struct TTVideoEnginePbDNSInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *dnsInfo;
  int64_t dnsTime;
} TTVideoEnginePbDNSInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dnsInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TTVideoEnginePbDNS),
        .number = TTVideoEnginePbDNSInfo_FieldNumber_DnsInfo,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TTVideoEnginePbDNSInfo__storage_, dnsInfo),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dnsTime",
        .dataTypeSpecific.className = NULL,
        .number = TTVideoEnginePbDNSInfo_FieldNumber_DnsTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TTVideoEnginePbDNSInfo__storage_, dnsTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TTVideoEnginePbDNSInfo class]
                                     rootClass:[TTVideoEnginePbVideoModelRoot class]
                                          file:TTVideoEnginePbVideoModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TTVideoEnginePbDNSInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
