// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/meego.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/
// swiftlint:disable all
import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Meego_MeegoPushMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var topicName: String {
    get {return _topicName ?? String()}
    set {_topicName = newValue}
  }
  /// Returns true if `topicName` has been explicitly set.
  var hasTopicName: Bool {return self._topicName != nil}
  /// Clears the value of `topicName`. Subsequent reads from it will return its default value.
  mutating func clearTopicName() {self._topicName = nil}

  public var topicType: Int32 {
    get {return _topicType ?? 0}
    set {_topicType = newValue}
  }
  /// Returns true if `topicType` has been explicitly set.
  var hasTopicType: Bool {return self._topicType != nil}
  /// Clears the value of `topicType`. Subsequent reads from it will return its default value.
  mutating func clearTopicType() {self._topicType = nil}

  public var traceID: String {
    get {return _traceID ?? String()}
    set {_traceID = newValue}
  }
  /// Returns true if `traceID` has been explicitly set.
  var hasTraceID: Bool {return self._traceID != nil}
  /// Clears the value of `traceID`. Subsequent reads from it will return its default value.
  mutating func clearTraceID() {self._traceID = nil}

  public var timestamp: Int64 {
    get {return _timestamp ?? 0}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  var seqID: Int64 {
    get {return _seqID ?? 0}
    set {_seqID = newValue}
  }
  /// Returns true if `seqID` has been explicitly set.
  var hasSeqID: Bool {return self._seqID != nil}
  /// Clears the value of `seqID`. Subsequent reads from it will return its default value.
  mutating func clearSeqID() {self._seqID = nil}

  var content: Data {
    get {return _content ?? SwiftProtobuf.Internal.emptyData}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  mutating func clearContent() {self._content = nil}
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
    fileprivate var _topicName: String?
    fileprivate var _topicType: Int32?
    fileprivate var _traceID: String?
    fileprivate var _timestamp: Int64?
    fileprivate var _seqID: Int64?
    fileprivate var _content: Data?
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "meego"

extension Meego_MeegoPushMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".MeegoPushMessage"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "topic_name"),
    2: .standard(proto: "topic_type"),
    3: .standard(proto: "trace_id"),
    4: .same(proto: "timestamp"),
    5: .standard(proto: "seq_id"),
    6: .same(proto: "content")
  ]

  public var isInitialized: Bool {
    if self._topicName == nil {return false}
    if self._topicType == nil {return false}
    if self._traceID == nil {return false}
    if self._timestamp == nil {return false}
    if self._seqID == nil {return false}
    return true
  }

    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._topicName)
      case 2: try decoder.decodeSingularInt32Field(value: &self._topicType)
      case 3: try decoder.decodeSingularStringField(value: &self._traceID)
      case 4: try decoder.decodeSingularInt64Field(value: &self._timestamp)
      case 5: try decoder.decodeSingularInt64Field(value: &self._seqID)
      case 6: try decoder.decodeSingularBytesField(value: &self._content)
      default: break
      }
    }
  }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._topicName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._topicType {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._traceID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._timestamp {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
    }
    if let v = self._seqID {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
    }
    if let v = self._content {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

    public static func ==(lhs: Meego_MeegoPushMessage, rhs: Meego_MeegoPushMessage) -> Bool {
    if lhs._topicName != rhs._topicName {return false}
    if lhs._topicType != rhs._topicType {return false}
    if lhs._traceID != rhs._traceID {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._seqID != rhs._seqID {return false}
    if lhs._content != rhs._content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
// swiftlint:enable all
