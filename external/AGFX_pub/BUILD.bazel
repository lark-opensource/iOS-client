load('@build_bazel_rules_apple//apple:ios.bzl', 'ios_static_framework')
load(
  "@rules_pods//BazelExtensions:extensions.bzl",
  "gen_includes",
  "module_map",
  "gen_hmapsource",
  "gen_hmap",
  "run_script_phase",
  "objc_package",
  "resource_provider",
  "uniq_filegroup"
)
load('@main_project//.bitsky/common:bitsky_common.bzl', 'defs_package_features', 'defs_external_objc_library', 'defs_external_swift_library', 'defs_extension_objc_library', 'defs_extension_swift_library', 'define_minimum_os_version')
package(features = defs_package_features)
# Add a config setting release for compilation mode
# Assume that people are using `opt` for release mode
# see the bazel user manual for more information
# https://docs.bazel.build/versions/master/be/general.html#config_setting
load(
  "@bazel_skylib//lib:selects.bzl",
  "selects"
)
config_setting(
  name = "release",
  values = {
    "compilation_mode": "opt"
  }
)
config_setting(
  name = "iosCase",
  values = {
    "apple_platform_type": "ios"
  }
)
config_setting(
  name = "osxCase",
  values = {
    "apple_platform_type": "macos"
  }
)
config_setting(
  name = "tvosCase",
  values = {
    "apple_platform_type": "tvos"
  }
)
config_setting(
  name = "watchosCase",
  values = {
    "apple_platform_type": "watchos"
  }
)
config_setting(
  name = "x86_64",
  values = {
    "ios_multi_cpus": "x86_64"
  }
)
config_setting(
  name = "i386",
  values = {
    "ios_multi_cpus": "i386"
  }
)
config_setting(
  name = "armv7",
  values = {
    "ios_multi_cpus": "armv7"
  }
)
config_setting(
  name = "arm64",
  values = {
    "ios_multi_cpus": "arm64"
  }
)
config_setting(
  name = "sim_arm64",
  values = {
    "ios_multi_cpus": "sim_arm64"
  }
)
selects.config_setting_group(
  name = "sim_archs",
  match_any = [
    ":x86_64",
    ":i386",
    ":sim_arm64"
  ]
)
selects.config_setting_group(
  name = "x86",
  match_any = [
    ":x86_64",
    ":i386"
  ]
)
selects.config_setting_group(
  name = "arm",
  match_any = [
    ":arm64",
    ":armv7"
  ]
)
selects.config_setting_group(
  name = "iosDevice",
  match_all = [
    ":arm",
    ":iosCase"
  ]
)
selects.config_setting_group(
  name = "iosSimulator",
  match_all = [
    ":sim_archs",
    ":iosCase"
  ]
)
selects.config_setting_group(
  name = "watchosDevice",
  match_all = [
    ":arm",
    ":watchosCase"
  ]
)
selects.config_setting_group(
  name = "watchosSimulator",
  match_all = [
    ":x86",
    ":watchosCase"
  ]
)
selects.config_setting_group(
  name = "tvosDevice",
  match_all = [
    ":arm",
    ":tvosCase"
  ]
)
selects.config_setting_group(
  name = "tvosSimulator",
  match_all = [
    ":x86",
    ":tvosCase"
  ]
)
filegroup(
  name = "AGFX_pub_pod_hdrs",
  srcs = [
    ":AGFX_pub_root_pod_hdrs",
    ":RenderLib_pod_hdrs",
    ":AGFXLib_pod_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)

gen_includes(
  name = "AGFX_pub_private_includes",
  include = [
    "external/AGFX_pub/pod_support/Headers/Private/AGFX_pub/"
  ],
  deps = [],
  external_name = "AGFX_pub"
)
gen_includes(
  name = "AGFX_pub_public_includes",
  include = [
    "external/AGFX_pub/pod_support/Headers/Public/AGFX_pub/"
  ],
  deps = [],
  external_name = "AGFX_pub"
)
filegroup(
  name = "_AGFX_pub_hdrs",
  srcs = [
    ":AGFX_pub_root_hdrs",
    ":RenderLib_hdrs",
    ":AGFXLib_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_hmapsource(
  name = "AGFX_pub_xcode_hmapsource",
  hdrs = [
    ":AGFX_pub_root_hdrs",
    ":AGFXLib_hdrs",
    ":RenderLib_hdrs"
  ],
  namespace = False,
  visibility = [
    "//visibility:public"
  ]
)
gen_hmap(
  name = "AGFX_pub_xcode_hmap",
  dep = ":AGFX_pub_xcode_hmapsource",
  visibility = [
    "//visibility:public"
  ]
)
exports_files(glob(["pod_support/Headers/Public/AGFX_pub/*-bitsky-generated.modulemap", "pod_support/Headers/Public/AGFX_pub/*-bitsky-generated-umbrella.h"]))
objc_import(
  name = "AGFX_pub_RenderLib_VendoredLibraries",
  archives = [
    "lib/iOS/Release/libAGFX.a"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "AGFX_pub_custom_includes",
  include = select(
    {
      "//conditions:default": [
        "external/Protobuf/objectivec",
        "external/AGFX_pub/pod_support/Headers/Public/AGFX_pub"
      ],
      ":osxCase": [
        "external/Protobuf/objectivec"
      ],
      ":tvosCase": [
        "external/Protobuf/objectivec"
      ],
      ":watchosCase": [
        "external/Protobuf/objectivec"
      ]
    }
  ),
  include_files = [],
  external_name = "AGFX_pub",
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "AGFX_pub_xcode_hmap_includes",
  include = [],
  include_files = [
    ":AGFX_pub_xcode_hmap"
  ],
  external_name = "AGFX_pub",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "AGFX_pub_root_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "AGFX_pub_root_pod_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "AGFX_pub_swift_interface",
  deps = [],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "AGFX_pub_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  copts = select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "AGFX_pub_module_map",
  module_map = "pod_support/Headers/Public/AGFX_pub/AGFX_pub-bazel-generated.modulemap",
  umbrella_hdr = "pod_support/Headers/Public/AGFX_pub/AGFX_pub-bazel-generated-umbrella.h",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "AGFX_pub_oc",
  enable_modules = 1,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [
    "AGFX_pub_root_hdrs"
  ],
  pch = "@rules_pods//BazelExtensions:common.pch",
  sdk_frameworks = [
    "AVFoundation",
    "CoreMedia",
    "Accelerate",
    "Foundation",
    "GLKit"
  ],
  sdk_dylibs = [
    "c++",
    "z"
  ],
  deps = [
    ":AGFX_pub_xcode_hmap_includes",
    "@PodHeaders//:PodHeaders_namespace_interface",
    ":AGFX_pub_private_includes",
    ":AGFX_pub_custom_includes",
    "@PodHeaders//:PodHeaders_public_interface",
    "@PodHeaders//:PodHeaders_global_objc_interface",
    "@gaia_lib_publish//:gaia_objc_interface",
    "@gaia_lib_publish//:Math_objc_interface",
    "@gaia_lib_publish//:Thread_objc_interface",
    "@gaia_lib_publish//:gaia_swift_interface",
    "@gaia_lib_publish//:Math_swift_interface",
    "@gaia_lib_publish//:Thread_swift_interface",
    ":AGFX_pub_objc_interface",
    "@gaia_lib_publish//:gaia_module_map",
    "@gaia_lib_publish//:Math_module_map",
    "@gaia_lib_publish//:Thread_module_map"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
    "-I."
  ] + select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  cxxopts = [
    "-std=gnu++14"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "AGFX_pub",
  deps = [
    ":AGFX_pub_oc"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
ios_static_framework(
  name = "AGFX_pub_lib",
  deps = [
    ":AGFX_pub"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RenderLib_hdrs",
  srcs = [
    "inc/Runtime/RenderLib/ComputerDevice.h",
    "inc/Runtime/RenderLib/FlipPatcher_texture_info.h",
    "inc/Runtime/RenderLib/GLES_API_Logger.h",
    "inc/Runtime/RenderLib/GLES_API_Player.h",
    "inc/Runtime/RenderLib/GPDevice.h",
    "inc/Runtime/RenderLib/GPDeviceType.h",
    "inc/Runtime/RenderLib/MaterialType.h",
    "inc/Runtime/RenderLib/PatcherUtils.h",
    "inc/Runtime/RenderLib/PipelineState.h",
    "inc/Runtime/RenderLib/PropertyBlock.h",
    "inc/Runtime/RenderLib/RendererDevice.h",
    "inc/Runtime/RenderLib/RendererDeviceTypes.h",
    "inc/Runtime/RenderLib/ShaderPatcher.h",
    "inc/Runtime/RenderLib/Utils.h",
    "inc/Runtime/RenderLib/VertexAttribDesc.h",
    "inc/Runtime/RenderLib/logger_player_env.h"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RenderLib_pod_hdrs",
  srcs = [
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/ComputerDevice.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/FlipPatcher_texture_info.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/GLES_API_Logger.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/GLES_API_Player.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/GPDevice.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/GPDeviceType.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/MaterialType.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/PatcherUtils.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/PipelineState.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/PropertyBlock.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/RendererDevice.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/RendererDeviceTypes.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/ShaderPatcher.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/Utils.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/VertexAttribDesc.h",
    "pod_support/Headers/Private/AGFX_pub/Runtime/RenderLib/logger_player_env.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/ComputerDevice.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/FlipPatcher_texture_info.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/GLES_API_Logger.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/GLES_API_Player.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/GPDevice.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/GPDeviceType.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/MaterialType.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/PatcherUtils.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/PipelineState.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/PropertyBlock.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/RendererDevice.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/RendererDeviceTypes.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/ShaderPatcher.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/Utils.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/VertexAttribDesc.h",
    "pod_support/Headers/Public/AGFX_pub/Runtime/RenderLib/logger_player_env.h"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "RenderLib_swift_interface",
  deps = [],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "RenderLib_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  copts = select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "RenderLib_module_map",
  module_map = "pod_support/Headers/Public/AGFX_pub/AGFX_pub_RenderLib-bazel-generated.modulemap",
  umbrella_hdr = "pod_support/Headers/Public/AGFX_pub/AGFX_pub_RenderLib-bazel-generated-umbrella.h",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "RenderLib_oc",
  enable_modules = 1,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [
    "RenderLib_hdrs"
  ],
  pch = "@rules_pods//BazelExtensions:common.pch",
  sdk_frameworks = [
    "AVFoundation",
    "CoreMedia",
    "Accelerate",
    "Foundation",
    "GLKit"
  ],
  sdk_dylibs = [
    "c++",
    "z"
  ],
  deps = [
    ":AGFX_pub_xcode_hmap_includes",
    "@PodHeaders//:PodHeaders_namespace_interface",
    ":AGFX_pub_private_includes",
    ":AGFX_pub_custom_includes",
    "@PodHeaders//:PodHeaders_public_interface",
    "@PodHeaders//:PodHeaders_global_objc_interface",
    "@gaia_lib_publish//:gaia_objc_interface",
    "@gaia_lib_publish//:Math_objc_interface",
    "@gaia_lib_publish//:Thread_objc_interface",
    "@gaia_lib_publish//:gaia_swift_interface",
    "@gaia_lib_publish//:Math_swift_interface",
    "@gaia_lib_publish//:Thread_swift_interface",
    ":AGFX_pub_RenderLib_VendoredLibraries",
    ":RenderLib_objc_interface",
    "@gaia_lib_publish//:gaia_module_map",
    "@gaia_lib_publish//:Math_module_map",
    "@gaia_lib_publish//:Thread_module_map"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
    "-I."
  ] + select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  cxxopts = [
    "-std=gnu++14"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "RenderLib",
  deps = [
    ":RenderLib_oc"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
ios_static_framework(
  name = "RenderLib_lib",
  deps = [
    ":RenderLib"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "AGFXLib_hdrs",
  srcs = [
    "inc/AGFXLib/Context.h",
    "inc/AGFXLib/PBFConfig.h",
    "inc/AGFXLib/PBFSimulator.h",
    "inc/AGFXLib/SSFR.es31.h",
    "inc/AGFXLib/SSFR.h",
    "inc/AGFXLib/SSFR.shader.h"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "AGFXLib_pod_hdrs",
  srcs = [
    "pod_support/Headers/Private/AGFX_pub/AGFXLib/Context.h",
    "pod_support/Headers/Private/AGFX_pub/AGFXLib/PBFConfig.h",
    "pod_support/Headers/Private/AGFX_pub/AGFXLib/PBFSimulator.h",
    "pod_support/Headers/Private/AGFX_pub/AGFXLib/SSFR.es31.h",
    "pod_support/Headers/Private/AGFX_pub/AGFXLib/SSFR.h",
    "pod_support/Headers/Private/AGFX_pub/AGFXLib/SSFR.shader.h",
    "pod_support/Headers/Public/AGFX_pub/AGFXLib/Context.h",
    "pod_support/Headers/Public/AGFX_pub/AGFXLib/PBFConfig.h",
    "pod_support/Headers/Public/AGFX_pub/AGFXLib/PBFSimulator.h",
    "pod_support/Headers/Public/AGFX_pub/AGFXLib/SSFR.es31.h",
    "pod_support/Headers/Public/AGFX_pub/AGFXLib/SSFR.h",
    "pod_support/Headers/Public/AGFX_pub/AGFXLib/SSFR.shader.h"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "AGFXLib_swift_interface",
  deps = [],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "AGFXLib_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  copts = select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "AGFXLib_module_map",
  module_map = "pod_support/Headers/Public/AGFX_pub/AGFX_pub_AGFXLib-bazel-generated.modulemap",
  umbrella_hdr = "pod_support/Headers/Public/AGFX_pub/AGFX_pub_AGFXLib-bazel-generated-umbrella.h",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "AGFXLib_oc",
  enable_modules = 1,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [
    "AGFXLib_hdrs"
  ],
  pch = "@rules_pods//BazelExtensions:common.pch",
  sdk_frameworks = [
    "AVFoundation",
    "CoreMedia",
    "Accelerate",
    "Foundation",
    "GLKit"
  ],
  sdk_dylibs = [
    "c++",
    "z"
  ],
  deps = [
    ":AGFX_pub_xcode_hmap_includes",
    "@PodHeaders//:PodHeaders_namespace_interface",
    ":AGFX_pub_private_includes",
    ":AGFX_pub_custom_includes",
    "@PodHeaders//:PodHeaders_public_interface",
    "@PodHeaders//:PodHeaders_global_objc_interface",
    "@gaia_lib_publish//:gaia_objc_interface",
    "@gaia_lib_publish//:Math_objc_interface",
    "@gaia_lib_publish//:Thread_objc_interface",
    "@gaia_lib_publish//:gaia_swift_interface",
    "@gaia_lib_publish//:Math_swift_interface",
    "@gaia_lib_publish//:Thread_swift_interface",
    ":AGFXLib_objc_interface",
    "@gaia_lib_publish//:gaia_module_map",
    "@gaia_lib_publish//:Math_module_map",
    "@gaia_lib_publish//:Thread_module_map"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
    "-I."
  ] + select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  cxxopts = [
    "-std=gnu++14"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "AGFXLib",
  deps = [
    ":AGFXLib_oc"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
ios_static_framework(
  name = "AGFXLib_lib",
  deps = [
    ":AGFXLib"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "Lark_AGFX_pub_module_map",
  module_map = "@AGFX_pub//:pod_support/Headers/Public/AGFX_pub/Lark-bitsky-generated.modulemap",
  umbrella_hdr = "@AGFX_pub//:pod_support/Headers/Public/AGFX_pub/Lark-bitsky-generated-umbrella.h",
  visibility = ["//visibility:public"],
)
objc_library(
  name = "Lark_AGFX_pub_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  deps = ["@AGFX_pub//:AGFXLib_objc_interface", "@AGFX_pub//:AGFX_pub_objc_interface", "@AGFX_pub//:RenderLib_objc_interface"],
  copts = [],
  visibility = ["//visibility:public"],
)
load("@build_bazel_rules_bitsky//rules:framework.bzl", "bitsky_library")
load("@main_project//.bitsky/common:bitsky_common.bzl", "defs_xcconfigs")
bitsky_library(
  name = "Lark_AGFX_pub",
  target_name = "Lark",
  module_name = "AGFX_pub",
  hdrs = ["@AGFX_pub//:AGFXLib_pod_hdrs", "@AGFX_pub//:AGFX_pub_root_pod_hdrs", "@AGFX_pub//:RenderLib_pod_hdrs"],
  srcs = [],
  non_arc_srcs = [],
  deps = ["@AGFX_pub//:AGFX_pub_RenderLib_VendoredLibraries"],
  pod_deps = ["gaia_lib_publish"],
  per_label_options = [],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
  ] + select({
      "//conditions:default": [],
      ":release": ["-Os",]
    }) 
    + getattr(defs_external_objc_library, "common_copts", [])
    + getattr(defs_external_objc_library, "AGFX_pub_copts", []),
  cxxopts = ["-std=gnu++14", ] + getattr(defs_external_objc_library, "common_cxxopts", []) 
    + getattr(defs_external_objc_library, "AGFX_pub_cxxopts", []),
  swift_copts = [],
  sdk_frameworks = ["AVFoundation", "CoreMedia", "Accelerate", "Foundation", "GLKit"],
  weak_sdk_frameworks = [],
  sdk_dylibs = ["c++", "z"],
  data = [],
  objc_features = [] + getattr(defs_external_objc_library, "common_features", []) 
    + getattr(defs_external_objc_library, "AGFX_pub_features", []),
  swift_features = [] + getattr(defs_external_swift_library, "common_features", []) 
    + getattr(defs_external_swift_library, "AGFX_pub_features", []),
  link_dynamic = getattr(defs_external_objc_library, "AGFX_pub_dynamic", False),
  tags = getattr(defs_external_objc_library, "AGFX_pub_tags", []),
  pch = "@rules_pods//BazelExtensions:common.pch",
  header_mappings = {
    "*": "*",
    "inc/AGFXLib/Context.h": "AGFXLib/Context.h",
    "inc/AGFXLib/PBFConfig.h": "AGFXLib/PBFConfig.h",
    "inc/AGFXLib/PBFSimulator.h": "AGFXLib/PBFSimulator.h",
    "inc/AGFXLib/SSFR.es31.h": "AGFXLib/SSFR.es31.h",
    "inc/AGFXLib/SSFR.h": "AGFXLib/SSFR.h",
    "inc/AGFXLib/SSFR.shader.h": "AGFXLib/SSFR.shader.h",
    "inc/Runtime/RenderLib/ComputerDevice.h": "Runtime/RenderLib/ComputerDevice.h",
    "inc/Runtime/RenderLib/FlipPatcher_texture_info.h": "Runtime/RenderLib/FlipPatcher_texture_info.h",
    "inc/Runtime/RenderLib/GLES_API_Logger.h": "Runtime/RenderLib/GLES_API_Logger.h",
    "inc/Runtime/RenderLib/GLES_API_Player.h": "Runtime/RenderLib/GLES_API_Player.h",
    "inc/Runtime/RenderLib/GPDevice.h": "Runtime/RenderLib/GPDevice.h",
    "inc/Runtime/RenderLib/GPDeviceType.h": "Runtime/RenderLib/GPDeviceType.h",
    "inc/Runtime/RenderLib/MaterialType.h": "Runtime/RenderLib/MaterialType.h",
    "inc/Runtime/RenderLib/PatcherUtils.h": "Runtime/RenderLib/PatcherUtils.h",
    "inc/Runtime/RenderLib/PipelineState.h": "Runtime/RenderLib/PipelineState.h",
    "inc/Runtime/RenderLib/PropertyBlock.h": "Runtime/RenderLib/PropertyBlock.h",
    "inc/Runtime/RenderLib/RendererDevice.h": "Runtime/RenderLib/RendererDevice.h",
    "inc/Runtime/RenderLib/RendererDeviceTypes.h": "Runtime/RenderLib/RendererDeviceTypes.h",
    "inc/Runtime/RenderLib/ShaderPatcher.h": "Runtime/RenderLib/ShaderPatcher.h",
    "inc/Runtime/RenderLib/Utils.h": "Runtime/RenderLib/Utils.h",
    "inc/Runtime/RenderLib/VertexAttribDesc.h": "Runtime/RenderLib/VertexAttribDesc.h",
    "inc/Runtime/RenderLib/logger_player_env.h": "Runtime/RenderLib/logger_player_env.h",
  },
  xcconfig_by_build_setting = defs_xcconfigs.get("AGFX_pub", {}),
  visibility = ["//visibility:public"],
)