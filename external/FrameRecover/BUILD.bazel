load('@build_bazel_rules_apple//apple:ios.bzl', 'ios_static_framework')
load(
  "@rules_pods//BazelExtensions:extensions.bzl",
  "gen_includes",
  "module_map",
  "gen_hmapsource",
  "gen_hmap",
  "run_script_phase",
  "objc_package",
  "resource_provider",
  "uniq_filegroup"
)
load('@main_project//.bitsky/common:bitsky_common.bzl', 'defs_package_features', 'defs_external_objc_library', 'defs_external_swift_library', 'defs_extension_objc_library', 'defs_extension_swift_library')
package(features = defs_package_features)
# Add a config setting release for compilation mode
# Assume that people are using `opt` for release mode
# see the bazel user manual for more information
# https://docs.bazel.build/versions/master/be/general.html#config_setting
load(
  "@bazel_skylib//lib:selects.bzl",
  "selects"
)
config_setting(
  name = "release",
  values = {
    "compilation_mode": "opt"
  }
)
config_setting(
  name = "iosCase",
  values = {
    "apple_platform_type": "ios"
  }
)
config_setting(
  name = "osxCase",
  values = {
    "apple_platform_type": "macos"
  }
)
config_setting(
  name = "tvosCase",
  values = {
    "apple_platform_type": "tvos"
  }
)
config_setting(
  name = "watchosCase",
  values = {
    "apple_platform_type": "watchos"
  }
)
config_setting(
  name = "x86_64",
  values = {
    "ios_multi_cpus": "x86_64"
  }
)
config_setting(
  name = "i386",
  values = {
    "ios_multi_cpus": "i386"
  }
)
config_setting(
  name = "armv7",
  values = {
    "ios_multi_cpus": "armv7"
  }
)
config_setting(
  name = "arm64",
  values = {
    "ios_multi_cpus": "arm64"
  }
)
config_setting(
  name = "sim_arm64",
  values = {
    "ios_multi_cpus": "sim_arm64"
  }
)
selects.config_setting_group(
  name = "sim_archs",
  match_any = [
    ":x86_64",
    ":i386",
    ":sim_arm64"
  ]
)
selects.config_setting_group(
  name = "x86",
  match_any = [
    ":x86_64",
    ":i386"
  ]
)
selects.config_setting_group(
  name = "arm",
  match_any = [
    ":arm64",
    ":armv7"
  ]
)
selects.config_setting_group(
  name = "iosDevice",
  match_all = [
    ":arm",
    ":iosCase"
  ]
)
selects.config_setting_group(
  name = "iosSimulator",
  match_all = [
    ":sim_archs",
    ":iosCase"
  ]
)
selects.config_setting_group(
  name = "watchosDevice",
  match_all = [
    ":arm",
    ":watchosCase"
  ]
)
selects.config_setting_group(
  name = "watchosSimulator",
  match_all = [
    ":x86",
    ":watchosCase"
  ]
)
selects.config_setting_group(
  name = "tvosDevice",
  match_all = [
    ":arm",
    ":tvosCase"
  ]
)
selects.config_setting_group(
  name = "tvosSimulator",
  match_all = [
    ":x86",
    ":tvosCase"
  ]
)
filegroup(
  name = "FrameRecover_pod_hdrs",
  srcs = [
    ":FrameRecover_root_pod_hdrs",
    ":Recover_pod_hdrs",
    ":Log_pod_hdrs",
    ":Debug_pod_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)

gen_includes(
  name = "FrameRecover_private_includes",
  include = [
    "external/FrameRecover/pod_support/Headers/Private/FrameRecover/"
  ],
  deps = [],
  external_name = "FrameRecover"
)
gen_includes(
  name = "FrameRecover_public_includes",
  include = [
    "external/FrameRecover/pod_support/Headers/Public/FrameRecover/"
  ],
  deps = [],
  external_name = "FrameRecover"
)
filegroup(
  name = "_FrameRecover_hdrs",
  srcs = [
    ":FrameRecover_root_hdrs",
    ":Recover_hdrs",
    ":Log_hdrs",
    ":Debug_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_hmapsource(
  name = "FrameRecover_xcode_hmapsource",
  hdrs = [
    ":FrameRecover_root_hdrs",
    ":Log_hdrs",
    ":Recover_hdrs"
  ],
  namespace = False,
  visibility = [
    "//visibility:public"
  ]
)
gen_hmap(
  name = "FrameRecover_xcode_hmap",
  dep = ":FrameRecover_xcode_hmapsource",
  visibility = [
    "//visibility:public"
  ]
)
exports_files(glob(["pod_support/Headers/Public/FrameRecover/*-bitsky-generated.modulemap", "pod_support/Headers/Public/FrameRecover/*-bitsky-generated-umbrella.h"]))
objc_import(
  name = "FrameRecover_Recover_VendoredLibraries",
  archives = select(
    {
      "//conditions:default": [
        "ios-arch-iphone/libFrameRecover_Recover_awesome_ios.a"
      ]
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
objc_import(
  name = "FrameRecover_Log_VendoredLibraries",
  archives = select(
    {
      "//conditions:default": [
        "ios-arch-iphone/libFrameRecover_Log_awesome_ios.a"
      ]
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
objc_import(
  name = "FrameRecover_Debug_VendoredLibraries",
  archives = select(
    {
      "//conditions:default": [
        "ios-arch-iphone/libFrameRecover_Debug_awesome_ios.a"
      ]
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "FrameRecover_custom_includes",
  include = [
    "external/Protobuf/objectivec"
  ],
  include_files = [],
  external_name = "FrameRecover",
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "FrameRecover_xcode_hmap_includes",
  include = [],
  include_files = [
    ":FrameRecover_xcode_hmap"
  ],
  external_name = "FrameRecover",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "FrameRecover_root_private_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "FrameRecover_root_public_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "FrameRecover_root_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "FrameRecover_root_pod_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "FrameRecover_swift_interface",
  deps = [],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "FrameRecover_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  copts = select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "FrameRecover_module_map",
  module_map = "pod_support/Headers/Public/FrameRecover/FrameRecover-bazel-generated.modulemap",
  umbrella_hdr = "pod_support/Headers/Public/FrameRecover/FrameRecover-bazel-generated-umbrella.h",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "FrameRecover_oc",
  enable_modules = 1,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [
    "FrameRecover_root_hdrs"
  ],
  pch = "@rules_pods//BazelExtensions:common.pch",
  sdk_frameworks = [
    "UIKit",
    "Foundation",
    "JavaScriptCore"
  ],
  deps = [
    ":FrameRecover_xcode_hmap_includes",
    "@PodHeaders//:PodHeaders_namespace_interface",
    ":FrameRecover_private_includes",
    ":FrameRecover_custom_includes",
    "@PodHeaders//:PodHeaders_public_interface",
    "@PodHeaders//:PodHeaders_global_objc_interface",
    ":FrameRecover_objc_interface"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-non-modular-include-in-framework-module",
    "-Wno-error=non-modular-include-in-framework-module",
    "-DFrameRecover_POD_VERSION=@\\\"34338756_1.28.0\\\"",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
    "-I."
  ] + select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  cxxopts = [
    "-fno-c++-static-destructors",
    "-std=gnu++14"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "FrameRecover",
  deps = [
    ":FrameRecover_oc"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
ios_static_framework(
  name = "FrameRecover_lib",
  deps = [
    ":FrameRecover"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Recover_private_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Recover_public_hdrs",
  srcs = [
    "Recover/public/Exception/HMDFrameRecoverExceptionData/HMDFrameRecoverExceptionData.h",
    "Recover/public/Mach/HMDFrameRecoverMachData/HMDFrameRecoverMachData.h",
    "Recover/public/Manager/FrameRecover.h",
    "Recover/public/Manager/HMDFrameRecoverManager/HMDFrameRecoverManager+Log.h",
    "Recover/public/Manager/HMDFrameRecoverManager/HMDFrameRecoverManager.h",
    "Recover/public/Manager/HMDFrameRecoverPublicMacro/HMDFrameRecoverPublicMacro.h",
    "Recover/public/Manager/HMDFrameRecoverQuery/HMDFrameRecoverQuery.h",
    "Recover/public/Manager/HMDMachRecoverDeclaration/HMDMachRecoverDeclaration.h",
    "Recover/public/Manager/HMDMachRestartableDeclaration/HMDMachRestartableDeclaration.h"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Recover_hdrs",
  srcs = [
    "Recover/public/Exception/HMDFrameRecoverExceptionData/HMDFrameRecoverExceptionData.h",
    "Recover/public/Mach/HMDFrameRecoverMachData/HMDFrameRecoverMachData.h",
    "Recover/public/Manager/FrameRecover.h",
    "Recover/public/Manager/HMDFrameRecoverManager/HMDFrameRecoverManager+Log.h",
    "Recover/public/Manager/HMDFrameRecoverManager/HMDFrameRecoverManager.h",
    "Recover/public/Manager/HMDFrameRecoverPublicMacro/HMDFrameRecoverPublicMacro.h",
    "Recover/public/Manager/HMDFrameRecoverQuery/HMDFrameRecoverQuery.h",
    "Recover/public/Manager/HMDMachRecoverDeclaration/HMDMachRecoverDeclaration.h",
    "Recover/public/Manager/HMDMachRestartableDeclaration/HMDMachRestartableDeclaration.h"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Recover_pod_hdrs",
  srcs = [
    "pod_support/Headers/Private/FrameRecover/FrameRecover.h",
    "pod_support/Headers/Private/FrameRecover/HMDFrameRecoverExceptionData.h",
    "pod_support/Headers/Private/FrameRecover/HMDFrameRecoverMachData.h",
    "pod_support/Headers/Private/FrameRecover/HMDFrameRecoverManager+Log.h",
    "pod_support/Headers/Private/FrameRecover/HMDFrameRecoverManager.h",
    "pod_support/Headers/Private/FrameRecover/HMDFrameRecoverPublicMacro.h",
    "pod_support/Headers/Private/FrameRecover/HMDFrameRecoverQuery.h",
    "pod_support/Headers/Private/FrameRecover/HMDMachRecoverDeclaration.h",
    "pod_support/Headers/Private/FrameRecover/HMDMachRestartableDeclaration.h",
    "pod_support/Headers/Public/FrameRecover/FrameRecover.h",
    "pod_support/Headers/Public/FrameRecover/HMDFrameRecoverExceptionData.h",
    "pod_support/Headers/Public/FrameRecover/HMDFrameRecoverMachData.h",
    "pod_support/Headers/Public/FrameRecover/HMDFrameRecoverManager+Log.h",
    "pod_support/Headers/Public/FrameRecover/HMDFrameRecoverManager.h",
    "pod_support/Headers/Public/FrameRecover/HMDFrameRecoverPublicMacro.h",
    "pod_support/Headers/Public/FrameRecover/HMDFrameRecoverQuery.h",
    "pod_support/Headers/Public/FrameRecover/HMDMachRecoverDeclaration.h",
    "pod_support/Headers/Public/FrameRecover/HMDMachRestartableDeclaration.h"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "Recover_swift_interface",
  deps = [],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Recover_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  copts = select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "Recover_module_map",
  module_map = "pod_support/Headers/Public/FrameRecover/FrameRecover_Recover-bazel-generated.modulemap",
  umbrella_hdr = "pod_support/Headers/Public/FrameRecover/FrameRecover_Recover-bazel-generated-umbrella.h",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Recover_oc",
  enable_modules = 1,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [
    "Recover_hdrs"
  ],
  pch = "@rules_pods//BazelExtensions:common.pch",
  sdk_frameworks = [
    "UIKit",
    "Foundation",
    "JavaScriptCore"
  ],
  sdk_dylibs = [
    "c++",
    "c++abi"
  ],
  deps = [
    ":FrameRecover_xcode_hmap_includes",
    "@PodHeaders//:PodHeaders_namespace_interface",
    ":FrameRecover_private_includes",
    ":FrameRecover_custom_includes",
    "@PodHeaders//:PodHeaders_public_interface",
    "@PodHeaders//:PodHeaders_global_objc_interface",
    "@ByteDanceKit//:ByteDanceKit_objc_interface",
    "@ByteDanceKit//:ByteDanceKit_swift_interface",
    ":FrameRecover_Recover_VendoredLibraries",
    ":Recover_objc_interface",
    "@ByteDanceKit//:ByteDanceKit_module_map"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-non-modular-include-in-framework-module",
    "-Wno-error=non-modular-include-in-framework-module",
    "-DFrameRecover_POD_VERSION=@\\\"34338756_1.28.0\\\"",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
    "-I."
  ] + select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  cxxopts = [
    "-fno-c++-static-destructors",
    "-std=gnu++14"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "Recover",
  deps = [
    ":Recover_oc"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
ios_static_framework(
  name = "Recover_lib",
  deps = [
    ":Recover"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Log_private_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Log_public_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Log_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Log_pod_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "Log_swift_interface",
  deps = [],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Log_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  copts = select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "Log_module_map",
  module_map = "pod_support/Headers/Public/FrameRecover/FrameRecover_Log-bazel-generated.modulemap",
  umbrella_hdr = "pod_support/Headers/Public/FrameRecover/FrameRecover_Log-bazel-generated-umbrella.h",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Log_oc",
  enable_modules = 1,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [
    "Log_hdrs"
  ],
  pch = "@rules_pods//BazelExtensions:common.pch",
  sdk_frameworks = [
    "UIKit",
    "Foundation",
    "JavaScriptCore"
  ],
  deps = [
    ":FrameRecover_xcode_hmap_includes",
    "@PodHeaders//:PodHeaders_namespace_interface",
    ":FrameRecover_private_includes",
    ":FrameRecover_custom_includes",
    "@PodHeaders//:PodHeaders_public_interface",
    "@PodHeaders//:PodHeaders_global_objc_interface",
    "@BDAlogProtocol//:BDAlogProtocol_objc_interface",
    "@BDAlogProtocol//:BDAlogProtocol_swift_interface",
    ":FrameRecover_Log_VendoredLibraries",
    ":Log_objc_interface",
    "@BDAlogProtocol//:BDAlogProtocol_module_map"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-non-modular-include-in-framework-module",
    "-Wno-error=non-modular-include-in-framework-module",
    "-DFrameRecover_POD_VERSION=@\\\"34338756_1.28.0\\\"",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
    "-I."
  ] + select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  cxxopts = [
    "-fno-c++-static-destructors",
    "-std=gnu++14"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "Log",
  deps = [
    ":Log_oc"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
ios_static_framework(
  name = "Log_lib",
  deps = [
    ":Log"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Debug_private_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Debug_public_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Debug_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Debug_pod_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "Debug_swift_interface",
  deps = [],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Debug_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  copts = select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "Debug_module_map",
  module_map = "pod_support/Headers/Public/FrameRecover/FrameRecover_Debug-bazel-generated.modulemap",
  umbrella_hdr = "pod_support/Headers/Public/FrameRecover/FrameRecover_Debug-bazel-generated-umbrella.h",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Debug_oc",
  enable_modules = 1,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [
    "Debug_hdrs"
  ],
  pch = "@rules_pods//BazelExtensions:common.pch",
  sdk_frameworks = [
    "UIKit",
    "Foundation",
    "JavaScriptCore"
  ],
  deps = [
    ":FrameRecover_xcode_hmap_includes",
    "@PodHeaders//:PodHeaders_namespace_interface",
    ":FrameRecover_private_includes",
    ":FrameRecover_custom_includes",
    "@PodHeaders//:PodHeaders_public_interface",
    "@PodHeaders//:PodHeaders_global_objc_interface",
    ":FrameRecover_Debug_VendoredLibraries",
    ":Debug_objc_interface"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-non-modular-include-in-framework-module",
    "-Wno-error=non-modular-include-in-framework-module",
    "-DFrameRecover_POD_VERSION=@\\\"34338756_1.28.0\\\"",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
    "-I."
  ] + select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  cxxopts = [
    "-fno-c++-static-destructors",
    "-std=gnu++14"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "Debug",
  deps = [
    ":Debug_oc"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
ios_static_framework(
  name = "Debug_lib",
  deps = [
    ":Debug"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Lark_FrameRecover_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  deps = ["@FrameRecover//:FrameRecover_objc_interface", "@FrameRecover//:Log_objc_interface", "@FrameRecover//:Recover_objc_interface"],
  copts = [],
  visibility = ["//visibility:public"],
)
load("@build_bazel_rules_bitsky//rules:framework.bzl", "bitsky_library")
load("@main_project//.bitsky/common:bitsky_common.bzl", "defs_xcconfigs")
bitsky_library(
  name = "Lark_FrameRecover",
  target_name = "Lark",
  module_name = "FrameRecover",
  public_hdrs = ["@FrameRecover//:FrameRecover_root_public_hdrs", "@FrameRecover//:Log_public_hdrs", "@FrameRecover//:Recover_public_hdrs"],
  private_hdrs = ["@FrameRecover//:FrameRecover_root_private_hdrs", "@FrameRecover//:Log_private_hdrs", "@FrameRecover//:Recover_private_hdrs"],
  srcs = [],
  non_arc_srcs = [],
  deps = ["@FrameRecover//:FrameRecover_Log_VendoredLibraries", "@FrameRecover//:FrameRecover_Recover_VendoredLibraries"],
  pod_deps = ["BDAlogProtocol", "ByteDanceKit"],
  per_label_options = [],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-non-modular-include-in-framework-module",
    "-Wno-error=non-modular-include-in-framework-module",
    "-DFrameRecover_POD_VERSION=@\\\"34338756_1.28.0\\\"",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
  ] + select({
      "//conditions:default": [],
      ":release": ["-Os",]
    }) 
    + getattr(defs_external_objc_library, "common_copts", [])
    + getattr(defs_external_objc_library, "FrameRecover_copts", []),
  cxxopts = ["-fno-c++-static-destructors", "-std=gnu++14", ] + getattr(defs_external_objc_library, "common_cxxopts", []) 
    + getattr(defs_external_objc_library, "FrameRecover_cxxopts", []),
  swift_copts = [],
  sdk_frameworks = ["UIKit", "Foundation", "JavaScriptCore"],
  weak_sdk_frameworks = [],
  sdk_dylibs = ["c++", "c++abi"],
  data = [],
  features = [] + getattr(defs_external_objc_library, "common_features", []) 
    + getattr(defs_external_objc_library, "FrameRecover_features", []),
  cxx_features = [] + getattr(defs_external_objc_library, "common_cxx_features", []) 
    + getattr(defs_external_objc_library, "FrameRecover_cpp_features", []),
  objc_features = [] + getattr(defs_external_objc_library, "common_objc_features", []) 
    + getattr(defs_external_objc_library, "FrameRecover_objc_features", []),
  swift_features = [] + getattr(defs_external_swift_library, "common_features", []) 
    + getattr(defs_external_swift_library, "FrameRecover_features", []),
  link_dynamic = getattr(defs_external_objc_library, "FrameRecover_dynamic", False),
  tags = getattr(defs_external_objc_library, "FrameRecover_tags", []),
  pch = "@rules_pods//BazelExtensions:common.pch",
  xcconfig_by_build_setting = defs_xcconfigs.get("FrameRecover", {}),
  visibility = ["//visibility:public"],
)