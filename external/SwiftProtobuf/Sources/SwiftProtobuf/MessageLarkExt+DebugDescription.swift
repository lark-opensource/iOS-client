import Foundation

#if !DEBUG && !ALPHA

public protocol MessageDebugDescriptionLarkExt: MessageJSONLarkExt, CustomDebugStringConvertible {}

extension MessageDebugDescriptionLarkExt where Self: Message {
    /// A description generated by recursively visiting all fields in the message,
    /// including messages.
    public var debugDescription: String {
      // TODO Ideally there would be something like serializeText() that can
      // take a prefix so we could do something like:
      //   [class name](
      //      [text format]
      //   )
      let className = String(reflecting: type(of: self))
      let header = "\(className):\n"
      return header + textFormatString()
    }
}

#endif
