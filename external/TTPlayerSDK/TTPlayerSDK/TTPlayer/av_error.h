/*
 * Audio and Video Solution Platform && Player
 *
 * Author lzxy
 * Date 2016-05-28
 * Copyright (c) 2016 bytedance
 *
 * This file is part of ttmp.
 *
 */
#pragma once
#ifdef __cplusplus

#include "av_namespace.h"
NS_BASE_BEGIN
class AVError {
public:
    enum ErrorType{
        NONE_ERROR = 0,
        SETTING_IS_NULL_ERROR = -499999,
        SETTING_CODEC_ERROR,
        START_DECODER_ERROR,
        OPEN_DECODER_ERROR,
        SETTING_OUTER_ERROR,
        SETTING_OUTLET_ERROR,
        OPEN_OUTER_ERROR,
        OPEN_OUTLET_ERROR,
        START_OUTPUTER_ERROR,
        START_OUTLET_ERROR,
        OPEN_DEVICE_ERROR,
        SETTING_URI_IS_NULL_ERROR,
        SETTING_URI_IS_ERROR,
        URL_IS_NOT_MP4,
        INVALID_INPUT_DATA,
        END_OF_FILE,
        NOT_STREAM,
        BUFFERING_TIMEOUT,
        OPEN_CODEC_FAIL,
        SETTING_INPUTER_ERROR,
        OPEN_AUDIO_FILLTER_ERROR,
        AUDIO_DECODER_WRITE_ERROR,
        VIDEO_DECODER_WRITE_ERROR,
        INPUTER_READ_ERROR,
        INPUTER_OPEN_ERROR,
        BAD_EOF,
        DECRYPTION_KEY_IS_NULL_ERROR,
        HIJACK_VID_ERROR,
        NO_STREAM_INFO,
        HIJACK_MEDIA_TYPE_ERROR,
        SETTING_MASKER_ERROR,
        OPEN_MASKER_ERROR,
        START_MASKER_ERROR,
        SETTING_SUB_ERROR,
        OPEN_SUB_ERROR,
        START_SUB_ERROR,
        HDR10_DEC_EXPC,
        BARRAGE_MASK_OPEN_ERROR,
        BARRAGE_MASK_READ_ERROR,

        HTTP_BAD_REQUEST = -499899, // 400
        HTTP_UNAUTHORIZED,// 401
        HTTP_FORBIDEN,    // 403
        HTTP_NOT_FOUND,   // 404
        HTTP_TIMEOUT,
        HTTP_OTHER_4xx,
        HTTP_SERVER_ERROR,
        HTTP_USER_INTERRUPT,
        
        HTTP_CONTENT_TYPE_IS_INVALID, // content type is invalid while get 2xx
        HTTP_REDIRECT,                  // 3xx while close redirect
        HTTP_DEFAULT_ERROR,
        HTTP_REDIRECT_COUNT_OUT,
        
        TCP_FAILED_TO_RESOLVE_HOSTNAME = -499799,
        TCP_FAILED_TO_RESOLVE_HOSTNAME_TIMEOUT,
        TCP_FAILED_TO_SETUP_SOCKET,
        TCP_CONNECT_FAILED,
        
        TCP_SEND_DATA_FAILED,
        TCP_RECEIVE_DATA_FAILED,
        
        TCP_READ_NETWORK_TIMEOUT,
        TCP_WRITE_NETWORK_TIMEOUT,
        PACKET_READ_CORRUPT,

        DRM_OPEN_FAILED = -499699,
        DRM_DECRYPT_FAILED,
        DRM_EXPIRED,
        DRM_LOCAL_TIME_DECRYPT_FAILED,

        RTC_PLAY_ERROR_ON_CREATE_ENGINE             = -499599,
        RTC_PLAY_ERROR_ON_INIT                      = -499598,
        RTC_PLAY_ERROR_ON_PREPARE                   = -499597,
        RTC_PLAY_ERROR_ON_STOP                      = -499596,
        RTC_PLAY_ERROR_ON_WAIT_TIMEOUT              = -499595,
        RTC_PLAY_ERROR_ON_WAIT_FIRSTFRAME_TIMEOUT   = -499594,
        RTC_PLAY_ERROR_ON_AUDIO_PLAYING_ERROR       = -499593,

        RTC_PLAY_ERROR_ON_VIDEO_CACHING_ERROR       = -499566,
        RTC_PLAY_ERROR_ON_VIDEO_SIZE_CHANGE         = -499565,
        RTC_PLAY_ERROR_ON_DECODE_FALLBACK           = -499564,
        RTC_PLAY_ERROR_ON_AUDIO_PTS_DIFF_TOO_LARGE  = -499563,
        RTC_PLAY_ERROR_ON_AV_DIFF_TOO_LARGE         = -499562,
        RTC_PLAY_ERROR_ON_AUDIO_PRE_ERROR           = -499561,
        RTC_PLAY_ERROR_ON_AUDIO_CACHING_ERROR       = -499560,

        QUIC_LOAD_LIBRARY_ERROR = -499499,
        SETTING_AIBARRBAGER_ERROR,
        OPEN_AIBARRBAGER_ERROR,
        START_AIBARRBAGER_ERROR,

        PROTOCOL_DOWNGRADE_CODE = -499495,
        PROTOCOL_NEED_RETRY_CODE = -499494,
        CMAF_LIBRARY_LOAD_FAILED = - 499493,

        MULTIPLAYER_SYNCHRONIZATION_ERROR_OUT_OF_SYNC = -499399,

        TILEPLAYER_ERROR_DOWNLOAD_KEEP_FAILING        = -499299,
    };
#define BEGIN_ERROR_NAMES(a) switch(a) {
#define ERROR_NAME(a, name) case a: {return name;}
#define END_ERROR_NAMES    default: {return "error name not found";}}
    static const char* getName(int code) {
        BEGIN_ERROR_NAMES(code)
        ERROR_NAME(NONE_ERROR                       , "NONE_ERROR")
        ERROR_NAME(SETTING_IS_NULL_ERROR            , "SETTING_IS_NULL_ERROR")
        ERROR_NAME(SETTING_CODEC_ERROR              , "SETTING_CODEC_ERROR")
        ERROR_NAME(START_DECODER_ERROR              , "START_DECODER_ERROR")
        ERROR_NAME(OPEN_DECODER_ERROR               , "OPEN_DECODER_ERROR")
        ERROR_NAME(SETTING_OUTER_ERROR              , "SETTING_OUTER_ERROR")
        ERROR_NAME(SETTING_OUTLET_ERROR             , "SETTING_OUTLET_ERROR")
        ERROR_NAME(OPEN_OUTER_ERROR                 , "OPEN_OUTER_ERROR")
        ERROR_NAME(OPEN_OUTLET_ERROR                , "OPEN_OUTLET_ERROR")
        ERROR_NAME(START_OUTPUTER_ERROR             , "START_OUTPUTER_ERROR")
        ERROR_NAME(START_OUTLET_ERROR               , "START_OUTLET_ERROR")
        ERROR_NAME(OPEN_DEVICE_ERROR                , "OPEN_DEVICE_ERROR")
        ERROR_NAME(SETTING_MASKER_ERROR             , "SETTING_MASKER_ERROR")
        ERROR_NAME(OPEN_MASKER_ERROR                , "OPEN_MASKER_ERROR")
        ERROR_NAME(START_MASKER_ERROR               , "START_MASKER_ERROR")
        ERROR_NAME(SETTING_AIBARRBAGER_ERROR        , "SETTING_AIBARRBAGER_ERROR")
        ERROR_NAME(OPEN_AIBARRBAGER_ERROR           , "OPEN_AIBARRBAGER_ERROR")
        ERROR_NAME(START_AIBARRBAGER_ERROR          , "START_AIBARRBAGER_ERROR")
        ERROR_NAME(SETTING_URI_IS_NULL_ERROR        , "SETTING_URI_IS_NULL_ERROR")
        ERROR_NAME(SETTING_URI_IS_ERROR             , "SETTING_URI_IS_ERROR")
        ERROR_NAME(URL_IS_NOT_MP4                   , "URL_IS_NOT_MP4")
        ERROR_NAME(INVALID_INPUT_DATA               , "INVALID_INPUT_DATA")
        ERROR_NAME(NOT_STREAM                       , "NOT_STREAM")
        ERROR_NAME(BUFFERING_TIMEOUT                , "BUFFERING_TIMEOUT")
        ERROR_NAME(AUDIO_DECODER_WRITE_ERROR        , "AUDIO_DECODER_WRITE_ERROR")
        ERROR_NAME(VIDEO_DECODER_WRITE_ERROR        , "VIDEO_DECODER_WRITE_ERROR")
        ERROR_NAME(DECRYPTION_KEY_IS_NULL_ERROR     , "DECRYPTION_KEY_IS_NULL_ERROR")
        ERROR_NAME(NO_STREAM_INFO                   , "NO_STREAM_INFO")
        ERROR_NAME(HTTP_BAD_REQUEST                 , "HTTP_BAD_REQUEST")
        ERROR_NAME(HTTP_UNAUTHORIZED                , "HTTP_UNAUTHORIZED")
        ERROR_NAME(HTTP_FORBIDEN                    , "HTTP_FORBIDEN")
        ERROR_NAME(HTTP_NOT_FOUND                   , "HTTP_NOT_FOUND")
        ERROR_NAME(HTTP_OTHER_4xx                   , "HTTP_OTHER_4xx")
        ERROR_NAME(HTTP_SERVER_ERROR                , "HTTP_SERVER_ERROR")
        ERROR_NAME(HTTP_CONTENT_TYPE_IS_INVALID     , "HTTP_CONTENT_TYPE_IS_INVALID")
        ERROR_NAME(HTTP_REDIRECT                    , "HTTP_REDIRECT")
        ERROR_NAME(TCP_FAILED_TO_RESOLVE_HOSTNAME   , "Resolve hostname fail.")
        ERROR_NAME(TCP_FAILED_TO_SETUP_SOCKET       , "TCP_FAILED_TO_SETUP_SOCKET")
        ERROR_NAME(TCP_CONNECT_FAILED               , "TCP_CONNECT_FAILED")
        ERROR_NAME(TCP_SEND_DATA_FAILED             , "TCP_SEND_DATA_FAILED")
        ERROR_NAME(TCP_RECEIVE_DATA_FAILED          , "TCP_RECEIVE_DATA_FAILED")
        ERROR_NAME(TCP_READ_NETWORK_TIMEOUT         , "TCP_READ_NETWORK_TIMEOUT")
        ERROR_NAME(TCP_WRITE_NETWORK_TIMEOUT        , "TCP_WRITE_NETWORK_TIMEOUT")
        ERROR_NAME(PACKET_READ_CORRUPT              , "PACKET_READ_CORRUPT")
        END_ERROR_NAMES

    }
    
    static int getErrorCodePair(int& errorCode, int& sysErrorCode, const char* logInfo);
};

NS_BASE_END

#endif
