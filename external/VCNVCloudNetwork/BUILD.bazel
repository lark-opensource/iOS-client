load('@build_bazel_rules_apple//apple:ios.bzl', 'ios_static_framework')
load(
  "@rules_pods//BazelExtensions:extensions.bzl",
  "gen_includes",
  "module_map",
  "gen_hmapsource",
  "gen_hmap",
  "run_script_phase",
  "objc_package",
  "resource_provider",
  "uniq_filegroup"
)
load('@main_project//.bitsky/common:bitsky_common.bzl', 'defs_package_features', 'defs_external_objc_library', 'defs_external_swift_library', 'defs_extension_objc_library', 'defs_extension_swift_library', 'define_minimum_os_version')
package(features = defs_package_features)
# Add a config setting release for compilation mode
# Assume that people are using `opt` for release mode
# see the bazel user manual for more information
# https://docs.bazel.build/versions/master/be/general.html#config_setting
load(
  "@bazel_skylib//lib:selects.bzl",
  "selects"
)
config_setting(
  name = "release",
  values = {
    "compilation_mode": "opt"
  }
)
config_setting(
  name = "iosCase",
  values = {
    "apple_platform_type": "ios"
  }
)
config_setting(
  name = "osxCase",
  values = {
    "apple_platform_type": "macos"
  }
)
config_setting(
  name = "tvosCase",
  values = {
    "apple_platform_type": "tvos"
  }
)
config_setting(
  name = "watchosCase",
  values = {
    "apple_platform_type": "watchos"
  }
)
config_setting(
  name = "x86_64",
  values = {
    "ios_multi_cpus": "x86_64"
  }
)
config_setting(
  name = "i386",
  values = {
    "ios_multi_cpus": "i386"
  }
)
config_setting(
  name = "armv7",
  values = {
    "ios_multi_cpus": "armv7"
  }
)
config_setting(
  name = "arm64",
  values = {
    "ios_multi_cpus": "arm64"
  }
)
config_setting(
  name = "sim_arm64",
  values = {
    "ios_multi_cpus": "sim_arm64"
  }
)
selects.config_setting_group(
  name = "sim_archs",
  match_any = [
    ":x86_64",
    ":i386",
    ":sim_arm64"
  ]
)
selects.config_setting_group(
  name = "x86",
  match_any = [
    ":x86_64",
    ":i386"
  ]
)
selects.config_setting_group(
  name = "arm",
  match_any = [
    ":arm64",
    ":armv7"
  ]
)
selects.config_setting_group(
  name = "iosDevice",
  match_all = [
    ":arm",
    ":iosCase"
  ]
)
selects.config_setting_group(
  name = "iosSimulator",
  match_all = [
    ":sim_archs",
    ":iosCase"
  ]
)
selects.config_setting_group(
  name = "watchosDevice",
  match_all = [
    ":arm",
    ":watchosCase"
  ]
)
selects.config_setting_group(
  name = "watchosSimulator",
  match_all = [
    ":x86",
    ":watchosCase"
  ]
)
selects.config_setting_group(
  name = "tvosDevice",
  match_all = [
    ":arm",
    ":tvosCase"
  ]
)
selects.config_setting_group(
  name = "tvosSimulator",
  match_all = [
    ":x86",
    ":tvosCase"
  ]
)
filegroup(
  name = "VCNVCloudNetwork_pod_hdrs",
  srcs = [
    ":VCNVCloudNetwork_root_pod_hdrs",
    ":Core_pod_hdrs",
    ":Header_pod_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)

gen_includes(
  name = "VCNVCloudNetwork_private_includes",
  include = [
    "external/VCNVCloudNetwork/pod_support/Headers/Private/VCNVCloudNetwork/"
  ],
  deps = [],
  external_name = "VCNVCloudNetwork"
)
gen_includes(
  name = "VCNVCloudNetwork_public_includes",
  include = [
    "external/VCNVCloudNetwork/pod_support/Headers/Public/VCNVCloudNetwork/"
  ],
  deps = [],
  external_name = "VCNVCloudNetwork"
)
filegroup(
  name = "_VCNVCloudNetwork_hdrs",
  srcs = [
    ":VCNVCloudNetwork_root_hdrs",
    ":Core_hdrs",
    ":Header_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_hmapsource(
  name = "VCNVCloudNetwork_xcode_hmapsource",
  hdrs = [
    ":VCNVCloudNetwork_root_hdrs",
    ":Core_hdrs"
  ],
  namespace = False,
  visibility = [
    "//visibility:public"
  ]
)
gen_hmap(
  name = "VCNVCloudNetwork_xcode_hmap",
  dep = ":VCNVCloudNetwork_xcode_hmapsource",
  visibility = [
    "//visibility:public"
  ]
)
exports_files(glob(["pod_support/Headers/Public/VCNVCloudNetwork/*-bitsky-generated.modulemap", "pod_support/Headers/Public/VCNVCloudNetwork/*-bitsky-generated-umbrella.h"]))
objc_import(
  name = "VCNVCloudNetwork_Core_VendoredLibraries",
  archives = [
    "products/lib/libvcloudverify.a",
    "products/lib/libvcloudnetwork.a"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "VCNVCloudNetwork_custom_includes",
  include = [
    "external/Protobuf/objectivec"
  ],
  include_files = [],
  external_name = "VCNVCloudNetwork",
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "VCNVCloudNetwork_xcode_hmap_includes",
  include = [],
  include_files = [
    ":VCNVCloudNetwork_xcode_hmap"
  ],
  external_name = "VCNVCloudNetwork",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "VCNVCloudNetwork_root_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "VCNVCloudNetwork_root_pod_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "VCNVCloudNetwork_swift_interface",
  deps = [],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "VCNVCloudNetwork_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  copts = select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "VCNVCloudNetwork_module_map",
  module_map = "pod_support/Headers/Public/VCNVCloudNetwork/VCNVCloudNetwork-bazel-generated.modulemap",
  umbrella_hdr = "pod_support/Headers/Public/VCNVCloudNetwork/VCNVCloudNetwork-bazel-generated-umbrella.h",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "VCNVCloudNetwork_oc",
  enable_modules = 1,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [
    "VCNVCloudNetwork_root_hdrs"
  ],
  pch = "@rules_pods//BazelExtensions:common.pch",
  deps = [
    ":VCNVCloudNetwork_xcode_hmap_includes",
    "@PodHeaders//:PodHeaders_namespace_interface",
    ":VCNVCloudNetwork_private_includes",
    ":VCNVCloudNetwork_custom_includes",
    "@PodHeaders//:PodHeaders_public_interface",
    "@PodHeaders//:PodHeaders_global_objc_interface",
    "@boringssl//:boringssl_objc_interface",
    "@boringssl//:boringssl_swift_interface",
    ":VCNVCloudNetwork_objc_interface",
    "@boringssl//:boringssl_module_map"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
    "-I."
  ] + select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  cxxopts = [
    "-std=gnu++14"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "VCNVCloudNetwork",
  deps = [
    ":VCNVCloudNetwork_oc"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
ios_static_framework(
  name = "VCNVCloudNetwork_lib",
  deps = [
    ":VCNVCloudNetwork"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_pod_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "Core_swift_interface",
  deps = [],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Core_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  copts = select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "Core_module_map",
  module_map = "pod_support/Headers/Public/VCNVCloudNetwork/VCNVCloudNetwork_Core-bazel-generated.modulemap",
  umbrella_hdr = "pod_support/Headers/Public/VCNVCloudNetwork/VCNVCloudNetwork_Core-bazel-generated-umbrella.h",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Core_oc",
  enable_modules = 1,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [
    "Core_hdrs"
  ],
  pch = "@rules_pods//BazelExtensions:common.pch",
  deps = [
    ":VCNVCloudNetwork_xcode_hmap_includes",
    "@PodHeaders//:PodHeaders_namespace_interface",
    ":VCNVCloudNetwork_private_includes",
    ":VCNVCloudNetwork_custom_includes",
    "@PodHeaders//:PodHeaders_public_interface",
    "@PodHeaders//:PodHeaders_global_objc_interface",
    "@boringssl//:boringssl_objc_interface",
    "@boringssl//:boringssl_swift_interface",
    ":VCNVCloudNetwork_Core_VendoredLibraries",
    ":Core_objc_interface",
    "@boringssl//:boringssl_module_map"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
    "-I."
  ] + select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  cxxopts = [
    "-std=gnu++14"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "Core",
  deps = [
    ":Core_oc"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
ios_static_framework(
  name = "Core_lib",
  deps = [
    ":Core"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Header_hdrs",
  srcs = [
    "products/libvcn/VCNBase.h",
    "products/libvcn/VCNDNSParserInterface.h",
    "products/libvcn/VCNHttpContext.h",
    "products/libvcn/VCNHttpParser.h",
    "products/libvcn/VCNHttpParserBase.h",
    "products/libvcn/VCNSocketInfo.h",
    "products/libvcn/VCNUtils.h",
    "products/libvcn/attributes.h",
    "products/libvcn/avconfig.h",
    "products/libvcn/custom_verify.h",
    "products/libvcn/intfloat.h",
    "products/libvcn/macros.h",
    "products/libvcn/rational.h",
    "products/libvcn/urldecode.h",
    "products/libvcn/vcn_avio.h",
    "products/libvcn/vcn_avstring.h",
    "products/libvcn/vcn_avutil.h",
    "products/libvcn/vcn_common.h",
    "products/libvcn/vcn_dict.h",
    "products/libvcn/vcn_error.h",
    "products/libvcn/vcn_format_version.h",
    "products/libvcn/vcn_internal.h",
    "products/libvcn/vcn_log.h",
    "products/libvcn/vcn_mathematics.h",
    "products/libvcn/vcn_mem.h",
    "products/libvcn/vcn_opt.h",
    "products/libvcn/vcn_time.h",
    "products/libvcn/vcn_url.h",
    "products/libvcn/vcn_util_version.h",
    "products/libvcn/vcn_utils.h"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Header_pod_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "Header_swift_interface",
  deps = [],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Header_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  copts = select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "Header_module_map",
  module_map = "pod_support/Headers/Public/VCNVCloudNetwork/VCNVCloudNetwork_Header-bazel-generated.modulemap",
  umbrella_hdr = "pod_support/Headers/Public/VCNVCloudNetwork/VCNVCloudNetwork_Header-bazel-generated-umbrella.h",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Header_oc",
  enable_modules = 1,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [
    "Header_hdrs"
  ],
  pch = "@rules_pods//BazelExtensions:common.pch",
  deps = [
    ":VCNVCloudNetwork_xcode_hmap_includes",
    "@PodHeaders//:PodHeaders_namespace_interface",
    ":VCNVCloudNetwork_private_includes",
    ":VCNVCloudNetwork_custom_includes",
    "@PodHeaders//:PodHeaders_public_interface",
    "@PodHeaders//:PodHeaders_global_objc_interface",
    "@boringssl//:boringssl_objc_interface",
    "@boringssl//:boringssl_swift_interface",
    ":Header_objc_interface",
    "@boringssl//:boringssl_module_map"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
    "-I."
  ] + select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  cxxopts = [
    "-std=gnu++14"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "Header",
  deps = [
    ":Header_oc"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
ios_static_framework(
  name = "Header_lib",
  deps = [
    ":Header"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "Lark_VCNVCloudNetwork_module_map",
  module_map = "@VCNVCloudNetwork//:pod_support/Headers/Public/VCNVCloudNetwork/Lark-bitsky-generated.modulemap",
  umbrella_hdr = "@VCNVCloudNetwork//:pod_support/Headers/Public/VCNVCloudNetwork/Lark-bitsky-generated-umbrella.h",
  visibility = ["//visibility:public"],
)
objc_library(
  name = "Lark_VCNVCloudNetwork_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  deps = ["@VCNVCloudNetwork//:Core_objc_interface", "@VCNVCloudNetwork//:VCNVCloudNetwork_objc_interface"],
  copts = [],
  visibility = ["//visibility:public"],
)
load("@build_bazel_rules_bitsky//rules:framework.bzl", "bitsky_library")
load("@main_project//.bitsky/common:bitsky_common.bzl", "defs_xcconfigs")
bitsky_library(
  name = "Lark_VCNVCloudNetwork",
  target_name = "Lark",
  module_name = "VCNVCloudNetwork",
  hdrs = ["@VCNVCloudNetwork//:Core_pod_hdrs", "@VCNVCloudNetwork//:VCNVCloudNetwork_root_pod_hdrs"],
  srcs = [],
  non_arc_srcs = [],
  deps = ["@VCNVCloudNetwork//:VCNVCloudNetwork_Core_VendoredLibraries"],
  pod_deps = ["boringssl"],
  per_label_options = [],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
  ] + select({
      "//conditions:default": [],
      ":release": ["-Os",]
    }) 
    + getattr(defs_external_objc_library, "common_copts", [])
    + getattr(defs_external_objc_library, "VCNVCloudNetwork_copts", []),
  cxxopts = ["-std=gnu++14", ] + getattr(defs_external_objc_library, "common_cxxopts", []) 
    + getattr(defs_external_objc_library, "VCNVCloudNetwork_cxxopts", []),
  swift_copts = [],
  sdk_frameworks = [],
  weak_sdk_frameworks = [],
  sdk_dylibs = [],
  data = [],
  objc_features = [] + getattr(defs_external_objc_library, "common_features", []) 
    + getattr(defs_external_objc_library, "VCNVCloudNetwork_features", []),
  swift_features = [] + getattr(defs_external_swift_library, "common_features", []) 
    + getattr(defs_external_swift_library, "VCNVCloudNetwork_features", []),
  link_dynamic = getattr(defs_external_objc_library, "VCNVCloudNetwork_dynamic", False),
  tags = getattr(defs_external_objc_library, "VCNVCloudNetwork_tags", []),
  pch = "@rules_pods//BazelExtensions:common.pch",
  xcconfig_by_build_setting = defs_xcconfigs.get("VCNVCloudNetwork", {}),
  visibility = ["//visibility:public"],
)