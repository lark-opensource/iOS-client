// Copyright 2021 The Lynx Authors. All rights reserved.

#ifndef LYNX_SHELL_WIN_PUBLIC_LYNX_VIEW_H_
#define LYNX_SHELL_WIN_PUBLIC_LYNX_VIEW_H_

#if defined(OS_WIN)
#include <Windows.h>
#endif

#include <list>
#include <string>

#include "lynx_export.h"
#include "shell/renderkit/public/encodable_value.h"
#include "shell/renderkit/public/lynx_basic_types.h"
#include "shell/renderkit/public/lynx_template_data.h"
#include "shell/renderkit/public/lynx_view_base.h"
#include "shell/renderkit/public/lynx_view_builder.h"
#include "shell/renderkit/public/lynx_view_client.h"

namespace lynx {
struct LYNX_EXPORT LynxViewBuilder : public LynxViewBaseBuilder {};

using LynxViewBuilderCallback = std::function<void(LynxViewBuilder*)>;

/**
 * A view that display content generated by lynx cli.
 */
class LYNX_EXPORT LynxView : public LynxViewBase {
 public:
  LynxView();
  ~LynxView() override;
  void InitWithFrame(const RECT& frame);
  void InitWithBuilder(const LynxViewBuilderCallback& callback);
  void InitWithBuilderAndProperties(const LynxViewBuilderCallback& callback,
                                    const std::wstring& icudtl_path,
                                    bool software_render);
  void OnEnterForeground() override;
  void OnEnterBackground() override;

  void* GetRenderkitViewContext() override;
  void SetVisible(bool enable);

  bool IsShow() const;
  void Show(bool is_show);

  HWND GetNativeWindow();
  LRESULT HandleTopLevelWindowProc(HWND hwnd, UINT message, WPARAM wparam,
                                   LPARAM lparam);

  LynxScreenShotData GetSnapshot(LynxScreenShotType type) override;

  void RemoveAllViews() override;

 private:
  bool attached_ = false;
  bool is_show_ = true;
};

enum class LynxScreenShotType { JPEG = 0, PNG, WEBP, BITMAP };

class LynxScreenShotData {
 public:
  explicit LynxScreenShotData();
  LynxScreenShotData(LynxScreenShotData&& other);
  ~LynxScreenShotData();

  LynxScreenShotData& operator=(LynxScreenShotData&& other);

  LynxScreenShotData(const LynxScreenShotData& other) = delete;
  LynxScreenShotData& operator=(const LynxScreenShotData& other) = delete;

  void* data;
  size_t length;
  LynxScreenShotType type;
};

LYNX_EXPORT LynxView* CreateLynxView();
LYNX_EXPORT void DestroyLynxView(LynxView* lynx_view);

}  // namespace lynx

#endif  // LYNX_SHELL_WIN_PUBLIC_LYNX_VIEW_H_
