// Copyright 2021 The Lynx Authors. All rights reserved.

#ifndef LYNX_SHELL_RENDERKIT_PUBLIC_LYNX_VIEW_BASE_H_
#define LYNX_SHELL_RENDERKIT_PUBLIC_LYNX_VIEW_BASE_H_

#include <list>
#include <memory>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

#include "lynx_export.h"
#include "shell/renderkit/public/encodable_value.h"
#include "shell/renderkit/public/lynx_basic_types.h"
#include "shell/renderkit/public/lynx_template_data.h"
#include "shell/renderkit/public/lynx_view_builder.h"
#include "shell/renderkit/public/lynx_view_client.h"

// Opaque reference to a Renderkit view provider.
struct RKViewProviderWindows;
typedef struct RKViewProviderWindows* RKViewProviderWindowsRef;
typedef void (*FlutterViewShouldInterceptUrlCallback)(const char* origin_url,
                                                      bool should_decode,
                                                      char* intercept_url);
namespace lynx {
class LynxConfigInfo;
class LynxTemplateRender;
class LynxScreenShotData;
enum class LynxScreenShotType;

/**
 * A view that display content generated by lynx cli.
 */
class LYNX_EXPORT LynxViewBase {
 public:
  LynxViewBase();
  virtual ~LynxViewBase();

  void InitWithBuilder(const LynxViewBaseBuilderCallback& callback);
  void InitWithBuilderAndProperties(const LynxViewBaseBuilderCallback& callback,
                                    const wchar_t* icu_data_path = nullptr,
                                    bool software_render = false);
  virtual void OnEnterForeground() = 0;
  virtual void OnEnterBackground() = 0;
  virtual void* GetRenderkitViewContext() = 0;

  void Init();
  void TriggerLayout();

  void LoadTemplate(const std::vector<uint8_t>& source, const std::string& url);
  void LoadTemplate(const std::vector<uint8_t>& source, const std::string& url,
                    LynxTemplateData* init_data);
  void LoadTemplate(void* data, size_t length, const std::string& url);

  virtual void LoadTemplateFromURL(const std::string& url);
  virtual void LoadTemplateFromURL(const std::string& url,
                                   LynxTemplateData* init_data);

  void UpdateDataWithString(const std::string& data);
  void UpdateDataWithString(const std::string& data,
                            const std::string& processor_name);

  void UpdateDataWithTemplateData(LynxTemplateData* data);

  void SetGlobalProps(std::unique_ptr<EncodableValue> data) {
    global_props_ = std::move(data);
  }

  void SetGlobalPropsData(const std::string& global_prop);

  void SetGlobalPropsData(const LynxTemplateData& data) {
    global_props_data_ = std::make_unique<LynxTemplateData>(data);
  }

  /**
    Clear current data and update with the given data. If you want to clear the
    current data only, you can pass an Empty LynxTemplateData
  */
  void ResetDataWithTemplateData(LynxTemplateData* data);

  /**
   * 在 updateData 被调用时，如果 Layout Safepoint
   * 是开启状态，更新数据需要主动触发一次
   * requestLayout，确保 Safepoint 的流程完整执行，防止在 updateData
   * 的过程中没有触发任何
   * requestLayout，导致相关任务如排版任务堆积在底层的 pending task
   * queue中，引发界面位置无刷新问题。
   */
  void RequestLayoutWhenSafepointEnable();

  /**
   * EXPERIMENTAL API!
   * Updating the screen size for LynxViewBase.
   * Updating the screen size does not trigger a re-layout, You should trigger
   * a re-layout by yourself. It will be useful for the screen size change, like
   * screen rotation. it can make some css properties based on rpx shows better.
   * Multiple views are not supported with different settings!
   * @param width(dp) screen width
   * @param height(dp) screen screen
   */
  void UpdateScreenMetrics(float width, float height, float device_ratio);
  void UpdateFontScale(float scale);

  void UpdateViewportWithPreferredSize(float width, float height,
                                       bool need_layout);

  // Layout, must call invalidateIntrinsicContentSize after change layout props
  // If you use view.frame to set view frame, the layout mode will all be
  // specified
  LynxViewBaseSizeMode GetLayoutWidthMode();
  LynxViewBaseSizeMode GetLayoutHeightMode();
  void SetLayoutWidthMode(LynxViewBaseSizeMode mode);
  void SetLayoutHeightMode(LynxViewBaseSizeMode mode);

  float GetPreferredLayoutWidth();
  float GetPreferredLayoutHeight();
  void SetPreferredLayoutWidth(float value);
  void SetPreferredLayoutHeight(float value);

  float GetPreferredMaxLayoutWidth();
  float GetPreferredMaxLayoutHeight();
  void SetPreferredMaxLayoutWidth(float value);
  void SetPreferredMaxLayoutHeight(float value);

  LynxConfigInfo* GetLynxConfigInfo();

  void AddLynxViewBaseClient(LynxViewClient* client);
  void RemoveLynxViewBaseClient(LynxViewClient* client);

  void SetFrame(float width, float height) {
    UpdateViewportWithPreferredSize(width, height, true);
  }

  // json_params only support array json. see [https://json.org/json-en.html]
  // part array
  void SendGlobalEvent(const std::string& name, const std::string& json_params);

  void SendGlobalEvent(const std::string& name, const EncodableList& params);
  virtual LynxScreenShotData GetSnapshot(LynxScreenShotType type) = 0;
  void BindInterceptUrlCallback(FlutterViewShouldInterceptUrlCallback callback);

  virtual void RemoveAllViews();

  void SetFontFaceCache(const std::string& font_family,
                        const std::string& local_path);

  void SetGroupId(int group_id) { group_id_ = group_id; }
  int GetGroupId() { return group_id_; }

  std::unordered_map<std::string, std::string> GetAllJsSource();

  std::string GetTemplateUrl();

 protected:
  void LoadGlobalProps();

  std::unique_ptr<LynxTemplateRender> template_render_;
  // The renderkit view provider instance hosted by this view.
  RKViewProviderWindowsRef view_provider_ = nullptr;
  std::unique_ptr<LynxTemplateData> global_props_data_;
  std::unique_ptr<EncodableValue> global_props_;
  std::string url_ = "";

 private:
  friend class LynxTemplateRender;

  void LoadTemplateFromString(const std::string& result, const std::string& url,
                              int32_t callback_id);
  void OnTemplateDownloadFinished(const std::string& result,
                                  const std::string& url, int32_t callback_id);

  std::shared_ptr<AsyncCallBackProbe> async_callback_probe_;
  int group_id_ = 0;  // default group id
};

}  // namespace lynx
#endif  // LYNX_SHELL_RENDERKIT_PUBLIC_LYNX_VIEW_BASE_H_
