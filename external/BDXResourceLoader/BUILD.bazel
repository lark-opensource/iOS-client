load('@build_bazel_rules_apple//apple:ios.bzl', 'ios_static_framework')
load(
  "@rules_pods//BazelExtensions:extensions.bzl",
  "gen_includes",
  "module_map",
  "gen_hmapsource",
  "gen_hmap",
  "run_script_phase",
  "objc_package",
  "resource_provider",
  "uniq_filegroup"
)
load('@main_project//.bitsky/common:bitsky_common.bzl', 'defs_package_features', 'defs_external_objc_library', 'defs_external_swift_library', 'defs_extension_objc_library', 'defs_extension_swift_library', 'define_minimum_os_version')
package(features = defs_package_features)
# Add a config setting release for compilation mode
# Assume that people are using `opt` for release mode
# see the bazel user manual for more information
# https://docs.bazel.build/versions/master/be/general.html#config_setting
load(
  "@bazel_skylib//lib:selects.bzl",
  "selects"
)
config_setting(
  name = "release",
  values = {
    "compilation_mode": "opt"
  }
)
config_setting(
  name = "iosCase",
  values = {
    "apple_platform_type": "ios"
  }
)
config_setting(
  name = "osxCase",
  values = {
    "apple_platform_type": "macos"
  }
)
config_setting(
  name = "tvosCase",
  values = {
    "apple_platform_type": "tvos"
  }
)
config_setting(
  name = "watchosCase",
  values = {
    "apple_platform_type": "watchos"
  }
)
config_setting(
  name = "x86_64",
  values = {
    "ios_multi_cpus": "x86_64"
  }
)
config_setting(
  name = "i386",
  values = {
    "ios_multi_cpus": "i386"
  }
)
config_setting(
  name = "armv7",
  values = {
    "ios_multi_cpus": "armv7"
  }
)
config_setting(
  name = "arm64",
  values = {
    "ios_multi_cpus": "arm64"
  }
)
config_setting(
  name = "sim_arm64",
  values = {
    "ios_multi_cpus": "sim_arm64"
  }
)
selects.config_setting_group(
  name = "sim_archs",
  match_any = [
    ":x86_64",
    ":i386",
    ":sim_arm64"
  ]
)
selects.config_setting_group(
  name = "x86",
  match_any = [
    ":x86_64",
    ":i386"
  ]
)
selects.config_setting_group(
  name = "arm",
  match_any = [
    ":arm64",
    ":armv7"
  ]
)
selects.config_setting_group(
  name = "iosDevice",
  match_all = [
    ":arm",
    ":iosCase"
  ]
)
selects.config_setting_group(
  name = "iosSimulator",
  match_all = [
    ":sim_archs",
    ":iosCase"
  ]
)
selects.config_setting_group(
  name = "watchosDevice",
  match_all = [
    ":arm",
    ":watchosCase"
  ]
)
selects.config_setting_group(
  name = "watchosSimulator",
  match_all = [
    ":x86",
    ":watchosCase"
  ]
)
selects.config_setting_group(
  name = "tvosDevice",
  match_all = [
    ":arm",
    ":tvosCase"
  ]
)
selects.config_setting_group(
  name = "tvosSimulator",
  match_all = [
    ":x86",
    ":tvosCase"
  ]
)
filegroup(
  name = "BDXResourceLoader_pod_hdrs",
  srcs = [
    ":BDXResourceLoader_root_pod_hdrs",
    ":Resource_pod_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)

gen_includes(
  name = "BDXResourceLoader_private_includes",
  include = [
    "external/BDXResourceLoader/pod_support/Headers/Private/BDXResourceLoader/"
  ],
  deps = [],
  external_name = "BDXResourceLoader"
)
gen_includes(
  name = "BDXResourceLoader_public_includes",
  include = [
    "external/BDXResourceLoader/pod_support/Headers/Public/BDXResourceLoader/"
  ],
  deps = [],
  external_name = "BDXResourceLoader"
)
filegroup(
  name = "_BDXResourceLoader_hdrs",
  srcs = [
    ":BDXResourceLoader_root_hdrs",
    ":Resource_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_hmapsource(
  name = "BDXResourceLoader_xcode_hmapsource",
  hdrs = [
    ":BDXResourceLoader_root_hdrs",
    ":Resource_hdrs"
  ],
  namespace = False,
  visibility = [
    "//visibility:public"
  ]
)
gen_hmap(
  name = "BDXResourceLoader_xcode_hmap",
  dep = ":BDXResourceLoader_xcode_hmapsource",
  visibility = [
    "//visibility:public"
  ]
)
exports_files(glob(["pod_support/Headers/Public/BDXResourceLoader/*-bitsky-generated.modulemap", "pod_support/Headers/Public/BDXResourceLoader/*-bitsky-generated-umbrella.h"]))
objc_import(
  name = "BDXResourceLoader_Resource_VendoredLibraries",
  archives = select(
    {
      "//conditions:default": [
        "libBDXResourceLoader-5164514.a"
      ]
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "BDXResourceLoader_custom_includes",
  include = [
    "external/Protobuf/objectivec"
  ],
  include_files = [],
  external_name = "BDXResourceLoader",
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "BDXResourceLoader_xcode_hmap_includes",
  include = [],
  include_files = [
    ":BDXResourceLoader_xcode_hmap"
  ],
  external_name = "BDXResourceLoader",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "BDXResourceLoader_root_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "BDXResourceLoader_root_pod_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "BDXResourceLoader_swift_interface",
  deps = [],
  minimum_os_version = "9.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "BDXResourceLoader_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  copts = select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "BDXResourceLoader_module_map",
  module_map = "pod_support/Headers/Public/BDXResourceLoader/BDXResourceLoader-bazel-generated.modulemap",
  umbrella_hdr = "pod_support/Headers/Public/BDXResourceLoader/BDXResourceLoader-bazel-generated-umbrella.h",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "BDXResourceLoader_oc",
  enable_modules = 1,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [
    "BDXResourceLoader_root_hdrs"
  ],
  pch = "@rules_pods//BazelExtensions:common.pch",
  deps = [
    ":BDXResourceLoader_xcode_hmap_includes",
    "@PodHeaders//:PodHeaders_namespace_interface",
    ":BDXResourceLoader_private_includes",
    ":BDXResourceLoader_custom_includes",
    "@PodHeaders//:PodHeaders_public_interface",
    "@PodHeaders//:PodHeaders_global_objc_interface",
    ":BDXResourceLoader_objc_interface"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
    "-I."
  ] + select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  cxxopts = [
    "-std=gnu++14"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "BDXResourceLoader",
  deps = [
    ":BDXResourceLoader_oc"
  ],
  minimum_os_version = "9.0",
  visibility = [
    "//visibility:public"
  ]
)
ios_static_framework(
  name = "BDXResourceLoader_lib",
  deps = [
    ":BDXResourceLoader"
  ],
  minimum_os_version = "9.0",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Resource_hdrs",
  srcs = [
    "XService/BDXResourceLoader/Classes/Resource/BDXGurdConfigDelegate.h",
    "XService/BDXResourceLoader/Classes/Resource/BDXGurdConfigImpl.h",
    "XService/BDXResourceLoader/Classes/Resource/BDXGurdNetDelegateImpl.h",
    "XService/BDXResourceLoader/Classes/Resource/BDXGurdService.h",
    "XService/BDXResourceLoader/Classes/Resource/BDXGurdSyncManager.h",
    "XService/BDXResourceLoader/Classes/Resource/BDXGurdSyncTask.h",
    "XService/BDXResourceLoader/Classes/Resource/BDXResourceLoader.h",
    "XService/BDXResourceLoader/Classes/Resource/BDXResourceProvider.h",
    "XService/BDXResourceLoader/Classes/Resource/NSData+BDXSource.h",
    "XService/BDXResourceLoader/Classes/Resource/loader/BDXRLBuildInProcessor.h",
    "XService/BDXResourceLoader/Classes/Resource/loader/BDXRLCDNProcessor.h",
    "XService/BDXResourceLoader/Classes/Resource/loader/BDXRLGurdProcessor.h",
    "XService/BDXResourceLoader/Classes/Resource/loader/BDXRLOperator.h",
    "XService/BDXResourceLoader/Classes/Resource/loader/BDXRLPipeline.h",
    "XService/BDXResourceLoader/Classes/Resource/loader/BDXRLProcessor.h",
    "XService/BDXResourceLoader/Classes/Resource/loader/BDXRLUrlParamConfig.h",
    "XService/BDXResourceLoader/Classes/Resource/loader/NSError+BDXRL.h"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Resource_pod_hdrs",
  srcs = [
    "pod_support/Headers/Private/BDXResourceLoader/BDXGurdConfigDelegate.h",
    "pod_support/Headers/Private/BDXResourceLoader/BDXGurdConfigImpl.h",
    "pod_support/Headers/Private/BDXResourceLoader/BDXGurdNetDelegateImpl.h",
    "pod_support/Headers/Private/BDXResourceLoader/BDXGurdService.h",
    "pod_support/Headers/Private/BDXResourceLoader/BDXGurdSyncManager.h",
    "pod_support/Headers/Private/BDXResourceLoader/BDXGurdSyncTask.h",
    "pod_support/Headers/Private/BDXResourceLoader/BDXRLBuildInProcessor.h",
    "pod_support/Headers/Private/BDXResourceLoader/BDXRLCDNProcessor.h",
    "pod_support/Headers/Private/BDXResourceLoader/BDXRLGurdProcessor.h",
    "pod_support/Headers/Private/BDXResourceLoader/BDXRLOperator.h",
    "pod_support/Headers/Private/BDXResourceLoader/BDXRLPipeline.h",
    "pod_support/Headers/Private/BDXResourceLoader/BDXRLProcessor.h",
    "pod_support/Headers/Private/BDXResourceLoader/BDXRLUrlParamConfig.h",
    "pod_support/Headers/Private/BDXResourceLoader/BDXResourceLoader.h",
    "pod_support/Headers/Private/BDXResourceLoader/BDXResourceProvider.h",
    "pod_support/Headers/Private/BDXResourceLoader/NSData+BDXSource.h",
    "pod_support/Headers/Private/BDXResourceLoader/NSError+BDXRL.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXGurdConfigDelegate.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXGurdConfigImpl.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXGurdNetDelegateImpl.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXGurdService.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXGurdSyncManager.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXGurdSyncTask.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXRLBuildInProcessor.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXRLCDNProcessor.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXRLGurdProcessor.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXRLOperator.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXRLPipeline.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXRLProcessor.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXRLUrlParamConfig.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXResourceLoader.h",
    "pod_support/Headers/Public/BDXResourceLoader/BDXResourceProvider.h",
    "pod_support/Headers/Public/BDXResourceLoader/NSData+BDXSource.h",
    "pod_support/Headers/Public/BDXResourceLoader/NSError+BDXRL.h"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "Resource_swift_interface",
  deps = [],
  minimum_os_version = "9.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Resource_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  copts = select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "Resource_module_map",
  module_map = "pod_support/Headers/Public/BDXResourceLoader/BDXResourceLoader_Resource-bazel-generated.modulemap",
  umbrella_hdr = "pod_support/Headers/Public/BDXResourceLoader/BDXResourceLoader_Resource-bazel-generated-umbrella.h",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Resource_srcs",
  srcs = [
    "XService/BDXResourceLoader/Classes/Resource/BDXGurdService.m",
    "XService/BDXResourceLoader/Classes/Resource/BDXGurdSyncManager.m",
    "XService/BDXResourceLoader/Classes/Resource/BDXGurdSyncTask.m"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Resource_oc",
  enable_modules = 1,
  srcs = [
    "Resource_srcs"
  ],
  non_arc_srcs = [],
  hdrs = [
    "Resource_hdrs"
  ],
  pch = "pod_support/Headers/Private/Resource-prefix.pch",
  deps = [
    ":BDXResourceLoader_xcode_hmap_includes",
    "@PodHeaders//:PodHeaders_namespace_interface",
    ":BDXResourceLoader_private_includes",
    ":BDXResourceLoader_custom_includes",
    "@PodHeaders//:PodHeaders_public_interface",
    "@PodHeaders//:PodHeaders_global_objc_interface",
    "@BDTrackerProtocol//:BDTrackerProtocol_objc_interface",
    "@BDWebKit//:Falcon_objc_interface",
    "@BDXServiceCenter//:BDXServiceCenter_objc_interface",
    "@ByteDanceKit//:ByteDanceKit_objc_interface",
    "@IESGeckoKit//:IESGeckoKit_objc_interface",
    "@TTNetworkDownloader//:TTNetworkDownloader_objc_interface",
    "@TTNetworkManager//:TTNetworkManager_objc_interface",
    "@BDTrackerProtocol//:BDTrackerProtocol_swift_interface",
    "@BDWebKit//:Falcon_swift_interface",
    "@BDXServiceCenter//:BDXServiceCenter_swift_interface",
    "@ByteDanceKit//:ByteDanceKit_swift_interface",
    "@IESGeckoKit//:IESGeckoKit_swift_interface",
    "@TTNetworkDownloader//:TTNetworkDownloader_swift_interface",
    "@TTNetworkManager//:TTNetworkManager_swift_interface",
    ":BDXResourceLoader_Resource_VendoredLibraries",
    ":Resource_objc_interface",
    "@BDTrackerProtocol//:BDTrackerProtocol_module_map",
    "@BDWebKit//:Falcon_module_map",
    "@BDXServiceCenter//:BDXServiceCenter_module_map",
    "@ByteDanceKit//:ByteDanceKit_module_map",
    "@IESGeckoKit//:IESGeckoKit_module_map",
    "@TTNetworkDownloader//:TTNetworkDownloader_module_map",
    "@TTNetworkManager//:TTNetworkManager_module_map"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
    "-I."
  ] + select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  cxxopts = [
    "-std=gnu++14"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "Resource",
  deps = [
    ":Resource_oc"
  ],
  minimum_os_version = "9.0",
  visibility = [
    "//visibility:public"
  ]
)
ios_static_framework(
  name = "Resource_lib",
  deps = [
    ":Resource"
  ],
  minimum_os_version = "9.0",
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "Lark_BDXResourceLoader_module_map",
  module_map = "@BDXResourceLoader//:pod_support/Headers/Public/BDXResourceLoader/Lark-bitsky-generated.modulemap",
  umbrella_hdr = "@BDXResourceLoader//:pod_support/Headers/Public/BDXResourceLoader/Lark-bitsky-generated-umbrella.h",
  visibility = ["//visibility:public"],
)
objc_library(
  name = "Lark_BDXResourceLoader_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  deps = ["@BDXResourceLoader//:BDXResourceLoader_objc_interface", "@BDXResourceLoader//:Resource_objc_interface"],
  copts = [],
  visibility = ["//visibility:public"],
)
load("@build_bazel_rules_bitsky//rules:framework.bzl", "bitsky_framework")
load("@main_project//.bitsky/common:bitsky_common.bzl", "defs_xcconfigs")
bitsky_framework(
  name = "Lark_BDXResourceLoader",
  target_name = "Lark",
  module_name = "BDXResourceLoader",
  hdrs = ["@BDXResourceLoader//:BDXResourceLoader_root_pod_hdrs", "@BDXResourceLoader//:Resource_pod_hdrs"],
  srcs = ["@BDXResourceLoader//:Resource_srcs"],
  non_arc_srcs = [],
  deps = ["@BDXResourceLoader//:BDXResourceLoader_Resource_VendoredLibraries"],
  pod_deps = ["BDTrackerProtocol", "BDWebKit", "BDXServiceCenter", "ByteDanceKit", "IESGeckoKit", "TTNetworkDownloader", "TTNetworkManager"],
  per_label_options = [],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
  ] + select({
      "//conditions:default": [],
      ":release": ["-Os",]
    }) 
    + getattr(defs_external_objc_library, "common_copts", [])
    + getattr(defs_external_objc_library, "BDXResourceLoader_copts", []),
  cxxopts = ["-std=gnu++14", ] + getattr(defs_external_objc_library, "common_cxxopts", []) 
    + getattr(defs_external_objc_library, "BDXResourceLoader_cxxopts", []),
  swift_copts = [],
  sdk_frameworks = [],
  weak_sdk_frameworks = [],
  sdk_dylibs = [],
  data = [],
  objc_features = [] + getattr(defs_external_objc_library, "common_features", []) 
    + getattr(defs_external_objc_library, "BDXResourceLoader_features", []),
  swift_features = [] + getattr(defs_external_swift_library, "common_features", []) 
    + getattr(defs_external_swift_library, "BDXResourceLoader_features", []),
  link_dynamic = getattr(defs_external_objc_library, "BDXResourceLoader_dynamic", False),
  tags = getattr(defs_external_objc_library, "BDXResourceLoader_tags", []),
  pch = "pod_support/Headers/Private/Lark_BDXResourceLoader-prefix.pch",
  xcconfig_by_build_setting = defs_xcconfigs.get("BDXResourceLoader", {}),
  visibility = ["//visibility:public"],
)