//
//  AWEVideoEditStickerBottomBarViewController.m
//  CameraClient
//
//  Created by HuangHongsen on 2020/2/3.
//

#import <CreationKitInfra/UIView+ACCMasonry.h>
#import "AWEVideoEditStickerBottomBarViewController.h"

#import <CreativeKit/ACCFontProtocol.h>
#import <CreativeKit/ACCLanguageProtocol.h>
#import <CreativeKit/ACCWebImageProtocol.h>
#import <CreativeKit/UIColor+CameraClientResource.h>
#import <CreativeKit/ACCMacros.h>
#import <Masonry/View+MASAdditions.h>
#import "ACCStickerPannelUIConfig.h"
#import <EffectPlatformSDK/IESInfoStickerCategoryModel.h>

static const CGFloat kAWEVideoEditStickerBottomBarCollectionViewCellHeight = 32;
static const CGFloat kAWEVideoEditStickerBottomBarIconEdge = 24;
static const CGFloat kAWEVideoEditStickerBottomBarIconTextSpace = 4;
static const CGFloat kAWEVideoEditStickerBottomBarHorizontalInset = 6;

@interface AWEVideoEditStickerBottomBarCollectionViewCell : UICollectionViewCell
@property (nonatomic, strong) UIImageView *iconView;
@property (nonatomic, strong) UILabel *titleLabel;
@property (nonatomic, assign) BOOL userSelected;
@property (nonatomic, assign) BOOL showTitle;
@end

@implementation AWEVideoEditStickerBottomBarCollectionViewCell

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        _iconView = [[UIImageView alloc] init];
        _iconView.backgroundColor = [UIColor clearColor];
        _iconView.alpha = 0.5f;
        _iconView.userInteractionEnabled = NO;
        [self addSubview:_iconView];
        
        _titleLabel = [[UILabel alloc] init];
        _titleLabel.font = [AWEVideoEditStickerBottomBarCollectionViewCell titleFont];
        _titleLabel.textColor = [UIColor whiteColor];
        _titleLabel.alpha = 0.5;
        _titleLabel.userInteractionEnabled = NO;
        // Add disable localization to avoid auto translation; we should display the exact text generated by server;
        ACC_LANGUAGE_DISABLE_LOCALIZATION(_titleLabel);
        [self addSubview:_titleLabel];
        
        self.layer.cornerRadius = kAWEVideoEditStickerBottomBarCollectionViewCellHeight / 2;
        self.layer.masksToBounds = YES;
        
        ACCMasMaker(_iconView, {
            make.width.height.equalTo(@(kAWEVideoEditStickerBottomBarIconEdge));
            make.left.equalTo(self).with.offset(kAWEVideoEditStickerBottomBarHorizontalInset);
            make.top.equalTo(self).with.offset(4);
        });
        
        ACCMasMaker(_titleLabel, {
            make.left.equalTo(self.iconView.mas_right).with.offset(kAWEVideoEditStickerBottomBarIconTextSpace);
            make.centerY.equalTo(self.iconView);
        });
    }
    return self;
}

- (void)updateWithIconURLs:(NSArray *)iconURLs title:(NSString *)title
{
    self.titleLabel.hidden = ACC_isEmptyString(title);
    self.titleLabel.text = title;
    [ACCWebImage() imageView:self.iconView setImageWithURLArray:iconURLs];
    if (ACC_isEmptyString(title)) {
        ACCMasReMaker(_iconView, {
            make.center.equalTo(self);
            make.width.height.equalTo(@(kAWEVideoEditStickerBottomBarIconEdge));
        });
    } else {
        ACCMasReMaker(_iconView, {
            make.width.height.equalTo(@(kAWEVideoEditStickerBottomBarIconEdge));
            make.left.equalTo(self).with.offset(kAWEVideoEditStickerBottomBarHorizontalInset);
            make.top.equalTo(self).with.offset(4);
        });
    }
}

- (void)setUserSelected:(BOOL)userSelected
{
    _userSelected = userSelected;
    if (self.showTitle) {
        self.iconView.alpha = userSelected ? 1.f : 0.5f;
    } else {
        self.iconView.alpha = 1.f;
    }
    self.titleLabel.alpha = userSelected ? 1.f : 0.5f;
    self.backgroundColor = userSelected ? ACCResourceColor(ACCColorConstLineInverse) : [UIColor clearColor];
}

+ (CGSize)cellSizeForTitle:(NSString *)title
{
    CGSize size = CGSizeZero;
    size.height = kAWEVideoEditStickerBottomBarCollectionViewCellHeight;
    CGFloat width = 2 * kAWEVideoEditStickerBottomBarHorizontalInset + kAWEVideoEditStickerBottomBarIconEdge;
    if (!ACC_isEmptyString(title)) {
        CGRect boundingRect = [title boundingRectWithSize:CGSizeMake(CGFLOAT_MAX, kAWEVideoEditStickerBottomBarCollectionViewCellHeight)
                                                  options:NSStringDrawingUsesLineFragmentOrigin
                                               attributes:@{NSFontAttributeName : [AWEVideoEditStickerBottomBarCollectionViewCell titleFont]}
                                                  context:NULL];
        width += ceil((boundingRect.size.width));
        width += kAWEVideoEditStickerBottomBarIconTextSpace;
        width += kAWEVideoEditStickerBottomBarIconTextSpace;
    }
    size.width = width;
    return size;
}

+ (UIFont *)titleFont
{
    return [ACCFont() acc_systemFontOfSize:14 weight:ACCFontWeightMedium];
}

+ (NSString *)identifier
{
    return @"AWEVideoEditStickerBottomBarCollectionViewCell";
}

- (void)handleTouchBegan
{
    if (self.showTitle) {
        return ;
    }
    [UIView animateWithDuration:0.1 animations:^{
        self.iconView.transform = CGAffineTransformScale(CGAffineTransformIdentity, 1.2, 1.2);
    }];
}

- (void)handleTouchFinished
{
    if (self.showTitle) {
        return ;
    }
    [UIView animateWithDuration:0.1 animations:^{
        self.iconView.transform = CGAffineTransformIdentity;
    }];
}

@end

@interface AWEVideoEditStickerBottomBarViewController ()<UICollectionViewDelegate, UICollectionViewDataSource>
@property (nonatomic, strong) UICollectionView *collectionView;
@property (nonatomic, strong) NSIndexPath *selectedIndexPath;

@property (nonatomic, strong) UISelectionFeedbackGenerator *selectionFeedback NS_AVAILABLE_IOS(10_0);
@property (nonatomic, strong) NSIndexPath *lastTouchedIndexPath;
@property (nonatomic, strong) NSIndexPath *lastTappedIndexPath;

@end

@implementation AWEVideoEditStickerBottomBarViewController

#pragma mark - Life Cycle

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:0.04];
    UICollectionViewFlowLayout *layout = [[UICollectionViewFlowLayout alloc] init];
    layout.scrollDirection = UICollectionViewScrollDirectionHorizontal;
    layout.minimumLineSpacing = 10.f;
    layout.minimumInteritemSpacing = 10.f;
    self.collectionView = [[UICollectionView alloc] initWithFrame:CGRectZero collectionViewLayout:layout];
    self.collectionView.showsVerticalScrollIndicator = NO;
    self.collectionView.showsHorizontalScrollIndicator = NO;
    self.collectionView.contentInset = UIEdgeInsetsMake(10, [self horizontalInset], 10, [self horizontalInset]);
    self.collectionView.delegate = self;
    self.collectionView.dataSource = self;
    self.collectionView.bounces = NO;
    self.collectionView.alwaysBounceHorizontal = NO;
    [self.collectionView.panGestureRecognizer addTarget:self action:@selector(handlePan:)];
    [self.collectionView registerClass:[AWEVideoEditStickerBottomBarCollectionViewCell class]
            forCellWithReuseIdentifier:[AWEVideoEditStickerBottomBarCollectionViewCell identifier]];
    [self.view addSubview:self.collectionView];
    ACCMasMaker(self.collectionView, {
        make.left.right.top.equalTo(self.view);
        make.height.equalTo(@([AWEVideoEditStickerBottomBarViewController collectionViewHeight]));
    });
    self.collectionView.backgroundColor = [UIColor clearColor];
}

#pragma mark - Public APIs

- (void)selectCategory:(IESCategoryModel *)category
{
    if (!category) {
        return ;
    }
    NSInteger index = [self.categories indexOfObject:category];
    if (index == NSNotFound) {
        return ;
    }
    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:index inSection:0];
    if (![indexPath isEqual:self.selectedIndexPath]) {
        [self moveItemAtIndexPathToCenter:indexPath];
    }
    [self selectItemAtIndexPath:indexPath];
}

- (void)setCategories:(NSArray<IESCategoryModel *> *)categories
{
    _categories = categories;
    self.selectedIndexPath = nil;
    CGFloat space = 10.f;
    if (![self.uiConfig isCollectionViewLayoutFixedSpace]) {
        if ([UIDevice acc_screenWidthCategory] == ACCScreenWidthCategoryiPhone5) {
            space = (ACC_SCREEN_WIDTH - 2 * [self horizontalInset] - 6.5 * kAWEVideoEditStickerBottomBarCollectionViewCellHeight) / 6.f;
        } else {
            NSInteger count = [categories count];
            if (count <= 8) {
                space = (ACC_SCREEN_WIDTH - 2 * [self horizontalInset] - count * kAWEVideoEditStickerBottomBarCollectionViewCellHeight) / (count - 1);
            } else {
                space = (ACC_SCREEN_WIDTH - [self horizontalInset] - 8.5 * kAWEVideoEditStickerBottomBarCollectionViewCellHeight) / 8.f;
            }
        }
    }
    UICollectionViewFlowLayout *layout = (UICollectionViewFlowLayout *)[self.collectionView collectionViewLayout];
    layout.minimumLineSpacing = space;
    layout.minimumInteritemSpacing = space;
    [self.collectionView reloadData];
}

+ (CGFloat)bottomBarHeight
{
    return [AWEVideoEditStickerBottomBarViewController collectionViewHeight] + ACC_IPHONE_X_BOTTOM_OFFSET;
}

+ (CGFloat)collectionViewHeight
{
    return 52.f;
}

#pragma mark - UICollectionviewDataSource

- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 1;
}

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return [self.categories count];
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    AWEVideoEditStickerBottomBarCollectionViewCell *cell = (AWEVideoEditStickerBottomBarCollectionViewCell *)[collectionView dequeueReusableCellWithReuseIdentifier:[AWEVideoEditStickerBottomBarCollectionViewCell identifier] forIndexPath:indexPath];
    if (indexPath.row >= [self.categories count]) {
        return cell;
    }
    IESCategoryModel *category = self.categories[indexPath.row];
    [cell setShowTitle:[self.uiConfig shouldStickerBottomBarCollectionViewCellShowTitle]];
    [cell updateWithIconURLs:category.selectedIconUrls title:![self.uiConfig shouldStickerBottomBarCollectionViewCellShowTitle] ? @"" : category.categoryName];
    [cell setUserSelected:[indexPath isEqual:self.selectedIndexPath]];
    return cell;
}

#pragma mark - UICollectionViewDelegate

- (CGSize)collectionView:(UICollectionView *)collectionView layout:(nonnull UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(nonnull NSIndexPath *)indexPath
{
    if (indexPath.row >= [self.categories count]) {
        return CGSizeZero;
    }
    if ([self.uiConfig isStickerBottomBarCollectionViewCellSizeFixed]) {
        return CGSizeMake(kAWEVideoEditStickerBottomBarCollectionViewCellHeight, kAWEVideoEditStickerBottomBarCollectionViewCellHeight);
    } else {
        IESCategoryModel *category = self.categories[indexPath.row];
        return [AWEVideoEditStickerBottomBarCollectionViewCell cellSizeForTitle:category.categoryName];
    }
}

- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.row >= [self.categories count]) {
        return ;
    }
    [self selectItemAtIndexPath:indexPath];
    [self moveItemAtIndexPathToCenter:indexPath];
    [self tapEngineNotify];
    BOOL shouldTrack = ![self.lastTappedIndexPath isEqual:indexPath];
    [self.delegate bottomBarViewControllerDidSelectCategory:self.categories[indexPath.row] shouldTrack:shouldTrack];
    self.lastTappedIndexPath = indexPath;
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    if (self.disableLeftScrollOutOfBounds) {
        if (scrollView.contentOffset.x <= -self.collectionView.contentInset.left) {
            scrollView.contentOffset = CGPointMake(-self.collectionView.contentInset.left, scrollView.contentOffset.y);
        }
    }
    if (self.disableRightScrollOutOfBounds) {
        if (scrollView.contentOffset.x + ACC_SCREEN_WIDTH >= scrollView.contentSize.width) {
            scrollView.contentOffset = CGPointMake(scrollView.contentSize.width - ACC_SCREEN_WIDTH + scrollView.contentInset.right - 2, scrollView.contentOffset.y);
        }
    }
}

#pragma mark - Private helpers

- (void)selectItemAtIndexPath:(NSIndexPath *)indexPath
{
    if ([indexPath isEqual:self.selectedIndexPath]) {
        return ;
    }
    AWEVideoEditStickerBottomBarCollectionViewCell *lastSelectedCell = (AWEVideoEditStickerBottomBarCollectionViewCell *)[self.collectionView cellForItemAtIndexPath:self.selectedIndexPath];
    NSIndexPath *lastSelectedIndexPath = self.selectedIndexPath;
    self.selectedIndexPath = indexPath;
    if (lastSelectedCell) {
        [lastSelectedCell setUserSelected:NO];
    } else if (lastSelectedIndexPath) {
        [self.collectionView reloadItemsAtIndexPaths:@[lastSelectedIndexPath]];
    }
    AWEVideoEditStickerBottomBarCollectionViewCell *selectedCell = (AWEVideoEditStickerBottomBarCollectionViewCell *)[self.collectionView cellForItemAtIndexPath:indexPath];
    if (selectedCell) {
        [selectedCell setUserSelected:YES];
    } else {
        [self.collectionView reloadItemsAtIndexPaths:@[indexPath]];
    }
}

- (void)moveItemAtIndexPathToCenter:(NSIndexPath *)indexPath
{
    CGPoint contentOffset = self.collectionView.contentOffset;
    UICollectionViewFlowLayout *layout = (UICollectionViewFlowLayout *)[self.collectionView collectionViewLayout];
    CGRect frame = [layout layoutAttributesForItemAtIndexPath:indexPath].frame;
    CGPoint center = CGPointMake(CGRectGetMidX(frame), CGRectGetMidY(frame));
    CGFloat xOffset = center.x - ACC_SCREEN_WIDTH / 2.f;
    if (xOffset <= 0) {
        xOffset = -self.collectionView.contentInset.left;
    } else if (center.x + ACC_SCREEN_WIDTH / 2.f >= self.collectionView.contentSize.width) {
        xOffset = self.collectionView.contentSize.width - ACC_SCREEN_WIDTH + self.collectionView.contentInset.right;
    }
    BOOL animated = YES;
    if (!self.selectedIndexPath) {
        animated = NO;
    }
    [self.collectionView setContentOffset:CGPointMake(xOffset, contentOffset.y) animated:animated];
}

- (CGFloat)horizontalInset
{
    return 12.f;
}

- (void)tapEngineNotify
{
    if (@available(iOS 10.0, *)) {
        [self.selectionFeedback selectionChanged];
    }
}

- (UISelectionFeedbackGenerator *)selectionFeedback
{
    if (!_selectionFeedback) {
        _selectionFeedback = [[UISelectionFeedbackGenerator alloc] init];
    }
    return _selectionFeedback;
}

- (void)handlePan:(UIPanGestureRecognizer *)pan
{
    CGPoint location = [pan locationInView:self.collectionView];
    NSIndexPath *indexPath = [self.collectionView indexPathForItemAtPoint:location];
    AWEVideoEditStickerBottomBarCollectionViewCell *lastTouchedCell = nil;
    if (self.lastTouchedIndexPath) {
        lastTouchedCell = (AWEVideoEditStickerBottomBarCollectionViewCell *)[self.collectionView cellForItemAtIndexPath:self.lastTouchedIndexPath];
    }
    if (pan.state == UIGestureRecognizerStateBegan || pan.state == UIGestureRecognizerStateChanged) {
        if (!indexPath) {
            [lastTouchedCell handleTouchFinished];
            self.lastTouchedIndexPath = nil;
        } else if (![indexPath isEqual:self.lastTouchedIndexPath]) {
            [lastTouchedCell handleTouchFinished];
            AWEVideoEditStickerBottomBarCollectionViewCell *cell = (AWEVideoEditStickerBottomBarCollectionViewCell *)[self.collectionView cellForItemAtIndexPath:indexPath];
            [cell handleTouchBegan];
            self.lastTouchedIndexPath = indexPath;
        }
    } else {
        [lastTouchedCell handleTouchFinished];
        self.lastTouchedIndexPath = nil;
    }
}

@end


/**************************SPLIT LINE***************************************/

@interface ACCVideoEditInfoStickerBottomBarViewController ()<UICollectionViewDelegate, UICollectionViewDataSource>
@property (nonatomic, strong) UICollectionView *collectionView;
@property (nonatomic, strong) NSIndexPath *selectedIndexPath;

@property (nonatomic, strong) UISelectionFeedbackGenerator *selectionFeedback NS_AVAILABLE_IOS(10_0);
@property (nonatomic, strong) NSIndexPath *lastTouchedIndexPath;
@property (nonatomic, strong) NSIndexPath *lastTappedIndexPath;

@end

@implementation ACCVideoEditInfoStickerBottomBarViewController

#pragma mark - Life Cycle

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:0.04];
    UICollectionViewFlowLayout *layout = [[UICollectionViewFlowLayout alloc] init];
    layout.scrollDirection = UICollectionViewScrollDirectionHorizontal;
    layout.minimumLineSpacing = 10.f;
    layout.minimumInteritemSpacing = 10.f;
    self.collectionView = [[UICollectionView alloc] initWithFrame:CGRectZero collectionViewLayout:layout];
    self.collectionView.showsVerticalScrollIndicator = NO;
    self.collectionView.showsHorizontalScrollIndicator = NO;
    self.collectionView.contentInset = UIEdgeInsetsMake(10, [self horizontalInset], 10, [self horizontalInset]);
    self.collectionView.delegate = self;
    self.collectionView.dataSource = self;
    self.collectionView.bounces = NO;
    self.collectionView.alwaysBounceHorizontal = NO;
    [self.collectionView.panGestureRecognizer addTarget:self action:@selector(handlePan:)];
    [self.collectionView registerClass:[AWEVideoEditStickerBottomBarCollectionViewCell class]
            forCellWithReuseIdentifier:[AWEVideoEditStickerBottomBarCollectionViewCell identifier]];
    [self.view addSubview:self.collectionView];
    ACCMasMaker(self.collectionView, {
        make.left.right.top.equalTo(self.view);
        make.height.equalTo(@([AWEVideoEditStickerBottomBarViewController collectionViewHeight]));
    });
    self.collectionView.backgroundColor = [UIColor clearColor];
}

#pragma mark - Public APIs

- (void)selectCategory:(IESInfoStickerCategoryModel *)category
{
    if (!category) {
        return ;
    }
    NSInteger index = [self.categories indexOfObject:category];
    if (index == NSNotFound) {
        return ;
    }
    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:index inSection:0];
    if (![indexPath isEqual:self.selectedIndexPath]) {
        [self moveItemAtIndexPathToCenter:indexPath];
    }
    [self selectItemAtIndexPath:indexPath];
}

- (void)setCategories:(NSArray<IESInfoStickerCategoryModel *> *)categories
{
    _categories = categories;
    self.selectedIndexPath = nil;
    CGFloat space = 10.f;
    if (![self.uiConfig isCollectionViewLayoutFixedSpace]) {
        if ([UIDevice acc_screenWidthCategory] == ACCScreenWidthCategoryiPhone5) {
            space = (ACC_SCREEN_WIDTH - 2 * [self horizontalInset] - 6.5 * kAWEVideoEditStickerBottomBarCollectionViewCellHeight) / 6.f;
        } else {
            NSInteger count = [categories count];
            if (count <= 8) {
                space = (ACC_SCREEN_WIDTH - 2 * [self horizontalInset] - count * kAWEVideoEditStickerBottomBarCollectionViewCellHeight) / (count - 1);
            } else {
                space = (ACC_SCREEN_WIDTH - [self horizontalInset] - 8.5 * kAWEVideoEditStickerBottomBarCollectionViewCellHeight) / 8.f;
            }
        }
    }
    UICollectionViewFlowLayout *layout = (UICollectionViewFlowLayout *)[self.collectionView collectionViewLayout];
    layout.minimumLineSpacing = space;
    layout.minimumInteritemSpacing = space;
    [self.collectionView reloadData];
}

+ (CGFloat)bottomBarHeight
{
    return [AWEVideoEditStickerBottomBarViewController collectionViewHeight] + ACC_IPHONE_X_BOTTOM_OFFSET;
}

+ (CGFloat)collectionViewHeight
{
    return 52.f;
}

#pragma mark - UICollectionviewDataSource

- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 1;
}

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return [self.categories count];
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    AWEVideoEditStickerBottomBarCollectionViewCell *cell = (AWEVideoEditStickerBottomBarCollectionViewCell *)[collectionView dequeueReusableCellWithReuseIdentifier:[AWEVideoEditStickerBottomBarCollectionViewCell identifier] forIndexPath:indexPath];
    if (indexPath.row >= [self.categories count]) {
        return cell;
    }
    IESInfoStickerCategoryModel *category = self.categories[indexPath.row];
    [cell setShowTitle:[self.uiConfig shouldStickerBottomBarCollectionViewCellShowTitle]];
    [cell updateWithIconURLs:category.iconSelectedURLs title:![self.uiConfig shouldStickerBottomBarCollectionViewCellShowTitle] ? @"" : category.categoryName];
    [cell setUserSelected:[indexPath isEqual:self.selectedIndexPath]];
    return cell;
}

#pragma mark - UICollectionViewDelegate

- (CGSize)collectionView:(UICollectionView *)collectionView layout:(nonnull UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(nonnull NSIndexPath *)indexPath
{
    if (indexPath.row >= [self.categories count]) {
        return CGSizeZero;
    }
    if ([self.uiConfig isStickerBottomBarCollectionViewCellSizeFixed]) {
        return CGSizeMake(kAWEVideoEditStickerBottomBarCollectionViewCellHeight, kAWEVideoEditStickerBottomBarCollectionViewCellHeight);
    } else {
        IESInfoStickerCategoryModel *category = self.categories[indexPath.row];
        return [AWEVideoEditStickerBottomBarCollectionViewCell cellSizeForTitle:category.categoryName];
    }
}

- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.row >= [self.categories count]) {
        return ;
    }
    [self selectItemAtIndexPath:indexPath];
    [self moveItemAtIndexPathToCenter:indexPath];
    [self tapEngineNotify];
    BOOL shouldTrack = ![self.lastTappedIndexPath isEqual:indexPath];
    [self.delegate bottomBarViewControllerDidSelectCategory:self.categories[indexPath.row] shouldTrack:shouldTrack];
    self.lastTappedIndexPath = indexPath;
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    if (self.disableLeftScrollOutOfBounds) {
        if (scrollView.contentOffset.x <= -self.collectionView.contentInset.left) {
            scrollView.contentOffset = CGPointMake(-self.collectionView.contentInset.left, scrollView.contentOffset.y);
        }
    }
    if (self.disableRightScrollOutOfBounds) {
        if (scrollView.contentOffset.x + ACC_SCREEN_WIDTH >= scrollView.contentSize.width) {
            scrollView.contentOffset = CGPointMake(scrollView.contentSize.width - ACC_SCREEN_WIDTH + scrollView.contentInset.right - 2, scrollView.contentOffset.y);
        }
    }
}

#pragma mark - Private helpers

- (void)selectItemAtIndexPath:(NSIndexPath *)indexPath
{
    if ([indexPath isEqual:self.selectedIndexPath]) {
        return ;
    }
    AWEVideoEditStickerBottomBarCollectionViewCell *lastSelectedCell = (AWEVideoEditStickerBottomBarCollectionViewCell *)[self.collectionView cellForItemAtIndexPath:self.selectedIndexPath];
    NSIndexPath *lastSelectedIndexPath = self.selectedIndexPath;
    self.selectedIndexPath = indexPath;
    if (lastSelectedCell) {
        [lastSelectedCell setUserSelected:NO];
    } else if (lastSelectedIndexPath) {
        [self.collectionView reloadItemsAtIndexPaths:@[lastSelectedIndexPath]];
    }
    AWEVideoEditStickerBottomBarCollectionViewCell *selectedCell = (AWEVideoEditStickerBottomBarCollectionViewCell *)[self.collectionView cellForItemAtIndexPath:indexPath];
    if (selectedCell) {
        [selectedCell setUserSelected:YES];
    } else {
        [self.collectionView reloadItemsAtIndexPaths:@[indexPath]];
    }
}

- (void)moveItemAtIndexPathToCenter:(NSIndexPath *)indexPath
{
    CGPoint contentOffset = self.collectionView.contentOffset;
    UICollectionViewFlowLayout *layout = (UICollectionViewFlowLayout *)[self.collectionView collectionViewLayout];
    CGRect frame = [layout layoutAttributesForItemAtIndexPath:indexPath].frame;
    CGPoint center = CGPointMake(CGRectGetMidX(frame), CGRectGetMidY(frame));
    CGFloat xOffset = center.x - ACC_SCREEN_WIDTH / 2.f;
    if (xOffset <= 0) {
        xOffset = -self.collectionView.contentInset.left;
    } else if (center.x + ACC_SCREEN_WIDTH / 2.f >= self.collectionView.contentSize.width) {
        xOffset = self.collectionView.contentSize.width - ACC_SCREEN_WIDTH + self.collectionView.contentInset.right;
    }
    BOOL animated = YES;
    if (!self.selectedIndexPath) {
        animated = NO;
    }
    [self.collectionView setContentOffset:CGPointMake(xOffset, contentOffset.y) animated:animated];
}

- (CGFloat)horizontalInset
{
    return 12.f;
}

- (void)tapEngineNotify
{
    if (@available(iOS 10.0, *)) {
        [self.selectionFeedback selectionChanged];
    }
}

- (UISelectionFeedbackGenerator *)selectionFeedback
{
    if (!_selectionFeedback) {
        _selectionFeedback = [[UISelectionFeedbackGenerator alloc] init];
    }
    return _selectionFeedback;
}

- (void)handlePan:(UIPanGestureRecognizer *)pan
{
    CGPoint location = [pan locationInView:self.collectionView];
    NSIndexPath *indexPath = [self.collectionView indexPathForItemAtPoint:location];
    AWEVideoEditStickerBottomBarCollectionViewCell *lastTouchedCell = nil;
    if (self.lastTouchedIndexPath) {
        lastTouchedCell = (AWEVideoEditStickerBottomBarCollectionViewCell *)[self.collectionView cellForItemAtIndexPath:self.lastTouchedIndexPath];
    }
    if (pan.state == UIGestureRecognizerStateBegan || pan.state == UIGestureRecognizerStateChanged) {
        if (!indexPath) {
            [lastTouchedCell handleTouchFinished];
            self.lastTouchedIndexPath = nil;
        } else if (![indexPath isEqual:self.lastTouchedIndexPath]) {
            [lastTouchedCell handleTouchFinished];
            AWEVideoEditStickerBottomBarCollectionViewCell *cell = (AWEVideoEditStickerBottomBarCollectionViewCell *)[self.collectionView cellForItemAtIndexPath:indexPath];
            [cell handleTouchBegan];
            self.lastTouchedIndexPath = indexPath;
        }
    } else {
        [lastTouchedCell handleTouchFinished];
        self.lastTouchedIndexPath = nil;
    }
}

@end
