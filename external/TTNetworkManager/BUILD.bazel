load('@build_bazel_rules_apple//apple:resources.bzl', 'apple_resource_group')
load('@build_bazel_rules_apple//apple:ios.bzl', 'ios_static_framework')
load(
  "@rules_pods//BazelExtensions:extensions.bzl",
  "gen_includes",
  "module_map",
  "gen_hmapsource",
  "gen_hmap",
  "run_script_phase",
  "objc_package",
  "resource_provider",
  "uniq_filegroup"
)
load('@main_project//.bitsky/common:bitsky_common.bzl', 'defs_package_features', 'defs_external_objc_library', 'defs_external_swift_library', 'defs_extension_objc_library', 'defs_extension_swift_library', 'define_minimum_os_version')
package(features = defs_package_features)
# Add a config setting release for compilation mode
# Assume that people are using `opt` for release mode
# see the bazel user manual for more information
# https://docs.bazel.build/versions/master/be/general.html#config_setting
load(
  "@bazel_skylib//lib:selects.bzl",
  "selects"
)
config_setting(
  name = "release",
  values = {
    "compilation_mode": "opt"
  }
)
config_setting(
  name = "iosCase",
  values = {
    "apple_platform_type": "ios"
  }
)
config_setting(
  name = "osxCase",
  values = {
    "apple_platform_type": "macos"
  }
)
config_setting(
  name = "tvosCase",
  values = {
    "apple_platform_type": "tvos"
  }
)
config_setting(
  name = "watchosCase",
  values = {
    "apple_platform_type": "watchos"
  }
)
config_setting(
  name = "x86_64",
  values = {
    "ios_multi_cpus": "x86_64"
  }
)
config_setting(
  name = "i386",
  values = {
    "ios_multi_cpus": "i386"
  }
)
config_setting(
  name = "armv7",
  values = {
    "ios_multi_cpus": "armv7"
  }
)
config_setting(
  name = "arm64",
  values = {
    "ios_multi_cpus": "arm64"
  }
)
config_setting(
  name = "sim_arm64",
  values = {
    "ios_multi_cpus": "sim_arm64"
  }
)
selects.config_setting_group(
  name = "sim_archs",
  match_any = [
    ":x86_64",
    ":i386",
    ":sim_arm64"
  ]
)
selects.config_setting_group(
  name = "x86",
  match_any = [
    ":x86_64",
    ":i386"
  ]
)
selects.config_setting_group(
  name = "arm",
  match_any = [
    ":arm64",
    ":armv7"
  ]
)
selects.config_setting_group(
  name = "iosDevice",
  match_all = [
    ":arm",
    ":iosCase"
  ]
)
selects.config_setting_group(
  name = "iosSimulator",
  match_all = [
    ":sim_archs",
    ":iosCase"
  ]
)
selects.config_setting_group(
  name = "watchosDevice",
  match_all = [
    ":arm",
    ":watchosCase"
  ]
)
selects.config_setting_group(
  name = "watchosSimulator",
  match_all = [
    ":x86",
    ":watchosCase"
  ]
)
selects.config_setting_group(
  name = "tvosDevice",
  match_all = [
    ":arm",
    ":tvosCase"
  ]
)
selects.config_setting_group(
  name = "tvosSimulator",
  match_all = [
    ":x86",
    ":tvosCase"
  ]
)
filegroup(
  name = "TTNetworkManager_pod_hdrs",
  srcs = [
    ":TTNetworkManager_root_pod_hdrs",
    ":Core_pod_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)

gen_includes(
  name = "TTNetworkManager_private_includes",
  include = [
    "external/TTNetworkManager/pod_support/Headers/Private/TTNetworkManager/"
  ],
  deps = [],
  external_name = "TTNetworkManager"
)
gen_includes(
  name = "TTNetworkManager_public_includes",
  include = [
    "external/TTNetworkManager/pod_support/Headers/Public/TTNetworkManager/"
  ],
  deps = [],
  external_name = "TTNetworkManager"
)
filegroup(
  name = "_TTNetworkManager_hdrs",
  srcs = [
    ":TTNetworkManager_root_hdrs",
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_hmapsource(
  name = "TTNetworkManager_xcode_hmapsource",
  hdrs = [
    ":TTNetworkManager_root_hdrs",
    ":Core_hdrs"
  ],
  namespace = False,
  visibility = [
    "//visibility:public"
  ]
)
gen_hmap(
  name = "TTNetworkManager_xcode_hmap",
  dep = ":TTNetworkManager_xcode_hmapsource",
  visibility = [
    "//visibility:public"
  ]
)
exports_files(glob(["pod_support/Headers/Public/TTNetworkManager/*-bitsky-generated.modulemap", "pod_support/Headers/Public/TTNetworkManager/*-bitsky-generated-umbrella.h"]))
objc_import(
  name = "TTNetworkManager_VendoredLibraries",
  archives = select(
    {
      "//conditions:default": [
        "Pod/Classes/TTNetworkBase/Chromium/libs/libsscronet.a"
      ]
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
config_setting(
  name = "dev_mode",
  define_values = {
    "BUILD_MODE": "DEV"
  }
)
run_script_phase(
  name = "TTNetworkManager_Core_script_0",
  cmd = select(
    {
      "//conditions:default": "cd external\n\n            IFS=$\'\\n\'\n            if [[ -d ${PODS_ROOT}/TTNetworkManager/Pod ]]; then\n                cd ${PODS_ROOT}/TTNetworkManager/Pod\n                bash GetTTNetOCVersion.sh\n            fi\n            ",
      ":dev_mode": ""
    }
  ),
  env = {
    "PODS_TARGET_SRCROOT": "TTNetworkManager"
  },
  description = "GetTTNetOCVersion",
  deps = [],
  outputs = [],
  external_name = "TTNetworkManager",
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "TTNetworkManager_custom_includes",
  include = [
    "external/TTNetworkManager/Pod/Classes/TTNetworkBase/Chromium/includes/third_party/boringssl/src/include",
    "external/TTNetworkManager/Pod/Classes/TTNetworkBase/Chromium/includes/third_party/protobuf/src",
    "external/TTNetworkManager/Pod/Classes/TTNetworkBase/Chromium/includes/third_party/abseil-cpp",
    "external/TTNetworkManager/Pod/Classes/TTNetworkBase/Chromium/includes",
    "external/Protobuf/objectivec"
  ],
  include_files = [],
  external_name = "TTNetworkManager",
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "TTNetworkManager_xcode_hmap_includes",
  include = [],
  include_files = [
    ":TTNetworkManager_xcode_hmap"
  ],
  external_name = "TTNetworkManager",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "TTNetworkManager_root_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "TTNetworkManager_root_pod_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "TTNetworkManager_swift_interface",
  deps = [],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "TTNetworkManager_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  copts = select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "TTNetworkManager_module_map",
  module_map = "pod_support/Headers/Public/TTNetworkManager/TTNetworkManager-bazel-generated.modulemap",
  umbrella_hdr = "pod_support/Headers/Public/TTNetworkManager/TTNetworkManager-bazel-generated-umbrella.h",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "TTNetworkManager_oc",
  enable_modules = 1,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [
    "TTNetworkManager_root_hdrs"
  ],
  pch = "@rules_pods//BazelExtensions:common.pch",
  sdk_frameworks = [
    "CFNetwork",
    "MobileCoreServices",
    "SystemConfiguration",
    "JavaScriptCore",
    "CoreTelephony"
  ],
  weak_sdk_frameworks = [
    "Network"
  ],
  sdk_dylibs = [
    "c++",
    "resolv"
  ],
  deps = [
    ":TTNetworkManager_xcode_hmap_includes",
    "@PodHeaders//:PodHeaders_namespace_interface",
    ":TTNetworkManager_private_includes",
    ":TTNetworkManager_custom_includes",
    "@PodHeaders//:PodHeaders_public_interface",
    "@PodHeaders//:PodHeaders_global_objc_interface",
    ":TTNetworkManager_VendoredLibraries",
    ":TTNetworkManager_objc_interface"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-non-modular-include-in-framework-module",
    "-Wno-error=non-modular-include-in-framework-module",
    "-DNDEBUG=1",
    "-DGOOGLE_PROTOBUF_NO_RTTI",
    "-DGOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
    "-DTTNetworkManager_POD_VERSION=@\\\"13_4.1.137.13-lark\\\"",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
    "-I."
  ] + select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  cxxopts = [
    "-fno-rtti",
    "-std=gnu++14"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "TTNetworkManager",
  deps = [
    ":TTNetworkManager_oc"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
ios_static_framework(
  name = "TTNetworkManager_lib",
  deps = [
    ":TTNetworkManager"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
apple_resource_group(
  name = "Core_resource_group",
  resources = [
    ":Core_resource_group_provider"
  ],
  visibility = [
    "//visibility:public"
  ]
)
resource_provider(
  name = "Core_resource_group_provider",
  resources = [
    "Pod/Assets/TTNetVersion.plist"
  ],
  deps = [
    ":TTNetworkManager_Core_script_0"
  ]
)
filegroup(
  name = "Core_hdrs",
  srcs = [
    "Pod/Classes/Public/TTNetworkBase/Chromium/TTDispatchResult.h",
    "Pod/Classes/Public/TTNetworkBase/Chromium/TTDnsOuterService.h",
    "Pod/Classes/Public/TTNetworkBase/Chromium/TTDnsQuery.h",
    "Pod/Classes/Public/TTNetworkBase/Chromium/TTDnsResult.h",
    "Pod/Classes/Public/TTNetworkBase/Chromium/TTHTTPJSONResponseSerializerBaseChromium.h",
    "Pod/Classes/Public/TTNetworkBase/Chromium/TTHttpMultipartFormDataChromium.h",
    "Pod/Classes/Public/TTNetworkBase/Chromium/TTHttpRequestChromium.h",
    "Pod/Classes/Public/TTNetworkBase/Chromium/TTHttpResponseChromium.h",
    "Pod/Classes/Public/TTNetworkBase/Chromium/TTNetRequestLevelController.h",
    "Pod/Classes/Public/TTNetworkBase/Chromium/TTNetworkQualityEstimator.h",
    "Pod/Classes/Public/TTNetworkBase/Chromium/TTRedirectTask.h",
    "Pod/Classes/Public/TTNetworkBase/Chromium/TTRequestDispatcher.h",
    "Pod/Classes/Public/TTNetworkBase/Define/TTNetworkDefine.h",
    "Pod/Classes/Public/TTNetworkBase/HttpAdaptor/TTHttpMultipartFormData.h",
    "Pod/Classes/Public/TTNetworkBase/HttpAdaptor/TTHttpRequest.h",
    "Pod/Classes/Public/TTNetworkBase/HttpAdaptor/TTHttpResponse.h",
    "Pod/Classes/Public/TTNetworkBase/HttpAdaptor/TTHttpTask.h",
    "Pod/Classes/Public/TTNetworkBase/Model/TTRequestModel.h",
    "Pod/Classes/Public/TTNetworkBase/Model/TTResponseModelProtocol.h",
    "Pod/Classes/Public/TTNetworkBase/NSURLRequest+WebviewInfo.h",
    "Pod/Classes/Public/TTNetworkBase/NetworkUtil/RequestRetryResult.h",
    "Pod/Classes/Public/TTNetworkBase/NetworkUtil/TTNetworkHTTPErrorCodeMapper.h",
    "Pod/Classes/Public/TTNetworkBase/NetworkUtil/TTNetworkUtil.h",
    "Pod/Classes/Public/TTNetworkBase/Serializer/TTDefaultHTTPRequestSerializer.h",
    "Pod/Classes/Public/TTNetworkBase/Serializer/TTHTTPBinaryResponseSerializerBase.h",
    "Pod/Classes/Public/TTNetworkBase/Serializer/TTHTTPRequestSerializerBase.h",
    "Pod/Classes/Public/TTNetworkBase/Serializer/TTHTTPRequestSerializerProtocol.h",
    "Pod/Classes/Public/TTNetworkBase/Serializer/TTHTTPResponseSerializerBase.h",
    "Pod/Classes/Public/TTNetworkBase/Serializer/TTHTTPResponseSerializerProtocol.h",
    "Pod/Classes/Public/TTNetworkBase/Serializer/TTPostDataHttpRequestSerializer.h",
    "Pod/Classes/Public/TTNetworkBase/TTNetworkManager.h",
    "Pod/Classes/Public/TTNetworkBase/TTNetworkManagerMonitorNotifier.h",
    "Pod/Classes/Public/TTPushManager/TTPushManager.h",
    "Pod/Classes/Public/TTPushManager/TTPushMessageBaseObject.h",
    "Pod/Classes/Public/TTPushManager/TTPushMessageDispatcher.h",
    "Pod/Classes/Public/TTPushManager/TTPushMessageReceiver.hpp",
    "Pod/Classes/TTNetDiagnosis/Impl/TTExpDiagnosisRequest.h",
    "Pod/Classes/TTNetDiagnosis/TTExpDiagnosisCallback.h",
    "Pod/Classes/TTNetDiagnosis/TTExpDiagnosisRequestProtocol.h",
    "Pod/Classes/TTNetDiagnosis/TTExpDiagnosisService.h",
    "Pod/Classes/TTNetDiagnosis/TTGameExpDiagnosisService.h",
    "Pod/Classes/TTNetworkBase/Chromium/TTConcurrentHttpTask/TTConcurrentHttpTask.h",
    "Pod/Classes/TTNetworkBase/Chromium/TTConcurrentHttpTask/TTNetworkManagerApiParameters.h",
    "Pod/Classes/TTNetworkBase/Chromium/TTConcurrentHttpTask/TTNetworkManagerChromium+TTConcurrentHttpTask.h",
    "Pod/Classes/TTNetworkBase/Chromium/TTFetcherDelegateForCommonTask.h",
    "Pod/Classes/TTNetworkBase/Chromium/TTFetcherDelegateForStreamTask.h",
    "Pod/Classes/TTNetworkBase/Chromium/TTHTTPRequestSerializerBaseChromium.h",
    "Pod/Classes/TTNetworkBase/Chromium/TTHttpTaskChromium.h",
    "Pod/Classes/TTNetworkBase/Chromium/TTMpaService.h",
    "Pod/Classes/TTNetworkBase/Chromium/TTNetInitMetrics.h",
    "Pod/Classes/TTNetworkBase/Chromium/TTNetRequestLevelController+TTNetInner.h",
    "Pod/Classes/TTNetworkBase/Chromium/TTNetworkManagerChromium.h",
    "Pod/Classes/TTNetworkBase/Chromium/TTRegionManager.h",
    "Pod/Classes/TTNetworkBase/Chromium/TTURLDispatch.h",
    "Pod/Classes/TTNetworkBase/NetworkUtil/NSTimer+TTNetworkBlockTimer.h",
    "Pod/Classes/TTNetworkBase/NetworkUtil/TTCdnCacheVerifyManager.h",
    "Pod/Classes/TTNetworkBase/NetworkUtil/TTNetworkManagerLog.h",
    "Pod/Classes/TTNetworkBase/NetworkUtil/TTReqFilterManager.h",
    "Pod/Classes/TTNetworkBase/QueryFilter/QueryFilterAction.h",
    "Pod/Classes/TTNetworkBase/QueryFilter/QueryFilterEngine.h",
    "Pod/Classes/TTNetworkBase/QueryFilter/QueryFilterResult.h"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_pod_hdrs",
  srcs = [
    "pod_support/Headers/Private/TTNetworkManager/NSTimer+TTNetworkBlockTimer.h",
    "pod_support/Headers/Private/TTNetworkManager/NSURLRequest+WebviewInfo.h",
    "pod_support/Headers/Private/TTNetworkManager/QueryFilterAction.h",
    "pod_support/Headers/Private/TTNetworkManager/QueryFilterEngine.h",
    "pod_support/Headers/Private/TTNetworkManager/QueryFilterResult.h",
    "pod_support/Headers/Private/TTNetworkManager/RequestRetryResult.h",
    "pod_support/Headers/Private/TTNetworkManager/TTCdnCacheVerifyManager.h",
    "pod_support/Headers/Private/TTNetworkManager/TTConcurrentHttpTask.h",
    "pod_support/Headers/Private/TTNetworkManager/TTDefaultHTTPRequestSerializer.h",
    "pod_support/Headers/Private/TTNetworkManager/TTDispatchResult.h",
    "pod_support/Headers/Private/TTNetworkManager/TTDnsOuterService.h",
    "pod_support/Headers/Private/TTNetworkManager/TTDnsQuery.h",
    "pod_support/Headers/Private/TTNetworkManager/TTDnsResult.h",
    "pod_support/Headers/Private/TTNetworkManager/TTExpDiagnosisCallback.h",
    "pod_support/Headers/Private/TTNetworkManager/TTExpDiagnosisRequest.h",
    "pod_support/Headers/Private/TTNetworkManager/TTExpDiagnosisRequestProtocol.h",
    "pod_support/Headers/Private/TTNetworkManager/TTExpDiagnosisService.h",
    "pod_support/Headers/Private/TTNetworkManager/TTFetcherDelegateForCommonTask.h",
    "pod_support/Headers/Private/TTNetworkManager/TTFetcherDelegateForStreamTask.h",
    "pod_support/Headers/Private/TTNetworkManager/TTGameExpDiagnosisService.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHTTPBinaryResponseSerializerBase.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHTTPJSONResponseSerializerBaseChromium.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHTTPRequestSerializerBase.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHTTPRequestSerializerBaseChromium.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHTTPRequestSerializerProtocol.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHTTPResponseSerializerBase.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHTTPResponseSerializerProtocol.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHttpMultipartFormData.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHttpMultipartFormDataChromium.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHttpRequest.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHttpRequestChromium.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHttpResponse.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHttpResponseChromium.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHttpTask.h",
    "pod_support/Headers/Private/TTNetworkManager/TTHttpTaskChromium.h",
    "pod_support/Headers/Private/TTNetworkManager/TTMpaService.h",
    "pod_support/Headers/Private/TTNetworkManager/TTNetInitMetrics.h",
    "pod_support/Headers/Private/TTNetworkManager/TTNetRequestLevelController+TTNetInner.h",
    "pod_support/Headers/Private/TTNetworkManager/TTNetRequestLevelController.h",
    "pod_support/Headers/Private/TTNetworkManager/TTNetworkDefine.h",
    "pod_support/Headers/Private/TTNetworkManager/TTNetworkHTTPErrorCodeMapper.h",
    "pod_support/Headers/Private/TTNetworkManager/TTNetworkManager.h",
    "pod_support/Headers/Private/TTNetworkManager/TTNetworkManagerApiParameters.h",
    "pod_support/Headers/Private/TTNetworkManager/TTNetworkManagerChromium+TTConcurrentHttpTask.h",
    "pod_support/Headers/Private/TTNetworkManager/TTNetworkManagerChromium.h",
    "pod_support/Headers/Private/TTNetworkManager/TTNetworkManagerLog.h",
    "pod_support/Headers/Private/TTNetworkManager/TTNetworkManagerMonitorNotifier.h",
    "pod_support/Headers/Private/TTNetworkManager/TTNetworkQualityEstimator.h",
    "pod_support/Headers/Private/TTNetworkManager/TTNetworkUtil.h",
    "pod_support/Headers/Private/TTNetworkManager/TTPostDataHttpRequestSerializer.h",
    "pod_support/Headers/Private/TTNetworkManager/TTPushManager.h",
    "pod_support/Headers/Private/TTNetworkManager/TTPushMessageBaseObject.h",
    "pod_support/Headers/Private/TTNetworkManager/TTPushMessageDispatcher.h",
    "pod_support/Headers/Private/TTNetworkManager/TTPushMessageReceiver.hpp",
    "pod_support/Headers/Private/TTNetworkManager/TTRedirectTask.h",
    "pod_support/Headers/Private/TTNetworkManager/TTRegionManager.h",
    "pod_support/Headers/Private/TTNetworkManager/TTReqFilterManager.h",
    "pod_support/Headers/Private/TTNetworkManager/TTRequestDispatcher.h",
    "pod_support/Headers/Private/TTNetworkManager/TTRequestModel.h",
    "pod_support/Headers/Private/TTNetworkManager/TTResponseModelProtocol.h",
    "pod_support/Headers/Private/TTNetworkManager/TTURLDispatch.h",
    "pod_support/Headers/Public/TTNetworkManager/NSURLRequest+WebviewInfo.h",
    "pod_support/Headers/Public/TTNetworkManager/RequestRetryResult.h",
    "pod_support/Headers/Public/TTNetworkManager/TTDefaultHTTPRequestSerializer.h",
    "pod_support/Headers/Public/TTNetworkManager/TTDispatchResult.h",
    "pod_support/Headers/Public/TTNetworkManager/TTDnsOuterService.h",
    "pod_support/Headers/Public/TTNetworkManager/TTDnsQuery.h",
    "pod_support/Headers/Public/TTNetworkManager/TTDnsResult.h",
    "pod_support/Headers/Public/TTNetworkManager/TTHTTPBinaryResponseSerializerBase.h",
    "pod_support/Headers/Public/TTNetworkManager/TTHTTPJSONResponseSerializerBaseChromium.h",
    "pod_support/Headers/Public/TTNetworkManager/TTHTTPRequestSerializerBase.h",
    "pod_support/Headers/Public/TTNetworkManager/TTHTTPRequestSerializerProtocol.h",
    "pod_support/Headers/Public/TTNetworkManager/TTHTTPResponseSerializerBase.h",
    "pod_support/Headers/Public/TTNetworkManager/TTHTTPResponseSerializerProtocol.h",
    "pod_support/Headers/Public/TTNetworkManager/TTHttpMultipartFormData.h",
    "pod_support/Headers/Public/TTNetworkManager/TTHttpMultipartFormDataChromium.h",
    "pod_support/Headers/Public/TTNetworkManager/TTHttpRequest.h",
    "pod_support/Headers/Public/TTNetworkManager/TTHttpRequestChromium.h",
    "pod_support/Headers/Public/TTNetworkManager/TTHttpResponse.h",
    "pod_support/Headers/Public/TTNetworkManager/TTHttpResponseChromium.h",
    "pod_support/Headers/Public/TTNetworkManager/TTHttpTask.h",
    "pod_support/Headers/Public/TTNetworkManager/TTNetRequestLevelController.h",
    "pod_support/Headers/Public/TTNetworkManager/TTNetworkDefine.h",
    "pod_support/Headers/Public/TTNetworkManager/TTNetworkHTTPErrorCodeMapper.h",
    "pod_support/Headers/Public/TTNetworkManager/TTNetworkManager.h",
    "pod_support/Headers/Public/TTNetworkManager/TTNetworkManagerMonitorNotifier.h",
    "pod_support/Headers/Public/TTNetworkManager/TTNetworkQualityEstimator.h",
    "pod_support/Headers/Public/TTNetworkManager/TTNetworkUtil.h",
    "pod_support/Headers/Public/TTNetworkManager/TTPostDataHttpRequestSerializer.h",
    "pod_support/Headers/Public/TTNetworkManager/TTPushManager.h",
    "pod_support/Headers/Public/TTNetworkManager/TTPushMessageBaseObject.h",
    "pod_support/Headers/Public/TTNetworkManager/TTPushMessageDispatcher.h",
    "pod_support/Headers/Public/TTNetworkManager/TTPushMessageReceiver.hpp",
    "pod_support/Headers/Public/TTNetworkManager/TTRedirectTask.h",
    "pod_support/Headers/Public/TTNetworkManager/TTRequestDispatcher.h",
    "pod_support/Headers/Public/TTNetworkManager/TTRequestModel.h",
    "pod_support/Headers/Public/TTNetworkManager/TTResponseModelProtocol.h"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "Core_swift_interface",
  deps = [],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Core_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  copts = select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "Core_module_map",
  module_map = "pod_support/Headers/Public/TTNetworkManager/TTNetworkManager_Core-bazel-generated.modulemap",
  umbrella_hdr = "pod_support/Headers/Public/TTNetworkManager/TTNetworkManager_Core-bazel-generated-umbrella.h",
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_srcs",
  srcs = [
    "Pod/Classes/TTNetworkBase/NetworkUtil/NSTimer+TTNetworkBlockTimer.m",
    "Pod/Classes/TTNetworkBase/NSURLRequest+WebviewInfo.m",
    "Pod/Classes/TTNetworkBase/QueryFilter/QueryFilterAction.m",
    "Pod/Classes/TTNetworkBase/QueryFilter/QueryFilterEngine.m",
    "Pod/Classes/TTNetworkBase/QueryFilter/QueryFilterResult.m",
    "Pod/Classes/TTNetworkBase/NetworkUtil/RequestRetryResult.m",
    "Pod/Classes/TTNetworkBase/NetworkUtil/TTCdnCacheVerifyManager.m",
    "Pod/Classes/TTNetworkBase/Chromium/TTConcurrentHttpTask/TTConcurrentHttpTask.mm",
    "Pod/Classes/TTNetworkBase/Serializer/TTDefaultHTTPRequestSerializer.m",
    "Pod/Classes/TTNetworkBase/Chromium/TTDispatchResult.mm",
    "Pod/Classes/TTNetworkBase/Chromium/TTDnsOuterService.mm",
    "Pod/Classes/TTNetworkBase/Chromium/TTDnsQuery.mm",
    "Pod/Classes/TTNetworkBase/Chromium/TTDnsResult.mm",
    "Pod/Classes/TTNetDiagnosis/Impl/TTExpDiagnosisRequest.mm",
    "Pod/Classes/TTNetDiagnosis/TTExpDiagnosisService.mm",
    "Pod/Classes/TTNetworkBase/Chromium/TTFetcherDelegateForCommonTask.mm",
    "Pod/Classes/TTNetworkBase/Chromium/TTFetcherDelegateForStreamTask.mm",
    "Pod/Classes/TTNetDiagnosis/TTGameExpDiagnosisService.mm",
    "Pod/Classes/TTNetworkBase/Serializer/TTHTTPBinaryResponseSerializerBase.m",
    "Pod/Classes/TTNetworkBase/Chromium/TTHTTPJSONResponseSerializerBaseChromium.mm",
    "Pod/Classes/TTNetworkBase/HttpAdaptor/TTHttpMultipartFormData.m",
    "Pod/Classes/TTNetworkBase/Chromium/TTHttpMultipartFormDataChromium.mm",
    "Pod/Classes/TTNetworkBase/HttpAdaptor/TTHttpRequest.m",
    "Pod/Classes/TTNetworkBase/Chromium/TTHttpRequestChromium.mm",
    "Pod/Classes/TTNetworkBase/Serializer/TTHTTPRequestSerializerBase.m",
    "Pod/Classes/TTNetworkBase/Chromium/TTHTTPRequestSerializerBaseChromium.mm",
    "Pod/Classes/TTNetworkBase/HttpAdaptor/TTHttpResponse.m",
    "Pod/Classes/TTNetworkBase/Chromium/TTHttpResponseChromium.mm",
    "Pod/Classes/TTNetworkBase/Serializer/TTHTTPResponseSerializerBase.m",
    "Pod/Classes/TTNetworkBase/HttpAdaptor/TTHttpTask.m",
    "Pod/Classes/TTNetworkBase/Chromium/TTHttpTaskChromium.mm",
    "Pod/Classes/TTNetworkBase/Chromium/TTMpaService.mm",
    "Pod/Classes/TTNetworkBase/Chromium/TTNetInitMetrics.mm",
    "Pod/Classes/TTNetworkBase/Chromium/TTNetRequestLevelController.mm",
    "Pod/Classes/TTNetworkBase/NetworkUtil/TTNetworkHTTPErrorCodeMapper.m",
    "Pod/Classes/TTNetworkBase/TTNetworkManager.m",
    "Pod/Classes/TTNetworkBase/Chromium/TTConcurrentHttpTask/TTNetworkManagerApiParameters.m",
    "Pod/Classes/TTNetworkBase/Chromium/TTNetworkManagerChromium.mm",
    "Pod/Classes/TTNetworkBase/TTNetworkManagerMonitorNotifier.m",
    "Pod/Classes/TTNetworkBase/Chromium/TTNetworkQualityEstimator.mm",
    "Pod/Classes/TTNetworkBase/NetworkUtil/TTNetworkUtil.m",
    "Pod/Classes/TTNetworkBase/Serializer/TTPostDataHttpRequestSerializer.m",
    "Pod/Classes/TTPushManager/TTPushManager.mm",
    "Pod/Classes/TTPushManager/TTPushMessageBaseObject.m",
    "Pod/Classes/TTPushManager/TTPushMessageDispatcher.mm",
    "Pod/Classes/TTPushManager/TTPushMessageReceiver.mm",
    "Pod/Classes/TTNetworkBase/Chromium/TTRedirectTask.m",
    "Pod/Classes/TTNetworkBase/Chromium/TTRegionManager.mm",
    "Pod/Classes/TTNetworkBase/NetworkUtil/TTReqFilterManager.m",
    "Pod/Classes/TTNetworkBase/Chromium/TTRequestDispatcher.mm",
    "Pod/Classes/TTNetworkBase/Model/TTRequestModel.m",
    "Pod/Classes/TTNetworkBase/Chromium/TTURLDispatch.mm"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Core_oc",
  enable_modules = 1,
  srcs = [
    "Core_srcs"
  ],
  non_arc_srcs = [],
  hdrs = [
    "Core_hdrs"
  ],
  pch = "@rules_pods//BazelExtensions:common.pch",
  sdk_frameworks = [
    "CFNetwork",
    "MobileCoreServices",
    "SystemConfiguration",
    "JavaScriptCore",
    "CoreTelephony"
  ],
  weak_sdk_frameworks = [
    "Network"
  ],
  sdk_dylibs = [
    "c++",
    "resolv"
  ],
  deps = [
    ":TTNetworkManager_xcode_hmap_includes",
    "@PodHeaders//:PodHeaders_namespace_interface",
    ":TTNetworkManager_private_includes",
    ":TTNetworkManager_custom_includes",
    "@PodHeaders//:PodHeaders_public_interface",
    "@PodHeaders//:PodHeaders_global_objc_interface",
    "@BDALog//:BDALog_objc_interface",
    "@BDAlogProtocol//:BDAlogProtocol_objc_interface",
    "@BDDataDecorator//:Data_objc_interface",
    "@boringssl//:boringssl_objc_interface",
    "@Godzippa//:Godzippa_objc_interface",
    "@protobuf_lite//:protobuf_lite_objc_interface",
    "@BDALog//:BDALog_swift_interface",
    "@BDAlogProtocol//:BDAlogProtocol_swift_interface",
    "@BDDataDecorator//:Data_swift_interface",
    "@boringssl//:boringssl_swift_interface",
    "@Godzippa//:Godzippa_swift_interface",
    "@protobuf_lite//:protobuf_lite_swift_interface",
    ":TTNetworkManager_Core_script_0",
    ":Core_objc_interface",
    "@BDALog//:BDALog_module_map",
    "@BDAlogProtocol//:BDAlogProtocol_module_map",
    "@BDDataDecorator//:Data_module_map",
    "@boringssl//:boringssl_module_map",
    "@Godzippa//:Godzippa_module_map",
    "@protobuf_lite//:protobuf_lite_module_map"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-non-modular-include-in-framework-module",
    "-Wno-error=non-modular-include-in-framework-module",
    "-DNDEBUG=1",
    "-DGOOGLE_PROTOBUF_NO_RTTI",
    "-DGOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
    "-DTTNetworkManager_POD_VERSION=@\\\"13_4.1.137.13-lark\\\"",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
    "-I."
  ] + select(
    {
      "//conditions:default": [],
      ":release": []
    }
  ),
  cxxopts = [
    "-fno-rtti",
    "-std=gnu++14"
  ],
  data = [
    ":Core_resource_group"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_package(
  name = "Core",
  deps = [
    ":Core_oc"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
ios_static_framework(
  name = "Core_lib",
  deps = [
    ":Core"
  ],
  minimum_os_version = "8.0",
  visibility = [
    "//visibility:public"
  ]
)
module_map(
  name = "Lark_TTNetworkManager_module_map",
  module_map = "@TTNetworkManager//:pod_support/Headers/Public/TTNetworkManager/Lark-bitsky-generated.modulemap",
  umbrella_hdr = "@TTNetworkManager//:pod_support/Headers/Public/TTNetworkManager/Lark-bitsky-generated-umbrella.h",
  visibility = ["//visibility:public"],
)
objc_library(
  name = "Lark_TTNetworkManager_objc_interface",
  enable_modules = 0,
  srcs = [],
  non_arc_srcs = [],
  hdrs = [],
  deps = ["@TTNetworkManager//:Core_objc_interface", "@TTNetworkManager//:TTNetworkManager_objc_interface"],
  copts = [],
  visibility = ["//visibility:public"],
)
load("@build_bazel_rules_bitsky//rules:framework.bzl", "bitsky_framework")
load("@main_project//.bitsky/common:bitsky_common.bzl", "defs_xcconfigs")
bitsky_framework(
  name = "Lark_TTNetworkManager",
  target_name = "Lark",
  module_name = "TTNetworkManager",
  hdrs = ["@TTNetworkManager//:Core_pod_hdrs", "@TTNetworkManager//:TTNetworkManager_root_pod_hdrs"],
  srcs = ["@TTNetworkManager//:Core_srcs"],
  non_arc_srcs = [],
  deps = ["@TTNetworkManager//:TTNetworkManager_Core_script_0", "@TTNetworkManager//:TTNetworkManager_VendoredLibraries"],
  pod_deps = ["BDALog", "BDAlogProtocol", "BDDataDecorator", "boringssl", "Godzippa", "protobuf_lite"],
  per_label_options = [],
  copts = [
    "-fobjc-weak",
    "-Wno-unused-command-line-argument",
    "-Wnon-modular-include-in-framework-module",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-non-modular-include-in-framework-module",
    "-Wno-error=non-modular-include-in-framework-module",
    "-DNDEBUG=1",
    "-DGOOGLE_PROTOBUF_NO_RTTI",
    "-DGOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
    "-DTTNetworkManager_POD_VERSION=@\\\"13_4.1.137.13-lark\\\"",
    "-Wno-documentation",
    "-Wno-nullability-completeness",
  ] + select({
      "//conditions:default": [],
      ":release": ["-Os",]
    }) 
    + getattr(defs_external_objc_library, "common_copts", [])
    + getattr(defs_external_objc_library, "TTNetworkManager_copts", []),
  cxxopts = ["-fno-rtti", "-std=gnu++14", ] + getattr(defs_external_objc_library, "common_cxxopts", []) 
    + getattr(defs_external_objc_library, "TTNetworkManager_cxxopts", []),
  swift_copts = [],
  sdk_frameworks = ["CFNetwork", "MobileCoreServices", "SystemConfiguration", "JavaScriptCore", "CoreTelephony"],
  weak_sdk_frameworks = ["Network"],
  sdk_dylibs = ["c++", "resolv"],
  data = ["@TTNetworkManager//:Core_resource_group"],
  objc_features = [] + getattr(defs_external_objc_library, "common_features", []) 
    + getattr(defs_external_objc_library, "TTNetworkManager_features", []),
  swift_features = [] + getattr(defs_external_swift_library, "common_features", []) 
    + getattr(defs_external_swift_library, "TTNetworkManager_features", []),
  link_dynamic = getattr(defs_external_objc_library, "TTNetworkManager_dynamic", False),
  tags = getattr(defs_external_objc_library, "TTNetworkManager_tags", []),
  pch = "@rules_pods//BazelExtensions:common.pch",
  xcconfig_by_build_setting = defs_xcconfigs.get("TTNetworkManager", {}),
  visibility = ["//visibility:public"],
)