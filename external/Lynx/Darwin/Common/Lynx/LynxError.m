// Copyright 2019 The Lynx Authors. All rights reserved.

#import "LynxError.h"

#import "LynxLog.h"
#import "LynxVersion.h"

NSString* const LynxErrorDomain = @"com.lynx.error";

NSString* const LynxErrorUserInfoKeyMessage = @"message";
NSString* const LynxErrorUserInfoKeySourceError = @"sourceError";
NSString* const LynxErrorUserInfoKeyCustomInfo = @"customInfo";
NSString* const LynxErrorUserInfoKeyStackInfo = @"stackInfo";

// LynxError's level
NSString* const LynxErrorLevelError = @"error";
NSString* const LynxErrorLevelWarn = @"warn";

// be used to construct structured error for
// Lynx. Error report interface accept error
// as a NSError and extract error message from
// NSError.userInfo. so we put the json that
// generated by error content to the userInfo.
@implementation LynxError {
  // replace userInfo of parent class, since
  // the old userInfo is readonly but we need
  // modify it when error content have changed.
  NSDictionary* _userInfo;
}

+ (instancetype)lynxErrorWithCode:(NSInteger)code
                          message:(NSString*)errorMsg
                    fixSuggestion:(NSString*)suggestion
                            level:(NSString*)level {
  return [LynxError lynxErrorWithCode:code
                              message:errorMsg
                        fixSuggestion:suggestion
                                level:level
                           customInfo:nil];
}

+ (instancetype)lynxErrorWithCode:(NSInteger)code
                          message:(NSString*)errorMsg
                    fixSuggestion:(NSString*)suggestion
                            level:(NSString*)level
                       customInfo:(NSDictionary* _Nullable)customInfo {
  LynxError* error = [[LynxError alloc] initWithDomain:LynxErrorDomain code:code userInfo:nil];
  error->_errorCode = code;
  error->_summaryMessage = errorMsg;
  error->_fixSuggestion = suggestion;
  error->_level = level;
  error->_customInfo = customInfo ? [[NSMutableDictionary alloc] initWithDictionary:customInfo]
                                  : [[NSMutableDictionary alloc] init];
  return error;
}

- (NSDictionary*)userInfo {
  // compatible with old interface
  NSDictionary* dictionary = [super userInfo];
  if (dictionary && [dictionary count] > 0) {
    return dictionary;
  }

  // return userInfo overridden by LynxError
  if (!_userInfo) {
    _userInfo = @{LynxErrorUserInfoKeyMessage : [self generateJsonStr]};
  }
  return _userInfo;
}

- (BOOL)isValid {
  return _summaryMessage && [_summaryMessage length];
}

// if the method is called by LynxError constructed by deprecated
// constructors, the method will not affect the generating of json string
- (void)addCustomInfo:(NSString*)value forKey:(NSString*)key {
  _userInfo = nil;
  [LynxError addStringValue:value forKey:key toDictionary:_customInfo];
}

- (void)setTemplateUrl:(NSString*)cardUrl {
  _userInfo = nil;
  _templateUrl = cardUrl;
}

- (void)setCardVersion:(NSString*)cardVersion {
  _userInfo = nil;
  _cardVersion = cardVersion;
}

- (void)setCallStack:(NSString*)callStack {
  _userInfo = nil;
  _callStack = callStack;
}

- (NSString*)generateJsonStr {
  NSMutableDictionary* dictionary = [[NSMutableDictionary alloc] init];
  // put required fields
  [dictionary setValue:[NSNumber numberWithLong:_errorCode] forKey:@"error_code"];
  [LynxError addStringValue:_templateUrl forKey:@"url" toDictionary:dictionary];
  [LynxError addStringValue:_summaryMessage forKey:@"error" toDictionary:dictionary];
  [LynxError addStringValue:_cardVersion forKey:@"card_version" toDictionary:dictionary];
  [LynxError addStringValue:[LynxVersion versionString] forKey:@"sdk" toDictionary:dictionary];
  [LynxError addStringValue:_level forKey:@"level" toDictionary:dictionary];
  // put optional fields
  [LynxError addStringValue:_fixSuggestion forKey:@"fix_suggestion" toDictionary:dictionary];
  [LynxError addStringValue:_callStack forKey:@"error_stack" toDictionary:dictionary];
  // put custom fields
  if (_customInfo) {
    [dictionary addEntriesFromDictionary:_customInfo];
  }

  NSError* jsonParseError;
  NSData* jsonData = [NSJSONSerialization dataWithJSONObject:dictionary
                                                     options:0
                                                       error:&jsonParseError];

  if (!jsonParseError) {
    return [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
  } else {
    LLogError(@"json parse error: %@", jsonParseError.localizedDescription);
    return @"";
  }
}

+ (void)addStringValue:(NSString*)value
                forKey:(NSString*)key
          toDictionary:(NSMutableDictionary*)dictionary {
  if (dictionary && value && key && value.length > 0 && key.length > 0) {
    [dictionary setValue:value forKey:key];
  }
}

// deprecated
+ (instancetype)lynxErrorWithCode:(NSInteger)code message:(nonnull NSString*)message {
  return [[LynxError alloc] initWithDomain:LynxErrorDomain
                                      code:code
                                  userInfo:@{LynxErrorUserInfoKeyMessage : message ?: @""}];
}

// deprecated
+ (instancetype)lynxErrorWithCode:(NSInteger)code sourceError:(nonnull NSError*)source {
  NSDictionary* userInfo = nil;
  if (source) {
    userInfo = @{LynxErrorUserInfoKeySourceError : source};
  }
  return [LynxError lynxErrorWithCode:code userInfo:userInfo];
}

// deprecated
+ (instancetype)lynxErrorWithCode:(NSInteger)code userInfo:(NSDictionary*)userInfo {
  return [[LynxError alloc] initWithDomain:LynxErrorDomain code:code userInfo:userInfo];
}

// mainly for create NSError quickly, be careful use it construct lynx error
+ (instancetype)lynxErrorWithCode:(NSInteger)code description:(nonnull NSString*)message {
  return [[LynxError alloc] initWithDomain:LynxErrorDomain
                                      code:code
                                  userInfo:@{NSLocalizedDescriptionKey : message}];
}

@end
