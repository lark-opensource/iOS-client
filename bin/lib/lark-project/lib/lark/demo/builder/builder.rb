# frozen_string_literal: true

require 'xcodeproj'
require_relative './template/generator'

module Lark
  module Demo
    class Builder

      # development target
      DEPLOYMENT_TARGET = '11.0'

      # @type proj_name [String] builder name
      # @type root_dir [Pathname] builder root dir
      # @type opt [Hash]
      def initialize(proj_name, root_dir, **opt)
        @proj_name = proj_name
        @root_dir = root_dir
        @options = opt
      end

      # @return [Xcodeproj::Project]
      def proj
        @proj ||= init_proj
      end

      # @return [Xcodeproj::Project::PBXNativeTarget]
      def target
        proj.targets.first
      end

      # @return [Pathname]
      def source_dir
        @root_dir.join(@proj_name)
      end

      def run
        check_env
        prepare_dir
        add_base_files
        patch_configurations

        @proj.save
      end

      private

      # 检查环境
      def check_env
        # entry 检查
        %W[
            Podfile
            Gemfile
            #{@proj_name}
            #{@proj_name}.xcodeproj
            #{@proj_name}.xcworkspace
          ].each do |entry|
          raise "[check env] 目录中已经存在 #{entry}" if @root_dir.join(entry).exist?
        end
      end

      # 准备目录
      def prepare_dir
        Dir.mkdir @root_dir unless @root_dir.exist?
        Dir.mkdir source_dir unless source_dir.exist?
      end

      # @return [Xcodeproj::Project]
      def init_proj
        path = @root_dir.join("#{@proj_name}.xcodeproj")
        proj = Xcodeproj::Project.new(path, false, 51)  # 51 => Xcode 10.0
        target = proj.new_target(:application, @proj_name, :ios, DEPLOYMENT_TARGET, nil, :swift)
        # remove `Foundation.framework`
        file_ref = target.frameworks_build_phase.files_references.find { |f| f.name == 'Foundation.framework' }
        unless file_ref.nil?
          target.frameworks_build_phase.remove_file_reference file_ref
          file_ref.remove_from_project
        end
        # remove group named `iOS` in `Frameworks` that generated by `xcodeproj`
        proj.main_group
            .groups
            .find { |f| f.name == 'Frameworks' }
          &.groups
          &.find { |f| f.name == 'iOS' }
          &.remove_from_project
        proj
      end

      # 新增 file
      #
      # @param path [Pathname] file path
      # @param type [Symbol] file type, `:source` or `:generator` or `:other`
      # @param group [Xcodeproj::Project::PBXGroup] group
      def new_file(path, type, group)
        File.open(path.to_s, 'w') { |f| f.write yield } if block_given?
        file_ref = group.new_file(path)
        target.source_build_phase.add_file_reference file_ref if type == :source
        target.resources_build_phase.add_file_reference file_ref if type == :resource
      end

      # 添加基本的文件，main.swift, Assets.xcassets 等
      def add_base_files
        source_group = proj.main_group.new_group(proj.root_object.name)
        source_group.set_path source_dir

        # -- swift sources --
        new_file(source_dir.join('main.swift'), :source, source_group) { gen_main_swift }

        # -- plist --
        new_file(source_dir.join('Info.plist'), :other, source_group) { gen_info_plist }

        # -- storyboard --
        new_file(source_dir.join('LaunchScreen.storyboard'), :resource, source_group) { gen_launch_screen_storyboard }

        # -- resource --
        resources_dir = source_dir.join 'resource'
        Dir.mkdir resources_dir unless resources_dir.exist?
        resources_group = source_group.new_group 'resource'
        resources_group.set_path resources_dir
        # Assets.xcassets & AppIcon.appiconset
        assets_path = resources_dir.join 'Assets.xcassets'
        Dir.mkdir assets_path unless assets_path.exist?
        File.open(assets_path.join('Contents.json').to_s, 'w') { |f| f.write gen_assets_content }
        new_file(assets_path, :resource, resources_group)
        app_icon_path = assets_path.join 'AppIcon.appiconset'
        Dir.mkdir app_icon_path unless app_icon_path.exist?
        File.open(app_icon_path.join('Contents.json').to_s, 'w') { |f| f.write gen_assets_appicon_content }
      end

      # patch configurations
      def patch_configurations
        # @type source_dir [String]
        source_relative_path = proj.root_object.name
        # @type target [Xcodeproj::Project::PBXNativeTarget]
        target = proj.targets.first

        target.build_configurations.each do |bc|
          # bundle identifier
          bc.build_settings['PRODUCT_BUNDLE_IDENTIFIER'] = "com.bytedance.#{proj.root_object.name}"
          # plist
          bc.build_settings['INFOPLIST_FILE'] = "#{source_relative_path}/Info.plist"
          # deployment target
          bc.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = DEPLOYMENT_TARGET
        end
      end
    end
  end
end
