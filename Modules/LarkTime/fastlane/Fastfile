# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'json'
default_platform(:ios)

platform :ios do

  lane :match_calendardemo_development do |options|
    match(
      app_identifier:["com.bytedance.ee.calendar"],
      readonly: true,
      type: "development"
    )

  end

  lane :match_calendardemo_adhoc do |options|
    match(
      app_identifier:["com.bytedance.ee.calendar"],
      readonly: true,
      type: "adhoc"
    )

  end

  lane :match_calendardemo_enterprise do |options|
    match(
      app_identifier:["com.bytedance.ee.calendar"],
      readonly: true,
      type: "enterprise"
    )

  end

  lane :match_calendardemo_appstore do |options|
    match(
      app_identifier:["com.bytedance.ee.calendar"],
      readonly: true,
      type: "appstore"
    )

  end

  lane :ee_build_enterprise_ipa do |options|
    build_number = options.delete(:build_number)
    output = options.delete(:output_directory) || Pathname('./building_ipa_output').to_path
    iCloudContainerEnvironment = options.delete(:iCloudContainerEnvironment) || 'Production'
    
    schemes = ['CalendarDemo']
    main_scheme = 'CalendarDemo'
    schemes.each do |scheme|
      increment_build_number_in_plist(
        scheme: scheme,
        build_number: build_number
      )
    end
    
    version = get_version_number_from_plist(scheme: main_scheme)
    build = get_build_number_from_plist(scheme: main_scheme)
    ENV['DISABLE_XCPRETTY'] ||= 'YES'
    options = {
        scheme: main_scheme,
        clean: true,
        silent: true,
        configuration: "Release",
        output_directory: output,
        output_name: "#{main_scheme}_#{version}_#{build}",
        export_method: "enterprise",
        export_options: {
          iCloudContainerEnvironment: iCloudContainerEnvironment
        }
    }.merge!(options)
    gym(options)

  end

  lane :test do |options|
    # options:
    #   minimum_coverage_percentage: 最低支持的覆盖率，低于时报错
    #   include_targets: comma(,) seperated target list, eg: XXX.app,XXX.framework, default all dev pod
    run_tests(code_coverage: true)
    
    xcov_options = {}
    if (minimum_coverage_percentage = options.delete(:minimum_coverage_percentage))
      xcov_options[:minimum_coverage_percentage] = minimum_coverage_percentage.to_f
    end
    unless (include_targets = options.delete(:include_targets))
      # default to all dev pod
      include_targets = 'LarkInterface.framework'
    end
    xcov_options[:include_targets] = include_targets
    xcov(xcov_options) unless include_targets.empty?

  end

  def get_lint_file_paths()
    # find all changed files
    change_file_list = `git diff --name-only --diff-filter=ACMRTX HEAD~1..HEAD`.split("\n")

    # get excluded config
    excluded = YAML.load(File.open("../.swiftlint.yml"))["excluded"].map { |path| path.to_s }

    # filter all swift file
    swift_file_list = change_file_list.find_all { |name|
      name.start_with?('Modules/LarkTime') && name.end_with?(".swift") && !(excluded.any? { |e| name.start_with?(e) })
    }

    return [swift_file_list, change_file_list, excluded]
  end

  # 获取修改的文件及其行号
  def get_changed_file_infos()
    changed_file_info = {}
    file_lines = `bash diff_lines.sh`.split("\n")
    for info in file_lines
      file_path = info.split(":")[0].split("/")
      line_info = info.split(":")[1]
      file_name = file_path[file_path.size - 1]
      next if !file_name.end_with?(".swift")
      if changed_file_info[file_name] == nil
        changed_file_info[file_name] = []
      end
      changed_file_info[file_name].push(line_info)
    end
    return changed_file_info
  end

  # 过滤swiftlint的结果，只输出对应行号的错误
  def filter_result(swift_lint_result, filter_file)
    shouldExit = false
    swift_lint_result.each do |i|
      file_path = i["file"].split("/")
      file_name = file_path[file_path.size - 1]
      line = i["line"]
      if filter_file[file_name] != nil 
        for num in filter_file[file_name]
          if Integer(num) == Integer(line)
            shouldExit = true
            print_error(i)
            break
          end
        end
      end
    end
    if shouldExit 
      sh "exit -1"
    end
  end 

  def print_error(info)
    result = "#{info["file"]}:#{info["line"]}:#{info["character"]}: warning: #{info["type"]} Violation: #{info["reason"]} (#{info["type"]})"
    puts result  
  end

  lane :build_verify do |options|
    swift_file_list, change_file_list, excluded = get_lint_file_paths()
    begin
      sh <<~SHELL
        cd ..
        LOG_PATH=xcodebuild.log
        echo "xcodebuild log output to $LOG_PATH"
        xcodebuild -workspace CalendarDemo.xcworkspace -scheme CalendarDemo -configuration Debug -sdk iphonesimulator -derivedDataPath ${DERIVED_DATA_PATH} -resultBundlePath ${RESULT_DATA_PATH} clean build\
        | tee "$LOG_PATH" \
        | xcpretty && exit ${PIPESTATUS[0]}
      SHELL
      # sh "cd .. && fastlane/app-size-check.rb"
    end
    if swift_file_list.length > 0
      Dir.chdir("../..") do
        swiftlint(
          mode: :analyze,
          config_file: "Modules/LarkTime/.onlylint.yml",
          strict: false,
          files: swift_file_list,
          executable: "Modules/LarkTime/swiftlint",
          compiler_log_path: "Modules/LarkTime/xcodebuild.log",
          ignore_exit_status: true,
          output_file: "Modules/LarkTime/report.json",
          reporter: "json"
        )
      end
      Dir.chdir("..") do
        puts Dir.pwd 
        changed_file_info = get_changed_file_infos()
        puts changed_file_info
        File.open("report.json", "r") do |f|
          jsonStr = JSON.parse(f.read)
          filter_result(jsonStr, changed_file_info)
        end
      end
    else
      puts "Skip swiftlint, File list:\n#{change_file_list.join("\n")}\n\nIgnore config:\n #{excluded.join("\n")}"
    end
  end


end

