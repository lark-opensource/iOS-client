// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: entities.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// swiftlint:disable all
import Foundation
import LarkHTTP

/// 图像类型
/// thrift 对应: file.thrift: ImageCropType
public enum LarkNCExtensionPB_Entities_ImageCropType: LarkHTTP.Enum {
  public typealias RawValue = Int
  case origin // = 1
  case middle // = 2
  case thumb // = 3
  case middleWebp // = 4
  case thumbWebp // = 5

  /// // gif 的优化: 转mp4(编码 h.264), 压缩体积且端上播放资源耗费轻
  case middleMp4 // = 6

  /// 封面图
  case cover // = 7

  /// 不作任何处理的图片源文件
  case intact // = 8

  public init() {
    self = .origin
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .origin
    case 2: self = .middle
    case 3: self = .thumb
    case 4: self = .middleWebp
    case 5: self = .thumbWebp
    case 6: self = .middleMp4
    case 7: self = .cover
    case 8: self = .intact
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .origin: return 1
    case .middle: return 2
    case .thumb: return 3
    case .middleWebp: return 4
    case .thumbWebp: return 5
    case .middleMp4: return 6
    case .cover: return 7
    case .intact: return 8
    }
  }

}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_ImageCropType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum LarkNCExtensionPB_Entities_ChannelType: LarkHTTP.Enum {
  public typealias RawValue = Int
  case unknownChannelType // = 0
  case chatChannel // = 1
  case emailChannel // = 2

  public init() {
    self = .unknownChannelType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownChannelType
    case 1: self = .chatChannel
    case 2: self = .emailChannel
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownChannelType: return 0
    case .chatChannel: return 1
    case .emailChannel: return 2
    }
  }

}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_ChannelType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)


///翻译来源
public enum LarkNCExtensionPB_Entities_TranslateSource: LarkHTTP.Enum {
  public typealias RawValue = Int
  case unknownTranslateSource // = 0

  ///手动翻译
  case manualTranslate // = 1

  ///自动翻译
  case autoTranslate // = 2

  public init() {
    self = .unknownTranslateSource
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownTranslateSource
    case 1: self = .manualTranslate
    case 2: self = .autoTranslate
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownTranslateSource: return 0
    case .manualTranslate: return 1
    case .autoTranslate: return 2
    }
  }

}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_TranslateSource: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum LarkNCExtensionPB_Entities_DisplayRule: LarkHTTP.Enum {
  public typealias RawValue = Int
  case unknownRule // = 0

  /// 不展示翻译效果，即不翻译
  case notDisplay // = 1

  /// 只展示译文
  case onlyTranslation // = 2

  /// 展示译文与原文
  case withOriginal // = 3

  public init() {
    self = .unknownRule
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownRule
    case 1: self = .notDisplay
    case 2: self = .onlyTranslation
    case 3: self = .withOriginal
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownRule: return 0
    case .notDisplay: return 1
    case .onlyTranslation: return 2
    case .withOriginal: return 3
    }
  }

}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_DisplayRule: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_TransStatus: LarkHTTP.Enum {
//   public typealias RawValue = Int

  /// 等待接收
//   case pending // = 0

  /// 确认开始传输
//   case accept // = 1

  /// 接收方拒绝
//   case refuse // = 2

  /// 发送方取消发送
//   case cancel // = 3

  /// 接收方取消接收
//   case cancelByReceiver // = 8

  /// 发送方中断发送（包括掉线）
//   case abortBySender // = 4

  /// 接收方中断接收（包括掉线）
//   case abortByReceiver // = 5

  /// 传输完毕
//   case transDone // = 6

  /// 发送方改为离线发送（普通文件消息）
//   case offlineMode // = 7

//   public init() {
//     self = .pending
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .pending
//     case 1: self = .accept
//     case 2: self = .refuse
//     case 3: self = .cancel
//     case 4: self = .abortBySender
//     case 5: self = .abortByReceiver
//     case 6: self = .transDone
//     case 7: self = .offlineMode
//     case 8: self = .cancelByReceiver
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .pending: return 0
//     case .accept: return 1
//     case .refuse: return 2
//     case .cancel: return 3
//     case .abortBySender: return 4
//     case .abortByReceiver: return 5
//     case .transDone: return 6
//     case .offlineMode: return 7
//     case .cancelByReceiver: return 8
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_TransStatus: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

public enum LarkNCExtensionPB_Entities_SpecialURL: LarkHTTP.Enum {
  public typealias RawValue = Int
  case unknownURL // = 0

  /// bear 链接 doc/sheet
  case bear // = 1

  public init() {
    self = .unknownURL
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownURL
    case 1: self = .bear
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownURL: return 0
    case .bear: return 1
    }
  }

}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_SpecialURL: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_GroupSortRuleType: LarkHTTP.Enum {
//   public typealias RawValue = Int

  ///默认排序
//   case groupDefaultSort // = 1

  ///最近更新
//   case groupUpdateTime // = 2

  ///最近创建
//   case groupCreateTime // = 3

  ///最少人数
//   case groupNumMembers // = 4

//   public init() {
//     self = .groupDefaultSort
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 1: self = .groupDefaultSort
//     case 2: self = .groupUpdateTime
//     case 3: self = .groupCreateTime
//     case 4: self = .groupNumMembers
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .groupDefaultSort: return 1
//     case .groupUpdateTime: return 2
//     case .groupCreateTime: return 3
//     case .groupNumMembers: return 4
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_GroupSortRuleType: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_ChatPostType: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknownPostType // = 0

  /// 全员可发言
//   case anyone // = 1

  /// 仅群主可发言
//   case onlyAdmin // = 2

  /// 白名单
//   case whiteList // = 3

//   public init() {
//     self = .unknownPostType
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknownPostType
//     case 1: self = .anyone
//     case 2: self = .onlyAdmin
//     case 3: self = .whiteList
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknownPostType: return 0
//     case .anyone: return 1
//     case .onlyAdmin: return 2
//     case .whiteList: return 3
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_ChatPostType: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_ThreadState: LarkHTTP.Enum {
//   public typealias RawValue = Int

  ///未知状态
//   case unknownState // = 0

  ///默认状态，所以话题功能可正常使用
//   case `open` // = 1

  ///关闭状态，无法回复该话题
//   case closed // = 2

//   public init() {
//     self = .unknownState
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknownState
//     case 1: self = .open
//     case 2: self = .closed
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknownState: return 0
//     case .open: return 1
//     case .closed: return 2
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_ThreadState: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

/// 系统预定义的话题过滤器的ID
// public enum LarkNCExtensionPB_Entities_PredefinedThreadFilterID: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknownThreadFilterID // = 0

  /// 已订阅话题过滤器
//   case followThreadFilterID // = 1

  /// 已关闭话题过滤器
//   case closedThreadFilterID // = 2

  /// 未关闭话题过滤器
//   case openThreadFilterID // = 3

  /// 我创建的
//   case myOwnThreadsFilterID // = 4

  /// 我回复的
//   case myReplyThreadsFilterID // = 5

  /// @我的
//   case myMentionedThreadsFilterID // = 6

  /// 我订阅的 新版本客户端使用这个过滤器ID拉订阅列表
//   case myFollowFilterID // = 7

  /// 我参与的，包含我创建的、我回复的、@我的、我订阅的
//   case myThreadsFilterID // = 8

  /// @我未读的
//   case myUnreadMentionedThreadsFilterID // = 9

//   public init() {
//     self = .unknownThreadFilterID
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknownThreadFilterID
//     case 1: self = .followThreadFilterID
//     case 2: self = .closedThreadFilterID
//     case 3: self = .openThreadFilterID
//     case 4: self = .myOwnThreadsFilterID
//     case 5: self = .myReplyThreadsFilterID
//     case 6: self = .myMentionedThreadsFilterID
//     case 7: self = .myFollowFilterID
//     case 8: self = .myThreadsFilterID
//     case 9: self = .myUnreadMentionedThreadsFilterID
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknownThreadFilterID: return 0
//     case .followThreadFilterID: return 1
//     case .closedThreadFilterID: return 2
//     case .openThreadFilterID: return 3
//     case .myOwnThreadsFilterID: return 4
//     case .myReplyThreadsFilterID: return 5
//     case .myMentionedThreadsFilterID: return 6
//     case .myFollowFilterID: return 7
//     case .myThreadsFilterID: return 8
//     case .myUnreadMentionedThreadsFilterID: return 9
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_PredefinedThreadFilterID: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_Gender: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case `default` // = 0
//   case man // = 1
//   case woman // = 2

//   public init() {
//     self = .default
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .default
//     case 1: self = .man
//     case 2: self = .woman
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .default: return 0
//     case .man: return 1
//     case .woman: return 2
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_Gender: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_TagColor: LarkHTTP.Enum {
//   public typealias RawValue = Int

  /// BLUE兜底
//   case blue // = 0
//   case gray // = 1
//   case indigo // = 2
//   case wathet // = 3
//   case green // = 4
//   case turquoise // = 5
//   case yellow // = 6
//   case lime // = 7
//   case red // = 8
//   case orange // = 9
//   case purple // = 10
//   case violet // = 11
//   case carmine // = 12

//   public init() {
//     self = .blue
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .blue
//     case 1: self = .gray
//     case 2: self = .indigo
//     case 3: self = .wathet
//     case 4: self = .green
//     case 5: self = .turquoise
//     case 6: self = .yellow
//     case 7: self = .lime
//     case 8: self = .red
//     case 9: self = .orange
//     case 10: self = .purple
//     case 11: self = .violet
//     case 12: self = .carmine
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .blue: return 0
//     case .gray: return 1
//     case .indigo: return 2
//     case .wathet: return 3
//     case .green: return 4
//     case .turquoise: return 5
//     case .yellow: return 6
//     case .lime: return 7
//     case .red: return 8
//     case .orange: return 9
//     case .purple: return 10
//     case .violet: return 11
//     case .carmine: return 12
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_TagColor: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_TimeUnit: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case second // = 0
//   case minute // = 1
//   case hour // = 2
//   case day // = 3
//   case month // = 4
//   case year // = 5

//   public init() {
//     self = .second
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .second
//     case 1: self = .minute
//     case 2: self = .hour
//     case 3: self = .day
//     case 4: self = .month
//     case 5: self = .year
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .second: return 0
//     case .minute: return 1
//     case .hour: return 2
//     case .day: return 3
//     case .month: return 4
//     case .year: return 5
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_TimeUnit: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_EmailFields: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknown // = 0
//   case subject // = 1

//   public init() {
//     self = .unknown
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknown
//     case 1: self = .subject
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknown: return 0
//     case .subject: return 1
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_EmailFields: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_EmailRole: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknownEmailRole // = 0
//   case to // = 1
//   case cc // = 2

//   public init() {
//     self = .unknownEmailRole
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknownEmailRole
//     case 1: self = .to
//     case 2: self = .cc
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknownEmailRole: return 0
//     case .to: return 1
//     case .cc: return 2
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_EmailRole: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

///国际化相关
// public enum LarkNCExtensionPB_Entities_LanguageType: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknownLanguage // = 0

  ///简体中文
//   case zhCn // = 1

  ///英语(美国)
//   case enUs // = 2

  ///日文 not support now
//   case jaJp // = 3

  ///法文 not support now
//   case frFr // = 4

  ///德文 not support now
//   case deDe // = 5

  ///西班牙文 not support now
//   case esEs // = 6

  ///俄文 not support now
//   case ruRu // = 7

  ///阿拉伯文 not support now
//   case arEg // = 8

  ///葡萄牙文 not support now
//   case ptPt // = 9

//   public init() {
//     self = .unknownLanguage
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknownLanguage
//     case 1: self = .zhCn
//     case 2: self = .enUs
//     case 3: self = .jaJp
//     case 4: self = .frFr
//     case 5: self = .deDe
//     case 6: self = .esEs
//     case 7: self = .ruRu
//     case 8: self = .arEg
//     case 9: self = .ptPt
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknownLanguage: return 0
//     case .zhCn: return 1
//     case .enUs: return 2
//     case .jaJp: return 3
//     case .frFr: return 4
//     case .deDe: return 5
//     case .esEs: return 6
//     case .ruRu: return 7
//     case .arEg: return 8
//     case .ptPt: return 9
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_LanguageType: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

/// ！！！改前阅读以下备注
/// 历史原因，此处枚举目前被多个不同工程重复定义，要求不同工程都的枚举定义需要保持一致，否则将产生各种问题
/// 新增、编辑枚举需同步更新定义的文件有：
/// 1. git.byted.org/ee/apacana/kitc/idl/bear/server/suite_constants.thrift
/// 2. (注意和6.在同一个文件) enum DocType code.byted.org/lark/im-protobuf/idl/entities.proto
/// 3. code.byted.org/lark/rpc-interface/idl/bear/constants.thrift
/// 4. code.byted.org/lark_search/rpc-interface/idl/services/broker_migration.thrift
/// 5. code.byted.org/lark/rust-sdk/im-protobuf-sdk/client/basic/v1/entities.proto
/// 6. (注意和2.在同一个文件) enum DocFeed code.byted.org/lark/im-protobuf/idl/entities.proto
public enum LarkNCExtensionPB_Entities_DocType: LarkHTTP.Enum {
  public typealias RawValue = Int
  case unknownDocType // = 0
  case doc // = 1
  case sheet // = 2
  case bitable // = 3
  case mindnote // = 4
  case file // = 5
  case slide // = 6
  case wiki // = 7
  case docx // = 8

  /// space 文件夹
  case folder // = 9

  /// wiki2.0 文件夹
  case catalog // = 10

  public init() {
    self = .unknownDocType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownDocType
    case 1: self = .doc
    case 2: self = .sheet
    case 3: self = .bitable
    case 4: self = .mindnote
    case 5: self = .file
    case 6: self = .slide
    case 7: self = .wiki
    case 8: self = .docx
    case 9: self = .folder
    case 10: self = .catalog
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownDocType: return 0
    case .doc: return 1
    case .sheet: return 2
    case .bitable: return 3
    case .mindnote: return 4
    case .file: return 5
    case .slide: return 6
    case .wiki: return 7
    case .docx: return 8
    case .folder: return 9
    case .catalog: return 10
    }
  }

}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_DocType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum LarkNCExtensionPB_Entities_DocSortRuleType: LarkHTTP.Enum {
  public typealias RawValue = Int

  ///默认排序
  case defaultType // = 1

  ///User打开时间排序
  case openTime // = 2

  ///User编辑时间降序
  case editTime // = 4

  ///User编辑时间升序
  case editTimeAsc // = 5

  ///非排序规则，指过滤掉打开过的文档
  case filterOpen // = 8

  ///非排序规则，指过滤编辑过的文档
  case filterEdit // = 16

  ///msg_obj create_time降序
  case msgCreateTime // = 32

  ///实体创建时间升序
  case entityCreateTimeAsc // = 64

  ///实体创建时间降序
  case entityCreateTimeDesc // = 65

  ///pano标签更新时间升序
  case tagTimeAsc // = 128

  ///pano标签更新时间降序
  case tagTimeDesc // = 129

  ///按文档创建时间排序
  case createTime // = 256

  public init() {
    self = .defaultType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .defaultType
    case 2: self = .openTime
    case 4: self = .editTime
    case 5: self = .editTimeAsc
    case 8: self = .filterOpen
    case 16: self = .filterEdit
    case 32: self = .msgCreateTime
    case 64: self = .entityCreateTimeAsc
    case 65: self = .entityCreateTimeDesc
    case 128: self = .tagTimeAsc
    case 129: self = .tagTimeDesc
    case 256: self = .createTime
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .defaultType: return 1
    case .openTime: return 2
    case .editTime: return 4
    case .editTimeAsc: return 5
    case .filterOpen: return 8
    case .filterEdit: return 16
    case .msgCreateTime: return 32
    case .entityCreateTimeAsc: return 64
    case .entityCreateTimeDesc: return 65
    case .tagTimeAsc: return 128
    case .tagTimeDesc: return 129
    case .createTime: return 256
    }
  }

}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_DocSortRuleType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum LarkNCExtensionPB_Entities_IconType: LarkHTTP.Enum {
  public typealias RawValue = Int
  case unknownIconType // = 0
  case emoji // = 1
  case image // = 2

  public init() {
    self = .unknownIconType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownIconType
    case 1: self = .emoji
    case 2: self = .image
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownIconType: return 0
    case .emoji: return 1
    case .image: return 2
    }
  }

}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_IconType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_ScrollType: LarkHTTP.Enum {
//   public typealias RawValue = Int

  /// 展示日程开始，结束时间的条幅
//   case eventInfo // = 1

  /// 会议群转成普通群前往设置的条幅
//   case meetingTransferChat // = 2

//   public init() {
//     self = .eventInfo
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 1: self = .eventInfo
//     case 2: self = .meetingTransferChat
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .eventInfo: return 1
//     case .meetingTransferChat: return 2
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_ScrollType: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

///用户对单个日程的可见性
// public enum LarkNCExtensionPB_Entities_UserEventVisibility: LarkHTTP.Enum {
//   public typealias RawValue = Int

  ///忙碌
//   case busyReader // = 0

  ///空闲
//   case freeReader // = 1

  ///可查看详情
//   case reader // = 2

//   public init() {
//     self = .busyReader
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .busyReader
//     case 1: self = .freeReader
//     case 2: self = .reader
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .busyReader: return 0
//     case .freeReader: return 1
//     case .reader: return 2
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_UserEventVisibility: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_AlternateCalendar: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case noneCalendar // = 0
//   case chineseLunarCalendar // = 1

//   public init() {
//     self = .noneCalendar
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .noneCalendar
//     case 1: self = .chineseLunarCalendar
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .noneCalendar: return 0
//     case .chineseLunarCalendar: return 1
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_AlternateCalendar: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_ResourceDisplayType: LarkHTTP.Enum {
//   public typealias RawValue = Int

  /// 未知类型
//   case unspecified // = 0

  /// 固定层级
//   case buildingLike // = 1

  /// 灵活层级
//   case hierarchical // = 2

//   public init() {
//     self = .unspecified
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unspecified
//     case 1: self = .buildingLike
//     case 2: self = .hierarchical
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unspecified: return 0
//     case .buildingLike: return 1
//     case .hierarchical: return 2
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_ResourceDisplayType: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_DayOfWeek: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case sunday // = 0
//   case monday // = 1
//   case tuesday // = 2
//   case wednesday // = 3
//   case thursday // = 4
//   case friday // = 5
//   case saturday // = 6

//   public init() {
//     self = .sunday
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .sunday
//     case 1: self = .monday
//     case 2: self = .tuesday
//     case 3: self = .wednesday
//     case 4: self = .thursday
//     case 5: self = .friday
//     case 6: self = .saturday
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .sunday: return 0
//     case .monday: return 1
//     case .tuesday: return 2
//     case .wednesday: return 3
//     case .thursday: return 4
//     case .friday: return 5
//     case .saturday: return 6
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_DayOfWeek: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_MeetingRoomUnusableReasonType: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknownUnusableReason // = 0

  ///超过单次最长预定时长
//   case overMaxDuration // = 1

  ///超过最远可预定时间
//   case overMaxUntilTime // = 2

  ///不在单日预定时间范围
//   case notInUsableTime // = 3

  ///计划性征用
//   case duringRequisition // = 4

  ///过去时间
//   case pastTime // = 5

  ///早于当日最早可预订时间
//   case beforeEarliestBookTime // = 7

  /// "预定时间超过 {{num}} 小时，审批类会议室无法重复预定 "
//   case cantReserveOverTime // = 101

  ///": "预定该会议室需要审批，请升级版本以发送审批申请"
//   case upgradeForApproval // = 102

  ///": "预定时间超过 {{num}} 小时需要审批  "
//   case overReserveTimeApprove // = 103

//   public init() {
//     self = .unknownUnusableReason
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknownUnusableReason
//     case 1: self = .overMaxDuration
//     case 2: self = .overMaxUntilTime
//     case 3: self = .notInUsableTime
//     case 4: self = .duringRequisition
//     case 5: self = .pastTime
//     case 7: self = .beforeEarliestBookTime
//     case 101: self = .cantReserveOverTime
//     case 102: self = .upgradeForApproval
//     case 103: self = .overReserveTimeApprove
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknownUnusableReason: return 0
//     case .overMaxDuration: return 1
//     case .overMaxUntilTime: return 2
//     case .notInUsableTime: return 3
//     case .duringRequisition: return 4
//     case .pastTime: return 5
//     case .beforeEarliestBookTime: return 7
//     case .cantReserveOverTime: return 101
//     case .upgradeForApproval: return 102
//     case .overReserveTimeApprove: return 103
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_MeetingRoomUnusableReasonType: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_ChatterMeetingStatus: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unkown // = 0
//   case idle // = 1

  ///别的会议&voip
//   case busy // = 2

  ///本次会议
//   case inmeeting // = 3

//   public init() {
//     self = .unkown
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unkown
//     case 1: self = .idle
//     case 2: self = .busy
//     case 3: self = .inmeeting
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unkown: return 0
//     case .idle: return 1
//     case .busy: return 2
//     case .inmeeting: return 3
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_ChatterMeetingStatus: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_FeedType: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknownType // = 0
//   case inbox // = 1
//   case done // = 2

//   public init() {
//     self = .unknownType
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknownType
//     case 1: self = .inbox
//     case 2: self = .done
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknownType: return 0
//     case .inbox: return 1
//     case .done: return 2
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_FeedType: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_ChannelDataDirection: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknownDirection // = 0
//   case channelUp // = 1
//   case channelDown // = 2
//   case channelBidirectional // = 3

//   public init() {
//     self = .unknownDirection
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknownDirection
//     case 1: self = .channelUp
//     case 2: self = .channelDown
//     case 3: self = .channelBidirectional
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknownDirection: return 0
//     case .channelUp: return 1
//     case .channelDown: return 2
//     case .channelBidirectional: return 3
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_ChannelDataDirection: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_NavigationAppType: LarkHTTP.Enum {
//   public typealias RawValue = Int

  /// 官方应用
//   case appTypeLarkNative // = 1

  /// 小程序
//   case appTypeMini // = 2

  /// H5应用
//   case appTypeWeb // = 3

  /// 原生应用
//   case appTypeCustomNative // = 4

//   public init() {
//     self = .appTypeLarkNative
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 1: self = .appTypeLarkNative
//     case 2: self = .appTypeMini
//     case 3: self = .appTypeWeb
//     case 4: self = .appTypeCustomNative
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .appTypeLarkNative: return 1
//     case .appTypeMini: return 2
//     case .appTypeWeb: return 3
//     case .appTypeCustomNative: return 4
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_NavigationAppType: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_NavigationPlatform: LarkHTTP.Enum {
//   public typealias RawValue = Int

  /// 桌面端
//   case navPc // = 1

  /// 移动端
//   case navMobile // = 2

  /// Ipad
//   case navIpad // = 3

//   public init() {
//     self = .navPc
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 1: self = .navPc
//     case 2: self = .navMobile
//     case 3: self = .navIpad
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .navPc: return 1
//     case .navMobile: return 2
//     case .navIpad: return 3
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_NavigationPlatform: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_TenantTag: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case standard // = 0
//   case undefined // = 1
//   case simple // = 2

//   public init() {
//     self = .standard
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .standard
//     case 1: self = .undefined
//     case 2: self = .simple
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .standard: return 0
//     case .undefined: return 1
//     case .simple: return 2
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_TenantTag: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

/// 应用内邀请成员
// public enum LarkNCExtensionPB_Entities_PlatformType: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case platformUnknown // = 0
//   case platformIphone // = 1
//   case platformAndroid // = 2
//   case platformWebAdmin // = 3
//   case platformWebOther // = 4
//   case platformWindows // = 5
//   case platformMac // = 6
//   case platformPassport // = 7
//   case platformIpad // = 8
//   case platformLinux // = 9

//   public init() {
//     self = .platformUnknown
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .platformUnknown
//     case 1: self = .platformIphone
//     case 2: self = .platformAndroid
//     case 3: self = .platformWebAdmin
//     case 4: self = .platformWebOther
//     case 5: self = .platformWindows
//     case 6: self = .platformMac
//     case 7: self = .platformPassport
//     case 8: self = .platformIpad
//     case 9: self = .platformLinux
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .platformUnknown: return 0
//     case .platformIphone: return 1
//     case .platformAndroid: return 2
//     case .platformWebAdmin: return 3
//     case .platformWebOther: return 4
//     case .platformWindows: return 5
//     case .platformMac: return 6
//     case .platformPassport: return 7
//     case .platformIpad: return 8
//     case .platformLinux: return 9
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_PlatformType: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_TopicGroupRole: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknownRole // = 0

  ///无权限的用户
//   case unauthorizedUser // = 1

  /// member: 小组的成员
//   case member // = 2

  /// Participant: 未加入但有权限访问者
//   case participant // = 3

//   public init() {
//     self = .unknownRole
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknownRole
//     case 1: self = .unauthorizedUser
//     case 2: self = .member
//     case 3: self = .participant
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknownRole: return 0
//     case .unauthorizedUser: return 1
//     case .member: return 2
//     case .participant: return 3
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_TopicGroupRole: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_IncompatibleLevel: LarkHTTP.Enum {
//   public typealias RawValue = Int

  ///展示不兼容信息
//   case showHint // = 1

  ///不能编辑
//   case disableEdit // = 2

  ///不能展示也不能编辑
//   case disableRead // = 3

//   public init() {
//     self = .showHint
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 1: self = .showHint
//     case 2: self = .disableEdit
//     case 3: self = .disableRead
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .showHint: return 1
//     case .disableEdit: return 2
//     case .disableRead: return 3
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_IncompatibleLevel: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_Tag: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknownTag // = 0
//   case approval // = 1
//   case official // = 2
//   case oncall // = 3
//   case oncallOffline // = 4
//   case external // = 5

  /// 带有警示效果的外部联系人标签
//   case externalWarn // = 6

//   public init() {
//     self = .unknownTag
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknownTag
//     case 1: self = .approval
//     case 2: self = .official
//     case 3: self = .oncall
//     case 4: self = .oncallOffline
//     case 5: self = .external
//     case 6: self = .externalWarn
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknownTag: return 0
//     case .approval: return 1
//     case .official: return 2
//     case .oncall: return 3
//     case .oncallOffline: return 4
//     case .external: return 5
//     case .externalWarn: return 6
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_Tag: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_ContactSource: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknownSource // = 0
//   case link // = 1
//   case chat // = 2
//   case calendar // = 3
//   case docs // = 4
//   case vc // = 5
//   case email // = 6
//   case nameCard // = 7
//   case searchPhone // = 8
//   case searchEmail // = 9
//   case searchContact // = 10

  ///文件夹
//   case ccmFolder // = 11

  ///表格
//   case ccmSheet // = 12

  ///演示文档
//   case ccmSlide // = 13

  ///思维导图
//   case ccmMindNote // = 14

  ///多维表格
//   case ccmSmartTable // = 15

  ///用户服务热线电话
//   case hotline // = 16

  ///【特别关注的人】场景下打开
//   case specialFocus // = 19

  ///【妙记】场景下打开
//   case minutes // = 20

//   public init() {
//     self = .unknownSource
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknownSource
//     case 1: self = .link
//     case 2: self = .chat
//     case 3: self = .calendar
//     case 4: self = .docs
//     case 5: self = .vc
//     case 6: self = .email
//     case 7: self = .nameCard
//     case 8: self = .searchPhone
//     case 9: self = .searchEmail
//     case 10: self = .searchContact
//     case 11: self = .ccmFolder
//     case 12: self = .ccmSheet
//     case 13: self = .ccmSlide
//     case 14: self = .ccmMindNote
//     case 15: self = .ccmSmartTable
//     case 16: self = .hotline
//     case 19: self = .specialFocus
//     case 20: self = .minutes
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknownSource: return 0
//     case .link: return 1
//     case .chat: return 2
//     case .calendar: return 3
//     case .docs: return 4
//     case .vc: return 5
//     case .email: return 6
//     case .nameCard: return 7
//     case .searchPhone: return 8
//     case .searchEmail: return 9
//     case .searchContact: return 10
//     case .ccmFolder: return 11
//     case .ccmSheet: return 12
//     case .ccmSlide: return 13
//     case .ccmMindNote: return 14
//     case .ccmSmartTable: return 15
//     case .hotline: return 16
//     case .specialFocus: return 19
//     case .minutes: return 20
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_ContactSource: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_SidebarType: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknownSidebarType // = 0
//   case admin // = 1

//   public init() {
//     self = .unknownSidebarType
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknownSidebarType
//     case 1: self = .admin
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknownSidebarType: return 0
//     case .admin: return 1
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_SidebarType: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_ContactOperation: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case operationUnknown // = 0
//   case operationAdd // = 1
//   case operationDelete // = 2
//   case operationUpdate // = 3

//   public init() {
//     self = .operationUnknown
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .operationUnknown
//     case 1: self = .operationAdd
//     case 2: self = .operationDelete
//     case 3: self = .operationUpdate
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .operationUnknown: return 0
//     case .operationAdd: return 1
//     case .operationDelete: return 2
//     case .operationUpdate: return 3
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_ContactOperation: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

///团队状态
// public enum LarkNCExtensionPB_Entities_TeamStatus: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknown // = 0

  /// 生效
//   case active // = 1

  /// 解散
//   case dissolved // = 2

//   public init() {
//     self = .unknown
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknown
//     case 1: self = .active
//     case 2: self = .dissolved
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknown: return 0
//     case .active: return 1
//     case .dissolved: return 2
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_TeamStatus: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

/// 团队群类型
// public enum LarkNCExtensionPB_Entities_TeamChatType: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknown // = 0

  /// 全员群
//   case `default` // = 1

  /// 标准群
//   case `public` // = 2

  /// 私有群
//   case `private` // = 3

  /// 公开群
//   case `open` // = 4

//   public init() {
//     self = .unknown
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknown
//     case 1: self = .default
//     case 2: self = .public
//     case 3: self = .private
//     case 4: self = .open
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknown: return 0
//     case .default: return 1
//     case .public: return 2
//     case .private: return 3
//     case .open: return 4
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_TeamChatType: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_ChatterExtraStateType: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case unknownExtraStateType // = 0

  /// 隐藏大群mute提示，参考 HideLargeChatMuteTipsState
//   case hideLargeChatMuteTips // = 1

//   public init() {
//     self = .unknownExtraStateType
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .unknownExtraStateType
//     case 1: self = .hideLargeChatMuteTips
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .unknownExtraStateType: return 0
//     case .hideLargeChatMuteTips: return 1
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_ChatterExtraStateType: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

// public enum LarkNCExtensionPB_Entities_HideLargeChatMuteTipsState: LarkHTTP.Enum {
//   public typealias RawValue = Int
//   case displayTips // = 0
//   case hideTips // = 1

//   public init() {
//     self = .displayTips
//   }

//   public init?(rawValue: Int) {
//     switch rawValue {
//     case 0: self = .displayTips
//     case 1: self = .hideTips
//     default: return nil
//     }
//   }

//   public var rawValue: Int {
//     switch self {
//     case .displayTips: return 0
//     case .hideTips: return 1
//     }
//   }

// }

#if swift(>=4.2)

// extension LarkNCExtensionPB_Entities_HideLargeChatMuteTipsState: CaseIterable {
  // Support synthesized by the compiler.
// }

#endif  // swift(>=4.2)

/// key, urls, width, height 为非加密图片使用的字段
/// secure_key, secure_urls, secure_width, secure_height, crypto 为加密图片使用的字段
/// size, fs_unit, params 为非加密、加密图片通用字段
/// url 相关字段已废弃，统一用 key + fs_unit 按照规则来拼 url
/// 头像只使用 key 和 fs_unit 两个字段，urls 废弃，但目前兼容得来改新的拼接方式获得的 url
public struct LarkNCExtensionPB_Entities_Image {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var key: String {
    get {return _storage._key ?? String()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}

  public var urls: [String] {
    get {return _storage._urls}
    set {_uniqueStorage()._urls = newValue}
  }

  public var width: Int32 {
    get {return _storage._width ?? 0}
    set {_uniqueStorage()._width = newValue}
  }
  /// Returns true if `width` has been explicitly set.
//  public var hasWidth: Bool {return _storage._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
//  public mutating func clearWidth() {_uniqueStorage()._width = nil}

  public var height: Int32 {
    get {return _storage._height ?? 0}
    set {_uniqueStorage()._height = newValue}
  }
  /// Returns true if `height` has been explicitly set.
//  public var hasHeight: Bool {return _storage._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
//  public mutating func clearHeight() {_uniqueStorage()._height = nil}

  public var secureKey: String {
    get {return _storage._secureKey ?? String()}
    set {_uniqueStorage()._secureKey = newValue}
  }
  /// Returns true if `secureKey` has been explicitly set.
//  public var hasSecureKey: Bool {return _storage._secureKey != nil}
  /// Clears the value of `secureKey`. Subsequent reads from it will return its default value.
//  public mutating func clearSecureKey() {_uniqueStorage()._secureKey = nil}

  public var secureUrls: [String] {
    get {return _storage._secureUrls}
    set {_uniqueStorage()._secureUrls = newValue}
  }

  public var secureWidth: Int32 {
    get {return _storage._secureWidth ?? 0}
    set {_uniqueStorage()._secureWidth = newValue}
  }
  /// Returns true if `secureWidth` has been explicitly set.
//  public var hasSecureWidth: Bool {return _storage._secureWidth != nil}
  /// Clears the value of `secureWidth`. Subsequent reads from it will return its default value.
//  public mutating func clearSecureWidth() {_uniqueStorage()._secureWidth = nil}

  public var secureHeight: Int32 {
    get {return _storage._secureHeight ?? 0}
    set {_uniqueStorage()._secureHeight = newValue}
  }
  /// Returns true if `secureHeight` has been explicitly set.
//  public var hasSecureHeight: Bool {return _storage._secureHeight != nil}
  /// Clears the value of `secureHeight`. Subsequent reads from it will return its default value.
//  public mutating func clearSecureHeight() {_uniqueStorage()._secureHeight = nil}

  public var crypto: LarkNCExtensionPB_Entities_Crypto {
    get {return _storage._crypto ?? LarkNCExtensionPB_Entities_Crypto()}
    set {_uniqueStorage()._crypto = newValue}
  }
  /// Returns true if `crypto` has been explicitly set.
  public var hasCrypto: Bool {return _storage._crypto != nil}
  /// Clears the value of `crypto`. Subsequent reads from it will return its default value.
//  public mutating func clearCrypto() {_uniqueStorage()._crypto = nil}

  public var size: Int32 {
    get {return _storage._size ?? 0}
    set {_uniqueStorage()._size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
//  public var hasSize: Bool {return _storage._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
//  public mutating func clearSize() {_uniqueStorage()._size = nil}

  public var fsUnit: String {
    get {return _storage._fsUnit ?? String()}
    set {_uniqueStorage()._fsUnit = newValue}
  }
  /// Returns true if `fsUnit` has been explicitly set.
  public var hasFsUnit: Bool {return _storage._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}

  public var params: Dictionary<String,String> {
    get {return _storage._params}
    set {_uniqueStorage()._params = newValue}
  }

  /// 灰度给头像使用
  public var etag: String {
    get {return _storage._etag ?? String()}
    set {_uniqueStorage()._etag = newValue}
  }
  /// Returns true if `etag` has been explicitly set.
//  public var hasEtag: Bool {return _storage._etag != nil}
  /// Clears the value of `etag`. Subsequent reads from it will return its default value.
//  public mutating func clearEtag() {_uniqueStorage()._etag = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// https://en.wikipedia.org/wiki/List_of_archive_formats
/// 压缩包一般分成 3 类：只归档、只压缩、又归档又压缩
/// 对于常用的格式 mime 都有定义，所以直接使用 mime 作为解压方法的选择
//public struct LarkNCExtensionPB_Entities_Archive {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var key: String {
//    get {return _key ?? String()}
//    set {_key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {self._key = nil}
//
//  public var fsUnit: String {
//    get {return _fsUnit ?? String()}
//    set {_fsUnit = newValue}
//  }
  /// Returns true if `fsUnit` has been explicitly set.
//  public var hasFsUnit: Bool {return self._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {self._fsUnit = nil}
//
//  public var size: Int64 {
//    get {return _size ?? 0}
//    set {_size = newValue}
//  }
  /// Returns true if `size` has been explicitly set.
//  public var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
//  public mutating func clearSize() {self._size = nil}
//
//  public var checksum: String {
//    get {return _checksum ?? String()}
//    set {_checksum = newValue}
//  }
  /// Returns true if `checksum` has been explicitly set.
//  public var hasChecksum: Bool {return self._checksum != nil}
  /// Clears the value of `checksum`. Subsequent reads from it will return its default value.
//  public mutating func clearChecksum() {self._checksum = nil}
//
//  public var mime: String {
//    get {return _mime ?? String()}
//    set {_mime = newValue}
//  }
  /// Returns true if `mime` has been explicitly set.
//  public var hasMime: Bool {return self._mime != nil}
  /// Clears the value of `mime`. Subsequent reads from it will return its default value.
//  public mutating func clearMime() {self._mime = nil}
//
//  public var params: Dictionary<String,String> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _key: String? = nil
//  fileprivate var _fsUnit: String? = nil
//  fileprivate var _size: Int64? = nil
//  fileprivate var _checksum: String? = nil
//  fileprivate var _mime: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_Urgent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var messageID: String {
//    get {return _messageID ?? String()}
//    set {_messageID = newValue}
//  }
  /// Returns true if `messageID` has been explicitly set.
//  public var hasMessageID: Bool {return self._messageID != nil}
  /// Clears the value of `messageID`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageID() {self._messageID = nil}
//
//  public var type: LarkNCExtensionPB_Entities_Urgent.TypeEnum {
//    get {return _type ?? .unknownUrgent}
//    set {_type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}
//
//  public var sendTime: Int64 {
//    get {return _sendTime ?? 0}
//    set {_sendTime = newValue}
//  }
  /// Returns true if `sendTime` has been explicitly set.
//  public var hasSendTime: Bool {return self._sendTime != nil}
  /// Clears the value of `sendTime`. Subsequent reads from it will return its default value.
//  public mutating func clearSendTime() {self._sendTime = nil}
//
//  public var fromID: String {
//    get {return _fromID ?? String()}
//    set {_fromID = newValue}
//  }
  /// Returns true if `fromID` has been explicitly set.
//  public var hasFromID: Bool {return self._fromID != nil}
  /// Clears the value of `fromID`. Subsequent reads from it will return its default value.
//  public mutating func clearFromID() {self._fromID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownUrgent // = 0
//    case app // = 1
//    case sms // = 2
//    case phone // = 3
//
//    public init() {
//      self = .unknownUrgent
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownUrgent
//      case 1: self = .app
//      case 2: self = .sms
//      case 3: self = .phone
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownUrgent: return 0
//      case .app: return 1
//      case .sms: return 2
//      case .phone: return 3
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _messageID: String? = nil
//  fileprivate var _type: LarkNCExtensionPB_Entities_Urgent.TypeEnum? = nil
//  fileprivate var _sendTime: Int64? = nil
//  fileprivate var _fromID: String? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_Urgent.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_UrgentAck {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var ackID: String {
//    get {return _ackID ?? String()}
//    set {_ackID = newValue}
//  }
  /// Returns true if `ackID` has been explicitly set.
//  public var hasAckID: Bool {return self._ackID != nil}
  /// Clears the value of `ackID`. Subsequent reads from it will return its default value.
//  public mutating func clearAckID() {self._ackID = nil}
//
//  public var messageID: String {
//    get {return _messageID ?? String()}
//    set {_messageID = newValue}
//  }
  /// Returns true if `messageID` has been explicitly set.
//  public var hasMessageID: Bool {return self._messageID != nil}
  /// Clears the value of `messageID`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageID() {self._messageID = nil}
//
//  public var toID: String {
//    get {return _toID ?? String()}
//    set {_toID = newValue}
//  }
  /// Returns true if `toID` has been explicitly set.
//  public var hasToID: Bool {return self._toID != nil}
  /// Clears the value of `toID`. Subsequent reads from it will return its default value.
//  public mutating func clearToID() {self._toID = nil}
//
//  public var urgentID: String {
//    get {return _urgentID ?? String()}
//    set {_urgentID = newValue}
//  }
  /// Returns true if `urgentID` has been explicitly set.
//  public var hasUrgentID: Bool {return self._urgentID != nil}
  /// Clears the value of `urgentID`. Subsequent reads from it will return its default value.
//  public mutating func clearUrgentID() {self._urgentID = nil}
//
//  public var sendTime: Int64 {
//    get {return _sendTime ?? 0}
//    set {_sendTime = newValue}
//  }
  /// Returns true if `sendTime` has been explicitly set.
//  public var hasSendTime: Bool {return self._sendTime != nil}
  /// Clears the value of `sendTime`. Subsequent reads from it will return its default value.
//  public mutating func clearSendTime() {self._sendTime = nil}
//
//  public var type: LarkNCExtensionPB_Entities_Urgent.TypeEnum {
//    get {return _type ?? .unknownUrgent}
//    set {_type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}
//
//  public var status: Int64 {
//    get {return _status ?? 0}
//    set {_status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {self._status = nil}
//
//  public var confirmTime: Int64 {
//    get {return _confirmTime ?? 0}
//    set {_confirmTime = newValue}
//  }
  /// Returns true if `confirmTime` has been explicitly set.
//  public var hasConfirmTime: Bool {return self._confirmTime != nil}
  /// Clears the value of `confirmTime`. Subsequent reads from it will return its default value.
//  public mutating func clearConfirmTime() {self._confirmTime = nil}
//
//  public var phoneStatus: Int64 {
//    get {return _phoneStatus ?? 0}
//    set {_phoneStatus = newValue}
//  }
  /// Returns true if `phoneStatus` has been explicitly set.
//  public var hasPhoneStatus: Bool {return self._phoneStatus != nil}
  /// Clears the value of `phoneStatus`. Subsequent reads from it will return its default value.
//  public mutating func clearPhoneStatus() {self._phoneStatus = nil}
//
  /// 当 version 为空或者值为0走老版本逻辑，当 version 有值且不为0使用 urgent_id 替代 ack_id
//  public var version: Int64 {
//    get {return _version ?? 0}
//    set {_version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {self._version = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _ackID: String? = nil
//  fileprivate var _messageID: String? = nil
//  fileprivate var _toID: String? = nil
//  fileprivate var _urgentID: String? = nil
//  fileprivate var _sendTime: Int64? = nil
//  fileprivate var _type: LarkNCExtensionPB_Entities_Urgent.TypeEnum? = nil
//  fileprivate var _status: Int64? = nil
//  fileprivate var _confirmTime: Int64? = nil
//  fileprivate var _phoneStatus: Int64? = nil
//  fileprivate var _version: Int64? = nil
//}

/// 图片集合
/// key 和 image_key 废弃，如果需要 key 应该直接使用对应 Image 中的
/// webp 格式的缩略图在支持 webp 的客户端可以使用
/// 所有头像数据不再使用 ImageSet 标识, deprecated since 3.17.0
public struct LarkNCExtensionPB_Entities_ImageSet {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var key: String {
    get {return _storage._key ?? String()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}

  /// 原图
  public var origin: LarkNCExtensionPB_Entities_Image {
    get {return _storage._origin ?? LarkNCExtensionPB_Entities_Image()}
    set {_uniqueStorage()._origin = newValue}
  }
  /// Returns true if `origin` has been explicitly set.
  public var hasOrigin: Bool {return _storage._origin != nil}
  /// Clears the value of `origin`. Subsequent reads from it will return its default value.
//  public mutating func clearOrigin() {_uniqueStorage()._origin = nil}

  /// 小缩略图，原图格式
  public var thumbnail: LarkNCExtensionPB_Entities_Image {
    get {return _storage._thumbnail ?? LarkNCExtensionPB_Entities_Image()}
    set {_uniqueStorage()._thumbnail = newValue}
  }
  /// Returns true if `thumbnail` has been explicitly set.
//  public var hasThumbnail: Bool {return _storage._thumbnail != nil}
  /// Clears the value of `thumbnail`. Subsequent reads from it will return its default value.
//  public mutating func clearThumbnail() {_uniqueStorage()._thumbnail = nil}

  public var imageKey: String {
    get {return _storage._imageKey ?? String()}
    set {_uniqueStorage()._imageKey = newValue}
  }
  /// Returns true if `imageKey` has been explicitly set.
//  public var hasImageKey: Bool {return _storage._imageKey != nil}
  /// Clears the value of `imageKey`. Subsequent reads from it will return its default value.
//  public mutating func clearImageKey() {_uniqueStorage()._imageKey = nil}

  /// 中缩略图，原图格式
  public var middle: LarkNCExtensionPB_Entities_Image {
    get {return _storage._middle ?? LarkNCExtensionPB_Entities_Image()}
    set {_uniqueStorage()._middle = newValue}
  }
  /// Returns true if `middle` has been explicitly set.
//  public var hasMiddle: Bool {return _storage._middle != nil}
  /// Clears the value of `middle`. Subsequent reads from it will return its default value.
//  public mutating func clearMiddle() {_uniqueStorage()._middle = nil}

  /// 小缩略图，webp 格式
  public var thumbnailWebp: LarkNCExtensionPB_Entities_Image {
    get {return _storage._thumbnailWebp ?? LarkNCExtensionPB_Entities_Image()}
    set {_uniqueStorage()._thumbnailWebp = newValue}
  }
  /// Returns true if `thumbnailWebp` has been explicitly set.
//  public var hasThumbnailWebp: Bool {return _storage._thumbnailWebp != nil}
  /// Clears the value of `thumbnailWebp`. Subsequent reads from it will return its default value.
//  public mutating func clearThumbnailWebp() {_uniqueStorage()._thumbnailWebp = nil}

  /// 中缩略图，webp 格式
  public var middleWebp: LarkNCExtensionPB_Entities_Image {
    get {return _storage._middleWebp ?? LarkNCExtensionPB_Entities_Image()}
    set {_uniqueStorage()._middleWebp = newValue}
  }
  /// Returns true if `middleWebp` has been explicitly set.
//  public var hasMiddleWebp: Bool {return _storage._middleWebp != nil}
  /// Clears the value of `middleWebp`. Subsequent reads from it will return its default value.
//  public mutating func clearMiddleWebp() {_uniqueStorage()._middleWebp = nil}

  /// gif 转 mp4, 尺寸 middle, 编码h.264, 无需转换时nil
  public var middleMp4: LarkNCExtensionPB_Entities_Image {
    get {return _storage._middleMp4 ?? LarkNCExtensionPB_Entities_Image()}
    set {_uniqueStorage()._middleMp4 = newValue}
  }
  /// Returns true if `middleMp4` has been explicitly set.
//  public var hasMiddleMp4: Bool {return _storage._middleMp4 != nil}
  /// Clears the value of `middleMp4`. Subsequent reads from it will return its default value.
//  public mutating func clearMiddleMp4() {_uniqueStorage()._middleMp4 = nil}

  /// gif 转得的 mp4 封面
  public var cover: LarkNCExtensionPB_Entities_Image {
    get {return _storage._cover ?? LarkNCExtensionPB_Entities_Image()}
    set {_uniqueStorage()._cover = newValue}
  }
  /// Returns true if `cover` has been explicitly set.
  public var hasCover: Bool {return _storage._cover != nil}
  /// Clears the value of `cover`. Subsequent reads from it will return its default value.
//  public mutating func clearCover() {_uniqueStorage()._cover = nil}

  /// 图片源文件
  public var intact: LarkNCExtensionPB_Entities_Image {
    get {return _storage._intact ?? LarkNCExtensionPB_Entities_Image()}
    set {_uniqueStorage()._intact = newValue}
  }
  /// Returns true if `intact` has been explicitly set.
  public var hasIntact: Bool {return _storage._intact != nil}
  /// Clears the value of `intact`. Subsequent reads from it will return its default value.
//  public mutating func clearIntact() {_uniqueStorage()._intact = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ImageProperty 图像基本属性, 如宽、高等
public struct LarkNCExtensionPB_Entities_ImageBaseAttribute {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var width: UInt32 {
    get {return _width ?? 0}
    set {_width = newValue}
  }
  /// Returns true if `width` has been explicitly set.
//  public var hasWidth: Bool {return self._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
//  public mutating func clearWidth() {self._width = nil}

  public var height: UInt32 {
    get {return _height ?? 0}
    set {_height = newValue}
  }
  /// Returns true if `height` has been explicitly set.
//  public var hasHeight: Bool {return self._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
//  public mutating func clearHeight() {self._height = nil}

  /// exif 值, 含义和用途见: https://bytedance.feishu.cn/docs/doccn3mdSMKZ7fO9WSr0dSKi4ee#
  public var exifOrientation: UInt32 {
    get {return _exifOrientation ?? 0}
    set {_exifOrientation = newValue}
  }
  /// Returns true if `exifOrientation` has been explicitly set.
  public var hasExifOrientation: Bool {return self._exifOrientation != nil}
  /// Clears the value of `exifOrientation`. Subsequent reads from it will return its default value.
//  public mutating func clearExifOrientation() {self._exifOrientation = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _width: UInt32? = nil
  fileprivate var _height: UInt32? = nil
  fileprivate var _exifOrientation: UInt32? = nil
}

/// ImageSetV2 是 V1 的精简版，节省包体积大小
public struct LarkNCExtensionPB_Entities_ImageSetV2 {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// image_key 与 fs_unit 总是成对出现
  public var imageKey: String {
    get {return _storage._imageKey ?? String()}
    set {_uniqueStorage()._imageKey = newValue}
  }
  /// Returns true if `imageKey` has been explicitly set.
//  public var hasImageKey: Bool {return _storage._imageKey != nil}
  /// Clears the value of `imageKey`. Subsequent reads from it will return its default value.
//  public mutating func clearImageKey() {_uniqueStorage()._imageKey = nil}

  /// fs_unit 标记了访问图片的 endpoint
  public var fsUnit: String {
    get {return _storage._fsUnit ?? String()}
    set {_uniqueStorage()._fsUnit = newValue}
  }
  /// Returns true if `fsUnit` has been explicitly set.
  public var hasFsUnit: Bool {return _storage._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}

  /// crypto 为加密图片对应的秘钥
  public var crypto: LarkNCExtensionPB_Entities_Crypto {
    get {return _storage._crypto ?? LarkNCExtensionPB_Entities_Crypto()}
    set {_uniqueStorage()._crypto = newValue}
  }
  /// Returns true if `crypto` has been explicitly set.
  public var hasCrypto: Bool {return _storage._crypto != nil}
  /// Clears the value of `crypto`. Subsequent reads from it will return its default value.
//  public mutating func clearCrypto() {_uniqueStorage()._crypto = nil}

  public var images: [LarkNCExtensionPB_Entities_ImageSetV2.ImageAttribute] {
    get {return _storage._images}
    set {_uniqueStorage()._images = newValue}
  }

  /// inline_preview 作为 low quality 图像在新版本图片消息里被携带，用来撑起气泡
  public var inlinePreview: Data {
    get {return _storage._inlinePreview ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._inlinePreview = newValue}
  }
  /// Returns true if `inlinePreview` has been explicitly set.
  public var hasInlinePreview: Bool {return _storage._inlinePreview != nil}
  /// Clears the value of `inlinePreview`. Subsequent reads from it will return its default value.
//  public mutating func clearInlinePreview() {_uniqueStorage()._inlinePreview = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public struct ImageAttribute {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var type: LarkNCExtensionPB_Entities_ImageCropType {
      get {return _storage._type ?? .origin}
      set {_uniqueStorage()._type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    public var hasType: Bool {return _storage._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {_uniqueStorage()._type = nil}

    public var attribute: LarkNCExtensionPB_Entities_ImageBaseAttribute {
      get {return _storage._attribute ?? LarkNCExtensionPB_Entities_ImageBaseAttribute()}
      set {_uniqueStorage()._attribute = newValue}
    }
    /// Returns true if `attribute` has been explicitly set.
//    public var hasAttribute: Bool {return _storage._attribute != nil}
    /// Clears the value of `attribute`. Subsequent reads from it will return its default value.
//    public mutating func clearAttribute() {_uniqueStorage()._attribute = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 直接透传到端使用，支持加密图片
//public struct LarkNCExtensionPB_Entities_ImageSetPassThrough {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var key: String {
//    get {return _storage._key ?? String()}
//    set {_uniqueStorage()._key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}
//
  /// 具备以上两者sdk/web即可拼出资源下载 url
//  public var fsUnit: String {
//    get {return _storage._fsUnit ?? String()}
//    set {_uniqueStorage()._fsUnit = newValue}
//  }
  /// Returns true if `fsUnit` has been explicitly set.
//  public var hasFsUnit: Bool {return _storage._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}
//
  /// 兼容用, 优先 fs_unit+key 拼 url
//  public var url: String {
//    get {return _storage._url ?? String()}
//    set {_uniqueStorage()._url = newValue}
//  }
  /// Returns true if `url` has been explicitly set.
//  public var hasURL: Bool {return _storage._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
//  public mutating func clearURL() {_uniqueStorage()._url = nil}
//
  /// crypto 为加密图片对应的秘钥
//  public var crypto: LarkNCExtensionPB_Entities_Crypto {
//    get {return _storage._crypto ?? LarkNCExtensionPB_Entities_Crypto()}
//    set {_uniqueStorage()._crypto = newValue}
//  }
  /// Returns true if `crypto` has been explicitly set.
//  public var hasCrypto: Bool {return _storage._crypto != nil}
  /// Clears the value of `crypto`. Subsequent reads from it will return its default value.
//  public mutating func clearCrypto() {_uniqueStorage()._crypto = nil}
//
  /// 端上使用场景数据，服务端忽略此数据，占位
//  public var fileType: Int32 {
//    get {return _storage._fileType ?? 0}
//    set {_uniqueStorage()._fileType = newValue}
//  }
  /// Returns true if `fileType` has been explicitly set.
//  public var hasFileType: Bool {return _storage._fileType != nil}
  /// Clears the value of `fileType`. Subsequent reads from it will return its default value.
//  public mutating func clearFileType() {_uniqueStorage()._fileType = nil}
//
//  public var width: Int32 {
//    get {return _storage._width ?? 0}
//    set {_uniqueStorage()._width = newValue}
//  }
  /// Returns true if `width` has been explicitly set.
//  public var hasWidth: Bool {return _storage._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
//  public mutating func clearWidth() {_uniqueStorage()._width = nil}
//
//  public var height: Int32 {
//    get {return _storage._height ?? 0}
//    set {_uniqueStorage()._height = newValue}
//  }
  /// Returns true if `height` has been explicitly set.
//  public var hasHeight: Bool {return _storage._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
//  public mutating func clearHeight() {_uniqueStorage()._height = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// 预览图信息: 目前查看文件夹内容时用以展示图片&视频的预览图
//public struct LarkNCExtensionPB_Entities_PreviewImageInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// image_key 与 fs_unit 总是成对出现
//  public var key: String {
//    get {return _storage._key ?? String()}
//    set {_uniqueStorage()._key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}
//
  /// fs_unit 标记了访问图片的 endpoint
//  public var fsUnit: String {
//    get {return _storage._fsUnit ?? String()}
//    set {_uniqueStorage()._fsUnit = newValue}
//  }
  /// Returns true if `fsUnit` has been explicitly set.
//  public var hasFsUnit: Bool {return _storage._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}
//
  /// crypto 为加密图片对应的秘钥
//  public var crypto: LarkNCExtensionPB_Entities_Crypto {
//    get {return _storage._crypto ?? LarkNCExtensionPB_Entities_Crypto()}
//    set {_uniqueStorage()._crypto = newValue}
//  }
  /// Returns true if `crypto` has been explicitly set.
//  public var hasCrypto: Bool {return _storage._crypto != nil}
  /// Clears the value of `crypto`. Subsequent reads from it will return its default value.
//  public mutating func clearCrypto() {_uniqueStorage()._crypto = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

public struct LarkNCExtensionPB_Entities_Crypto {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var type: LarkNCExtensionPB_Entities_Crypto.TypeEnum {
    get {return _storage._type ?? .unknown}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}

  public var cipher: LarkNCExtensionPB_Entities_Cipher {
    get {return _storage._cipher ?? LarkNCExtensionPB_Entities_Cipher()}
    set {_uniqueStorage()._cipher = newValue}
  }
  /// Returns true if `cipher` has been explicitly set.
//  public var hasCipher: Bool {return _storage._cipher != nil}
  /// Clears the value of `cipher`. Subsequent reads from it will return its default value.
//  public mutating func clearCipher() {_uniqueStorage()._cipher = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  /// 需要考虑与 rpc-interface im/constants.thrift 的 CipherType 对应
  public enum TypeEnum: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case aes256Gcm // = 1
    case aesCtr // = 2
    case cryptoSdkUnified // = 3
    case cryptoSdkDowngrade // = 4
    case cryptoSdkThirdparty // = 5
    case sm4128 // = 6

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .aes256Gcm
      case 2: self = .aesCtr
      case 3: self = .cryptoSdkUnified
      case 4: self = .cryptoSdkDowngrade
      case 5: self = .cryptoSdkThirdparty
      case 6: self = .sm4128
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .aes256Gcm: return 1
      case .aesCtr: return 2
      case .cryptoSdkUnified: return 3
      case .cryptoSdkDowngrade: return 4
      case .cryptoSdkThirdparty: return 5
      case .sm4128: return 6
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_Crypto.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_Cipher {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 密钥
  public var secret: Data {
    get {return _secret ?? LarkHTTP.Internal.emptyData}
    set {_secret = newValue}
  }
  /// Returns true if `secret` has been explicitly set.
  public var hasSecret: Bool {return self._secret != nil}
  /// Clears the value of `secret`. Subsequent reads from it will return its default value.
//  public mutating func clearSecret() {self._secret = nil}

  public var nonce: Data {
    get {return _nonce ?? LarkHTTP.Internal.emptyData}
    set {_nonce = newValue}
  }
  /// Returns true if `nonce` has been explicitly set.
//  public var hasNonce: Bool {return self._nonce != nil}
  /// Clears the value of `nonce`. Subsequent reads from it will return its default value.
//  public mutating func clearNonce() {self._nonce = nil}

  public var additionalData: Data {
    get {return _additionalData ?? LarkHTTP.Internal.emptyData}
    set {_additionalData = newValue}
  }
  /// Returns true if `additionalData` has been explicitly set.
//  public var hasAdditionalData: Bool {return self._additionalData != nil}
  /// Clears the value of `additionalData`. Subsequent reads from it will return its default value.
//  public mutating func clearAdditionalData() {self._additionalData = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _secret: Data? = nil
  fileprivate var _nonce: Data? = nil
  fileprivate var _additionalData: Data? = nil
}

/// deprecated，使用ImageTranslationAbilityV2
public struct LarkNCExtensionPB_Entities_ImageTranslationAbility {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var canTranslate: Bool {
    get {return _canTranslate ?? false}
    set {_canTranslate = newValue}
  }
  /// Returns true if `canTranslate` has been explicitly set.
//  public var hasCanTranslate: Bool {return self._canTranslate != nil}
  /// Clears the value of `canTranslate`. Subsequent reads from it will return its default value.
//  public mutating func clearCanTranslate() {self._canTranslate = nil}

  public var srcLanguage: [String] = []

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _canTranslate: Bool? = nil
}

public struct LarkNCExtensionPB_Entities_ImageTranslationAbilityV2 {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var canTranslate: Bool {
    get {return _canTranslate ?? false}
    set {_canTranslate = newValue}
  }
  /// Returns true if `canTranslate` has been explicitly set.
//  public var hasCanTranslate: Bool {return self._canTranslate != nil}
  /// Clears the value of `canTranslate`. Subsequent reads from it will return its default value.
//  public mutating func clearCanTranslate() {self._canTranslate = nil}

  public var srcLanguage: [String] = []

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _canTranslate: Bool? = nil
}

public struct LarkNCExtensionPB_Entities_UrlPreviewHangPoint {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var url: String {
    get {return _url ?? String()}
    set {_url = newValue}
  }
  /// Returns true if `url` has been explicitly set.
  public var hasURL: Bool {return self._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
//  public mutating func clearURL() {self._url = nil}

  public var previewID: String {
    get {return _previewID ?? String()}
    set {_previewID = newValue}
  }
  /// Returns true if `previewID` has been explicitly set.
//  public var hasPreviewID: Bool {return self._previewID != nil}
  /// Clears the value of `previewID`. Subsequent reads from it will return its default value.
//  public mutating func clearPreviewID() {self._previewID = nil}

  /// 是否需要本地预览，默认不需要
  public var needLocalPreview: Bool {
    get {return _needLocalPreview ?? false}
    set {_needLocalPreview = newValue}
  }
  /// Returns true if `needLocalPreview` has been explicitly set.
//  public var hasNeedLocalPreview: Bool {return self._needLocalPreview != nil}
  /// Clears the value of `needLocalPreview`. Subsequent reads from it will return its default value.
//  public mutating func clearNeedLocalPreview() {self._needLocalPreview = nil}

  /// 是否为懒加载。目前只有消息使用，如果是懒加载则在用户进会话拉消息时再加载预览
  public var isLazyLoad: Bool {
    get {return _isLazyLoad ?? false}
    set {_isLazyLoad = newValue}
  }
  /// Returns true if `isLazyLoad` has been explicitly set.
//  public var hasIsLazyLoad: Bool {return self._isLazyLoad != nil}
  /// Clears the value of `isLazyLoad`. Subsequent reads from it will return its default value.
//  public mutating func clearIsLazyLoad() {self._isLazyLoad = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _url: String? = nil
  fileprivate var _previewID: String? = nil
  fileprivate var _needLocalPreview: Bool? = nil
  fileprivate var _isLazyLoad: Bool? = nil
}

/// i18n_*_key -> value;value可能是直接显示的字符串或者图片在某个locale 下的Key
//public struct LarkNCExtensionPB_Entities_I18nTemplates {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var i18NTemplates: Dictionary<String,String> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

//public struct LarkNCExtensionPB_Entities_UrlPreviewEntity {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 宿主ID，IM场景下对应message_id
//  public var sourceID: String {
//    get {return _storage._sourceID ?? String()}
//    set {_uniqueStorage()._sourceID = newValue}
//  }
  /// Returns true if `sourceID` has been explicitly set.
//  public var hasSourceID: Bool {return _storage._sourceID != nil}
  /// Clears the value of `sourceID`. Subsequent reads from it will return its default value.
//  public mutating func clearSourceID() {_uniqueStorage()._sourceID = nil}
//
  /// preview_entity 唯一标识
//  public var previewID: String {
//    get {return _storage._previewID ?? String()}
//    set {_uniqueStorage()._previewID = newValue}
//  }
  /// Returns true if `previewID` has been explicitly set.
//  public var hasPreviewID: Bool {return _storage._previewID != nil}
  /// Clears the value of `previewID`. Subsequent reads from it will return its default value.
//  public mutating func clearPreviewID() {_uniqueStorage()._previewID = nil}
//
  /// default 表示非国际化消息，sdk 需要用local 做主键存储，不能设置optional
//  public var locale: String {
//    get {return _storage._locale ?? "default"}
//    set {_uniqueStorage()._locale = newValue}
//  }
  /// Returns true if `locale` has been explicitly set.
//  public var hasLocale: Bool {return _storage._locale != nil}
  /// Clears the value of `locale`. Subsequent reads from it will return its default value.
//  public mutating func clearLocale() {_uniqueStorage()._locale = nil}
//
  /// locale_i18n_templates[locale][i18n_icon_key] -> icon_key
//  public var i18NIconKey: String {
//    get {return _storage._i18NIconKey ?? String()}
//    set {_uniqueStorage()._i18NIconKey = newValue}
//  }
  /// Returns true if `i18NIconKey` has been explicitly set.
//  public var hasI18NIconKey: Bool {return _storage._i18NIconKey != nil}
  /// Clears the value of `i18NIconKey`. Subsequent reads from it will return its default value.
//  public mutating func clearI18NIconKey() {_uniqueStorage()._i18NIconKey = nil}
//
  ///icon_key + fs_unit -> icon
//  public var fsUnit: String {
//    get {return _storage._fsUnit ?? String()}
//    set {_uniqueStorage()._fsUnit = newValue}
//  }
  /// Returns true if `fsUnit` has been explicitly set.
//  public var hasFsUnit: Bool {return _storage._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}
//
  ///locale_i18n_templates[locale][i18n_title_key] -> title
//  public var i18NTitleKey: String {
//    get {return _storage._i18NTitleKey ?? String()}
//    set {_uniqueStorage()._i18NTitleKey = newValue}
//  }
  /// Returns true if `i18NTitleKey` has been explicitly set.
//  public var hasI18NTitleKey: Bool {return _storage._i18NTitleKey != nil}
  /// Clears the value of `i18NTitleKey`. Subsequent reads from it will return its default value.
//  public mutating func clearI18NTitleKey() {_uniqueStorage()._i18NTitleKey = nil}
//
  ///locale_i18n_templates[locale][i18n_tag_key] -> tag
//  public var i18NTagKey: String {
//    get {return _storage._i18NTagKey ?? String()}
//    set {_uniqueStorage()._i18NTagKey = newValue}
//  }
  /// Returns true if `i18NTagKey` has been explicitly set.
//  public var hasI18NTagKey: Bool {return _storage._i18NTagKey != nil}
  /// Clears the value of `i18NTagKey`. Subsequent reads from it will return its default value.
//  public mutating func clearI18NTagKey() {_uniqueStorage()._i18NTagKey = nil}
//
//  public var localeI18NTemplates: Dictionary<String,LarkNCExtensionPB_Entities_I18nTemplates> {
//    get {return _storage._localeI18NTemplates}
//    set {_uniqueStorage()._localeI18NTemplates = newValue}
//  }
//
//  public var url: LarkNCExtensionPB_Entities_URL {
//    get {return _storage._url ?? LarkNCExtensionPB_Entities_URL()}
//    set {_uniqueStorage()._url = newValue}
//  }
  /// Returns true if `url` has been explicitly set.
//  public var hasURL: Bool {return _storage._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
//  public mutating func clearURL() {_uniqueStorage()._url = nil}
//
  ///如果包较大，通知端上主动来拉
//  public var needPull: Bool {
//    get {return _storage._needPull ?? false}
//    set {_uniqueStorage()._needPull = newValue}
//  }
  /// Returns true if `needPull` has been explicitly set.
//  public var hasNeedPull: Bool {return _storage._needPull != nil}
  /// Clears the value of `needPull`. Subsequent reads from it will return its default value.
//  public mutating func clearNeedPull() {_uniqueStorage()._needPull = nil}
//
  /// 端上比较预览版本
//  public var version: Int32 {
//    get {return _storage._version ?? 0}
//    set {_uniqueStorage()._version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {_uniqueStorage()._version = nil}
//
  /// 具体实体信息有业务方提供，IM侧不理解
//  public var body: Data {
//    get {return _storage._body ?? LarkHTTP.Internal.emptyData}
//    set {_uniqueStorage()._body = newValue}
//  }
  /// Returns true if `body` has been explicitly set.
//  public var hasBody: Bool {return _storage._body != nil}
  /// Clears the value of `body`. Subsequent reads from it will return its default value.
//  public mutating func clearBody() {_uniqueStorage()._body = nil}
//
  /// 如果有actions则对应响应的UrlPreviewAction实体
//  public var actions: Dictionary<String,LarkNCExtensionPB_Entities_UrlPreviewAction> {
//    get {return _storage._actions}
//    set {_uniqueStorage()._actions = newValue}
//  }
//
//  public var previewBody: LarkNCExtensionPB_Entities_URLPreviewBody {
//    get {return _storage._previewBody ?? LarkNCExtensionPB_Entities_URLPreviewBody()}
//    set {_uniqueStorage()._previewBody = newValue}
//  }
  /// Returns true if `previewBody` has been explicitly set.
//  public var hasPreviewBody: Bool {return _storage._previewBody != nil}
  /// Clears the value of `previewBody`. Subsequent reads from it will return its default value.
//  public mutating func clearPreviewBody() {_uniqueStorage()._previewBody = nil}
//
  /// 预览过期时间，0 相当于永不过期
//  public var expires: Int64 {
//    get {return _storage._expires ?? 0}
//    set {_uniqueStorage()._expires = newValue}
//  }
  /// Returns true if `expires` has been explicitly set.
//  public var hasExpires: Bool {return _storage._expires != nil}
  /// Clears the value of `expires`. Subsequent reads from it will return its default value.
//  public mutating func clearExpires() {_uniqueStorage()._expires = nil}
//
  /// key: i18n_icon_key, value: 加密图片
  /// 在增加该字段之前，加密的 inline icon 是通过 preview body 携带到本地的
//  public var i18NIcons: Dictionary<String,LarkNCExtensionPB_Entities_ImageSetV2> {
//    get {return _storage._i18NIcons}
//    set {_uniqueStorage()._i18NIcons = newValue}
//  }
//
  /// 优先级：ud_icon > i18n_icon_key
//  public var udIcon: LarkNCExtensionPB_Entities_UDIcon {
//    get {return _storage._udIcon ?? LarkNCExtensionPB_Entities_UDIcon()}
//    set {_uniqueStorage()._udIcon = newValue}
//  }
  /// Returns true if `udIcon` has been explicitly set.
//  public var hasUdIcon: Bool {return _storage._udIcon != nil}
  /// Clears the value of `udIcon`. Subsequent reads from it will return its default value.
//  public mutating func clearUdIcon() {_uniqueStorage()._udIcon = nil}
//
  /// title字体颜色，icon使用title_text_color染色
//  public var titleTextColor: LarkNCExtensionPB_Entities_ThemeColor {
//    get {return _storage._titleTextColor ?? LarkNCExtensionPB_Entities_ThemeColor()}
//    set {_uniqueStorage()._titleTextColor = newValue}
//  }
  /// Returns true if `titleTextColor` has been explicitly set.
//  public var hasTitleTextColor: Bool {return _storage._titleTextColor != nil}
  /// Clears the value of `titleTextColor`. Subsequent reads from it will return its default value.
//  public mutating func clearTitleTextColor() {_uniqueStorage()._titleTextColor = nil}
//
  /// tag字体颜色
//  public var tagTextColor: LarkNCExtensionPB_Entities_ThemeColor {
//    get {return _storage._tagTextColor ?? LarkNCExtensionPB_Entities_ThemeColor()}
//    set {_uniqueStorage()._tagTextColor = newValue}
//  }
  /// Returns true if `tagTextColor` has been explicitly set.
//  public var hasTagTextColor: Bool {return _storage._tagTextColor != nil}
  /// Clears the value of `tagTextColor`. Subsequent reads from it will return its default value.
//  public mutating func clearTagTextColor() {_uniqueStorage()._tagTextColor = nil}
//
  /// tag背景色
//  public var tagBgColor: LarkNCExtensionPB_Entities_ThemeColor {
//    get {return _storage._tagBgColor ?? LarkNCExtensionPB_Entities_ThemeColor()}
//    set {_uniqueStorage()._tagBgColor = newValue}
//  }
  /// Returns true if `tagBgColor` has been explicitly set.
//  public var hasTagBgColor: Bool {return _storage._tagBgColor != nil}
  /// Clears the value of `tagBgColor`. Subsequent reads from it will return its default value.
//  public mutating func clearTagBgColor() {_uniqueStorage()._tagBgColor = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_UrlPreviewAction {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var url: String {
//    get {return _storage._url ?? String()}
//    set {_uniqueStorage()._url = newValue}
//  }
  /// Returns true if `url` has been explicitly set.
//  public var hasURL: Bool {return _storage._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
//  public mutating func clearURL() {_uniqueStorage()._url = nil}
//
//  public var method: LarkNCExtensionPB_Entities_UrlPreviewAction.Method {
//    get {return _storage._method ?? .get}
//    set {_uniqueStorage()._method = newValue}
//  }
  /// Returns true if `method` has been explicitly set.
//  public var hasMethod: Bool {return _storage._method != nil}
  /// Clears the value of `method`. Subsequent reads from it will return its default value.
//  public mutating func clearMethod() {_uniqueStorage()._method = nil}
//
  /// GET POST 使用
  /// 废弃⚠️：替换为oneof Action结构
//  public var parameters: LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters {
//    get {return _storage._parameters ?? LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters()}
//    set {_uniqueStorage()._parameters = newValue}
//  }
  /// Returns true if `parameters` has been explicitly set.
//  public var hasParameters: Bool {return _storage._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
//  public mutating func clearParameters() {_uniqueStorage()._parameters = nil}
//
  /// LARK_COMMAND 使用,用于定位服务lb, 丢到Packet.cmd中
  /// 废弃⚠️：替换为oneof Action结构
//  public var cmd: LarkNCExtensionPB_Improto_Command {
//    get {return _storage._cmd ?? .ack}
//    set {_uniqueStorage()._cmd = newValue}
//  }
  /// Returns true if `cmd` has been explicitly set.
//  public var hasCmd: Bool {return _storage._cmd != nil}
  /// Clears the value of `cmd`. Subsequent reads from it will return its default value.
//  public mutating func clearCmd() {_uniqueStorage()._cmd = nil}
//
  /// LARK_COMMAND 通用packet, 反序列化后丢到Packet.payload中
  /// 废弃⚠️：替换为oneof Action结构
//  public var packet: LarkNCExtensionPB_Entities_CardActionPacket {
//    get {return _storage._packet ?? LarkNCExtensionPB_Entities_CardActionPacket()}
//    set {_uniqueStorage()._packet = newValue}
//  }
  /// Returns true if `packet` has been explicitly set.
//  public var hasPacket: Bool {return _storage._packet != nil}
  /// Clears the value of `packet`. Subsequent reads from it will return its default value.
//  public mutating func clearPacket() {_uniqueStorage()._packet = nil}
//
  /// OPEN_URL使用
  /// 废弃⚠️：替换为oneof Action结构
//  public var openURL: LarkNCExtensionPB_Entities_URL {
//    get {return _storage._openURL ?? LarkNCExtensionPB_Entities_URL()}
//    set {_uniqueStorage()._openURL = newValue}
//  }
  /// Returns true if `openURL` has been explicitly set.
//  public var hasOpenURL: Bool {return _storage._openURL != nil}
  /// Clears the value of `openURL`. Subsequent reads from it will return its default value.
//  public mutating func clearOpenURL() {_uniqueStorage()._openURL = nil}
//
  /// Action升级使用, 可降级成其他action
//  public var fallbackActionID: String {
//    get {return _storage._fallbackActionID ?? String()}
//    set {_uniqueStorage()._fallbackActionID = newValue}
//  }
  /// Returns true if `fallbackActionID` has been explicitly set.
//  public var hasFallbackActionID: Bool {return _storage._fallbackActionID != nil}
  /// Clears the value of `fallbackActionID`. Subsequent reads from it will return its default value.
//  public mutating func clearFallbackActionID() {_uniqueStorage()._fallbackActionID = nil}
//
//  public var action: OneOf_Action? {
//    get {return _storage._action}
//    set {_uniqueStorage()._action = newValue}
//  }
//
//  public var get: LarkNCExtensionPB_Entities_UrlPreviewAction.GetAction {
//    get {
//      if case .get(let v)? = _storage._action {return v}
//      return LarkNCExtensionPB_Entities_UrlPreviewAction.GetAction()
//    }
//    set {_uniqueStorage()._action = .get(newValue)}
//  }
//
//  public var post: LarkNCExtensionPB_Entities_UrlPreviewAction.PostAction {
//    get {
//      if case .post(let v)? = _storage._action {return v}
//      return LarkNCExtensionPB_Entities_UrlPreviewAction.PostAction()
//    }
//    set {_uniqueStorage()._action = .post(newValue)}
//  }
//
//  public var command: LarkNCExtensionPB_Entities_UrlPreviewAction.LarkCommandAction {
//    get {
//      if case .command(let v)? = _storage._action {return v}
//      return LarkNCExtensionPB_Entities_UrlPreviewAction.LarkCommandAction()
//    }
//    set {_uniqueStorage()._action = .command(newValue)}
//  }
//
//  public var openURLV2: LarkNCExtensionPB_Entities_UrlPreviewAction.OpenURLAction {
//    get {
//      if case .openURLV2(let v)? = _storage._action {return v}
//      return LarkNCExtensionPB_Entities_UrlPreviewAction.OpenURLAction()
//    }
//    set {_uniqueStorage()._action = .openURLV2(newValue)}
//  }
//
//  public var switchState: LarkNCExtensionPB_Entities_UrlPreviewAction.SwitchStateAction {
//    get {
//      if case .switchState(let v)? = _storage._action {return v}
//      return LarkNCExtensionPB_Entities_UrlPreviewAction.SwitchStateAction()
//    }
//    set {_uniqueStorage()._action = .switchState(newValue)}
//  }
//
//  public var showToast: LarkNCExtensionPB_Entities_UrlPreviewAction.ShowToastAction {
//    get {
//      if case .showToast(let v)? = _storage._action {return v}
//      return LarkNCExtensionPB_Entities_UrlPreviewAction.ShowToastAction()
//    }
//    set {_uniqueStorage()._action = .showToast(newValue)}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum OneOf_Action: Equatable {
//    case get(LarkNCExtensionPB_Entities_UrlPreviewAction.GetAction)
//    case post(LarkNCExtensionPB_Entities_UrlPreviewAction.PostAction)
//    case command(LarkNCExtensionPB_Entities_UrlPreviewAction.LarkCommandAction)
//    case openURLV2(LarkNCExtensionPB_Entities_UrlPreviewAction.OpenURLAction)
//    case switchState(LarkNCExtensionPB_Entities_UrlPreviewAction.SwitchStateAction)
//    case showToast(LarkNCExtensionPB_Entities_UrlPreviewAction.ShowToastAction)
//
//  #if !swift(>=4.1)
//    public static func ==(lhs: LarkNCExtensionPB_Entities_UrlPreviewAction.OneOf_Action, rhs: LarkNCExtensionPB_Entities_UrlPreviewAction.OneOf_Action) -> Bool {
//      switch (lhs, rhs) {
//      case (.get(let l), .get(let r)): return l == r
//      case (.post(let l), .post(let r)): return l == r
//      case (.command(let l), .command(let r)): return l == r
//      case (.openURLV2(let l), .openURLV2(let r)): return l == r
//      case (.switchState(let l), .switchState(let r)): return l == r
//      case (.showToast(let l), .showToast(let r)): return l == r
//      default: return false
//      }
//    }
//  #endif
//  }
//
//  public enum Method: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case get // = 1
//    case post // = 2
//    case larkCommand // = 3
//    case openURL // = 4
//    case switchState // = 5
//    case showToast // = 6
//
//    public init() {
//      self = .get
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .get
//      case 2: self = .post
//      case 3: self = .larkCommand
//      case 4: self = .openURL
//      case 5: self = .switchState
//      case 6: self = .showToast
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .get: return 1
//      case .post: return 2
//      case .larkCommand: return 3
//      case .openURL: return 4
//      case .switchState: return 5
//      case .showToast: return 6
//      }
//    }
//
//  }
//
//  public struct Parameters {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 服务端带过来的数据
//    public var parameters: Dictionary<String,String> = [:]
//
//    public var userID: String {
//      get {return _userID ?? String()}
//      set {_userID = newValue}
//    }
    /// Returns true if `userID` has been explicitly set.
//    public var hasUserID: Bool {return self._userID != nil}
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
//    public mutating func clearUserID() {self._userID = nil}
//
//    public var sourceID: String {
//      get {return _sourceID ?? String()}
//      set {_sourceID = newValue}
//    }
    /// Returns true if `sourceID` has been explicitly set.
//    public var hasSourceID: Bool {return self._sourceID != nil}
    /// Clears the value of `sourceID`. Subsequent reads from it will return its default value.
//    public mutating func clearSourceID() {self._sourceID = nil}
//
//    public var previewID: String {
//      get {return _previewID ?? String()}
//      set {_previewID = newValue}
//    }
    /// Returns true if `previewID` has been explicitly set.
//    public var hasPreviewID: Bool {return self._previewID != nil}
    /// Clears the value of `previewID`. Subsequent reads from it will return its default value.
//    public mutating func clearPreviewID() {self._previewID = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _userID: String? = nil
//    fileprivate var _sourceID: String? = nil
//    fileprivate var _previewID: String? = nil
//  }
//
//  public struct GetAction {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// Action对应的已有的参数
//    public var parameters: LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters {
//      get {return _storage._parameters ?? LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters()}
//      set {_uniqueStorage()._parameters = newValue}
//    }
    /// Returns true if `parameters` has been explicitly set.
//    public var hasParameters: Bool {return _storage._parameters != nil}
    /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
//    public mutating func clearParameters() {_uniqueStorage()._parameters = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct PostAction {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// Action对应的已有的参数
//    public var parameters: LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters {
//      get {return _storage._parameters ?? LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters()}
//      set {_uniqueStorage()._parameters = newValue}
//    }
    /// Returns true if `parameters` has been explicitly set.
//    public var hasParameters: Bool {return _storage._parameters != nil}
    /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
//    public mutating func clearParameters() {_uniqueStorage()._parameters = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct LarkCommandAction {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// LARK_COMMAND 使用,用于定位服务lb, 丢到Packet.cmd中
//    public var cmd: LarkNCExtensionPB_Improto_Command {
//      get {return _storage._cmd ?? .ack}
//      set {_uniqueStorage()._cmd = newValue}
//    }
    /// Returns true if `cmd` has been explicitly set.
//    public var hasCmd: Bool {return _storage._cmd != nil}
    /// Clears the value of `cmd`. Subsequent reads from it will return its default value.
//    public mutating func clearCmd() {_uniqueStorage()._cmd = nil}
//
    /// LARK_COMMAND 通用packet, 反序列化后丢到Packet.payload中
//    public var packet: LarkNCExtensionPB_Entities_CardActionPacket {
//      get {return _storage._packet ?? LarkNCExtensionPB_Entities_CardActionPacket()}
//      set {_uniqueStorage()._packet = newValue}
//    }
    /// Returns true if `packet` has been explicitly set.
//    public var hasPacket: Bool {return _storage._packet != nil}
    /// Clears the value of `packet`. Subsequent reads from it will return its default value.
//    public mutating func clearPacket() {_uniqueStorage()._packet = nil}
//
    /// Action对应的已有的参数
//    public var parameters: LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters {
//      get {return _storage._parameters ?? LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters()}
//      set {_uniqueStorage()._parameters = newValue}
//    }
    /// Returns true if `parameters` has been explicitly set.
//    public var hasParameters: Bool {return _storage._parameters != nil}
    /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
//    public mutating func clearParameters() {_uniqueStorage()._parameters = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct OpenURLAction {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// OPEN_URL使用
//    public var openURL: LarkNCExtensionPB_Entities_URL {
//      get {return _storage._openURL ?? LarkNCExtensionPB_Entities_URL()}
//      set {_uniqueStorage()._openURL = newValue}
//    }
    /// Returns true if `openURL` has been explicitly set.
//    public var hasOpenURL: Bool {return _storage._openURL != nil}
    /// Clears the value of `openURL`. Subsequent reads from it will return its default value.
//    public mutating func clearOpenURL() {_uniqueStorage()._openURL = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct SwitchStateAction {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var nextStateID: String {
//      get {return _nextStateID ?? String()}
//      set {_nextStateID = newValue}
//    }
    /// Returns true if `nextStateID` has been explicitly set.
//    public var hasNextStateID: Bool {return self._nextStateID != nil}
    /// Clears the value of `nextStateID`. Subsequent reads from it will return its default value.
//    public mutating func clearNextStateID() {self._nextStateID = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _nextStateID: String? = nil
//  }
//
//  public struct ShowToastAction {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var type: LarkNCExtensionPB_Entities_UrlPreviewAction.ShowToastAction.ToastType {
//      get {return _type ?? .info}
//      set {_type = newValue}
//    }
    /// Returns true if `type` has been explicitly set.
//    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {self._type = nil}
//
//    public var content: String {
//      get {return _content ?? String()}
//      set {_content = newValue}
//    }
    /// Returns true if `content` has been explicitly set.
//    public var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
//    public mutating func clearContent() {self._content = nil}
//
    /// 默认使用客户端toast时长
//    public var duration: Int32 {
//      get {return _duration ?? 0}
//      set {_duration = newValue}
//    }
    /// Returns true if `duration` has been explicitly set.
//    public var hasDuration: Bool {return self._duration != nil}
    /// Clears the value of `duration`. Subsequent reads from it will return its default value.
//    public mutating func clearDuration() {self._duration = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum ToastType: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case success // = 1
//      case error // = 2
//      case info // = 3
//      case warning // = 4
//
//      public init() {
//        self = .success
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 1: self = .success
//        case 2: self = .error
//        case 3: self = .info
//        case 4: self = .warning
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .success: return 1
//        case .error: return 2
//        case .info: return 3
//        case .warning: return 4
//        }
//      }
//
//    }
//
//    public init() {}
//
//    fileprivate var _type: LarkNCExtensionPB_Entities_UrlPreviewAction.ShowToastAction.ToastType? = nil
//    fileprivate var _content: String? = nil
//    fileprivate var _duration: Int32? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_UrlPreviewAction.Method: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_URLPreviewComponents {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var rootIds: [String] = []
//
//  public var elements: Dictionary<String,LarkNCExtensionPB_Entities_URLPreviewComponent> = [:]
//
//  public var imageIds: [String] = []
//
//  public var atIds: [String] = []
//
//  public var buttonIds: [String] = []
//
//  public var richtextIds: [String] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

//public struct LarkNCExtensionPB_Entities_URLPreviewBody {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var components: LarkNCExtensionPB_Entities_URLPreviewComponents {
//    get {return _storage._components ?? LarkNCExtensionPB_Entities_URLPreviewComponents()}
//    set {_uniqueStorage()._components = newValue}
//  }
  /// Returns true if `components` has been explicitly set.
//  public var hasComponents: Bool {return _storage._components != nil}
  /// Clears the value of `components`. Subsequent reads from it will return its default value.
//  public mutating func clearComponents() {_uniqueStorage()._components = nil}
//
//  public var actions: Dictionary<String,LarkNCExtensionPB_Entities_UrlPreviewAction> {
//    get {return _storage._actions}
//    set {_uniqueStorage()._actions = newValue}
//  }
//
//  public var cardURL: LarkNCExtensionPB_Entities_URL {
//    get {return _storage._cardURL ?? LarkNCExtensionPB_Entities_URL()}
//    set {_uniqueStorage()._cardURL = newValue}
//  }
  /// Returns true if `cardURL` has been explicitly set.
//  public var hasCardURL: Bool {return _storage._cardURL != nil}
  /// Clears the value of `cardURL`. Subsequent reads from it will return its default value.
//  public mutating func clearCardURL() {_uniqueStorage()._cardURL = nil}
//
  /// current state id
//  public var currentStateID: String {
//    get {return _storage._currentStateID ?? String()}
//    set {_uniqueStorage()._currentStateID = newValue}
//  }
  /// Returns true if `currentStateID` has been explicitly set.
//  public var hasCurrentStateID: Bool {return _storage._currentStateID != nil}
  /// Clears the value of `currentStateID`. Subsequent reads from it will return its default value.
//  public mutating func clearCurrentStateID() {_uniqueStorage()._currentStateID = nil}
//
  /// key: state id
//  public var states: Dictionary<String,LarkNCExtensionPB_Entities_URLPreviewState> {
//    get {return _storage._states}
//    set {_uniqueStorage()._states = newValue}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_ThemeColor {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var token: String {
//    get {return _storage._token ?? String()}
//    set {_uniqueStorage()._token = newValue}
//  }
  /// Returns true if `token` has been explicitly set.
//  public var hasToken: Bool {return _storage._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
//  public mutating func clearToken() {_uniqueStorage()._token = nil}
//
//  public var key: LarkNCExtensionPB_Entities_ThemeColor.Key {
//    get {return _storage._key ?? LarkNCExtensionPB_Entities_ThemeColor.Key()}
//    set {_uniqueStorage()._key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}
//
  /// #FFFFFFFF
//  public var value: UInt32 {
//    get {return _storage._value ?? 0}
//    set {_uniqueStorage()._value = newValue}
//  }
  /// Returns true if `value` has been explicitly set.
//  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
//  public mutating func clearValue() {_uniqueStorage()._value = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum KeyType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//
    /// normal
//    case n // = 0
//
    /// Blue
//    case b // = 1
//
    /// White
//    case w // = 2
//
    /// Turquoise
//    case t // = 3
//
    /// Green
//    case g // = 4
//
    /// Lime
//    case l // = 5
//
    /// Yellow
//    case y // = 6
//
    /// Sun Flower
//    case s // = 7
//
    /// Orange
//    case o // = 8
//
    /// Red
//    case r // = 9
//
    /// Carmine
//    case c // = 10
//
    /// Violet
//    case v // = 11
//
    /// Purple
//    case p // = 12
//
    /// Indigo
//    case i // = 13
//
    /// static-white
//    case primaryOnPrimaryFill // = 14
//
//    public init() {
//      self = .n
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .n
//      case 1: self = .b
//      case 2: self = .w
//      case 3: self = .t
//      case 4: self = .g
//      case 5: self = .l
//      case 6: self = .y
//      case 7: self = .s
//      case 8: self = .o
//      case 9: self = .r
//      case 10: self = .c
//      case 11: self = .v
//      case 12: self = .p
//      case 13: self = .i
//      case 14: self = .primaryOnPrimaryFill
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .n: return 0
//      case .b: return 1
//      case .w: return 2
//      case .t: return 3
//      case .g: return 4
//      case .l: return 5
//      case .y: return 6
//      case .s: return 7
//      case .o: return 8
//      case .r: return 9
//      case .c: return 10
//      case .v: return 11
//      case .p: return 12
//      case .i: return 13
//      case .primaryOnPrimaryFill: return 14
//      }
//    }
//
//  }
//
//  public struct Key {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var type: LarkNCExtensionPB_Entities_ThemeColor.KeyType {
//      get {return _type ?? .n}
//      set {_type = newValue}
//    }
    /// Returns true if `type` has been explicitly set.
//    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {self._type = nil}
//
    /// [0, 1000]
//    public var value: UInt32 {
//      get {return _value ?? 0}
//      set {_value = newValue}
//    }
    /// Returns true if `value` has been explicitly set.
//    public var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
//    public mutating func clearValue() {self._value = nil}
//
    /// [0, 100]
//    public var alpha: UInt32 {
//      get {return _alpha ?? 100}
//      set {_alpha = newValue}
//    }
    /// Returns true if `alpha` has been explicitly set.
//    public var hasAlpha: Bool {return self._alpha != nil}
    /// Clears the value of `alpha`. Subsequent reads from it will return its default value.
//    public mutating func clearAlpha() {self._alpha = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _type: LarkNCExtensionPB_Entities_ThemeColor.KeyType? = nil
//    fileprivate var _value: UInt32? = nil
//    fileprivate var _alpha: UInt32? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_ThemeColor.KeyType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_Gradient {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var type: LarkNCExtensionPB_Entities_Gradient.TypeEnum {
//    get {return _storage._type ?? .linear}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
//  public var content: OneOf_Content? {
//    get {return _storage._content}
//    set {_uniqueStorage()._content = newValue}
//  }
//
//  public var linear: LarkNCExtensionPB_Entities_Gradient.Linear {
//    get {
//      if case .linear(let v)? = _storage._content {return v}
//      return LarkNCExtensionPB_Entities_Gradient.Linear()
//    }
//    set {_uniqueStorage()._content = .linear(newValue)}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum OneOf_Content: Equatable {
//    case linear(LarkNCExtensionPB_Entities_Gradient.Linear)
//
//  #if !swift(>=4.1)
//    public static func ==(lhs: LarkNCExtensionPB_Entities_Gradient.OneOf_Content, rhs: LarkNCExtensionPB_Entities_Gradient.OneOf_Content) -> Bool {
//      switch (lhs, rhs) {
//      case (.linear(let l), .linear(let r)): return l == r
//      }
//    }
//  #endif
//  }
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case linear // = 0
//
//    public init() {
//      self = .linear
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .linear
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .linear: return 0
//      }
//    }
//
//  }
//
//  public struct Linear {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var deg: Int32 {
//      get {return _deg ?? 0}
//      set {_deg = newValue}
//    }
    /// Returns true if `deg` has been explicitly set.
//    public var hasDeg: Bool {return self._deg != nil}
    /// Clears the value of `deg`. Subsequent reads from it will return its default value.
//    public mutating func clearDeg() {self._deg = nil}
//
//    public var colors: [Int32] = []
//
    /// 32-bits convert to color #FFFFFFFF.
//    public var colorsV2: [UInt32] = []
//
//    public var colorsV3: [LarkNCExtensionPB_Entities_ThemeColor] = []
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _deg: Int32? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_Gradient.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_Border {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// border width
//  public var width: Float {
//    get {return _storage._width ?? 0}
//    set {_uniqueStorage()._width = newValue}
//  }
  /// Returns true if `width` has been explicitly set.
//  public var hasWidth: Bool {return _storage._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
//  public mutating func clearWidth() {_uniqueStorage()._width = nil}
//
  /// border color
//  public var color: UInt32 {
//    get {return _storage._color ?? 0}
//    set {_uniqueStorage()._color = newValue}
//  }
  /// Returns true if `color` has been explicitly set.
//  public var hasColor: Bool {return _storage._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
//  public mutating func clearColor() {_uniqueStorage()._color = nil}
//
  /// corner radius
//  public var cornerRadius: Float {
//    get {return _storage._cornerRadius ?? 0}
//    set {_uniqueStorage()._cornerRadius = newValue}
//  }
  /// Returns true if `cornerRadius` has been explicitly set.
//  public var hasCornerRadius: Bool {return _storage._cornerRadius != nil}
  /// Clears the value of `cornerRadius`. Subsequent reads from it will return its default value.
//  public mutating func clearCornerRadius() {_uniqueStorage()._cornerRadius = nil}
//
//  public var colorV2: LarkNCExtensionPB_Entities_ThemeColor {
//    get {return _storage._colorV2 ?? LarkNCExtensionPB_Entities_ThemeColor()}
//    set {_uniqueStorage()._colorV2 = newValue}
//  }
  /// Returns true if `colorV2` has been explicitly set.
//  public var hasColorV2: Bool {return _storage._colorV2 != nil}
  /// Clears the value of `colorV2`. Subsequent reads from it will return its default value.
//  public mutating func clearColorV2() {_uniqueStorage()._colorV2 = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_UDIcon {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// ud icon key
//  public var key: String {
//    get {return _storage._key ?? String()}
//    set {_uniqueStorage()._key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}
//
  /// 有值时会对icon染色
//  public var color: LarkNCExtensionPB_Entities_ThemeColor {
//    get {return _storage._color ?? LarkNCExtensionPB_Entities_ThemeColor()}
//    set {_uniqueStorage()._color = newValue}
//  }
  /// Returns true if `color` has been explicitly set.
//  public var hasColor: Bool {return _storage._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
//  public mutating func clearColor() {_uniqueStorage()._color = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_URLPreviewTemplate {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  ///预览模版id
//  public var templateID: String {
//    get {return _templateID ?? String()}
//    set {_templateID = newValue}
//  }
  /// Returns true if `templateID` has been explicitly set.
//  public var hasTemplateID: Bool {return self._templateID != nil}
  /// Clears the value of `templateID`. Subsequent reads from it will return its default value.
//  public mutating func clearTemplateID() {self._templateID = nil}
//
//  public var rootComponentID: String {
//    get {return _rootComponentID ?? String()}
//    set {_rootComponentID = newValue}
//  }
  /// Returns true if `rootComponentID` has been explicitly set.
//  public var hasRootComponentID: Bool {return self._rootComponentID != nil}
  /// Clears the value of `rootComponentID`. Subsequent reads from it will return its default value.
//  public mutating func clearRootComponentID() {self._rootComponentID = nil}
//
  /// key: component id
//  public var elements: Dictionary<String,LarkNCExtensionPB_Entities_URLPreviewComponent> = [:]
//
//  public var imageIds: [String] = []
//
//  public var atIds: [String] = []
//
//  public var buttonIds: [String] = []
//
//  public var richtextIds: [String] = []
//
  /// 模板过期时间，0 相当于永不过期
//  public var expires: Int64 {
//    get {return _expires ?? 0}
//    set {_expires = newValue}
//  }
  /// Returns true if `expires` has been explicitly set.
//  public var hasExpires: Bool {return self._expires != nil}
  /// Clears the value of `expires`. Subsequent reads from it will return its default value.
//  public mutating func clearExpires() {self._expires = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _templateID: String? = nil
//  fileprivate var _rootComponentID: String? = nil
//  fileprivate var _expires: Int64? = nil
//}

///TODO 待补齐
//public struct LarkNCExtensionPB_Entities_PreviewData {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var value: OneOf_Value? {
//    get {return _storage._value}
//    set {_uniqueStorage()._value = newValue}
//  }
//
//  public var str: String {
//    get {
//      if case .str(let v)? = _storage._value {return v}
//      return String()
//    }
//    set {_uniqueStorage()._value = .str(newValue)}
//  }
//
//  public var i32: Int32 {
//    get {
//      if case .i32(let v)? = _storage._value {return v}
//      return 0
//    }
//    set {_uniqueStorage()._value = .i32(newValue)}
//  }
//
//  public var i64: Int64 {
//    get {
//      if case .i64(let v)? = _storage._value {return v}
//      return 0
//    }
//    set {_uniqueStorage()._value = .i64(newValue)}
//  }
//
//  public var b: Bool {
//    get {
//      if case .b(let v)? = _storage._value {return v}
//      return false
//    }
//    set {_uniqueStorage()._value = .b(newValue)}
//  }
//
//  public var f: Float {
//    get {
//      if case .f(let v)? = _storage._value {return v}
//      return 0
//    }
//    set {_uniqueStorage()._value = .f(newValue)}
//  }
//
//  public var imageSetV2: LarkNCExtensionPB_Entities_ImageSetV2 {
//    get {
//      if case .imageSetV2(let v)? = _storage._value {return v}
//      return LarkNCExtensionPB_Entities_ImageSetV2()
//    }
//    set {_uniqueStorage()._value = .imageSetV2(newValue)}
//  }
//
//  public var items: LarkNCExtensionPB_Entities_PreviewData.Items {
//    get {
//      if case .items(let v)? = _storage._value {return v}
//      return LarkNCExtensionPB_Entities_PreviewData.Items()
//    }
//    set {_uniqueStorage()._value = .items(newValue)}
//  }
//
//  public var themeColor: LarkNCExtensionPB_Entities_ThemeColor {
//    get {
//      if case .themeColor(let v)? = _storage._value {return v}
//      return LarkNCExtensionPB_Entities_ThemeColor()
//    }
//    set {_uniqueStorage()._value = .themeColor(newValue)}
//  }
//
//  public var padding: LarkNCExtensionPB_Entities_URLPreviewComponent.Padding {
//    get {
//      if case .padding(let v)? = _storage._value {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.Padding()
//    }
//    set {_uniqueStorage()._value = .padding(newValue)}
//  }
//
//  public var themeColors: LarkNCExtensionPB_Entities_PreviewData.ThemeColors {
//    get {
//      if case .themeColors(let v)? = _storage._value {return v}
//      return LarkNCExtensionPB_Entities_PreviewData.ThemeColors()
//    }
//    set {_uniqueStorage()._value = .themeColors(newValue)}
//  }
//
//  public var layoutValue: LarkNCExtensionPB_Entities_URLPreviewComponent.Value {
//    get {
//      if case .layoutValue(let v)? = _storage._value {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.Value()
//    }
//    set {_uniqueStorage()._value = .layoutValue(newValue)}
//  }
//
//  public var chatterInfos: LarkNCExtensionPB_Entities_PreviewData.ChatterInfos {
//    get {
//      if case .chatterInfos(let v)? = _storage._value {return v}
//      return LarkNCExtensionPB_Entities_PreviewData.ChatterInfos()
//    }
//    set {_uniqueStorage()._value = .chatterInfos(newValue)}
//  }
//
//  public var stringList: LarkNCExtensionPB_Entities_PreviewData.StringList {
//    get {
//      if case .stringList(let v)? = _storage._value {return v}
//      return LarkNCExtensionPB_Entities_PreviewData.StringList()
//    }
//    set {_uniqueStorage()._value = .stringList(newValue)}
//  }
//
//  public var chatterInfo: LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty.ChatterInfo {
//    get {
//      if case .chatterInfo(let v)? = _storage._value {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty.ChatterInfo()
//    }
//    set {_uniqueStorage()._value = .chatterInfo(newValue)}
//  }
//
//  public var fontLevel: LarkNCExtensionPB_Entities_URLPreviewComponent.FontLevel {
//    get {
//      if case .fontLevel(let v)? = _storage._value {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.FontLevel()
//    }
//    set {_uniqueStorage()._value = .fontLevel(newValue)}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum OneOf_Value: Equatable {
//    case str(String)
//    case i32(Int32)
//    case i64(Int64)
//    case b(Bool)
//    case f(Float)
//    case imageSetV2(LarkNCExtensionPB_Entities_ImageSetV2)
//    case items(LarkNCExtensionPB_Entities_PreviewData.Items)
//    case themeColor(LarkNCExtensionPB_Entities_ThemeColor)
//    case padding(LarkNCExtensionPB_Entities_URLPreviewComponent.Padding)
//    case themeColors(LarkNCExtensionPB_Entities_PreviewData.ThemeColors)
//    case layoutValue(LarkNCExtensionPB_Entities_URLPreviewComponent.Value)
//    case chatterInfos(LarkNCExtensionPB_Entities_PreviewData.ChatterInfos)
//    case stringList(LarkNCExtensionPB_Entities_PreviewData.StringList)
//    case chatterInfo(LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty.ChatterInfo)
//    case fontLevel(LarkNCExtensionPB_Entities_URLPreviewComponent.FontLevel)
//
//  #if !swift(>=4.1)
//    public static func ==(lhs: LarkNCExtensionPB_Entities_PreviewData.OneOf_Value, rhs: LarkNCExtensionPB_Entities_PreviewData.OneOf_Value) -> Bool {
//      switch (lhs, rhs) {
//      case (.str(let l), .str(let r)): return l == r
//      case (.i32(let l), .i32(let r)): return l == r
//      case (.i64(let l), .i64(let r)): return l == r
//      case (.b(let l), .b(let r)): return l == r
//      case (.f(let l), .f(let r)): return l == r
//      case (.imageSetV2(let l), .imageSetV2(let r)): return l == r
//      case (.items(let l), .items(let r)): return l == r
//      case (.themeColor(let l), .themeColor(let r)): return l == r
//      case (.padding(let l), .padding(let r)): return l == r
//      case (.themeColors(let l), .themeColors(let r)): return l == r
//      case (.layoutValue(let l), .layoutValue(let r)): return l == r
//      case (.chatterInfos(let l), .chatterInfos(let r)): return l == r
//      case (.stringList(let l), .stringList(let r)): return l == r
//      case (.chatterInfo(let l), .chatterInfo(let r)): return l == r
//      case (.fontLevel(let l), .fontLevel(let r)): return l == r
//      default: return false
//      }
//    }
//  #endif
//  }
//
//  public struct Items {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var items: [LarkNCExtensionPB_Entities_URLPreviewComponent.Item] = []
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public struct ThemeColors {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var colors: [LarkNCExtensionPB_Entities_ThemeColor] = []
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public struct ChatterInfos {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var chatterInfos: [LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty.ChatterInfo] = []
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public struct StringList {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var stringList: [String] = []
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// 属性ID的构造： 字段名称-字段名称 ...
//public struct LarkNCExtensionPB_Entities_URLPreviewPropertyData {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var type: LarkNCExtensionPB_Entities_URLPreviewComponent.TypeEnum {
//    get {return _storage._type ?? .empty}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
  /// key: ComponentAttribute, value 属性值 PreviewPropertyType
//  public var previewPropertyData: Dictionary<Int32,LarkNCExtensionPB_Entities_PreviewData> {
//    get {return _storage._previewPropertyData}
//    set {_uniqueStorage()._previewPropertyData = newValue}
//  }
//
//  public var richText: LarkNCExtensionPB_Entities_RichText {
//    get {return _storage._richText ?? LarkNCExtensionPB_Entities_RichText()}
//    set {_uniqueStorage()._richText = newValue}
//  }
  /// Returns true if `richText` has been explicitly set.
//  public var hasRichText: Bool {return _storage._richText != nil}
  /// Clears the value of `richText`. Subsequent reads from it will return its default value.
//  public mutating func clearRichText() {_uniqueStorage()._richText = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// 属性ID的构造： 字段名称-字段名称 ...
//public struct LarkNCExtensionPB_Entities_URLPreviewStyleData {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// key: 属性id（PreviewComponentAttribute）, value 属性值
//  public var previewStyleData: Dictionary<Int32,LarkNCExtensionPB_Entities_PreviewData> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

//public struct LarkNCExtensionPB_Entities_URLPreviewState {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// state type
//  public var type: LarkNCExtensionPB_Entities_URLPreviewState.TypeEnum {
//    get {return _storage._type ?? .card}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
//  public var templateID: String {
//    get {return _storage._templateID ?? String()}
//    set {_uniqueStorage()._templateID = newValue}
//  }
  /// Returns true if `templateID` has been explicitly set.
//  public var hasTemplateID: Bool {return _storage._templateID != nil}
  /// Clears the value of `templateID`. Subsequent reads from it will return its default value.
//  public mutating func clearTemplateID() {_uniqueStorage()._templateID = nil}
//
//  public var cardURL: LarkNCExtensionPB_Entities_URL {
//    get {return _storage._cardURL ?? LarkNCExtensionPB_Entities_URL()}
//    set {_uniqueStorage()._cardURL = newValue}
//  }
  /// Returns true if `cardURL` has been explicitly set.
//  public var hasCardURL: Bool {return _storage._cardURL != nil}
  /// Clears the value of `cardURL`. Subsequent reads from it will return its default value.
//  public mutating func clearCardURL() {_uniqueStorage()._cardURL = nil}
//
  /// key: action id
//  public var actions: Dictionary<String,LarkNCExtensionPB_Entities_UrlPreviewAction> {
//    get {return _storage._actions}
//    set {_uniqueStorage()._actions = newValue}
//  }
//
  /// key: component id
//  public var styles: Dictionary<String,LarkNCExtensionPB_Entities_URLPreviewStyleData> {
//    get {return _storage._styles}
//    set {_uniqueStorage()._styles = newValue}
//  }
//
  /// key: component id
//  public var properties: Dictionary<String,LarkNCExtensionPB_Entities_URLPreviewPropertyData> {
//    get {return _storage._properties}
//    set {_uniqueStorage()._properties = newValue}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case card // = 0
//    case alert // = 1
//
//    public init() {
//      self = .card
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .card
//      case 1: self = .alert
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .card: return 0
//      case .alert: return 1
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_URLPreviewState.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_URLPreviewProperty {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var urlpreviewComponentProperty: OneOf_UrlpreviewComponentProperty? {
//    get {return _storage._urlpreviewComponentProperty}
//    set {_uniqueStorage()._urlpreviewComponentProperty = newValue}
//  }
//
//  public var empty: LarkNCExtensionPB_Entities_URLPreviewComponent.EmptyProperty {
//    get {
//      if case .empty(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.EmptyProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .empty(newValue)}
//  }
//
//  public var header: LarkNCExtensionPB_Entities_URLPreviewComponent.PreviewHeaderProperty {
//    get {
//      if case .header(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.PreviewHeaderProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .header(newValue)}
//  }
//
//  public var richtext: LarkNCExtensionPB_Entities_URLPreviewComponent.RichTextProperty {
//    get {
//      if case .richtext(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.RichTextProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .richtext(newValue)}
//  }
//
//  public var image: LarkNCExtensionPB_Entities_URLPreviewComponent.ImageProperty {
//    get {
//      if case .image(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.ImageProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .image(newValue)}
//  }
//
//  public var chattersPreview: LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty {
//    get {
//      if case .chattersPreview(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .chattersPreview(newValue)}
//  }
//
//  public var button: LarkNCExtensionPB_Entities_URLPreviewComponent.ButtonProperty {
//    get {
//      if case .button(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.ButtonProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .button(newValue)}
//  }
//
//  public var iconButton: LarkNCExtensionPB_Entities_URLPreviewComponent.IconButtonProperty {
//    get {
//      if case .iconButton(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.IconButtonProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .iconButton(newValue)}
//  }
//
//  public var textButton: LarkNCExtensionPB_Entities_URLPreviewComponent.TextButtonProperty {
//    get {
//      if case .textButton(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.TextButtonProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .textButton(newValue)}
//  }
//
//  public var time: LarkNCExtensionPB_Entities_URLPreviewComponent.TimeProperty {
//    get {
//      if case .time(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.TimeProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .time(newValue)}
//  }
//
//  public var text: LarkNCExtensionPB_Entities_URLPreviewComponent.TextProperty {
//    get {
//      if case .text(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.TextProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .text(newValue)}
//  }
//
//  public var tagList: LarkNCExtensionPB_Entities_URLPreviewComponent.TagListProperty {
//    get {
//      if case .tagList(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.TagListProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .tagList(newValue)}
//  }
//
//  public var spinButton: LarkNCExtensionPB_Entities_URLPreviewComponent.SpinButtonProperty {
//    get {
//      if case .spinButton(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.SpinButtonProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .spinButton(newValue)}
//  }
//
//  public var avatar: LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty {
//    get {
//      if case .avatar(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .avatar(newValue)}
//  }
//
//  public var video: LarkNCExtensionPB_Entities_URLPreviewComponent.VideoProperty {
//    get {
//      if case .video(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.VideoProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .video(newValue)}
//  }
//
//  public var cardContainer: LarkNCExtensionPB_Entities_URLPreviewComponent.CardContainerProperty {
//    get {
//      if case .cardContainer(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.CardContainerProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .cardContainer(newValue)}
//  }
//
//  public var docImage: LarkNCExtensionPB_Entities_URLPreviewComponent.DocImageProperty {
//    get {
//      if case .docImage(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.DocImageProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .docImage(newValue)}
//  }
//
//  public var loading: LarkNCExtensionPB_Entities_URLPreviewComponent.LoadingProperty {
//    get {
//      if case .loading(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.LoadingProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .loading(newValue)}
//  }
//
//  public var type: LarkNCExtensionPB_Entities_URLPreviewComponent.TypeEnum {
//    get {return _storage._type ?? .empty}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum OneOf_UrlpreviewComponentProperty: Equatable {
//    case empty(LarkNCExtensionPB_Entities_URLPreviewComponent.EmptyProperty)
//    case header(LarkNCExtensionPB_Entities_URLPreviewComponent.PreviewHeaderProperty)
//    case richtext(LarkNCExtensionPB_Entities_URLPreviewComponent.RichTextProperty)
//    case image(LarkNCExtensionPB_Entities_URLPreviewComponent.ImageProperty)
//    case chattersPreview(LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty)
//    case button(LarkNCExtensionPB_Entities_URLPreviewComponent.ButtonProperty)
//    case iconButton(LarkNCExtensionPB_Entities_URLPreviewComponent.IconButtonProperty)
//    case textButton(LarkNCExtensionPB_Entities_URLPreviewComponent.TextButtonProperty)
//    case time(LarkNCExtensionPB_Entities_URLPreviewComponent.TimeProperty)
//    case text(LarkNCExtensionPB_Entities_URLPreviewComponent.TextProperty)
//    case tagList(LarkNCExtensionPB_Entities_URLPreviewComponent.TagListProperty)
//    case spinButton(LarkNCExtensionPB_Entities_URLPreviewComponent.SpinButtonProperty)
//    case avatar(LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty)
//    case video(LarkNCExtensionPB_Entities_URLPreviewComponent.VideoProperty)
//    case cardContainer(LarkNCExtensionPB_Entities_URLPreviewComponent.CardContainerProperty)
//    case docImage(LarkNCExtensionPB_Entities_URLPreviewComponent.DocImageProperty)
//    case loading(LarkNCExtensionPB_Entities_URLPreviewComponent.LoadingProperty)
//
//  #if !swift(>=4.1)
//    public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewProperty.OneOf_UrlpreviewComponentProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewProperty.OneOf_UrlpreviewComponentProperty) -> Bool {
//      switch (lhs, rhs) {
//      case (.empty(let l), .empty(let r)): return l == r
//      case (.header(let l), .header(let r)): return l == r
//      case (.richtext(let l), .richtext(let r)): return l == r
//      case (.image(let l), .image(let r)): return l == r
//      case (.chattersPreview(let l), .chattersPreview(let r)): return l == r
//      case (.button(let l), .button(let r)): return l == r
//      case (.iconButton(let l), .iconButton(let r)): return l == r
//      case (.textButton(let l), .textButton(let r)): return l == r
//      case (.time(let l), .time(let r)): return l == r
//      case (.text(let l), .text(let r)): return l == r
//      case (.tagList(let l), .tagList(let r)): return l == r
//      case (.spinButton(let l), .spinButton(let r)): return l == r
//      case (.avatar(let l), .avatar(let r)): return l == r
//      case (.video(let l), .video(let r)): return l == r
//      case (.cardContainer(let l), .cardContainer(let r)): return l == r
//      case (.docImage(let l), .docImage(let r)): return l == r
//      case (.loading(let l), .loading(let r)): return l == r
//      default: return false
//      }
//    }
//  #endif
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// Reference:
/// https://bytedance.feishu.cn/wiki/wikcnqKj2Qd44MFYtq8Z7kw0JUf#
/// https://bytedance.feishu.cn/docs/doccnkwAETf4Xsf87gR1ci1YkPe
//public struct LarkNCExtensionPB_Entities_URLPreviewComponent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var type: LarkNCExtensionPB_Entities_URLPreviewComponent.TypeEnum {
//    get {return _storage._type ?? .empty}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
  /// 是否要提示
//  public var canSkipWhenUnknown: Bool {
//    get {return _storage._canSkipWhenUnknown ?? true}
//    set {_uniqueStorage()._canSkipWhenUnknown = newValue}
//  }
  /// Returns true if `canSkipWhenUnknown` has been explicitly set.
//  public var hasCanSkipWhenUnknown: Bool {return _storage._canSkipWhenUnknown != nil}
  /// Clears the value of `canSkipWhenUnknown`. Subsequent reads from it will return its default value.
//  public mutating func clearCanSkipWhenUnknown() {_uniqueStorage()._canSkipWhenUnknown = nil}
//
//  public var style: LarkNCExtensionPB_Entities_URLPreviewComponent.Style {
//    get {return _storage._style ?? LarkNCExtensionPB_Entities_URLPreviewComponent.Style()}
//    set {_uniqueStorage()._style = newValue}
//  }
  /// Returns true if `style` has been explicitly set.
//  public var hasStyle: Bool {return _storage._style != nil}
  /// Clears the value of `style`. Subsequent reads from it will return its default value.
//  public mutating func clearStyle() {_uniqueStorage()._style = nil}
//
//  public var childIds: [String] {
//    get {return _storage._childIds}
//    set {_uniqueStorage()._childIds = newValue}
//  }
//
//  public var isFontZoomable: Bool {
//    get {return _storage._isFontZoomable ?? true}
//    set {_uniqueStorage()._isFontZoomable = newValue}
//  }
  /// Returns true if `isFontZoomable` has been explicitly set.
//  public var hasIsFontZoomable: Bool {return _storage._isFontZoomable != nil}
  /// Clears the value of `isFontZoomable`. Subsequent reads from it will return its default value.
//  public mutating func clearIsFontZoomable() {_uniqueStorage()._isFontZoomable = nil}
//
//  public var urlpreviewComponentProperty: OneOf_UrlpreviewComponentProperty? {
//    get {return _storage._urlpreviewComponentProperty}
//    set {_uniqueStorage()._urlpreviewComponentProperty = newValue}
//  }
//
//  public var empty: LarkNCExtensionPB_Entities_URLPreviewComponent.EmptyProperty {
//    get {
//      if case .empty(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.EmptyProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .empty(newValue)}
//  }
//
//  public var linearLayout: LarkNCExtensionPB_Entities_URLPreviewComponent.LinearLayoutProperty {
//    get {
//      if case .linearLayout(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.LinearLayoutProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .linearLayout(newValue)}
//  }
//
//  public var header: LarkNCExtensionPB_Entities_URLPreviewComponent.PreviewHeaderProperty {
//    get {
//      if case .header(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.PreviewHeaderProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .header(newValue)}
//  }
//
//  public var richtext: LarkNCExtensionPB_Entities_URLPreviewComponent.RichTextProperty {
//    get {
//      if case .richtext(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.RichTextProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .richtext(newValue)}
//  }
//
//  public var image: LarkNCExtensionPB_Entities_URLPreviewComponent.ImageProperty {
//    get {
//      if case .image(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.ImageProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .image(newValue)}
//  }
//
//  public var chattersPreview: LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty {
//    get {
//      if case .chattersPreview(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .chattersPreview(newValue)}
//  }
//
//  public var button: LarkNCExtensionPB_Entities_URLPreviewComponent.ButtonProperty {
//    get {
//      if case .button(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.ButtonProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .button(newValue)}
//  }
//
//  public var iconButton: LarkNCExtensionPB_Entities_URLPreviewComponent.IconButtonProperty {
//    get {
//      if case .iconButton(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.IconButtonProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .iconButton(newValue)}
//  }
//
//  public var textButton: LarkNCExtensionPB_Entities_URLPreviewComponent.TextButtonProperty {
//    get {
//      if case .textButton(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.TextButtonProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .textButton(newValue)}
//  }
//
//  public var time: LarkNCExtensionPB_Entities_URLPreviewComponent.TimeProperty {
//    get {
//      if case .time(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.TimeProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .time(newValue)}
//  }
//
//  public var text: LarkNCExtensionPB_Entities_URLPreviewComponent.TextProperty {
//    get {
//      if case .text(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.TextProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .text(newValue)}
//  }
//
//  public var tagList: LarkNCExtensionPB_Entities_URLPreviewComponent.TagListProperty {
//    get {
//      if case .tagList(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.TagListProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .tagList(newValue)}
//  }
//
//  public var spinButton: LarkNCExtensionPB_Entities_URLPreviewComponent.SpinButtonProperty {
//    get {
//      if case .spinButton(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.SpinButtonProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .spinButton(newValue)}
//  }
//
//  public var avatar: LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty {
//    get {
//      if case .avatar(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .avatar(newValue)}
//  }
//
//  public var video: LarkNCExtensionPB_Entities_URLPreviewComponent.VideoProperty {
//    get {
//      if case .video(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.VideoProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .video(newValue)}
//  }
//
//  public var cardContainer: LarkNCExtensionPB_Entities_URLPreviewComponent.CardContainerProperty {
//    get {
//      if case .cardContainer(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.CardContainerProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .cardContainer(newValue)}
//  }
//
//  public var docImage: LarkNCExtensionPB_Entities_URLPreviewComponent.DocImageProperty {
//    get {
//      if case .docImage(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.DocImageProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .docImage(newValue)}
//  }
//
//  public var loading: LarkNCExtensionPB_Entities_URLPreviewComponent.LoadingProperty {
//    get {
//      if case .loading(let v)? = _storage._urlpreviewComponentProperty {return v}
//      return LarkNCExtensionPB_Entities_URLPreviewComponent.LoadingProperty()
//    }
//    set {_uniqueStorage()._urlpreviewComponentProperty = .loading(newValue)}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum OneOf_UrlpreviewComponentProperty: Equatable {
//    case empty(LarkNCExtensionPB_Entities_URLPreviewComponent.EmptyProperty)
//    case linearLayout(LarkNCExtensionPB_Entities_URLPreviewComponent.LinearLayoutProperty)
//    case header(LarkNCExtensionPB_Entities_URLPreviewComponent.PreviewHeaderProperty)
//    case richtext(LarkNCExtensionPB_Entities_URLPreviewComponent.RichTextProperty)
//    case image(LarkNCExtensionPB_Entities_URLPreviewComponent.ImageProperty)
//    case chattersPreview(LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty)
//    case button(LarkNCExtensionPB_Entities_URLPreviewComponent.ButtonProperty)
//    case iconButton(LarkNCExtensionPB_Entities_URLPreviewComponent.IconButtonProperty)
//    case textButton(LarkNCExtensionPB_Entities_URLPreviewComponent.TextButtonProperty)
//    case time(LarkNCExtensionPB_Entities_URLPreviewComponent.TimeProperty)
//    case text(LarkNCExtensionPB_Entities_URLPreviewComponent.TextProperty)
//    case tagList(LarkNCExtensionPB_Entities_URLPreviewComponent.TagListProperty)
//    case spinButton(LarkNCExtensionPB_Entities_URLPreviewComponent.SpinButtonProperty)
//    case avatar(LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty)
//    case video(LarkNCExtensionPB_Entities_URLPreviewComponent.VideoProperty)
//    case cardContainer(LarkNCExtensionPB_Entities_URLPreviewComponent.CardContainerProperty)
//    case docImage(LarkNCExtensionPB_Entities_URLPreviewComponent.DocImageProperty)
//    case loading(LarkNCExtensionPB_Entities_URLPreviewComponent.LoadingProperty)
//
//  #if !swift(>=4.1)
//    public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.OneOf_UrlpreviewComponentProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.OneOf_UrlpreviewComponentProperty) -> Bool {
//      switch (lhs, rhs) {
//      case (.empty(let l), .empty(let r)): return l == r
//      case (.linearLayout(let l), .linearLayout(let r)): return l == r
//      case (.header(let l), .header(let r)): return l == r
//      case (.richtext(let l), .richtext(let r)): return l == r
//      case (.image(let l), .image(let r)): return l == r
//      case (.chattersPreview(let l), .chattersPreview(let r)): return l == r
//      case (.button(let l), .button(let r)): return l == r
//      case (.iconButton(let l), .iconButton(let r)): return l == r
//      case (.textButton(let l), .textButton(let r)): return l == r
//      case (.time(let l), .time(let r)): return l == r
//      case (.text(let l), .text(let r)): return l == r
//      case (.tagList(let l), .tagList(let r)): return l == r
//      case (.spinButton(let l), .spinButton(let r)): return l == r
//      case (.avatar(let l), .avatar(let r)): return l == r
//      case (.video(let l), .video(let r)): return l == r
//      case (.cardContainer(let l), .cardContainer(let r)): return l == r
//      case (.docImage(let l), .docImage(let r)): return l == r
//      case (.loading(let l), .loading(let r)): return l == r
//      default: return false
//      }
//    }
//  #endif
//  }
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case empty // = 0
//    case linearLayout // = 1
//    case header // = 501
//    case richtext // = 502
//    case image // = 503
//    case chattersPreview // = 504
//    case button // = 505
//    case iconButton // = 506
//    case textButton // = 507
//    case time // = 508
//    case text // = 509
//    case tagList // = 510
//    case spinButton // = 511
//    case avatar // = 512
//    case video // = 513
//    case cardContainer // = 514
//    case docImage // = 515
//    case loading // = 516
//
//    public init() {
//      self = .empty
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .empty
//      case 1: self = .linearLayout
//      case 501: self = .header
//      case 502: self = .richtext
//      case 503: self = .image
//      case 504: self = .chattersPreview
//      case 505: self = .button
//      case 506: self = .iconButton
//      case 507: self = .textButton
//      case 508: self = .time
//      case 509: self = .text
//      case 510: self = .tagList
//      case 511: self = .spinButton
//      case 512: self = .avatar
//      case 513: self = .video
//      case 514: self = .cardContainer
//      case 515: self = .docImage
//      case 516: self = .loading
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .empty: return 0
//      case .linearLayout: return 1
//      case .header: return 501
//      case .richtext: return 502
//      case .image: return 503
//      case .chattersPreview: return 504
//      case .button: return 505
//      case .iconButton: return 506
//      case .textButton: return 507
//      case .time: return 508
//      case .text: return 509
//      case .tagList: return 510
//      case .spinButton: return 511
//      case .avatar: return 512
//      case .video: return 513
//      case .cardContainer: return 514
//      case .docImage: return 515
//      case .loading: return 516
//      }
//    }
//
//  }
//
//  public enum SizeLevel: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case normal // = 0
//    case small // = 1
//    case large // = 2
//
//    public init() {
//      self = .normal
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .normal
//      case 1: self = .small
//      case 2: self = .large
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .normal: return 0
//      case .small: return 1
//      case .large: return 2
//      }
//    }
//
//  }
//
//  public enum ValueType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case auto // = 0
//    case point // = 1
//    case percentage // = 2
//
//    public init() {
//      self = .auto
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .auto
//      case 1: self = .point
//      case 2: self = .percentage
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .auto: return 0
//      case .point: return 1
//      case .percentage: return 2
//      }
//    }
//
//  }
//
//  public enum Direction: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case ltr // = 0
//    case rtl // = 1
//
//    public init() {
//      self = .ltr
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .ltr
//      case 1: self = .rtl
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .ltr: return 0
//      case .rtl: return 1
//      }
//    }
//
//  }
//
//  public enum Orientation: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case row // = 0
//    case column // = 1
//    case rowReverse // = 2
//    case columnReverse // = 3
//
//    public init() {
//      self = .row
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .row
//      case 1: self = .column
//      case 2: self = .rowReverse
//      case 3: self = .columnReverse
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .row: return 0
//      case .column: return 1
//      case .rowReverse: return 2
//      case .columnReverse: return 3
//      }
//    }
//
//  }
//
//  public enum Justify: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case start // = 0
//    case center // = 1
//    case end // = 2
//    case spaceBetween // = 3
//    case spaceAround // = 4
//    case spaceEvenly // = 5
//
//    public init() {
//      self = .start
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .start
//      case 1: self = .center
//      case 2: self = .end
//      case 3: self = .spaceBetween
//      case 4: self = .spaceAround
//      case 5: self = .spaceEvenly
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .start: return 0
//      case .center: return 1
//      case .end: return 2
//      case .spaceBetween: return 3
//      case .spaceAround: return 4
//      case .spaceEvenly: return 5
//      }
//    }
//
//  }
//
//  public enum Align: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case top // = 0
//    case middle // = 1
//    case bottom // = 2
//    case stretch // = 3
//    case baseline // = 4
//
//    public init() {
//      self = .top
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .top
//      case 1: self = .middle
//      case 2: self = .bottom
//      case 3: self = .stretch
//      case 4: self = .baseline
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .top: return 0
//      case .middle: return 1
//      case .bottom: return 2
//      case .stretch: return 3
//      case .baseline: return 4
//      }
//    }
//
//  }
//
//  public enum Theme: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case light // = 0
//    case dark // = 1
//
//    public init() {
//      self = .light
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .light
//      case 1: self = .dark
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .light: return 0
//      case .dark: return 1
//      }
//    }
//
//  }
//
  /// 继承规则：
  /// FontType unknown用枚举值最大的
  /// level本地unknown用向上最接近的, 如5如果没有则对应4
//  public enum FontType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case title // = 0
//    case headline // = 1
//    case body // = 2
//    case caption // = 3
//
//    public init() {
//      self = .title
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .title
//      case 1: self = .headline
//      case 2: self = .body
//      case 3: self = .caption
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .title: return 0
//      case .headline: return 1
//      case .body: return 2
//      case .caption: return 3
//      }
//    }
//
//  }
//
//  public struct FontLevel {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var type: LarkNCExtensionPB_Entities_URLPreviewComponent.FontType {
//      get {return _type ?? .caption}
//      set {_type = newValue}
//    }
    /// Returns true if `type` has been explicitly set.
//    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {self._type = nil}
//
//    public var level: Int32 {
//      get {return _level ?? 0}
//      set {_level = newValue}
//    }
    /// Returns true if `level` has been explicitly set.
//    public var hasLevel: Bool {return self._level != nil}
    /// Clears the value of `level`. Subsequent reads from it will return its default value.
//    public mutating func clearLevel() {self._level = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _type: LarkNCExtensionPB_Entities_URLPreviewComponent.FontType? = nil
//    fileprivate var _level: Int32? = nil
//  }
//
//  public struct Padding {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var top: Float {
//      get {return _top ?? 0}
//      set {_top = newValue}
//    }
    /// Returns true if `top` has been explicitly set.
//    public var hasTop: Bool {return self._top != nil}
    /// Clears the value of `top`. Subsequent reads from it will return its default value.
//    public mutating func clearTop() {self._top = nil}
//
//    public var right: Float {
//      get {return _right ?? 0}
//      set {_right = newValue}
//    }
    /// Returns true if `right` has been explicitly set.
//    public var hasRight: Bool {return self._right != nil}
    /// Clears the value of `right`. Subsequent reads from it will return its default value.
//    public mutating func clearRight() {self._right = nil}
//
//    public var bottom: Float {
//      get {return _bottom ?? 0}
//      set {_bottom = newValue}
//    }
    /// Returns true if `bottom` has been explicitly set.
//    public var hasBottom: Bool {return self._bottom != nil}
    /// Clears the value of `bottom`. Subsequent reads from it will return its default value.
//    public mutating func clearBottom() {self._bottom = nil}
//
//    public var left: Float {
//      get {return _left ?? 0}
//      set {_left = newValue}
//    }
    /// Returns true if `left` has been explicitly set.
//    public var hasLeft: Bool {return self._left != nil}
    /// Clears the value of `left`. Subsequent reads from it will return its default value.
//    public mutating func clearLeft() {self._left = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _top: Float? = nil
//    fileprivate var _right: Float? = nil
//    fileprivate var _bottom: Float? = nil
//    fileprivate var _left: Float? = nil
//  }
//
//  public struct Value {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var type: LarkNCExtensionPB_Entities_URLPreviewComponent.ValueType {
//      get {return _type ?? .auto}
//      set {_type = newValue}
//    }
    /// Returns true if `type` has been explicitly set.
//    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {self._type = nil}
//
//    public var value: Float {
//      get {return _value ?? 0}
//      set {_value = newValue}
//    }
    /// Returns true if `value` has been explicitly set.
//    public var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
//    public mutating func clearValue() {self._value = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _type: LarkNCExtensionPB_Entities_URLPreviewComponent.ValueType? = nil
//    fileprivate var _value: Float? = nil
//  }
//
//  public struct Item {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var actionID: String {
//      get {return _actionID ?? String()}
//      set {_actionID = newValue}
//    }
    /// Returns true if `actionID` has been explicitly set.
//    public var hasActionID: Bool {return self._actionID != nil}
    /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
//    public mutating func clearActionID() {self._actionID = nil}
//
//    public var text: String {
//      get {return _text ?? String()}
//      set {_text = newValue}
//    }
    /// Returns true if `text` has been explicitly set.
//    public var hasText: Bool {return self._text != nil}
    /// Clears the value of `text`. Subsequent reads from it will return its default value.
//    public mutating func clearText() {self._text = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _actionID: String? = nil
//    fileprivate var _text: String? = nil
//  }
//
//  public struct Style {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 组件都允许设置不同档位的大小，有些组件走默认的字体缩放大小，不响应该属性
//    public var sizeLevel: LarkNCExtensionPB_Entities_URLPreviewComponent.SizeLevel {
//      get {return _storage._sizeLevel ?? .normal}
//      set {_uniqueStorage()._sizeLevel = newValue}
//    }
    /// Returns true if `sizeLevel` has been explicitly set.
//    public var hasSizeLevel: Bool {return _storage._sizeLevel != nil}
    /// Clears the value of `sizeLevel`. Subsequent reads from it will return its default value.
//    public mutating func clearSizeLevel() {_uniqueStorage()._sizeLevel = nil}
//
    /// #FFFFFFFF to uint32
//    public var textColor: UInt32 {
//      get {return _storage._textColor ?? 0}
//      set {_uniqueStorage()._textColor = newValue}
//    }
    /// Returns true if `textColor` has been explicitly set.
//    public var hasTextColor: Bool {return _storage._textColor != nil}
    /// Clears the value of `textColor`. Subsequent reads from it will return its default value.
//    public mutating func clearTextColor() {_uniqueStorage()._textColor = nil}
//
//    public var backgroundColor: LarkNCExtensionPB_Entities_Gradient {
//      get {return _storage._backgroundColor ?? LarkNCExtensionPB_Entities_Gradient()}
//      set {_uniqueStorage()._backgroundColor = newValue}
//    }
    /// Returns true if `backgroundColor` has been explicitly set.
//    public var hasBackgroundColor: Bool {return _storage._backgroundColor != nil}
    /// Clears the value of `backgroundColor`. Subsequent reads from it will return its default value.
//    public mutating func clearBackgroundColor() {_uniqueStorage()._backgroundColor = nil}
//
//    public var width: LarkNCExtensionPB_Entities_URLPreviewComponent.Value {
//      get {return _storage._width ?? LarkNCExtensionPB_Entities_URLPreviewComponent.Value()}
//      set {_uniqueStorage()._width = newValue}
//    }
    /// Returns true if `width` has been explicitly set.
//    public var hasWidth: Bool {return _storage._width != nil}
    /// Clears the value of `width`. Subsequent reads from it will return its default value.
//    public mutating func clearWidth() {_uniqueStorage()._width = nil}
//
//    public var height: LarkNCExtensionPB_Entities_URLPreviewComponent.Value {
//      get {return _storage._height ?? LarkNCExtensionPB_Entities_URLPreviewComponent.Value()}
//      set {_uniqueStorage()._height = newValue}
//    }
    /// Returns true if `height` has been explicitly set.
//    public var hasHeight: Bool {return _storage._height != nil}
    /// Clears the value of `height`. Subsequent reads from it will return its default value.
//    public mutating func clearHeight() {_uniqueStorage()._height = nil}
//
//    public var maxWidth: LarkNCExtensionPB_Entities_URLPreviewComponent.Value {
//      get {return _storage._maxWidth ?? LarkNCExtensionPB_Entities_URLPreviewComponent.Value()}
//      set {_uniqueStorage()._maxWidth = newValue}
//    }
    /// Returns true if `maxWidth` has been explicitly set.
//    public var hasMaxWidth: Bool {return _storage._maxWidth != nil}
    /// Clears the value of `maxWidth`. Subsequent reads from it will return its default value.
//    public mutating func clearMaxWidth() {_uniqueStorage()._maxWidth = nil}
//
//    public var maxHeight: LarkNCExtensionPB_Entities_URLPreviewComponent.Value {
//      get {return _storage._maxHeight ?? LarkNCExtensionPB_Entities_URLPreviewComponent.Value()}
//      set {_uniqueStorage()._maxHeight = newValue}
//    }
    /// Returns true if `maxHeight` has been explicitly set.
//    public var hasMaxHeight: Bool {return _storage._maxHeight != nil}
    /// Clears the value of `maxHeight`. Subsequent reads from it will return its default value.
//    public mutating func clearMaxHeight() {_uniqueStorage()._maxHeight = nil}
//
//    public var minWidth: LarkNCExtensionPB_Entities_URLPreviewComponent.Value {
//      get {return _storage._minWidth ?? LarkNCExtensionPB_Entities_URLPreviewComponent.Value()}
//      set {_uniqueStorage()._minWidth = newValue}
//    }
    /// Returns true if `minWidth` has been explicitly set.
//    public var hasMinWidth: Bool {return _storage._minWidth != nil}
    /// Clears the value of `minWidth`. Subsequent reads from it will return its default value.
//    public mutating func clearMinWidth() {_uniqueStorage()._minWidth = nil}
//
//    public var minHeight: LarkNCExtensionPB_Entities_URLPreviewComponent.Value {
//      get {return _storage._minHeight ?? LarkNCExtensionPB_Entities_URLPreviewComponent.Value()}
//      set {_uniqueStorage()._minHeight = newValue}
//    }
    /// Returns true if `minHeight` has been explicitly set.
//    public var hasMinHeight: Bool {return _storage._minHeight != nil}
    /// Clears the value of `minHeight`. Subsequent reads from it will return its default value.
//    public mutating func clearMinHeight() {_uniqueStorage()._minHeight = nil}
//
//    public var growWeight: Int32 {
//      get {return _storage._growWeight ?? 0}
//      set {_uniqueStorage()._growWeight = newValue}
//    }
    /// Returns true if `growWeight` has been explicitly set.
//    public var hasGrowWeight: Bool {return _storage._growWeight != nil}
    /// Clears the value of `growWeight`. Subsequent reads from it will return its default value.
//    public mutating func clearGrowWeight() {_uniqueStorage()._growWeight = nil}
//
//    public var shrinkWeight: Int32 {
//      get {return _storage._shrinkWeight ?? 0}
//      set {_uniqueStorage()._shrinkWeight = newValue}
//    }
    /// Returns true if `shrinkWeight` has been explicitly set.
//    public var hasShrinkWeight: Bool {return _storage._shrinkWeight != nil}
    /// Clears the value of `shrinkWeight`. Subsequent reads from it will return its default value.
//    public mutating func clearShrinkWeight() {_uniqueStorage()._shrinkWeight = nil}
//
//    public var fontLevel: LarkNCExtensionPB_Entities_URLPreviewComponent.FontLevel {
//      get {return _storage._fontLevel ?? LarkNCExtensionPB_Entities_URLPreviewComponent.FontLevel()}
//      set {_uniqueStorage()._fontLevel = newValue}
//    }
    /// Returns true if `fontLevel` has been explicitly set.
//    public var hasFontLevel: Bool {return _storage._fontLevel != nil}
    /// Clears the value of `fontLevel`. Subsequent reads from it will return its default value.
//    public mutating func clearFontLevel() {_uniqueStorage()._fontLevel = nil}
//
//    public var border: LarkNCExtensionPB_Entities_Border {
//      get {return _storage._border ?? LarkNCExtensionPB_Entities_Border()}
//      set {_uniqueStorage()._border = newValue}
//    }
    /// Returns true if `border` has been explicitly set.
//    public var hasBorder: Bool {return _storage._border != nil}
    /// Clears the value of `border`. Subsequent reads from it will return its default value.
//    public mutating func clearBorder() {_uniqueStorage()._border = nil}
//
//    public var textColorV2: LarkNCExtensionPB_Entities_ThemeColor {
//      get {return _storage._textColorV2 ?? LarkNCExtensionPB_Entities_ThemeColor()}
//      set {_uniqueStorage()._textColorV2 = newValue}
//    }
    /// Returns true if `textColorV2` has been explicitly set.
//    public var hasTextColorV2: Bool {return _storage._textColorV2 != nil}
    /// Clears the value of `textColorV2`. Subsequent reads from it will return its default value.
//    public mutating func clearTextColorV2() {_uniqueStorage()._textColorV2 = nil}
//
    /// 宽高比 * 100，精确至两位小数，使用时需要除去100
//    public var aspectRatio: Int32 {
//      get {return _storage._aspectRatio ?? 0}
//      set {_uniqueStorage()._aspectRatio = newValue}
//    }
    /// Returns true if `aspectRatio` has been explicitly set.
//    public var hasAspectRatio: Bool {return _storage._aspectRatio != nil}
    /// Clears the value of `aspectRatio`. Subsequent reads from it will return its default value.
//    public mutating func clearAspectRatio() {_uniqueStorage()._aspectRatio = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct EmptyProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public struct LinearLayoutProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var orientation: LarkNCExtensionPB_Entities_URLPreviewComponent.Orientation {
//      get {return _storage._orientation ?? .row}
//      set {_uniqueStorage()._orientation = newValue}
//    }
    /// Returns true if `orientation` has been explicitly set.
//    public var hasOrientation: Bool {return _storage._orientation != nil}
    /// Clears the value of `orientation`. Subsequent reads from it will return its default value.
//    public mutating func clearOrientation() {_uniqueStorage()._orientation = nil}
//
//    public var spacing: Float {
//      get {return _storage._spacing ?? 0}
//      set {_uniqueStorage()._spacing = newValue}
//    }
    /// Returns true if `spacing` has been explicitly set.
//    public var hasSpacing: Bool {return _storage._spacing != nil}
    /// Clears the value of `spacing`. Subsequent reads from it will return its default value.
//    public mutating func clearSpacing() {_uniqueStorage()._spacing = nil}
//
//    public var wrapWidth: Float {
//      get {return _storage._wrapWidth ?? 0}
//      set {_uniqueStorage()._wrapWidth = newValue}
//    }
    /// Returns true if `wrapWidth` has been explicitly set.
//    public var hasWrapWidth: Bool {return _storage._wrapWidth != nil}
    /// Clears the value of `wrapWidth`. Subsequent reads from it will return its default value.
//    public mutating func clearWrapWidth() {_uniqueStorage()._wrapWidth = nil}
//
//    public var padding: Float {
//      get {return _storage._padding ?? 0}
//      set {_uniqueStorage()._padding = newValue}
//    }
    /// Returns true if `padding` has been explicitly set.
//    public var hasPadding: Bool {return _storage._padding != nil}
    /// Clears the value of `padding`. Subsequent reads from it will return its default value.
//    public mutating func clearPadding() {_uniqueStorage()._padding = nil}
//
//    public var mainAxisJustify: LarkNCExtensionPB_Entities_URLPreviewComponent.Justify {
//      get {return _storage._mainAxisJustify ?? .start}
//      set {_uniqueStorage()._mainAxisJustify = newValue}
//    }
    /// Returns true if `mainAxisJustify` has been explicitly set.
//    public var hasMainAxisJustify: Bool {return _storage._mainAxisJustify != nil}
    /// Clears the value of `mainAxisJustify`. Subsequent reads from it will return its default value.
//    public mutating func clearMainAxisJustify() {_uniqueStorage()._mainAxisJustify = nil}
//
//    public var crossAxisAlign: LarkNCExtensionPB_Entities_URLPreviewComponent.Align {
//      get {return _storage._crossAxisAlign ?? .top}
//      set {_uniqueStorage()._crossAxisAlign = newValue}
//    }
    /// Returns true if `crossAxisAlign` has been explicitly set.
//    public var hasCrossAxisAlign: Bool {return _storage._crossAxisAlign != nil}
    /// Clears the value of `crossAxisAlign`. Subsequent reads from it will return its default value.
//    public mutating func clearCrossAxisAlign() {_uniqueStorage()._crossAxisAlign = nil}
//
    /// side_padding内有边未赋值时，默认使用padding的值
//    public var sidePadding: LarkNCExtensionPB_Entities_URLPreviewComponent.Padding {
//      get {return _storage._sidePadding ?? LarkNCExtensionPB_Entities_URLPreviewComponent.Padding()}
//      set {_uniqueStorage()._sidePadding = newValue}
//    }
    /// Returns true if `sidePadding` has been explicitly set.
//    public var hasSidePadding: Bool {return _storage._sidePadding != nil}
    /// Clears the value of `sidePadding`. Subsequent reads from it will return its default value.
//    public mutating func clearSidePadding() {_uniqueStorage()._sidePadding = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct PreviewHeaderProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var icon: LarkNCExtensionPB_Entities_ImageSetV2 {
//      get {return _storage._icon ?? LarkNCExtensionPB_Entities_ImageSetV2()}
//      set {_uniqueStorage()._icon = newValue}
//    }
    /// Returns true if `icon` has been explicitly set.
//    public var hasIcon: Bool {return _storage._icon != nil}
    /// Clears the value of `icon`. Subsequent reads from it will return its default value.
//    public mutating func clearIcon() {_uniqueStorage()._icon = nil}
//
//    public var title: String {
//      get {return _storage._title ?? String()}
//      set {_uniqueStorage()._title = newValue}
//    }
    /// Returns true if `title` has been explicitly set.
//    public var hasTitle: Bool {return _storage._title != nil}
    /// Clears the value of `title`. Subsequent reads from it will return its default value.
//    public mutating func clearTitle() {_uniqueStorage()._title = nil}
//
//    public var larkTag: LarkNCExtensionPB_Entities_Tag {
//      get {return _storage._larkTag ?? .unknownTag}
//      set {_uniqueStorage()._larkTag = newValue}
//    }
    /// Returns true if `larkTag` has been explicitly set.
//    public var hasLarkTag: Bool {return _storage._larkTag != nil}
    /// Clears the value of `larkTag`. Subsequent reads from it will return its default value.
//    public mutating func clearLarkTag() {_uniqueStorage()._larkTag = nil}
//
//    public var childComponentID: String {
//      get {return _storage._childComponentID ?? String()}
//      set {_uniqueStorage()._childComponentID = newValue}
//    }
    /// Returns true if `childComponentID` has been explicitly set.
//    public var hasChildComponentID: Bool {return _storage._childComponentID != nil}
    /// Clears the value of `childComponentID`. Subsequent reads from it will return its default value.
//    public mutating func clearChildComponentID() {_uniqueStorage()._childComponentID = nil}
//
//    public var isNeedCopyLink: Bool {
//      get {return _storage._isNeedCopyLink ?? true}
//      set {_uniqueStorage()._isNeedCopyLink = newValue}
//    }
    /// Returns true if `isNeedCopyLink` has been explicitly set.
//    public var hasIsNeedCopyLink: Bool {return _storage._isNeedCopyLink != nil}
    /// Clears the value of `isNeedCopyLink`. Subsequent reads from it will return its default value.
//    public mutating func clearIsNeedCopyLink() {_uniqueStorage()._isNeedCopyLink = nil}
//
//    public var isNeedClose: Bool {
//      get {return _storage._isNeedClose ?? true}
//      set {_uniqueStorage()._isNeedClose = newValue}
//    }
    /// Returns true if `isNeedClose` has been explicitly set.
//    public var hasIsNeedClose: Bool {return _storage._isNeedClose != nil}
    /// Clears the value of `isNeedClose`. Subsequent reads from it will return its default value.
//    public mutating func clearIsNeedClose() {_uniqueStorage()._isNeedClose = nil}
//
//    public var theme: LarkNCExtensionPB_Entities_URLPreviewComponent.Theme {
//      get {return _storage._theme ?? .light}
//      set {_uniqueStorage()._theme = newValue}
//    }
    /// Returns true if `theme` has been explicitly set.
//    public var hasTheme: Bool {return _storage._theme != nil}
    /// Clears the value of `theme`. Subsequent reads from it will return its default value.
//    public mutating func clearTheme() {_uniqueStorage()._theme = nil}
//
//    public var type: LarkNCExtensionPB_Entities_URLPreviewComponent.PreviewHeaderProperty.TypeEnum {
//      get {return _storage._type ?? .normal}
//      set {_uniqueStorage()._type = newValue}
//    }
    /// Returns true if `type` has been explicitly set.
//    public var hasType: Bool {return _storage._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {_uniqueStorage()._type = nil}
//
//    public var tagColor: LarkNCExtensionPB_Entities_ThemeColor {
//      get {return _storage._tagColor ?? LarkNCExtensionPB_Entities_ThemeColor()}
//      set {_uniqueStorage()._tagColor = newValue}
//    }
    /// Returns true if `tagColor` has been explicitly set.
//    public var hasTagColor: Bool {return _storage._tagColor != nil}
    /// Clears the value of `tagColor`. Subsequent reads from it will return its default value.
//    public mutating func clearTagColor() {_uniqueStorage()._tagColor = nil}
//
//    public var tagTextColor: LarkNCExtensionPB_Entities_ThemeColor {
//      get {return _storage._tagTextColor ?? LarkNCExtensionPB_Entities_ThemeColor()}
//      set {_uniqueStorage()._tagTextColor = newValue}
//    }
    /// Returns true if `tagTextColor` has been explicitly set.
//    public var hasTagTextColor: Bool {return _storage._tagTextColor != nil}
    /// Clears the value of `tagTextColor`. Subsequent reads from it will return its default value.
//    public mutating func clearTagTextColor() {_uniqueStorage()._tagTextColor = nil}
//
//    public var headerTag: String {
//      get {return _storage._headerTag ?? String()}
//      set {_uniqueStorage()._headerTag = newValue}
//    }
    /// Returns true if `headerTag` has been explicitly set.
//    public var hasHeaderTag: Bool {return _storage._headerTag != nil}
    /// Clears the value of `headerTag`. Subsequent reads from it will return its default value.
//    public mutating func clearHeaderTag() {_uniqueStorage()._headerTag = nil}
//
//    public var faviconURL: String {
//      get {return _storage._faviconURL ?? String()}
//      set {_uniqueStorage()._faviconURL = newValue}
//    }
    /// Returns true if `faviconURL` has been explicitly set.
//    public var hasFaviconURL: Bool {return _storage._faviconURL != nil}
    /// Clears the value of `faviconURL`. Subsequent reads from it will return its default value.
//    public mutating func clearFaviconURL() {_uniqueStorage()._faviconURL = nil}
//
    /// 作用于icon_key和favicon_url：icon颜色，有值时需要对icon染色
//    public var iconColor: LarkNCExtensionPB_Entities_ThemeColor {
//      get {return _storage._iconColor ?? LarkNCExtensionPB_Entities_ThemeColor()}
//      set {_uniqueStorage()._iconColor = newValue}
//    }
    /// Returns true if `iconColor` has been explicitly set.
//    public var hasIconColor: Bool {return _storage._iconColor != nil}
    /// Clears the value of `iconColor`. Subsequent reads from it will return its default value.
//    public mutating func clearIconColor() {_uniqueStorage()._iconColor = nil}
//
    /// ud_icon；优先级：ud_icon > icon_key > favicon_url
//    public var udIcon: LarkNCExtensionPB_Entities_UDIcon {
//      get {return _storage._udIcon ?? LarkNCExtensionPB_Entities_UDIcon()}
//      set {_uniqueStorage()._udIcon = newValue}
//    }
    /// Returns true if `udIcon` has been explicitly set.
//    public var hasUdIcon: Bool {return _storage._udIcon != nil}
    /// Clears the value of `udIcon`. Subsequent reads from it will return its default value.
//    public mutating func clearUdIcon() {_uniqueStorage()._udIcon = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum TypeEnum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//
      /// 对应外部链接，不具备特殊布局规则
//      case normal // = 0
//
      /// 对应有大标题的，具备特殊布局规则
//      case headlines // = 1
//
//      public init() {
//        self = .normal
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .normal
//        case 1: self = .headlines
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .normal: return 0
//        case .headlines: return 1
//        }
//      }
//
//    }
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct RichTextProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var richtext: LarkNCExtensionPB_Entities_RichText {
//      get {return _storage._richtext ?? LarkNCExtensionPB_Entities_RichText()}
//      set {_uniqueStorage()._richtext = newValue}
//    }
    /// Returns true if `richtext` has been explicitly set.
//    public var hasRichtext: Bool {return _storage._richtext != nil}
    /// Clears the value of `richtext`. Subsequent reads from it will return its default value.
//    public mutating func clearRichtext() {_uniqueStorage()._richtext = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct ImageProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var image: LarkNCExtensionPB_Entities_ImageSetV2 {
//      get {return _storage._image ?? LarkNCExtensionPB_Entities_ImageSetV2()}
//      set {_uniqueStorage()._image = newValue}
//    }
    /// Returns true if `image` has been explicitly set.
//    public var hasImage: Bool {return _storage._image != nil}
    /// Clears the value of `image`. Subsequent reads from it will return its default value.
//    public mutating func clearImage() {_uniqueStorage()._image = nil}
//
//    public var alt: String {
//      get {return _storage._alt ?? String()}
//      set {_uniqueStorage()._alt = newValue}
//    }
    /// Returns true if `alt` has been explicitly set.
//    public var hasAlt: Bool {return _storage._alt != nil}
    /// Clears the value of `alt`. Subsequent reads from it will return its default value.
//    public mutating func clearAlt() {_uniqueStorage()._alt = nil}
//
    /// 优先级：ud_icon > image
//    public var udIcon: LarkNCExtensionPB_Entities_UDIcon {
//      get {return _storage._udIcon ?? LarkNCExtensionPB_Entities_UDIcon()}
//      set {_uniqueStorage()._udIcon = newValue}
//    }
    /// Returns true if `udIcon` has been explicitly set.
//    public var hasUdIcon: Bool {return _storage._udIcon != nil}
    /// Clears the value of `udIcon`. Subsequent reads from it will return its default value.
//    public mutating func clearUdIcon() {_uniqueStorage()._udIcon = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
  /// 该组件默认会调用一个固定接口分页拉取全量chatter_ids
  /// 接口描述 @zhaohe
//  public struct ChattersPreviewProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var theme: LarkNCExtensionPB_Entities_URLPreviewComponent.Theme {
//      get {return _theme ?? .light}
//      set {_theme = newValue}
//    }
    /// Returns true if `theme` has been explicitly set.
//    public var hasTheme: Bool {return self._theme != nil}
    /// Clears the value of `theme`. Subsequent reads from it will return its default value.
//    public mutating func clearTheme() {self._theme = nil}
//
    /// 全量Chatter的总数
//    public var chattersCount: Int32 {
//      get {return _chattersCount ?? 0}
//      set {_chattersCount = newValue}
//    }
    /// Returns true if `chattersCount` has been explicitly set.
//    public var hasChattersCount: Bool {return self._chattersCount != nil}
    /// Clears the value of `chattersCount`. Subsequent reads from it will return its default value.
//    public mutating func clearChattersCount() {self._chattersCount = nil}
//
//    public var chatterInfos: [LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty.ChatterInfo] = []
//
//    public var maxShowCount: Int32 {
//      get {return _maxShowCount ?? 5}
//      set {_maxShowCount = newValue}
//    }
    /// Returns true if `maxShowCount` has been explicitly set.
//    public var hasMaxShowCount: Bool {return self._maxShowCount != nil}
    /// Clears the value of `maxShowCount`. Subsequent reads from it will return its default value.
//    public mutating func clearMaxShowCount() {self._maxShowCount = nil}
//
//    public var chattersMode: LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty.ChattersMode {
//      get {return _chattersMode ?? .dynamic}
//      set {_chattersMode = newValue}
//    }
    /// Returns true if `chattersMode` has been explicitly set.
//    public var hasChattersMode: Bool {return self._chattersMode != nil}
    /// Clears the value of `chattersMode`. Subsequent reads from it will return its default value.
//    public mutating func clearChattersMode() {self._chattersMode = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum ChattersMode: LarkHTTP.Enum {
//      public typealias RawValue = Int
//
      /// 静态拉取，不会访问业务方实时拉取数据
//      case `static` // = 0
//
      /// 动态拉取，实时拉取数据
//      case dynamic // = 1
//
//      public init() {
//        self = .static
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .static
//        case 1: self = .dynamic
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .static: return 0
//        case .dynamic: return 1
//        }
//      }
//
//    }
//
//    public struct ChatterInfo {
      // LarkHTTP.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the LarkHTTP library for
      // methods supported on all messages.
//
//      public var avatar: LarkNCExtensionPB_Entities_Image {
//        get {return _storage._avatar ?? LarkNCExtensionPB_Entities_Image()}
//        set {_uniqueStorage()._avatar = newValue}
//      }
      /// Returns true if `avatar` has been explicitly set.
//      public var hasAvatar: Bool {return _storage._avatar != nil}
      /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//      public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
//      public var chatterID: String {
//        get {return _storage._chatterID ?? String()}
//        set {_uniqueStorage()._chatterID = newValue}
//      }
      /// Returns true if `chatterID` has been explicitly set.
//      public var hasChatterID: Bool {return _storage._chatterID != nil}
      /// Clears the value of `chatterID`. Subsequent reads from it will return its default value.
//      public mutating func clearChatterID() {_uniqueStorage()._chatterID = nil}
//
//      public var unknownFields = LarkHTTP.UnknownStorage()
//
//      public init() {}
//
//      fileprivate var _storage = _StorageClass.defaultInstance
//    }
//
//    public init() {}
//
//    fileprivate var _theme: LarkNCExtensionPB_Entities_URLPreviewComponent.Theme? = nil
//    fileprivate var _chattersCount: Int32? = nil
//    fileprivate var _maxShowCount: Int32? = nil
//    fileprivate var _chattersMode: LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty.ChattersMode? = nil
//  }
//
//  public struct ButtonProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var icon: LarkNCExtensionPB_Entities_ImageSetV2 {
//      get {return _storage._icon ?? LarkNCExtensionPB_Entities_ImageSetV2()}
//      set {_uniqueStorage()._icon = newValue}
//    }
    /// Returns true if `icon` has been explicitly set.
//    public var hasIcon: Bool {return _storage._icon != nil}
    /// Clears the value of `icon`. Subsequent reads from it will return its default value.
//    public mutating func clearIcon() {_uniqueStorage()._icon = nil}
//
//    public var text: String {
//      get {return _storage._text ?? String()}
//      set {_uniqueStorage()._text = newValue}
//    }
    /// Returns true if `text` has been explicitly set.
//    public var hasText: Bool {return _storage._text != nil}
    /// Clears the value of `text`. Subsequent reads from it will return its default value.
//    public mutating func clearText() {_uniqueStorage()._text = nil}
//
    /// LTR is icon left and text right.
//    public var direction: LarkNCExtensionPB_Entities_URLPreviewComponent.Direction {
//      get {return _storage._direction ?? .ltr}
//      set {_uniqueStorage()._direction = newValue}
//    }
    /// Returns true if `direction` has been explicitly set.
//    public var hasDirection: Bool {return _storage._direction != nil}
    /// Clears the value of `direction`. Subsequent reads from it will return its default value.
//    public mutating func clearDirection() {_uniqueStorage()._direction = nil}
//
//    public var actionID: String {
//      get {return _storage._actionID ?? String()}
//      set {_uniqueStorage()._actionID = newValue}
//    }
    /// Returns true if `actionID` has been explicitly set.
//    public var hasActionID: Bool {return _storage._actionID != nil}
    /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
//    public mutating func clearActionID() {_uniqueStorage()._actionID = nil}
//
//    public var isDisable: Bool {
//      get {return _storage._isDisable ?? false}
//      set {_uniqueStorage()._isDisable = newValue}
//    }
    /// Returns true if `isDisable` has been explicitly set.
//    public var hasIsDisable: Bool {return _storage._isDisable != nil}
    /// Clears the value of `isDisable`. Subsequent reads from it will return its default value.
//    public mutating func clearIsDisable() {_uniqueStorage()._isDisable = nil}
//
    /// 优先级：ud_icon > icon
//    public var udIcon: LarkNCExtensionPB_Entities_UDIcon {
//      get {return _storage._udIcon ?? LarkNCExtensionPB_Entities_UDIcon()}
//      set {_uniqueStorage()._udIcon = newValue}
//    }
    /// Returns true if `udIcon` has been explicitly set.
//    public var hasUdIcon: Bool {return _storage._udIcon != nil}
    /// Clears the value of `udIcon`. Subsequent reads from it will return its default value.
//    public mutating func clearUdIcon() {_uniqueStorage()._udIcon = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct IconButtonProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var icon: LarkNCExtensionPB_Entities_ImageSetV2 {
//      get {return _storage._icon ?? LarkNCExtensionPB_Entities_ImageSetV2()}
//      set {_uniqueStorage()._icon = newValue}
//    }
    /// Returns true if `icon` has been explicitly set.
//    public var hasIcon: Bool {return _storage._icon != nil}
    /// Clears the value of `icon`. Subsequent reads from it will return its default value.
//    public mutating func clearIcon() {_uniqueStorage()._icon = nil}
//
//    public var actionID: String {
//      get {return _storage._actionID ?? String()}
//      set {_uniqueStorage()._actionID = newValue}
//    }
    /// Returns true if `actionID` has been explicitly set.
//    public var hasActionID: Bool {return _storage._actionID != nil}
    /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
//    public mutating func clearActionID() {_uniqueStorage()._actionID = nil}
//
//    public var isDisable: Bool {
//      get {return _storage._isDisable ?? false}
//      set {_uniqueStorage()._isDisable = newValue}
//    }
    /// Returns true if `isDisable` has been explicitly set.
//    public var hasIsDisable: Bool {return _storage._isDisable != nil}
    /// Clears the value of `isDisable`. Subsequent reads from it will return its default value.
//    public mutating func clearIsDisable() {_uniqueStorage()._isDisable = nil}
//
//    public var alt: String {
//      get {return _storage._alt ?? String()}
//      set {_uniqueStorage()._alt = newValue}
//    }
    /// Returns true if `alt` has been explicitly set.
//    public var hasAlt: Bool {return _storage._alt != nil}
    /// Clears the value of `alt`. Subsequent reads from it will return its default value.
//    public mutating func clearAlt() {_uniqueStorage()._alt = nil}
//
    /// 优先级：ud_icon > icon
//    public var udIcon: LarkNCExtensionPB_Entities_UDIcon {
//      get {return _storage._udIcon ?? LarkNCExtensionPB_Entities_UDIcon()}
//      set {_uniqueStorage()._udIcon = newValue}
//    }
    /// Returns true if `udIcon` has been explicitly set.
//    public var hasUdIcon: Bool {return _storage._udIcon != nil}
    /// Clears the value of `udIcon`. Subsequent reads from it will return its default value.
//    public mutating func clearUdIcon() {_uniqueStorage()._udIcon = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct TextButtonProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var text: String {
//      get {return _text ?? String()}
//      set {_text = newValue}
//    }
    /// Returns true if `text` has been explicitly set.
//    public var hasText: Bool {return self._text != nil}
    /// Clears the value of `text`. Subsequent reads from it will return its default value.
//    public mutating func clearText() {self._text = nil}
//
//    public var actionID: String {
//      get {return _actionID ?? String()}
//      set {_actionID = newValue}
//    }
    /// Returns true if `actionID` has been explicitly set.
//    public var hasActionID: Bool {return self._actionID != nil}
    /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
//    public mutating func clearActionID() {self._actionID = nil}
//
//    public var isDisable: Bool {
//      get {return _isDisable ?? false}
//      set {_isDisable = newValue}
//    }
    /// Returns true if `isDisable` has been explicitly set.
//    public var hasIsDisable: Bool {return self._isDisable != nil}
    /// Clears the value of `isDisable`. Subsequent reads from it will return its default value.
//    public mutating func clearIsDisable() {self._isDisable = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _text: String? = nil
//    fileprivate var _actionID: String? = nil
//    fileprivate var _isDisable: Bool? = nil
//  }
//
//  public struct TimeProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var startTimeStamp: Int64 {
//      get {return _startTimeStamp ?? 0}
//      set {_startTimeStamp = newValue}
//    }
    /// Returns true if `startTimeStamp` has been explicitly set.
//    public var hasStartTimeStamp: Bool {return self._startTimeStamp != nil}
    /// Clears the value of `startTimeStamp`. Subsequent reads from it will return its default value.
//    public mutating func clearStartTimeStamp() {self._startTimeStamp = nil}
//
//    public var isCountdown: Bool {
//      get {return _isCountdown ?? false}
//      set {_isCountdown = newValue}
//    }
    /// Returns true if `isCountdown` has been explicitly set.
//    public var hasIsCountdown: Bool {return self._isCountdown != nil}
    /// Clears the value of `isCountdown`. Subsequent reads from it will return its default value.
//    public mutating func clearIsCountdown() {self._isCountdown = nil}
//
//    public var ntpActionID: String {
//      get {return _ntpActionID ?? String()}
//      set {_ntpActionID = newValue}
//    }
    /// Returns true if `ntpActionID` has been explicitly set.
//    public var hasNtpActionID: Bool {return self._ntpActionID != nil}
    /// Clears the value of `ntpActionID`. Subsequent reads from it will return its default value.
//    public mutating func clearNtpActionID() {self._ntpActionID = nil}
//
//    public var isEnd: Bool {
//      get {return _isEnd ?? false}
//      set {_isEnd = newValue}
//    }
    /// Returns true if `isEnd` has been explicitly set.
//    public var hasIsEnd: Bool {return self._isEnd != nil}
    /// Clears the value of `isEnd`. Subsequent reads from it will return its default value.
//    public mutating func clearIsEnd() {self._isEnd = nil}
//
//    public var endTimeStamp: Int64 {
//      get {return _endTimeStamp ?? 0}
//      set {_endTimeStamp = newValue}
//    }
    /// Returns true if `endTimeStamp` has been explicitly set.
//    public var hasEndTimeStamp: Bool {return self._endTimeStamp != nil}
    /// Clears the value of `endTimeStamp`. Subsequent reads from it will return its default value.
//    public mutating func clearEndTimeStamp() {self._endTimeStamp = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _startTimeStamp: Int64? = nil
//    fileprivate var _isCountdown: Bool? = nil
//    fileprivate var _ntpActionID: String? = nil
//    fileprivate var _isEnd: Bool? = nil
//    fileprivate var _endTimeStamp: Int64? = nil
//  }
//
//  public struct TextProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var text: String {
//      get {return _text ?? String()}
//      set {_text = newValue}
//    }
    /// Returns true if `text` has been explicitly set.
//    public var hasText: Bool {return self._text != nil}
    /// Clears the value of `text`. Subsequent reads from it will return its default value.
//    public mutating func clearText() {self._text = nil}
//
//    public var numberOfLines: Int32 {
//      get {return _numberOfLines ?? 0}
//      set {_numberOfLines = newValue}
//    }
    /// Returns true if `numberOfLines` has been explicitly set.
//    public var hasNumberOfLines: Bool {return self._numberOfLines != nil}
    /// Clears the value of `numberOfLines`. Subsequent reads from it will return its default value.
//    public mutating func clearNumberOfLines() {self._numberOfLines = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _text: String? = nil
//    fileprivate var _numberOfLines: Int32? = nil
//  }
//
//  public struct TagListProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var tags: [String] = []
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public struct SpinButtonProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var icon: LarkNCExtensionPB_Entities_ImageSetV2 {
//      get {return _storage._icon ?? LarkNCExtensionPB_Entities_ImageSetV2()}
//      set {_uniqueStorage()._icon = newValue}
//    }
    /// Returns true if `icon` has been explicitly set.
//    public var hasIcon: Bool {return _storage._icon != nil}
    /// Clears the value of `icon`. Subsequent reads from it will return its default value.
//    public mutating func clearIcon() {_uniqueStorage()._icon = nil}
//
//    public var items: [LarkNCExtensionPB_Entities_URLPreviewComponent.Item] {
//      get {return _storage._items}
//      set {_uniqueStorage()._items = newValue}
//    }
//
//    public var selectedIndex: Int64 {
//      get {return _storage._selectedIndex ?? 0}
//      set {_uniqueStorage()._selectedIndex = newValue}
//    }
    /// Returns true if `selectedIndex` has been explicitly set.
//    public var hasSelectedIndex: Bool {return _storage._selectedIndex != nil}
    /// Clears the value of `selectedIndex`. Subsequent reads from it will return its default value.
//    public mutating func clearSelectedIndex() {_uniqueStorage()._selectedIndex = nil}
//
    /// LTR is icon left and text right.
//    public var direction: LarkNCExtensionPB_Entities_URLPreviewComponent.Direction {
//      get {return _storage._direction ?? .ltr}
//      set {_uniqueStorage()._direction = newValue}
//    }
    /// Returns true if `direction` has been explicitly set.
//    public var hasDirection: Bool {return _storage._direction != nil}
    /// Clears the value of `direction`. Subsequent reads from it will return its default value.
//    public mutating func clearDirection() {_uniqueStorage()._direction = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct AvatarProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var chatterInfo: LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty.ChatterInfo {
//      get {return _storage._chatterInfo ?? LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty.ChatterInfo()}
//      set {_uniqueStorage()._chatterInfo = newValue}
//    }
    /// Returns true if `chatterInfo` has been explicitly set.
//    public var hasChatterInfo: Bool {return _storage._chatterInfo != nil}
    /// Clears the value of `chatterInfo`. Subsequent reads from it will return its default value.
//    public mutating func clearChatterInfo() {_uniqueStorage()._chatterInfo = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public struct ChatterInfo {
      // LarkHTTP.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the LarkHTTP library for
      // methods supported on all messages.
//
//      public var avatar: LarkNCExtensionPB_Entities_Image {
//        get {return _storage._avatar ?? LarkNCExtensionPB_Entities_Image()}
//        set {_uniqueStorage()._avatar = newValue}
//      }
      /// Returns true if `avatar` has been explicitly set.
//      public var hasAvatar: Bool {return _storage._avatar != nil}
      /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//      public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
//      public var chatterID: String {
//        get {return _storage._chatterID ?? String()}
//        set {_uniqueStorage()._chatterID = newValue}
//      }
      /// Returns true if `chatterID` has been explicitly set.
//      public var hasChatterID: Bool {return _storage._chatterID != nil}
      /// Clears the value of `chatterID`. Subsequent reads from it will return its default value.
//      public mutating func clearChatterID() {_uniqueStorage()._chatterID = nil}
//
//      public var unknownFields = LarkHTTP.UnknownStorage()
//
//      public init() {}
//
//      fileprivate var _storage = _StorageClass.defaultInstance
//    }
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct VideoProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 视频网站
//    public var site: LarkNCExtensionPB_Entities_URLPreviewComponent.VideoProperty.Site {
//      get {return _storage._site ?? .unknown}
//      set {_uniqueStorage()._site = newValue}
//    }
    /// Returns true if `site` has been explicitly set.
//    public var hasSite: Bool {return _storage._site != nil}
    /// Clears the value of `site`. Subsequent reads from it will return its default value.
//    public mutating func clearSite() {_uniqueStorage()._site = nil}
//
    /// 视频封面图，优先级：cover_image > cover_image_url
//    public var coverImage: LarkNCExtensionPB_Entities_ImageSetV2 {
//      get {return _storage._coverImage ?? LarkNCExtensionPB_Entities_ImageSetV2()}
//      set {_uniqueStorage()._coverImage = newValue}
//    }
    /// Returns true if `coverImage` has been explicitly set.
//    public var hasCoverImage: Bool {return _storage._coverImage != nil}
    /// Clears the value of `coverImage`. Subsequent reads from it will return its default value.
//    public mutating func clearCoverImage() {_uniqueStorage()._coverImage = nil}
//
    /// 视频时长，单位second
//    public var duration: Int64 {
//      get {return _storage._duration ?? 0}
//      set {_uniqueStorage()._duration = newValue}
//    }
    /// Returns true if `duration` has been explicitly set.
//    public var hasDuration: Bool {return _storage._duration != nil}
    /// Clears the value of `duration`. Subsequent reads from it will return its default value.
//    public mutating func clearDuration() {_uniqueStorage()._duration = nil}
//
    /// 视频源地址
//    public var srcURL: String {
//      get {return _storage._srcURL ?? String()}
//      set {_uniqueStorage()._srcURL = newValue}
//    }
    /// Returns true if `srcURL` has been explicitly set.
//    public var hasSrcURL: Bool {return _storage._srcURL != nil}
    /// Clears the value of `srcURL`. Subsequent reads from it will return its default value.
//    public mutating func clearSrcURL() {_uniqueStorage()._srcURL = nil}
//
    /// 视频 id
//    public var vid: String {
//      get {return _storage._vid ?? String()}
//      set {_uniqueStorage()._vid = newValue}
//    }
    /// Returns true if `vid` has been explicitly set.
//    public var hasVid: Bool {return _storage._vid != nil}
    /// Clears the value of `vid`. Subsequent reads from it will return its default value.
//    public mutating func clearVid() {_uniqueStorage()._vid = nil}
//
    /// iframe 播放地址
//    public var iframeURL: String {
//      get {return _storage._iframeURL ?? String()}
//      set {_uniqueStorage()._iframeURL = newValue}
//    }
    /// Returns true if `iframeURL` has been explicitly set.
//    public var hasIframeURL: Bool {return _storage._iframeURL != nil}
    /// Clears the value of `iframeURL`. Subsequent reads from it will return its default value.
//    public mutating func clearIframeURL() {_uniqueStorage()._iframeURL = nil}
//
    /// 视频封面图，优先级：cover_image > cover_image_url
//    public var coverImageURL: String {
//      get {return _storage._coverImageURL ?? String()}
//      set {_uniqueStorage()._coverImageURL = newValue}
//    }
    /// Returns true if `coverImageURL` has been explicitly set.
//    public var hasCoverImageURL: Bool {return _storage._coverImageURL != nil}
    /// Clears the value of `coverImageURL`. Subsequent reads from it will return its default value.
//    public mutating func clearCoverImageURL() {_uniqueStorage()._coverImageURL = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Site: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//      case xigua // = 1
//      case douyin // = 2
//      case huoshan // = 3
//      case youtube // = 4
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .xigua
//        case 2: self = .douyin
//        case 3: self = .huoshan
//        case 4: self = .youtube
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .xigua: return 1
//        case .douyin: return 2
//        case .huoshan: return 3
//        case .youtube: return 4
//        }
//      }
//
//    }
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct CardContainerProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 移动端使用
//    public var maskColor: LarkNCExtensionPB_Entities_ThemeColor {
//      get {return _storage._maskColor ?? LarkNCExtensionPB_Entities_ThemeColor()}
//      set {_uniqueStorage()._maskColor = newValue}
//    }
    /// Returns true if `maskColor` has been explicitly set.
//    public var hasMaskColor: Bool {return _storage._maskColor != nil}
    /// Clears the value of `maskColor`. Subsequent reads from it will return its default value.
//    public mutating func clearMaskColor() {_uniqueStorage()._maskColor = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct DocImageProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 文档类型
//    public var docType: LarkNCExtensionPB_Entities_DocType {
//      get {return _docType ?? .unknownDocType}
//      set {_docType = newValue}
//    }
    /// Returns true if `docType` has been explicitly set.
//    public var hasDocType: Bool {return self._docType != nil}
    /// Clears the value of `docType`. Subsequent reads from it will return its default value.
//    public mutating func clearDocType() {self._docType = nil}
//
    /// 缩略图未加密URL
//    public var thumbnailURL: String {
//      get {return _thumbnailURL ?? String()}
//      set {_thumbnailURL = newValue}
//    }
    /// Returns true if `thumbnailURL` has been explicitly set.
//    public var hasThumbnailURL: Bool {return self._thumbnailURL != nil}
    /// Clears the value of `thumbnailURL`. Subsequent reads from it will return its default value.
//    public mutating func clearThumbnailURL() {self._thumbnailURL = nil}
//
    /// 缩略图加密URL
//    public var secretURL: String {
//      get {return _secretURL ?? String()}
//      set {_secretURL = newValue}
//    }
    /// Returns true if `secretURL` has been explicitly set.
//    public var hasSecretURL: Bool {return self._secretURL != nil}
    /// Clears the value of `secretURL`. Subsequent reads from it will return its default value.
//    public mutating func clearSecretURL() {self._secretURL = nil}
//
    /// 加密方式，0:无加密，1:GCM，2: CBC，3:SM4GCM(国密算法)
//    public var secretType: Int32 {
//      get {return _secretType ?? 0}
//      set {_secretType = newValue}
//    }
    /// Returns true if `secretType` has been explicitly set.
//    public var hasSecretType: Bool {return self._secretType != nil}
    /// Clears the value of `secretType`. Subsequent reads from it will return its default value.
//    public mutating func clearSecretType() {self._secretType = nil}
//
    /// 密钥，加密方式为 1/2/3 时必须有值
//    public var secretKey: String {
//      get {return _secretKey ?? String()}
//      set {_secretKey = newValue}
//    }
    /// Returns true if `secretKey` has been explicitly set.
//    public var hasSecretKey: Bool {return self._secretKey != nil}
    /// Clears the value of `secretKey`. Subsequent reads from it will return its default value.
//    public mutating func clearSecretKey() {self._secretKey = nil}
//
    /// 随机数，加密方式为 1/3 时必须有值
//    public var secretNonce: String {
//      get {return _secretNonce ?? String()}
//      set {_secretNonce = newValue}
//    }
    /// Returns true if `secretNonce` has been explicitly set.
//    public var hasSecretNonce: Bool {return self._secretNonce != nil}
    /// Clears the value of `secretNonce`. Subsequent reads from it will return its default value.
//    public mutating func clearSecretNonce() {self._secretNonce = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _docType: LarkNCExtensionPB_Entities_DocType? = nil
//    fileprivate var _thumbnailURL: String? = nil
//    fileprivate var _secretURL: String? = nil
//    fileprivate var _secretType: Int32? = nil
//    fileprivate var _secretKey: String? = nil
//    fileprivate var _secretNonce: String? = nil
//  }
//
  /// https://bytedance.feishu.cn/docx/doxcnHZibKQvfabHiC7MkgzrUsg
//  public struct LoadingProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.SizeLevel: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.ValueType: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.Direction: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.Orientation: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.Justify: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.Align: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.Theme: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.FontType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_URL {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var url: String {
//    get {return _url ?? String()}
//    set {_url = newValue}
//  }
  /// Returns true if `url` has been explicitly set.
//  public var hasURL: Bool {return self._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
//  public mutating func clearURL() {self._url = nil}
//
//  public var ios: String {
//    get {return _ios ?? String()}
//    set {_ios = newValue}
//  }
  /// Returns true if `ios` has been explicitly set.
//  public var hasIos: Bool {return self._ios != nil}
  /// Clears the value of `ios`. Subsequent reads from it will return its default value.
//  public mutating func clearIos() {self._ios = nil}
//
//  public var android: String {
//    get {return _android ?? String()}
//    set {_android = newValue}
//  }
  /// Returns true if `android` has been explicitly set.
//  public var hasAndroid: Bool {return self._android != nil}
  /// Clears the value of `android`. Subsequent reads from it will return its default value.
//  public mutating func clearAndroid() {self._android = nil}
//
//  public var pc: String {
//    get {return _pc ?? String()}
//    set {_pc = newValue}
//  }
  /// Returns true if `pc` has been explicitly set.
//  public var hasPc: Bool {return self._pc != nil}
  /// Clears the value of `pc`. Subsequent reads from it will return its default value.
//  public mutating func clearPc() {self._pc = nil}
//
//  public var web: String {
//    get {return _web ?? String()}
//    set {_web = newValue}
//  }
  /// Returns true if `web` has been explicitly set.
//  public var hasWeb: Bool {return self._web != nil}
  /// Clears the value of `web`. Subsequent reads from it will return its default value.
//  public mutating func clearWeb() {self._web = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _url: String? = nil
//  fileprivate var _ios: String? = nil
//  fileprivate var _android: String? = nil
//  fileprivate var _pc: String? = nil
//  fileprivate var _web: String? = nil
//}

public struct LarkNCExtensionPB_Entities_Message {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id ?? String()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var type: LarkNCExtensionPB_Entities_Message.TypeEnum {
    get {return _storage._type ?? .unknown}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}

  public var fromID: String {
    get {return _storage._fromID ?? String()}
    set {_uniqueStorage()._fromID = newValue}
  }
  /// Returns true if `fromID` has been explicitly set.
  public var hasFromID: Bool {return _storage._fromID != nil}
  /// Clears the value of `fromID`. Subsequent reads from it will return its default value.
//  public mutating func clearFromID() {_uniqueStorage()._fromID = nil}

  public var createTime: Int64 {
    get {return _storage._createTime ?? 0}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  public var content: Data {
    get {return _storage._content ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return _storage._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {_uniqueStorage()._content = nil}

  public var status: LarkNCExtensionPB_Entities_Message.Status {
    get {return _storage._status ?? .unknownStatus}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var fromType: LarkNCExtensionPB_Entities_Message.FromType {
    get {return _storage._fromType ?? .user}
    set {_uniqueStorage()._fromType = newValue}
  }
  /// Returns true if `fromType` has been explicitly set.
//  public var hasFromType: Bool {return _storage._fromType != nil}
  /// Clears the value of `fromType`. Subsequent reads from it will return its default value.
//  public mutating func clearFromType() {_uniqueStorage()._fromType = nil}

  /// 本消息的根级祖先消息 id
  public var rootID: String {
    get {return _storage._rootID ?? String()}
    set {_uniqueStorage()._rootID = newValue}
  }
  /// Returns true if `rootID` has been explicitly set.
//  public var hasRootID: Bool {return _storage._rootID != nil}
  /// Clears the value of `rootID`. Subsequent reads from it will return its default value.
//  public mutating func clearRootID() {_uniqueStorage()._rootID = nil}

  /// 本消息的父级消息 id
  public var parentID: String {
    get {return _storage._parentID ?? String()}
    set {_uniqueStorage()._parentID = newValue}
  }
  /// Returns true if `parentID` has been explicitly set.
  public var hasParentID: Bool {return _storage._parentID != nil}
  /// Clears the value of `parentID`. Subsequent reads from it will return its default value.
//  public mutating func clearParentID() {_uniqueStorage()._parentID = nil}

  /// 3.42.0 开始不用设置
  public var chatID: String {
    get {return _storage._chatID ?? String()}
    set {_uniqueStorage()._chatID = newValue}
  }
  /// Returns true if `chatID` has been explicitly set.
  public var hasChatID: Bool {return _storage._chatID != nil}
  /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatID() {_uniqueStorage()._chatID = nil}

  /// 已废弃
  public var lastModifyTime: Int64 {
    get {return _storage._lastModifyTime ?? 0}
    set {_uniqueStorage()._lastModifyTime = newValue}
  }
  /// Returns true if `lastModifyTime` has been explicitly set.
//  public var hasLastModifyTime: Bool {return _storage._lastModifyTime != nil}
  /// Clears the value of `lastModifyTime`. Subsequent reads from it will return its default value.
//  public mutating func clearLastModifyTime() {_uniqueStorage()._lastModifyTime = nil}

  /// client id 客户端为每个消息生成的唯一 id，客户端用此尝试超时重发，服务端要对此去重
  public var cid: String {
    get {return _storage._cid ?? String()}
    set {_uniqueStorage()._cid = newValue}
  }
  /// Returns true if `cid` has been explicitly set.
//  public var hasCid: Bool {return _storage._cid != nil}
  /// Clears the value of `cid`. Subsequent reads from it will return its default value.
//  public mutating func clearCid() {_uniqueStorage()._cid = nil}

  public var position: Int32 {
    get {return _storage._position ?? 0}
    set {_uniqueStorage()._position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return _storage._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
//  public mutating func clearPosition() {_uniqueStorage()._position = nil}

  public var updateTime: Int64 {
    get {return _storage._updateTime ?? 0}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  /// 是否通知
  public var isNotified: Bool {
    get {return _storage._isNotified ?? false}
    set {_uniqueStorage()._isNotified = newValue}
  }
  /// Returns true if `isNotified` has been explicitly set.
//  public var hasIsNotified: Bool {return _storage._isNotified != nil}
  /// Clears the value of `isNotified`. Subsequent reads from it will return its default value.
//  public mutating func clearIsNotified() {_uniqueStorage()._isNotified = nil}

  /// 回复数
  public var replyCount: String {
    get {return _storage._replyCount ?? String()}
    set {_uniqueStorage()._replyCount = newValue}
  }
  /// Returns true if `replyCount` has been explicitly set.
//  public var hasReplyCount: Bool {return _storage._replyCount != nil}
  /// Clears the value of `replyCount`. Subsequent reads from it will return its default value.
//  public mutating func clearReplyCount() {_uniqueStorage()._replyCount = nil}

  /// 转发相关
  public var parentSourceMessageID: String {
    get {return _storage._parentSourceMessageID ?? String()}
    set {_uniqueStorage()._parentSourceMessageID = newValue}
  }
  /// Returns true if `parentSourceMessageID` has been explicitly set.
//  public var hasParentSourceMessageID: Bool {return _storage._parentSourceMessageID != nil}
  /// Clears the value of `parentSourceMessageID`. Subsequent reads from it will return its default value.
//  public mutating func clearParentSourceMessageID() {_uniqueStorage()._parentSourceMessageID = nil}

  /// 转发相关
  public var rootSourceMessageID: String {
    get {return _storage._rootSourceMessageID ?? String()}
    set {_uniqueStorage()._rootSourceMessageID = newValue}
  }
  /// Returns true if `rootSourceMessageID` has been explicitly set.
//  public var hasRootSourceMessageID: Bool {return _storage._rootSourceMessageID != nil}
  /// Clears the value of `rootSourceMessageID`. Subsequent reads from it will return its default value.
//  public mutating func clearRootSourceMessageID() {_uniqueStorage()._rootSourceMessageID = nil}

  ///该消息是否被DING过
  public var isDing: Bool {
    get {return _storage._isDing ?? false}
    set {_uniqueStorage()._isDing = newValue}
  }
  /// Returns true if `isDing` has been explicitly set.
//  public var hasIsDing: Bool {return _storage._isDing != nil}
  /// Clears the value of `isDing`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDing() {_uniqueStorage()._isDing = nil}

  /// 旧 thread 相关 已废弃
  public var threadID: String {
    get {return _storage._threadID ?? String()}
    set {_uniqueStorage()._threadID = newValue}
  }
  /// Returns true if `threadID` has been explicitly set.
  public var hasThreadID: Bool {return _storage._threadID != nil}
  /// Clears the value of `threadID`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadID() {_uniqueStorage()._threadID = nil}

  ///是否发送到chat thread 相关 已废弃
  public var sendToChat: Bool {
    get {return _storage._sendToChat ?? false}
    set {_uniqueStorage()._sendToChat = newValue}
  }
  /// Returns true if `sendToChat` has been explicitly set.
//  public var hasSendToChat: Bool {return _storage._sendToChat != nil}
  /// Clears the value of `sendToChat`. Subsequent reads from it will return its default value.
//  public mutating func clearSendToChat() {_uniqueStorage()._sendToChat = nil}

  ///长消息在推送时，会被截断。 True: 消息被截断。
  public var isTruncated: Bool {
    get {return _storage._isTruncated ?? false}
    set {_uniqueStorage()._isTruncated = newValue}
  }
  /// Returns true if `isTruncated` has been explicitly set.
//  public var hasIsTruncated: Bool {return _storage._isTruncated != nil}
  /// Clears the value of `isTruncated`. Subsequent reads from it will return its default value.
//  public mutating func clearIsTruncated() {_uniqueStorage()._isTruncated = nil}

  public var isRemoved: Bool {
    get {return _storage._isRemoved ?? false}
    set {_uniqueStorage()._isRemoved = newValue}
  }
  /// Returns true if `isRemoved` has been explicitly set.
//  public var hasIsRemoved: Bool {return _storage._isRemoved != nil}
  /// Clears the value of `isRemoved`. Subsequent reads from it will return its default value.
//  public mutating func clearIsRemoved() {_uniqueStorage()._isRemoved = nil}

  public var channelID: String {
    get {return _storage._channelID ?? String()}
    set {_uniqueStorage()._channelID = newValue}
  }
  /// Returns true if `channelID` has been explicitly set.
//  public var hasChannelID: Bool {return _storage._channelID != nil}
  /// Clears the value of `channelID`. Subsequent reads from it will return its default value.
//  public mutating func clearChannelID() {_uniqueStorage()._channelID = nil}

  public var channelType: LarkNCExtensionPB_Entities_ChannelType {
    get {return _storage._channelType ?? .chatChannel}
    set {_uniqueStorage()._channelType = newValue}
  }
  /// Returns true if `channelType` has been explicitly set.
//  public var hasChannelType: Bool {return _storage._channelType != nil}
  /// Clears the value of `channelType`. Subsequent reads from it will return its default value.
//  public mutating func clearChannelType() {_uniqueStorage()._channelType = nil}

  ///消息是否对接收者可见, 已废弃，新版本请使用is_visible_v2字段
  public var isVisible: Bool {
    get {return _storage._isVisible ?? true}
    set {_uniqueStorage()._isVisible = newValue}
  }
  /// Returns true if `isVisible` has been explicitly set.
//  public var hasIsVisible: Bool {return _storage._isVisible != nil}
  /// Clears the value of `isVisible`. Subsequent reads from it will return its default value.
//  public mutating func clearIsVisible() {_uniqueStorage()._isVisible = nil}

  public var cryptoInfo: LarkNCExtensionPB_Entities_CryptoInfo {
    get {return _storage._cryptoInfo ?? LarkNCExtensionPB_Entities_CryptoInfo()}
    set {_uniqueStorage()._cryptoInfo = newValue}
  }
  /// Returns true if `cryptoInfo` has been explicitly set.
//  public var hasCryptoInfo: Bool {return _storage._cryptoInfo != nil}
  /// Clears the value of `cryptoInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearCryptoInfo() {_uniqueStorage()._cryptoInfo = nil}

  /// message在其所属Thread中的position
  public var threadPosition: Int32 {
    get {return _storage._threadPosition ?? 0}
    set {_uniqueStorage()._threadPosition = newValue}
  }
  /// Returns true if `threadPosition` has been explicitly set.
  public var hasThreadPosition: Bool {return _storage._threadPosition != nil}
  /// Clears the value of `threadPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadPosition() {_uniqueStorage()._threadPosition = nil}

  ///如果消息被删除，删除者id
  public var removerID: Int64 {
    get {return _storage._removerID ?? 0}
    set {_uniqueStorage()._removerID = newValue}
  }
  /// Returns true if `removerID` has been explicitly set.
//  public var hasRemoverID: Bool {return _storage._removerID != nil}
  /// Clears the value of `removerID`. Subsequent reads from it will return its default value.
//  public mutating func clearRemoverID() {_uniqueStorage()._removerID = nil}

  ///当时用户设置的目标语言
  public var translateLanguage: String {
    get {return _storage._translateLanguage ?? String()}
    set {_uniqueStorage()._translateLanguage = newValue}
  }
  /// Returns true if `translateLanguage` has been explicitly set.
//  public var hasTranslateLanguage: Bool {return _storage._translateLanguage != nil}
  /// Clears the value of `translateLanguage`. Subsequent reads from it will return its default value.
//  public mutating func clearTranslateLanguage() {_uniqueStorage()._translateLanguage = nil}

  ///删除者类型
  public var removerType: LarkNCExtensionPB_Entities_Message.RemoverType {
    get {return _storage._removerType ?? .unknownRemovertype}
    set {_uniqueStorage()._removerType = newValue}
  }
  /// Returns true if `removerType` has been explicitly set.
//  public var hasRemoverType: Bool {return _storage._removerType != nil}
  /// Clears the value of `removerType`. Subsequent reads from it will return its default value.
//  public mutating func clearRemoverType() {_uniqueStorage()._removerType = nil}

  public var i18NInfo: LarkNCExtensionPB_Entities_I18nInfo {
    get {return _storage._i18NInfo ?? LarkNCExtensionPB_Entities_I18nInfo()}
    set {_uniqueStorage()._i18NInfo = newValue}
  }
  /// Returns true if `i18NInfo` has been explicitly set.
//  public var hasI18NInfo: Bool {return _storage._i18NInfo != nil}
  /// Clears the value of `i18NInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearI18NInfo() {_uniqueStorage()._i18NInfo = nil}

  /// 消息对应的不算badged个数, deprecated
  public var noBadgedCount: Int32 {
    get {return _storage._noBadgedCount ?? 0}
    set {_uniqueStorage()._noBadgedCount = newValue}
  }
  /// Returns true if `noBadgedCount` has been explicitly set.
//  public var hasNoBadgedCount: Bool {return _storage._noBadgedCount != nil}
  /// Clears the value of `noBadgedCount`. Subsequent reads from it will return its default value.
//  public mutating func clearNoBadgedCount() {_uniqueStorage()._noBadgedCount = nil}

  public var isBadged: Bool {
    get {return _storage._isBadged ?? false}
    set {_uniqueStorage()._isBadged = newValue}
  }
  /// Returns true if `isBadged` has been explicitly set.
//  public var hasIsBadged: Bool {return _storage._isBadged != nil}
  /// Clears the value of `isBadged`. Subsequent reads from it will return its default value.
//  public mutating func clearIsBadged() {_uniqueStorage()._isBadged = nil}

  public var badgeCount: Int32 {
    get {return _storage._badgeCount ?? 0}
    set {_uniqueStorage()._badgeCount = newValue}
  }
  /// Returns true if `badgeCount` has been explicitly set.
//  public var hasBadgeCount: Bool {return _storage._badgeCount != nil}
  /// Clears the value of `badgeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearBadgeCount() {_uniqueStorage()._badgeCount = nil}

  public var threadBadgeCount: Int32 {
    get {return _storage._threadBadgeCount ?? 0}
    set {_uniqueStorage()._threadBadgeCount = newValue}
  }
  /// Returns true if `threadBadgeCount` has been explicitly set.
//  public var hasThreadBadgeCount: Bool {return _storage._threadBadgeCount != nil}
  /// Clears the value of `threadBadgeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadBadgeCount() {_uniqueStorage()._threadBadgeCount = nil}

  public var threadReplyCount: Int32 {
    get {return _storage._threadReplyCount ?? 0}
    set {_uniqueStorage()._threadReplyCount = newValue}
  }
  /// Returns true if `threadReplyCount` has been explicitly set.
//  public var hasThreadReplyCount: Bool {return _storage._threadReplyCount != nil}
  /// Clears the value of `threadReplyCount`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadReplyCount() {_uniqueStorage()._threadReplyCount = nil}

  /// 不在消息所在群里,但被at的chatter id集合
  public var atOutChatterIds: [String] {
    get {return _storage._atOutChatterIds}
    set {_uniqueStorage()._atOutChatterIds = newValue}
  }

  /// 消息的主语种， 为富文本节点的内容拼接后的语种
  public var messageLanguage: String {
    get {return _storage._messageLanguage ?? String()}
    set {_uniqueStorage()._messageLanguage = newValue}
  }
  /// Returns true if `messageLanguage` has been explicitly set.
//  public var hasMessageLanguage: Bool {return _storage._messageLanguage != nil}
  /// Clears the value of `messageLanguage`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageLanguage() {_uniqueStorage()._messageLanguage = nil}

  /// 原文&译文展示规则
  public var translateMessageDisplayRule: LarkNCExtensionPB_Entities_TranslateMessageDisplayRule {
    get {return _storage._translateMessageDisplayRule ?? LarkNCExtensionPB_Entities_TranslateMessageDisplayRule()}
    set {_uniqueStorage()._translateMessageDisplayRule = newValue}
  }
  /// Returns true if `translateMessageDisplayRule` has been explicitly set.
//  public var hasTranslateMessageDisplayRule: Bool {return _storage._translateMessageDisplayRule != nil}
  /// Clears the value of `translateMessageDisplayRule`. Subsequent reads from it will return its default value.
//  public mutating func clearTranslateMessageDisplayRule() {_uniqueStorage()._translateMessageDisplayRule = nil}

  /// 该消息是否已被无痕删除
  public var isNoTraceRemoved: Bool {
    get {return _storage._isNoTraceRemoved ?? false}
    set {_uniqueStorage()._isNoTraceRemoved = newValue}
  }
  /// Returns true if `isNoTraceRemoved` has been explicitly set.
//  public var hasIsNoTraceRemoved: Bool {return _storage._isNoTraceRemoved != nil}
  /// Clears the value of `isNoTraceRemoved`. Subsequent reads from it will return its default value.
//  public mutating func clearIsNoTraceRemoved() {_uniqueStorage()._isNoTraceRemoved = nil}

  /// 该消息是否已被接收方自动翻译
  public var isAutoTranslatedByReceiver: Bool {
    get {return _storage._isAutoTranslatedByReceiver ?? false}
    set {_uniqueStorage()._isAutoTranslatedByReceiver = newValue}
  }
  /// Returns true if `isAutoTranslatedByReceiver` has been explicitly set.
//  public var hasIsAutoTranslatedByReceiver: Bool {return _storage._isAutoTranslatedByReceiver != nil}
  /// Clears the value of `isAutoTranslatedByReceiver`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAutoTranslatedByReceiver() {_uniqueStorage()._isAutoTranslatedByReceiver = nil}

  ///消息审查评级 客户端无需关心该字段，已废弃
  public var sensitivity: LarkNCExtensionPB_Entities_Message.MessageSensitivity {
    get {return _storage._sensitivity ?? .safe}
    set {_uniqueStorage()._sensitivity = newValue}
  }
  /// Returns true if `sensitivity` has been explicitly set.
  public var hasSensitivity: Bool {return _storage._sensitivity != nil}
  /// Clears the value of `sensitivity`. Subsequent reads from it will return its default value.
//  public mutating func clearSensitivity() {_uniqueStorage()._sensitivity = nil}

  /// 消息是否对接收者可见
  public var isVisibleV2: Bool {
    get {return _storage._isVisibleV2 ?? true}
    set {_uniqueStorage()._isVisibleV2 = newValue}
  }
  /// Returns true if `isVisibleV2` has been explicitly set.
//  public var hasIsVisibleV2: Bool {return _storage._isVisibleV2 != nil}
  /// Clears the value of `isVisibleV2`. Subsequent reads from it will return its default value.
//  public mutating func clearIsVisibleV2() {_uniqueStorage()._isVisibleV2 = nil}

  ///翻译来源
  public var translateSource: LarkNCExtensionPB_Entities_TranslateSource {
    get {return _storage._translateSource ?? .unknownTranslateSource}
    set {_uniqueStorage()._translateSource = newValue}
  }
  /// Returns true if `translateSource` has been explicitly set.
//  public var hasTranslateSource: Bool {return _storage._translateSource != nil}
  /// Clears the value of `translateSource`. Subsequent reads from it will return its default value.
//  public mutating func clearTranslateSource() {_uniqueStorage()._translateSource = nil}

  ///chat类型 ！！注意：老消息这个字段为空，从11月12日起的消息才有该字段
  public var chatType: LarkNCExtensionPB_Entities_Message.ChatType {
    get {return _storage._chatType ?? .unknownChatType}
    set {_uniqueStorage()._chatType = newValue}
  }
  /// Returns true if `chatType` has been explicitly set.
  public var hasChatType: Bool {return _storage._chatType != nil}
  /// Clears the value of `chatType`. Subsequent reads from it will return its default value.
//  public mutating func clearChatType() {_uniqueStorage()._chatType = nil}

  /// Original sender ID of a message, used for forward feature
  public var originalSenderID: String {
    get {return _storage._originalSenderID ?? String()}
    set {_uniqueStorage()._originalSenderID = newValue}
  }
  /// Returns true if `originalSenderID` has been explicitly set.
//  public var hasOriginalSenderID: Bool {return _storage._originalSenderID != nil}
  /// Clears the value of `originalSenderID`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginalSenderID() {_uniqueStorage()._originalSenderID = nil}

  ///对于转发的包含静态资源的消息，标识其上游消息是否被撤回。！！注意，sdk先支持上，3.5 之前服务端会支持
  public var isStaticResourceMessageDeleted: Bool {
    get {return _storage._isStaticResourceMessageDeleted ?? false}
    set {_uniqueStorage()._isStaticResourceMessageDeleted = newValue}
  }
  /// Returns true if `isStaticResourceMessageDeleted` has been explicitly set.
//  public var hasIsStaticResourceMessageDeleted: Bool {return _storage._isStaticResourceMessageDeleted != nil}
  /// Clears the value of `isStaticResourceMessageDeleted`. Subsequent reads from it will return its default value.
//  public mutating func clearIsStaticResourceMessageDeleted() {_uniqueStorage()._isStaticResourceMessageDeleted = nil}

  /// key图片标识， value是否可以被翻译
  public var imagesTranslationAbility: Dictionary<String,LarkNCExtensionPB_Entities_ImageTranslationAbility> {
    get {return _storage._imagesTranslationAbility}
    set {_uniqueStorage()._imagesTranslationAbility = newValue}
  }

  /// message 的版本标识，参见 https://bytedance.feishu.cn/docs/doccn2uPLoigiW7vU5Y5IKEORje
  public var version: LarkNCExtensionPB_Entities_Message.Version {
    get {return _storage._version ?? LarkNCExtensionPB_Entities_Message.Version()}
    set {_uniqueStorage()._version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {_uniqueStorage()._version = nil}

  /// key图片标识， value是否可以被翻译
  public var imagesTranslationAbilityV2: Dictionary<String,LarkNCExtensionPB_Entities_ImageTranslationAbilityV2> {
    get {return _storage._imagesTranslationAbilityV2}
    set {_uniqueStorage()._imagesTranslationAbilityV2 = newValue}
  }

  /// 参考: https://bytedance.feishu.cn/docs/doccn3YqfUveylP5aTOxKfTlpob#3VsTgM
  /// 对 [message + 关联数据] 建立一个版本(每个 message 一个 pipe )
  /// 考虑到时序、主从延迟、时钟误差等存在多种影响因素: 使用 idgen 生成一个 id, 代表 pipe 的最新值
  /// 客户端使用此字段获取 message_pipe 的后续变更
  public var messagePipeVersion: Int64 {
    get {return _storage._messagePipeVersion ?? 0}
    set {_uniqueStorage()._messagePipeVersion = newValue}
  }
  /// Returns true if `messagePipeVersion` has been explicitly set.
//  public var hasMessagePipeVersion: Bool {return _storage._messagePipeVersion != nil}
  /// Clears the value of `messagePipeVersion`. Subsequent reads from it will return its default value.
//  public mutating func clearMessagePipeVersion() {_uniqueStorage()._messagePipeVersion = nil}

  ///标识消息是否为逐条转发, 用户客户端区别于用户发送的消息不消badge
  public var isBatchCopyMessages: Bool {
    get {return _storage._isBatchCopyMessages ?? false}
    set {_uniqueStorage()._isBatchCopyMessages = newValue}
  }
  /// Returns true if `isBatchCopyMessages` has been explicitly set.
//  public var hasIsBatchCopyMessages: Bool {return _storage._isBatchCopyMessages != nil}
  /// Clears the value of `isBatchCopyMessages`. Subsequent reads from it will return its default value.
//  public mutating func clearIsBatchCopyMessages() {_uniqueStorage()._isBatchCopyMessages = nil}

  /// 匿名信息，属于 per user 信息，push 时，可以只对 owner 打包匿名信息; 出于端上性能考虑
  public var anonymousInfo: LarkNCExtensionPB_Entities_Message.AnonymousInfo {
    get {return _storage._anonymousInfo ?? LarkNCExtensionPB_Entities_Message.AnonymousInfo()}
    set {_uniqueStorage()._anonymousInfo = newValue}
  }
  /// Returns true if `anonymousInfo` has been explicitly set.
//  public var hasAnonymousInfo: Bool {return _storage._anonymousInfo != nil}
  /// Clears the value of `anonymousInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearAnonymousInfo() {_uniqueStorage()._anonymousInfo = nil}

  ///post, test, system 消息都有可能有预览挂载点
  public var urlPreviewHangPointMap: Dictionary<String,LarkNCExtensionPB_Entities_UrlPreviewHangPoint> {
    get {return _storage._urlPreviewHangPointMap}
    set {_uniqueStorage()._urlPreviewHangPointMap = newValue}
  }

  /// 消息是否由接受者特别关注发送
  public var isSpecialFocus: Bool {
    get {return _storage._isSpecialFocus ?? false}
    set {_uniqueStorage()._isSpecialFocus = newValue}
  }
  /// Returns true if `isSpecialFocus` has been explicitly set.
//  public var hasIsSpecialFocus: Bool {return _storage._isSpecialFocus != nil}
  /// Clears the value of `isSpecialFocus`. Subsequent reads from it will return its default value.
//  public mutating func clearIsSpecialFocus() {_uniqueStorage()._isSpecialFocus = nil}

  /// 与消息内容有关的一些状态
  public var contentState: LarkNCExtensionPB_Entities_Message.ContentState {
    get {return _storage._contentState ?? LarkNCExtensionPB_Entities_Message.ContentState()}
    set {_uniqueStorage()._contentState = newValue}
  }
  /// Returns true if `contentState` has been explicitly set.
//  public var hasContentState: Bool {return _storage._contentState != nil}
  /// Clears the value of `contentState`. Subsequent reads from it will return its default value.
//  public mutating func clearContentState() {_uniqueStorage()._contentState = nil}

  /// 是否包含 doc 链接 (ccm 接入 url 中台后，包含 ccm 链接的消息字段值为 true)
  public var isIncludeDocURL: Bool {
    get {return _storage._isIncludeDocURL ?? false}
    set {_uniqueStorage()._isIncludeDocURL = newValue}
  }
  /// Returns true if `isIncludeDocURL` has been explicitly set.
//  public var hasIsIncludeDocURL: Bool {return _storage._isIncludeDocURL != nil}
  /// Clears the value of `isIncludeDocURL`. Subsequent reads from it will return its default value.
//  public mutating func clearIsIncludeDocURL() {_uniqueStorage()._isIncludeDocURL = nil}

  /// 消息加密时使用到的主密钥ID
  public var cipherID: Int64 {
    get {return _storage._cipherID ?? 0}
    set {_uniqueStorage()._cipherID = newValue}
  }
  /// Returns true if `cipherID` has been explicitly set.
//  public var hasCipherID: Bool {return _storage._cipherID != nil}
  /// Clears the value of `cipherID`. Subsequent reads from it will return its default value.
//  public mutating func clearCipherID() {_uniqueStorage()._cipherID = nil}

  /// post和text等类型消息字符长度，目前用于开启自动翻译功能判断
  public var characterLength: Int32 {
    get {return _storage._characterLength ?? 0}
    set {_uniqueStorage()._characterLength = newValue}
  }
  /// Returns true if `characterLength` has been explicitly set.
//  public var hasCharacterLength: Bool {return _storage._characterLength != nil}
  /// Clears the value of `characterLength`. Subsequent reads from it will return its default value.
//  public mutating func clearCharacterLength() {_uniqueStorage()._characterLength = nil}

  /// 对话群中 reply_in_thread 特性中根消息 or 回复消息
  public var threadMessageType: LarkNCExtensionPB_Entities_Message.ThreadMessageType {
    get {return _storage._threadMessageType ?? .unknownThreadMessage}
    set {_uniqueStorage()._threadMessageType = newValue}
  }
  /// Returns true if `threadMessageType` has been explicitly set.
//  public var hasThreadMessageType: Bool {return _storage._threadMessageType != nil}
  /// Clears the value of `threadMessageType`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadMessageType() {_uniqueStorage()._threadMessageType = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum TypeEnum: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknown // = 0

    /// TEXT_IMAGE 类型已经删去 reseved 1;
    case post // = 2
    case file // = 3
    case text // = 4
    case image // = 5
    case system // = 6
    case audio // = 7
    case email // = 8
    case shareGroupChat // = 9
    case sticker // = 10
    case mergeForward // = 11
    case calendar // = 12
    case cloudFile // = 13
    case card // = 14
    case media // = 15
    case shareCalendarEvent // = 16
    case hongbao // = 17
    case generalCalendar // = 18
    case videoChat // = 19
    case location // = 20

    /// 消息类型21已被预订
    case commercializedHongbao // = 22
    case shareUserCard // = 23
    case todo // = 24

    /// 文件夹
    case folder // = 25

    /// 诊断消息
    case diagnose // = 26

    ///投票消息
    case vote // = 27

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 2: self = .post
      case 3: self = .file
      case 4: self = .text
      case 5: self = .image
      case 6: self = .system
      case 7: self = .audio
      case 8: self = .email
      case 9: self = .shareGroupChat
      case 10: self = .sticker
      case 11: self = .mergeForward
      case 12: self = .calendar
      case 13: self = .cloudFile
      case 14: self = .card
      case 15: self = .media
      case 16: self = .shareCalendarEvent
      case 17: self = .hongbao
      case 18: self = .generalCalendar
      case 19: self = .videoChat
      case 20: self = .location
      case 22: self = .commercializedHongbao
      case 23: self = .shareUserCard
      case 24: self = .todo
      case 25: self = .folder
      case 26: self = .diagnose
      case 27: self = .vote
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .post: return 2
      case .file: return 3
      case .text: return 4
      case .image: return 5
      case .system: return 6
      case .audio: return 7
      case .email: return 8
      case .shareGroupChat: return 9
      case .sticker: return 10
      case .mergeForward: return 11
      case .calendar: return 12
      case .cloudFile: return 13
      case .card: return 14
      case .media: return 15
      case .shareCalendarEvent: return 16
      case .hongbao: return 17
      case .generalCalendar: return 18
      case .videoChat: return 19
      case .location: return 20
      case .commercializedHongbao: return 22
      case .shareUserCard: return 23
      case .todo: return 24
      case .folder: return 25
      case .diagnose: return 26
      case .vote: return 27
      }
    }

  }

  public enum FromType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case user // = 1
    case bot // = 2

    public init() {
      self = .user
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .user
      case 2: self = .bot
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .user: return 1
      case .bot: return 2
      }
    }

  }

  public enum Status: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownStatus // = 0
    case normal // = 1
    case deleted // = 2
    case modified // = 3

    public init() {
      self = .unknownStatus
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownStatus
      case 1: self = .normal
      case 2: self = .deleted
      case 3: self = .modified
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownStatus: return 0
      case .normal: return 1
      case .deleted: return 2
      case .modified: return 3
      }
    }

  }

  public enum RemoverType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownRemovertype // = 0
    case groupowner // = 1
    case sysadmin // = 2
    case groupadmin // = 3

    public init() {
      self = .unknownRemovertype
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownRemovertype
      case 1: self = .groupowner
      case 2: self = .sysadmin
      case 3: self = .groupadmin
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownRemovertype: return 0
      case .groupowner: return 1
      case .sysadmin: return 2
      case .groupadmin: return 3
      }
    }

  }

  public enum MessageSensitivity: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownSensitivity // = 0
    case safe // = 1
    case dangerous // = 2

    public init() {
      self = .unknownSensitivity
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownSensitivity
      case 1: self = .safe
      case 2: self = .dangerous
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownSensitivity: return 0
      case .safe: return 1
      case .dangerous: return 2
      }
    }

  }

  public enum ChatType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownChatType // = 0
    case p2P // = 1
    case group // = 2
    case topicGroup // = 3

    public init() {
      self = .unknownChatType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownChatType
      case 1: self = .p2P
      case 2: self = .group
      case 3: self = .topicGroup
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownChatType: return 0
      case .p2P: return 1
      case .group: return 2
      case .topicGroup: return 3
      }
    }

  }

  public enum ContentDeleteType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownDeleteType // = 0
    case removed // = 1
    case replaced // = 2

    public init() {
      self = .unknownDeleteType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownDeleteType
      case 1: self = .removed
      case 2: self = .replaced
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownDeleteType: return 0
      case .removed: return 1
      case .replaced: return 2
      }
    }

  }

  /// reply_in_thread 场景下的话题消息类型
  public enum ThreadMessageType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownThreadMessage // = 0
    case threadRootMessage // = 1
    case threadReplyMessage // = 2

    public init() {
      self = .unknownThreadMessage
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownThreadMessage
      case 1: self = .threadRootMessage
      case 2: self = .threadReplyMessage
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownThreadMessage: return 0
      case .threadRootMessage: return 1
      case .threadReplyMessage: return 2
      }
    }

  }

  public struct Version {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// version for other fields of message
    public var contentVersion: Int32 {
      get {return _contentVersion ?? 0}
      set {_contentVersion = newValue}
    }
    /// Returns true if `contentVersion` has been explicitly set.
//    public var hasContentVersion: Bool {return self._contentVersion != nil}
    /// Clears the value of `contentVersion`. Subsequent reads from it will return its default value.
//    public mutating func clearContentVersion() {self._contentVersion = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _contentVersion: Int32? = nil
  }

  public struct AnonymousInfo {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var isAnonymous: Bool {
      get {return _isAnonymous ?? false}
      set {_isAnonymous = newValue}
    }
    /// Returns true if `isAnonymous` has been explicitly set.
//    public var hasIsAnonymous: Bool {return self._isAnonymous != nil}
    /// Clears the value of `isAnonymous`. Subsequent reads from it will return its default value.
//    public mutating func clearIsAnonymous() {self._isAnonymous = nil}

    public var isSender: Bool {
      get {return _isSender ?? false}
      set {_isSender = newValue}
    }
    /// Returns true if `isSender` has been explicitly set.
//    public var hasIsSender: Bool {return self._isSender != nil}
    /// Clears the value of `isSender`. Subsequent reads from it will return its default value.
//    public mutating func clearIsSender() {self._isSender = nil}

    /// 用户对应的匿名id，端上在匿名场景下识别并做出相应动作
    public var anonymousChatterID: String {
      get {return _anonymousChatterID ?? String()}
      set {_anonymousChatterID = newValue}
    }
    /// Returns true if `anonymousChatterID` has been explicitly set.
//    public var hasAnonymousChatterID: Bool {return self._anonymousChatterID != nil}
    /// Clears the value of `anonymousChatterID`. Subsequent reads from it will return its default value.
//    public mutating func clearAnonymousChatterID() {self._anonymousChatterID = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _isAnonymous: Bool? = nil
    fileprivate var _isSender: Bool? = nil
    fileprivate var _anonymousChatterID: String? = nil
  }

  /// 与消息内容有关的一些状态
  public struct ContentState {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// 消息内容删除方式(removed | replaced)，目前仅与【数据保险箱】需求有关
    public var contentDeleteType: LarkNCExtensionPB_Entities_Message.ContentDeleteType {
      get {return _contentDeleteType ?? .unknownDeleteType}
      set {_contentDeleteType = newValue}
    }
    /// Returns true if `contentDeleteType` has been explicitly set.
//    public var hasContentDeleteType: Bool {return self._contentDeleteType != nil}
    /// Clears the value of `contentDeleteType`. Subsequent reads from it will return its default value.
//    public mutating func clearContentDeleteType() {self._contentDeleteType = nil}

    /// 标识【密钥删除】需求中由于解密失败导致无法获取具体内容，由服务端替换为默认Content
    public var isDecryptFail: Bool {
      get {return _isDecryptFail ?? false}
      set {_isDecryptFail = newValue}
    }
    /// Returns true if `isDecryptFail` has been explicitly set.
//    public var hasIsDecryptFail: Bool {return self._isDecryptFail != nil}
    /// Clears the value of `isDecryptFail`. Subsequent reads from it will return its default value.
//    public mutating func clearIsDecryptFail() {self._isDecryptFail = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _contentDeleteType: LarkNCExtensionPB_Entities_Message.ContentDeleteType? = nil
    fileprivate var _isDecryptFail: Bool? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_Message.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Message.FromType: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Message.Status: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Message.RemoverType: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Message.MessageSensitivity: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Message.ChatType: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Message.ContentDeleteType: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Message.ThreadMessageType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

///消息被撤回的状态
//public struct LarkNCExtensionPB_Entities_MessageExtendInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 被群主撤回
//  public var isGroupDeletedBitMap: Bool {
//    get {return _isGroupDeletedBitMap ?? false}
//    set {_isGroupDeletedBitMap = newValue}
//  }
  /// Returns true if `isGroupDeletedBitMap` has been explicitly set.
//  public var hasIsGroupDeletedBitMap: Bool {return self._isGroupDeletedBitMap != nil}
  /// Clears the value of `isGroupDeletedBitMap`. Subsequent reads from it will return its default value.
//  public mutating func clearIsGroupDeletedBitMap() {self._isGroupDeletedBitMap = nil}
//
  /// 无痕撤回
//  public var isNoTraceRemovedBitMap: Bool {
//    get {return _isNoTraceRemovedBitMap ?? false}
//    set {_isNoTraceRemovedBitMap = newValue}
//  }
  /// Returns true if `isNoTraceRemovedBitMap` has been explicitly set.
//  public var hasIsNoTraceRemovedBitMap: Bool {return self._isNoTraceRemovedBitMap != nil}
  /// Clears the value of `isNoTraceRemovedBitMap`. Subsequent reads from it will return its default value.
//  public mutating func clearIsNoTraceRemovedBitMap() {self._isNoTraceRemovedBitMap = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _isGroupDeletedBitMap: Bool? = nil
//  fileprivate var _isNoTraceRemovedBitMap: Bool? = nil
//}

public struct LarkNCExtensionPB_Entities_TranslateMessageDisplayRule {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var rule: LarkNCExtensionPB_Entities_DisplayRule {
    get {return _rule ?? .unknownRule}
    set {_rule = newValue}
  }
  /// Returns true if `rule` has been explicitly set.
//  public var hasRule: Bool {return self._rule != nil}
  /// Clears the value of `rule`. Subsequent reads from it will return its default value.
//  public mutating func clearRule() {self._rule = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _rule: LarkNCExtensionPB_Entities_DisplayRule? = nil
}

//public struct LarkNCExtensionPB_Entities_MessageUrlPreview {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var messageID: String {
//    get {return _storage._messageID ?? String()}
//    set {_uniqueStorage()._messageID = newValue}
//  }
  /// Returns true if `messageID` has been explicitly set.
//  public var hasMessageID: Bool {return _storage._messageID != nil}
  /// Clears the value of `messageID`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageID() {_uniqueStorage()._messageID = nil}
//
  ///url在当前消息中序号，递增
//  public var sequenceID: Int32 {
//    get {return _storage._sequenceID ?? 0}
//    set {_uniqueStorage()._sequenceID = newValue}
//  }
  /// Returns true if `sequenceID` has been explicitly set.
//  public var hasSequenceID: Bool {return _storage._sequenceID != nil}
  /// Clears the value of `sequenceID`. Subsequent reads from it will return its default value.
//  public mutating func clearSequenceID() {_uniqueStorage()._sequenceID = nil}
//
//  public var url: String {
//    get {return _storage._url ?? String()}
//    set {_uniqueStorage()._url = newValue}
//  }
  /// Returns true if `url` has been explicitly set.
//  public var hasURL: Bool {return _storage._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
//  public mutating func clearURL() {_uniqueStorage()._url = nil}
//
//  public var offset: Int32 {
//    get {return _storage._offset ?? 0}
//    set {_uniqueStorage()._offset = newValue}
//  }
  /// Returns true if `offset` has been explicitly set.
//  public var hasOffset: Bool {return _storage._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
//  public mutating func clearOffset() {_uniqueStorage()._offset = nil}
//
//  public var count: Int32 {
//    get {return _storage._count ?? 0}
//    set {_uniqueStorage()._count = newValue}
//  }
  /// Returns true if `count` has been explicitly set.
//  public var hasCount: Bool {return _storage._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
//  public mutating func clearCount() {_uniqueStorage()._count = nil}
//
//  public var title: String {
//    get {return _storage._title ?? String()}
//    set {_uniqueStorage()._title = newValue}
//  }
  /// Returns true if `title` has been explicitly set.
//  public var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
//  public mutating func clearTitle() {_uniqueStorage()._title = nil}
//
//  public var abstract: String {
//    get {return _storage._abstract ?? String()}
//    set {_uniqueStorage()._abstract = newValue}
//  }
  /// Returns true if `abstract` has been explicitly set.
//  public var hasAbstract: Bool {return _storage._abstract != nil}
  /// Clears the value of `abstract`. Subsequent reads from it will return its default value.
//  public mutating func clearAbstract() {_uniqueStorage()._abstract = nil}
//
//  public var icon: LarkNCExtensionPB_Entities_ImageSet {
//    get {return _storage._icon ?? LarkNCExtensionPB_Entities_ImageSet()}
//    set {_uniqueStorage()._icon = newValue}
//  }
  /// Returns true if `icon` has been explicitly set.
//  public var hasIcon: Bool {return _storage._icon != nil}
  /// Clears the value of `icon`. Subsequent reads from it will return its default value.
//  public mutating func clearIcon() {_uniqueStorage()._icon = nil}
//
//  public var isDeleted: Bool {
//    get {return _storage._isDeleted ?? false}
//    set {_uniqueStorage()._isDeleted = newValue}
//  }
  /// Returns true if `isDeleted` has been explicitly set.
//  public var hasIsDeleted: Bool {return _storage._isDeleted != nil}
  /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDeleted() {_uniqueStorage()._isDeleted = nil}
//
  /// 是否有预览内容，已废弃
//  public var hasPreview_p: Bool {
//    get {return _storage._hasPreview_p ?? true}
//    set {_uniqueStorage()._hasPreview_p = newValue}
//  }
  /// Returns true if `hasPreview_p` has been explicitly set.
//  public var hasHasPreview_p: Bool {return _storage._hasPreview_p != nil}
  /// Clears the value of `hasPreview_p`. Subsequent reads from it will return its default value.
//  public mutating func clearHasPreview_p() {_uniqueStorage()._hasPreview_p = nil}
//
  /// 视频封面图
//  public var coverImage: LarkNCExtensionPB_Entities_ImageSet {
//    get {return _storage._coverImage ?? LarkNCExtensionPB_Entities_ImageSet()}
//    set {_uniqueStorage()._coverImage = newValue}
//  }
  /// Returns true if `coverImage` has been explicitly set.
//  public var hasCoverImage: Bool {return _storage._coverImage != nil}
  /// Clears the value of `coverImage`. Subsequent reads from it will return its default value.
//  public mutating func clearCoverImage() {_uniqueStorage()._coverImage = nil}
//
  /// 视频元信息
//  public var videoInfo: LarkNCExtensionPB_Entities_VideoInfo {
//    get {return _storage._videoInfo ?? LarkNCExtensionPB_Entities_VideoInfo()}
//    set {_uniqueStorage()._videoInfo = newValue}
//  }
  /// Returns true if `videoInfo` has been explicitly set.
//  public var hasVideoInfo: Bool {return _storage._videoInfo != nil}
  /// Clears the value of `videoInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearVideoInfo() {_uniqueStorage()._videoInfo = nil}
//
  /// 是否需要本地预览，默认不需要
//  public var needLocalPreview: Bool {
//    get {return _storage._needLocalPreview ?? false}
//    set {_uniqueStorage()._needLocalPreview = newValue}
//  }
  /// Returns true if `needLocalPreview` has been explicitly set.
//  public var hasNeedLocalPreview: Bool {return _storage._needLocalPreview != nil}
  /// Clears the value of `needLocalPreview`. Subsequent reads from it will return its default value.
//  public mutating func clearNeedLocalPreview() {_uniqueStorage()._needLocalPreview = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_VideoInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 视频网站
//  public var site: LarkNCExtensionPB_Entities_VideoInfo.Site {
//    get {return _site ?? .unknown}
//    set {_site = newValue}
//  }
  /// Returns true if `site` has been explicitly set.
//  public var hasSite: Bool {return self._site != nil}
  /// Clears the value of `site`. Subsequent reads from it will return its default value.
//  public mutating func clearSite() {self._site = nil}
//
  /// 视频源地址
//  public var srcURL: String {
//    get {return _srcURL ?? String()}
//    set {_srcURL = newValue}
//  }
  /// Returns true if `srcURL` has been explicitly set.
//  public var hasSrcURL: Bool {return self._srcURL != nil}
  /// Clears the value of `srcURL`. Subsequent reads from it will return its default value.
//  public mutating func clearSrcURL() {self._srcURL = nil}
//
  /// 视频 id
//  public var vid: String {
//    get {return _vid ?? String()}
//    set {_vid = newValue}
//  }
  /// Returns true if `vid` has been explicitly set.
//  public var hasVid: Bool {return self._vid != nil}
  /// Clears the value of `vid`. Subsequent reads from it will return its default value.
//  public mutating func clearVid() {self._vid = nil}
//
  /// iframe 播放地址
//  public var iframeURL: String {
//    get {return _iframeURL ?? String()}
//    set {_iframeURL = newValue}
//  }
  /// Returns true if `iframeURL` has been explicitly set.
//  public var hasIframeURL: Bool {return self._iframeURL != nil}
  /// Clears the value of `iframeURL`. Subsequent reads from it will return its default value.
//  public mutating func clearIframeURL() {self._iframeURL = nil}
//
  /// src_url 的过期时间 (单位: s)
//  public var expireTime: Int64 {
//    get {return _expireTime ?? 0}
//    set {_expireTime = newValue}
//  }
  /// Returns true if `expireTime` has been explicitly set.
//  public var hasExpireTime: Bool {return self._expireTime != nil}
  /// Clears the value of `expireTime`. Subsequent reads from it will return its default value.
//  public mutating func clearExpireTime() {self._expireTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum Site: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//    case xigua // = 1
//    case douyin // = 2
//    case huoshan // = 3
//    case youtube // = 4
//    case iqiyi // = 5
//    case youku // = 6
//    case qq // = 7
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .xigua
//      case 2: self = .douyin
//      case 3: self = .huoshan
//      case 4: self = .youtube
//      case 5: self = .iqiyi
//      case 6: self = .youku
//      case 7: self = .qq
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .xigua: return 1
//      case .douyin: return 2
//      case .huoshan: return 3
//      case .youtube: return 4
//      case .iqiyi: return 5
//      case .youku: return 6
//      case .qq: return 7
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _site: LarkNCExtensionPB_Entities_VideoInfo.Site? = nil
//  fileprivate var _srcURL: String? = nil
//  fileprivate var _vid: String? = nil
//  fileprivate var _iframeURL: String? = nil
//  fileprivate var _expireTime: Int64? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_VideoInfo.Site: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_DocEntity {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// RichTextElementID -> DocEntity
  public var elementEntityRef: Dictionary<String,LarkNCExtensionPB_Entities_DocEntity.ElementEntity> = [:]

  public var unknownFields = LarkHTTP.UnknownStorage()

  public struct ElementEntity {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var title: String {
      get {return _storage._title ?? String()}
      set {_uniqueStorage()._title = newValue}
    }
    /// Returns true if `title` has been explicitly set.
    public var hasTitle: Bool {return _storage._title != nil}
    /// Clears the value of `title`. Subsequent reads from it will return its default value.
//    public mutating func clearTitle() {_uniqueStorage()._title = nil}

    public var docType: LarkNCExtensionPB_Entities_DocType {
      get {return _storage._docType ?? .unknownDocType}
      set {_uniqueStorage()._docType = newValue}
    }
    /// Returns true if `docType` has been explicitly set.
    public var hasDocType: Bool {return _storage._docType != nil}
    /// Clears the value of `docType`. Subsequent reads from it will return its default value.
//    public mutating func clearDocType() {_uniqueStorage()._docType = nil}

    public var strDocType: String {
      get {return _storage._strDocType ?? String()}
      set {_uniqueStorage()._strDocType = newValue}
    }
    /// Returns true if `strDocType` has been explicitly set.
//    public var hasStrDocType: Bool {return _storage._strDocType != nil}
    /// Clears the value of `strDocType`. Subsequent reads from it will return its default value.
//    public mutating func clearStrDocType() {_uniqueStorage()._strDocType = nil}

    public var docToken: String {
      get {return _storage._docToken ?? String()}
      set {_uniqueStorage()._docToken = newValue}
    }
    /// Returns true if `docToken` has been explicitly set.
//    public var hasDocToken: Bool {return _storage._docToken != nil}
    /// Clears the value of `docToken`. Subsequent reads from it will return its default value.
//    public mutating func clearDocToken() {_uniqueStorage()._docToken = nil}

    public var icon: LarkNCExtensionPB_Entities_Icon {
      get {return _storage._icon ?? LarkNCExtensionPB_Entities_Icon()}
      set {_uniqueStorage()._icon = newValue}
    }
    /// Returns true if `icon` has been explicitly set.
    public var hasIcon: Bool {return _storage._icon != nil}
    /// Clears the value of `icon`. Subsequent reads from it will return its default value.
//    public mutating func clearIcon() {_uniqueStorage()._icon = nil}

    /// ......
    public var sortType: LarkNCExtensionPB_Entities_DocSortRuleType {
      get {return _storage._sortType ?? .defaultType}
      set {_uniqueStorage()._sortType = newValue}
    }
    /// Returns true if `sortType` has been explicitly set.
//    public var hasSortType: Bool {return _storage._sortType != nil}
    /// Clears the value of `sortType`. Subsequent reads from it will return its default value.
//    public mutating func clearSortType() {_uniqueStorage()._sortType = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// 缩写词
//public struct LarkNCExtensionPB_Entities_Abbreviation {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 一个缩写词多语义时，对应多个词条
//  public var abbrElementRef: Dictionary<String,LarkNCExtensionPB_Entities_Abbreviation.Abbrs> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public struct entity {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var abbrID: String {
//      get {return _storage._abbrID ?? String()}
//      set {_uniqueStorage()._abbrID = newValue}
//    }
    /// Returns true if `abbrID` has been explicitly set.
//    public var hasAbbrID: Bool {return _storage._abbrID != nil}
    /// Clears the value of `abbrID`. Subsequent reads from it will return its default value.
//    public mutating func clearAbbrID() {_uniqueStorage()._abbrID = nil}
//
//    public var abbrVersion: Int32 {
//      get {return _storage._abbrVersion ?? 0}
//      set {_uniqueStorage()._abbrVersion = newValue}
//    }
    /// Returns true if `abbrVersion` has been explicitly set.
//    public var hasAbbrVersion: Bool {return _storage._abbrVersion != nil}
    /// Clears the value of `abbrVersion`. Subsequent reads from it will return its default value.
//    public mutating func clearAbbrVersion() {_uniqueStorage()._abbrVersion = nil}
//
//    public var abbrType: LarkNCExtensionPB_Entities_Abbreviation.entity.TypeEnum {
//      get {return _storage._abbrType ?? .unkown}
//      set {_uniqueStorage()._abbrType = newValue}
//    }
    /// Returns true if `abbrType` has been explicitly set.
//    public var hasAbbrType: Bool {return _storage._abbrType != nil}
    /// Clears the value of `abbrType`. Subsequent reads from it will return its default value.
//    public mutating func clearAbbrType() {_uniqueStorage()._abbrType = nil}
//
//    public var datetime: LarkNCExtensionPB_Entities_Abbreviation.entity.DatetimeEntity {
//      get {return _storage._datetime ?? LarkNCExtensionPB_Entities_Abbreviation.entity.DatetimeEntity()}
//      set {_uniqueStorage()._datetime = newValue}
//    }
    /// Returns true if `datetime` has been explicitly set.
//    public var hasDatetime: Bool {return _storage._datetime != nil}
    /// Clears the value of `datetime`. Subsequent reads from it will return its default value.
//    public mutating func clearDatetime() {_uniqueStorage()._datetime = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum TypeEnum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unkown // = 0
//
      /// 企业实体词
//      case acronym // = 1
//
      /// 企业百科
//      case wiki // = 2
//
      /// 时间
//      case datetime // = 3
//
//      public init() {
//        self = .unkown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unkown
//        case 1: self = .acronym
//        case 2: self = .wiki
//        case 3: self = .datetime
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unkown: return 0
//        case .acronym: return 1
//        case .wiki: return 2
//        case .datetime: return 3
//        }
//      }
//
//    }
//
//    public struct DatetimeEntity {
      // LarkHTTP.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the LarkHTTP library for
      // methods supported on all messages.
//
      /// 时间戳, 单位: 秒
//      public var start: Int64 {
//        get {return _start ?? 0}
//        set {_start = newValue}
//      }
      /// Returns true if `start` has been explicitly set.
//      public var hasStart: Bool {return self._start != nil}
      /// Clears the value of `start`. Subsequent reads from it will return its default value.
//      public mutating func clearStart() {self._start = nil}
//
      /// 时间戳, 单位: 秒
//      public var end: Int64 {
//        get {return _end ?? 0}
//        set {_end = newValue}
//      }
      /// Returns true if `end` has been explicitly set.
//      public var hasEnd: Bool {return self._end != nil}
      /// Clears the value of `end`. Subsequent reads from it will return its default value.
//      public mutating func clearEnd() {self._end = nil}
//
      /// 单位: 秒
//      public var duration: Int32 {
//        get {return _duration ?? 0}
//        set {_duration = newValue}
//      }
      /// Returns true if `duration` has been explicitly set.
//      public var hasDuration: Bool {return self._duration != nil}
      /// Clears the value of `duration`. Subsequent reads from it will return its default value.
//      public mutating func clearDuration() {self._duration = nil}
//
      /// 时间粒度, ex: second, minute, hour, day
//      public var grain: String {
//        get {return _grain ?? String()}
//        set {_grain = newValue}
//      }
      /// Returns true if `grain` has been explicitly set.
//      public var hasGrain: Bool {return self._grain != nil}
      /// Clears the value of `grain`. Subsequent reads from it will return its default value.
//      public mutating func clearGrain() {self._grain = nil}
//
//      public var unknownFields = LarkHTTP.UnknownStorage()
//
//      public init() {}
//
//      fileprivate var _start: Int64? = nil
//      fileprivate var _end: Int64? = nil
//      fileprivate var _duration: Int32? = nil
//      fileprivate var _grain: String? = nil
//    }
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public struct Abbrs {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var abbrs: [LarkNCExtensionPB_Entities_Abbreviation.entity] = []
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public init() {}
//}

//public struct LarkNCExtensionPB_Entities_Span {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var start: Int32 {
//    get {return _start ?? 0}
//    set {_start = newValue}
//  }
  /// Returns true if `start` has been explicitly set.
//  public var hasStart: Bool {return self._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
//  public mutating func clearStart() {self._start = nil}
//
//  public var end: Int32 {
//    get {return _end ?? 0}
//    set {_end = newValue}
//  }
  /// Returns true if `end` has been explicitly set.
//  public var hasEnd: Bool {return self._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
//  public mutating func clearEnd() {self._end = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _start: Int32? = nil
//  fileprivate var _end: Int32? = nil
//}

//public struct LarkNCExtensionPB_Entities_BaikeEntityMeta {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
  /// 所有allow能力为或的关系，即只要满足一条，即可高亮
  /// 完全可见
//  public var isAllowAll: Bool {
//    get {return _isAllowAll ?? false}
//    set {_isAllowAll = newValue}
//  }
  /// Returns true if `isAllowAll` has been explicitly set.
//  public var hasIsAllowAll: Bool {return self._isAllowAll != nil}
  /// Clears the value of `isAllowAll`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAllowAll() {self._isAllowAll = nil}
//
  /// 哪些类型的用户组可见
  /// type: user, department, tenant ...
//  public var allowedTypedIds: Dictionary<String,LarkNCExtensionPB_Entities_BaikeEntityMeta.TypedIDs> = [:]
//
  /// disable_option:
  /// 1. = "*" 该平台不高亮
  /// 2. = "<4.9.0" 该平台小于4.9.0时不高亮
  /// 3. = "<4.9.0|=4.11.2|=5.0.2" 这三个版本条件不高亮
  /// 4. 识别失败，按1处理
  /// platform: pc, android, ios ...
//  public var platformDisableOption: Dictionary<String,String> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public struct TypedIDs {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var ids: [String] = []
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _isAllowAll: Bool? = nil
//}

//public struct LarkNCExtensionPB_Entities_Ref {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var span: LarkNCExtensionPB_Entities_Span {
//    get {return _storage._span ?? LarkNCExtensionPB_Entities_Span()}
//    set {_uniqueStorage()._span = newValue}
//  }
  /// Returns true if `span` has been explicitly set.
//  public var hasSpan: Bool {return _storage._span != nil}
  /// Clears the value of `span`. Subsequent reads from it will return its default value.
//  public mutating func clearSpan() {_uniqueStorage()._span = nil}
//
  /// 匹配的词
//  public var matchedWord: String {
//    get {return _storage._matchedWord ?? String()}
//    set {_uniqueStorage()._matchedWord = newValue}
//  }
  /// Returns true if `matchedWord` has been explicitly set.
//  public var hasMatchedWord: Bool {return _storage._matchedWord != nil}
  /// Clears the value of `matchedWord`. Subsequent reads from it will return its default value.
//  public mutating func clearMatchedWord() {_uniqueStorage()._matchedWord = nil}
//
  /// 废弃，使用baike_entity_meta中的对应字段
//  public var platformDisableOption: Dictionary<String,String> {
//    get {return _storage._platformDisableOption}
//    set {_uniqueStorage()._platformDisableOption = newValue}
//  }
//
  /// one of entity types
//  public var baikeEntityMeta: LarkNCExtensionPB_Entities_BaikeEntityMeta {
//    get {return _storage._baikeEntityMeta ?? LarkNCExtensionPB_Entities_BaikeEntityMeta()}
//    set {_uniqueStorage()._baikeEntityMeta = newValue}
//  }
  /// Returns true if `baikeEntityMeta` has been explicitly set.
//  public var hasBaikeEntityMeta: Bool {return _storage._baikeEntityMeta != nil}
  /// Clears the value of `baikeEntityMeta`. Subsequent reads from it will return its default value.
//  public mutating func clearBaikeEntityMeta() {_uniqueStorage()._baikeEntityMeta = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_Refs {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var refs: [LarkNCExtensionPB_Entities_Ref] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

//public struct LarkNCExtensionPB_Entities_ElementRefs {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var elementRefs: Dictionary<String,LarkNCExtensionPB_Entities_Refs> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

//public struct LarkNCExtensionPB_Entities_TextContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var text: String {
//    get {return _storage._text ?? String()}
//    set {_uniqueStorage()._text = newValue}
//  }
  /// Returns true if `text` has been explicitly set.
//  public var hasText: Bool {return _storage._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
//  public mutating func clearText() {_uniqueStorage()._text = nil}
//
//  public var urls: [LarkNCExtensionPB_Entities_MessageUrlPreview] {
//    get {return _storage._urls}
//    set {_uniqueStorage()._urls = newValue}
//  }
//
//  public var richText: LarkNCExtensionPB_Entities_RichText {
//    get {return _storage._richText ?? LarkNCExtensionPB_Entities_RichText()}
//    set {_uniqueStorage()._richText = newValue}
//  }
  /// Returns true if `richText` has been explicitly set.
//  public var hasRichText: Bool {return _storage._richText != nil}
  /// Clears the value of `richText`. Subsequent reads from it will return its default value.
//  public mutating func clearRichText() {_uniqueStorage()._richText = nil}
//
//  public var docEntity: LarkNCExtensionPB_Entities_DocEntity {
//    get {return _storage._docEntity ?? LarkNCExtensionPB_Entities_DocEntity()}
//    set {_uniqueStorage()._docEntity = newValue}
//  }
  /// Returns true if `docEntity` has been explicitly set.
//  public var hasDocEntity: Bool {return _storage._docEntity != nil}
  /// Clears the value of `docEntity`. Subsequent reads from it will return its default value.
//  public mutating func clearDocEntity() {_uniqueStorage()._docEntity = nil}
//
//  public var abbreviation: LarkNCExtensionPB_Entities_Abbreviation {
//    get {return _storage._abbreviation ?? LarkNCExtensionPB_Entities_Abbreviation()}
//    set {_uniqueStorage()._abbreviation = newValue}
//  }
  /// Returns true if `abbreviation` has been explicitly set.
//  public var hasAbbreviation: Bool {return _storage._abbreviation != nil}
  /// Clears the value of `abbreviation`. Subsequent reads from it will return its default value.
//  public mutating func clearAbbreviation() {_uniqueStorage()._abbreviation = nil}
//
  /// 消息中的引用标记，如百科词条，其它能力等。以RefType = baike为例，其对应的值中key为element id， val为标记的引用。
  /// refType: baike ...
//  public var typedElementRefs: Dictionary<String,LarkNCExtensionPB_Entities_ElementRefs> {
//    get {return _storage._typedElementRefs}
//    set {_uniqueStorage()._typedElementRefs = newValue}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_CalendarContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var calendar: String {
//    get {return _calendar ?? String()}
//    set {_calendar = newValue}
//  }
  /// Returns true if `calendar` has been explicitly set.
//  public var hasCalendar: Bool {return self._calendar != nil}
  /// Clears the value of `calendar`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendar() {self._calendar = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _calendar: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_ShareCalendarEventContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var calendarEvent: LarkNCExtensionPB_Entities_CalendarEvent {
//    get {return _storage._calendarEvent ?? LarkNCExtensionPB_Entities_CalendarEvent()}
//    set {_uniqueStorage()._calendarEvent = newValue}
//  }
  /// Returns true if `calendarEvent` has been explicitly set.
//  public var hasCalendarEvent: Bool {return _storage._calendarEvent != nil}
  /// Clears the value of `calendarEvent`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarEvent() {_uniqueStorage()._calendarEvent = nil}
//
//  public var attendeesCount: Int32 {
//    get {return _storage._attendeesCount ?? 0}
//    set {_uniqueStorage()._attendeesCount = newValue}
//  }
  /// Returns true if `attendeesCount` has been explicitly set.
//  public var hasAttendeesCount: Bool {return _storage._attendeesCount != nil}
  /// Clears the value of `attendeesCount`. Subsequent reads from it will return its default value.
//  public mutating func clearAttendeesCount() {_uniqueStorage()._attendeesCount = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// ImageContent 作为 IMAGE(5) 类型消息的 Content
/// 其唯一属性 ImageSet 由于体积太大，计划精简为 ImageSetV2
//public struct LarkNCExtensionPB_Entities_ImageContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var image: LarkNCExtensionPB_Entities_ImageSet {
//    get {return _storage._image ?? LarkNCExtensionPB_Entities_ImageSet()}
//    set {_uniqueStorage()._image = newValue}
//  }
  /// Returns true if `image` has been explicitly set.
//  public var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
//  public mutating func clearImage() {_uniqueStorage()._image = nil}
//
//  public var imageV2: LarkNCExtensionPB_Entities_ImageSetV2 {
//    get {return _storage._imageV2 ?? LarkNCExtensionPB_Entities_ImageSetV2()}
//    set {_uniqueStorage()._imageV2 = newValue}
//  }
  /// Returns true if `imageV2` has been explicitly set.
//  public var hasImageV2: Bool {return _storage._imageV2 != nil}
  /// Clears the value of `imageV2`. Subsequent reads from it will return its default value.
//  public mutating func clearImageV2() {_uniqueStorage()._imageV2 = nil}
//
  /// 发送方是否选择以原图发送
//  public var isOriginSource: Bool {
//    get {return _storage._isOriginSource ?? false}
//    set {_uniqueStorage()._isOriginSource = newValue}
//  }
  /// Returns true if `isOriginSource` has been explicitly set.
//  public var hasIsOriginSource: Bool {return _storage._isOriginSource != nil}
  /// Clears the value of `isOriginSource`. Subsequent reads from it will return its default value.
//  public mutating func clearIsOriginSource() {_uniqueStorage()._isOriginSource = nil}
//
  /// 目前仅 is_origin_source=true 时有效(用以下载时客户端显示原图大小)
//  public var originSize: UInt64 {
//    get {return _storage._originSize ?? 0}
//    set {_uniqueStorage()._originSize = newValue}
//  }
  /// Returns true if `originSize` has been explicitly set.
//  public var hasOriginSize: Bool {return _storage._originSize != nil}
  /// Clears the value of `originSize`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginSize() {_uniqueStorage()._originSize = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

public struct LarkNCExtensionPB_Entities_LocationContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var locationDescription: LarkNCExtensionPB_Entities_LocationContent.LocationDescription {
    get {return _storage._locationDescription ?? LarkNCExtensionPB_Entities_LocationContent.LocationDescription()}
    set {_uniqueStorage()._locationDescription = newValue}
  }
  /// Returns true if `locationDescription` has been explicitly set.
//  public var hasLocationDescription: Bool {return _storage._locationDescription != nil}
  /// Clears the value of `locationDescription`. Subsequent reads from it will return its default value.
//  public mutating func clearLocationDescription() {_uniqueStorage()._locationDescription = nil}

  public var longitude: String {
    get {return _storage._longitude ?? String()}
    set {_uniqueStorage()._longitude = newValue}
  }
  /// Returns true if `longitude` has been explicitly set.
//  public var hasLongitude: Bool {return _storage._longitude != nil}
  /// Clears the value of `longitude`. Subsequent reads from it will return its default value.
//  public mutating func clearLongitude() {_uniqueStorage()._longitude = nil}

  public var latitude: String {
    get {return _storage._latitude ?? String()}
    set {_uniqueStorage()._latitude = newValue}
  }
  /// Returns true if `latitude` has been explicitly set.
  public var hasLatitude: Bool {return _storage._latitude != nil}
  /// Clears the value of `latitude`. Subsequent reads from it will return its default value.
//  public mutating func clearLatitude() {_uniqueStorage()._latitude = nil}

  public var zoomLevel: Int32 {
    get {return _storage._zoomLevel ?? 0}
    set {_uniqueStorage()._zoomLevel = newValue}
  }
  /// Returns true if `zoomLevel` has been explicitly set.
//  public var hasZoomLevel: Bool {return _storage._zoomLevel != nil}
  /// Clears the value of `zoomLevel`. Subsequent reads from it will return its default value.
//  public mutating func clearZoomLevel() {_uniqueStorage()._zoomLevel = nil}

  public var image: LarkNCExtensionPB_Entities_ImageSet {
    get {return _storage._image ?? LarkNCExtensionPB_Entities_ImageSet()}
    set {_uniqueStorage()._image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  public var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
//  public mutating func clearImage() {_uniqueStorage()._image = nil}

  ///  gaode,baidu,tencent,google,apple
  public var vendor: String {
    get {return _storage._vendor ?? String()}
    set {_uniqueStorage()._vendor = newValue}
  }
  /// Returns true if `vendor` has been explicitly set.
//  public var hasVendor: Bool {return _storage._vendor != nil}
  /// Clears the value of `vendor`. Subsequent reads from it will return its default value.
//  public mutating func clearVendor() {_uniqueStorage()._vendor = nil}

  public var isIternal: Bool {
    get {return _storage._isIternal ?? false}
    set {_uniqueStorage()._isIternal = newValue}
  }
  /// Returns true if `isIternal` has been explicitly set.
//  public var hasIsIternal: Bool {return _storage._isIternal != nil}
  /// Clears the value of `isIternal`. Subsequent reads from it will return its default value.
//  public mutating func clearIsIternal() {_uniqueStorage()._isIternal = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public struct LocationDescription {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// location name
    public var name: String {
      get {return _name ?? String()}
      set {_name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    public var hasName: Bool {return self._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
//    public mutating func clearName() {self._name = nil}

    /// location description
    public var description_p: String {
      get {return _description_p ?? String()}
      set {_description_p = newValue}
    }
    /// Returns true if `description_p` has been explicitly set.
    public var hasDescription_p: Bool {return self._description_p != nil}
    /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
    public mutating func clearDescription_p() {self._description_p = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _name: String? = nil
    fileprivate var _description_p: String? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

//public struct LarkNCExtensionPB_Entities_TransExtra {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 传输状态，决定卡片样式
//  public var status: LarkNCExtensionPB_Entities_TransStatus {
//    get {return _status ?? .pending}
//    set {_status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {self._status = nil}
//
  /// 开始上传时标记发送者设备id
//  public var senderDeviceID: String {
//    get {return _senderDeviceID ?? String()}
//    set {_senderDeviceID = newValue}
//  }
  /// Returns true if `senderDeviceID` has been explicitly set.
//  public var hasSenderDeviceID: Bool {return self._senderDeviceID != nil}
  /// Clears the value of `senderDeviceID`. Subsequent reads from it will return its default value.
//  public mutating func clearSenderDeviceID() {self._senderDeviceID = nil}
//
  /// 接受者接收文件后记录接收的设备id
//  public var receiverDeviceID: String {
//    get {return _receiverDeviceID ?? String()}
//    set {_receiverDeviceID = newValue}
//  }
  /// Returns true if `receiverDeviceID` has been explicitly set.
//  public var hasReceiverDeviceID: Bool {return self._receiverDeviceID != nil}
  /// Clears the value of `receiverDeviceID`. Subsequent reads from it will return its default value.
//  public mutating func clearReceiverDeviceID() {self._receiverDeviceID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _status: LarkNCExtensionPB_Entities_TransStatus? = nil
//  fileprivate var _senderDeviceID: String? = nil
//  fileprivate var _receiverDeviceID: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_FileContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var key: String {
//    get {return _storage._key ?? String()}
//    set {_uniqueStorage()._key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}
//
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
//  public var size: Int64 {
//    get {return _storage._size ?? 0}
//    set {_uniqueStorage()._size = newValue}
//  }
  /// Returns true if `size` has been explicitly set.
//  public var hasSize: Bool {return _storage._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
//  public mutating func clearSize() {_uniqueStorage()._size = nil}
//
//  public var mime: String {
//    get {return _storage._mime ?? String()}
//    set {_uniqueStorage()._mime = newValue}
//  }
  /// Returns true if `mime` has been explicitly set.
//  public var hasMime: Bool {return _storage._mime != nil}
  /// Clears the value of `mime`. Subsequent reads from it will return its default value.
//  public mutating func clearMime() {_uniqueStorage()._mime = nil}
//
//  public var source: LarkNCExtensionPB_Entities_FileContent.Source {
//    get {return _storage._source ?? .unknown}
//    set {_uniqueStorage()._source = newValue}
//  }
  /// Returns true if `source` has been explicitly set.
//  public var hasSource: Bool {return _storage._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
//  public mutating func clearSource() {_uniqueStorage()._source = nil}
//
  /// 坚果云专用
//  public var nameSpace: String {
//    get {return _storage._nameSpace ?? String()}
//    set {_uniqueStorage()._nameSpace = newValue}
//  }
  /// Returns true if `nameSpace` has been explicitly set.
//  public var hasNameSpace: Bool {return _storage._nameSpace != nil}
  /// Clears the value of `nameSpace`. Subsequent reads from it will return its default value.
//  public mutating func clearNameSpace() {_uniqueStorage()._nameSpace = nil}
//
  /// 资源所属 unit
//  public var fsUnit: String {
//    get {return _storage._fsUnit ?? String()}
//    set {_uniqueStorage()._fsUnit = newValue}
//  }
  /// Returns true if `fsUnit` has been explicitly set.
//  public var hasFsUnit: Bool {return _storage._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}
//
  ///这个废弃了
//  public var lanTransExtra: LarkNCExtensionPB_Entities_FileContent.LANTransExtra {
//    get {return _storage._lanTransExtra ?? LarkNCExtensionPB_Entities_FileContent.LANTransExtra()}
//    set {_uniqueStorage()._lanTransExtra = newValue}
//  }
  /// Returns true if `lanTransExtra` has been explicitly set.
//  public var hasLanTransExtra: Bool {return _storage._lanTransExtra != nil}
  /// Clears the value of `lanTransExtra`. Subsequent reads from it will return its default value.
//  public mutating func clearLanTransExtra() {_uniqueStorage()._lanTransExtra = nil}
//
  ///使用这个字段标识 lan 传输状态
//  public var transExtra: LarkNCExtensionPB_Entities_TransExtra {
//    get {return _storage._transExtra ?? LarkNCExtensionPB_Entities_TransExtra()}
//    set {_uniqueStorage()._transExtra = newValue}
//  }
  /// Returns true if `transExtra` has been explicitly set.
//  public var hasTransExtra: Bool {return _storage._transExtra != nil}
  /// Clears the value of `transExtra`. Subsequent reads from it will return its default value.
//  public mutating func clearTransExtra() {_uniqueStorage()._transExtra = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum Source: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//    case nutStore // = 2
//
    /// 局域网在线传输
//    case lanTrans // = 3
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 2: self = .nutStore
//      case 3: self = .lanTrans
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .nutStore: return 2
//      case .lanTrans: return 3
//      }
//    }
//
//  }
//
//  public struct LANTransExtra {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 传输状态，决定卡片样式
//    public var status: LarkNCExtensionPB_Entities_FileContent.LANTransExtra.TransStatus {
//      get {return _status ?? .pending}
//      set {_status = newValue}
//    }
    /// Returns true if `status` has been explicitly set.
//    public var hasStatus: Bool {return self._status != nil}
    /// Clears the value of `status`. Subsequent reads from it will return its default value.
//    public mutating func clearStatus() {self._status = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum TransStatus: LarkHTTP.Enum {
//      public typealias RawValue = Int
//
      /// 等待接收
//      case pending // = 0
//
      /// 确认开始传输
//      case accept // = 1
//
      /// 接收方拒绝
//      case refuse // = 2
//
      /// 发送方取消发送
//      case cancel // = 3
//
      /// 发送方中断发送（包括掉线）
//      case abortBySender // = 4
//
      /// 接收方中断接收（包括掉线）
//      case abortByReceiver // = 5
//
      /// 传输完毕
//      case done // = 6
//
      /// 发送方改为离线发送（普通文件消息）
//      case offlineMode // = 7
//
//      public init() {
//        self = .pending
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .pending
//        case 1: self = .accept
//        case 2: self = .refuse
//        case 3: self = .cancel
//        case 4: self = .abortBySender
//        case 5: self = .abortByReceiver
//        case 6: self = .done
//        case 7: self = .offlineMode
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .pending: return 0
//        case .accept: return 1
//        case .refuse: return 2
//        case .cancel: return 3
//        case .abortBySender: return 4
//        case .abortByReceiver: return 5
//        case .done: return 6
//        case .offlineMode: return 7
//        }
//      }
//
//    }
//
//    public init() {}
//
//    fileprivate var _status: LarkNCExtensionPB_Entities_FileContent.LANTransExtra.TransStatus? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_FileContent.Source: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 如需修改需要同步RichText中的MediaProperty
//public struct LarkNCExtensionPB_Entities_MediaContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var key: String {
//    get {return _storage._key ?? String()}
//    set {_uniqueStorage()._key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}
//
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
//  public var size: Int64 {
//    get {return _storage._size ?? 0}
//    set {_uniqueStorage()._size = newValue}
//  }
  /// Returns true if `size` has been explicitly set.
//  public var hasSize: Bool {return _storage._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
//  public mutating func clearSize() {_uniqueStorage()._size = nil}
//
//  public var mime: String {
//    get {return _storage._mime ?? String()}
//    set {_uniqueStorage()._mime = newValue}
//  }
  /// Returns true if `mime` has been explicitly set.
//  public var hasMime: Bool {return _storage._mime != nil}
  /// Clears the value of `mime`. Subsequent reads from it will return its default value.
//  public mutating func clearMime() {_uniqueStorage()._mime = nil}
//
//  public var source: LarkNCExtensionPB_Entities_MediaContent.Source {
//    get {return _storage._source ?? .unknown}
//    set {_uniqueStorage()._source = newValue}
//  }
  /// Returns true if `source` has been explicitly set.
//  public var hasSource: Bool {return _storage._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
//  public mutating func clearSource() {_uniqueStorage()._source = nil}
//
  /// 封面帧
//  public var image: LarkNCExtensionPB_Entities_ImageSet {
//    get {return _storage._image ?? LarkNCExtensionPB_Entities_ImageSet()}
//    set {_uniqueStorage()._image = newValue}
//  }
  /// Returns true if `image` has been explicitly set.
//  public var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
//  public mutating func clearImage() {_uniqueStorage()._image = nil}
//
  ///时长单位ms
//  public var duration: Int32 {
//    get {return _storage._duration ?? 0}
//    set {_uniqueStorage()._duration = newValue}
//  }
  /// Returns true if `duration` has been explicitly set.
//  public var hasDuration: Bool {return _storage._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
//  public mutating func clearDuration() {_uniqueStorage()._duration = nil}
//
  /// 资源所属 unit
//  public var fsUnit: String {
//    get {return _storage._fsUnit ?? String()}
//    set {_uniqueStorage()._fsUnit = newValue}
//  }
  /// Returns true if `fsUnit` has been explicitly set.
//  public var hasFsUnit: Bool {return _storage._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum Source: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//    case lark // = 1
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .lark
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .lark: return 1
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_MediaContent.Source: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_AudioContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var key: String {
//    get {return _storage._key ?? String()}
//    set {_uniqueStorage()._key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}
//
  /// 时长
//  public var duration: Int32 {
//    get {return _storage._duration ?? 0}
//    set {_uniqueStorage()._duration = newValue}
//  }
  /// Returns true if `duration` has been explicitly set.
//  public var hasDuration: Bool {return _storage._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
//  public mutating func clearDuration() {_uniqueStorage()._duration = nil}
//
//  public var size: Int64 {
//    get {return _storage._size ?? 0}
//    set {_uniqueStorage()._size = newValue}
//  }
  /// Returns true if `size` has been explicitly set.
//  public var hasSize: Bool {return _storage._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
//  public mutating func clearSize() {_uniqueStorage()._size = nil}
//
  /// 语音识别
//  public var audioRecognition: LarkNCExtensionPB_Entities_AudioRecognition {
//    get {return _storage._audioRecognition ?? LarkNCExtensionPB_Entities_AudioRecognition()}
//    set {_uniqueStorage()._audioRecognition = newValue}
//  }
  /// Returns true if `audioRecognition` has been explicitly set.
//  public var hasAudioRecognition: Bool {return _storage._audioRecognition != nil}
  /// Clears the value of `audioRecognition`. Subsequent reads from it will return its default value.
//  public mutating func clearAudioRecognition() {_uniqueStorage()._audioRecognition = nil}
//
  /// 资源所属 unit
//  public var fsUnit: String {
//    get {return _storage._fsUnit ?? String()}
//    set {_uniqueStorage()._fsUnit = newValue}
//  }
  /// Returns true if `fsUnit` has been explicitly set.
//  public var hasFsUnit: Bool {return _storage._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

public struct LarkNCExtensionPB_Entities_AudioRecognition {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 识别结果
  public var recognitionResult: String {
    get {return _recognitionResult ?? String()}
    set {_recognitionResult = newValue}
  }
  /// Returns true if `recognitionResult` has been explicitly set.
//  public var hasRecognitionResult: Bool {return self._recognitionResult != nil}
  /// Clears the value of `recognitionResult`. Subsequent reads from it will return its default value.
//  public mutating func clearRecognitionResult() {self._recognitionResult = nil}

  /// 原语音消息的发送者
  public var originSenderID: Int64 {
    get {return _originSenderID ?? 0}
    set {_originSenderID = newValue}
  }
  /// Returns true if `originSenderID` has been explicitly set.
//  public var hasOriginSenderID: Bool {return self._originSenderID != nil}
  /// Clears the value of `originSenderID`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginSenderID() {self._originSenderID = nil}

  /// 发送者隐藏识别结果
  public var isHidden: Bool {
    get {return _isHidden ?? false}
    set {_isHidden = newValue}
  }
  /// Returns true if `isHidden` has been explicitly set.
//  public var hasIsHidden: Bool {return self._isHidden != nil}
  /// Clears the value of `isHidden`. Subsequent reads from it will return its default value.
//  public mutating func clearIsHidden() {self._isHidden = nil}

  /// 原始消息的tos_key
  public var originTosKey: String {
    get {return _originTosKey ?? String()}
    set {_originTosKey = newValue}
  }
  /// Returns true if `originTosKey` has been explicitly set.
//  public var hasOriginTosKey: Bool {return self._originTosKey != nil}
  /// Clears the value of `originTosKey`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginTosKey() {self._originTosKey = nil}

  /// 语音消息是否识别完
  public var isFinish: Bool {
    get {return _isFinish ?? false}
    set {_isFinish = newValue}
  }
  /// Returns true if `isFinish` has been explicitly set.
//  public var hasIsFinish: Bool {return self._isFinish != nil}
  /// Clears the value of `isFinish`. Subsequent reads from it will return its default value.
//  public mutating func clearIsFinish() {self._isFinish = nil}

  /// 同时发送语音和识别文本
  public var isAudioWithText: Bool {
    get {return _isAudioWithText ?? false}
    set {_isAudioWithText = newValue}
  }
  /// Returns true if `isAudioWithText` has been explicitly set.
//  public var hasIsAudioWithText: Bool {return self._isAudioWithText != nil}
  /// Clears the value of `isAudioWithText`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAudioWithText() {self._isAudioWithText = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _recognitionResult: String? = nil
  fileprivate var _originSenderID: Int64? = nil
  fileprivate var _isHidden: Bool? = nil
  fileprivate var _originTosKey: String? = nil
  fileprivate var _isFinish: Bool? = nil
  fileprivate var _isAudioWithText: Bool? = nil
}

//public struct LarkNCExtensionPB_Entities_PostContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 帖子题目
//  public var title: String {
//    get {return _storage._title ?? String()}
//    set {_uniqueStorage()._title = newValue}
//  }
  /// Returns true if `title` has been explicitly set.
//  public var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
//  public mutating func clearTitle() {_uniqueStorage()._title = nil}
//
  /// 帖子正文
//  public var text: String {
//    get {return _storage._text ?? String()}
//    set {_uniqueStorage()._text = newValue}
//  }
  /// Returns true if `text` has been explicitly set.
//  public var hasText: Bool {return _storage._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
//  public mutating func clearText() {_uniqueStorage()._text = nil}
//
  /// 该帖子的附件列表
//  public var attachments: [String] {
//    get {return _storage._attachments}
//    set {_uniqueStorage()._attachments = newValue}
//  }
//
  /// 该帖子是否开启通知
//  public var isNotified: Bool {
//    get {return _storage._isNotified ?? false}
//    set {_uniqueStorage()._isNotified = newValue}
//  }
  /// Returns true if `isNotified` has been explicitly set.
//  public var hasIsNotified: Bool {return _storage._isNotified != nil}
  /// Clears the value of `isNotified`. Subsequent reads from it will return its default value.
//  public mutating func clearIsNotified() {_uniqueStorage()._isNotified = nil}
//
  /// 该帖子的评论数 [后端计算]
//  public var commentCount: String {
//    get {return _storage._commentCount ?? String()}
//    set {_uniqueStorage()._commentCount = newValue}
//  }
  /// Returns true if `commentCount` has been explicitly set.
//  public var hasCommentCount: Bool {return _storage._commentCount != nil}
  /// Clears the value of `commentCount`. Subsequent reads from it will return its default value.
//  public mutating func clearCommentCount() {_uniqueStorage()._commentCount = nil}
//
//  public var richText: LarkNCExtensionPB_Entities_RichText {
//    get {return _storage._richText ?? LarkNCExtensionPB_Entities_RichText()}
//    set {_uniqueStorage()._richText = newValue}
//  }
  /// Returns true if `richText` has been explicitly set.
//  public var hasRichText: Bool {return _storage._richText != nil}
  /// Clears the value of `richText`. Subsequent reads from it will return its default value.
//  public mutating func clearRichText() {_uniqueStorage()._richText = nil}
//
  ///title 国际化
//  public var i18NTitleKey: String {
//    get {return _storage._i18NTitleKey ?? String()}
//    set {_uniqueStorage()._i18NTitleKey = newValue}
//  }
  /// Returns true if `i18NTitleKey` has been explicitly set.
//  public var hasI18NTitleKey: Bool {return _storage._i18NTitleKey != nil}
  /// Clears the value of `i18NTitleKey`. Subsequent reads from it will return its default value.
//  public mutating func clearI18NTitleKey() {_uniqueStorage()._i18NTitleKey = nil}
//
  ///该帖子是否是群公告
//  public var isGroupAnnouncement: Bool {
//    get {return _storage._isGroupAnnouncement ?? false}
//    set {_uniqueStorage()._isGroupAnnouncement = newValue}
//  }
  /// Returns true if `isGroupAnnouncement` has been explicitly set.
//  public var hasIsGroupAnnouncement: Bool {return _storage._isGroupAnnouncement != nil}
  /// Clears the value of `isGroupAnnouncement`. Subsequent reads from it will return its default value.
//  public mutating func clearIsGroupAnnouncement() {_uniqueStorage()._isGroupAnnouncement = nil}
//
  /// doc 相关属性
//  public var docEntity: LarkNCExtensionPB_Entities_DocEntity {
//    get {return _storage._docEntity ?? LarkNCExtensionPB_Entities_DocEntity()}
//    set {_uniqueStorage()._docEntity = newValue}
//  }
  /// Returns true if `docEntity` has been explicitly set.
//  public var hasDocEntity: Bool {return _storage._docEntity != nil}
  /// Clears the value of `docEntity`. Subsequent reads from it will return its default value.
//  public mutating func clearDocEntity() {_uniqueStorage()._docEntity = nil}
//
//  public var abbreviation: LarkNCExtensionPB_Entities_Abbreviation {
//    get {return _storage._abbreviation ?? LarkNCExtensionPB_Entities_Abbreviation()}
//    set {_uniqueStorage()._abbreviation = newValue}
//  }
  /// Returns true if `abbreviation` has been explicitly set.
//  public var hasAbbreviation: Bool {return _storage._abbreviation != nil}
  /// Clears the value of `abbreviation`. Subsequent reads from it will return its default value.
//  public mutating func clearAbbreviation() {_uniqueStorage()._abbreviation = nil}
//
  ///url预览相关属性
//  public var urls: [LarkNCExtensionPB_Entities_MessageUrlPreview] {
//    get {return _storage._urls}
//    set {_uniqueStorage()._urls = newValue}
//  }
//
  /// 消息中的引用标记，如百科词条，其它能力等。以RefType = baike为例，其对应的值中key为element id， val为标记的引用。
  /// refType: baike ...
//  public var typedElementRefs: Dictionary<String,LarkNCExtensionPB_Entities_ElementRefs> {
//    get {return _storage._typedElementRefs}
//    set {_uniqueStorage()._typedElementRefs = newValue}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_EmailContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// [废弃]
//  public var title: String {
//    get {return _storage._title ?? String()}
//    set {_uniqueStorage()._title = newValue}
//  }
  /// Returns true if `title` has been explicitly set.
//  public var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
//  public mutating func clearTitle() {_uniqueStorage()._title = nil}
//
  /// [废弃]
//  public var text: String {
//    get {return _storage._text ?? String()}
//    set {_uniqueStorage()._text = newValue}
//  }
  /// Returns true if `text` has been explicitly set.
//  public var hasText: Bool {return _storage._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
//  public mutating func clearText() {_uniqueStorage()._text = nil}
//
  /// 邮件附件
//  public var attachments: [LarkNCExtensionPB_Entities_Attachment] {
//    get {return _storage._attachments}
//    set {_uniqueStorage()._attachments = newValue}
//  }
//
//  public var richText: LarkNCExtensionPB_Entities_RichText {
//    get {return _storage._richText ?? LarkNCExtensionPB_Entities_RichText()}
//    set {_uniqueStorage()._richText = newValue}
//  }
  /// Returns true if `richText` has been explicitly set.
//  public var hasRichText: Bool {return _storage._richText != nil}
  /// Clears the value of `richText`. Subsequent reads from it will return its default value.
//  public mutating func clearRichText() {_uniqueStorage()._richText = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_Attachment {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var key: String {
//    get {return _storage._key ?? String()}
//    set {_uniqueStorage()._key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}
//
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
//  public var size: Int64 {
//    get {return _storage._size ?? 0}
//    set {_uniqueStorage()._size = newValue}
//  }
  /// Returns true if `size` has been explicitly set.
//  public var hasSize: Bool {return _storage._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
//  public mutating func clearSize() {_uniqueStorage()._size = nil}
//
//  public var mime: String {
//    get {return _storage._mime ?? String()}
//    set {_uniqueStorage()._mime = newValue}
//  }
  /// Returns true if `mime` has been explicitly set.
//  public var hasMime: Bool {return _storage._mime != nil}
  /// Clears the value of `mime`. Subsequent reads from it will return its default value.
//  public mutating func clearMime() {_uniqueStorage()._mime = nil}
//
//  public var extra: LarkNCExtensionPB_Entities_Attachment.Extra {
//    get {return _storage._extra ?? LarkNCExtensionPB_Entities_Attachment.Extra()}
//    set {_uniqueStorage()._extra = newValue}
//  }
  /// Returns true if `extra` has been explicitly set.
//  public var hasExtra: Bool {return _storage._extra != nil}
  /// Clears the value of `extra`. Subsequent reads from it will return its default value.
//  public mutating func clearExtra() {_uniqueStorage()._extra = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public struct Extra {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 图片类型的附件提供一个缩略图
//    public var thumbnail: LarkNCExtensionPB_Entities_Image {
//      get {return _storage._thumbnail ?? LarkNCExtensionPB_Entities_Image()}
//      set {_uniqueStorage()._thumbnail = newValue}
//    }
    /// Returns true if `thumbnail` has been explicitly set.
//    public var hasThumbnail: Bool {return _storage._thumbnail != nil}
    /// Clears the value of `thumbnail`. Subsequent reads from it will return its default value.
//    public mutating func clearThumbnail() {_uniqueStorage()._thumbnail = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_CommercialHongbaoContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 红包id
//  public var id: Int64 {
//    get {return _id ?? 0}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
  /// 祝福内容
//  public var subject: String {
//    get {return _subject ?? String()}
//    set {_subject = newValue}
//  }
  /// Returns true if `subject` has been explicitly set.
//  public var hasSubject: Bool {return self._subject != nil}
  /// Clears the value of `subject`. Subsequent reads from it will return its default value.
//  public mutating func clearSubject() {self._subject = nil}
//
  /// 红包类型
//  public var type: LarkNCExtensionPB_Entities_CommercialHongbaoContent.TypeEnum {
//    get {return _type ?? .unknown}
//    set {_type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}
//
  /// 是否点击过红包
//  public var clicked: Bool {
//    get {return _clicked ?? false}
//    set {_clicked = newValue}
//  }
  /// Returns true if `clicked` has been explicitly set.
//  public var hasClicked: Bool {return self._clicked != nil}
  /// Clears the value of `clicked`. Subsequent reads from it will return its default value.
//  public mutating func clearClicked() {self._clicked = nil}
//
  /// 是否已过期
//  public var isExpired: Bool {
//    get {return _isExpired ?? false}
//    set {_isExpired = newValue}
//  }
  /// Returns true if `isExpired` has been explicitly set.
//  public var hasIsExpired: Bool {return self._isExpired != nil}
  /// Clears the value of `isExpired`. Subsequent reads from it will return its default value.
//  public mutating func clearIsExpired() {self._isExpired = nil}
//
//  public var grabbed: Bool {
//    get {return _grabbed ?? false}
//    set {_grabbed = newValue}
//  }
  /// Returns true if `grabbed` has been explicitly set.
//  public var hasGrabbed: Bool {return self._grabbed != nil}
  /// Clears the value of `grabbed`. Subsequent reads from it will return its default value.
//  public mutating func clearGrabbed() {self._grabbed = nil}
//
//  public var grabbedFinish: Bool {
//    get {return _grabbedFinish ?? false}
//    set {_grabbedFinish = newValue}
//  }
  /// Returns true if `grabbedFinish` has been explicitly set.
//  public var hasGrabbedFinish: Bool {return self._grabbedFinish != nil}
  /// Clears the value of `grabbedFinish`. Subsequent reads from it will return its default value.
//  public mutating func clearGrabbedFinish() {self._grabbedFinish = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//
    /// 商业红包
//    case commercial // = 1
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .commercial
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .commercial: return 1
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _id: Int64? = nil
//  fileprivate var _subject: String? = nil
//  fileprivate var _type: LarkNCExtensionPB_Entities_CommercialHongbaoContent.TypeEnum? = nil
//  fileprivate var _clicked: Bool? = nil
//  fileprivate var _isExpired: Bool? = nil
//  fileprivate var _grabbed: Bool? = nil
//  fileprivate var _grabbedFinish: Bool? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_CommercialHongbaoContent.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_HongbaoContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 红包id
//  public var id: Int64 {
//    get {return _storage._id ?? 0}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
  /// 祝福内容
//  public var subject: String {
//    get {return _storage._subject ?? String()}
//    set {_uniqueStorage()._subject = newValue}
//  }
  /// Returns true if `subject` has been explicitly set.
//  public var hasSubject: Bool {return _storage._subject != nil}
  /// Clears the value of `subject`. Subsequent reads from it will return its default value.
//  public mutating func clearSubject() {_uniqueStorage()._subject = nil}
//
  /// 红包类型
//  public var type: LarkNCExtensionPB_Entities_HongbaoContent.TypeEnum {
//    get {return _storage._type ?? .unknown}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
  /// 是否点击过红包
//  public var clicked: Bool {
//    get {return _storage._clicked ?? false}
//    set {_uniqueStorage()._clicked = newValue}
//  }
  /// Returns true if `clicked` has been explicitly set.
//  public var hasClicked: Bool {return _storage._clicked != nil}
  /// Clears the value of `clicked`. Subsequent reads from it will return its default value.
//  public mutating func clearClicked() {_uniqueStorage()._clicked = nil}
//
  /// 是否已过期
//  public var isExpired: Bool {
//    get {return _storage._isExpired ?? false}
//    set {_uniqueStorage()._isExpired = newValue}
//  }
  /// Returns true if `isExpired` has been explicitly set.
//  public var hasIsExpired: Bool {return _storage._isExpired != nil}
  /// Clears the value of `isExpired`. Subsequent reads from it will return its default value.
//  public mutating func clearIsExpired() {_uniqueStorage()._isExpired = nil}
//
//  public var grabbed: Bool {
//    get {return _storage._grabbed ?? false}
//    set {_uniqueStorage()._grabbed = newValue}
//  }
  /// Returns true if `grabbed` has been explicitly set.
//  public var hasGrabbed: Bool {return _storage._grabbed != nil}
  /// Clears the value of `grabbed`. Subsequent reads from it will return its default value.
//  public mutating func clearGrabbed() {_uniqueStorage()._grabbed = nil}
//
//  public var grabbedFinish: Bool {
//    get {return _storage._grabbedFinish ?? false}
//    set {_uniqueStorage()._grabbedFinish = newValue}
//  }
  /// Returns true if `grabbedFinish` has been explicitly set.
//  public var hasGrabbedFinish: Bool {return _storage._grabbedFinish != nil}
  /// Clears the value of `grabbedFinish`. Subsequent reads from it will return its default value.
//  public mutating func clearGrabbedFinish() {_uniqueStorage()._grabbedFinish = nil}
//
  /// 是否可以领取
//  public var canGrab: Bool {
//    get {return _storage._canGrab ?? true}
//    set {_uniqueStorage()._canGrab = newValue}
//  }
  /// Returns true if `canGrab` has been explicitly set.
//  public var hasCanGrab: Bool {return _storage._canGrab != nil}
  /// Clears the value of `canGrab`. Subsequent reads from it will return its default value.
//  public mutating func clearCanGrab() {_uniqueStorage()._canGrab = nil}
//
  /// 专属红包部分可领取用户列表，最多10个，包含当前用户会放到第一个
//  public var previewUserIds: [Int64] {
//    get {return _storage._previewUserIds}
//    set {_uniqueStorage()._previewUserIds = newValue}
//  }
//
  /// 红包总个数
//  public var totalNum: Int32 {
//    get {return _storage._totalNum ?? 0}
//    set {_uniqueStorage()._totalNum = newValue}
//  }
  /// Returns true if `totalNum` has been explicitly set.
//  public var hasTotalNum: Bool {return _storage._totalNum != nil}
  /// Clears the value of `totalNum`. Subsequent reads from it will return its default value.
//  public mutating func clearTotalNum() {_uniqueStorage()._totalNum = nil}
//
  /// 21+ 封面相关字段
//  public var cover: LarkNCExtensionPB_Entities_HongbaoCover {
//    get {return _storage._cover ?? LarkNCExtensionPB_Entities_HongbaoCover()}
//    set {_uniqueStorage()._cover = newValue}
//  }
  /// Returns true if `cover` has been explicitly set.
//  public var hasCover: Bool {return _storage._cover != nil}
  /// Clears the value of `cover`. Subsequent reads from it will return its default value.
//  public mutating func clearCover() {_uniqueStorage()._cover = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//
    /// 单聊固定红包
//    case p2P // = 1
//
    /// 群固定红包
//    case groupFix // = 2
//
    /// 群拼手气红包
//    case groupRandom // = 3
//
    /// 4 预留，SDK 使用在了商业化红包上，CommercialHongbaoContent，已废弃
//    case exclusive // = 5
//
    /// 企业红包 固定金额
//    case b2CFix // = 6
//
    /// 企业红包 随机金额
//    case b2CRandom // = 7
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .p2P
//      case 2: self = .groupFix
//      case 3: self = .groupRandom
//      case 5: self = .exclusive
//      case 6: self = .b2CFix
//      case 7: self = .b2CRandom
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .p2P: return 1
//      case .groupFix: return 2
//      case .groupRandom: return 3
//      case .exclusive: return 5
//      case .b2CFix: return 6
//      case .b2CRandom: return 7
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_HongbaoContent.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_TodoOperationContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 操作类型
  public var operationType: LarkNCExtensionPB_Entities_TodoOperationContent.TypeEnum {
    get {return _storage._operationType ?? .unknown}
    set {_uniqueStorage()._operationType = newValue}
  }
  /// Returns true if `operationType` has been explicitly set.
//  public var hasOperationType: Bool {return _storage._operationType != nil}
  /// Clears the value of `operationType`. Subsequent reads from it will return its default value.
//  public mutating func clearOperationType() {_uniqueStorage()._operationType = nil}

  /// 操作者的id
  public var operatorID: String {
    get {return _storage._operatorID ?? String()}
    set {_uniqueStorage()._operatorID = newValue}
  }
  /// Returns true if `operatorID` has been explicitly set.
//  public var hasOperatorID: Bool {return _storage._operatorID != nil}
  /// Clears the value of `operatorID`. Subsequent reads from it will return its default value.
//  public mutating func clearOperatorID() {_uniqueStorage()._operatorID = nil}

  /// 任务相关的信息
  public var todoDetail: LarkNCExtensionPB_Entities_TodoDetail {
    get {return _storage._todoDetail ?? LarkNCExtensionPB_Entities_TodoDetail()}
    set {_uniqueStorage()._todoDetail = newValue}
  }
  /// Returns true if `todoDetail` has been explicitly set.
//  public var hasTodoDetail: Bool {return _storage._todoDetail != nil}
  /// Clears the value of `todoDetail`. Subsequent reads from it will return its default value.
//  public mutating func clearTodoDetail() {_uniqueStorage()._todoDetail = nil}

  public var updateFields: [LarkNCExtensionPB_Entities_TodoOperationContent.UpdateField] {
    get {return _storage._updateFields}
    set {_uniqueStorage()._updateFields = newValue}
  }

  public var msgStatus: LarkNCExtensionPB_Entities_TodoOperationContent.MsgStatus {
    get {return _storage._msgStatus ?? .active}
    set {_uniqueStorage()._msgStatus = newValue}
  }
  /// Returns true if `msgStatus` has been explicitly set.
//  public var hasMsgStatus: Bool {return _storage._msgStatus != nil}
  /// Clears the value of `msgStatus`. Subsequent reads from it will return its default value.
//  public mutating func clearMsgStatus() {_uniqueStorage()._msgStatus = nil}

  /// 任务评论相关的信息
  public var todoCommentDetail: LarkNCExtensionPB_Entities_TodoCommentDetail {
    get {return _storage._todoCommentDetail ?? LarkNCExtensionPB_Entities_TodoCommentDetail()}
    set {_uniqueStorage()._todoCommentDetail = newValue}
  }
  /// Returns true if `todoCommentDetail` has been explicitly set.
//  public var hasTodoCommentDetail: Bool {return _storage._todoCommentDetail != nil}
  /// Clears the value of `todoCommentDetail`. Subsequent reads from it will return its default value.
//  public mutating func clearTodoCommentDetail() {_uniqueStorage()._todoCommentDetail = nil}

  /// 每日任务汇总报告
  public var dailyRemind: LarkNCExtensionPB_Entities_TodoDailyRemind {
    get {return _storage._dailyRemind ?? LarkNCExtensionPB_Entities_TodoDailyRemind()}
    set {_uniqueStorage()._dailyRemind = newValue}
  }
  /// Returns true if `dailyRemind` has been explicitly set.
//  public var hasDailyRemind: Bool {return _storage._dailyRemind != nil}
  /// Clears the value of `dailyRemind`. Subsequent reads from it will return its default value.
//  public mutating func clearDailyRemind() {_uniqueStorage()._dailyRemind = nil}

  /// 被操作用户的id（造成todo状态发生变化）
  public var targetUserIds: [String] {
    get {return _storage._targetUserIds}
    set {_uniqueStorage()._targetUserIds = newValue}
  }

  /// op_type是COMPLETE, INCOMPLETE时再细化具体的操作类型。
  public var completeType: LarkNCExtensionPB_Entities_TodoOperationContent.CompleteType {
    get {return _storage._completeType ?? .unknownCompleteType}
    set {_uniqueStorage()._completeType = newValue}
  }
  /// Returns true if `completeType` has been explicitly set.
//  public var hasCompleteType: Bool {return _storage._completeType != nil}
  /// Clears the value of `completeType`. Subsequent reads from it will return its default value.
//  public mutating func clearCompleteType() {_uniqueStorage()._completeType = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum TypeEnum: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknown // = 0

    ///更新任务信息
    case update // = 1

    /// 指派任务
    case assign // = 2

    /// 完成任务
    case complete // = 3

    /// 取消任务
    case cancel // = 4

    /// 删除任务
    case delete // = 5

    /// 创建新的任务
    case create // = 6

    /// 将已完成任务改成未完成
    case incomplete // = 7

    /// 分享任务
    case share // = 8

    /// 创建评论
    case createComment // = 9

    /// 回复评论
    case replyComment // = 10

    /// 每日报告
    case dailyRemind // = 11

    /// 关注
    case follow // = 12

    /// 取消关注
    case unfollow // = 13

    /// 发送评论 reaction
    case reactComment // = 14

    /// {{user_name}} 完成了你的任务
    case completeAssignee // = 15

    /// {{user_name}} 完成了任务
    case completeSelf // = 16

    /// {{user_name}} 恢复了你的任务
    case restoreAssignee // = 17

    /// {{user_name}} 恢复了任务
    case restoreSelf // = 18

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .update
      case 2: self = .assign
      case 3: self = .complete
      case 4: self = .cancel
      case 5: self = .delete
      case 6: self = .create
      case 7: self = .incomplete
      case 8: self = .share
      case 9: self = .createComment
      case 10: self = .replyComment
      case 11: self = .dailyRemind
      case 12: self = .follow
      case 13: self = .unfollow
      case 14: self = .reactComment
      case 15: self = .completeAssignee
      case 16: self = .completeSelf
      case 17: self = .restoreAssignee
      case 18: self = .restoreSelf
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .update: return 1
      case .assign: return 2
      case .complete: return 3
      case .cancel: return 4
      case .delete: return 5
      case .create: return 6
      case .incomplete: return 7
      case .share: return 8
      case .createComment: return 9
      case .replyComment: return 10
      case .dailyRemind: return 11
      case .follow: return 12
      case .unfollow: return 13
      case .reactComment: return 14
      case .completeAssignee: return 15
      case .completeSelf: return 16
      case .restoreAssignee: return 17
      case .restoreSelf: return 18
      }
    }

  }

  /// https://bytedance.feishu.cn/docs/doccnz0aWzCWDNpuGDllAhVC3uc#
  public enum CompleteType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownCompleteType // = 0

    /// {{username}} 完成了任务，整个任务已完成
    case completeWholeTodo // = 1

    /// {{user_name}} 不再参与任务，整个任务已完成
    case completeWholeTodoAfterRemoveAssigneeSelf // = 2

    /// {{user_name}} 移除了执行者{{Asignee}} ，整个任务已完成
    case completeWholeTodoAfterRemoveAssignees // = 3

    /// {{user_name}} 将你从执行中移除 ，整个任务已完成
    case completeWholeTodoAfterRemoveAssigneeYourself // = 4

    /// {{user_name}} 完成了{{Asignee }} 的任务，任务被全部完成
    case completeWholeTodoAfterCompleteAssignees // = 5

    /// {{username}} 完成了你的任务，整个任务已完成
    case completeWholeTodoAfterCompleteAssigneeYourself // = 6

    /// {{user_name}} 恢复了整个任务
    case restoreWholeTodo // = 21

    /// {{user_name}} 将自己添加为执行者，任务已被恢复
    case restoreWholeTodoAfterAddAssigneeSelf // = 22

    /// {{user_name}} 新增了执行者{{user_name}}，任务已被恢复
    case restoreWholeTodoAfterAddAssignees // = 23

    /// {{user_name}} 添加你为执行者，任务已被恢复
    case restoreWholeTodoAfterAddAssigneesYourself // = 24

    /// {{user_name}} 恢复了自己的任务，任务已恢复
    case restoreWholeTodoAfterRestoreSelf // = 25

    /// {{user_name}} 恢复了{{assignee}} 的任务，任务已恢复
    case restoreWholeTodoAfterRestoreAssignee // = 26

    /// {{user_name}}恢复了你的任务，任务已被恢复。
    case restoreWholeTodoAfterRestoreAssigneeYourself // = 27

    public init() {
      self = .unknownCompleteType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownCompleteType
      case 1: self = .completeWholeTodo
      case 2: self = .completeWholeTodoAfterRemoveAssigneeSelf
      case 3: self = .completeWholeTodoAfterRemoveAssignees
      case 4: self = .completeWholeTodoAfterRemoveAssigneeYourself
      case 5: self = .completeWholeTodoAfterCompleteAssignees
      case 6: self = .completeWholeTodoAfterCompleteAssigneeYourself
      case 21: self = .restoreWholeTodo
      case 22: self = .restoreWholeTodoAfterAddAssigneeSelf
      case 23: self = .restoreWholeTodoAfterAddAssignees
      case 24: self = .restoreWholeTodoAfterAddAssigneesYourself
      case 25: self = .restoreWholeTodoAfterRestoreSelf
      case 26: self = .restoreWholeTodoAfterRestoreAssignee
      case 27: self = .restoreWholeTodoAfterRestoreAssigneeYourself
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownCompleteType: return 0
      case .completeWholeTodo: return 1
      case .completeWholeTodoAfterRemoveAssigneeSelf: return 2
      case .completeWholeTodoAfterRemoveAssignees: return 3
      case .completeWholeTodoAfterRemoveAssigneeYourself: return 4
      case .completeWholeTodoAfterCompleteAssignees: return 5
      case .completeWholeTodoAfterCompleteAssigneeYourself: return 6
      case .restoreWholeTodo: return 21
      case .restoreWholeTodoAfterAddAssigneeSelf: return 22
      case .restoreWholeTodoAfterAddAssignees: return 23
      case .restoreWholeTodoAfterAddAssigneesYourself: return 24
      case .restoreWholeTodoAfterRestoreSelf: return 25
      case .restoreWholeTodoAfterRestoreAssignee: return 26
      case .restoreWholeTodoAfterRestoreAssigneeYourself: return 27
      }
    }

  }

  public enum UpdateField: LarkHTTP.Enum {
    public typealias RawValue = Int
    case summary // = 0
    case dueTime // = 1

    public init() {
      self = .summary
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .summary
      case 1: self = .dueTime
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .summary: return 0
      case .dueTime: return 1
      }
    }

  }

  public enum MsgStatus: LarkHTTP.Enum {
    public typealias RawValue = Int
    case active // = 0
    case deleted // = 1

    public init() {
      self = .active
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .active
      case 1: self = .deleted
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .active: return 0
      case .deleted: return 1
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_TodoOperationContent.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_TodoOperationContent.CompleteType: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_TodoOperationContent.UpdateField: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_TodoOperationContent.MsgStatus: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_TodoDetail {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 任务的guid
  public var guid: String {
    get {return _storage._guid ?? String()}
    set {_uniqueStorage()._guid = newValue}
  }
  /// Returns true if `guid` has been explicitly set.
//  public var hasGuid: Bool {return _storage._guid != nil}
  /// Clears the value of `guid`. Subsequent reads from it will return its default value.
//  public mutating func clearGuid() {_uniqueStorage()._guid = nil}

  /// 任务被指派者的id
  public var assignees: [String] {
    get {return _storage._assignees}
    set {_uniqueStorage()._assignees = newValue}
  }

  ///任务的摘要
  public var summary: String {
    get {return _storage._summary ?? String()}
    set {_uniqueStorage()._summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  public var hasSummary: Bool {return _storage._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
//  public mutating func clearSummary() {_uniqueStorage()._summary = nil}

  /// 完成时间
  public var dueTime: Int64 {
    get {return _storage._dueTime ?? 0}
    set {_uniqueStorage()._dueTime = newValue}
  }
  /// Returns true if `dueTime` has been explicitly set.
  public var hasDueTime: Bool {return _storage._dueTime != nil}
  /// Clears the value of `dueTime`. Subsequent reads from it will return its default value.
//  public mutating func clearDueTime() {_uniqueStorage()._dueTime = nil}

  /// 时区信息
  public var dueTimeZone: String {
    get {return _storage._dueTimeZone ?? String()}
    set {_uniqueStorage()._dueTimeZone = newValue}
  }
  /// Returns true if `dueTimeZone` has been explicitly set.
//  public var hasDueTimeZone: Bool {return _storage._dueTimeZone != nil}
  /// Clears the value of `dueTimeZone`. Subsequent reads from it will return its default value.
//  public mutating func clearDueTimeZone() {_uniqueStorage()._dueTimeZone = nil}

  public var isAllDay: Bool {
    get {return _storage._isAllDay ?? false}
    set {_uniqueStorage()._isAllDay = newValue}
  }
  /// Returns true if `isAllDay` has been explicitly set.
//  public var hasIsAllDay: Bool {return _storage._isAllDay != nil}
  /// Clears the value of `isAllDay`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAllDay() {_uniqueStorage()._isAllDay = nil}

  public var msgBelongTo: LarkNCExtensionPB_Entities_TodoDetail.MsgBelongTo {
    get {return _storage._msgBelongTo ?? .unknown}
    set {_uniqueStorage()._msgBelongTo = newValue}
  }
  /// Returns true if `msgBelongTo` has been explicitly set.
//  public var hasMsgBelongTo: Bool {return _storage._msgBelongTo != nil}
  /// Clears the value of `msgBelongTo`. Subsequent reads from it will return its default value.
//  public mutating func clearMsgBelongTo() {_uniqueStorage()._msgBelongTo = nil}

  /// 富文本摘要
  public var richSummary: LarkNCExtensionPB_Entities_RichContent {
    get {return _storage._richSummary ?? LarkNCExtensionPB_Entities_RichContent()}
    set {_uniqueStorage()._richSummary = newValue}
  }
  /// Returns true if `richSummary` has been explicitly set.
//  public var hasRichSummary: Bool {return _storage._richSummary != nil}
  /// Clears the value of `richSummary`. Subsequent reads from it will return its default value.
//  public mutating func clearRichSummary() {_uniqueStorage()._richSummary = nil}

  /// 任务的关注者
  public var followers: [String] {
    get {return _storage._followers}
    set {_uniqueStorage()._followers = newValue}
  }

  /// 创建者id
  public var creatorID: String {
    get {return _storage._creatorID ?? String()}
    set {_uniqueStorage()._creatorID = newValue}
  }
  /// Returns true if `creatorID` has been explicitly set.
//  public var hasCreatorID: Bool {return _storage._creatorID != nil}
  /// Clears the value of `creatorID`. Subsequent reads from it will return its default value.
//  public mutating func clearCreatorID() {_uniqueStorage()._creatorID = nil}

  /// 任务完成时间
  public var completedMilliTime: Int64 {
    get {return _storage._completedMilliTime ?? 0}
    set {_uniqueStorage()._completedMilliTime = newValue}
  }
  /// Returns true if `completedMilliTime` has been explicitly set.
//  public var hasCompletedMilliTime: Bool {return _storage._completedMilliTime != nil}
  /// Clears the value of `completedMilliTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCompletedMilliTime() {_uniqueStorage()._completedMilliTime = nil}

  /// 任务删除时间
  public var deletedMilliTime: Int64 {
    get {return _storage._deletedMilliTime ?? 0}
    set {_uniqueStorage()._deletedMilliTime = newValue}
  }
  /// Returns true if `deletedMilliTime` has been explicitly set.
  public var hasDeletedMilliTime: Bool {return _storage._deletedMilliTime != nil}
  /// Clears the value of `deletedMilliTime`. Subsequent reads from it will return its default value.
//  public mutating func clearDeletedMilliTime() {_uniqueStorage()._deletedMilliTime = nil}

  /// todo source: 1，TODO；2，MESSENGER；3，DOC；4，DOC_PRODUCT；5，PANO；
  public var source: Int32 {
    get {return _storage._source ?? 0}
    set {_uniqueStorage()._source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  public var hasSource: Bool {return _storage._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
//  public mutating func clearSource() {_uniqueStorage()._source = nil}

  /// 非角色是否可以关注。
  public var canFollow: Bool {
    get {return _storage._canFollow ?? false}
    set {_uniqueStorage()._canFollow = newValue}
  }
  /// Returns true if `canFollow` has been explicitly set.
//  public var hasCanFollow: Bool {return _storage._canFollow != nil}
  /// Clears the value of `canFollow`. Subsequent reads from it will return its default value.
//  public mutating func clearCanFollow() {_uniqueStorage()._canFollow = nil}

  public var userToPermission: Dictionary<String,LarkNCExtensionPB_Entities_TodoDetail.Permission> {
    get {return _storage._userToPermission}
    set {_uniqueStorage()._userToPermission = newValue}
  }

  public var userDetails: Dictionary<String,LarkNCExtensionPB_Entities_TodoDetail.UserDetail> {
    get {return _storage._userDetails}
    set {_uniqueStorage()._userDetails = newValue}
  }

  public var customComplete: LarkNCExtensionPB_Entities_CustomComplete {
    get {return _storage._customComplete ?? LarkNCExtensionPB_Entities_CustomComplete()}
    set {_uniqueStorage()._customComplete = newValue}
  }
  /// Returns true if `customComplete` has been explicitly set.
//  public var hasCustomComplete: Bool {return _storage._customComplete != nil}
  /// Clears the value of `customComplete`. Subsequent reads from it will return its default value.
//  public mutating func clearCustomComplete() {_uniqueStorage()._customComplete = nil}

  /// 重复规则
  public var rrule: String {
    get {return _storage._rrule ?? String()}
    set {_uniqueStorage()._rrule = newValue}
  }
  /// Returns true if `rrule` has been explicitly set.
  public var hasRrule: Bool {return _storage._rrule != nil}
  /// Clears the value of `rrule`. Subsequent reads from it will return its default value.
//  public mutating func clearRrule() {_uniqueStorage()._rrule = nil}

  public var reminders: [LarkNCExtensionPB_Entities_TodoDetailReminder] {
    get {return _storage._reminders}
    set {_uniqueStorage()._reminders = newValue}
  }

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum MsgBelongTo: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case bot // = 1
    case chat // = 2

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .bot
      case 2: self = .chat
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .bot: return 1
      case .chat: return 2
      }
    }

  }

  public struct Permission {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    ///4.9及以下 两个只要一个为true，就请求整个Todo完成。
    public var canCompleteSelf: Bool {
      get {return _canCompleteSelf ?? false}
      set {_canCompleteSelf = newValue}
    }
    /// Returns true if `canCompleteSelf` has been explicitly set.
//    public var hasCanCompleteSelf: Bool {return self._canCompleteSelf != nil}
    /// Clears the value of `canCompleteSelf`. Subsequent reads from it will return its default value.
//    public mutating func clearCanCompleteSelf() {self._canCompleteSelf = nil}

    public var canCompleteTodo: Bool {
      get {return _canCompleteTodo ?? false}
      set {_canCompleteTodo = newValue}
    }
    /// Returns true if `canCompleteTodo` has been explicitly set.
//    public var hasCanCompleteTodo: Bool {return self._canCompleteTodo != nil}
    /// Clears the value of `canCompleteTodo`. Subsequent reads from it will return its default value.
//    public mutating func clearCanCompleteTodo() {self._canCompleteTodo = nil}

    public var canFollow: Bool {
      get {return _canFollow ?? false}
      set {_canFollow = newValue}
    }
    /// Returns true if `canFollow` has been explicitly set.
//    public var hasCanFollow: Bool {return self._canFollow != nil}
    /// Clears the value of `canFollow`. Subsequent reads from it will return its default value.
//    public mutating func clearCanFollow() {self._canFollow = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _canCompleteSelf: Bool? = nil
    fileprivate var _canCompleteTodo: Bool? = nil
    fileprivate var _canFollow: Bool? = nil
  }

  public struct UserDetail {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var isCompleted: Bool {
      get {return _isCompleted ?? false}
      set {_isCompleted = newValue}
    }
    /// Returns true if `isCompleted` has been explicitly set.
//    public var hasIsCompleted: Bool {return self._isCompleted != nil}
    /// Clears the value of `isCompleted`. Subsequent reads from it will return its default value.
//    public mutating func clearIsCompleted() {self._isCompleted = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _isCompleted: Bool? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_TodoDetail.MsgBelongTo: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_TodoDetailReminder {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var type: LarkNCExtensionPB_Entities_TodoDetailReminder.TypeEnum {
    get {return _type ?? .absolute}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}

  /// If type is RELATIVE, set this field with minutes
  public var time: Int64 {
    get {return _time ?? 0}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  public var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  public mutating func clearTime() {self._time = nil}

  public var notNeedFire: Bool {
    get {return _notNeedFire ?? false}
    set {_notNeedFire = newValue}
  }
  /// Returns true if `notNeedFire` has been explicitly set.
//  public var hasNotNeedFire: Bool {return self._notNeedFire != nil}
  /// Clears the value of `notNeedFire`. Subsequent reads from it will return its default value.
//  public mutating func clearNotNeedFire() {self._notNeedFire = nil}

  public var isAllDay: Bool {
    get {return _isAllDay ?? false}
    set {_isAllDay = newValue}
  }
  /// Returns true if `isAllDay` has been explicitly set.
//  public var hasIsAllDay: Bool {return self._isAllDay != nil}
  /// Clears the value of `isAllDay`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAllDay() {self._isAllDay = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum TypeEnum: LarkHTTP.Enum {
    public typealias RawValue = Int

    /// 绝对时间，比如：2020年10月1日 08:00:00
    case absolute // = 1

    /// 相对时间，比如：提前十五分钟
    case relative // = 2

    /// 不绑定时区，以当前用户所在的时区为准，比如：当天8点，则以用户所在时区8点为准
    case floating // = 3

    public init() {
      self = .absolute
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .absolute
      case 2: self = .relative
      case 3: self = .floating
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .absolute: return 1
      case .relative: return 2
      case .floating: return 3
      }
    }

  }

  public init() {}

  fileprivate var _type: LarkNCExtensionPB_Entities_TodoDetailReminder.TypeEnum? = nil
  fileprivate var _time: Int64? = nil
  fileprivate var _notNeedFire: Bool? = nil
  fileprivate var _isAllDay: Bool? = nil
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_TodoDetailReminder.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// 自定义完成任务
public struct LarkNCExtensionPB_Entities_CustomComplete {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var android: LarkNCExtensionPB_Entities_CustomComplete.Action {
    get {return _storage._android ?? LarkNCExtensionPB_Entities_CustomComplete.Action()}
    set {_uniqueStorage()._android = newValue}
  }
  /// Returns true if `android` has been explicitly set.
//  public var hasAndroid: Bool {return _storage._android != nil}
  /// Clears the value of `android`. Subsequent reads from it will return its default value.
//  public mutating func clearAndroid() {_uniqueStorage()._android = nil}

  public var ios: LarkNCExtensionPB_Entities_CustomComplete.Action {
    get {return _storage._ios ?? LarkNCExtensionPB_Entities_CustomComplete.Action()}
    set {_uniqueStorage()._ios = newValue}
  }
  /// Returns true if `ios` has been explicitly set.
  public var hasIos: Bool {return _storage._ios != nil}
  /// Clears the value of `ios`. Subsequent reads from it will return its default value.
//  public mutating func clearIos() {_uniqueStorage()._ios = nil}

  public var pc: LarkNCExtensionPB_Entities_CustomComplete.Action {
    get {return _storage._pc ?? LarkNCExtensionPB_Entities_CustomComplete.Action()}
    set {_uniqueStorage()._pc = newValue}
  }
  /// Returns true if `pc` has been explicitly set.
  public var hasPc: Bool {return _storage._pc != nil}
  /// Clears the value of `pc`. Subsequent reads from it will return its default value.
//  public mutating func clearPc() {_uniqueStorage()._pc = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public struct Action {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var href: String {
      get {return _href ?? String()}
      set {_href = newValue}
    }
    /// Returns true if `href` has been explicitly set.
    public var hasHref: Bool {return self._href != nil}
    /// Clears the value of `href`. Subsequent reads from it will return its default value.
//    public mutating func clearHref() {self._href = nil}

    ///  链接不存在的时候，toast提示，端上用英文兜底
    public var tip: Dictionary<String,String> = [:]

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _href: String? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct LarkNCExtensionPB_Entities_TodoCommentDetail {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var commentID: Int64 {
    get {return _storage._commentID ?? 0}
    set {_uniqueStorage()._commentID = newValue}
  }
  /// Returns true if `commentID` has been explicitly set.
//  public var hasCommentID: Bool {return _storage._commentID != nil}
  /// Clears the value of `commentID`. Subsequent reads from it will return its default value.
//  public mutating func clearCommentID() {_uniqueStorage()._commentID = nil}

  public var commentType: LarkNCExtensionPB_Entities_TodoCommentDetail.TodoCommentType {
    get {return _storage._commentType ?? .unknownType}
    set {_uniqueStorage()._commentType = newValue}
  }
  /// Returns true if `commentType` has been explicitly set.
//  public var hasCommentType: Bool {return _storage._commentType != nil}
  /// Clears the value of `commentType`. Subsequent reads from it will return its default value.
//  public mutating func clearCommentType() {_uniqueStorage()._commentType = nil}

  public var richContent: LarkNCExtensionPB_Entities_RichContent {
    get {return _storage._richContent ?? LarkNCExtensionPB_Entities_RichContent()}
    set {_uniqueStorage()._richContent = newValue}
  }
  /// Returns true if `richContent` has been explicitly set.
//  public var hasRichContent: Bool {return _storage._richContent != nil}
  /// Clears the value of `richContent`. Subsequent reads from it will return its default value.
//  public mutating func clearRichContent() {_uniqueStorage()._richContent = nil}

  public var position: Int32 {
    get {return _storage._position ?? 0}
    set {_uniqueStorage()._position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return _storage._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
//  public mutating func clearPosition() {_uniqueStorage()._position = nil}

  public var attachments: [LarkNCExtensionPB_Entities_TodoAttachmentInfo] {
    get {return _storage._attachments}
    set {_uniqueStorage()._attachments = newValue}
  }

  /// 当评论新增 reaction 时，会发送 Bot 通知，这里会填充新增的 reaction。
  public var newlyAddedReaction: LarkNCExtensionPB_Entities_TodoCommentDetail.Reaction {
    get {return _storage._newlyAddedReaction ?? LarkNCExtensionPB_Entities_TodoCommentDetail.Reaction()}
    set {_uniqueStorage()._newlyAddedReaction = newValue}
  }
  /// Returns true if `newlyAddedReaction` has been explicitly set.
//  public var hasNewlyAddedReaction: Bool {return _storage._newlyAddedReaction != nil}
  /// Clears the value of `newlyAddedReaction`. Subsequent reads from it will return its default value.
//  public mutating func clearNewlyAddedReaction() {_uniqueStorage()._newlyAddedReaction = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum TodoCommentType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownType // = 0
    case richText // = 1

    public init() {
      self = .unknownType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownType
      case 1: self = .richText
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownType: return 0
      case .richText: return 1
      }
    }

  }

  public struct Reaction {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// 谁发送的 reaction
    public var userID: String {
      get {return _userID ?? String()}
      set {_userID = newValue}
    }
    /// Returns true if `userID` has been explicitly set.
//    public var hasUserID: Bool {return self._userID != nil}
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
//    public mutating func clearUserID() {self._userID = nil}

    public var type: String {
      get {return _type ?? String()}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {self._type = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _userID: String? = nil
    fileprivate var _type: String? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_TodoCommentDetail.TodoCommentType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_TodoDailyRemind {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 提醒的todo信息
  public var todos: [LarkNCExtensionPB_Entities_TodoDetail] = []

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}
}

public struct LarkNCExtensionPB_Entities_TodoAttachmentInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var type: LarkNCExtensionPB_Entities_TodoAttachmentInfo.TodoAttachmentType {
    get {return _type ?? .unknownAttachmentType}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum TodoAttachmentType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownAttachmentType // = 0
    case image // = 1

    public init() {
      self = .unknownAttachmentType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownAttachmentType
      case 1: self = .image
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownAttachmentType: return 0
      case .image: return 1
      }
    }

  }

  public init() {}

  fileprivate var _type: LarkNCExtensionPB_Entities_TodoAttachmentInfo.TodoAttachmentType? = nil
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_TodoAttachmentInfo.TodoAttachmentType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_RichContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var richText: LarkNCExtensionPB_Entities_RichText {
    get {return _storage._richText ?? LarkNCExtensionPB_Entities_RichText()}
    set {_uniqueStorage()._richText = newValue}
  }
  /// Returns true if `richText` has been explicitly set.
  public var hasRichText: Bool {return _storage._richText != nil}
  /// Clears the value of `richText`. Subsequent reads from it will return its default value.
//  public mutating func clearRichText() {_uniqueStorage()._richText = nil}

  public var docEntity: LarkNCExtensionPB_Entities_DocEntity {
    get {return _storage._docEntity ?? LarkNCExtensionPB_Entities_DocEntity()}
    set {_uniqueStorage()._docEntity = newValue}
  }
  /// Returns true if `docEntity` has been explicitly set.
  public var hasDocEntity: Bool {return _storage._docEntity != nil}
  /// Clears the value of `docEntity`. Subsequent reads from it will return its default value.
//  public mutating func clearDocEntity() {_uniqueStorage()._docEntity = nil}

  public var urlPreviewHangPoints: Dictionary<String,LarkNCExtensionPB_Entities_UrlPreviewHangPoint> {
    get {return _storage._urlPreviewHangPoints}
    set {_uniqueStorage()._urlPreviewHangPoints = newValue}
  }

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

//public struct LarkNCExtensionPB_Entities_GeneralCalendarContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var calendarType: LarkNCExtensionPB_Entities_GeneralCalendarContent.TypeEnum {
//    get {return _storage._calendarType ?? .unknown}
//    set {_uniqueStorage()._calendarType = newValue}
//  }
  /// Returns true if `calendarType` has been explicitly set.
//  public var hasCalendarType: Bool {return _storage._calendarType != nil}
  /// Clears the value of `calendarType`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarType() {_uniqueStorage()._calendarType = nil}
//
  /// 1
//  public var eventCard: LarkNCExtensionPB_Entities_EventCardTemplate {
//    get {return _storage._eventCard ?? LarkNCExtensionPB_Entities_EventCardTemplate()}
//    set {_uniqueStorage()._eventCard = newValue}
//  }
  /// Returns true if `eventCard` has been explicitly set.
//  public var hasEventCard: Bool {return _storage._eventCard != nil}
  /// Clears the value of `eventCard`. Subsequent reads from it will return its default value.
//  public mutating func clearEventCard() {_uniqueStorage()._eventCard = nil}
//
//  public var rsvpCommentInfo: LarkNCExtensionPB_Entities_RSVPCommentInfo {
//    get {return _storage._rsvpCommentInfo ?? LarkNCExtensionPB_Entities_RSVPCommentInfo()}
//    set {_uniqueStorage()._rsvpCommentInfo = newValue}
//  }
  /// Returns true if `rsvpCommentInfo` has been explicitly set.
//  public var hasRsvpCommentInfo: Bool {return _storage._rsvpCommentInfo != nil}
  /// Clears the value of `rsvpCommentInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearRsvpCommentInfo() {_uniqueStorage()._rsvpCommentInfo = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//
    /// 转让日程
//    case transferCalendarEvent // = 1
//
    /// 回复邀请支持留言
//    case rsvpComment // = 2
//
    /// 切换日程所在日历
//    case switchCalendar // = 3
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .transferCalendarEvent
//      case 2: self = .rsvpComment
//      case 3: self = .switchCalendar
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .transferCalendarEvent: return 1
//      case .rsvpComment: return 2
//      case .switchCalendar: return 3
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_GeneralCalendarContent.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 支持回复邀请留言相关信息
//public struct LarkNCExtensionPB_Entities_RSVPCommentInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 区分不同客户端
//  public var replyCommentID: String {
//    get {return _replyCommentID ?? String()}
//    set {_replyCommentID = newValue}
//  }
  /// Returns true if `replyCommentID` has been explicitly set.
//  public var hasReplyCommentID: Bool {return self._replyCommentID != nil}
  /// Clears the value of `replyCommentID`. Subsequent reads from it will return its default value.
//  public mutating func clearReplyCommentID() {self._replyCommentID = nil}
//
//  public var comment: String {
//    get {return _comment ?? String()}
//    set {_comment = newValue}
//  }
  /// Returns true if `comment` has been explicitly set.
//  public var hasComment: Bool {return self._comment != nil}
  /// Clears the value of `comment`. Subsequent reads from it will return its default value.
//  public mutating func clearComment() {self._comment = nil}
//
  /// 标记消息，用于Chat跳转
//  public var inviteOperatorID: String {
//    get {return _inviteOperatorID ?? String()}
//    set {_inviteOperatorID = newValue}
//  }
  /// Returns true if `inviteOperatorID` has been explicitly set.
//  public var hasInviteOperatorID: Bool {return self._inviteOperatorID != nil}
  /// Clears the value of `inviteOperatorID`. Subsequent reads from it will return its default value.
//  public mutating func clearInviteOperatorID() {self._inviteOperatorID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _replyCommentID: String? = nil
//  fileprivate var _comment: String? = nil
//  fileprivate var _inviteOperatorID: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var i18NKey: String {
//    get {return _i18NKey ?? String()}
//    set {_i18NKey = newValue}
//  }
  /// Returns true if `i18NKey` has been explicitly set.
//  public var hasI18NKey: Bool {return self._i18NKey != nil}
  /// Clears the value of `i18NKey`. Subsequent reads from it will return its default value.
//  public mutating func clearI18NKey() {self._i18NKey = nil}
//
//  public var params: [LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic.Param] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public struct Param {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var type: LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic.Param.TypeEnum {
//      get {return _type ?? .unknown}
//      set {_type = newValue}
//    }
    /// Returns true if `type` has been explicitly set.
//    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {self._type = nil}
//
    /// 当type为UNKNOWN时尝试获取
//    public var defaultContent: String {
//      get {return _defaultContent ?? String()}
//      set {_defaultContent = newValue}
//    }
    /// Returns true if `defaultContent` has been explicitly set.
//    public var hasDefaultContent: Bool {return self._defaultContent != nil}
    /// Clears the value of `defaultContent`. Subsequent reads from it will return its default value.
//    public mutating func clearDefaultContent() {self._defaultContent = nil}
//
//    public var content: LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic.Param.OneOf_Content? = nil
//
    /// 对应type：FIXED_CONTENT
//    public var fixedContent: String {
//      get {
//        if case .fixedContent(let v)? = content {return v}
//        return String()
//      }
//      set {content = .fixedContent(newValue)}
//    }
//
    /// 对应type：GROUP
//    public var chatID: String {
//      get {
//        if case .chatID(let v)? = content {return v}
//        return String()
//      }
//      set {content = .chatID(newValue)}
//    }
//
    /// 对应type：LARK_USER、ROOM
//    public var userID: String {
//      get {
//        if case .userID(let v)? = content {return v}
//        return String()
//      }
//      set {content = .userID(newValue)}
//    }
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum OneOf_Content: Equatable {
      /// 对应type：FIXED_CONTENT
//      case fixedContent(String)
      /// 对应type：GROUP
//      case chatID(String)
      /// 对应type：LARK_USER、ROOM
//      case userID(String)
//
//    #if !swift(>=4.1)
//      public static func ==(lhs: LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic.Param.OneOf_Content, rhs: LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic.Param.OneOf_Content) -> Bool {
//        switch (lhs, rhs) {
//        case (.fixedContent(let l), .fixedContent(let r)): return l == r
//        case (.chatID(let l), .chatID(let r)): return l == r
//        case (.userID(let l), .userID(let r)): return l == r
//        default: return false
//        }
//      }
//    #endif
//    }
//
//    public enum TypeEnum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//      case fixedContent // = 1
//      case group // = 2
//      case larkUser // = 3
//      case room // = 4
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .fixedContent
//        case 2: self = .group
//        case 3: self = .larkUser
//        case 4: self = .room
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .fixedContent: return 1
//        case .group: return 2
//        case .larkUser: return 3
//        case .room: return 4
//        }
//      }
//
//    }
//
//    public init() {}
//
//    fileprivate var _type: LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic.Param.TypeEnum? = nil
//    fileprivate var _defaultContent: String? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _i18NKey: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_VideoChatContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var type: LarkNCExtensionPB_Entities_VideoChatContent.TypeEnum {
//    get {return _storage._type ?? .unknown}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
  /// 会议卡片内容
//  public var meetingCard: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard {
//    get {return _storage._meetingCard ?? LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard()}
//    set {_uniqueStorage()._meetingCard = newValue}
//  }
  /// Returns true if `meetingCard` has been explicitly set.
//  public var hasMeetingCard: Bool {return _storage._meetingCard != nil}
  /// Clears the value of `meetingCard`. Subsequent reads from it will return its default value.
//  public mutating func clearMeetingCard() {_uniqueStorage()._meetingCard = nil}
//
  /// 序列号，单调递增
//  public var sequenceID: Int64 {
//    get {return _storage._sequenceID ?? 0}
//    set {_uniqueStorage()._sequenceID = newValue}
//  }
  /// Returns true if `sequenceID` has been explicitly set.
//  public var hasSequenceID: Bool {return _storage._sequenceID != nil}
  /// Clears the value of `sequenceID`. Subsequent reads from it will return its default value.
//  public mutating func clearSequenceID() {_uniqueStorage()._sequenceID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//    case meetingCard // = 1
//    case chatRoomCard // = 2
//    case samePageMeeting // = 3
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .meetingCard
//      case 2: self = .chatRoomCard
//      case 3: self = .samePageMeeting
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .meetingCard: return 1
//      case .chatRoomCard: return 2
//      case .samePageMeeting: return 3
//      }
//    }
//
//  }
//
//  public struct MeetingCard {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 点击加入时，需要传给服务端的信息
//    public var meetingID: String {
//      get {return _storage._meetingID ?? String()}
//      set {_uniqueStorage()._meetingID = newValue}
//    }
    /// Returns true if `meetingID` has been explicitly set.
//    public var hasMeetingID: Bool {return _storage._meetingID != nil}
    /// Clears the value of `meetingID`. Subsequent reads from it will return its default value.
//    public mutating func clearMeetingID() {_uniqueStorage()._meetingID = nil}
//
    /// 会议状态
//    public var status: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.Status {
//      get {return _storage._status ?? .unknown}
//      set {_uniqueStorage()._status = newValue}
//    }
    /// Returns true if `status` has been explicitly set.
//    public var hasStatus: Bool {return _storage._status != nil}
    /// Clears the value of `status`. Subsequent reads from it will return its default value.
//    public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
    /// 会议开始时间（距1970.1.1毫秒）
//    public var startTimeMs: Int64 {
//      get {return _storage._startTimeMs ?? 0}
//      set {_uniqueStorage()._startTimeMs = newValue}
//    }
    /// Returns true if `startTimeMs` has been explicitly set.
//    public var hasStartTimeMs: Bool {return _storage._startTimeMs != nil}
    /// Clears the value of `startTimeMs`. Subsequent reads from it will return its default value.
//    public mutating func clearStartTimeMs() {_uniqueStorage()._startTimeMs = nil}
//
    /// 会议结束时间（距1970.1.1毫秒）
//    public var endTimeMs: Int64 {
//      get {return _storage._endTimeMs ?? 0}
//      set {_uniqueStorage()._endTimeMs = newValue}
//    }
    /// Returns true if `endTimeMs` has been explicitly set.
//    public var hasEndTimeMs: Bool {return _storage._endTimeMs != nil}
    /// Clears the value of `endTimeMs`. Subsequent reads from it will return its default value.
//    public mutating func clearEndTimeMs() {_uniqueStorage()._endTimeMs = nil}
//
    /// 会议标题
//    public var topic: String {
//      get {return _storage._topic ?? String()}
//      set {_uniqueStorage()._topic = newValue}
//    }
    /// Returns true if `topic` has been explicitly set.
//    public var hasTopic: Bool {return _storage._topic != nil}
    /// Clears the value of `topic`. Subsequent reads from it will return its default value.
//    public mutating func clearTopic() {_uniqueStorage()._topic = nil}
//
    /// 发起人ID
//    public var sponsorID: String {
//      get {return _storage._sponsorID ?? String()}
//      set {_uniqueStorage()._sponsorID = newValue}
//    }
    /// Returns true if `sponsorID` has been explicitly set.
//    public var hasSponsorID: Bool {return _storage._sponsorID != nil}
    /// Clears the value of `sponsorID`. Subsequent reads from it will return its default value.
//    public mutating func clearSponsorID() {_uniqueStorage()._sponsorID = nil}
//
    /// 主持人ID (预留)
//    public var hostID: String {
//      get {return _storage._hostID ?? String()}
//      set {_uniqueStorage()._hostID = newValue}
//    }
    /// Returns true if `hostID` has been explicitly set.
//    public var hasHostID: Bool {return _storage._hostID != nil}
    /// Clears the value of `hostID`. Subsequent reads from it will return its default value.
//    public mutating func clearHostID() {_uniqueStorage()._hostID = nil}
//
    /// 会议号（预留）
//    public var meetNumber: String {
//      get {return _storage._meetNumber ?? String()}
//      set {_uniqueStorage()._meetNumber = newValue}
//    }
    /// Returns true if `meetNumber` has been explicitly set.
//    public var hasMeetNumber: Bool {return _storage._meetNumber != nil}
    /// Clears the value of `meetNumber`. Subsequent reads from it will return its default value.
//    public mutating func clearMeetNumber() {_uniqueStorage()._meetNumber = nil}
//
    /// participants信息
//    public var participants: [LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant] {
//      get {return _storage._participants}
//      set {_uniqueStorage()._participants = newValue}
//    }
//
    /// 参会者最大数量，满员提示时使用
//    public var maxParticipantCount: Int32 {
//      get {return _storage._maxParticipantCount ?? 0}
//      set {_uniqueStorage()._maxParticipantCount = newValue}
//    }
    /// Returns true if `maxParticipantCount` has been explicitly set.
//    public var hasMaxParticipantCount: Bool {return _storage._maxParticipantCount != nil}
    /// Clears the value of `maxParticipantCount`. Subsequent reads from it will return its default value.
//    public mutating func clearMaxParticipantCount() {_uniqueStorage()._maxParticipantCount = nil}
//
    /// 主持人类型 (预留)
//    public var hostType: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.ParticipantType {
//      get {return _storage._hostType ?? .larkUser}
//      set {_uniqueStorage()._hostType = newValue}
//    }
    /// Returns true if `hostType` has been explicitly set.
//    public var hasHostType: Bool {return _storage._hostType != nil}
    /// Clears the value of `hostType`. Subsequent reads from it will return its default value.
//    public mutating func clearHostType() {_uniqueStorage()._hostType = nil}
//
    /// 卡片类型
//    public var cardType: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.CardType {
//      get {return _storage._cardType ?? .unknownCardType}
//      set {_uniqueStorage()._cardType = newValue}
//    }
    /// Returns true if `cardType` has been explicitly set.
//    public var hasCardType: Bool {return _storage._cardType != nil}
    /// Clears the value of `cardType`. Subsequent reads from it will return its default value.
//    public mutating func clearCardType() {_uniqueStorage()._cardType = nil}
//
    /// 转发人ID
//    public var forwarderID: String {
//      get {return _storage._forwarderID ?? String()}
//      set {_uniqueStorage()._forwarderID = newValue}
//    }
    /// Returns true if `forwarderID` has been explicitly set.
//    public var hasForwarderID: Bool {return _storage._forwarderID != nil}
    /// Clears the value of `forwarderID`. Subsequent reads from it will return its default value.
//    public mutating func clearForwarderID() {_uniqueStorage()._forwarderID = nil}
//
    /// 会议来源
//    public var meetingSource: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingSource {
//      get {return _storage._meetingSource ?? .cardUnknownSourceType}
//      set {_uniqueStorage()._meetingSource = newValue}
//    }
    /// Returns true if `meetingSource` has been explicitly set.
//    public var hasMeetingSource: Bool {return _storage._meetingSource != nil}
    /// Clears the value of `meetingSource`. Subsequent reads from it will return its default value.
//    public mutating func clearMeetingSource() {_uniqueStorage()._meetingSource = nil}
//
    /// 视频会议分配个给日历的一个uid（不是meeting no）
//    public var calendarUid: String {
//      get {return _storage._calendarUid ?? String()}
//      set {_uniqueStorage()._calendarUid = newValue}
//    }
    /// Returns true if `calendarUid` has been explicitly set.
//    public var hasCalendarUid: Bool {return _storage._calendarUid != nil}
    /// Clears the value of `calendarUid`. Subsequent reads from it will return its default value.
//    public mutating func clearCalendarUid() {_uniqueStorage()._calendarUid = nil}
//
    /// 新增字段，会议是否被锁定
//    public var isLocked: Bool {
//      get {return _storage._isLocked ?? false}
//      set {_uniqueStorage()._isLocked = newValue}
//    }
    /// Returns true if `isLocked` has been explicitly set.
//    public var hasIsLocked: Bool {return _storage._isLocked != nil}
    /// Clears the value of `isLocked`. Subsequent reads from it will return its default value.
//    public mutating func clearIsLocked() {_uniqueStorage()._isLocked = nil}
//
    /// 新增字段，会议锁定后是否可以加入
//    public var isLockedJoinable: Bool {
//      get {return _storage._isLockedJoinable ?? false}
//      set {_uniqueStorage()._isLockedJoinable = newValue}
//    }
    /// Returns true if `isLockedJoinable` has been explicitly set.
//    public var hasIsLockedJoinable: Bool {return _storage._isLockedJoinable != nil}
    /// Clears the value of `isLockedJoinable`. Subsequent reads from it will return its default value.
//    public mutating func clearIsLockedJoinable() {_uniqueStorage()._isLockedJoinable = nil}
//
    /// 创建卡片的群ID
//    public var groupID: String {
//      get {return _storage._groupID ?? String()}
//      set {_uniqueStorage()._groupID = newValue}
//    }
    /// Returns true if `groupID` has been explicitly set.
//    public var hasGroupID: Bool {return _storage._groupID != nil}
    /// Clears the value of `groupID`. Subsequent reads from it will return its default value.
//    public mutating func clearGroupID() {_uniqueStorage()._groupID = nil}
//
    /// 默认 topic，支持 i18n
//    public var i18NDefaultTopic: LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic {
//      get {return _storage._i18NDefaultTopic ?? LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic()}
//      set {_uniqueStorage()._i18NDefaultTopic = newValue}
//    }
    /// Returns true if `i18NDefaultTopic` has been explicitly set.
//    public var hasI18NDefaultTopic: Bool {return _storage._i18NDefaultTopic != nil}
    /// Clears the value of `i18NDefaultTopic`. Subsequent reads from it will return its default value.
//    public mutating func clearI18NDefaultTopic() {_uniqueStorage()._i18NDefaultTopic = nil}
//
    /// 是否开启了等候室
//    public var isOpenLobby: Bool {
//      get {return _storage._isOpenLobby ?? false}
//      set {_uniqueStorage()._isOpenLobby = newValue}
//    }
    /// Returns true if `isOpenLobby` has been explicitly set.
//    public var hasIsOpenLobby: Bool {return _storage._isOpenLobby != nil}
    /// Clears the value of `isOpenLobby`. Subsequent reads from it will return its default value.
//    public mutating func clearIsOpenLobby() {_uniqueStorage()._isOpenLobby = nil}
//
    /// 会议OwnerID
//    public var ownerUserID: String {
//      get {return _storage._ownerUserID ?? String()}
//      set {_uniqueStorage()._ownerUserID = newValue}
//    }
    /// Returns true if `ownerUserID` has been explicitly set.
//    public var hasOwnerUserID: Bool {return _storage._ownerUserID != nil}
    /// Clears the value of `ownerUserID`. Subsequent reads from it will return its default value.
//    public mutating func clearOwnerUserID() {_uniqueStorage()._ownerUserID = nil}
//
    /// 会议Owner userType
//    public var ownerType: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.ParticipantType {
//      get {return _storage._ownerType ?? .unknowType}
//      set {_uniqueStorage()._ownerType = newValue}
//    }
    /// Returns true if `ownerType` has been explicitly set.
//    public var hasOwnerType: Bool {return _storage._ownerType != nil}
    /// Clears the value of `ownerType`. Subsequent reads from it will return its default value.
//    public mutating func clearOwnerType() {_uniqueStorage()._ownerType = nil}
//
    /// 卡片应该展示的总人数
//    public var totalParticipantNum: Int64 {
//      get {return _storage._totalParticipantNum ?? 0}
//      set {_uniqueStorage()._totalParticipantNum = newValue}
//    }
    /// Returns true if `totalParticipantNum` has been explicitly set.
//    public var hasTotalParticipantNum: Bool {return _storage._totalParticipantNum != nil}
    /// Clears the value of `totalParticipantNum`. Subsequent reads from it will return its default value.
//    public mutating func clearTotalParticipantNum() {_uniqueStorage()._totalParticipantNum = nil}
//
    /// 会议对应的参会人的participant 的集合（已经去重的set）
//    public var allParticipantTenant: [Int64] {
//      get {return _storage._allParticipantTenant}
//      set {_uniqueStorage()._allParticipantTenant = newValue}
//    }
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Status: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//      case joinable // = 1
//      case full // = 2
//      case end // = 3
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .joinable
//        case 2: self = .full
//        case 3: self = .end
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .joinable: return 1
//        case .full: return 2
//        case .end: return 3
//        }
//      }
//
//    }
//
//    public enum ParticipantType: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknowType // = 0
//      case larkUser // = 1
//      case room // = 2
//      case docUser // = 3
//      case neoUser // = 4
//      case neoGuestUser // = 5
//      case pstnUser // = 6
//      case sipUser // = 7
//      case reservedUser1 // = 8
//      case reservedUser2 // = 9
//      case reservedUser3 // = 10
//      case reservedUser4 // = 11
//      case reservedUser5 // = 12
//      case reservedUser6 // = 13
//      case reservedUser7 // = 14
//      case reservedUser8 // = 15
//      case reservedUser9 // = 16
//      case reservedUser10 // = 17
//      case reservedUser11 // = 18
//      case reservedUser12 // = 19
//      case reservedUser13 // = 20
//      case reservedUser14 // = 21
//      case reservedUser15 // = 22
//      case reservedUser16 // = 23
//      case reservedUser17 // = 24
//      case reservedUser18 // = 25
//      case reservedUser19 // = 26
//      case reservedUser20 // = 27
//
//      public init() {
//        self = .unknowType
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknowType
//        case 1: self = .larkUser
//        case 2: self = .room
//        case 3: self = .docUser
//        case 4: self = .neoUser
//        case 5: self = .neoGuestUser
//        case 6: self = .pstnUser
//        case 7: self = .sipUser
//        case 8: self = .reservedUser1
//        case 9: self = .reservedUser2
//        case 10: self = .reservedUser3
//        case 11: self = .reservedUser4
//        case 12: self = .reservedUser5
//        case 13: self = .reservedUser6
//        case 14: self = .reservedUser7
//        case 15: self = .reservedUser8
//        case 16: self = .reservedUser9
//        case 17: self = .reservedUser10
//        case 18: self = .reservedUser11
//        case 19: self = .reservedUser12
//        case 20: self = .reservedUser13
//        case 21: self = .reservedUser14
//        case 22: self = .reservedUser15
//        case 23: self = .reservedUser16
//        case 24: self = .reservedUser17
//        case 25: self = .reservedUser18
//        case 26: self = .reservedUser19
//        case 27: self = .reservedUser20
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknowType: return 0
//        case .larkUser: return 1
//        case .room: return 2
//        case .docUser: return 3
//        case .neoUser: return 4
//        case .neoGuestUser: return 5
//        case .pstnUser: return 6
//        case .sipUser: return 7
//        case .reservedUser1: return 8
//        case .reservedUser2: return 9
//        case .reservedUser3: return 10
//        case .reservedUser4: return 11
//        case .reservedUser5: return 12
//        case .reservedUser6: return 13
//        case .reservedUser7: return 14
//        case .reservedUser8: return 15
//        case .reservedUser9: return 16
//        case .reservedUser10: return 17
//        case .reservedUser11: return 18
//        case .reservedUser12: return 19
//        case .reservedUser13: return 20
//        case .reservedUser14: return 21
//        case .reservedUser15: return 22
//        case .reservedUser16: return 23
//        case .reservedUser17: return 24
//        case .reservedUser18: return 25
//        case .reservedUser19: return 26
//        case .reservedUser20: return 27
//        }
//      }
//
//    }
//
    /// 用于区别卡片是由发起人生成还是转发生
//    public enum CardType: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknownCardType // = 0
//      case sponsor // = 1
//      case forward // = 2
//
//      public init() {
//        self = .unknownCardType
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknownCardType
//        case 1: self = .sponsor
//        case 2: self = .forward
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknownCardType: return 0
//        case .sponsor: return 1
//        case .forward: return 2
//        }
//      }
//
//    }
//
    /// 会议入口来源
//    public enum MeetingSource: LarkHTTP.Enum {
//      public typealias RawValue = Int
//
      /// 未知
//      case cardUnknownSourceType // = 0
//      case cardFromUser // = 1
//      case cardFromCalendar // = 2
//      case cardFromInterview // = 3
//
//      public init() {
//        self = .cardUnknownSourceType
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .cardUnknownSourceType
//        case 1: self = .cardFromUser
//        case 2: self = .cardFromCalendar
//        case 3: self = .cardFromInterview
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .cardUnknownSourceType: return 0
//        case .cardFromUser: return 1
//        case .cardFromCalendar: return 2
//        case .cardFromInterview: return 3
//        }
//      }
//
//    }
//
//    public struct MeetingParticipant {
      // LarkHTTP.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the LarkHTTP library for
      // methods supported on all messages.
//
      /// 参会者ID
//      public var userID: String {
//        get {return _userID ?? String()}
//        set {_userID = newValue}
//      }
      /// Returns true if `userID` has been explicitly set.
//      public var hasUserID: Bool {return self._userID != nil}
      /// Clears the value of `userID`. Subsequent reads from it will return its default value.
//      public mutating func clearUserID() {self._userID = nil}
//
      /// 加入会议时间（距1970.1.1毫秒）
//      public var joinTimeMs: Int64 {
//        get {return _joinTimeMs ?? 0}
//        set {_joinTimeMs = newValue}
//      }
      /// Returns true if `joinTimeMs` has been explicitly set.
//      public var hasJoinTimeMs: Bool {return self._joinTimeMs != nil}
      /// Clears the value of `joinTimeMs`. Subsequent reads from it will return its default value.
//      public mutating func clearJoinTimeMs() {self._joinTimeMs = nil}
//
      /// 参会者状态
//      public var status: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant.Status {
//        get {return _status ?? .unknown}
//        set {_status = newValue}
//      }
      /// Returns true if `status` has been explicitly set.
//      public var hasStatus: Bool {return self._status != nil}
      /// Clears the value of `status`. Subsequent reads from it will return its default value.
//      public mutating func clearStatus() {self._status = nil}
//
      /// 参会者会中设备的ID (预留)
//      public var deviceID: String {
//        get {return _deviceID ?? String()}
//        set {_deviceID = newValue}
//      }
      /// Returns true if `deviceID` has been explicitly set.
//      public var hasDeviceID: Bool {return self._deviceID != nil}
      /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
//      public mutating func clearDeviceID() {self._deviceID = nil}
//
      /// 参会者类型 (预留)
//      public var userType: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.ParticipantType {
//        get {return _userType ?? .larkUser}
//        set {_userType = newValue}
//      }
      /// Returns true if `userType` has been explicitly set.
//      public var hasUserType: Bool {return self._userType != nil}
      /// Clears the value of `userType`. Subsequent reads from it will return its default value.
//      public mutating func clearUserType() {self._userType = nil}
//
      /// 是不是一个lark匿名游客
//      public var isLarkGuest: Bool {
//        get {return _isLarkGuest ?? false}
//        set {_isLarkGuest = newValue}
//      }
      /// Returns true if `isLarkGuest` has been explicitly set.
//      public var hasIsLarkGuest: Bool {return self._isLarkGuest != nil}
      /// Clears the value of `isLarkGuest`. Subsequent reads from it will return its default value.
//      public mutating func clearIsLarkGuest() {self._isLarkGuest = nil}
//
//      public var deviceType: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant.DeviceType {
//        get {return _deviceType ?? .unknownDeviceType}
//        set {_deviceType = newValue}
//      }
      /// Returns true if `deviceType` has been explicitly set.
//      public var hasDeviceType: Bool {return self._deviceType != nil}
      /// Clears the value of `deviceType`. Subsequent reads from it will return its default value.
//      public mutating func clearDeviceType() {self._deviceType = nil}
//
//      public var tenantID: String {
//        get {return _tenantID ?? String()}
//        set {_tenantID = newValue}
//      }
      /// Returns true if `tenantID` has been explicitly set.
//      public var hasTenantID: Bool {return self._tenantID != nil}
      /// Clears the value of `tenantID`. Subsequent reads from it will return its default value.
//      public mutating func clearTenantID() {self._tenantID = nil}
//
//      public var tenantTag: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant.TenantTag {
//        get {return _tenantTag ?? .standard}
//        set {_tenantTag = newValue}
//      }
      /// Returns true if `tenantTag` has been explicitly set.
//      public var hasTenantTag: Bool {return self._tenantTag != nil}
      /// Clears the value of `tenantTag`. Subsequent reads from it will return its default value.
//      public mutating func clearTenantTag() {self._tenantTag = nil}
//
//      public var bindID: String {
//        get {return _bindID ?? String()}
//        set {_bindID = newValue}
//      }
      /// Returns true if `bindID` has been explicitly set.
//      public var hasBindID: Bool {return self._bindID != nil}
      /// Clears the value of `bindID`. Subsequent reads from it will return its default value.
//      public mutating func clearBindID() {self._bindID = nil}
//
//      public var bindType: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant.BindType {
//        get {return _bindType ?? .unkown}
//        set {_bindType = newValue}
//      }
      /// Returns true if `bindType` has been explicitly set.
//      public var hasBindType: Bool {return self._bindType != nil}
      /// Clears the value of `bindType`. Subsequent reads from it will return its default value.
//      public mutating func clearBindType() {self._bindType = nil}
//
//      public var unknownFields = LarkHTTP.UnknownStorage()
//
//      public enum Status: LarkHTTP.Enum {
//        public typealias RawValue = Int
//
        /// 未知状态，向前兼容
//        case unknown // = 0
//
        /// 请求会议中
//        case calling // = 1
//
        /// 在当前通话中
//        case onTheCall // = 2
//
        /// 在当前会话呼叫中
//        case ringing // = 3
//
        /// 不在会议中，已经离开会议
//        case idle // = 4
//
//        public init() {
//          self = .unknown
//        }
//
//        public init?(rawValue: Int) {
//          switch rawValue {
//          case 0: self = .unknown
//          case 1: self = .calling
//          case 2: self = .onTheCall
//          case 3: self = .ringing
//          case 4: self = .idle
//          default: return nil
//          }
//        }
//
//        public var rawValue: Int {
//          switch self {
//          case .unknown: return 0
//          case .calling: return 1
//          case .onTheCall: return 2
//          case .ringing: return 3
//          case .idle: return 4
//          }
//        }
//
//      }
//
//      public enum TenantTag: LarkHTTP.Enum {
//        public typealias RawValue = Int
//
        /// 标准租户（大B租户）
//        case standard // = 0
//
        /// 未定义租户
//        case undefined // = 1
//
        /// 普通租户（小B租户）
//        case simple // = 2
//
//        public init() {
//          self = .standard
//        }
//
//        public init?(rawValue: Int) {
//          switch rawValue {
//          case 0: self = .standard
//          case 1: self = .undefined
//          case 2: self = .simple
//          default: return nil
//          }
//        }
//
//        public var rawValue: Int {
//          switch self {
//          case .standard: return 0
//          case .undefined: return 1
//          case .simple: return 2
//          }
//        }
//
//      }
//
//      public enum DeviceType: LarkHTTP.Enum {
//        public typealias RawValue = Int
//
        /// 未知
//        case unknownDeviceType // = 0
//
        /// 桌面端
//        case desktop // = 1
//
        /// 移动端
//        case mobile // = 2
//
        /// WEB端
//        case web // = 3
//
//        public init() {
//          self = .unknownDeviceType
//        }
//
//        public init?(rawValue: Int) {
//          switch rawValue {
//          case 0: self = .unknownDeviceType
//          case 1: self = .desktop
//          case 2: self = .mobile
//          case 3: self = .web
//          default: return nil
//          }
//        }
//
//        public var rawValue: Int {
//          switch self {
//          case .unknownDeviceType: return 0
//          case .desktop: return 1
//          case .mobile: return 2
//          case .web: return 3
//          }
//        }
//
//      }
//
//      public enum BindType: LarkHTTP.Enum {
//        public typealias RawValue = Int
//        case unkown // = 0
//        case lark // = 1
//
//        public init() {
//          self = .unkown
//        }
//
//        public init?(rawValue: Int) {
//          switch rawValue {
//          case 0: self = .unkown
//          case 1: self = .lark
//          default: return nil
//          }
//        }
//
//        public var rawValue: Int {
//          switch self {
//          case .unkown: return 0
//          case .lark: return 1
//          }
//        }
//
//      }
//
//      public init() {}
//
//      fileprivate var _userID: String? = nil
//      fileprivate var _joinTimeMs: Int64? = nil
//      fileprivate var _status: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant.Status? = nil
//      fileprivate var _deviceID: String? = nil
//      fileprivate var _userType: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.ParticipantType? = nil
//      fileprivate var _isLarkGuest: Bool? = nil
//      fileprivate var _deviceType: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant.DeviceType? = nil
//      fileprivate var _tenantID: String? = nil
//      fileprivate var _tenantTag: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant.TenantTag? = nil
//      fileprivate var _bindID: String? = nil
//      fileprivate var _bindType: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant.BindType? = nil
//    }
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_VideoChatContent.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_SystemContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 模版，如 '{from_user} 邀请 {target_user} 加入群聊'， 兜底文案，必须是非空字符串。 新增系统消息不再使用，只需要填充非空字符串。
//  public var messageTemplate: String {
//    get {return _storage._messageTemplate ?? String()}
//    set {_uniqueStorage()._messageTemplate = newValue}
//  }
  /// Returns true if `messageTemplate` has been explicitly set.
//  public var hasMessageTemplate: Bool {return _storage._messageTemplate != nil}
  /// Clears the value of `messageTemplate`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageTemplate() {_uniqueStorage()._messageTemplate = nil}
//
  /// 模版中的值，如 {from_user: '张三', target_user: '李四'} #废弃
//  public var contents: Dictionary<String,String> {
//    get {return _storage._contents}
//    set {_uniqueStorage()._contents = newValue}
//  }
//
  /// 模版操作类型, 详情见enum Type。4.9版本起，仅需要特化的系统消息类型需要使用该字段。通用的系统消息使用type_num字段进行文案拉取。
//  public var type: LarkNCExtensionPB_Entities_SystemContent.TypeEnum {
//    get {return _storage._type ?? .unknown}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
//  public var event: Data {
//    get {return _storage._event ?? LarkHTTP.Internal.emptyData}
//    set {_uniqueStorage()._event = newValue}
//  }
  /// Returns true if `event` has been explicitly set.
//  public var hasEvent: Bool {return _storage._event != nil}
  /// Clears the value of `event`. Subsequent reads from it will return its default value.
//  public mutating func clearEvent() {_uniqueStorage()._event = nil}
//
  ///模板中的值，兼容老客户端， 19年1月份之后的版本，SDK不再使用该字段。
//  public var contentValues: Dictionary<String,LarkNCExtensionPB_Entities_SystemContent.ContentValue> {
//    get {return _storage._contentValues}
//    set {_uniqueStorage()._contentValues = newValue}
//  }
//
  ///与type保持一致，必填。4.9版本起，通用的系统消息不再需要SDK同步更新pb，依赖该字段拉取系统消息模板。
//  public var typeNum: Int32 {
//    get {return _storage._typeNum ?? 0}
//    set {_uniqueStorage()._typeNum = newValue}
//  }
  /// Returns true if `typeNum` has been explicitly set.
//  public var hasTypeNum: Bool {return _storage._typeNum != nil}
  /// Clears the value of `typeNum`. Subsequent reads from it will return its default value.
//  public mutating func clearTypeNum() {_uniqueStorage()._typeNum = nil}
//
  ///新增 items, 从这里获取 type 和 value 的对应关系， 19年1月份之后的版本，SDK不再使用该字段。
//  public var newContentValues: Dictionary<String,LarkNCExtensionPB_Entities_SystemContent.ContentValue> {
//    get {return _storage._newContentValues}
//    set {_uniqueStorage()._newContentValues = newValue}
//  }
//
  /// 描述系统消息模板Key和对应占位所需要使用的信息。
//  public var sysContentValues: Dictionary<String,LarkNCExtensionPB_Entities_SystemContent.ContentValue> {
//    get {return _storage._sysContentValues}
//    set {_uniqueStorage()._sysContentValues = newValue}
//  }
//
  /// key: item中的paction, 用于描述item的触发行为
//  public var itemActions: Dictionary<Int32,LarkNCExtensionPB_Entities_SystemMessageItemAction> {
//    get {return _storage._itemActions}
//    set {_uniqueStorage()._itemActions = newValue}
//  }
//
  /// 用于区分系统消息版本，目前默认值0表示老版本，依次递增，目前只有0和1两种版本
//  public var version: Int32 {
//    get {return _storage._version ?? 0}
//    set {_uniqueStorage()._version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {_uniqueStorage()._version = nil}
//
//  public var e2EeContent: LarkNCExtensionPB_Entities_SystemContent.E2EEContent {
//    get {return _storage._e2EeContent ?? LarkNCExtensionPB_Entities_SystemContent.E2EEContent()}
//    set {_uniqueStorage()._e2EeContent = newValue}
//  }
  /// Returns true if `e2EeContent` has been explicitly set.
//  public var hasE2EeContent: Bool {return _storage._e2EeContent != nil}
  /// Clears the value of `e2EeContent`. Subsequent reads from it will return its default value.
//  public mutating func clearE2EeContent() {_uniqueStorage()._e2EeContent = nil}
//
//  public var vcContent: LarkNCExtensionPB_Entities_SystemContent.VideoConferenceContent {
//    get {return _storage._vcContent ?? LarkNCExtensionPB_Entities_SystemContent.VideoConferenceContent()}
//    set {_uniqueStorage()._vcContent = newValue}
//  }
  /// Returns true if `vcContent` has been explicitly set.
//  public var hasVcContent: Bool {return _storage._vcContent != nil}
  /// Clears the value of `vcContent`. Subsequent reads from it will return its default value.
//  public mutating func clearVcContent() {_uniqueStorage()._vcContent = nil}
//
//  public var hongbaoContent: LarkNCExtensionPB_Entities_SystemContent.HongbaoContent {
//    get {return _storage._hongbaoContent ?? LarkNCExtensionPB_Entities_SystemContent.HongbaoContent()}
//    set {_uniqueStorage()._hongbaoContent = newValue}
//  }
  /// Returns true if `hongbaoContent` has been explicitly set.
//  public var hasHongbaoContent: Bool {return _storage._hongbaoContent != nil}
  /// Clears the value of `hongbaoContent`. Subsequent reads from it will return its default value.
//  public mutating func clearHongbaoContent() {_uniqueStorage()._hongbaoContent = nil}
//
  ///已废弃，不应再使用，请使用外层的DocEntity
//  public var docEntity: LarkNCExtensionPB_Entities_SystemContent.DocEntity {
//    get {return _storage._docEntity ?? LarkNCExtensionPB_Entities_SystemContent.DocEntity()}
//    set {_uniqueStorage()._docEntity = newValue}
//  }
  /// Returns true if `docEntity` has been explicitly set.
//  public var hasDocEntity: Bool {return _storage._docEntity != nil}
  /// Clears the value of `docEntity`. Subsequent reads from it will return its default value.
//  public mutating func clearDocEntity() {_uniqueStorage()._docEntity = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//
    ///未识别
//    case unknown // = 0
//
    ///  {from_user} 将群名称"{old_group_name}"修改为"{group_name}"
//    case userModifyGroupName // = 1
//
    ///  {from_user} 更新了群头像
//    case userModifyGroupAvatar // = 2
//
    ///  {from_user} 更新了群描述: {new_description}
//    case userModifyGroupDescription // = 3
//
    ///  {from_user} 更新了群设置
//    case userModifyGroupSettings // = 4
//
    ///  {from_user} 发起群聊，并邀请 {to_chatters} 加入群聊
//    case userStartGroupAndInvite // = 5
//
    ///  欢迎 {to_chatters} 加入 {group_name}，新成员入群可查看所有历史消息
//    case systemWelcomeUser // = 6
//
    ///  {from_user} 邀请 {to_chatters} 加入群聊，新成员入群可查看所有历史消息
//    case userInviteOthersJoin // = 7
//
    ///  {from_user} 退出群聊
//    case userQuitGroup // = 8
//
    ///  {from_user} 将 {to_chatters} 移出群聊
//    case userRemoveOthers // = 9
//
    ///  {from_user} 清除了群描述
//    case userRemoveGroupDescription // = 10
//
    ///  {from_user} 拨打（查看）了 {to_chatters} 的电话
//    case userCheckOthersTelephone // = 11
//
    /// 以下消息同步于 {user1} 与 {user2} 的单聊会话
//    case deriveFromP2PChat // = 12
//
    /// {to_chatters} 通过 {from_user} 分享的名片进入此群，新成员入群可查看所有历史消息
//    case userJoinViaShare // = 13
//
    /// {from_user} 将群主转让给 {to_user}
//    case transferGroupChatOwner // = 14
//
    /// {from_user} 将群主转让给 {to_chatter}，并退出此群
//    case transferGroupChatOwnerAndQuit // = 15
//
    /// {from_user} 清空了 群公告
//    case wipeAnnouncement // = 16
//
    /// 添加邮件收件人/抄送人
//    case addEmailMembers // = 17
//
    /// 移除邮件收件人／抄送人
//    case removeEmailMembers // = 18
//
    /// 修改邮件收件人／抄送人
//    case modifyEmailMembers // = 19
//
    ///  修改了邮件主题
//    case userModifyEmailSubject // = 20
//
    /// {from_user} 同步了{count}条消息到本群聊
//    case userSyncMessage // = 21
//
    /// {from_user} 把主题修改为 "{thread_topic}"
//    case userModifyThreadTopic // = 22
//
    /// {from_user} 邀请{to_chatters}加入了多人密聊，新成员无法看到历史消息
//    case userInviteOthersJoinCryptoChat // = 23
//
    ///  {from_user} 发起密聊群聊，并邀请 {to_chatters} 加入群聊
//    case userStartCryptoGroupAndInvite // = 24
//
    ///已取消    // ps: "已取消 重拨>" "已取消 回拨>"
//    case userCallE2EeVoiceWhenCancelled // = 25
//
    ///未接电话  // ps: "未接电话 重拨>"  "未接电话 回拨>"
//    case userCallE2EeVoiceWhenMissed // = 26
//
    ///通话时长:{ duration_time }
//    case userCallE2EeVoiceDuration // = 27
//
    ///视频通话取消
//    case vcCallHostCancel // = 28
//
    ///无法接入，请稍后尝试
//    case vcCallPartiNoAnswer // = 29
//
    ///拒绝接入，请稍后尝试
//    case vcCallPartiCancel // = 30
//
    ///已在视频通话中，请稍后尝试
//    case vcCallHostBusy // = 31
//
    ///忙线中，请稍后尝试
//    case vcCallPartiBusy // = 32
//
    ///发起了视频通话
//    case vcCallFinishNotice // = 33
//
    ///视频通话结束，时长{duration_time}
//    case vcCallDuration // = 34
//
    ///  {from_user} 创建了会议，并邀请 {to_chatters} 加入群聊
//    case userStartMeetingGroupAndInvite // = 35
//
    ///  {from_user} 邀请 {to_chatters} 加入会议群聊
//    case userInviteOthersJoinMeeting // = 36
//
    ///  {from_user} 已退出会议群聊
//    case userQuitMeetingChat // = 37
//
    /// {from_user} 解散了会议群聊
//    case userDismissedMeetingChat // = 38
//
    ///{from_user}发起群聊
//    case userStartGroup // = 39
//
    /// {from_user} 将 {to_chatters} 移出会议群聊
//    case userRemoveOthersFromMeeting // = 40
//
    /// {from_user} 加入了会议群聊
//    case userAddMeetingChat // = 41
//
    /// 欢迎加入{chat_name}部门群，本群里都是你的同事
//    case joinDepartmentGroup // = 42
//
    /// 你们已经成为联系人，可以开始聊天了
//    case buildFriendship // = 43
//
    ///你们已经不是联系人，无法发送消息
//    case nonFriendsNotice // = 44
//
    /// {from_user} 拒绝了你的日程邀请“{event}”
//    case declineInvitation // = 45
//
    /// {from_user} 拒绝了你的邀请，开始时间：{date_time} “{event}”
//    case declineSpecInvitation // = 46
//
    ///{to_chatters} 通过 {from_user} 分享的二维码进入此群，新成员入群可查看所有历史消息
//    case userJoinViaQrCode // = 47
//
    /// 连线失败
//    case vcCallConnectFail // = 48
//
    /// 网络短线结束通话
//    case vcCallDisconnect // = 49
//
    /// 当前版本不支持此操作
//    case vcCallHostLowVersion // = 50
//
    /// 对方版本不支持此操作
//    case vcCallPartiLowVersion // = 51
//
    /// 已拒绝
//    case userCallE2EeVoiceWhenRefused // = 52
//
    /// 忙线未接听
//    case userCallE2EeVoiceWhenOccupy // = 53
//
    ///  你领取了{send_user}的{hongbao}
//    case grabOtherHongbao // = 54
//
    ///  {recv_user}领取了你的{hongbao}
//    case otherGrabMyHongbao // = 55
//
    ///  你的{hongbao}已被全部领取
//    case lastHongbaoIsGrabbed // = 56
//
    /// 发送红包消息失败，发送系统消息 "红包发送失败，金额将在1-3个工作日退回余额，可在{wallet}中查看"
//    case sendHongbaoMessageFailed // = 57
//
    /// {from_user} 同步了{count}条{message}到本群聊 //暂时不处理，占位用
//    case userSyncMessageV2 // = 58
//
    /// {from_user} 给大家开通了文档 {doc_name} 的 {permission} 权限 {doc_url}
//    case userShareDocPermission // = 59
//
    /// {from_user} 将大家在 {doc_name} 文档的权限由 可{original_permission} 变更为 可{permission} {doc_url}
//    case userChangeDocPermission // = 60
//
    /// {from_user} 给大家共享了文件夹 {folder} {doc_url}
//    case userShareDocFolder // = 61
//
    /// {admin} 开启了仅群主可发言
//    case userOpenOnlyAdminPost // = 62
//
    /// {admin}将{members}设置为可发言成员
//    case userSepecifyMembersPost // = 63
//
    /// 此会话在当前飞书版本不可使用，请升级飞书客户端
//    case userLowVersionHint // = 64
//
    /// {from_user}清空了标题
//    case userThreadClearTitle // = 65
//
    /// {admin}开启了 全部成员可发言
//    case userOpenAnyonePost // = 66
//
    /// 会话内所有消息不可转发
//    case cryptoMessageNoticeNoTransmit // = 67
//
    /// 消息无论是否被读，发出7天后都将消失
//    case cryptoMessageNoticeSevenDays // = 68
//
    /// 支持消息已读后自动销毁，销毁时间可配置
//    case cryptoMessageNoticeBurnAfterReading // = 69
//
    /// {from_user}将焚毁时间调整为{timer} {timer_en_us} {timer_ja_jp}
//    case userSetCryptoMessageBurnLife // = 70
//
    /// {from_user}进行了截屏
//    case userTookScreenshotInCryptoChat // = 71
//
    /// 当前版本无法调整焚毁时间，请尽快升T级至新版
//    case cryptoLowVersionHint // = 72
//
    /// {from_user} 邀请此群成员进入新创建的外部群 {new_chat}
//    case inviteChatMember2OutChat // = 73
//
    /// {from_user} 发起群聊，并邀请群组 {from_chat} 的成员加入群聊
//    case createChatAndInviteFromChatMember // = 74
//
    /// 系统将会自动将你发送的消息翻译成接收方设置的语言哦,试一试
//    case autoTranslateGuidance // = 75
//
    /// {from_user} 撤销了入群邀请，{to_chatters} 被移出群聊
//    case withdrawAddedUser // = 76
//
    /// {oncall_users}用户提问已经过去{timeout}分钟，请及时回复
//    case saipanRemindOncallReply // = 77
//
    /// {oncall_users}若用户问题已解决，请及时结束服务
//    case saipanRemindOncallDone // = 78
//
    /// {guest_users}因为你未继续回复，10秒后自动结束工单
//    case saipanRemindOncallAutoDone // = 79
//
    /// 进入人工服务，{oncall_users}为你提供服务，开始聊起来吧~
//    case saipanAddOncall // = 80
//
    /// {from_user} 发起密聊群聊
//    case userStartCryptoGroup // = 81
//
    ///  {from_user} 邀请 {to_chatters} 协助解决问题，新成员只能查看当前工单历史消息
//    case userInviteOthersJoinOncall // = 82
//
    /// 视频会议开始
//    case vcMeetingStarted // = 83
//
    /// {{admin_name}}开启了 仅群主可新建话题
//    case userOpenOnlyAdminPostThread // = 84
//
    /// {{admin_name}}将{{member_name}}设置为可新建话题成员
//    case userSpecifyMembersPostThread // = 85
//
    /// {{admin_name}}开启了 全部成员可新建话题
//    case userOpenAnyonePostThread // = 86
//
    /// 视频会议结束，超过一小时
//    case vcMeetingEndedOverOneHour // = 87
//
    /// You mentioned {name}, but they’re not in this Group Chat. You can Invite Them
//    case inviteAtChatters // = 88
//
    /// 视频会议结束，未超过一小时
//    case vcMeetingEndedLessOneHour // = 89
//
    /// 视频会议结束，未超过1分钟
//    case vcMeetingEndedLessOneMin // = 90
//
    /// 无topic视频会议结束，超过一小时
//    case vcDefaultMeetingEndedOverOneHour // = 91
//
    /// 无topic视频会议结束，不超过一小时
//    case vcDefaultMeetingEndedLessOneHour // = 92
//
    /// 无topic视频会议结束，不超过一分钟
//    case vcDefaultMeetingEndedLessOneMin // = 93
//
    /// 视频会议开始
//    case vcVideoChatStarted // = 94
//
    /// 语音/视频通话结束，超过一小时
//    case vcCallEndedOverOneHour // = 95
//
    /// 语音/视频通话结束，不超过一小时
//    case vcCallEndedLessOneHour // = 96
//
    /// 语音/视频通话结束，不超过一分钟
//    case vcCallEndedLessOneMin // = 97
//
    /// 语音/视频通话异常断线，超过一小时
//    case vcCallDisconnectedEndedOverOneHour // = 98
//
    /// 语音/视频通话异常断线，不超过一小时
//    case vcCallDisconnectedEndedLessOneHour // = 99
//
    /// 语音/视频通话异常断线，不超过一分钟
//    case vcCallDisconnectedEndedLessOneMin // = 100
//
    /// 语音/视频通话被叫未接听
//    case vcCallIntervieweeNoAnswer // = 101
//
    /// 语音/视频通话被叫拒绝通话
//    case vcCallIntervieweeRefuse // = 102
//
    /// 语音/视频通话主叫取消通话
//    case vcCallInterviewerCancel // = 103
//
    /// 语音/视频通话被叫忙线
//    case vcCallIntervieweeBusy // = 104
//
    /// VOIP通话结束，超过一小时
//    case voipEndedOverOneHour // = 105
//
    /// VOIP通话结束，不超过一小时
//    case voipEndedLessOneHour // = 106
//
    /// VOIP通话结束，不超过一分钟
//    case voipEndedLessOneMin // = 107
//
    /// VOIP通话异常断线，超过一小时
//    case voipDisconnectedEndedOverOneHour // = 108
//
    /// VOIP通话异常断线，不超过一小时
//    case voipDisconnectedEndedLessOneHour // = 109
//
    /// VOIP通话异常断线，超过一分钟
//    case voipDisconnectedEndedLessOneMin // = 110
//
    /// VOIP通话被叫未接听
//    case voipIntervieweeNoAnswer // = 111
//
    /// VOIP通话被叫拒绝
//    case voipIntervieweeRefuse // = 112
//
    /// VOIP通话主叫取消通话
//    case voipInterviewerCancel // = 113
//
    /// VOIP通话被叫忙线
//    case voipIntervieweeBusy // = 114
//
    /// 服务台 用户选择了卡片内容
//    case saipanSelectCardContent // = 115
//
    /// 服务台用户排队
//    case saipanUserQueueing // = 116
//
    /// 服务台提醒客服排队
//    case saipanNotifyAgentQueueing // = 117
//
    /// {oncall_users} 通过服务台机器人消息卡片进入此群，新成员入群可查看所有历史消息
//    case saipanAgentEnterChat // = 118
//
    /// 服务台 预留
//    case saipanReserved4 // = 119
//
    /// 服务台 预留
//    case saipanReserved5 // = 120
//
    /// {from_user}取消了报警电话
//    case cancelEmergencyCall // = 121
//
    /// {from_user}挂断了报警电话
//    case hangupEmergencyCall // = 122
//
    /// {from_user}给{to_user}拨打了一个报警电话
//    case startEmergencyCall // = 123
//
    /// 我已将本会议群转为普通群 (群组不再与原日程关联) 。
//    case meetingTransferToChat // = 124
//
    /// 我已将本会议群转为普通群 (群组不再与原日程关联) 。之前的会议纪要如下：{doc_url}
//    case meetingTransferToChatWithDocURL // = 125
//
    /// The above messages were imported from Slack
//    case externalDataMigrationLarkMessageNotify1 // = 126
//
    /// 预留
//    case externalDataMigrationLarkMessageNotify2 // = 127
//
    /// 预留
//    case externalDataMigrationLarkMessageNotify3 // = 128
//
    /// 预留
//    case externalDataMigrationLarkMessageNotify4 // = 129
//
    /// 预留
//    case externalDataMigrationLarkMessageNotify5 // = 130
//
    /// 语音/视频通话被叫不在线
//    case vcCallIntervieweeNotOnline // = 131
//
    /// VOIP被叫不在线
//    case voipIntervieweeNotOnline // = 132
//
    /// {from_user}邀请你到文件夹{folder}中，并赋予{role}身份
//    case folderRoleAddForInvitee // = 133
//
    /// {from_user}将{file_name}移出共享文件夹{folder}
//    case folderObjMoveOut // = 134
//
    /// {from_user}将{file_name} 从文件夹{folder}中删除
//    case folderObjRemove // = 135
//
    /// 文档{file_name}的作者移除了对文件夹{folder}的授权
//    case fileOwnerRemoveFolderPermission // = 136
//
    ///温馨提示：{app_name}是一款帮助企业提升办公效率的产品，不会发起任何涉及汇款、转账的活动。当你在{app_name}中收到需要汇款或转账的消息时，请提高警惕，切勿泄漏个人信息。若你收到疑似诈骗等违法信息时，请及时向{app_name}举报。
//    case messagePaymentFraudAlert // = 137
//
    ///加入大群，自动取消提醒
//    case userJoinChatAutoMute // = 138
//
    ///被叫主动挂断
//    case emergencyCallNotanswer // = 139
//
    /// 某用户邀请其他用户进群时，针对其中无权限邀请至同一个群中的用户进行系统消息通知, 无权限用户少于临界值, {from_user} {to chatters}
//    case inviteChattersToChatNoPermissionLessThreshold // = 140
//
    /// 某用户邀请其他用户进群时，针对其中无权限邀请至同一个群中的用户进行系统消息通知, 无权限用户大于临界值, {from_user} {to chatters} 等 {num} 人
//    case inviteChattersToChatNoPermissionOverThreshold // = 141
//
    /// {users}无法使用密聊，添加失败
//    case usersUnableToUseCryptoChat // = 142
//
    ///请升级最新版本(PS:这里是兼容老版本，老版本收到Chat room start 会显示"请升级"，新端会做特殊处理)
//    case chatRoomStart // = 143
//
    ///  {from_user} 创建了小组，并邀请 {to_chatters} 加入小组
//    case userStartTopicGroupAndInvite // = 144
//
    /// {from_user} 将小组名称{channel_name}修改为{channel name}
//    case userModifyTopicGroupName // = 145
//
    ///  {from_user} 更新了小组头像
//    case userModifyTopicGroupAvatar // = 146
//
    ///  {from_user} 创建了本小组
//    case userStartTopicGroup // = 147
//
    /// {from_user} has turned on the "Use chat group as an email address"
//    case userTurnOnGroupMail // = 148
//
    /// {from_user} has turned off the "User chat group as an email address"
//    case userTurnOffGroupMail // = 149
//
    /// {from_user} has changed the group email permission to "Group owner only"
//    case userChangeGroupMailPermissionOwner // = 150
//
    /// {from_user} has changed the group email permission to "Group members only"
//    case userChangeGroupMailPermissionMembers // = 151
//
    /// {from_user} has changed the group email permission to "Members in {tenant} only"
//    case userChangeGroupMailPermissionTenant // = 152
//
    /// {from_user} has changed the group email permission to "Everyone"
//    case userChangeGroupMailPermissionEveryone // = 153
//
    ///通过群分享链接加入群组
//    case userJoinViaGroupLink // = 154
//
    /// 线上办公室 已结束
//    case chatRoomEnd // = 155
//
    /// {from_user}开启了线上办公室
//    case chatRoomStartV2 // = 156
//
    /// 临时卡片消息升级提示
//    case systemEphemeralNotify // = 157
//
    ///建立单向好友关系，可以开始聊天
//    case buildOnewayRelation // = 158
//
    ///邀请好友成功
//    case inviteFriendsSuccess // = 159
//
    ///创建单聊来源提醒
//    case createP2PSource // = 160
//
    ///没有授权发消息权限的提醒
//    case sendMessageCollaborationAuthFailed // = 161
//
    ///没有授权或没有回复 提醒发消息条数受限
//    case notCollaborationAuthSendMsgLimitNotify // = 162
//
    ///没有授权或没有回复 发消息过多
//    case notCollaborationAuthSendMsgReachLimit // = 163
//
    ///{Receiver} 已授权，开始协作吧！
//    case larkServerSystemcontentPermissionrequestapprovedtip // = 164
//
    ///{Receiver} 拒绝授权
//    case larkServerSystemcontentPermissionrequestrejectedtip // = 165
//
    ///被屏蔽发消息失败
//    case sendMessageBeBlocked // = 166
//
    /// {from_user} 将群主设置为 {new_owner}
//    case userModifyGroupOwner // = 167
//
    /// {user_name} 给大家分享了一个模板「{template_name}」{obj_link}
//    case templateGroupShare // = 168
//
    /// {from_user} 将 {to_chatters} 添加到了群聊
//    case userInviteBotJoin // = 169
//
    /// {from_user} 分享了文档模板 "{doc_name}"，可进入模板库查看
//    case docTemplateGroupShare // = 170
//
    /// {from_user} 分享了表格模板 "{doc_name}"，可进入模板库查看
//    case sheetTemplateGroupShare // = 171
//
    /// {from_user} 分享了思维笔记模板 "{doc_name}"，可进入模板库查看
//    case mindNoteTemplateGroupShare // = 172
//
    /// {users} 长时间未登录飞书，暂时无法使用密聊
//    case usersHaveNoDevicesToUseCryptoChat // = 173
//
    ///你已屏蔽该用户，无法再继续互发消息
//    case blockedTipInChat // = 174
//
    ///由于对方的隐私设置，成为联系人之前你们无法单聊
//    case cantChatUserPrivacySettings // = 175
//
    ///由于你的隐私设置，成为联系人之前你们无法单聊
//    case cantChatYourPrivacySettings // = 176
//
    ///为保证你的信息安全，请确认对方身份后再同意
//    case receivedContactRequestSecurityTip // = 177
//
    ///你们还不是联系人，在你回复之前对方只能给你发 {{Number}} 条消息
//    case notContactMessageLimitReceiver // = 178
//
    ///你已被拉黑，添加联系人失败
//    case larkNewContactsCantAddToContactsBlockedTip // = 179
//
    ///你已屏蔽对方，请先解除屏蔽再添加联系人
//    case larkNewContactsCantAddToContactsBlockedOthersTip // = 180
//
    ///联系人申请已发送，请等待对方同意
//    case larkNewContactsContactRequestSentPleaseWait // = 181
//
    /// 可以给自己发送消息、记事、文件等
//    case larkNewguideSendToMyself // = 183
//
    /// 当前群人数较多，为降低群成员噪音，建议你前往小组设置界面启用「仅群主可@ all」功能
//    case groupMentionAllPermissionSuggestion // = 182
//
    ///每天最多可与 {{N}} 个非联系人单聊，请明天再试
//    case chatWithNoContactsReachDailyLimit // = 184
//
    ///{from_user}创建了话题圈，并邀请群组 {from_chat} 的成员加入
//    case createCircleAndInviteOthersFromChat // = 185
//
    ///你提到的 {at_users} 目前不在此话题圈中，{invite_en_us}
//    case mentionedPersonNotInCircle // = 186
//
    /// {from_users} 邀请圈成员加入新创建的外部圈 {new_chat}
//    case inviteMembersToJoinExternalCircle // = 187
//
    ///由于管理员的权限设置，无法将 {no_permission_chatters} 拉入话题圈；如有疑问，请联系管理员
//    case circleCantAddMembersDueToAdminSettings // = 188
//
    ///由于管理员的权限设置，无法将 {no_permission_chatters} 等 {chatter_count} 人拉入话题圈；如有疑问，请联系管理员
//    case circleCantAddManyMembersDueToAdminSettings // = 189
//
    ///{oncall_users}通过服务台消息卡片进入此话题圈，新成员可查看所有历史消息
//    case joinCircleViaHelpDeskMsgCard // = 190
//
    ///欢迎 {to_chatters} 加入 {group_name}，新成员可查看所有历史消息
//    case circleWelcomeNewMembers // = 191
//
    ///{from_user} 将圈主转让给 {to_chatter}
//    case transferCircleOwner // = 192
//
    ///{from_user} 将圈主转让给 {to_chatter}，并退出此话题圈
//    case transferCircleOwnerAndLeave // = 193
//
    ///{from_user} 将本话题圈的 「{doc_name}」 文档权限由 可{original_permission_zh_cn} 变更为 可{permission_zh_cn} {doc_url}
//    case circleUserChangeDocPermission // = 194
//
    ///{from_user} 将 {to_chatters} 添加到了话题圈
//    case userInviteBotJoinCircle // = 195
//
    ///{from_user} 邀请 {to_chatters} 加入话题圈，新成员可查看所有历史消息
//    case userInviteOthersJoinCircle // = 196
//
    ///{to_chatters} 通过 {from_user} 分享的链接进入此话题圈，新成员可查看所有历史消息
//    case userInviteOthersJoinCircleByLink // = 197
//
    ///成员人数较多，已为你关闭消息通知，如有需要可在{chat_setting_zh_cn}中打开
//    case circleTooManyMembersNotificationMuted // = 198
//
    ///{to_chatters} 通过 {from_user} 分享的二维码进入此话题圈，新成员可查看所有历史消息
//    case userInviteOthersJoinCircleByQrCode // = 199
//
    ///{to_chatters} 通过 {from_user} 分享的名片进入此话题圈，新成员可查看所有历史消息
//    case userInviteOthersJoinCircleByInvitationCard // = 200
//
    ///{from_user} 更新了圈头像
//    case userModifyCircleAvatar // = 201
//
    ///{from_user} 更新了圈描述: {new_description}
//    case userModifyCircleDescription // = 202
//
    ///{from_user} 将圈名称\"{old_group_name}\"修改为\"{group_name}\"
//    case userModifyCircleName // = 203
//
    ///{admin_name} 将圈主设置为 {new_owner_name}
//    case userModifyCircleOwner // = 204
//
    ///{from_user} 更新了圈设置
//    case userModifyCircleSettings // = 205
//
    ///{admin}开启了 仅圈主可发言
//    case userSetOnlyCircleOwnerCanPost // = 206
//
    ///{admin}开启了 仅圈主可新建话题
//    case userSetOnlyCircleOwnerCanCreateNewTopics // = 207
//
    ///{from_user} 退出话题圈
//    case userLeaveCircle // = 208
//
    ///{from_user} 清除了圈描述
//    case userRemoveCircleDescription // = 209
//
    ///{from_user} 将 {to_chatters} 移出话题圈
//    case userRemoveCircleMembers // = 210
//
    ///{from_user} 创建了话题圈
//    case userCreateCircle // = 211
//
    ///{from_user} 创建了话题圈，并邀请 {to_chatters} 加入
//    case userCreateCircleAndInvite // = 212
//
    ///{from_user} 同步了{count} 条消息到本话题圈
//    case userSyncMessageToCircle // = 213
//
    ///{from_user} 清空了公告
//    case userClearCircleAnnouncement // = 214
//
    ///{from_user} 撤销了邀请，{to_chatters} 被移出话题圈
//    case userWithdrawCircleInvitation // = 215
//
    /// {admin_name}开启了匿名发帖和回帖功能
//    case circleAnonymousOn // = 216
//
    /// {admin_name}已关闭匿名功能，请实名发送
//    case circleAnonymousOff // = 217
//
    ///由于会话内成员使用不同的服务器部署方式，此会话暂不支持视频会议、红包等功能，请谅解
//    case createCrossWithKaChatNotification // = 218
//
    ///隐私设置开启成功
//    case larkPrivacySettingsEnableSuccessfullyToast // = 219
//
    ///飞书的登录凭证与联系方式不一致的说明文档
//    case cpViewDifferenceFeishuLink // = 220
//
    ///lark的登录凭证与联系方式不一致的说明文档
//    case cpViewDifferenceLarkLink // = 221
//
    ///转接备注：{transfer_comment}
//    case larkHelpDeskBotTransferredNote // = 222
//
    /// 该红包为专属红包，请升级最新版本查看详情
//    case needUpdateVersionToShowExclusiveHongbao // = 223
//
    /// 问题未解决？{link_text}
//    case saipanFaqUnresolvedContactAgent // = 224
//
    /// 225-256 建群入群新增 key
//    case larkImCreateGroupUserAndGroupOwnerInvite // = 225
//
    ///{Initiator} 发起群聊，并邀请 {User} 加入群聊
//    case larkImCreateGroupUserAndGroupMemberInvite // = 226
//
    ///{Initiator} 发起群聊，并邀请 {User}、{Department} 加入群聊
//    case larkImCreateGroupUserAndDepartmentOwnerInvite // = 227
//
    ///{Initiator} 发起群聊，并邀请 {User} 加入群聊
//    case larkImCreateGroupUserAndDepartmentMemberInivite // = 228
//
    ///{Initiator} 发起群聊，并邀请 {Group}、{Department} 加入群聊
//    case larkImCreateGroupGroupAndDepartmentOwnerInvite // = 229
//
    ///{Initiator} 发起群聊，并邀请 {User} 加入群聊
//    case larkImCreateGroupGroupAndDepartmentMemberInvite // = 230
//
    ///{Initiator} 发起群聊，并邀请 {User}、{Group}、{Department} 加入群聊
//    case larkImCreateGroupUserAndGroupAndDepartmentOwnerInvite // = 231
//
    ///{Initiator} 发起群聊，并邀请 {User} 加入群聊
//    case larkImCreateGroupUserAndGroupAndDepartmentMemberInvite // = 232
//
    ///{Inviter} 邀请 {User}、{Group} 加入群聊，新成员入群可查看所有历史消息 撤销邀请
//    case larkImEnterGroupUserAndGroupChatHistoryYesInviter // = 233
//
    ///{Inviter} 邀请 {User}、{Group} 加入群聊，新成员仅可查看入群后的消息 撤销邀请
//    case larkImEnterGroupUserAndGroupChatHistoryNoInviter // = 234
//
    ///{Inviter} 邀请 {User}、{Group} 加入群聊，新成员入群可查看所有历史消息
//    case larkImEnterGroupUserAndGroupChatHistoryYesInvitee // = 235
//
    ///{Inviter} 邀请 {User}、{Group} 加入群聊，新成员仅可查看入群后的消息
//    case larkImEnterGroupUserAndGroupChatHistoryNoInvitee // = 236
//
    ///{Inviter} 邀请 {User} 加入群聊，新成员入群可查看所有历史消息
//    case larkImEnterGroupUserAndGroupChatHistoryYesOtherMembers // = 237
//
    ///{Inviter} 邀请 {User} 加入群聊，新成员仅可查看入群后的消息
//    case larkImEnterGroupUserAndGroupChatHistoryNoOtherMembers // = 238
//
    ///{Inviter} 邀请 {User}、{Department} 加入群聊，新成员入群可查看所有历史消息 撤销邀请
//    case larkImEnterGroupUserAndDepartmentChatHistoryYesInviter // = 239
//
    ///{Inviter} 邀请 {User}、{Department} 加入群聊，新成员仅可查看入群后的消息 撤销邀请
//    case larkImEnterGroupUserAndDepartmentChatHistoryNoInviter // = 240
//
    ///{Inviter} 邀请 {User}、{Department} 加入群聊，新成员入群可查看所有历史消息
//    case larkImEnterGroupUserAndDepartmentChatHistoryYesInvitee // = 241
//
    ///{Inviter} 邀请 {User}、{Department} 加入群聊，新成员仅可查看入群后的消息
//    case larkImEnterGroupUserAndDepartmentChatHistoryNoInvitee // = 242
//
    ///{Inviter} 邀请 {User} 加入群聊，新成员入群可查看所有历史消息
//    case larkImEnterGroupUserAndDepartmentChatHistoryYesOtherMembers // = 243
//
    ///{Inviter} 邀请 {User} 加入群聊，新成员仅可查看入群后的消息
//    case larkImEnterGroupUserAndDepartmentChatHistoryNoOtherMembers // = 244
//
    ///{Inviter} 邀请 {Group}、{Department} 加入群聊，新成员入群可查看所有历史消息 撤销邀请
//    case larkImEnterGroupGroupAndDepartmentChatHistoryYesInviter // = 245
//
    ///{Inviter} 邀请 {Group}、{Department} 加入群聊，新成员仅可查看入群后的消息 撤销邀请
//    case larkImEnterGroupGroupAndDepartmentChatHistoryNoInviter // = 246
//
    ///{Inviter} 邀请 {Group}、{Department} 加入群聊，新成员入群可查看所有历史消息
//    case larkImEnterGroupGroupAndDepartmentChatHistoryYesInvitee // = 247
//
    ///{Inviter} 邀请 {Group}、{Department} 加入群聊，新成员仅可查看入群后的消息
//    case larkImEnterGroupGroupAndDepartmentChatHistoryNoInvitee // = 248
//
    ///{Inviter} 邀请 {User} 加入群聊，新成员入群可查看所有历史消息
//    case larkImEnterGroupGroupAndDepartmentChatHistoryYesOtherMembers // = 249
//
    ///{Inviter} 邀请 {User} 加入群聊，新成员仅可查看入群后的消息
//    case larkImEnterGroupGroupAndDepartmentChatHistoryNoOtherMembers // = 250
//
    ///{Inviter} 邀请 {User}、{Group}、{Department} 加入群聊，新成员入群可查看所有历史消息 撤销邀请
//    case larkImEnterGroupUserAndGroupAndDepartmentChatHistoryYesInviter // = 251
//
    ///{Inviter} 邀请 {User}、{Group}、{Department} 加入群聊，新成员仅可查看入群后的消息 撤销邀请
//    case larkImEnterGroupLarkImEnterGroupUserAndGroupAndDepartmentChatHistoryNoInviter // = 252
//
    ///{Inviter} 邀请 {User}、{Group}、{Department} 加入群聊，新成员入群可查看所有历史消息
//    case larkImEnterGroupUserAndGroupAndDepartmentChatHistoryYesInvitee // = 253
//
    ///{Inviter} 邀请 {User}、{Group}、{Department} 加入群聊，新成员仅可查看入群后的消息
//    case larkImEnterGroupUserAndGroupAndDepartmentChatHistoryNoInvitee // = 254
//
    ///{Inviter} 邀请 {User} 加入群聊，新成员入群可查看所有历史消息
//    case larkImEnterGroupUserAndGroupAndDepartmentChatHistoryYesOtherMembers // = 255
//
    ///{Inviter} 邀请 {User} 加入群聊，新成员仅可查看入群后的消息
//    case larkImEnterGroupUserAndGroupAndDepartmentChatHistoryNoOtherMembers // = 256
//
    /// {username} 通过团队“{TeamName}”加入此群，新成员可查看所有历史消息
//    case larkImEnterGroupUserChatHistoryYesFromTeam // = 257
//
    /// 300-400 IM Chat预留
//    case inviteChatMember2Chat // = 300
//
    /// 本群即将到达 {count} 人上限，到达上限后新成员将无法加入本群
//    case willReachChatChatterCountLimit // = 301
//
    /// 本群已到达 {count} 人上限，新成员将无法加入本群
//    case alreadyReachChatChatterCountLimit // = 302
//
    /// 你发起了群聊，身边朋友可通过数字{match_code}加入
//    case userCreateFaceToFaceChat // = 303
//
    /// 你通过数字{match_code}加入了群聊
//    case userJoinFaceToFaceChat // = 304
//
    /// 欢迎{chatter}加入群聊
//    case welcomeUserJoinFaceToFaceChat // = 305
//
    ///  {from_user} 发起群聊，并邀请 {to_chatters} {from_dept} {from_chat} 加入群聊
//    case userCreatedGroupAndInvitedOtherChatterChatDepartment // = 306
//
    /// {from_user} 邀请  {to_chatters} {from_chat} {from_dept} 加入群聊，新成员入群可查看所有历史消息
//    case userInviteOthersChatterChatDepartmentJoin // = 307
//
    /// {from_user} 发起群聊，并邀请 {from_chat} {from_dept} 的成员加入群聊
//    case createChatAndInviteFromChatDepartmentMember // = 308
//
    /// {GroupOwner} 开启了指定成员可发言
//    case userOpenOnlySepecifyMembersPost // = 309
//
    /// {GroupOwner} 开启了指定成员可新建话题
//    case userOpenOnlySepecifyMembersPostThread // = 310
//
    /// {GroupOwner} 将 {RemovedMessageSenders} 从可发言成员中移除了
//    case userRemoveSepecifyMembersPost // = 311
//
    /// {GroupOwner} 将 {RemovedTopicPosters} 从可新建话题成员中移除了
//    case userRemoveSepecifyMembersPostThread // = 312
//
    ///{{GroupOwner}}已将{{NewGroupAdministrators}}添加为群管理员
//    case addMemberToAdminList // = 313
//
    ///{{GroupOwner}}已将{{RemovedGroupAdministrators}}从群管理员中移除
//    case removeMemberFromAdminList // = 314
//
    ///你无法成为群管理员，请将{{APP_DISPLAY_NAME}}升级到最新版本后重试
//    case needUpdateVersionToSupportAdmin // = 315
//
    ///当前成员较多，为减少打扰，建议在“群管理”中设置“仅群主和群管理员可@所有人
//    case mentionAllPermissionSuggestionToAdmin // = 316
//
    ///{admin} 开启了 仅群主和群管理员可发言
//    case userOpenOnlyOwnerAndAdminPost // = 317
//
    ///{admin} 开启了 仅群主和群管理员可新建话题
//    case userOpenOnlyOwnerAndAdminPostThread // = 318
//
    ///{admin} 开启了 全部成员可发言
//    case adminOpenAnyonePost // = 319
//
    ///{admin} 开启了 全部成员可新建话题
//    case adminOpenAnyonePostThread // = 320
//
    /// 此服务台仅提供机器人问答，不提供人工服务
//    case saipanBotOnlyHelpdesk // = 321
//
    /// {from_user} has changed the group email permission to "Group owner or group administrator only"
//    case userChangeGroupMailPermissionOwnerOrAdmin // = 322
//
    /// {User} 开启了 新成员可查看历史消息
//    case groupNewMembersViewChatHistoryOn // = 323
//
    /// {User} 关闭了 新成员可查看历史消息
//    case groupNewMembersViewChatHistoryOff // = 324
//
    /// {from_user} 邀请 {to_chatters} 加入群聊，新成员不可查看历史消息 和7相对应
//    case groupNewMembersCanViewHistoryMessages // = 325
//
    /// 欢迎 {to_chatters} 加入 {group_name}，新成员仅可查看入群后的消息 ,和191相对应
//    case circleWelcomeNewMembersNoHistory // = 326
//
    /// {oncall_users}通过服务台消息卡片进入此话题群，新成员仅可查看入群后的消息 ,和190相对应  （废弃）
//    case joinCircleViaHelpDeskMsgCardNoHistory // = 327
//
    /// {from_user} 邀请 {to_chatters} 加入话题群，新成员仅可查看入群后的消息, 和196相对应 （废弃）
//    case userInviteOthersJoinCircleNoHistory // = 328
//
    /// {to_chatters} 通过 {from_user} 分享的名片进入此话题群，新成员仅可查看入群后的消息, 和200相对应 （废弃）
//    case userInviteOthersJoinCircleByInvitationCardNoHistory // = 329
//
    ///{to_chatters} 通过 {from_user} 分享的链接进入此话题群，新成员仅可查看入群后的消息, 和197对应 （废弃）
//    case userInviteOthersJoinCircleByLinkNoHistory // = 330
//
    /// {to_chatters} 通过 {from_user} 分享的二维码进入此话题群，新成员仅可查看入群后的消息，和199对应 （废弃）
//    case userInviteOthersJoinCircleByQrCodeNoHistory // = 331
//
    /// 以群/部门建群邀请进群
//    case userInviteOthersChatterChatDepartmentJoinNew // = 338
//
    /// {from_user} 邀请 {to_chatters} {from_chat} {from_dept} 加入群聊，新成员仅可查看入群后的消息，和307对应
//    case userInviteOthersChatterChatDepartmentJoinNoHistory // = 332
//
    /// 二维码进群
//    case userJoinViaQrNew // = 339
//
    /// {to_chatters} 通过 {from_user} 分享的二维码加入此群，新成员仅可查看入群后的消息, 和154对应
//    case userJoinViaQrCodeNoHistory // = 333
//
    /// 系统邀请入群
//    case userJoinChatWelcomeMessage // = 334
//
    /// 欢迎 {to_chatters} 加入此群，新成员仅可查看入群后的消息
//    case userJoinChatWelcomeMessageNoHistory // = 335
//
    /// 手动邀请入群
//    case userInviteOthersJoinChatMessage // = 336
//
    /// {from_user} 邀请 {to_chatters} 加入此群，新成员仅可查看入群后的消息
//    case userInviteOthersJoinChatMessageNoHistory // = 337
//
    /// 群名片（IM/文档）进群
    /// 和13类似
//    case userJoinViaShareNew // = 340
//
    /// {to_chatters} 通过 {from_user} 分享的名片加入此群，新成员仅可查看入群后的消息.
//    case userJoinViaShareNoHistory // = 341
//
    /// 群链接进群
//    case userJoinChatByLink // = 342
//
    /// {to_chatters} 通过 {from_user} 分享的链接加入此群，新成员仅可查看入群后的消息
//    case userJoinChatByLinkNoHistory // = 343
//
    /// 服务台卡片进群
//    case helpDeskUserJoinChat // = 344
//
    /// {oncall_users}通过服务台消息卡片加入此群，新成员仅可查看入群后的消息
//    case helpDeskUserJoinChatNoHistory // = 345
//
    /// 仅群主或管理员可加急
//    case createUrgentOnlyOwnerAndAdminOn // = 346
//
    /// {name} 已关闭 仅群主和群管理员可加急
//    case createUrgentOnlyOwnerAndAdminOff // = 347
//
    /// 超大群升级
//    case upgradeSuperChat // = 348
//
    /// chat tab相关系统消息
//    case addChatTab // = 349
//
    /// {{移除人}}移除了标签页{{标签页名称}}
//    case delChatTab // = 350
//
    ///{name} 已开启 仅群主和群管理员可更改 pin
//    case onlyAdminsCanPin // = 351
//
    ///{name} 已开启 所有群成员可 Pin
//    case allMembersCanPin // = 352
//
    ///{name} 已开启 仅群主和群管理员可发起视频会议
//    case onlyAdminsCanCreateVideoConference // = 353
//
    ///{name} 已开启 所有群成员可发起视频会议
//    case allMembersCanCreateVideoConference // = 354
//
    ///{name}已开启 仅群主和群管理员可编辑群信息
//    case onlyAdminsCanEditChatInfo // = 355
//
    ///{name}已开启 所有群成员可编辑群信息
//    case allMembersCanEditChatInfo // = 356
//
    ///{name}已开启 仅群主和群管理员可@所有人
//    case onlyAdminsCanAtAllMembers // = 357
//
    ///{name}已开启 所有群成员可@所有人
//    case allMembersCanAtAllMembers // = 358
//
    ///{name}已开启 仅群主和群管理员可添加群成员或分享群
//    case onlyAdminsCanAddMembersAndShare // = 359
//
    ///{name}已开启 所有群成员可添加群成员或分享群
//    case allMembersCanAddMembersAndShare // = 360
//
    /// 当前群成员数量已达上限 {{num}} 人，{{AppealNum}}
//    case chatMemberReachManageLimit // = 361
//
    /// {name}恢复了默认群名称
//    case userRecoverDefaultGroupName // = 362
//
    ///已为你自动开启输入翻译，你可使用熟悉的语言与对方沟通  关闭输入翻译
//    case autoOpenTypingTranslate // = 363
//
    ///(400, 500) 鉴权预留
//    case externalCoordinateCtl // = 401
//
    ///对方无对外沟通权限，你无法和对方沟通。
//    case targetExternalCoordinateCtl // = 402
//
    ///群主或群管理员已开启 允许群组被搜索到。团队内任何成员可以通过搜索加入此群。
//    case chatOpenCanSearchSystemMessage // = 403
//
    ///群主或群管理员已关闭 允许群组被搜索到。只有被邀请的人可以加入此群。
//    case chatClosedCanSearchSystemMessage // = 404
//
    /// {from_user} 分享了多维表格模板 "{doc_name}"，可进入模板库查看
//    case bitableTemplateGroupShareSystemMessage // = 405
//
    /// 管理者成员针对 {content} 发起密聊
//    case momentsStartSecretChatAboutMessage // = 406
//
    ///(500，550)team预留
//    case createTeamAndInviteMembers // = 501
//
    ///群主 {username} 已将本群升级为团队，你可以在“团队”分组中查看
//    case updateChatToTeam // = 502
//
    ///{username} 邀请 {JoinName} 加入团队
//    case inviteMembersJoinTeam // = 503
//
    ///{username} 加入团队失败，请前往团队设置手动添加
//    case membersJoinTeamFail // = 504
//
    ///{username} 将 {LeaveName} 移出团队
//    case kickMembersOutTeam // = 505
//
    ///{username} 退出团队
//    case memberLeaveTeam // = 506
//
    ///{username1} 将团队转让给 {username2}
//    case transferTeamOwner // = 507
//
    ///{username} 将团队名称修改 {NewName}
//    case modifyTeamName // = 508
//
    ///{username} 开启了团队成员新建群组的权限
//    case enableTeamCreateChatPermission // = 509
//
    ///{username} 关闭了团队成员新建群组的权限
//    case closeTeamCreateChatPermission // = 510
//
    ///{username} 开启了团队成员添加群组或成员的权限
//    case enableTeamAddMembersPermission // = 511
//
    ///{username} 关闭了团队成员添加群组或成员的权限
//    case closeTeamAddMembersPermission // = 512
//
    ///{username} 已解散了团队 {TeamName}，本群已与团队解除关联
//    case dissolveTeamAndUnbindChat // = 513
//
    ///{username} 创建了群组 -- 废弃
//    case createTeamChat // = 514
//
    ///{{username}} 已将本群添加至团队“{{TeamName}}”，可到团队分组中查看
//    case bindChatIntoTeam // = 515
//
    ///{username} 将本群与团队 {TeamName} 解除关联，本群将不再出现在团队中
//    case unbindChatWithTeam // = 516
//
    ///{username} 邀请 {JoinName} 加入群聊，新成员可查看所有历史消息
//    case membersJoinTeamChatSeeHistorical // = 517
//
    ///{username} 邀请 {JoinName} 加入群聊，新成员仅可查看入群后的消息
//    case membersJoinTeamChatSeeNewMessages // = 518
//
    ///{username} 入群失败，请前往团队设置手动添加
//    case membersJoinTeamChatFail // = 519
//
    ///{username1} 将团队所有者转让给 {username2}，并退出了团队
//    case membersLeaveAndTransfer // = 520
//
    ///{username} 创建了团队 {TeamName}，这是团队的默认沟通群
//    case userCreateTeam // = 521
//
    /// 查看用户手机号
//    case checkUserPhoneNumber // = 522
//
    /// "你已被设置为手机号查看白名单用户，可查看组织内任意员工电话，没有查看次数限制，查看时请注意对同事手机号保密。"
//    case checkUserPhoneUserInWhitelist // = 523
//
    /// 加急失败，对方手机号为空
//    case cantBuzzEmptyPhoneNumber // = 524
//
    /// 加急失败，对方姓名为空
//    case cantBuzzEmptyName // = 525
//
    /// 电话加急{Name}失败，已达加急上限
//    case buzzLimit // = 526
//
    /// 电话加急{Name}失败，系统错误
//    case buzzSystemError // = 527
//
    /// 电话加急{Name}失败，系统超时
//    case buzzTimeOut // = 528
//
    /// 以下成员短信加急失败：{NameList}
//    case cantBuzzMembers // = 529
//
    /// 电话加急{Name}失败，对方未接听
//    case buzzNotAnswer // = 530
//
    /// 531 被占用
//    case multiItemSystemContent // = 531
//
    /// {inviter} 发起了办公电话
//    case vcEnterprisePhoneCreate // = 532
//
    ///(532，600) team预留 勿占
//    case modifyTeamAvatar // = 533
//
    /// {username} 将团队描述修改为：{teamDescription}
//    case modifyTeamDescription // = 534
//
    /// {username} 删除了团队描述
//    case deleteTeamDescription // = 535
//
    /// {username} 开启了团队成员可添加成员的权限
//    case enableAddTeamMembersPermission // = 536
//
    /// {username} 关闭了团队成员可添加成员的权限
//    case closeAddTeamMembersPermission // = 537
//
    /// {username} 开启了团队成员可添加已有群组的权限
//    case enableBindTeamChatPermission // = 538
//
    /// {username} 关闭了团队成员可添加已有群组的权限
//    case closeBindTeamChatPermission // = 539
//
    ///{username} 创建了群组，并将群组添加至团队“{TeamName}”
//    case createTeamChatV2 // = 540
//
    ///{username} 创建了群组，并将群组添加至团队“{TeamName}” {OpenToTeam}
//    case createTeamChatV2Manager // = 541
//
    /// {username} 已将本群添加至团队“{TeamName}”，可到团队分组中查看 {OpenToTeam}
//    case bindChatIntoTeamManager // = 542
//
    /// {username} 通过团队“{TeamName}”加入此群，新成员可查看所有历史消息
//    case userJoinChatFromTeam // = 543
//
    ///{username} 将群组“{groupname}”设置为对本团队公开
//    case teamChatTurnOpenMessageToTeam // = 544
//
    /// {username} 将本群设置为对团队“{TeamName}”公开"
//    case teamChatTurnOpenMessage // = 545
//
    /// 群消息置顶
//    case chatTopNoticeTopMessage // = 601
//
    /// {username} 置顶了群公告
//    case chatTopNoticeTopAnnouncement // = 602
//
    /// {username} 置顶了一条话题
//    case chatTopNoticeTopThread // = 603
//
    /// {username} 移除了置顶内容
//    case chatTopNoticeRemove // = 604
//
    ///{username} 已设置 仅群主和群管理员可置顶消息和群公告
//    case onlyAdminsCanOperateTopNotice // = 605
//
    ///{username} 已设置 所有群成员可置顶消息和群公告
//    case allMembersCanOperateTopNotice // = 606
//
    ///{username} 已设置 仅群主和群管理员可置顶话题和群公告
//    case onlyAdminsCanOperateTopNoticeThread // = 607
//
    ///{username} 已设置 所有群成员可置顶话题和群公告
//    case allMembersCanOperateTopNoticeThread // = 608
//
    /// 短信或电话加急失败
//    case buzzMemberBuzzFailedLimit // = 609
//
    /// 短信加急{Name}失败，系统错误
//    case buzzMemberBuzzFailedSystemError // = 610
//
    /// 短信加急{Name}失败，系统超时
//    case buzzMemberBuzzFailedTimeOut // = 611
//
    /// 以下成员电话加急失败：{NameList}
//    case buzzBuzzFailPushFailList // = 612
//
    /// {Names} 未接听加急电话
//    case buzzNamesDidntPickUpBuzzCall // = 613
//
    /// {Names1} 未接听加急电话，{Names2} 电话加急失败
//    case buzzSomeDidntPickUpSomeCantCall // = 614
//
    ///密聊系统消息
//    case noticeUserDeviceUpdateLarkVersion // = 701
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .userModifyGroupName
//      case 2: self = .userModifyGroupAvatar
//      case 3: self = .userModifyGroupDescription
//      case 4: self = .userModifyGroupSettings
//      case 5: self = .userStartGroupAndInvite
//      case 6: self = .systemWelcomeUser
//      case 7: self = .userInviteOthersJoin
//      case 8: self = .userQuitGroup
//      case 9: self = .userRemoveOthers
//      case 10: self = .userRemoveGroupDescription
//      case 11: self = .userCheckOthersTelephone
//      case 12: self = .deriveFromP2PChat
//      case 13: self = .userJoinViaShare
//      case 14: self = .transferGroupChatOwner
//      case 15: self = .transferGroupChatOwnerAndQuit
//      case 16: self = .wipeAnnouncement
//      case 17: self = .addEmailMembers
//      case 18: self = .removeEmailMembers
//      case 19: self = .modifyEmailMembers
//      case 20: self = .userModifyEmailSubject
//      case 21: self = .userSyncMessage
//      case 22: self = .userModifyThreadTopic
//      case 23: self = .userInviteOthersJoinCryptoChat
//      case 24: self = .userStartCryptoGroupAndInvite
//      case 25: self = .userCallE2EeVoiceWhenCancelled
//      case 26: self = .userCallE2EeVoiceWhenMissed
//      case 27: self = .userCallE2EeVoiceDuration
//      case 28: self = .vcCallHostCancel
//      case 29: self = .vcCallPartiNoAnswer
//      case 30: self = .vcCallPartiCancel
//      case 31: self = .vcCallHostBusy
//      case 32: self = .vcCallPartiBusy
//      case 33: self = .vcCallFinishNotice
//      case 34: self = .vcCallDuration
//      case 35: self = .userStartMeetingGroupAndInvite
//      case 36: self = .userInviteOthersJoinMeeting
//      case 37: self = .userQuitMeetingChat
//      case 38: self = .userDismissedMeetingChat
//      case 39: self = .userStartGroup
//      case 40: self = .userRemoveOthersFromMeeting
//      case 41: self = .userAddMeetingChat
//      case 42: self = .joinDepartmentGroup
//      case 43: self = .buildFriendship
//      case 44: self = .nonFriendsNotice
//      case 45: self = .declineInvitation
//      case 46: self = .declineSpecInvitation
//      case 47: self = .userJoinViaQrCode
//      case 48: self = .vcCallConnectFail
//      case 49: self = .vcCallDisconnect
//      case 50: self = .vcCallHostLowVersion
//      case 51: self = .vcCallPartiLowVersion
//      case 52: self = .userCallE2EeVoiceWhenRefused
//      case 53: self = .userCallE2EeVoiceWhenOccupy
//      case 54: self = .grabOtherHongbao
//      case 55: self = .otherGrabMyHongbao
//      case 56: self = .lastHongbaoIsGrabbed
//      case 57: self = .sendHongbaoMessageFailed
//      case 58: self = .userSyncMessageV2
//      case 59: self = .userShareDocPermission
//      case 60: self = .userChangeDocPermission
//      case 61: self = .userShareDocFolder
//      case 62: self = .userOpenOnlyAdminPost
//      case 63: self = .userSepecifyMembersPost
//      case 64: self = .userLowVersionHint
//      case 65: self = .userThreadClearTitle
//      case 66: self = .userOpenAnyonePost
//      case 67: self = .cryptoMessageNoticeNoTransmit
//      case 68: self = .cryptoMessageNoticeSevenDays
//      case 69: self = .cryptoMessageNoticeBurnAfterReading
//      case 70: self = .userSetCryptoMessageBurnLife
//      case 71: self = .userTookScreenshotInCryptoChat
//      case 72: self = .cryptoLowVersionHint
//      case 73: self = .inviteChatMember2OutChat
//      case 74: self = .createChatAndInviteFromChatMember
//      case 75: self = .autoTranslateGuidance
//      case 76: self = .withdrawAddedUser
//      case 77: self = .saipanRemindOncallReply
//      case 78: self = .saipanRemindOncallDone
//      case 79: self = .saipanRemindOncallAutoDone
//      case 80: self = .saipanAddOncall
//      case 81: self = .userStartCryptoGroup
//      case 82: self = .userInviteOthersJoinOncall
//      case 83: self = .vcMeetingStarted
//      case 84: self = .userOpenOnlyAdminPostThread
//      case 85: self = .userSpecifyMembersPostThread
//      case 86: self = .userOpenAnyonePostThread
//      case 87: self = .vcMeetingEndedOverOneHour
//      case 88: self = .inviteAtChatters
//      case 89: self = .vcMeetingEndedLessOneHour
//      case 90: self = .vcMeetingEndedLessOneMin
//      case 91: self = .vcDefaultMeetingEndedOverOneHour
//      case 92: self = .vcDefaultMeetingEndedLessOneHour
//      case 93: self = .vcDefaultMeetingEndedLessOneMin
//      case 94: self = .vcVideoChatStarted
//      case 95: self = .vcCallEndedOverOneHour
//      case 96: self = .vcCallEndedLessOneHour
//      case 97: self = .vcCallEndedLessOneMin
//      case 98: self = .vcCallDisconnectedEndedOverOneHour
//      case 99: self = .vcCallDisconnectedEndedLessOneHour
//      case 100: self = .vcCallDisconnectedEndedLessOneMin
//      case 101: self = .vcCallIntervieweeNoAnswer
//      case 102: self = .vcCallIntervieweeRefuse
//      case 103: self = .vcCallInterviewerCancel
//      case 104: self = .vcCallIntervieweeBusy
//      case 105: self = .voipEndedOverOneHour
//      case 106: self = .voipEndedLessOneHour
//      case 107: self = .voipEndedLessOneMin
//      case 108: self = .voipDisconnectedEndedOverOneHour
//      case 109: self = .voipDisconnectedEndedLessOneHour
//      case 110: self = .voipDisconnectedEndedLessOneMin
//      case 111: self = .voipIntervieweeNoAnswer
//      case 112: self = .voipIntervieweeRefuse
//      case 113: self = .voipInterviewerCancel
//      case 114: self = .voipIntervieweeBusy
//      case 115: self = .saipanSelectCardContent
//      case 116: self = .saipanUserQueueing
//      case 117: self = .saipanNotifyAgentQueueing
//      case 118: self = .saipanAgentEnterChat
//      case 119: self = .saipanReserved4
//      case 120: self = .saipanReserved5
//      case 121: self = .cancelEmergencyCall
//      case 122: self = .hangupEmergencyCall
//      case 123: self = .startEmergencyCall
//      case 124: self = .meetingTransferToChat
//      case 125: self = .meetingTransferToChatWithDocURL
//      case 126: self = .externalDataMigrationLarkMessageNotify1
//      case 127: self = .externalDataMigrationLarkMessageNotify2
//      case 128: self = .externalDataMigrationLarkMessageNotify3
//      case 129: self = .externalDataMigrationLarkMessageNotify4
//      case 130: self = .externalDataMigrationLarkMessageNotify5
//      case 131: self = .vcCallIntervieweeNotOnline
//      case 132: self = .voipIntervieweeNotOnline
//      case 133: self = .folderRoleAddForInvitee
//      case 134: self = .folderObjMoveOut
//      case 135: self = .folderObjRemove
//      case 136: self = .fileOwnerRemoveFolderPermission
//      case 137: self = .messagePaymentFraudAlert
//      case 138: self = .userJoinChatAutoMute
//      case 139: self = .emergencyCallNotanswer
//      case 140: self = .inviteChattersToChatNoPermissionLessThreshold
//      case 141: self = .inviteChattersToChatNoPermissionOverThreshold
//      case 142: self = .usersUnableToUseCryptoChat
//      case 143: self = .chatRoomStart
//      case 144: self = .userStartTopicGroupAndInvite
//      case 145: self = .userModifyTopicGroupName
//      case 146: self = .userModifyTopicGroupAvatar
//      case 147: self = .userStartTopicGroup
//      case 148: self = .userTurnOnGroupMail
//      case 149: self = .userTurnOffGroupMail
//      case 150: self = .userChangeGroupMailPermissionOwner
//      case 151: self = .userChangeGroupMailPermissionMembers
//      case 152: self = .userChangeGroupMailPermissionTenant
//      case 153: self = .userChangeGroupMailPermissionEveryone
//      case 154: self = .userJoinViaGroupLink
//      case 155: self = .chatRoomEnd
//      case 156: self = .chatRoomStartV2
//      case 157: self = .systemEphemeralNotify
//      case 158: self = .buildOnewayRelation
//      case 159: self = .inviteFriendsSuccess
//      case 160: self = .createP2PSource
//      case 161: self = .sendMessageCollaborationAuthFailed
//      case 162: self = .notCollaborationAuthSendMsgLimitNotify
//      case 163: self = .notCollaborationAuthSendMsgReachLimit
//      case 164: self = .larkServerSystemcontentPermissionrequestapprovedtip
//      case 165: self = .larkServerSystemcontentPermissionrequestrejectedtip
//      case 166: self = .sendMessageBeBlocked
//      case 167: self = .userModifyGroupOwner
//      case 168: self = .templateGroupShare
//      case 169: self = .userInviteBotJoin
//      case 170: self = .docTemplateGroupShare
//      case 171: self = .sheetTemplateGroupShare
//      case 172: self = .mindNoteTemplateGroupShare
//      case 173: self = .usersHaveNoDevicesToUseCryptoChat
//      case 174: self = .blockedTipInChat
//      case 175: self = .cantChatUserPrivacySettings
//      case 176: self = .cantChatYourPrivacySettings
//      case 177: self = .receivedContactRequestSecurityTip
//      case 178: self = .notContactMessageLimitReceiver
//      case 179: self = .larkNewContactsCantAddToContactsBlockedTip
//      case 180: self = .larkNewContactsCantAddToContactsBlockedOthersTip
//      case 181: self = .larkNewContactsContactRequestSentPleaseWait
//      case 182: self = .groupMentionAllPermissionSuggestion
//      case 183: self = .larkNewguideSendToMyself
//      case 184: self = .chatWithNoContactsReachDailyLimit
//      case 185: self = .createCircleAndInviteOthersFromChat
//      case 186: self = .mentionedPersonNotInCircle
//      case 187: self = .inviteMembersToJoinExternalCircle
//      case 188: self = .circleCantAddMembersDueToAdminSettings
//      case 189: self = .circleCantAddManyMembersDueToAdminSettings
//      case 190: self = .joinCircleViaHelpDeskMsgCard
//      case 191: self = .circleWelcomeNewMembers
//      case 192: self = .transferCircleOwner
//      case 193: self = .transferCircleOwnerAndLeave
//      case 194: self = .circleUserChangeDocPermission
//      case 195: self = .userInviteBotJoinCircle
//      case 196: self = .userInviteOthersJoinCircle
//      case 197: self = .userInviteOthersJoinCircleByLink
//      case 198: self = .circleTooManyMembersNotificationMuted
//      case 199: self = .userInviteOthersJoinCircleByQrCode
//      case 200: self = .userInviteOthersJoinCircleByInvitationCard
//      case 201: self = .userModifyCircleAvatar
//      case 202: self = .userModifyCircleDescription
//      case 203: self = .userModifyCircleName
//      case 204: self = .userModifyCircleOwner
//      case 205: self = .userModifyCircleSettings
//      case 206: self = .userSetOnlyCircleOwnerCanPost
//      case 207: self = .userSetOnlyCircleOwnerCanCreateNewTopics
//      case 208: self = .userLeaveCircle
//      case 209: self = .userRemoveCircleDescription
//      case 210: self = .userRemoveCircleMembers
//      case 211: self = .userCreateCircle
//      case 212: self = .userCreateCircleAndInvite
//      case 213: self = .userSyncMessageToCircle
//      case 214: self = .userClearCircleAnnouncement
//      case 215: self = .userWithdrawCircleInvitation
//      case 216: self = .circleAnonymousOn
//      case 217: self = .circleAnonymousOff
//      case 218: self = .createCrossWithKaChatNotification
//      case 219: self = .larkPrivacySettingsEnableSuccessfullyToast
//      case 220: self = .cpViewDifferenceFeishuLink
//      case 221: self = .cpViewDifferenceLarkLink
//      case 222: self = .larkHelpDeskBotTransferredNote
//      case 223: self = .needUpdateVersionToShowExclusiveHongbao
//      case 224: self = .saipanFaqUnresolvedContactAgent
//      case 225: self = .larkImCreateGroupUserAndGroupOwnerInvite
//      case 226: self = .larkImCreateGroupUserAndGroupMemberInvite
//      case 227: self = .larkImCreateGroupUserAndDepartmentOwnerInvite
//      case 228: self = .larkImCreateGroupUserAndDepartmentMemberInivite
//      case 229: self = .larkImCreateGroupGroupAndDepartmentOwnerInvite
//      case 230: self = .larkImCreateGroupGroupAndDepartmentMemberInvite
//      case 231: self = .larkImCreateGroupUserAndGroupAndDepartmentOwnerInvite
//      case 232: self = .larkImCreateGroupUserAndGroupAndDepartmentMemberInvite
//      case 233: self = .larkImEnterGroupUserAndGroupChatHistoryYesInviter
//      case 234: self = .larkImEnterGroupUserAndGroupChatHistoryNoInviter
//      case 235: self = .larkImEnterGroupUserAndGroupChatHistoryYesInvitee
//      case 236: self = .larkImEnterGroupUserAndGroupChatHistoryNoInvitee
//      case 237: self = .larkImEnterGroupUserAndGroupChatHistoryYesOtherMembers
//      case 238: self = .larkImEnterGroupUserAndGroupChatHistoryNoOtherMembers
//      case 239: self = .larkImEnterGroupUserAndDepartmentChatHistoryYesInviter
//      case 240: self = .larkImEnterGroupUserAndDepartmentChatHistoryNoInviter
//      case 241: self = .larkImEnterGroupUserAndDepartmentChatHistoryYesInvitee
//      case 242: self = .larkImEnterGroupUserAndDepartmentChatHistoryNoInvitee
//      case 243: self = .larkImEnterGroupUserAndDepartmentChatHistoryYesOtherMembers
//      case 244: self = .larkImEnterGroupUserAndDepartmentChatHistoryNoOtherMembers
//      case 245: self = .larkImEnterGroupGroupAndDepartmentChatHistoryYesInviter
//      case 246: self = .larkImEnterGroupGroupAndDepartmentChatHistoryNoInviter
//      case 247: self = .larkImEnterGroupGroupAndDepartmentChatHistoryYesInvitee
//      case 248: self = .larkImEnterGroupGroupAndDepartmentChatHistoryNoInvitee
//      case 249: self = .larkImEnterGroupGroupAndDepartmentChatHistoryYesOtherMembers
//      case 250: self = .larkImEnterGroupGroupAndDepartmentChatHistoryNoOtherMembers
//      case 251: self = .larkImEnterGroupUserAndGroupAndDepartmentChatHistoryYesInviter
//      case 252: self = .larkImEnterGroupLarkImEnterGroupUserAndGroupAndDepartmentChatHistoryNoInviter
//      case 253: self = .larkImEnterGroupUserAndGroupAndDepartmentChatHistoryYesInvitee
//      case 254: self = .larkImEnterGroupUserAndGroupAndDepartmentChatHistoryNoInvitee
//      case 255: self = .larkImEnterGroupUserAndGroupAndDepartmentChatHistoryYesOtherMembers
//      case 256: self = .larkImEnterGroupUserAndGroupAndDepartmentChatHistoryNoOtherMembers
//      case 257: self = .larkImEnterGroupUserChatHistoryYesFromTeam
//      case 300: self = .inviteChatMember2Chat
//      case 301: self = .willReachChatChatterCountLimit
//      case 302: self = .alreadyReachChatChatterCountLimit
//      case 303: self = .userCreateFaceToFaceChat
//      case 304: self = .userJoinFaceToFaceChat
//      case 305: self = .welcomeUserJoinFaceToFaceChat
//      case 306: self = .userCreatedGroupAndInvitedOtherChatterChatDepartment
//      case 307: self = .userInviteOthersChatterChatDepartmentJoin
//      case 308: self = .createChatAndInviteFromChatDepartmentMember
//      case 309: self = .userOpenOnlySepecifyMembersPost
//      case 310: self = .userOpenOnlySepecifyMembersPostThread
//      case 311: self = .userRemoveSepecifyMembersPost
//      case 312: self = .userRemoveSepecifyMembersPostThread
//      case 313: self = .addMemberToAdminList
//      case 314: self = .removeMemberFromAdminList
//      case 315: self = .needUpdateVersionToSupportAdmin
//      case 316: self = .mentionAllPermissionSuggestionToAdmin
//      case 317: self = .userOpenOnlyOwnerAndAdminPost
//      case 318: self = .userOpenOnlyOwnerAndAdminPostThread
//      case 319: self = .adminOpenAnyonePost
//      case 320: self = .adminOpenAnyonePostThread
//      case 321: self = .saipanBotOnlyHelpdesk
//      case 322: self = .userChangeGroupMailPermissionOwnerOrAdmin
//      case 323: self = .groupNewMembersViewChatHistoryOn
//      case 324: self = .groupNewMembersViewChatHistoryOff
//      case 325: self = .groupNewMembersCanViewHistoryMessages
//      case 326: self = .circleWelcomeNewMembersNoHistory
//      case 327: self = .joinCircleViaHelpDeskMsgCardNoHistory
//      case 328: self = .userInviteOthersJoinCircleNoHistory
//      case 329: self = .userInviteOthersJoinCircleByInvitationCardNoHistory
//      case 330: self = .userInviteOthersJoinCircleByLinkNoHistory
//      case 331: self = .userInviteOthersJoinCircleByQrCodeNoHistory
//      case 332: self = .userInviteOthersChatterChatDepartmentJoinNoHistory
//      case 333: self = .userJoinViaQrCodeNoHistory
//      case 334: self = .userJoinChatWelcomeMessage
//      case 335: self = .userJoinChatWelcomeMessageNoHistory
//      case 336: self = .userInviteOthersJoinChatMessage
//      case 337: self = .userInviteOthersJoinChatMessageNoHistory
//      case 338: self = .userInviteOthersChatterChatDepartmentJoinNew
//      case 339: self = .userJoinViaQrNew
//      case 340: self = .userJoinViaShareNew
//      case 341: self = .userJoinViaShareNoHistory
//      case 342: self = .userJoinChatByLink
//      case 343: self = .userJoinChatByLinkNoHistory
//      case 344: self = .helpDeskUserJoinChat
//      case 345: self = .helpDeskUserJoinChatNoHistory
//      case 346: self = .createUrgentOnlyOwnerAndAdminOn
//      case 347: self = .createUrgentOnlyOwnerAndAdminOff
//      case 348: self = .upgradeSuperChat
//      case 349: self = .addChatTab
//      case 350: self = .delChatTab
//      case 351: self = .onlyAdminsCanPin
//      case 352: self = .allMembersCanPin
//      case 353: self = .onlyAdminsCanCreateVideoConference
//      case 354: self = .allMembersCanCreateVideoConference
//      case 355: self = .onlyAdminsCanEditChatInfo
//      case 356: self = .allMembersCanEditChatInfo
//      case 357: self = .onlyAdminsCanAtAllMembers
//      case 358: self = .allMembersCanAtAllMembers
//      case 359: self = .onlyAdminsCanAddMembersAndShare
//      case 360: self = .allMembersCanAddMembersAndShare
//      case 361: self = .chatMemberReachManageLimit
//      case 362: self = .userRecoverDefaultGroupName
//      case 363: self = .autoOpenTypingTranslate
//      case 401: self = .externalCoordinateCtl
//      case 402: self = .targetExternalCoordinateCtl
//      case 403: self = .chatOpenCanSearchSystemMessage
//      case 404: self = .chatClosedCanSearchSystemMessage
//      case 405: self = .bitableTemplateGroupShareSystemMessage
//      case 406: self = .momentsStartSecretChatAboutMessage
//      case 501: self = .createTeamAndInviteMembers
//      case 502: self = .updateChatToTeam
//      case 503: self = .inviteMembersJoinTeam
//      case 504: self = .membersJoinTeamFail
//      case 505: self = .kickMembersOutTeam
//      case 506: self = .memberLeaveTeam
//      case 507: self = .transferTeamOwner
//      case 508: self = .modifyTeamName
//      case 509: self = .enableTeamCreateChatPermission
//      case 510: self = .closeTeamCreateChatPermission
//      case 511: self = .enableTeamAddMembersPermission
//      case 512: self = .closeTeamAddMembersPermission
//      case 513: self = .dissolveTeamAndUnbindChat
//      case 514: self = .createTeamChat
//      case 515: self = .bindChatIntoTeam
//      case 516: self = .unbindChatWithTeam
//      case 517: self = .membersJoinTeamChatSeeHistorical
//      case 518: self = .membersJoinTeamChatSeeNewMessages
//      case 519: self = .membersJoinTeamChatFail
//      case 520: self = .membersLeaveAndTransfer
//      case 521: self = .userCreateTeam
//      case 522: self = .checkUserPhoneNumber
//      case 523: self = .checkUserPhoneUserInWhitelist
//      case 524: self = .cantBuzzEmptyPhoneNumber
//      case 525: self = .cantBuzzEmptyName
//      case 526: self = .buzzLimit
//      case 527: self = .buzzSystemError
//      case 528: self = .buzzTimeOut
//      case 529: self = .cantBuzzMembers
//      case 530: self = .buzzNotAnswer
//      case 531: self = .multiItemSystemContent
//      case 532: self = .vcEnterprisePhoneCreate
//      case 533: self = .modifyTeamAvatar
//      case 534: self = .modifyTeamDescription
//      case 535: self = .deleteTeamDescription
//      case 536: self = .enableAddTeamMembersPermission
//      case 537: self = .closeAddTeamMembersPermission
//      case 538: self = .enableBindTeamChatPermission
//      case 539: self = .closeBindTeamChatPermission
//      case 540: self = .createTeamChatV2
//      case 541: self = .createTeamChatV2Manager
//      case 542: self = .bindChatIntoTeamManager
//      case 543: self = .userJoinChatFromTeam
//      case 544: self = .teamChatTurnOpenMessageToTeam
//      case 545: self = .teamChatTurnOpenMessage
//      case 601: self = .chatTopNoticeTopMessage
//      case 602: self = .chatTopNoticeTopAnnouncement
//      case 603: self = .chatTopNoticeTopThread
//      case 604: self = .chatTopNoticeRemove
//      case 605: self = .onlyAdminsCanOperateTopNotice
//      case 606: self = .allMembersCanOperateTopNotice
//      case 607: self = .onlyAdminsCanOperateTopNoticeThread
//      case 608: self = .allMembersCanOperateTopNoticeThread
//      case 609: self = .buzzMemberBuzzFailedLimit
//      case 610: self = .buzzMemberBuzzFailedSystemError
//      case 611: self = .buzzMemberBuzzFailedTimeOut
//      case 612: self = .buzzBuzzFailPushFailList
//      case 613: self = .buzzNamesDidntPickUpBuzzCall
//      case 614: self = .buzzSomeDidntPickUpSomeCantCall
//      case 701: self = .noticeUserDeviceUpdateLarkVersion
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .userModifyGroupName: return 1
//      case .userModifyGroupAvatar: return 2
//      case .userModifyGroupDescription: return 3
//      case .userModifyGroupSettings: return 4
//      case .userStartGroupAndInvite: return 5
//      case .systemWelcomeUser: return 6
//      case .userInviteOthersJoin: return 7
//      case .userQuitGroup: return 8
//      case .userRemoveOthers: return 9
//      case .userRemoveGroupDescription: return 10
//      case .userCheckOthersTelephone: return 11
//      case .deriveFromP2PChat: return 12
//      case .userJoinViaShare: return 13
//      case .transferGroupChatOwner: return 14
//      case .transferGroupChatOwnerAndQuit: return 15
//      case .wipeAnnouncement: return 16
//      case .addEmailMembers: return 17
//      case .removeEmailMembers: return 18
//      case .modifyEmailMembers: return 19
//      case .userModifyEmailSubject: return 20
//      case .userSyncMessage: return 21
//      case .userModifyThreadTopic: return 22
//      case .userInviteOthersJoinCryptoChat: return 23
//      case .userStartCryptoGroupAndInvite: return 24
//      case .userCallE2EeVoiceWhenCancelled: return 25
//      case .userCallE2EeVoiceWhenMissed: return 26
//      case .userCallE2EeVoiceDuration: return 27
//      case .vcCallHostCancel: return 28
//      case .vcCallPartiNoAnswer: return 29
//      case .vcCallPartiCancel: return 30
//      case .vcCallHostBusy: return 31
//      case .vcCallPartiBusy: return 32
//      case .vcCallFinishNotice: return 33
//      case .vcCallDuration: return 34
//      case .userStartMeetingGroupAndInvite: return 35
//      case .userInviteOthersJoinMeeting: return 36
//      case .userQuitMeetingChat: return 37
//      case .userDismissedMeetingChat: return 38
//      case .userStartGroup: return 39
//      case .userRemoveOthersFromMeeting: return 40
//      case .userAddMeetingChat: return 41
//      case .joinDepartmentGroup: return 42
//      case .buildFriendship: return 43
//      case .nonFriendsNotice: return 44
//      case .declineInvitation: return 45
//      case .declineSpecInvitation: return 46
//      case .userJoinViaQrCode: return 47
//      case .vcCallConnectFail: return 48
//      case .vcCallDisconnect: return 49
//      case .vcCallHostLowVersion: return 50
//      case .vcCallPartiLowVersion: return 51
//      case .userCallE2EeVoiceWhenRefused: return 52
//      case .userCallE2EeVoiceWhenOccupy: return 53
//      case .grabOtherHongbao: return 54
//      case .otherGrabMyHongbao: return 55
//      case .lastHongbaoIsGrabbed: return 56
//      case .sendHongbaoMessageFailed: return 57
//      case .userSyncMessageV2: return 58
//      case .userShareDocPermission: return 59
//      case .userChangeDocPermission: return 60
//      case .userShareDocFolder: return 61
//      case .userOpenOnlyAdminPost: return 62
//      case .userSepecifyMembersPost: return 63
//      case .userLowVersionHint: return 64
//      case .userThreadClearTitle: return 65
//      case .userOpenAnyonePost: return 66
//      case .cryptoMessageNoticeNoTransmit: return 67
//      case .cryptoMessageNoticeSevenDays: return 68
//      case .cryptoMessageNoticeBurnAfterReading: return 69
//      case .userSetCryptoMessageBurnLife: return 70
//      case .userTookScreenshotInCryptoChat: return 71
//      case .cryptoLowVersionHint: return 72
//      case .inviteChatMember2OutChat: return 73
//      case .createChatAndInviteFromChatMember: return 74
//      case .autoTranslateGuidance: return 75
//      case .withdrawAddedUser: return 76
//      case .saipanRemindOncallReply: return 77
//      case .saipanRemindOncallDone: return 78
//      case .saipanRemindOncallAutoDone: return 79
//      case .saipanAddOncall: return 80
//      case .userStartCryptoGroup: return 81
//      case .userInviteOthersJoinOncall: return 82
//      case .vcMeetingStarted: return 83
//      case .userOpenOnlyAdminPostThread: return 84
//      case .userSpecifyMembersPostThread: return 85
//      case .userOpenAnyonePostThread: return 86
//      case .vcMeetingEndedOverOneHour: return 87
//      case .inviteAtChatters: return 88
//      case .vcMeetingEndedLessOneHour: return 89
//      case .vcMeetingEndedLessOneMin: return 90
//      case .vcDefaultMeetingEndedOverOneHour: return 91
//      case .vcDefaultMeetingEndedLessOneHour: return 92
//      case .vcDefaultMeetingEndedLessOneMin: return 93
//      case .vcVideoChatStarted: return 94
//      case .vcCallEndedOverOneHour: return 95
//      case .vcCallEndedLessOneHour: return 96
//      case .vcCallEndedLessOneMin: return 97
//      case .vcCallDisconnectedEndedOverOneHour: return 98
//      case .vcCallDisconnectedEndedLessOneHour: return 99
//      case .vcCallDisconnectedEndedLessOneMin: return 100
//      case .vcCallIntervieweeNoAnswer: return 101
//      case .vcCallIntervieweeRefuse: return 102
//      case .vcCallInterviewerCancel: return 103
//      case .vcCallIntervieweeBusy: return 104
//      case .voipEndedOverOneHour: return 105
//      case .voipEndedLessOneHour: return 106
//      case .voipEndedLessOneMin: return 107
//      case .voipDisconnectedEndedOverOneHour: return 108
//      case .voipDisconnectedEndedLessOneHour: return 109
//      case .voipDisconnectedEndedLessOneMin: return 110
//      case .voipIntervieweeNoAnswer: return 111
//      case .voipIntervieweeRefuse: return 112
//      case .voipInterviewerCancel: return 113
//      case .voipIntervieweeBusy: return 114
//      case .saipanSelectCardContent: return 115
//      case .saipanUserQueueing: return 116
//      case .saipanNotifyAgentQueueing: return 117
//      case .saipanAgentEnterChat: return 118
//      case .saipanReserved4: return 119
//      case .saipanReserved5: return 120
//      case .cancelEmergencyCall: return 121
//      case .hangupEmergencyCall: return 122
//      case .startEmergencyCall: return 123
//      case .meetingTransferToChat: return 124
//      case .meetingTransferToChatWithDocURL: return 125
//      case .externalDataMigrationLarkMessageNotify1: return 126
//      case .externalDataMigrationLarkMessageNotify2: return 127
//      case .externalDataMigrationLarkMessageNotify3: return 128
//      case .externalDataMigrationLarkMessageNotify4: return 129
//      case .externalDataMigrationLarkMessageNotify5: return 130
//      case .vcCallIntervieweeNotOnline: return 131
//      case .voipIntervieweeNotOnline: return 132
//      case .folderRoleAddForInvitee: return 133
//      case .folderObjMoveOut: return 134
//      case .folderObjRemove: return 135
//      case .fileOwnerRemoveFolderPermission: return 136
//      case .messagePaymentFraudAlert: return 137
//      case .userJoinChatAutoMute: return 138
//      case .emergencyCallNotanswer: return 139
//      case .inviteChattersToChatNoPermissionLessThreshold: return 140
//      case .inviteChattersToChatNoPermissionOverThreshold: return 141
//      case .usersUnableToUseCryptoChat: return 142
//      case .chatRoomStart: return 143
//      case .userStartTopicGroupAndInvite: return 144
//      case .userModifyTopicGroupName: return 145
//      case .userModifyTopicGroupAvatar: return 146
//      case .userStartTopicGroup: return 147
//      case .userTurnOnGroupMail: return 148
//      case .userTurnOffGroupMail: return 149
//      case .userChangeGroupMailPermissionOwner: return 150
//      case .userChangeGroupMailPermissionMembers: return 151
//      case .userChangeGroupMailPermissionTenant: return 152
//      case .userChangeGroupMailPermissionEveryone: return 153
//      case .userJoinViaGroupLink: return 154
//      case .chatRoomEnd: return 155
//      case .chatRoomStartV2: return 156
//      case .systemEphemeralNotify: return 157
//      case .buildOnewayRelation: return 158
//      case .inviteFriendsSuccess: return 159
//      case .createP2PSource: return 160
//      case .sendMessageCollaborationAuthFailed: return 161
//      case .notCollaborationAuthSendMsgLimitNotify: return 162
//      case .notCollaborationAuthSendMsgReachLimit: return 163
//      case .larkServerSystemcontentPermissionrequestapprovedtip: return 164
//      case .larkServerSystemcontentPermissionrequestrejectedtip: return 165
//      case .sendMessageBeBlocked: return 166
//      case .userModifyGroupOwner: return 167
//      case .templateGroupShare: return 168
//      case .userInviteBotJoin: return 169
//      case .docTemplateGroupShare: return 170
//      case .sheetTemplateGroupShare: return 171
//      case .mindNoteTemplateGroupShare: return 172
//      case .usersHaveNoDevicesToUseCryptoChat: return 173
//      case .blockedTipInChat: return 174
//      case .cantChatUserPrivacySettings: return 175
//      case .cantChatYourPrivacySettings: return 176
//      case .receivedContactRequestSecurityTip: return 177
//      case .notContactMessageLimitReceiver: return 178
//      case .larkNewContactsCantAddToContactsBlockedTip: return 179
//      case .larkNewContactsCantAddToContactsBlockedOthersTip: return 180
//      case .larkNewContactsContactRequestSentPleaseWait: return 181
//      case .groupMentionAllPermissionSuggestion: return 182
//      case .larkNewguideSendToMyself: return 183
//      case .chatWithNoContactsReachDailyLimit: return 184
//      case .createCircleAndInviteOthersFromChat: return 185
//      case .mentionedPersonNotInCircle: return 186
//      case .inviteMembersToJoinExternalCircle: return 187
//      case .circleCantAddMembersDueToAdminSettings: return 188
//      case .circleCantAddManyMembersDueToAdminSettings: return 189
//      case .joinCircleViaHelpDeskMsgCard: return 190
//      case .circleWelcomeNewMembers: return 191
//      case .transferCircleOwner: return 192
//      case .transferCircleOwnerAndLeave: return 193
//      case .circleUserChangeDocPermission: return 194
//      case .userInviteBotJoinCircle: return 195
//      case .userInviteOthersJoinCircle: return 196
//      case .userInviteOthersJoinCircleByLink: return 197
//      case .circleTooManyMembersNotificationMuted: return 198
//      case .userInviteOthersJoinCircleByQrCode: return 199
//      case .userInviteOthersJoinCircleByInvitationCard: return 200
//      case .userModifyCircleAvatar: return 201
//      case .userModifyCircleDescription: return 202
//      case .userModifyCircleName: return 203
//      case .userModifyCircleOwner: return 204
//      case .userModifyCircleSettings: return 205
//      case .userSetOnlyCircleOwnerCanPost: return 206
//      case .userSetOnlyCircleOwnerCanCreateNewTopics: return 207
//      case .userLeaveCircle: return 208
//      case .userRemoveCircleDescription: return 209
//      case .userRemoveCircleMembers: return 210
//      case .userCreateCircle: return 211
//      case .userCreateCircleAndInvite: return 212
//      case .userSyncMessageToCircle: return 213
//      case .userClearCircleAnnouncement: return 214
//      case .userWithdrawCircleInvitation: return 215
//      case .circleAnonymousOn: return 216
//      case .circleAnonymousOff: return 217
//      case .createCrossWithKaChatNotification: return 218
//      case .larkPrivacySettingsEnableSuccessfullyToast: return 219
//      case .cpViewDifferenceFeishuLink: return 220
//      case .cpViewDifferenceLarkLink: return 221
//      case .larkHelpDeskBotTransferredNote: return 222
//      case .needUpdateVersionToShowExclusiveHongbao: return 223
//      case .saipanFaqUnresolvedContactAgent: return 224
//      case .larkImCreateGroupUserAndGroupOwnerInvite: return 225
//      case .larkImCreateGroupUserAndGroupMemberInvite: return 226
//      case .larkImCreateGroupUserAndDepartmentOwnerInvite: return 227
//      case .larkImCreateGroupUserAndDepartmentMemberInivite: return 228
//      case .larkImCreateGroupGroupAndDepartmentOwnerInvite: return 229
//      case .larkImCreateGroupGroupAndDepartmentMemberInvite: return 230
//      case .larkImCreateGroupUserAndGroupAndDepartmentOwnerInvite: return 231
//      case .larkImCreateGroupUserAndGroupAndDepartmentMemberInvite: return 232
//      case .larkImEnterGroupUserAndGroupChatHistoryYesInviter: return 233
//      case .larkImEnterGroupUserAndGroupChatHistoryNoInviter: return 234
//      case .larkImEnterGroupUserAndGroupChatHistoryYesInvitee: return 235
//      case .larkImEnterGroupUserAndGroupChatHistoryNoInvitee: return 236
//      case .larkImEnterGroupUserAndGroupChatHistoryYesOtherMembers: return 237
//      case .larkImEnterGroupUserAndGroupChatHistoryNoOtherMembers: return 238
//      case .larkImEnterGroupUserAndDepartmentChatHistoryYesInviter: return 239
//      case .larkImEnterGroupUserAndDepartmentChatHistoryNoInviter: return 240
//      case .larkImEnterGroupUserAndDepartmentChatHistoryYesInvitee: return 241
//      case .larkImEnterGroupUserAndDepartmentChatHistoryNoInvitee: return 242
//      case .larkImEnterGroupUserAndDepartmentChatHistoryYesOtherMembers: return 243
//      case .larkImEnterGroupUserAndDepartmentChatHistoryNoOtherMembers: return 244
//      case .larkImEnterGroupGroupAndDepartmentChatHistoryYesInviter: return 245
//      case .larkImEnterGroupGroupAndDepartmentChatHistoryNoInviter: return 246
//      case .larkImEnterGroupGroupAndDepartmentChatHistoryYesInvitee: return 247
//      case .larkImEnterGroupGroupAndDepartmentChatHistoryNoInvitee: return 248
//      case .larkImEnterGroupGroupAndDepartmentChatHistoryYesOtherMembers: return 249
//      case .larkImEnterGroupGroupAndDepartmentChatHistoryNoOtherMembers: return 250
//      case .larkImEnterGroupUserAndGroupAndDepartmentChatHistoryYesInviter: return 251
//      case .larkImEnterGroupLarkImEnterGroupUserAndGroupAndDepartmentChatHistoryNoInviter: return 252
//      case .larkImEnterGroupUserAndGroupAndDepartmentChatHistoryYesInvitee: return 253
//      case .larkImEnterGroupUserAndGroupAndDepartmentChatHistoryNoInvitee: return 254
//      case .larkImEnterGroupUserAndGroupAndDepartmentChatHistoryYesOtherMembers: return 255
//      case .larkImEnterGroupUserAndGroupAndDepartmentChatHistoryNoOtherMembers: return 256
//      case .larkImEnterGroupUserChatHistoryYesFromTeam: return 257
//      case .inviteChatMember2Chat: return 300
//      case .willReachChatChatterCountLimit: return 301
//      case .alreadyReachChatChatterCountLimit: return 302
//      case .userCreateFaceToFaceChat: return 303
//      case .userJoinFaceToFaceChat: return 304
//      case .welcomeUserJoinFaceToFaceChat: return 305
//      case .userCreatedGroupAndInvitedOtherChatterChatDepartment: return 306
//      case .userInviteOthersChatterChatDepartmentJoin: return 307
//      case .createChatAndInviteFromChatDepartmentMember: return 308
//      case .userOpenOnlySepecifyMembersPost: return 309
//      case .userOpenOnlySepecifyMembersPostThread: return 310
//      case .userRemoveSepecifyMembersPost: return 311
//      case .userRemoveSepecifyMembersPostThread: return 312
//      case .addMemberToAdminList: return 313
//      case .removeMemberFromAdminList: return 314
//      case .needUpdateVersionToSupportAdmin: return 315
//      case .mentionAllPermissionSuggestionToAdmin: return 316
//      case .userOpenOnlyOwnerAndAdminPost: return 317
//      case .userOpenOnlyOwnerAndAdminPostThread: return 318
//      case .adminOpenAnyonePost: return 319
//      case .adminOpenAnyonePostThread: return 320
//      case .saipanBotOnlyHelpdesk: return 321
//      case .userChangeGroupMailPermissionOwnerOrAdmin: return 322
//      case .groupNewMembersViewChatHistoryOn: return 323
//      case .groupNewMembersViewChatHistoryOff: return 324
//      case .groupNewMembersCanViewHistoryMessages: return 325
//      case .circleWelcomeNewMembersNoHistory: return 326
//      case .joinCircleViaHelpDeskMsgCardNoHistory: return 327
//      case .userInviteOthersJoinCircleNoHistory: return 328
//      case .userInviteOthersJoinCircleByInvitationCardNoHistory: return 329
//      case .userInviteOthersJoinCircleByLinkNoHistory: return 330
//      case .userInviteOthersJoinCircleByQrCodeNoHistory: return 331
//      case .userInviteOthersChatterChatDepartmentJoinNoHistory: return 332
//      case .userJoinViaQrCodeNoHistory: return 333
//      case .userJoinChatWelcomeMessage: return 334
//      case .userJoinChatWelcomeMessageNoHistory: return 335
//      case .userInviteOthersJoinChatMessage: return 336
//      case .userInviteOthersJoinChatMessageNoHistory: return 337
//      case .userInviteOthersChatterChatDepartmentJoinNew: return 338
//      case .userJoinViaQrNew: return 339
//      case .userJoinViaShareNew: return 340
//      case .userJoinViaShareNoHistory: return 341
//      case .userJoinChatByLink: return 342
//      case .userJoinChatByLinkNoHistory: return 343
//      case .helpDeskUserJoinChat: return 344
//      case .helpDeskUserJoinChatNoHistory: return 345
//      case .createUrgentOnlyOwnerAndAdminOn: return 346
//      case .createUrgentOnlyOwnerAndAdminOff: return 347
//      case .upgradeSuperChat: return 348
//      case .addChatTab: return 349
//      case .delChatTab: return 350
//      case .onlyAdminsCanPin: return 351
//      case .allMembersCanPin: return 352
//      case .onlyAdminsCanCreateVideoConference: return 353
//      case .allMembersCanCreateVideoConference: return 354
//      case .onlyAdminsCanEditChatInfo: return 355
//      case .allMembersCanEditChatInfo: return 356
//      case .onlyAdminsCanAtAllMembers: return 357
//      case .allMembersCanAtAllMembers: return 358
//      case .onlyAdminsCanAddMembersAndShare: return 359
//      case .allMembersCanAddMembersAndShare: return 360
//      case .chatMemberReachManageLimit: return 361
//      case .userRecoverDefaultGroupName: return 362
//      case .autoOpenTypingTranslate: return 363
//      case .externalCoordinateCtl: return 401
//      case .targetExternalCoordinateCtl: return 402
//      case .chatOpenCanSearchSystemMessage: return 403
//      case .chatClosedCanSearchSystemMessage: return 404
//      case .bitableTemplateGroupShareSystemMessage: return 405
//      case .momentsStartSecretChatAboutMessage: return 406
//      case .createTeamAndInviteMembers: return 501
//      case .updateChatToTeam: return 502
//      case .inviteMembersJoinTeam: return 503
//      case .membersJoinTeamFail: return 504
//      case .kickMembersOutTeam: return 505
//      case .memberLeaveTeam: return 506
//      case .transferTeamOwner: return 507
//      case .modifyTeamName: return 508
//      case .enableTeamCreateChatPermission: return 509
//      case .closeTeamCreateChatPermission: return 510
//      case .enableTeamAddMembersPermission: return 511
//      case .closeTeamAddMembersPermission: return 512
//      case .dissolveTeamAndUnbindChat: return 513
//      case .createTeamChat: return 514
//      case .bindChatIntoTeam: return 515
//      case .unbindChatWithTeam: return 516
//      case .membersJoinTeamChatSeeHistorical: return 517
//      case .membersJoinTeamChatSeeNewMessages: return 518
//      case .membersJoinTeamChatFail: return 519
//      case .membersLeaveAndTransfer: return 520
//      case .userCreateTeam: return 521
//      case .checkUserPhoneNumber: return 522
//      case .checkUserPhoneUserInWhitelist: return 523
//      case .cantBuzzEmptyPhoneNumber: return 524
//      case .cantBuzzEmptyName: return 525
//      case .buzzLimit: return 526
//      case .buzzSystemError: return 527
//      case .buzzTimeOut: return 528
//      case .cantBuzzMembers: return 529
//      case .buzzNotAnswer: return 530
//      case .multiItemSystemContent: return 531
//      case .vcEnterprisePhoneCreate: return 532
//      case .modifyTeamAvatar: return 533
//      case .modifyTeamDescription: return 534
//      case .deleteTeamDescription: return 535
//      case .enableAddTeamMembersPermission: return 536
//      case .closeAddTeamMembersPermission: return 537
//      case .enableBindTeamChatPermission: return 538
//      case .closeBindTeamChatPermission: return 539
//      case .createTeamChatV2: return 540
//      case .createTeamChatV2Manager: return 541
//      case .bindChatIntoTeamManager: return 542
//      case .userJoinChatFromTeam: return 543
//      case .teamChatTurnOpenMessageToTeam: return 544
//      case .teamChatTurnOpenMessage: return 545
//      case .chatTopNoticeTopMessage: return 601
//      case .chatTopNoticeTopAnnouncement: return 602
//      case .chatTopNoticeTopThread: return 603
//      case .chatTopNoticeRemove: return 604
//      case .onlyAdminsCanOperateTopNotice: return 605
//      case .allMembersCanOperateTopNotice: return 606
//      case .onlyAdminsCanOperateTopNoticeThread: return 607
//      case .allMembersCanOperateTopNoticeThread: return 608
//      case .buzzMemberBuzzFailedLimit: return 609
//      case .buzzMemberBuzzFailedSystemError: return 610
//      case .buzzMemberBuzzFailedTimeOut: return 611
//      case .buzzBuzzFailPushFailList: return 612
//      case .buzzNamesDidntPickUpBuzzCall: return 613
//      case .buzzSomeDidntPickUpSomeCantCall: return 614
//      case .noticeUserDeviceUpdateLarkVersion: return 701
//      }
//    }
//
//  }
//
//  public enum ContentValueType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownValueType // = 0
//    case user // = 1
//    case bot // = 2
//    case text // = 3
//    case chat // = 4
//    case chatter // = 5
//    case url // = 6
//
    /// 动作
//    case action // = 7
//
    /// 部门
//    case department // = 8
//
//    public init() {
//      self = .unknownValueType
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownValueType
//      case 1: self = .user
//      case 2: self = .bot
//      case 3: self = .text
//      case 4: self = .chat
//      case 5: self = .chatter
//      case 6: self = .url
//      case 7: self = .action
//      case 8: self = .department
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownValueType: return 0
//      case .user: return 1
//      case .bot: return 2
//      case .text: return 3
//      case .chat: return 4
//      case .chatter: return 5
//      case .url: return 6
//      case .action: return 7
//      case .department: return 8
//      }
//    }
//
//  }
//
//  public enum DocsPermissionType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownPermissionType // = 0
//    case readable // = 1
//    case writable // = 2
//
//    public init() {
//      self = .unknownPermissionType
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownPermissionType
//      case 1: self = .readable
//      case 2: self = .writable
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownPermissionType: return 0
//      case .readable: return 1
//      case .writable: return 2
//      }
//    }
//
//  }
//
  /// 标注废弃的字段由于需要兼容老版本，需要保留赋值，新增的系统消息请使用新字段。
  /// 该结构用于描述系统消息模板中的占位的数据
//  public struct ContentValue {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 废弃
//    public var id: String {
//      get {return _storage._id ?? String()}
//      set {_uniqueStorage()._id = newValue}
//    }
    /// Returns true if `id` has been explicitly set.
//    public var hasID: Bool {return _storage._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
//    public mutating func clearID() {_uniqueStorage()._id = nil}
//
//    public var type: LarkNCExtensionPB_Entities_SystemContent.ContentValueType {
//      get {return _storage._type ?? .unknownValueType}
//      set {_uniqueStorage()._type = newValue}
//    }
    /// Returns true if `type` has been explicitly set.
//    public var hasType: Bool {return _storage._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {_uniqueStorage()._type = nil}
//
//    public var ids: [String] {
//      get {return _storage._ids}
//      set {_uniqueStorage()._ids = newValue}
//    }
//
//    public var text: String {
//      get {return _storage._text ?? String()}
//      set {_uniqueStorage()._text = newValue}
//    }
    /// Returns true if `text` has been explicitly set.
//    public var hasText: Bool {return _storage._text != nil}
    /// Clears the value of `text`. Subsequent reads from it will return its default value.
//    public mutating func clearText() {_uniqueStorage()._text = nil}
//
    /// 20210801之后，新增的系统消息请使用item赋值
//    public var items: [LarkNCExtensionPB_Entities_SystemContent.ContentValue.Item] {
//      get {return _storage._items}
//      set {_uniqueStorage()._items = newValue}
//    }
//
//    public var link: String {
//      get {return _storage._link ?? String()}
//      set {_uniqueStorage()._link = newValue}
//    }
    /// Returns true if `link` has been explicitly set.
//    public var hasLink: Bool {return _storage._link != nil}
    /// Clears the value of `link`. Subsequent reads from it will return its default value.
//    public mutating func clearLink() {_uniqueStorage()._link = nil}
//
    /// 系统消息中的动作描述
//    public var action: LarkNCExtensionPB_Entities_SystemMessageAction {
//      get {return _storage._action ?? LarkNCExtensionPB_Entities_SystemMessageAction()}
//      set {_uniqueStorage()._action = newValue}
//    }
    /// Returns true if `action` has been explicitly set.
//    public var hasAction: Bool {return _storage._action != nil}
    /// Clears the value of `action`. Subsequent reads from it will return its default value.
//    public mutating func clearAction() {_uniqueStorage()._action = nil}
//
    /// 标识系统消息是否高亮
//    public var isClickable: Bool {
//      get {return _storage._isClickable ?? false}
//      set {_uniqueStorage()._isClickable = newValue}
//    }
    /// Returns true if `isClickable` has been explicitly set.
//    public var hasIsClickable: Bool {return _storage._isClickable != nil}
    /// Clears the value of `isClickable`. Subsequent reads from it will return its default value.
//    public mutating func clearIsClickable() {_uniqueStorage()._isClickable = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
    /// 用于描述系统消息占位中的一个渲染数据，同一个占位支持多个item数据。
    /// Item字段的使用需要和type配合。
    /// 1.Text类型使用 text, i18n_text
    /// 2.Chatter类型使用id
    /// 3.Chat类型使用 id,text,i18n_text
    /// 4.department类型使用 id,text,i18n_text
    /// 5.URL类型使用text,link,i18n_text
    /// 6.Action类型使用action_id, 然后对应的action描述数据使用item_actions的value
//    public struct Item {
      // LarkHTTP.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the LarkHTTP library for
      // methods supported on all messages.
//
//      public var type: LarkNCExtensionPB_Entities_SystemContent.ContentValueType {
//        get {return _storage._type ?? .unknownValueType}
//        set {_uniqueStorage()._type = newValue}
//      }
      /// Returns true if `type` has been explicitly set.
//      public var hasType: Bool {return _storage._type != nil}
      /// Clears the value of `type`. Subsequent reads from it will return its default value.
//      public mutating func clearType() {_uniqueStorage()._type = nil}
//
      /// 一般为chatterID
//      public var id: String {
//        get {return _storage._id ?? String()}
//        set {_uniqueStorage()._id = newValue}
//      }
      /// Returns true if `id` has been explicitly set.
//      public var hasID: Bool {return _storage._id != nil}
      /// Clears the value of `id`. Subsequent reads from it will return its default value.
//      public mutating func clearID() {_uniqueStorage()._id = nil}
//
      /// 默认文案
//      public var text: String {
//        get {return _storage._text ?? String()}
//        set {_uniqueStorage()._text = newValue}
//      }
      /// Returns true if `text` has been explicitly set.
//      public var hasText: Bool {return _storage._text != nil}
      /// Clears the value of `text`. Subsequent reads from it will return its default value.
//      public mutating func clearText() {_uniqueStorage()._text = nil}
//
      /// 超链接
//      public var link: String {
//        get {return _storage._link ?? String()}
//        set {_uniqueStorage()._link = newValue}
//      }
      /// Returns true if `link` has been explicitly set.
//      public var hasLink: Bool {return _storage._link != nil}
      /// Clears the value of `link`. Subsequent reads from it will return its default value.
//      public mutating func clearLink() {_uniqueStorage()._link = nil}
//
      /// locale->text，若i18n_text不为空，则优先使用i18n_text，否则使用text字段
//      public var i18NText: Dictionary<String,String> {
//        get {return _storage._i18NText}
//        set {_uniqueStorage()._i18NText = newValue}
//      }
//
//      public var action: LarkNCExtensionPB_Entities_SystemMessageAction {
//        get {return _storage._action ?? LarkNCExtensionPB_Entities_SystemMessageAction()}
//        set {_uniqueStorage()._action = newValue}
//      }
      /// Returns true if `action` has been explicitly set.
//      public var hasAction: Bool {return _storage._action != nil}
      /// Clears the value of `action`. Subsequent reads from it will return its default value.
//      public mutating func clearAction() {_uniqueStorage()._action = nil}
//
      /// action的索引值,action用于描述item的触发行为。
//      public var actionID: Int32 {
//        get {return _storage._actionID ?? 0}
//        set {_uniqueStorage()._actionID = newValue}
//      }
      /// Returns true if `actionID` has been explicitly set.
//      public var hasActionID: Bool {return _storage._actionID != nil}
      /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
//      public mutating func clearActionID() {_uniqueStorage()._actionID = nil}
//
      /// 该item是否可点击，高亮展示
//      public var isClickable: Bool {
//        get {return _storage._isClickable ?? false}
//        set {_uniqueStorage()._isClickable = newValue}
//      }
      /// Returns true if `isClickable` has been explicitly set.
//      public var hasIsClickable: Bool {return _storage._isClickable != nil}
      /// Clears the value of `isClickable`. Subsequent reads from it will return its default value.
//      public mutating func clearIsClickable() {_uniqueStorage()._isClickable = nil}
//
//      public var unknownFields = LarkHTTP.UnknownStorage()
//
//      public init() {}
//
//      fileprivate var _storage = _StorageClass.defaultInstance
//    }
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
  /// 以下结构为特化的系统消息
  ///voip 相关系统消息中的变量字段。
//  public struct E2EEContent {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// voip 电话主叫方
//    public var fromID: String {
//      get {return _fromID ?? String()}
//      set {_fromID = newValue}
//    }
    /// Returns true if `fromID` has been explicitly set.
//    public var hasFromID: Bool {return self._fromID != nil}
    /// Clears the value of `fromID`. Subsequent reads from it will return its default value.
//    public mutating func clearFromID() {self._fromID = nil}
//
    ///voip电话被叫方
//    public var toID: String {
//      get {return _toID ?? String()}
//      set {_toID = newValue}
//    }
    /// Returns true if `toID` has been explicitly set.
//    public var hasToID: Bool {return self._toID != nil}
    /// Clears the value of `toID`. Subsequent reads from it will return its default value.
//    public mutating func clearToID() {self._toID = nil}
//
    ///voip系统消息的触发方
//    public var triggerID: String {
//      get {return _triggerID ?? String()}
//      set {_triggerID = newValue}
//    }
    /// Returns true if `triggerID` has been explicitly set.
//    public var hasTriggerID: Bool {return self._triggerID != nil}
    /// Clears the value of `triggerID`. Subsequent reads from it will return its default value.
//    public mutating func clearTriggerID() {self._triggerID = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _fromID: String? = nil
//    fileprivate var _toID: String? = nil
//    fileprivate var _triggerID: String? = nil
//  }
//
  ///视频会议相关系统消息参数
//  public struct VideoConferenceContent {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 1v1视频会议发起者
//    public var fromID: String {
//      get {return _fromID ?? String()}
//      set {_fromID = newValue}
//    }
    /// Returns true if `fromID` has been explicitly set.
//    public var hasFromID: Bool {return self._fromID != nil}
    /// Clears the value of `fromID`. Subsequent reads from it will return its default value.
//    public mutating func clearFromID() {self._fromID = nil}
//
    /// 1v1视频会议参与者
//    public var toID: String {
//      get {return _toID ?? String()}
//      set {_toID = newValue}
//    }
    /// Returns true if `toID` has been explicitly set.
//    public var hasToID: Bool {return self._toID != nil}
    /// Clears the value of `toID`. Subsequent reads from it will return its default value.
//    public mutating func clearToID() {self._toID = nil}
//
    ///会议持续时间
//    public var durationTime: String {
//      get {return _durationTime ?? String()}
//      set {_durationTime = newValue}
//    }
    /// Returns true if `durationTime` has been explicitly set.
//    public var hasDurationTime: Bool {return self._durationTime != nil}
    /// Clears the value of `durationTime`. Subsequent reads from it will return its default value.
//    public mutating func clearDurationTime() {self._durationTime = nil}
//
    ///会议编号
//    public var meetingID: String {
//      get {return _meetingID ?? String()}
//      set {_meetingID = newValue}
//    }
    /// Returns true if `meetingID` has been explicitly set.
//    public var hasMeetingID: Bool {return self._meetingID != nil}
    /// Clears the value of `meetingID`. Subsequent reads from it will return its default value.
//    public mutating func clearMeetingID() {self._meetingID = nil}
//
    ///密码(保留)
//    public var passcode: String {
//      get {return _passcode ?? String()}
//      set {_passcode = newValue}
//    }
    /// Returns true if `passcode` has been explicitly set.
//    public var hasPasscode: Bool {return self._passcode != nil}
    /// Clears the value of `passcode`. Subsequent reads from it will return its default value.
//    public mutating func clearPasscode() {self._passcode = nil}
//
    /// 已弃用  1.17反馈状态
//    public var feedbackStatus: String {
//      get {return _feedbackStatus ?? String()}
//      set {_feedbackStatus = newValue}
//    }
    /// Returns true if `feedbackStatus` has been explicitly set.
//    public var hasFeedbackStatus: Bool {return self._feedbackStatus != nil}
    /// Clears the value of `feedbackStatus`. Subsequent reads from it will return its default value.
//    public mutating func clearFeedbackStatus() {self._feedbackStatus = nil}
//
    /// 主叫反馈状态 1.18开始
//    public var fromFeedbackStatus: String {
//      get {return _fromFeedbackStatus ?? String()}
//      set {_fromFeedbackStatus = newValue}
//    }
    /// Returns true if `fromFeedbackStatus` has been explicitly set.
//    public var hasFromFeedbackStatus: Bool {return self._fromFeedbackStatus != nil}
    /// Clears the value of `fromFeedbackStatus`. Subsequent reads from it will return its default value.
//    public mutating func clearFromFeedbackStatus() {self._fromFeedbackStatus = nil}
//
    /// 被叫反馈状态 1.18开始
//    public var toFeedbackStatus: String {
//      get {return _toFeedbackStatus ?? String()}
//      set {_toFeedbackStatus = newValue}
//    }
    /// Returns true if `toFeedbackStatus` has been explicitly set.
//    public var hasToFeedbackStatus: Bool {return self._toFeedbackStatus != nil}
    /// Clears the value of `toFeedbackStatus`. Subsequent reads from it will return its default value.
//    public mutating func clearToFeedbackStatus() {self._toFeedbackStatus = nil}
//
    /// 是否是语音通话
//    public var isVoiceCall: Bool {
//      get {return _isVoiceCall ?? false}
//      set {_isVoiceCall = newValue}
//    }
    /// Returns true if `isVoiceCall` has been explicitly set.
//    public var hasIsVoiceCall: Bool {return self._isVoiceCall != nil}
    /// Clears the value of `isVoiceCall`. Subsequent reads from it will return its default value.
//    public mutating func clearIsVoiceCall() {self._isVoiceCall = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _fromID: String? = nil
//    fileprivate var _toID: String? = nil
//    fileprivate var _durationTime: String? = nil
//    fileprivate var _meetingID: String? = nil
//    fileprivate var _passcode: String? = nil
//    fileprivate var _feedbackStatus: String? = nil
//    fileprivate var _fromFeedbackStatus: String? = nil
//    fileprivate var _toFeedbackStatus: String? = nil
//    fileprivate var _isVoiceCall: Bool? = nil
//  }
//
  ///红包 相关系统消息中的变量字段
//  public struct HongbaoContent {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    ///key 为 语言设置，目前有 zh_CN, en_US, default(为中文), value 为对应语言设置的 钱包/红包 翻译
//    public var i18NName: Dictionary<String,String> = [:]
//
    ///红包id
//    public var hongbaoID: String {
//      get {return _hongbaoID ?? String()}
//      set {_hongbaoID = newValue}
//    }
    /// Returns true if `hongbaoID` has been explicitly set.
//    public var hasHongbaoID: Bool {return self._hongbaoID != nil}
    /// Clears the value of `hongbaoID`. Subsequent reads from it will return its default value.
//    public mutating func clearHongbaoID() {self._hongbaoID = nil}
//
    ///红包id所对应的message_id
//    public var messageID: String {
//      get {return _messageID ?? String()}
//      set {_messageID = newValue}
//    }
    /// Returns true if `messageID` has been explicitly set.
//    public var hasMessageID: Bool {return self._messageID != nil}
    /// Clears the value of `messageID`. Subsequent reads from it will return its default value.
//    public mutating func clearMessageID() {self._messageID = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _hongbaoID: String? = nil
//    fileprivate var _messageID: String? = nil
//  }
//
  ///已废弃，不应再使用，请使用外层的DocEntity
//  public struct DocEntity {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// RichTextElementID -> DocEntity
//    public var elementEntityRef: Dictionary<String,LarkNCExtensionPB_Entities_SystemContent.DocEntity.ElementEntity> = [:]
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public struct ElementEntity {
      // LarkHTTP.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the LarkHTTP library for
      // methods supported on all messages.
//
//      public var title: String {
//        get {return _title ?? String()}
//        set {_title = newValue}
//      }
      /// Returns true if `title` has been explicitly set.
//      public var hasTitle: Bool {return self._title != nil}
      /// Clears the value of `title`. Subsequent reads from it will return its default value.
//      public mutating func clearTitle() {self._title = nil}
//
//      public var docType: LarkNCExtensionPB_Entities_DocType {
//        get {return _docType ?? .unknownDocType}
//        set {_docType = newValue}
//      }
      /// Returns true if `docType` has been explicitly set.
//      public var hasDocType: Bool {return self._docType != nil}
      /// Clears the value of `docType`. Subsequent reads from it will return its default value.
//      public mutating func clearDocType() {self._docType = nil}
//
//      public var strDocType: String {
//        get {return _strDocType ?? String()}
//        set {_strDocType = newValue}
//      }
      /// Returns true if `strDocType` has been explicitly set.
//      public var hasStrDocType: Bool {return self._strDocType != nil}
      /// Clears the value of `strDocType`. Subsequent reads from it will return its default value.
//      public mutating func clearStrDocType() {self._strDocType = nil}
//
      /// ......
//      public var docToken: String {
//        get {return _docToken ?? String()}
//        set {_docToken = newValue}
//      }
      /// Returns true if `docToken` has been explicitly set.
//      public var hasDocToken: Bool {return self._docToken != nil}
      /// Clears the value of `docToken`. Subsequent reads from it will return its default value.
//      public mutating func clearDocToken() {self._docToken = nil}
//
//      public var unknownFields = LarkHTTP.UnknownStorage()
//
//      public init() {}
//
//      fileprivate var _title: String? = nil
//      fileprivate var _docType: LarkNCExtensionPB_Entities_DocType? = nil
//      fileprivate var _strDocType: String? = nil
//      fileprivate var _docToken: String? = nil
//    }
//
//    public init() {}
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_SystemContent.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_SystemContent.ContentValueType: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_SystemContent.DocsPermissionType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_MinVersion {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var minVersion: String {
    get {return _minVersion ?? String()}
    set {_minVersion = newValue}
  }
  /// Returns true if `minVersion` has been explicitly set.
//  public var hasMinVersion: Bool {return self._minVersion != nil}
  /// Clears the value of `minVersion`. Subsequent reads from it will return its default value.
//  public mutating func clearMinVersion() {self._minVersion = nil}

  public var androidMinVersion: String {
    get {return _androidMinVersion ?? String()}
    set {_androidMinVersion = newValue}
  }
  /// Returns true if `androidMinVersion` has been explicitly set.
//  public var hasAndroidMinVersion: Bool {return self._androidMinVersion != nil}
  /// Clears the value of `androidMinVersion`. Subsequent reads from it will return its default value.
//  public mutating func clearAndroidMinVersion() {self._androidMinVersion = nil}

  public var iosMinVersion: String {
    get {return _iosMinVersion ?? String()}
    set {_iosMinVersion = newValue}
  }
  /// Returns true if `iosMinVersion` has been explicitly set.
//  public var hasIosMinVersion: Bool {return self._iosMinVersion != nil}
  /// Clears the value of `iosMinVersion`. Subsequent reads from it will return its default value.
//  public mutating func clearIosMinVersion() {self._iosMinVersion = nil}

  public var pcMinVersion: String {
    get {return _pcMinVersion ?? String()}
    set {_pcMinVersion = newValue}
  }
  /// Returns true if `pcMinVersion` has been explicitly set.
//  public var hasPcMinVersion: Bool {return self._pcMinVersion != nil}
  /// Clears the value of `pcMinVersion`. Subsequent reads from it will return its default value.
//  public mutating func clearPcMinVersion() {self._pcMinVersion = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _minVersion: String? = nil
  fileprivate var _androidMinVersion: String? = nil
  fileprivate var _iosMinVersion: String? = nil
  fileprivate var _pcMinVersion: String? = nil
}

public struct LarkNCExtensionPB_Entities_CardContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var type: LarkNCExtensionPB_Entities_CardContent.TypeEnum {
    get {return _storage._type ?? .unknownType}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}

  public var richtext: LarkNCExtensionPB_Entities_RichText {
    get {return _storage._richtext ?? LarkNCExtensionPB_Entities_RichText()}
    set {_uniqueStorage()._richtext = newValue}
  }
  /// Returns true if `richtext` has been explicitly set.
//  public var hasRichtext: Bool {return _storage._richtext != nil}
  /// Clears the value of `richtext`. Subsequent reads from it will return its default value.
//  public mutating func clearRichtext() {_uniqueStorage()._richtext = nil}

  public var actions: Dictionary<String,LarkNCExtensionPB_Entities_CardAction> {
    get {return _storage._actions}
    set {_uniqueStorage()._actions = newValue}
  }

  public var extra: LarkNCExtensionPB_Entities_CardContent.ExtraType {
    get {return _storage._extra ?? .unknown}
    set {_uniqueStorage()._extra = newValue}
  }
  /// Returns true if `extra` has been explicitly set.
  public var hasExtra: Bool {return _storage._extra != nil}
  /// Clears the value of `extra`. Subsequent reads from it will return its default value.
//  public mutating func clearExtra() {_uniqueStorage()._extra = nil}

  public var minVersion: LarkNCExtensionPB_Entities_MinVersion {
    get {return _storage._minVersion ?? LarkNCExtensionPB_Entities_MinVersion()}
    set {_uniqueStorage()._minVersion = newValue}
  }
  /// Returns true if `minVersion` has been explicitly set.
//  public var hasMinVersion: Bool {return _storage._minVersion != nil}
  /// Clears the value of `minVersion`. Subsequent reads from it will return its default value.
//  public mutating func clearMinVersion() {_uniqueStorage()._minVersion = nil}

  /// 卡片摘要信息
  public var cardDesc: String {
    get {return _storage._cardDesc ?? String()}
    set {_uniqueStorage()._cardDesc = newValue}
  }
  /// Returns true if `cardDesc` has been explicitly set.
//  public var hasCardDesc: Bool {return _storage._cardDesc != nil}
  /// Clears the value of `cardDesc`. Subsequent reads from it will return its default value.
//  public mutating func clearCardDesc() {_uniqueStorage()._cardDesc = nil}

  /// 卡片版本
  public var cardVersion: Int32 {
    get {return _storage._cardVersion ?? 0}
    set {_uniqueStorage()._cardVersion = newValue}
  }
  /// Returns true if `cardVersion` has been explicitly set.
//  public var hasCardVersion: Bool {return _storage._cardVersion != nil}
  /// Clears the value of `cardVersion`. Subsequent reads from it will return its default value.
//  public mutating func clearCardVersion() {_uniqueStorage()._cardVersion = nil}

  /// 卡片头
  public var cardHeader: LarkNCExtensionPB_Entities_CardContent.CardHeader {
    get {return _storage._cardHeader ?? LarkNCExtensionPB_Entities_CardContent.CardHeader()}
    set {_uniqueStorage()._cardHeader = newValue}
  }
  /// Returns true if `cardHeader` has been explicitly set.
  public var hasCardHeader: Bool {return _storage._cardHeader != nil}
  /// Clears the value of `cardHeader`. Subsequent reads from it will return its default value.
//  public mutating func clearCardHeader() {_uniqueStorage()._cardHeader = nil}

  /// 是否支持宽屏
  public var wideScreenMode: Bool {
    get {return _storage._wideScreenMode ?? false}
    set {_uniqueStorage()._wideScreenMode = newValue}
  }
  /// Returns true if `wideScreenMode` has been explicitly set.
  public var hasWideScreenMode: Bool {return _storage._wideScreenMode != nil}
  /// Clears the value of `wideScreenMode`. Subsequent reads from it will return its default value.
//  public mutating func clearWideScreenMode() {_uniqueStorage()._wideScreenMode = nil}

  /// 发送卡片的bot id
  public var botID: Int64 {
    get {return _storage._botID ?? 0}
    set {_uniqueStorage()._botID = newValue}
  }
  /// Returns true if `botID` has been explicitly set.
  public var hasBotID: Bool {return _storage._botID != nil}
  /// Clears the value of `botID`. Subsequent reads from it will return its default value.
//  public mutating func clearBotID() {_uniqueStorage()._botID = nil}

  /// 额外信息，用于小程序预加载等功能
  public var extraInfo: LarkNCExtensionPB_Entities_CardContent.ExtraInfo {
    get {return _storage._extraInfo ?? LarkNCExtensionPB_Entities_CardContent.ExtraInfo()}
    set {_uniqueStorage()._extraInfo = newValue}
  }
  /// Returns true if `extraInfo` has been explicitly set.
//  public var hasExtraInfo: Bool {return _storage._extraInfo != nil}
  /// Clears the value of `extraInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearExtraInfo() {_uniqueStorage()._extraInfo = nil}

  /// 发送卡片的app id
  public var appID: Int64 {
    get {return _storage._appID ?? 0}
    set {_uniqueStorage()._appID = newValue}
  }
  /// Returns true if `appID` has been explicitly set.
  public var hasAppID: Bool {return _storage._appID != nil}
  /// Clears the value of `appID`. Subsequent reads from it will return its default value.
//  public mutating func clearAppID() {_uniqueStorage()._appID = nil}

  /// 发送卡片的tenant id
  public var tenantID: Int64 {
    get {return _storage._tenantID ?? 0}
    set {_uniqueStorage()._tenantID = newValue}
  }
  /// Returns true if `tenantID` has been explicitly set.
  public var hasTenantID: Bool {return _storage._tenantID != nil}
  /// Clears the value of `tenantID`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantID() {_uniqueStorage()._tenantID = nil}

  /// 消息卡片是否允许被转发，单条转发时由客户端感知，合并转发时后端需感知
  public var enableForward: Bool {
    get {return _storage._enableForward ?? false}
    set {_uniqueStorage()._enableForward = newValue}
  }
  /// Returns true if `enableForward` has been explicitly set.
//  public var hasEnableForward: Bool {return _storage._enableForward != nil}
  /// Clears the value of `enableForward`. Subsequent reads from it will return its default value.
//  public mutating func clearEnableForward() {_uniqueStorage()._enableForward = nil}

  /// 消息卡片来源方：应用机器人、套件机器人、User
  public var source: LarkNCExtensionPB_Entities_CardContent.SourceType {
    get {return _storage._source ?? .unknownSource}
    set {_uniqueStorage()._source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  public var hasSource: Bool {return _storage._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
//  public mutating func clearSource() {_uniqueStorage()._source = nil}

  /// 消息卡片宽版是否是紧凑模式
  public var compactWidth: Bool {
    get {return _storage._compactWidth ?? false}
    set {_uniqueStorage()._compactWidth = newValue}
  }
  /// Returns true if `compactWidth` has been explicitly set.
  public var hasCompactWidth: Bool {return _storage._compactWidth != nil}
  /// Clears the value of `compactWidth`. Subsequent reads from it will return its default value.
//  public mutating func clearCompactWidth() {_uniqueStorage()._compactWidth = nil}

  public var openCardContent: Data {
    get {return _storage._openCardContent ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._openCardContent = newValue}
  }
  /// Returns true if `openCardContent` has been explicitly set.
//  public var hasOpenCardContent: Bool {return _storage._openCardContent != nil}
  /// Clears the value of `openCardContent`. Subsequent reads from it will return its default value.
//  public mutating func clearOpenCardContent() {_uniqueStorage()._openCardContent = nil}

  public var attachment: LarkNCExtensionPB_Entities_OpenCardAttachment {
    get {return _storage._attachment ?? LarkNCExtensionPB_Entities_OpenCardAttachment()}
    set {_uniqueStorage()._attachment = newValue}
  }
  /// Returns true if `attachment` has been explicitly set.
  public var hasAttachment: Bool {return _storage._attachment != nil}
  /// Clears the value of `attachment`. Subsequent reads from it will return its default value.
//  public mutating func clearAttachment() {_uniqueStorage()._attachment = nil}

  public var cardDescI18N: Dictionary<String,String> {
    get {return _storage._cardDescI18N}
    set {_uniqueStorage()._cardDescI18N = newValue}
  }

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum TypeEnum: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownType // = 0
    case vote // = 1
    case text // = 2
    case vchat // = 3
    case openCard // = 4

    public init() {
      self = .unknownType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownType
      case 1: self = .vote
      case 2: self = .text
      case 3: self = .vchat
      case 4: self = .openCard
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownType: return 0
      case .vote: return 1
      case .text: return 2
      case .vchat: return 3
      case .openCard: return 4
      }
    }

  }

  public enum ExtraType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case senderCannotClick // = 1

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .senderCannotClick
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .senderCannotClick: return 1
      }
    }

  }

  public enum SourceType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownSource // = 0
    case appBot // = 1
    case suiteBot // = 2
    case user // = 3

    public init() {
      self = .unknownSource
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownSource
      case 1: self = .appBot
      case 2: self = .suiteBot
      case 3: self = .user
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownSource: return 0
      case .appBot: return 1
      case .suiteBot: return 2
      case .user: return 3
      }
    }

  }

  public struct CardHeader {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var title: String {
      get {return _title ?? String()}
      set {_title = newValue}
    }
    /// Returns true if `title` has been explicitly set.
    public var hasTitle: Bool {return self._title != nil}
    /// Clears the value of `title`. Subsequent reads from it will return its default value.
//    public mutating func clearTitle() {self._title = nil}

    public var titleI18NKey: String {
      get {return _titleI18NKey ?? String()}
      set {_titleI18NKey = newValue}
    }
    /// Returns true if `titleI18NKey` has been explicitly set.
    public var hasTitleI18NKey: Bool {return self._titleI18NKey != nil}
    /// Clears the value of `titleI18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearTitleI18NKey() {self._titleI18NKey = nil}

    public var style: Dictionary<String,String> = [:]

    public var titleI18N: Dictionary<String,String> = [:]

    public var theme: String {
      get {return _theme ?? String()}
      set {_theme = newValue}
    }
    /// Returns true if `theme` has been explicitly set.
//    public var hasTheme: Bool {return self._theme != nil}
    /// Clears the value of `theme`. Subsequent reads from it will return its default value.
//    public mutating func clearTheme() {self._theme = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _title: String? = nil
    fileprivate var _titleI18NKey: String? = nil
    fileprivate var _theme: String? = nil
  }

  public struct ExtraInfo {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// 小程序配置
    public var gadgetConfig: LarkNCExtensionPB_Entities_CardContent.GadgetConfig {
      get {return _storage._gadgetConfig ?? LarkNCExtensionPB_Entities_CardContent.GadgetConfig()}
      set {_uniqueStorage()._gadgetConfig = newValue}
    }
    /// Returns true if `gadgetConfig` has been explicitly set.
//    public var hasGadgetConfig: Bool {return _storage._gadgetConfig != nil}
    /// Clears the value of `gadgetConfig`. Subsequent reads from it will return its default value.
//    public mutating func clearGadgetConfig() {_uniqueStorage()._gadgetConfig = nil}

    /// 业务方自定义信息
    public var customConfig: LarkNCExtensionPB_Entities_CardContent.CustomConfig {
      get {return _storage._customConfig ?? LarkNCExtensionPB_Entities_CardContent.CustomConfig()}
      set {_uniqueStorage()._customConfig = newValue}
    }
    /// Returns true if `customConfig` has been explicitly set.
//    public var hasCustomConfig: Bool {return _storage._customConfig != nil}
    /// Clears the value of `customConfig`. Subsequent reads from it will return its default value.
//    public mutating func clearCustomConfig() {_uniqueStorage()._customConfig = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct GadgetConfig {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// 预加载小程序
    public var isPreload: Bool {
      get {return _isPreload ?? false}
      set {_isPreload = newValue}
    }
    /// Returns true if `isPreload` has been explicitly set.
//    public var hasIsPreload: Bool {return self._isPreload != nil}
    /// Clears the value of `isPreload`. Subsequent reads from it will return its default value.
//    public mutating func clearIsPreload() {self._isPreload = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _isPreload: Bool? = nil
  }

  public struct CustomConfig {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// 卡片业务相关标签, 用于业务打点
    public var analyticsData: String {
      get {return _analyticsData ?? String()}
      set {_analyticsData = newValue}
    }
    /// Returns true if `analyticsData` has been explicitly set.
//    public var hasAnalyticsData: Bool {return self._analyticsData != nil}
    /// Clears the value of `analyticsData`. Subsequent reads from it will return its default value.
//    public mutating func clearAnalyticsData() {self._analyticsData = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _analyticsData: String? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_CardContent.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_CardContent.ExtraType: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_CardContent.SourceType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_OpenCardAttachment {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// key：dsl内用户输入的img_key
  public var images: Dictionary<String,LarkNCExtensionPB_Entities_RichTextElement.ImageProperty> = [:]

  /// key：dsl内用户输入的用户唯一标识（openUserId、email）
  public var atUsers: Dictionary<String,LarkNCExtensionPB_Entities_RichTextElement.AtProperty> = [:]

  /// key: dsl内用户输入的Option.value
  public var optionUsers: Dictionary<String,LarkNCExtensionPB_Entities_OpenCardAttachment.OptionUser> = [:]

  /// key: hash值，value: 摘要中占位符所对应的取值
  public var digestHashTags: Dictionary<String,String> = [:]

  /// image_key 列表
  public var imageKeys: [String] = []

  /// 根据 open_card_content 内容计算的 hash 值
  public var cardContentHash: String {
    get {return _cardContentHash ?? String()}
    set {_cardContentHash = newValue}
  }
  /// Returns true if `cardContentHash` has been explicitly set.
//  public var hasCardContentHash: Bool {return self._cardContentHash != nil}
  /// Clears the value of `cardContentHash`. Subsequent reads from it will return its default value.
//  public mutating func clearCardContentHash() {self._cardContentHash = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public struct OptionUser {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var userID: String {
      get {return _userID ?? String()}
      set {_userID = newValue}
    }
    /// Returns true if `userID` has been explicitly set.
//    public var hasUserID: Bool {return self._userID != nil}
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
//    public mutating func clearUserID() {self._userID = nil}

    /// localized或匿名后的人名、昵称
    public var content: String {
      get {return _content ?? String()}
      set {_content = newValue}
    }
    /// Returns true if `content` has been explicitly set.
    public var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
    public mutating func clearContent() {self._content = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _userID: String? = nil
    fileprivate var _content: String? = nil
  }

  public init() {}

  fileprivate var _cardContentHash: String? = nil
}

public struct LarkNCExtensionPB_Entities_CardActionPacket {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 客户端请求的cid,由服务器指定
  public var cid: String {
    get {return _storage._cid ?? String()}
    set {_uniqueStorage()._cid = newValue}
  }
  /// Returns true if `cid` has been explicitly set.
//  public var hasCid: Bool {return _storage._cid != nil}
  /// Clears the value of `cid`. Subsequent reads from it will return its default value.
//  public mutating func clearCid() {_uniqueStorage()._cid = nil}

  public var parameters: LarkNCExtensionPB_Entities_CardAction.Parameters {
    get {return _storage._parameters ?? LarkNCExtensionPB_Entities_CardAction.Parameters()}
    set {_uniqueStorage()._parameters = newValue}
  }
  /// Returns true if `parameters` has been explicitly set.
  public var hasParameters: Bool {return _storage._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
//  public mutating func clearParameters() {_uniqueStorage()._parameters = nil}

  /// 用于放置需要放置的东西
  public var payload: Data {
    get {return _storage._payload ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  public var hasPayload: Bool {return _storage._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
//  public mutating func clearPayload() {_uniqueStorage()._payload = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct LarkNCExtensionPB_Entities_CardAction {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var url: String {
    get {return _storage._url ?? String()}
    set {_uniqueStorage()._url = newValue}
  }
  /// Returns true if `url` has been explicitly set.
  public var hasURL: Bool {return _storage._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
//  public mutating func clearURL() {_uniqueStorage()._url = nil}

  public var method: LarkNCExtensionPB_Entities_CardAction.Method {
    get {return _storage._method ?? .unknownMethod}
    set {_uniqueStorage()._method = newValue}
  }
  /// Returns true if `method` has been explicitly set.
//  public var hasMethod: Bool {return _storage._method != nil}
  /// Clears the value of `method`. Subsequent reads from it will return its default value.
//  public mutating func clearMethod() {_uniqueStorage()._method = nil}

  public var requiredParameters: LarkNCExtensionPB_Entities_CardAction.RequiredParameters {
    get {return _storage._requiredParameters ?? LarkNCExtensionPB_Entities_CardAction.RequiredParameters()}
    set {_uniqueStorage()._requiredParameters = newValue}
  }
  /// Returns true if `requiredParameters` has been explicitly set.
//  public var hasRequiredParameters: Bool {return _storage._requiredParameters != nil}
  /// Clears the value of `requiredParameters`. Subsequent reads from it will return its default value.
//  public mutating func clearRequiredParameters() {_uniqueStorage()._requiredParameters = nil}

  /// GET POST 使用
  public var parameters: LarkNCExtensionPB_Entities_CardAction.Parameters {
    get {return _storage._parameters ?? LarkNCExtensionPB_Entities_CardAction.Parameters()}
    set {_uniqueStorage()._parameters = newValue}
  }
  /// Returns true if `parameters` has been explicitly set.
  public var hasParameters: Bool {return _storage._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
//  public mutating func clearParameters() {_uniqueStorage()._parameters = nil}

  /// LARK_COMMAND 使用,用于定位服务lb, 丢到Packet.cmd中
  public var cmd: LarkNCExtensionPB_Improto_Command {
    get {return _storage._cmd ?? .ack}
    set {_uniqueStorage()._cmd = newValue}
  }
  /// Returns true if `cmd` has been explicitly set.
//  public var hasCmd: Bool {return _storage._cmd != nil}
  /// Clears the value of `cmd`. Subsequent reads from it will return its default value.
//  public mutating func clearCmd() {_uniqueStorage()._cmd = nil}

  /// LARK_COMMAND 通用packet, 反序列化后丢到Packet.payload中
  public var packet: LarkNCExtensionPB_Entities_CardActionPacket {
    get {return _storage._packet ?? LarkNCExtensionPB_Entities_CardActionPacket()}
    set {_uniqueStorage()._packet = newValue}
  }
  /// Returns true if `packet` has been explicitly set.
  public var hasPacket: Bool {return _storage._packet != nil}
  /// Clears the value of `packet`. Subsequent reads from it will return its default value.
//  public mutating func clearPacket() {_uniqueStorage()._packet = nil}

  /// OPEN_URL使用
  public var openURL: LarkNCExtensionPB_Entities_CardAction.Url {
    get {return _storage._openURL ?? LarkNCExtensionPB_Entities_CardAction.Url()}
    set {_uniqueStorage()._openURL = newValue}
  }
  /// Returns true if `openURL` has been explicitly set.
//  public var hasOpenURL: Bool {return _storage._openURL != nil}
  /// Clears the value of `openURL`. Subsequent reads from it will return its default value.
//  public mutating func clearOpenURL() {_uniqueStorage()._openURL = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum Method: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownMethod // = 0
    case get // = 1
    case post // = 2
    case larkCommand // = 3
    case openURL // = 4

    public init() {
      self = .unknownMethod
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownMethod
      case 1: self = .get
      case 2: self = .post
      case 3: self = .larkCommand
      case 4: self = .openURL
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownMethod: return 0
      case .get: return 1
      case .post: return 2
      case .larkCommand: return 3
      case .openURL: return 4
      }
    }

  }

  public struct Url {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// common use
    public var url: String {
      get {return _url ?? String()}
      set {_url = newValue}
    }
    /// Returns true if `url` has been explicitly set.
    public var hasURL: Bool {return self._url != nil}
    /// Clears the value of `url`. Subsequent reads from it will return its default value.
//    public mutating func clearURL() {self._url = nil}

    public var iosURL: String {
      get {return _iosURL ?? String()}
      set {_iosURL = newValue}
    }
    /// Returns true if `iosURL` has been explicitly set.
    public var hasIosURL: Bool {return self._iosURL != nil}
    /// Clears the value of `iosURL`. Subsequent reads from it will return its default value.
//    public mutating func clearIosURL() {self._iosURL = nil}

    public var androidURL: String {
      get {return _androidURL ?? String()}
      set {_androidURL = newValue}
    }
    /// Returns true if `androidURL` has been explicitly set.
//    public var hasAndroidURL: Bool {return self._androidURL != nil}
    /// Clears the value of `androidURL`. Subsequent reads from it will return its default value.
//    public mutating func clearAndroidURL() {self._androidURL = nil}

    public var pcURL: String {
      get {return _pcURL ?? String()}
      set {_pcURL = newValue}
    }
    /// Returns true if `pcURL` has been explicitly set.
//    public var hasPcURL: Bool {return self._pcURL != nil}
    /// Clears the value of `pcURL`. Subsequent reads from it will return its default value.
//    public mutating func clearPcURL() {self._pcURL = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _url: String? = nil
    fileprivate var _iosURL: String? = nil
    fileprivate var _androidURL: String? = nil
    fileprivate var _pcURL: String? = nil
  }

  public struct RequiredParameters {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var needUserInfo: Bool {
      get {return _needUserInfo ?? false}
      set {_needUserInfo = newValue}
    }
    /// Returns true if `needUserInfo` has been explicitly set.
//    public var hasNeedUserInfo: Bool {return self._needUserInfo != nil}
    /// Clears the value of `needUserInfo`. Subsequent reads from it will return its default value.
//    public mutating func clearNeedUserInfo() {self._needUserInfo = nil}

    public var needMessageInfo: Bool {
      get {return _needMessageInfo ?? false}
      set {_needMessageInfo = newValue}
    }
    /// Returns true if `needMessageInfo` has been explicitly set.
//    public var hasNeedMessageInfo: Bool {return self._needMessageInfo != nil}
    /// Clears the value of `needMessageInfo`. Subsequent reads from it will return its default value.
//    public mutating func clearNeedMessageInfo() {self._needMessageInfo = nil}

    public var needUserID: Bool {
      get {return _needUserID ?? false}
      set {_needUserID = newValue}
    }
    /// Returns true if `needUserID` has been explicitly set.
//    public var hasNeedUserID: Bool {return self._needUserID != nil}
    /// Clears the value of `needUserID`. Subsequent reads from it will return its default value.
//    public mutating func clearNeedUserID() {self._needUserID = nil}

    public var needMessageID: Bool {
      get {return _needMessageID ?? false}
      set {_needMessageID = newValue}
    }
    /// Returns true if `needMessageID` has been explicitly set.
//    public var hasNeedMessageID: Bool {return self._needMessageID != nil}
    /// Clears the value of `needMessageID`. Subsequent reads from it will return its default value.
//    public mutating func clearNeedMessageID() {self._needMessageID = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _needUserInfo: Bool? = nil
    fileprivate var _needMessageInfo: Bool? = nil
    fileprivate var _needUserID: Bool? = nil
    fileprivate var _needMessageID: Bool? = nil
  }

  public struct UserInfo {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var userOpenID: String {
      get {return _userOpenID ?? String()}
      set {_userOpenID = newValue}
    }
    /// Returns true if `userOpenID` has been explicitly set.
//    public var hasUserOpenID: Bool {return self._userOpenID != nil}
    /// Clears the value of `userOpenID`. Subsequent reads from it will return its default value.
//    public mutating func clearUserOpenID() {self._userOpenID = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _userOpenID: String? = nil
  }

  public struct MessageInfo {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var messageOpenID: String {
      get {return _messageOpenID ?? String()}
      set {_messageOpenID = newValue}
    }
    /// Returns true if `messageOpenID` has been explicitly set.
//    public var hasMessageOpenID: Bool {return self._messageOpenID != nil}
    /// Clears the value of `messageOpenID`. Subsequent reads from it will return its default value.
//    public mutating func clearMessageOpenID() {self._messageOpenID = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _messageOpenID: String? = nil
  }

  public struct Parameters {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// 服务端带过来的数据
    public var parameters: Dictionary<String,String> {
      get {return _storage._parameters}
      set {_uniqueStorage()._parameters = newValue}
    }

    /// 调用 oapi 或者本地方法填充字段
    public var userInfo: LarkNCExtensionPB_Entities_CardAction.UserInfo {
      get {return _storage._userInfo ?? LarkNCExtensionPB_Entities_CardAction.UserInfo()}
      set {_uniqueStorage()._userInfo = newValue}
    }
    /// Returns true if `userInfo` has been explicitly set.
    public var hasUserInfo: Bool {return _storage._userInfo != nil}
    /// Clears the value of `userInfo`. Subsequent reads from it will return its default value.
//    public mutating func clearUserInfo() {_uniqueStorage()._userInfo = nil}

    public var messageInfo: LarkNCExtensionPB_Entities_CardAction.MessageInfo {
      get {return _storage._messageInfo ?? LarkNCExtensionPB_Entities_CardAction.MessageInfo()}
      set {_uniqueStorage()._messageInfo = newValue}
    }
    /// Returns true if `messageInfo` has been explicitly set.
//    public var hasMessageInfo: Bool {return _storage._messageInfo != nil}
    /// Clears the value of `messageInfo`. Subsequent reads from it will return its default value.
//    public mutating func clearMessageInfo() {_uniqueStorage()._messageInfo = nil}

    public var userID: String {
      get {return _storage._userID ?? String()}
      set {_uniqueStorage()._userID = newValue}
    }
    /// Returns true if `userID` has been explicitly set.
//    public var hasUserID: Bool {return _storage._userID != nil}
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
//    public mutating func clearUserID() {_uniqueStorage()._userID = nil}

    public var messageID: String {
      get {return _storage._messageID ?? String()}
      set {_uniqueStorage()._messageID = newValue}
    }
    /// Returns true if `messageID` has been explicitly set.
    public var hasMessageID: Bool {return _storage._messageID != nil}
    /// Clears the value of `messageID`. Subsequent reads from it will return its default value.
//    public mutating func clearMessageID() {_uniqueStorage()._messageID = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_CardAction.Method: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_RichTextElement {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var tag: LarkNCExtensionPB_Entities_RichTextElement.Tag {
    get {return _tag ?? .unknownTag}
    set {_tag = newValue}
  }
  /// Returns true if `tag` has been explicitly set.
  public var hasTag: Bool {return self._tag != nil}
  /// Clears the value of `tag`. Subsequent reads from it will return its default value.
//  public mutating func clearTag() {self._tag = nil}

  /// 目前style支持: fontSize, color, textAlign
  public var style: Dictionary<String,String> = [:]

  /// ParagraphPropery, FigureProperty, TextProperty, AnchorProperty, BoldProperty, ItalicProperty, UnderlineProperty, AtProperty, ImageProperty
  public var property: Data {
    get {return _property ?? LarkHTTP.Internal.emptyData}
    set {_property = newValue}
  }
  /// Returns true if `property` has been explicitly set.
  public var hasProperty: Bool {return self._property != nil}
  /// Clears the value of `property`. Subsequent reads from it will return its default value.
//  public mutating func clearProperty() {self._property = nil}

  public var childIds: [String] = []

  public var styleKeys: [String] = []

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum Tag: LarkHTTP.Enum {
    public typealias RawValue = Int

    /// 未知标签
    case unknownTag // = 0

    /// 文本标签
    case text // = 1

    /// 图片标签
    case img // = 2

    /// 段落(paragragh)标签,Container类型
    case p // = 3

    /// 图集标签,Container类型
    case figure // = 4

    /// at某人所用标签,lark特化
    case at // = 5

    /// 链接(anchor)标签
    case a // = 6

    /// 粗体(bold)标签
    case b // = 7

    /// 斜体(italic)标签
    case i // = 8

    /// 下划线(underline)标签
    case u // = 9

    /// 表情标签
    case emotion // = 10

    /// 按钮标签
    case button // = 11

    /// 单选多选容器标签
    case select // = 12

    /// 投票选项标签,lark特化
    case progressSelectOption // = 13

    /// div标签
    case div // = 14

    /// 承载不同Text的容器
    case textableArea // = 15

    /// 国际化日期展示控件
    case time // = 16

    /// 各端用于跳转能力的容器
    case link // = 17

    /// 视频(media)标签
    case media // = 18

    /// 消息卡片新增下拉列表选项
    case selectmenu // = 19

    /// 消息卡片新增OverflowMenu
    case overflowmenu // = 20

    /// 消息卡片新增DatePicker
    case datepicker // = 21

    /// 给Docs用的容器标签
    case docs // = 22

    /// 一级标题
    case h1 // = 23

    /// 二级标题
    case h2 // = 24

    /// 三级标题
    case h3 // = 25

    /// 无序列表
    case ul // = 26

    /// 有序列表
    case ol // = 27

    /// 列表子项目
    case li // = 28

    /// 引用
    case quote // = 29

    /// 行内代码
    case code // = 30

    /// 代码块
    case codeBlock // = 31

    /// 分割线 horizontal rule
    case hr // = 32

    /// 消息卡片TimePicker
    case timepicker // = 33

    /// 消息卡片TimePicker
    case datetimepicker // = 34

    /// Reaction 表情
    case reaction // = 35

    ///提及类型
    case mention // = 36

    public init() {
      self = .unknownTag
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownTag
      case 1: self = .text
      case 2: self = .img
      case 3: self = .p
      case 4: self = .figure
      case 5: self = .at
      case 6: self = .a
      case 7: self = .b
      case 8: self = .i
      case 9: self = .u
      case 10: self = .emotion
      case 11: self = .button
      case 12: self = .select
      case 13: self = .progressSelectOption
      case 14: self = .div
      case 15: self = .textableArea
      case 16: self = .time
      case 17: self = .link
      case 18: self = .media
      case 19: self = .selectmenu
      case 20: self = .overflowmenu
      case 21: self = .datepicker
      case 22: self = .docs
      case 23: self = .h1
      case 24: self = .h2
      case 25: self = .h3
      case 26: self = .ul
      case 27: self = .ol
      case 28: self = .li
      case 29: self = .quote
      case 30: self = .code
      case 31: self = .codeBlock
      case 32: self = .hr
      case 33: self = .timepicker
      case 34: self = .datetimepicker
      case 35: self = .reaction
      case 36: self = .mention
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownTag: return 0
      case .text: return 1
      case .img: return 2
      case .p: return 3
      case .figure: return 4
      case .at: return 5
      case .a: return 6
      case .b: return 7
      case .i: return 8
      case .u: return 9
      case .emotion: return 10
      case .button: return 11
      case .select: return 12
      case .progressSelectOption: return 13
      case .div: return 14
      case .textableArea: return 15
      case .time: return 16
      case .link: return 17
      case .media: return 18
      case .selectmenu: return 19
      case .overflowmenu: return 20
      case .datepicker: return 21
      case .docs: return 22
      case .h1: return 23
      case .h2: return 24
      case .h3: return 25
      case .ul: return 26
      case .ol: return 27
      case .li: return 28
      case .quote: return 29
      case .code: return 30
      case .codeBlock: return 31
      case .hr: return 32
      case .timepicker: return 33
      case .datetimepicker: return 34
      case .reaction: return 35
      case .mention: return 36
      }
    }

  }

  /// 段落容器
  public struct ParagraphProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}
  }

  /// 图集容器
  public struct FigureProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}
  }

  /// 文本
  public struct TextProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var content: String {
      get {return _content ?? String()}
      set {_content = newValue}
    }
    /// Returns true if `content` has been explicitly set.
    public var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
    public mutating func clearContent() {self._content = nil}

    public var i18NKey: String {
      get {return _i18NKey ?? String()}
      set {_i18NKey = newValue}
    }
    /// Returns true if `i18NKey` has been explicitly set.
    public var hasI18NKey: Bool {return self._i18NKey != nil}
    /// Clears the value of `i18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearI18NKey() {self._i18NKey = nil}

    public var numberOfLines: Int32 {
      get {return _numberOfLines ?? 0}
      set {_numberOfLines = newValue}
    }
    /// Returns true if `numberOfLines` has been explicitly set.
//    public var hasNumberOfLines: Bool {return self._numberOfLines != nil}
    /// Clears the value of `numberOfLines`. Subsequent reads from it will return its default value.
//    public mutating func clearNumberOfLines() {self._numberOfLines = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _content: String? = nil
    fileprivate var _i18NKey: String? = nil
    fileprivate var _numberOfLines: Int32? = nil
  }

  /// 斜体
  public struct ItalicProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var content: String {
      get {return _content ?? String()}
      set {_content = newValue}
    }
    /// Returns true if `content` has been explicitly set.
    public var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
    public mutating func clearContent() {self._content = nil}

    public var i18NKey: String {
      get {return _i18NKey ?? String()}
      set {_i18NKey = newValue}
    }
    /// Returns true if `i18NKey` has been explicitly set.
    public var hasI18NKey: Bool {return self._i18NKey != nil}
    /// Clears the value of `i18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearI18NKey() {self._i18NKey = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _content: String? = nil
    fileprivate var _i18NKey: String? = nil
  }

  /// 粗体
  public struct BoldProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var content: String {
      get {return _content ?? String()}
      set {_content = newValue}
    }
    /// Returns true if `content` has been explicitly set.
    public var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
    public mutating func clearContent() {self._content = nil}

    public var i18NKey: String {
      get {return _i18NKey ?? String()}
      set {_i18NKey = newValue}
    }
    /// Returns true if `i18NKey` has been explicitly set.
    public var hasI18NKey: Bool {return self._i18NKey != nil}
    /// Clears the value of `i18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearI18NKey() {self._i18NKey = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _content: String? = nil
    fileprivate var _i18NKey: String? = nil
  }

  /// 下划线
  public struct UnderlineProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var content: String {
      get {return _content ?? String()}
      set {_content = newValue}
    }
    /// Returns true if `content` has been explicitly set.
    public var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
    public mutating func clearContent() {self._content = nil}

    public var i18NKey: String {
      get {return _i18NKey ?? String()}
      set {_i18NKey = newValue}
    }
    /// Returns true if `i18NKey` has been explicitly set.
    public var hasI18NKey: Bool {return self._i18NKey != nil}
    /// Clears the value of `i18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearI18NKey() {self._i18NKey = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _content: String? = nil
    fileprivate var _i18NKey: String? = nil
  }

  /// 超链接
  public struct AnchorProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var href: String {
      get {return _href ?? String()}
      set {_href = newValue}
    }
    /// Returns true if `href` has been explicitly set.
    public var hasHref: Bool {return self._href != nil}
    /// Clears the value of `href`. Subsequent reads from it will return its default value.
//    public mutating func clearHref() {self._href = nil}

    public var content: String {
      get {return _content ?? String()}
      set {_content = newValue}
    }
    /// Returns true if `content` has been explicitly set.
    public var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
    public mutating func clearContent() {self._content = nil}

    /// 1.9.1的PC和Android没有区分href和content，故上两个字段都当作url使用
    public var textContent: String {
      get {return _textContent ?? String()}
      set {_textContent = newValue}
    }
    /// Returns true if `textContent` has been explicitly set.
    public var hasTextContent: Bool {return self._textContent != nil}
    /// Clears the value of `textContent`. Subsequent reads from it will return its default value.
//    public mutating func clearTextContent() {self._textContent = nil}

    ///当前链接是否是doc链接，客户端依据这个渲染
    public var specialURL: LarkNCExtensionPB_Entities_SpecialURL {
      get {return _specialURL ?? .unknownURL}
      set {_specialURL = newValue}
    }
    /// Returns true if `specialURL` has been explicitly set.
//    public var hasSpecialURL: Bool {return self._specialURL != nil}
    /// Clears the value of `specialURL`. Subsequent reads from it will return its default value.
//    public mutating func clearSpecialURL() {self._specialURL = nil}

    public var i18NKey: String {
      get {return _i18NKey ?? String()}
      set {_i18NKey = newValue}
    }
    /// Returns true if `i18NKey` has been explicitly set.
    public var hasI18NKey: Bool {return self._i18NKey != nil}
    /// Clears the value of `i18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearI18NKey() {self._i18NKey = nil}

    public var iosHref: String {
      get {return _iosHref ?? String()}
      set {_iosHref = newValue}
    }
    /// Returns true if `iosHref` has been explicitly set.
    public var hasIosHref: Bool {return self._iosHref != nil}
    /// Clears the value of `iosHref`. Subsequent reads from it will return its default value.
//    public mutating func clearIosHref() {self._iosHref = nil}

    public var androidHref: String {
      get {return _androidHref ?? String()}
      set {_androidHref = newValue}
    }
    /// Returns true if `androidHref` has been explicitly set.
//    public var hasAndroidHref: Bool {return self._androidHref != nil}
    /// Clears the value of `androidHref`. Subsequent reads from it will return its default value.
//    public mutating func clearAndroidHref() {self._androidHref = nil}

    public var pcHref: String {
      get {return _pcHref ?? String()}
      set {_pcHref = newValue}
    }
    /// Returns true if `pcHref` has been explicitly set.
//    public var hasPcHref: Bool {return self._pcHref != nil}
    /// Clears the value of `pcHref`. Subsequent reads from it will return its default value.
//    public mutating func clearPcHref() {self._pcHref = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _href: String? = nil
    fileprivate var _content: String? = nil
    fileprivate var _textContent: String? = nil
    fileprivate var _specialURL: LarkNCExtensionPB_Entities_SpecialURL? = nil
    fileprivate var _i18NKey: String? = nil
    fileprivate var _iosHref: String? = nil
    fileprivate var _androidHref: String? = nil
    fileprivate var _pcHref: String? = nil
  }

  /// At
  public struct AtProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var userID: String {
      get {return _userID ?? String()}
      set {_userID = newValue}
    }
    /// Returns true if `userID` has been explicitly set.
//    public var hasUserID: Bool {return self._userID != nil}
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
//    public mutating func clearUserID() {self._userID = nil}

    public var content: String {
      get {return _content ?? String()}
      set {_content = newValue}
    }
    /// Returns true if `content` has been explicitly set.
    public var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
    public mutating func clearContent() {self._content = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _userID: String? = nil
    fileprivate var _content: String? = nil
  }

  /// mention
  public struct MentionProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var item: LarkNCExtensionPB_Entities_RichTextElement.MentionItem {
      get {return _storage._item ?? LarkNCExtensionPB_Entities_RichTextElement.MentionItem()}
      set {_uniqueStorage()._item = newValue}
    }
    /// Returns true if `item` has been explicitly set.
    public var hasItem: Bool {return _storage._item != nil}
    /// Clears the value of `item`. Subsequent reads from it will return its default value.
//    public mutating func clearItem() {_uniqueStorage()._item = nil}

    public var content: String {
      get {return _storage._content ?? String()}
      set {_uniqueStorage()._content = newValue}
    }
    /// Returns true if `content` has been explicitly set.
    public var hasContent: Bool {return _storage._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
    public mutating func clearContent() {_uniqueStorage()._content = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct MentionItem {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    public var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
//    public mutating func clearID() {self._id = nil}

    public var type: LarkNCExtensionPB_Entities_RichTextElement.MentionItem.MentionType {
      get {return _type ?? .unknownMentionType}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {self._type = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public enum MentionType: LarkHTTP.Enum {
      public typealias RawValue = Int
      case unknownMentionType // = 0

      ///lark 套件内的hash tag，项目为pano
      case hashTag // = 1

      ///lark moments hash tag type
      case momentsHashtag // = 2

      public init() {
        self = .unknownMentionType
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknownMentionType
        case 1: self = .hashTag
        case 2: self = .momentsHashtag
        default: return nil
        }
      }

      public var rawValue: Int {
        switch self {
        case .unknownMentionType: return 0
        case .hashTag: return 1
        case .momentsHashtag: return 2
        }
      }

    }

    public init() {}

    fileprivate var _id: String? = nil
    fileprivate var _type: LarkNCExtensionPB_Entities_RichTextElement.MentionItem.MentionType? = nil
  }

  /// Img
  /// post image 精简文档 https://bytedance.feishu.cn/docs/doccn3MMBJ2dzQyXE1QVE9OQ9dd#
  public struct ImageProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// 客户端发的时候需要带上图片对应的 token, 服务端回的本身也需要包含此属性, 端上依赖
    public var token: String {
      get {return _storage._token ?? String()}
      set {_uniqueStorage()._token = newValue}
    }
    /// Returns true if `token` has been explicitly set.
    public var hasToken: Bool {return _storage._token != nil}
    /// Clears the value of `token`. Subsequent reads from it will return its default value.
//    public mutating func clearToken() {_uniqueStorage()._token = nil}

    public var alt: String {
      get {return _storage._alt ?? String()}
      set {_uniqueStorage()._alt = newValue}
    }
    /// Returns true if `alt` has been explicitly set.
    public var hasAlt: Bool {return _storage._alt != nil}
    /// Clears the value of `alt`. Subsequent reads from it will return its default value.
//    public mutating func clearAlt() {_uniqueStorage()._alt = nil}

    public var altI18NKey: String {
      get {return _storage._altI18NKey ?? String()}
      set {_uniqueStorage()._altI18NKey = newValue}
    }
    /// Returns true if `altI18NKey` has been explicitly set.
//    public var hasAltI18NKey: Bool {return _storage._altI18NKey != nil}
    /// Clears the value of `altI18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearAltI18NKey() {_uniqueStorage()._altI18NKey = nil}

    /// 图片是否可点击预览
    public var imgCanPreview: Bool {
      get {return _storage._imgCanPreview ?? false}
      set {_uniqueStorage()._imgCanPreview = newValue}
    }
    /// Returns true if `imgCanPreview` has been explicitly set.
//    public var hasImgCanPreview: Bool {return _storage._imgCanPreview != nil}
    /// Clears the value of `imgCanPreview`. Subsequent reads from it will return its default value.
//    public mutating func clearImgCanPreview() {_uniqueStorage()._imgCanPreview = nil}

    /// to deprecated, post image 精简稳定后废弃
    public var cipher: LarkNCExtensionPB_Entities_Cipher {
      get {return _storage._cipher ?? LarkNCExtensionPB_Entities_Cipher()}
      set {_uniqueStorage()._cipher = newValue}
    }
    /// Returns true if `cipher` has been explicitly set.
//    public var hasCipher: Bool {return _storage._cipher != nil}
    /// Clears the value of `cipher`. Subsequent reads from it will return its default value.
//    public mutating func clearCipher() {_uniqueStorage()._cipher = nil}

    /// 历史原因这里只有密钥没有加密算法, 换用统一加密可能会换算法, 这里需要兼容, 因此补充type 字段
    public var cipherType: LarkNCExtensionPB_Entities_Crypto.TypeEnum {
      get {return _storage._cipherType ?? .unknown}
      set {_uniqueStorage()._cipherType = newValue}
    }
    /// Returns true if `cipherType` has been explicitly set.
//    public var hasCipherType: Bool {return _storage._cipherType != nil}
    /// Clears the value of `cipherType`. Subsequent reads from it will return its default value.
//    public mutating func clearCipherType() {_uniqueStorage()._cipherType = nil}

    public var originKey: String {
      get {return _storage._originKey ?? String()}
      set {_uniqueStorage()._originKey = newValue}
    }
    /// Returns true if `originKey` has been explicitly set.
//    public var hasOriginKey: Bool {return _storage._originKey != nil}
    /// Clears the value of `originKey`. Subsequent reads from it will return its default value.
//    public mutating func clearOriginKey() {_uniqueStorage()._originKey = nil}

    /// 图片所属 fs_unit
    public var fsUnit: String {
      get {return _storage._fsUnit ?? String()}
      set {_uniqueStorage()._fsUnit = newValue}
    }
    /// Returns true if `fsUnit` has been explicitly set.
    public var hasFsUnit: Bool {return _storage._fsUnit != nil}
    /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//    public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}

    /// 只包含cdn的前缀，Client直接拼key上去用
    public var urls: [String] {
      get {return _storage._urls}
      set {_uniqueStorage()._urls = newValue}
    }

    public var middleKey: String {
      get {return _storage._middleKey ?? String()}
      set {_uniqueStorage()._middleKey = newValue}
    }
    /// Returns true if `middleKey` has been explicitly set.
//    public var hasMiddleKey: Bool {return _storage._middleKey != nil}
    /// Clears the value of `middleKey`. Subsequent reads from it will return its default value.
//    public mutating func clearMiddleKey() {_uniqueStorage()._middleKey = nil}

    public var thumbKey: String {
      get {return _storage._thumbKey ?? String()}
      set {_uniqueStorage()._thumbKey = newValue}
    }
    /// Returns true if `thumbKey` has been explicitly set.
//    public var hasThumbKey: Bool {return _storage._thumbKey != nil}
    /// Clears the value of `thumbKey`. Subsequent reads from it will return its default value.
//    public mutating func clearThumbKey() {_uniqueStorage()._thumbKey = nil}

    public var originWidth: Int32 {
      get {return _storage._originWidth ?? 0}
      set {_uniqueStorage()._originWidth = newValue}
    }
    /// Returns true if `originWidth` has been explicitly set.
    public var hasOriginWidth: Bool {return _storage._originWidth != nil}
    /// Clears the value of `originWidth`. Subsequent reads from it will return its default value.
//    public mutating func clearOriginWidth() {_uniqueStorage()._originWidth = nil}

    public var originHeight: Int32 {
      get {return _storage._originHeight ?? 0}
      set {_uniqueStorage()._originHeight = newValue}
    }
    /// Returns true if `originHeight` has been explicitly set.
    public var hasOriginHeight: Bool {return _storage._originHeight != nil}
    /// Clears the value of `originHeight`. Subsequent reads from it will return its default value.
//    public mutating func clearOriginHeight() {_uniqueStorage()._originHeight = nil}

    /// 新版本使用, 采用 webp
    public var thumbnailWebp: LarkNCExtensionPB_Entities_Image {
      get {return _storage._thumbnailWebp ?? LarkNCExtensionPB_Entities_Image()}
      set {_uniqueStorage()._thumbnailWebp = newValue}
    }
    /// Returns true if `thumbnailWebp` has been explicitly set.
//    public var hasThumbnailWebp: Bool {return _storage._thumbnailWebp != nil}
    /// Clears the value of `thumbnailWebp`. Subsequent reads from it will return its default value.
//    public mutating func clearThumbnailWebp() {_uniqueStorage()._thumbnailWebp = nil}

    /// 新版本使用, 采用 webp
    public var middleWebp: LarkNCExtensionPB_Entities_Image {
      get {return _storage._middleWebp ?? LarkNCExtensionPB_Entities_Image()}
      set {_uniqueStorage()._middleWebp = newValue}
    }
    /// Returns true if `middleWebp` has been explicitly set.
//    public var hasMiddleWebp: Bool {return _storage._middleWebp != nil}
    /// Clears the value of `middleWebp`. Subsequent reads from it will return its default value.
//    public mutating func clearMiddleWebp() {_uniqueStorage()._middleWebp = nil}

    /// gif 转 mp4, 尺寸 middle, 编码h.264, 无需转换时nil
    public var middleMp4: LarkNCExtensionPB_Entities_Image {
      get {return _storage._middleMp4 ?? LarkNCExtensionPB_Entities_Image()}
      set {_uniqueStorage()._middleMp4 = newValue}
    }
    /// Returns true if `middleMp4` has been explicitly set.
//    public var hasMiddleMp4: Bool {return _storage._middleMp4 != nil}
    /// Clears the value of `middleMp4`. Subsequent reads from it will return its default value.
//    public mutating func clearMiddleMp4() {_uniqueStorage()._middleMp4 = nil}

    /// gif 转得的 mp4 封面
    public var cover: LarkNCExtensionPB_Entities_Image {
      get {return _storage._cover ?? LarkNCExtensionPB_Entities_Image()}
      set {_uniqueStorage()._cover = newValue}
    }
    /// Returns true if `cover` has been explicitly set.
    public var hasCover: Bool {return _storage._cover != nil}
    /// Clears the value of `cover`. Subsequent reads from it will return its default value.
//    public mutating func clearCover() {_uniqueStorage()._cover = nil}

    /// 17 为消息精简新增, 预期消息精简后, 1～16 只保留仅卡片消息使用的alt, alt_i18n_key, img_can_preview
    public var image: LarkNCExtensionPB_Entities_ImageSetV2 {
      get {return _storage._image ?? LarkNCExtensionPB_Entities_ImageSetV2()}
      set {_uniqueStorage()._image = newValue}
    }
    /// Returns true if `image` has been explicitly set.
    public var hasImage: Bool {return _storage._image != nil}
    /// Clears the value of `image`. Subsequent reads from it will return its default value.
//    public mutating func clearImage() {_uniqueStorage()._image = nil}

    /// 自定义图片宽度
    public var customWidth: Int32 {
      get {return _storage._customWidth ?? 0}
      set {_uniqueStorage()._customWidth = newValue}
    }
    /// Returns true if `customWidth` has been explicitly set.
    public var hasCustomWidth: Bool {return _storage._customWidth != nil}
    /// Clears the value of `customWidth`. Subsequent reads from it will return its default value.
//    public mutating func clearCustomWidth() {_uniqueStorage()._customWidth = nil}

    /// 发送方是否选择以原图发送
    public var isOriginSource: Bool {
      get {return _storage._isOriginSource ?? false}
      set {_uniqueStorage()._isOriginSource = newValue}
    }
    /// Returns true if `isOriginSource` has been explicitly set.
//    public var hasIsOriginSource: Bool {return _storage._isOriginSource != nil}
    /// Clears the value of `isOriginSource`. Subsequent reads from it will return its default value.
//    public mutating func clearIsOriginSource() {_uniqueStorage()._isOriginSource = nil}

    /// 目前仅 is_origin_source=true 时有效(用以下载时客户端显示原图大小)
    public var originSize: UInt64 {
      get {return _storage._originSize ?? 0}
      set {_uniqueStorage()._originSize = newValue}
    }
    /// Returns true if `originSize` has been explicitly set.
//    public var hasOriginSize: Bool {return _storage._originSize != nil}
    /// Clears the value of `originSize`. Subsequent reads from it will return its default value.
//    public mutating func clearOriginSize() {_uniqueStorage()._originSize = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct ReactionProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var key: String {
      get {return _key ?? String()}
      set {_key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return self._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
//    public mutating func clearKey() {self._key = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _key: String? = nil
  }

  public struct EmotionProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var key: String {
      get {return _key ?? String()}
      set {_key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return self._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
//    public mutating func clearKey() {self._key = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _key: String? = nil
  }

  /// Button
  public struct ButtonProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// action对应的id
    public var actionID: String {
      get {return _storage._actionID ?? String()}
      set {_uniqueStorage()._actionID = newValue}
    }
    /// Returns true if `actionID` has been explicitly set.
//    public var hasActionID: Bool {return _storage._actionID != nil}
    /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
//    public mutating func clearActionID() {_uniqueStorage()._actionID = nil}

    public var disable: Bool {
      get {return _storage._disable ?? false}
      set {_uniqueStorage()._disable = newValue}
    }
    /// Returns true if `disable` has been explicitly set.
    public var hasDisable: Bool {return _storage._disable != nil}
    /// Clears the value of `disable`. Subsequent reads from it will return its default value.
//    public mutating func clearDisable() {_uniqueStorage()._disable = nil}

    public var active: Bool {
      get {return _storage._active ?? false}
      set {_uniqueStorage()._active = newValue}
    }
    /// Returns true if `active` has been explicitly set.
    public var hasActive: Bool {return _storage._active != nil}
    /// Clears the value of `active`. Subsequent reads from it will return its default value.
//    public mutating func clearActive() {_uniqueStorage()._active = nil}

    public var confirm: LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty {
      get {return _storage._confirm ?? LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty()}
      set {_uniqueStorage()._confirm = newValue}
    }
    /// Returns true if `confirm` has been explicitly set.
    public var hasConfirm: Bool {return _storage._confirm != nil}
    /// Clears the value of `confirm`. Subsequent reads from it will return its default value.
//    public mutating func clearConfirm() {_uniqueStorage()._confirm = nil}

    public var loading: LarkNCExtensionPB_Entities_RichTextElement.ButtonLoadingProperty {
      get {return _storage._loading ?? LarkNCExtensionPB_Entities_RichTextElement.ButtonLoadingProperty()}
      set {_uniqueStorage()._loading = newValue}
    }
    /// Returns true if `loading` has been explicitly set.
    public var hasLoading: Bool {return _storage._loading != nil}
    /// Clears the value of `loading`. Subsequent reads from it will return its default value.
//    public mutating func clearLoading() {_uniqueStorage()._loading = nil}

    public var mode: String {
      get {return _storage._mode ?? String()}
      set {_uniqueStorage()._mode = newValue}
    }
    /// Returns true if `mode` has been explicitly set.
    public var hasMode: Bool {return _storage._mode != nil}
    /// Clears the value of `mode`. Subsequent reads from it will return its default value.
//    public mutating func clearMode() {_uniqueStorage()._mode = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Button Confirm
  public struct ButtonConfirmProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var title: String {
      get {return _title ?? String()}
      set {_title = newValue}
    }
    /// Returns true if `title` has been explicitly set.
    public var hasTitle: Bool {return self._title != nil}
    /// Clears the value of `title`. Subsequent reads from it will return its default value.
//    public mutating func clearTitle() {self._title = nil}

    public var text: String {
      get {return _text ?? String()}
      set {_text = newValue}
    }
    /// Returns true if `text` has been explicitly set.
    public var hasText: Bool {return self._text != nil}
    /// Clears the value of `text`. Subsequent reads from it will return its default value.
    public mutating func clearText() {self._text = nil}

    public var confirm: String {
      get {return _confirm ?? String()}
      set {_confirm = newValue}
    }
    /// Returns true if `confirm` has been explicitly set.
    public var hasConfirm: Bool {return self._confirm != nil}
    /// Clears the value of `confirm`. Subsequent reads from it will return its default value.
//    public mutating func clearConfirm() {self._confirm = nil}

    public var dismiss: String {
      get {return _dismiss ?? String()}
      set {_dismiss = newValue}
    }
    /// Returns true if `dismiss` has been explicitly set.
    public var hasDismiss: Bool {return self._dismiss != nil}
    /// Clears the value of `dismiss`. Subsequent reads from it will return its default value.
//    public mutating func clearDismiss() {self._dismiss = nil}

    public var titleI18NKey: String {
      get {return _titleI18NKey ?? String()}
      set {_titleI18NKey = newValue}
    }
    /// Returns true if `titleI18NKey` has been explicitly set.
    public var hasTitleI18NKey: Bool {return self._titleI18NKey != nil}
    /// Clears the value of `titleI18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearTitleI18NKey() {self._titleI18NKey = nil}

    public var textI18NKey: String {
      get {return _textI18NKey ?? String()}
      set {_textI18NKey = newValue}
    }
    /// Returns true if `textI18NKey` has been explicitly set.
//    public var hasTextI18NKey: Bool {return self._textI18NKey != nil}
    /// Clears the value of `textI18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearTextI18NKey() {self._textI18NKey = nil}

    public var confirmI18NKey: String {
      get {return _confirmI18NKey ?? String()}
      set {_confirmI18NKey = newValue}
    }
    /// Returns true if `confirmI18NKey` has been explicitly set.
//    public var hasConfirmI18NKey: Bool {return self._confirmI18NKey != nil}
    /// Clears the value of `confirmI18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearConfirmI18NKey() {self._confirmI18NKey = nil}

    public var dismissI18NKey: String {
      get {return _dismissI18NKey ?? String()}
      set {_dismissI18NKey = newValue}
    }
    /// Returns true if `dismissI18NKey` has been explicitly set.
//    public var hasDismissI18NKey: Bool {return self._dismissI18NKey != nil}
    /// Clears the value of `dismissI18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearDismissI18NKey() {self._dismissI18NKey = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _title: String? = nil
    fileprivate var _text: String? = nil
    fileprivate var _confirm: String? = nil
    fileprivate var _dismiss: String? = nil
    fileprivate var _titleI18NKey: String? = nil
    fileprivate var _textI18NKey: String? = nil
    fileprivate var _confirmI18NKey: String? = nil
    fileprivate var _dismissI18NKey: String? = nil
  }

  /// Button Loading
  public struct ButtonLoadingProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var begin: String {
      get {return _begin ?? String()}
      set {_begin = newValue}
    }
    /// Returns true if `begin` has been explicitly set.
//    public var hasBegin: Bool {return self._begin != nil}
    /// Clears the value of `begin`. Subsequent reads from it will return its default value.
//    public mutating func clearBegin() {self._begin = nil}

    public var success: String {
      get {return _success ?? String()}
      set {_success = newValue}
    }
    /// Returns true if `success` has been explicitly set.
    public var hasSuccess: Bool {return self._success != nil}
    /// Clears the value of `success`. Subsequent reads from it will return its default value.
//    public mutating func clearSuccess() {self._success = nil}

    public var fail: String {
      get {return _fail ?? String()}
      set {_fail = newValue}
    }
    /// Returns true if `fail` has been explicitly set.
    public var hasFail: Bool {return self._fail != nil}
    /// Clears the value of `fail`. Subsequent reads from it will return its default value.
//    public mutating func clearFail() {self._fail = nil}

    public var beginI18NKey: String {
      get {return _beginI18NKey ?? String()}
      set {_beginI18NKey = newValue}
    }
    /// Returns true if `beginI18NKey` has been explicitly set.
//    public var hasBeginI18NKey: Bool {return self._beginI18NKey != nil}
    /// Clears the value of `beginI18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearBeginI18NKey() {self._beginI18NKey = nil}

    public var successI18NKey: String {
      get {return _successI18NKey ?? String()}
      set {_successI18NKey = newValue}
    }
    /// Returns true if `successI18NKey` has been explicitly set.
//    public var hasSuccessI18NKey: Bool {return self._successI18NKey != nil}
    /// Clears the value of `successI18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearSuccessI18NKey() {self._successI18NKey = nil}

    public var failI18NKey: String {
      get {return _failI18NKey ?? String()}
      set {_failI18NKey = newValue}
    }
    /// Returns true if `failI18NKey` has been explicitly set.
//    public var hasFailI18NKey: Bool {return self._failI18NKey != nil}
    /// Clears the value of `failI18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearFailI18NKey() {self._failI18NKey = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _begin: String? = nil
    fileprivate var _success: String? = nil
    fileprivate var _fail: String? = nil
    fileprivate var _beginI18NKey: String? = nil
    fileprivate var _successI18NKey: String? = nil
    fileprivate var _failI18NKey: String? = nil
  }

  public struct SelectProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var minPickNum: Int32 {
      get {return _minPickNum ?? 1}
      set {_minPickNum = newValue}
    }
    /// Returns true if `minPickNum` has been explicitly set.
//    public var hasMinPickNum: Bool {return self._minPickNum != nil}
    /// Clears the value of `minPickNum`. Subsequent reads from it will return its default value.
//    public mutating func clearMinPickNum() {self._minPickNum = nil}

    public var maxPickNum: Int32 {
      get {return _maxPickNum ?? 1}
      set {_maxPickNum = newValue}
    }
    /// Returns true if `maxPickNum` has been explicitly set.
//    public var hasMaxPickNum: Bool {return self._maxPickNum != nil}
    /// Clears the value of `maxPickNum`. Subsequent reads from it will return its default value.
//    public mutating func clearMaxPickNum() {self._maxPickNum = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _minPickNum: Int32? = nil
    fileprivate var _maxPickNum: Int32? = nil
  }

  public struct SelectMenuProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var type: LarkNCExtensionPB_Entities_RichTextElement.SelectMenuProperty.TypeEnum {
      get {return _storage._type ?? .unknown}
      set {_uniqueStorage()._type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    public var hasType: Bool {return _storage._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {_uniqueStorage()._type = nil}

    public var actionID: String {
      get {return _storage._actionID ?? String()}
      set {_uniqueStorage()._actionID = newValue}
    }
    /// Returns true if `actionID` has been explicitly set.
//    public var hasActionID: Bool {return _storage._actionID != nil}
    /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
//    public mutating func clearActionID() {_uniqueStorage()._actionID = nil}

    public var placeHolder: String {
      get {return _storage._placeHolder ?? String()}
      set {_uniqueStorage()._placeHolder = newValue}
    }
    /// Returns true if `placeHolder` has been explicitly set.
//    public var hasPlaceHolder: Bool {return _storage._placeHolder != nil}
    /// Clears the value of `placeHolder`. Subsequent reads from it will return its default value.
//    public mutating func clearPlaceHolder() {_uniqueStorage()._placeHolder = nil}

    public var placeHolderI18NKey: String {
      get {return _storage._placeHolderI18NKey ?? String()}
      set {_uniqueStorage()._placeHolderI18NKey = newValue}
    }
    /// Returns true if `placeHolderI18NKey` has been explicitly set.
//    public var hasPlaceHolderI18NKey: Bool {return _storage._placeHolderI18NKey != nil}
    /// Clears the value of `placeHolderI18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearPlaceHolderI18NKey() {_uniqueStorage()._placeHolderI18NKey = nil}

    public var initialOption: String {
      get {return _storage._initialOption ?? String()}
      set {_uniqueStorage()._initialOption = newValue}
    }
    /// Returns true if `initialOption` has been explicitly set.
//    public var hasInitialOption: Bool {return _storage._initialOption != nil}
    /// Clears the value of `initialOption`. Subsequent reads from it will return its default value.
//    public mutating func clearInitialOption() {_uniqueStorage()._initialOption = nil}

    public var options: [LarkNCExtensionPB_Entities_RichTextElement.MenuOption] {
      get {return _storage._options}
      set {_uniqueStorage()._options = newValue}
    }

    public var confirm: LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty {
      get {return _storage._confirm ?? LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty()}
      set {_uniqueStorage()._confirm = newValue}
    }
    /// Returns true if `confirm` has been explicitly set.
    public var hasConfirm: Bool {return _storage._confirm != nil}
    /// Clears the value of `confirm`. Subsequent reads from it will return its default value.
//    public mutating func clearConfirm() {_uniqueStorage()._confirm = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public enum TypeEnum: LarkHTTP.Enum {
      public typealias RawValue = Int
      case unknown // = 0

      /// select_static
      case `static` // = 1

      /// select_person
      case person // = 2

      public init() {
        self = .unknown
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .static
        case 2: self = .person
        default: return nil
        }
      }

      public var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .static: return 1
        case .person: return 2
        }
      }

    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct MenuOption {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var text: String {
      get {return _storage._text ?? String()}
      set {_uniqueStorage()._text = newValue}
    }
    /// Returns true if `text` has been explicitly set.
    public var hasText: Bool {return _storage._text != nil}
    /// Clears the value of `text`. Subsequent reads from it will return its default value.
    public mutating func clearText() {_uniqueStorage()._text = nil}

    public var textI18NKey: String {
      get {return _storage._textI18NKey ?? String()}
      set {_uniqueStorage()._textI18NKey = newValue}
    }
    /// Returns true if `textI18NKey` has been explicitly set.
//    public var hasTextI18NKey: Bool {return _storage._textI18NKey != nil}
    /// Clears the value of `textI18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearTextI18NKey() {_uniqueStorage()._textI18NKey = nil}

    public var value: String {
      get {return _storage._value ?? String()}
      set {_uniqueStorage()._value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    public var hasValue: Bool {return _storage._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
//    public mutating func clearValue() {_uniqueStorage()._value = nil}

    public var url: LarkNCExtensionPB_Entities_CardAction.Url {
      get {return _storage._url ?? LarkNCExtensionPB_Entities_CardAction.Url()}
      set {_uniqueStorage()._url = newValue}
    }
    /// Returns true if `url` has been explicitly set.
    public var hasURL: Bool {return _storage._url != nil}
    /// Clears the value of `url`. Subsequent reads from it will return its default value.
//    public mutating func clearURL() {_uniqueStorage()._url = nil}

    public var optionActionID: String {
      get {return _storage._optionActionID ?? String()}
      set {_uniqueStorage()._optionActionID = newValue}
    }
    /// Returns true if `optionActionID` has been explicitly set.
//    public var hasOptionActionID: Bool {return _storage._optionActionID != nil}
    /// Clears the value of `optionActionID`. Subsequent reads from it will return its default value.
//    public mutating func clearOptionActionID() {_uniqueStorage()._optionActionID = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct OverflowMenuProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var actionID: String {
      get {return _storage._actionID ?? String()}
      set {_uniqueStorage()._actionID = newValue}
    }
    /// Returns true if `actionID` has been explicitly set.
//    public var hasActionID: Bool {return _storage._actionID != nil}
    /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
//    public mutating func clearActionID() {_uniqueStorage()._actionID = nil}

    public var options: [LarkNCExtensionPB_Entities_RichTextElement.MenuOption] {
      get {return _storage._options}
      set {_uniqueStorage()._options = newValue}
    }

    public var confirm: LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty {
      get {return _storage._confirm ?? LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty()}
      set {_uniqueStorage()._confirm = newValue}
    }
    /// Returns true if `confirm` has been explicitly set.
    public var hasConfirm: Bool {return _storage._confirm != nil}
    /// Clears the value of `confirm`. Subsequent reads from it will return its default value.
//    public mutating func clearConfirm() {_uniqueStorage()._confirm = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct DatePickerProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var actionID: String {
      get {return _storage._actionID ?? String()}
      set {_uniqueStorage()._actionID = newValue}
    }
    /// Returns true if `actionID` has been explicitly set.
//    public var hasActionID: Bool {return _storage._actionID != nil}
    /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
//    public mutating func clearActionID() {_uniqueStorage()._actionID = nil}

    public var placeHolder: String {
      get {return _storage._placeHolder ?? String()}
      set {_uniqueStorage()._placeHolder = newValue}
    }
    /// Returns true if `placeHolder` has been explicitly set.
//    public var hasPlaceHolder: Bool {return _storage._placeHolder != nil}
    /// Clears the value of `placeHolder`. Subsequent reads from it will return its default value.
//    public mutating func clearPlaceHolder() {_uniqueStorage()._placeHolder = nil}

    public var placeHolderI18NKey: String {
      get {return _storage._placeHolderI18NKey ?? String()}
      set {_uniqueStorage()._placeHolderI18NKey = newValue}
    }
    /// Returns true if `placeHolderI18NKey` has been explicitly set.
//    public var hasPlaceHolderI18NKey: Bool {return _storage._placeHolderI18NKey != nil}
    /// Clears the value of `placeHolderI18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearPlaceHolderI18NKey() {_uniqueStorage()._placeHolderI18NKey = nil}

    public var initialDate: String {
      get {return _storage._initialDate ?? String()}
      set {_uniqueStorage()._initialDate = newValue}
    }
    /// Returns true if `initialDate` has been explicitly set.
//    public var hasInitialDate: Bool {return _storage._initialDate != nil}
    /// Clears the value of `initialDate`. Subsequent reads from it will return its default value.
//    public mutating func clearInitialDate() {_uniqueStorage()._initialDate = nil}

    public var confirm: LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty {
      get {return _storage._confirm ?? LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty()}
      set {_uniqueStorage()._confirm = newValue}
    }
    /// Returns true if `confirm` has been explicitly set.
    public var hasConfirm: Bool {return _storage._confirm != nil}
    /// Clears the value of `confirm`. Subsequent reads from it will return its default value.
//    public mutating func clearConfirm() {_uniqueStorage()._confirm = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct TimePickerProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var actionID: String {
      get {return _storage._actionID ?? String()}
      set {_uniqueStorage()._actionID = newValue}
    }
    /// Returns true if `actionID` has been explicitly set.
//    public var hasActionID: Bool {return _storage._actionID != nil}
    /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
//    public mutating func clearActionID() {_uniqueStorage()._actionID = nil}

    public var placeHolder: String {
      get {return _storage._placeHolder ?? String()}
      set {_uniqueStorage()._placeHolder = newValue}
    }
    /// Returns true if `placeHolder` has been explicitly set.
//    public var hasPlaceHolder: Bool {return _storage._placeHolder != nil}
    /// Clears the value of `placeHolder`. Subsequent reads from it will return its default value.
//    public mutating func clearPlaceHolder() {_uniqueStorage()._placeHolder = nil}

    public var placeHolderI18NKey: String {
      get {return _storage._placeHolderI18NKey ?? String()}
      set {_uniqueStorage()._placeHolderI18NKey = newValue}
    }
    /// Returns true if `placeHolderI18NKey` has been explicitly set.
//    public var hasPlaceHolderI18NKey: Bool {return _storage._placeHolderI18NKey != nil}
    /// Clears the value of `placeHolderI18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearPlaceHolderI18NKey() {_uniqueStorage()._placeHolderI18NKey = nil}

    public var initialTime: String {
      get {return _storage._initialTime ?? String()}
      set {_uniqueStorage()._initialTime = newValue}
    }
    /// Returns true if `initialTime` has been explicitly set.
//    public var hasInitialTime: Bool {return _storage._initialTime != nil}
    /// Clears the value of `initialTime`. Subsequent reads from it will return its default value.
//    public mutating func clearInitialTime() {_uniqueStorage()._initialTime = nil}

    public var confirm: LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty {
      get {return _storage._confirm ?? LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty()}
      set {_uniqueStorage()._confirm = newValue}
    }
    /// Returns true if `confirm` has been explicitly set.
    public var hasConfirm: Bool {return _storage._confirm != nil}
    /// Clears the value of `confirm`. Subsequent reads from it will return its default value.
//    public mutating func clearConfirm() {_uniqueStorage()._confirm = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct DatetimePickerProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var actionID: String {
      get {return _storage._actionID ?? String()}
      set {_uniqueStorage()._actionID = newValue}
    }
    /// Returns true if `actionID` has been explicitly set.
//    public var hasActionID: Bool {return _storage._actionID != nil}
    /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
//    public mutating func clearActionID() {_uniqueStorage()._actionID = nil}

    public var placeHolder: String {
      get {return _storage._placeHolder ?? String()}
      set {_uniqueStorage()._placeHolder = newValue}
    }
    /// Returns true if `placeHolder` has been explicitly set.
//    public var hasPlaceHolder: Bool {return _storage._placeHolder != nil}
    /// Clears the value of `placeHolder`. Subsequent reads from it will return its default value.
//    public mutating func clearPlaceHolder() {_uniqueStorage()._placeHolder = nil}

    public var placeHolderI18NKey: String {
      get {return _storage._placeHolderI18NKey ?? String()}
      set {_uniqueStorage()._placeHolderI18NKey = newValue}
    }
    /// Returns true if `placeHolderI18NKey` has been explicitly set.
//    public var hasPlaceHolderI18NKey: Bool {return _storage._placeHolderI18NKey != nil}
    /// Clears the value of `placeHolderI18NKey`. Subsequent reads from it will return its default value.
//    public mutating func clearPlaceHolderI18NKey() {_uniqueStorage()._placeHolderI18NKey = nil}

    public var initialDatetime: String {
      get {return _storage._initialDatetime ?? String()}
      set {_uniqueStorage()._initialDatetime = newValue}
    }
    /// Returns true if `initialDatetime` has been explicitly set.
//    public var hasInitialDatetime: Bool {return _storage._initialDatetime != nil}
    /// Clears the value of `initialDatetime`. Subsequent reads from it will return its default value.
//    public mutating func clearInitialDatetime() {_uniqueStorage()._initialDatetime = nil}

    public var confirm: LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty {
      get {return _storage._confirm ?? LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty()}
      set {_uniqueStorage()._confirm = newValue}
    }
    /// Returns true if `confirm` has been explicitly set.
    public var hasConfirm: Bool {return _storage._confirm != nil}
    /// Clears the value of `confirm`. Subsequent reads from it will return its default value.
//    public mutating func clearConfirm() {_uniqueStorage()._confirm = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct ProgressSelectOptionProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var actionID: String {
      get {return _actionID ?? String()}
      set {_actionID = newValue}
    }
    /// Returns true if `actionID` has been explicitly set.
//    public var hasActionID: Bool {return self._actionID != nil}
    /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
//    public mutating func clearActionID() {self._actionID = nil}

    /// Action参数的key
    public var actionParamName: String {
      get {return _actionParamName ?? String()}
      set {_actionParamName = newValue}
    }
    /// Returns true if `actionParamName` has been explicitly set.
//    public var hasActionParamName: Bool {return self._actionParamName != nil}
    /// Clears the value of `actionParamName`. Subsequent reads from it will return its default value.
//    public mutating func clearActionParamName() {self._actionParamName = nil}

    /// Action参数对应的value
    public var actionParamValue: String {
      get {return _actionParamValue ?? String()}
      set {_actionParamValue = newValue}
    }
    /// Returns true if `actionParamValue` has been explicitly set.
//    public var hasActionParamValue: Bool {return self._actionParamValue != nil}
    /// Clears the value of `actionParamValue`. Subsequent reads from it will return its default value.
//    public mutating func clearActionParamValue() {self._actionParamValue = nil}

    /// 是否禁用
    public var disable: Bool {
      get {return _disable ?? false}
      set {_disable = newValue}
    }
    /// Returns true if `disable` has been explicitly set.
    public var hasDisable: Bool {return self._disable != nil}
    /// Clears the value of `disable`. Subsequent reads from it will return its default value.
//    public mutating func clearDisable() {self._disable = nil}

    /// 是否被选中
    public var selected: Bool {
      get {return _selected ?? false}
      set {_selected = newValue}
    }
    /// Returns true if `selected` has been explicitly set.
    public var hasSelected: Bool {return self._selected != nil}
    /// Clears the value of `selected`. Subsequent reads from it will return its default value.
//    public mutating func clearSelected() {self._selected = nil}

    /// 对应选项标题，如: A B C等
    public var optionCase: String {
      get {return _optionCase ?? String()}
      set {_optionCase = newValue}
    }
    /// Returns true if `optionCase` has been explicitly set.
//    public var hasOptionCase: Bool {return self._optionCase != nil}
    /// Clears the value of `optionCase`. Subsequent reads from it will return its default value.
//    public mutating func clearOptionCase() {self._optionCase = nil}

    /// 对应选项的内容
    public var content: String {
      get {return _content ?? String()}
      set {_content = newValue}
    }
    /// Returns true if `content` has been explicitly set.
    public var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
    public mutating func clearContent() {self._content = nil}

    public var numberOfSelected: Int32 {
      get {return _numberOfSelected ?? 0}
      set {_numberOfSelected = newValue}
    }
    /// Returns true if `numberOfSelected` has been explicitly set.
//    public var hasNumberOfSelected: Bool {return self._numberOfSelected != nil}
    /// Clears the value of `numberOfSelected`. Subsequent reads from it will return its default value.
//    public mutating func clearNumberOfSelected() {self._numberOfSelected = nil}

    public var numberOfTotal: Int32 {
      get {return _numberOfTotal ?? 0}
      set {_numberOfTotal = newValue}
    }
    /// Returns true if `numberOfTotal` has been explicitly set.
//    public var hasNumberOfTotal: Bool {return self._numberOfTotal != nil}
    /// Clears the value of `numberOfTotal`. Subsequent reads from it will return its default value.
//    public mutating func clearNumberOfTotal() {self._numberOfTotal = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _actionID: String? = nil
    fileprivate var _actionParamName: String? = nil
    fileprivate var _actionParamValue: String? = nil
    fileprivate var _disable: Bool? = nil
    fileprivate var _selected: Bool? = nil
    fileprivate var _optionCase: String? = nil
    fileprivate var _content: String? = nil
    fileprivate var _numberOfSelected: Int32? = nil
    fileprivate var _numberOfTotal: Int32? = nil
  }

  public struct DivProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}
  }

  /// 这个元素的property就是他的子元素，他只过滤Text元素不考虑其他元素
  public struct TextableAreaProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var numberOfLines: Int32 {
      get {return _numberOfLines ?? 0}
      set {_numberOfLines = newValue}
    }
    /// Returns true if `numberOfLines` has been explicitly set.
//    public var hasNumberOfLines: Bool {return self._numberOfLines != nil}
    /// Clears the value of `numberOfLines`. Subsequent reads from it will return its default value.
//    public mutating func clearNumberOfLines() {self._numberOfLines = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _numberOfLines: Int32? = nil
  }

  public struct TimeProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var millisecondSince1970: Int64 {
      get {return _millisecondSince1970 ?? 0}
      set {_millisecondSince1970 = newValue}
    }
    /// Returns true if `millisecondSince1970` has been explicitly set.
//    public var hasMillisecondSince1970: Bool {return self._millisecondSince1970 != nil}
    /// Clears the value of `millisecondSince1970`. Subsequent reads from it will return its default value.
//    public mutating func clearMillisecondSince1970() {self._millisecondSince1970 = nil}

    /// 参考Moment format(http://momentjs.cn/docs/#/displaying/)
    /// Year: YYYY YY
    /// Month: MMMM MMM MM Mo M
    /// Day: DDDD DDDo DDD
    /// Day of week: dddd ddd dd do d
    /// Hour: HH H hh h
    /// Minute: mm m
    /// second: ss s
    /// AP/PM: A a
    /// GMT: GMT
    public var format: String {
      get {return _format ?? "YYYY.MM.DD(dddd) HH:mm (GMT)"}
      set {_format = newValue}
    }
    /// Returns true if `format` has been explicitly set.
//    public var hasFormat: Bool {return self._format != nil}
    /// Clears the value of `format`. Subsequent reads from it will return its default value.
//    public mutating func clearFormat() {self._format = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _millisecondSince1970: Int64? = nil
    fileprivate var _format: String? = nil
  }

  public struct LinkProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// for common usage
    public var url: String {
      get {return _url ?? String()}
      set {_url = newValue}
    }
    /// Returns true if `url` has been explicitly set.
    public var hasURL: Bool {return self._url != nil}
    /// Clears the value of `url`. Subsequent reads from it will return its default value.
//    public mutating func clearURL() {self._url = nil}

    public var iosURL: String {
      get {return _iosURL ?? String()}
      set {_iosURL = newValue}
    }
    /// Returns true if `iosURL` has been explicitly set.
    public var hasIosURL: Bool {return self._iosURL != nil}
    /// Clears the value of `iosURL`. Subsequent reads from it will return its default value.
//    public mutating func clearIosURL() {self._iosURL = nil}

    public var androidURL: String {
      get {return _androidURL ?? String()}
      set {_androidURL = newValue}
    }
    /// Returns true if `androidURL` has been explicitly set.
//    public var hasAndroidURL: Bool {return self._androidURL != nil}
    /// Clears the value of `androidURL`. Subsequent reads from it will return its default value.
//    public mutating func clearAndroidURL() {self._androidURL = nil}

    public var pcURL: String {
      get {return _pcURL ?? String()}
      set {_pcURL = newValue}
    }
    /// Returns true if `pcURL` has been explicitly set.
//    public var hasPcURL: Bool {return self._pcURL != nil}
    /// Clears the value of `pcURL`. Subsequent reads from it will return its default value.
//    public mutating func clearPcURL() {self._pcURL = nil}

    ///当前链接是否是doc链接，客户端依据这个渲染
    public var specialURL: LarkNCExtensionPB_Entities_SpecialURL {
      get {return _specialURL ?? .unknownURL}
      set {_specialURL = newValue}
    }
    /// Returns true if `specialURL` has been explicitly set.
//    public var hasSpecialURL: Bool {return self._specialURL != nil}
    /// Clears the value of `specialURL`. Subsequent reads from it will return its default value.
//    public mutating func clearSpecialURL() {self._specialURL = nil}

    ///消息卡片链接场景标识
    public var scene: LarkNCExtensionPB_Entities_RichTextElement.LinkProperty.LinkScene {
      get {return _scene ?? .unknown}
      set {_scene = newValue}
    }
    /// Returns true if `scene` has been explicitly set.
//    public var hasScene: Bool {return self._scene != nil}
    /// Clears the value of `scene`. Subsequent reads from it will return its default value.
//    public mutating func clearScene() {self._scene = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public enum LinkScene: LarkHTTP.Enum {
      public typealias RawValue = Int

      /// 旧版客户端所有链接默认为该字段
      case unknown // = 0

      /// 消息卡片整体跳转
      case cardLink // = 1

      /// 文字链接跳转
      case contentLink // = 2

      /// 小程序透出跳转
      case footerLink // = 3

      public init() {
        self = .unknown
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .cardLink
        case 2: self = .contentLink
        case 3: self = .footerLink
        default: return nil
        }
      }

      public var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .cardLink: return 1
        case .contentLink: return 2
        case .footerLink: return 3
        }
      }

    }

    public init() {}

    fileprivate var _url: String? = nil
    fileprivate var _iosURL: String? = nil
    fileprivate var _androidURL: String? = nil
    fileprivate var _pcURL: String? = nil
    fileprivate var _specialURL: LarkNCExtensionPB_Entities_SpecialURL? = nil
    fileprivate var _scene: LarkNCExtensionPB_Entities_RichTextElement.LinkProperty.LinkScene? = nil
  }

  public struct MediaProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var key: String {
      get {return _storage._key ?? String()}
      set {_uniqueStorage()._key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return _storage._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
//    public mutating func clearKey() {_uniqueStorage()._key = nil}

    public var name: String {
      get {return _storage._name ?? String()}
      set {_uniqueStorage()._name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    public var hasName: Bool {return _storage._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
//    public mutating func clearName() {_uniqueStorage()._name = nil}

    public var size: Int64 {
      get {return _storage._size ?? 0}
      set {_uniqueStorage()._size = newValue}
    }
    /// Returns true if `size` has been explicitly set.
//    public var hasSize: Bool {return _storage._size != nil}
    /// Clears the value of `size`. Subsequent reads from it will return its default value.
//    public mutating func clearSize() {_uniqueStorage()._size = nil}

    public var mime: String {
      get {return _storage._mime ?? String()}
      set {_uniqueStorage()._mime = newValue}
    }
    /// Returns true if `mime` has been explicitly set.
//    public var hasMime: Bool {return _storage._mime != nil}
    /// Clears the value of `mime`. Subsequent reads from it will return its default value.
//    public mutating func clearMime() {_uniqueStorage()._mime = nil}

    public var source: LarkNCExtensionPB_Entities_RichTextElement.MediaProperty.Source {
      get {return _storage._source ?? .unknown}
      set {_uniqueStorage()._source = newValue}
    }
    /// Returns true if `source` has been explicitly set.
    public var hasSource: Bool {return _storage._source != nil}
    /// Clears the value of `source`. Subsequent reads from it will return its default value.
//    public mutating func clearSource() {_uniqueStorage()._source = nil}

    /// 封面帧
    public var image: LarkNCExtensionPB_Entities_ImageSet {
      get {return _storage._image ?? LarkNCExtensionPB_Entities_ImageSet()}
      set {_uniqueStorage()._image = newValue}
    }
    /// Returns true if `image` has been explicitly set.
    public var hasImage: Bool {return _storage._image != nil}
    /// Clears the value of `image`. Subsequent reads from it will return its default value.
//    public mutating func clearImage() {_uniqueStorage()._image = nil}

    ///时长单位ms
    public var duration: Int32 {
      get {return _storage._duration ?? 0}
      set {_uniqueStorage()._duration = newValue}
    }
    /// Returns true if `duration` has been explicitly set.
    public var hasDuration: Bool {return _storage._duration != nil}
    /// Clears the value of `duration`. Subsequent reads from it will return its default value.
//    public mutating func clearDuration() {_uniqueStorage()._duration = nil}

    /// 资源所属 unit
    public var fsUnit: String {
      get {return _storage._fsUnit ?? String()}
      set {_uniqueStorage()._fsUnit = newValue}
    }
    /// Returns true if `fsUnit` has been explicitly set.
    public var hasFsUnit: Bool {return _storage._fsUnit != nil}
    /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//    public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}

    /// 封面的token，客户端发消息时必须要带上
    public var cryptoToken: String {
      get {return _storage._cryptoToken ?? String()}
      set {_uniqueStorage()._cryptoToken = newValue}
    }
    /// Returns true if `cryptoToken` has been explicitly set.
//    public var hasCryptoToken: Bool {return _storage._cryptoToken != nil}
    /// Clears the value of `cryptoToken`. Subsequent reads from it will return its default value.
//    public mutating func clearCryptoToken() {_uniqueStorage()._cryptoToken = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public enum Source: LarkHTTP.Enum {
      public typealias RawValue = Int
      case unknown // = 0
      case lark // = 1

      public init() {
        self = .unknown
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .lark
        default: return nil
        }
      }

      public var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .lark: return 1
        }
      }

    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct DocsProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}
  }

  public struct H1Property {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}
  }

  public struct H2Property {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}
  }

  public struct H3Property {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}
  }

  public struct ULProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var type: LarkNCExtensionPB_Entities_RichTextElement.ULProperty.TypeEnum {
      get {return _type ?? .disc}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {self._type = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public enum TypeEnum: LarkHTTP.Enum {
      public typealias RawValue = Int

      /// 实心圆
      case disc // = 0

      /// 空心圆
      case circle // = 1

      /// 方块
      case square // = 2

      /// 表示没有任何前缀占位
      case none // = 3

      public init() {
        self = .disc
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .disc
        case 1: self = .circle
        case 2: self = .square
        case 3: self = .none
        default: return nil
        }
      }

      public var rawValue: Int {
        switch self {
        case .disc: return 0
        case .circle: return 1
        case .square: return 2
        case .none: return 3
        }
      }

    }

    public init() {}

    fileprivate var _type: LarkNCExtensionPB_Entities_RichTextElement.ULProperty.TypeEnum? = nil
  }

  public struct OLProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var type: LarkNCExtensionPB_Entities_RichTextElement.OLProperty.TypeEnum {
      get {return _type ?? .number}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {self._type = nil}

    /// 遵循规范，start表示index。1分别对应1、a、A、I、i
    public var start: Int32 {
      get {return _start ?? 1}
      set {_start = newValue}
    }
    /// Returns true if `start` has been explicitly set.
    public var hasStart: Bool {return self._start != nil}
    /// Clears the value of `start`. Subsequent reads from it will return its default value.
//    public mutating func clearStart() {self._start = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public enum TypeEnum: LarkHTTP.Enum {
      public typealias RawValue = Int

      /// 1 数字
      case number // = 0

      /// 小写字母
      case lowercaseA // = 1

      /// 大写字母
      case uppercaseA // = 2

      /// 小写罗马数字
      case lowercaseRoman // = 3

      /// 大写罗马数字
      case uppercaseRoman // = 4

      /// 表示没有任何前缀占位符
      case none // = 5

      public init() {
        self = .number
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .number
        case 1: self = .lowercaseA
        case 2: self = .uppercaseA
        case 3: self = .lowercaseRoman
        case 4: self = .uppercaseRoman
        case 5: self = .none
        default: return nil
        }
      }

      public var rawValue: Int {
        switch self {
        case .number: return 0
        case .lowercaseA: return 1
        case .uppercaseA: return 2
        case .lowercaseRoman: return 3
        case .uppercaseRoman: return 4
        case .none: return 5
        }
      }

    }

    public init() {}

    fileprivate var _type: LarkNCExtensionPB_Entities_RichTextElement.OLProperty.TypeEnum? = nil
    fileprivate var _start: Int32? = nil
  }

  public struct LIProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}
  }

  public struct QuoteProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}
  }

  public struct CodeProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}
  }

  public struct CodeBlockProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var language: LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.Language {
      get {return _language ?? .js}
      set {_language = newValue}
    }
    /// Returns true if `language` has been explicitly set.
//    public var hasLanguage: Bool {return self._language != nil}
    /// Clears the value of `language`. Subsequent reads from it will return its default value.
//    public mutating func clearLanguage() {self._language = nil}

    public var content: String {
      get {return _content ?? String()}
      set {_content = newValue}
    }
    /// Returns true if `content` has been explicitly set.
    public var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
    public mutating func clearContent() {self._content = nil}

    public var styleRefs: [LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.StyleRef] = []

    public var styles: [LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.Style] = []

    public var unknownFields = LarkHTTP.UnknownStorage()

    public enum Language: LarkHTTP.Enum {
      public typealias RawValue = Int
      case js // = 0
      case apache // = 1
      case bash // = 2

      /// c#
      case cs // = 3
      case cplusplus // = 4
      case coffeScript // = 5
      case html // = 6
      case xml // = 7
      case http // = 8
      case json // = 9
      case java // = 10
      case makefile // = 11
      case markdown // = 12
      case nginx // = 13
      case objc // = 14
      case php // = 15
      case perl // = 16
      case python // = 17
      case ruby // = 18
      case sql // = 19
      case shell // = 20
      case go // = 21
      case scss // = 22
      case lua // = 23
      case django // = 24
      case kotlin // = 25

      public init() {
        self = .js
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .js
        case 1: self = .apache
        case 2: self = .bash
        case 3: self = .cs
        case 4: self = .cplusplus
        case 5: self = .coffeScript
        case 6: self = .html
        case 7: self = .xml
        case 8: self = .http
        case 9: self = .json
        case 10: self = .java
        case 11: self = .makefile
        case 12: self = .markdown
        case 13: self = .nginx
        case 14: self = .objc
        case 15: self = .php
        case 16: self = .perl
        case 17: self = .python
        case 18: self = .ruby
        case 19: self = .sql
        case 20: self = .shell
        case 21: self = .go
        case 22: self = .scss
        case 23: self = .lua
        case 24: self = .django
        case 25: self = .kotlin
        default: return nil
        }
      }

      public var rawValue: Int {
        switch self {
        case .js: return 0
        case .apache: return 1
        case .bash: return 2
        case .cs: return 3
        case .cplusplus: return 4
        case .coffeScript: return 5
        case .html: return 6
        case .xml: return 7
        case .http: return 8
        case .json: return 9
        case .java: return 10
        case .makefile: return 11
        case .markdown: return 12
        case .nginx: return 13
        case .objc: return 14
        case .php: return 15
        case .perl: return 16
        case .python: return 17
        case .ruby: return 18
        case .sql: return 19
        case .shell: return 20
        case .go: return 21
        case .scss: return 22
        case .lua: return 23
        case .django: return 24
        case .kotlin: return 25
        }
      }

    }

    public enum StyleType: LarkHTTP.Enum {
      public typealias RawValue = Int

      /// 用户自己增加的样式，不是依据语法高亮的样式
      case customize // = 0

      /// docs依据语法规则生成的样式
      case grammar // = 1

      public init() {
        self = .customize
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .customize
        case 1: self = .grammar
        default: return nil
        }
      }

      public var rawValue: Int {
        switch self {
        case .customize: return 0
        case .grammar: return 1
        }
      }

    }

    public struct Style {
      // LarkHTTP.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the LarkHTTP library for
      // methods supported on all messages.

      public var type: LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.StyleType {
        get {return _type ?? .customize}
        set {_type = newValue}
      }
      /// Returns true if `type` has been explicitly set.
      public var hasType: Bool {return self._type != nil}
      /// Clears the value of `type`. Subsequent reads from it will return its default value.
//      public mutating func clearType() {self._type = nil}

      public var name: String {
        get {return _name ?? String()}
        set {_name = newValue}
      }
      /// Returns true if `name` has been explicitly set.
      public var hasName: Bool {return self._name != nil}
      /// Clears the value of `name`. Subsequent reads from it will return its default value.
//      public mutating func clearName() {self._name = nil}

      public var value: String {
        get {return _value ?? String()}
        set {_value = newValue}
      }
      /// Returns true if `value` has been explicitly set.
      public var hasValue: Bool {return self._value != nil}
      /// Clears the value of `value`. Subsequent reads from it will return its default value.
//      public mutating func clearValue() {self._value = nil}

      public var unknownFields = LarkHTTP.UnknownStorage()

      public init() {}

      fileprivate var _type: LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.StyleType? = nil
      fileprivate var _name: String? = nil
      fileprivate var _value: String? = nil
    }

    public struct StyleRef {
      // LarkHTTP.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the LarkHTTP library for
      // methods supported on all messages.

      public var location: Int32 {
        get {return _location ?? 0}
        set {_location = newValue}
      }
      /// Returns true if `location` has been explicitly set.
      public var hasLocation: Bool {return self._location != nil}
      /// Clears the value of `location`. Subsequent reads from it will return its default value.
//      public mutating func clearLocation() {self._location = nil}

      public var length: Int32 {
        get {return _length ?? 0}
        set {_length = newValue}
      }
      /// Returns true if `length` has been explicitly set.
//      public var hasLength: Bool {return self._length != nil}
      /// Clears the value of `length`. Subsequent reads from it will return its default value.
//      public mutating func clearLength() {self._length = nil}

      public var styleIds: [Int32] = []

      public var unknownFields = LarkHTTP.UnknownStorage()

      public init() {}

      fileprivate var _location: Int32? = nil
      fileprivate var _length: Int32? = nil
    }

    public init() {}

    fileprivate var _language: LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.Language? = nil
    fileprivate var _content: String? = nil
  }

  public struct HRProperty {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _tag: LarkNCExtensionPB_Entities_RichTextElement.Tag? = nil
  fileprivate var _property: Data? = nil
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_RichTextElement.Tag: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_RichTextElements {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var dictionary: Dictionary<String,LarkNCExtensionPB_Entities_RichTextElement> = [:]

  public var styleRefs: Dictionary<String,LarkNCExtensionPB_Entities_RichTextElements.RichTextElementStyleRefs> = [:]

  public var styles: [LarkNCExtensionPB_Entities_RichTextElements.RichTextStyle] = []

  public var unknownFields = LarkHTTP.UnknownStorage()

  public struct RichTextStyle {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var name: String {
      get {return _name ?? String()}
      set {_name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    public var hasName: Bool {return self._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
//    public mutating func clearName() {self._name = nil}

    public var value: String {
      get {return _value ?? String()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    public var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
//    public mutating func clearValue() {self._value = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _name: String? = nil
    fileprivate var _value: String? = nil
  }

  public struct RichTextElementStyleRefs {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var styleIds: [Int32] = []

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct LarkNCExtensionPB_Entities_RichText {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 第一层节点的id
  public var elementIds: [String] {
    get {return _storage._elementIds}
    set {_uniqueStorage()._elementIds = newValue}
  }

  /// 去除标签后拼接的文本
  public var innerText: String {
    get {return _storage._innerText ?? String()}
    set {_uniqueStorage()._innerText = newValue}
  }
  /// Returns true if `innerText` has been explicitly set.
//  public var hasInnerText: Bool {return _storage._innerText != nil}
  /// Clears the value of `innerText`. Subsequent reads from it will return its default value.
//  public mutating func clearInnerText() {_uniqueStorage()._innerText = nil}

  /// 全部RichTextElement的map, 遍历所用的数据结构
  public var elements: LarkNCExtensionPB_Entities_RichTextElements {
    get {return _storage._elements ?? LarkNCExtensionPB_Entities_RichTextElements()}
    set {_uniqueStorage()._elements = newValue}
  }
  /// Returns true if `elements` has been explicitly set.
  public var hasElements: Bool {return _storage._elements != nil}
  /// Clears the value of `elements`. Subsequent reads from it will return its default value.
//  public mutating func clearElements() {_uniqueStorage()._elements = nil}

  public var imageIds: [String] {
    get {return _storage._imageIds}
    set {_uniqueStorage()._imageIds = newValue}
  }

  public var atIds: [String] {
    get {return _storage._atIds}
    set {_uniqueStorage()._atIds = newValue}
  }

  public var anchorIds: [String] {
    get {return _storage._anchorIds}
    set {_uniqueStorage()._anchorIds = newValue}
  }

  public var i18NIds: [String] {
    get {return _storage._i18NIds}
    set {_uniqueStorage()._i18NIds = newValue}
  }

  public var mediaIds: [String] {
    get {return _storage._mediaIds}
    set {_uniqueStorage()._mediaIds = newValue}
  }

  public var docsIds: [String] {
    get {return _storage._docsIds}
    set {_uniqueStorage()._docsIds = newValue}
  }

  /// 交互控件数组，用于卡片消息控件索引
  public var interactiveIds: [String] {
    get {return _storage._interactiveIds}
    set {_uniqueStorage()._interactiveIds = newValue}
  }

  public var mentionIds: [String] {
    get {return _storage._mentionIds}
    set {_uniqueStorage()._mentionIds = newValue}
  }

  public var version: Int32 {
    get {return _storage._version ?? 0}
    set {_uniqueStorage()._version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {_uniqueStorage()._version = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

//public struct LarkNCExtensionPB_Entities_EmailSystemEvent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var chatterID: String {
//    get {return _chatterID ?? String()}
//    set {_chatterID = newValue}
//  }
  /// Returns true if `chatterID` has been explicitly set.
//  public var hasChatterID: Bool {return self._chatterID != nil}
  /// Clears the value of `chatterID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatterID() {self._chatterID = nil}
//
//  public var to: [LarkNCExtensionPB_Entities_EmailMember] = []
//
//  public var cc: [LarkNCExtensionPB_Entities_EmailMember] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _chatterID: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_ShareGroupChatContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var chat: LarkNCExtensionPB_Entities_Chat {
//    get {return _storage._chat ?? LarkNCExtensionPB_Entities_Chat()}
//    set {_uniqueStorage()._chat = newValue}
//  }
  /// Returns true if `chat` has been explicitly set.
//  public var hasChat: Bool {return _storage._chat != nil}
  /// Clears the value of `chat`. Subsequent reads from it will return its default value.
//  public mutating func clearChat() {_uniqueStorage()._chat = nil}
//
//  public var joinToken: String {
//    get {return _storage._joinToken ?? String()}
//    set {_uniqueStorage()._joinToken = newValue}
//  }
  /// Returns true if `joinToken` has been explicitly set.
//  public var hasJoinToken: Bool {return _storage._joinToken != nil}
  /// Clears the value of `joinToken`. Subsequent reads from it will return its default value.
//  public mutating func clearJoinToken() {_uniqueStorage()._joinToken = nil}
//
//  public var expireTime: Int64 {
//    get {return _storage._expireTime ?? 0}
//    set {_uniqueStorage()._expireTime = newValue}
//  }
  /// Returns true if `expireTime` has been explicitly set.
//  public var hasExpireTime: Bool {return _storage._expireTime != nil}
  /// Clears the value of `expireTime`. Subsequent reads from it will return its default value.
//  public mutating func clearExpireTime() {_uniqueStorage()._expireTime = nil}
//
  /// 被分享的群ID，和Chat.id 一致.
//  public var chatID: String {
//    get {return _storage._chatID ?? String()}
//    set {_uniqueStorage()._chatID = newValue}
//  }
  /// Returns true if `chatID` has been explicitly set.
//  public var hasChatID: Bool {return _storage._chatID != nil}
  /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatID() {_uniqueStorage()._chatID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_ShareUserCardContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var userID: String {
//    get {return _storage._userID ?? String()}
//    set {_uniqueStorage()._userID = newValue}
//  }
  /// Returns true if `userID` has been explicitly set.
//  public var hasUserID: Bool {return _storage._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
//  public mutating func clearUserID() {_uniqueStorage()._userID = nil}
//
//  public var avatarImage: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatarImage ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatarImage = newValue}
//  }
  /// Returns true if `avatarImage` has been explicitly set.
//  public var hasAvatarImage: Bool {return _storage._avatarImage != nil}
  /// Clears the value of `avatarImage`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarImage() {_uniqueStorage()._avatarImage = nil}
//
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
//  public var enUsName: String {
//    get {return _storage._enUsName ?? String()}
//    set {_uniqueStorage()._enUsName = newValue}
//  }
  /// Returns true if `enUsName` has been explicitly set.
//  public var hasEnUsName: Bool {return _storage._enUsName != nil}
  /// Clears the value of `enUsName`. Subsequent reads from it will return its default value.
//  public mutating func clearEnUsName() {_uniqueStorage()._enUsName = nil}
//
//  public var internationalName: Dictionary<String,String> {
//    get {return _storage._internationalName}
//    set {_uniqueStorage()._internationalName = newValue}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_StickerContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 为了版本兼容
//  public var key: String {
//    get {return _storage._key ?? String()}
//    set {_uniqueStorage()._key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}
//
//  public var width: Int32 {
//    get {return _storage._width ?? 0}
//    set {_uniqueStorage()._width = newValue}
//  }
  /// Returns true if `width` has been explicitly set.
//  public var hasWidth: Bool {return _storage._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
//  public mutating func clearWidth() {_uniqueStorage()._width = nil}
//
//  public var height: Int32 {
//    get {return _storage._height ?? 0}
//    set {_uniqueStorage()._height = newValue}
//  }
  /// Returns true if `height` has been explicitly set.
//  public var hasHeight: Bool {return _storage._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
//  public mutating func clearHeight() {_uniqueStorage()._height = nil}
//
//  public var image: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._image ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._image = newValue}
//  }
  /// Returns true if `image` has been explicitly set.
//  public var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
//  public mutating func clearImage() {_uniqueStorage()._image = nil}
//
//  public var fsUnit: String {
//    get {return _storage._fsUnit ?? String()}
//    set {_uniqueStorage()._fsUnit = newValue}
//  }
  /// Returns true if `fsUnit` has been explicitly set.
//  public var hasFsUnit: Bool {return _storage._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}
//
//  public var stickerSetID: String {
//    get {return _storage._stickerSetID ?? String()}
//    set {_uniqueStorage()._stickerSetID = newValue}
//  }
  /// Returns true if `stickerSetID` has been explicitly set.
//  public var hasStickerSetID: Bool {return _storage._stickerSetID != nil}
  /// Clears the value of `stickerSetID`. Subsequent reads from it will return its default value.
//  public mutating func clearStickerSetID() {_uniqueStorage()._stickerSetID = nil}
//
  /// 表情包中的表情 id
//  public var stickerID: String {
//    get {return _storage._stickerID ?? String()}
//    set {_uniqueStorage()._stickerID = newValue}
//  }
  /// Returns true if `stickerID` has been explicitly set.
//  public var hasStickerID: Bool {return _storage._stickerID != nil}
  /// Clears the value of `stickerID`. Subsequent reads from it will return its default value.
//  public mutating func clearStickerID() {_uniqueStorage()._stickerID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_MergeForwardContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// asc sorted by message.position
//  public var messages: [LarkNCExtensionPB_Entities_Message] {
//    get {return _storage._messages}
//    set {_uniqueStorage()._messages = newValue}
//  }
//
//  public var chatType: LarkNCExtensionPB_Entities_Chat.TypeEnum {
//    get {return _storage._chatType ?? .unknown}
//    set {_uniqueStorage()._chatType = newValue}
//  }
  /// Returns true if `chatType` has been explicitly set.
//  public var hasChatType: Bool {return _storage._chatType != nil}
  /// Clears the value of `chatType`. Subsequent reads from it will return its default value.
//  public mutating func clearChatType() {_uniqueStorage()._chatType = nil}
//
//  public var groupChatName: String {
//    get {return _storage._groupChatName ?? String()}
//    set {_uniqueStorage()._groupChatName = newValue}
//  }
  /// Returns true if `groupChatName` has been explicitly set.
//  public var hasGroupChatName: Bool {return _storage._groupChatName != nil}
  /// Clears the value of `groupChatName`. Subsequent reads from it will return its default value.
//  public mutating func clearGroupChatName() {_uniqueStorage()._groupChatName = nil}
//
  /// name with the language version of the sender
//  public var p2PCreatorName: String {
//    get {return _storage._p2PCreatorName ?? String()}
//    set {_uniqueStorage()._p2PCreatorName = newValue}
//  }
  /// Returns true if `p2PCreatorName` has been explicitly set.
//  public var hasP2PCreatorName: Bool {return _storage._p2PCreatorName != nil}
  /// Clears the value of `p2PCreatorName`. Subsequent reads from it will return its default value.
//  public mutating func clearP2PCreatorName() {_uniqueStorage()._p2PCreatorName = nil}
//
  /// it will be empty string "" if chat is userself's p2p chat
//  public var p2PPartnerName: String {
//    get {return _storage._p2PPartnerName ?? String()}
//    set {_uniqueStorage()._p2PPartnerName = newValue}
//  }
  /// Returns true if `p2PPartnerName` has been explicitly set.
//  public var hasP2PPartnerName: Bool {return _storage._p2PPartnerName != nil}
  /// Clears the value of `p2PPartnerName`. Subsequent reads from it will return its default value.
//  public mutating func clearP2PPartnerName() {_uniqueStorage()._p2PPartnerName = nil}
//
//  public var p2PCreatorUserID: Int64 {
//    get {return _storage._p2PCreatorUserID ?? 0}
//    set {_uniqueStorage()._p2PCreatorUserID = newValue}
//  }
  /// Returns true if `p2PCreatorUserID` has been explicitly set.
//  public var hasP2PCreatorUserID: Bool {return _storage._p2PCreatorUserID != nil}
  /// Clears the value of `p2PCreatorUserID`. Subsequent reads from it will return its default value.
//  public mutating func clearP2PCreatorUserID() {_uniqueStorage()._p2PCreatorUserID = nil}
//
//  public var p2PPartnerUserID: Int64 {
//    get {return _storage._p2PPartnerUserID ?? 0}
//    set {_uniqueStorage()._p2PPartnerUserID = newValue}
//  }
  /// Returns true if `p2PPartnerUserID` has been explicitly set.
//  public var hasP2PPartnerUserID: Bool {return _storage._p2PPartnerUserID != nil}
  /// Clears the value of `p2PPartnerUserID`. Subsequent reads from it will return its default value.
//  public mutating func clearP2PPartnerUserID() {_uniqueStorage()._p2PPartnerUserID = nil}
//
  ///locale: i18nNames
//  public var creatorI18NNames: Dictionary<String,String> {
//    get {return _storage._creatorI18NNames}
//    set {_uniqueStorage()._creatorI18NNames = newValue}
//  }
//
  ///locale: i18nNames
//  public var partnerI18NNames: Dictionary<String,String> {
//    get {return _storage._partnerI18NNames}
//    set {_uniqueStorage()._partnerI18NNames = newValue}
//  }
//
  /// ChatterID vs ChatterInfo
//  public var chatters: Dictionary<String,LarkNCExtensionPB_Entities_MergeForwardContent.ChatterInfo> {
//    get {return _storage._chatters}
//    set {_uniqueStorage()._chatters = newValue}
//  }
//
  /// 以下字段用于私有话题群帖子转发场景，4.5版本启用
//  public var reactionSnapshots: Dictionary<String,LarkNCExtensionPB_Entities_MessageReaction> {
//    get {return _storage._reactionSnapshots}
//    set {_uniqueStorage()._reactionSnapshots = newValue}
//  }
//
  /// 转发整个帖子，携带thread字段，4.5版本后客户端根据该字段将合并转发消息渲染成卡片样式
//  public var thread: LarkNCExtensionPB_Entities_Thread {
//    get {return _storage._thread ?? LarkNCExtensionPB_Entities_Thread()}
//    set {_uniqueStorage()._thread = newValue}
//  }
  /// Returns true if `thread` has been explicitly set.
//  public var hasThread: Bool {return _storage._thread != nil}
  /// Clears the value of `thread`. Subsequent reads from it will return its default value.
//  public mutating func clearThread() {_uniqueStorage()._thread = nil}
//
  /// 帖子的国际化文案
//  public var i18NThreadTitle: Dictionary<String,String> {
//    get {return _storage._i18NThreadTitle}
//    set {_uniqueStorage()._i18NThreadTitle = newValue}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public struct ChatterInfo {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var id: String {
//      get {return _storage._id ?? String()}
//      set {_uniqueStorage()._id = newValue}
//    }
    /// Returns true if `id` has been explicitly set.
//    public var hasID: Bool {return _storage._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
//    public mutating func clearID() {_uniqueStorage()._id = nil}
//
    /// name with the language version of the sender
//    public var name: String {
//      get {return _storage._name ?? String()}
//      set {_uniqueStorage()._name = newValue}
//    }
    /// Returns true if `name` has been explicitly set.
//    public var hasName: Bool {return _storage._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
//    public mutating func clearName() {_uniqueStorage()._name = nil}
//
//    public var avatar: LarkNCExtensionPB_Entities_ImageSet {
//      get {return _storage._avatar ?? LarkNCExtensionPB_Entities_ImageSet()}
//      set {_uniqueStorage()._avatar = newValue}
//    }
    /// Returns true if `avatar` has been explicitly set.
//    public var hasAvatar: Bool {return _storage._avatar != nil}
    /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//    public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
//    public var type: LarkNCExtensionPB_Entities_ChatterType {
//      get {return _storage._type ?? .unknownChatter}
//      set {_uniqueStorage()._type = newValue}
//    }
    /// Returns true if `type` has been explicitly set.
//    public var hasType: Bool {return _storage._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {_uniqueStorage()._type = nil}
//
//    public var avatarEntity: LarkNCExtensionPB_Entities_Image {
//      get {return _storage._avatarEntity ?? LarkNCExtensionPB_Entities_Image()}
//      set {_uniqueStorage()._avatarEntity = newValue}
//    }
    /// Returns true if `avatarEntity` has been explicitly set.
//    public var hasAvatarEntity: Bool {return _storage._avatarEntity != nil}
    /// Clears the value of `avatarEntity`. Subsequent reads from it will return its default value.
//    public mutating func clearAvatarEntity() {_uniqueStorage()._avatarEntity = nil}
//
//    public var isAnonymous: Bool {
//      get {return _storage._isAnonymous ?? false}
//      set {_uniqueStorage()._isAnonymous = newValue}
//    }
    /// Returns true if `isAnonymous` has been explicitly set.
//    public var hasIsAnonymous: Bool {return _storage._isAnonymous != nil}
    /// Clears the value of `isAnonymous`. Subsequent reads from it will return its default value.
//    public mutating func clearIsAnonymous() {_uniqueStorage()._isAnonymous = nil}
//
//    public var i18NName: Dictionary<String,String> {
//      get {return _storage._i18NName}
//      set {_uniqueStorage()._i18NName = newValue}
//    }
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

public struct LarkNCExtensionPB_Entities_I18nInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 消息体是否有国际化版本
  public var isI18NMessage: Bool {
    get {return _isI18NMessage ?? false}
    set {_isI18NMessage = newValue}
  }
  /// Returns true if `isI18NMessage` has been explicitly set.
//  public var hasIsI18NMessage: Bool {return self._isI18NMessage != nil}
  /// Clears the value of `isI18NMessage`. Subsequent reads from it will return its default value.
//  public mutating func clearIsI18NMessage() {self._isI18NMessage = nil}

  /// 消息体的语言版本
  public var locale: String {
    get {return _locale ?? "zh_cn"}
    set {_locale = newValue}
  }
  /// Returns true if `locale` has been explicitly set.
//  public var hasLocale: Bool {return self._locale != nil}
  /// Clears the value of `locale`. Subsequent reads from it will return its default value.
//  public mutating func clearLocale() {self._locale = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _isI18NMessage: Bool? = nil
  fileprivate var _locale: String? = nil
}

/// 外部搜索配置
//public struct LarkNCExtensionPB_Entities_ExternalSearch {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 唯一id
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
  /// 搜索名称
//  public var title: String {
//    get {return _title ?? String()}
//    set {_title = newValue}
//  }
  /// Returns true if `title` has been explicitly set.
//  public var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
//  public mutating func clearTitle() {self._title = nil}
//
  /// 搜索图标
//  public var iconURL: String {
//    get {return _iconURL ?? String()}
//    set {_iconURL = newValue}
//  }
  /// Returns true if `iconURL` has been explicitly set.
//  public var hasIconURL: Bool {return self._iconURL != nil}
  /// Clears the value of `iconURL`. Subsequent reads from it will return its default value.
//  public mutating func clearIconURL() {self._iconURL = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _title: String? = nil
//  fileprivate var _iconURL: String? = nil
//}

/// lark app config
//public struct LarkNCExtensionPB_Entities_AppConfig {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var messageConfig: LarkNCExtensionPB_Entities_AppConfig.MessageConfig {
//    get {return _storage._messageConfig ?? LarkNCExtensionPB_Entities_AppConfig.MessageConfig()}
//    set {_uniqueStorage()._messageConfig = newValue}
//  }
  /// Returns true if `messageConfig` has been explicitly set.
//  public var hasMessageConfig: Bool {return _storage._messageConfig != nil}
  /// Clears the value of `messageConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageConfig() {_uniqueStorage()._messageConfig = nil}
//
//  public var chatConfig: LarkNCExtensionPB_Entities_AppConfig.ChatConfig {
//    get {return _storage._chatConfig ?? LarkNCExtensionPB_Entities_AppConfig.ChatConfig()}
//    set {_uniqueStorage()._chatConfig = newValue}
//  }
  /// Returns true if `chatConfig` has been explicitly set.
//  public var hasChatConfig: Bool {return _storage._chatConfig != nil}
  /// Clears the value of `chatConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearChatConfig() {_uniqueStorage()._chatConfig = nil}
//
//  public var voiceCallConfig: LarkNCExtensionPB_Entities_AppConfig.VoiceCallConfig {
//    get {return _storage._voiceCallConfig ?? LarkNCExtensionPB_Entities_AppConfig.VoiceCallConfig()}
//    set {_uniqueStorage()._voiceCallConfig = newValue}
//  }
  /// Returns true if `voiceCallConfig` has been explicitly set.
//  public var hasVoiceCallConfig: Bool {return _storage._voiceCallConfig != nil}
  /// Clears the value of `voiceCallConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearVoiceCallConfig() {_uniqueStorage()._voiceCallConfig = nil}
//
//  public var urlConfig: LarkNCExtensionPB_Entities_AppConfig.URLConfig {
//    get {return _storage._urlConfig ?? LarkNCExtensionPB_Entities_AppConfig.URLConfig()}
//    set {_uniqueStorage()._urlConfig = newValue}
//  }
  /// Returns true if `urlConfig` has been explicitly set.
//  public var hasURLConfig: Bool {return _storage._urlConfig != nil}
  /// Clears the value of `urlConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearURLConfig() {_uniqueStorage()._urlConfig = nil}
//
  /// 资源链接
//  public var resource: LarkNCExtensionPB_Entities_AppConfig.Resource {
//    get {return _storage._resource ?? LarkNCExtensionPB_Entities_AppConfig.Resource()}
//    set {_uniqueStorage()._resource = newValue}
//  }
  /// Returns true if `resource` has been explicitly set.
//  public var hasResource: Bool {return _storage._resource != nil}
  /// Clears the value of `resource`. Subsequent reads from it will return its default value.
//  public mutating func clearResource() {_uniqueStorage()._resource = nil}
//
//  public var billingPackage: LarkNCExtensionPB_Entities_AppConfig.BillingPackageConfig {
//    get {return _storage._billingPackage ?? LarkNCExtensionPB_Entities_AppConfig.BillingPackageConfig()}
//    set {_uniqueStorage()._billingPackage = newValue}
//  }
  /// Returns true if `billingPackage` has been explicitly set.
//  public var hasBillingPackage: Bool {return _storage._billingPackage != nil}
  /// Clears the value of `billingPackage`. Subsequent reads from it will return its default value.
//  public mutating func clearBillingPackage() {_uniqueStorage()._billingPackage = nil}
//
  /// 云空间相关链接的正则及其他配置
//  public var urlRegex: LarkNCExtensionPB_Entities_AppConfig.URLRegex {
//    get {return _storage._urlRegex ?? LarkNCExtensionPB_Entities_AppConfig.URLRegex()}
//    set {_uniqueStorage()._urlRegex = newValue}
//  }
  /// Returns true if `urlRegex` has been explicitly set.
//  public var hasURLRegex: Bool {return _storage._urlRegex != nil}
  /// Clears the value of `urlRegex`. Subsequent reads from it will return its default value.
//  public mutating func clearURLRegex() {_uniqueStorage()._urlRegex = nil}
//
  /// zendesk 相关配置；"帮助和反馈" 入口
//  public var zendesk: LarkNCExtensionPB_Entities_AppConfig.Zendesk {
//    get {return _storage._zendesk ?? LarkNCExtensionPB_Entities_AppConfig.Zendesk()}
//    set {_uniqueStorage()._zendesk = newValue}
//  }
  /// Returns true if `zendesk` has been explicitly set.
//  public var hasZendesk: Bool {return _storage._zendesk != nil}
  /// Clears the value of `zendesk`. Subsequent reads from it will return its default value.
//  public mutating func clearZendesk() {_uniqueStorage()._zendesk = nil}
//
  /// 安卓应用商店信息；例子："yingyongbao"、"360"；用于 Android 引导应用商店评分跳转应用商店的优先级配置
//  public var androidAppStores: [String] {
//    get {return _storage._androidAppStores}
//    set {_uniqueStorage()._androidAppStores = newValue}
//  }
//
  /// 应用商店引导评分延迟（小时），在用户安装/更新应用一段时间后可以展示评分弹窗
//  public var guideToRateDelayHours: Int32 {
//    get {return _storage._guideToRateDelayHours ?? 0}
//    set {_uniqueStorage()._guideToRateDelayHours = newValue}
//  }
  /// Returns true if `guideToRateDelayHours` has been explicitly set.
//  public var hasGuideToRateDelayHours: Bool {return _storage._guideToRateDelayHours != nil}
  /// Clears the value of `guideToRateDelayHours`. Subsequent reads from it will return its default value.
//  public mutating func clearGuideToRateDelayHours() {_uniqueStorage()._guideToRateDelayHours = nil}
//
  /// 搜索用配置；搜索-高级搜索-更多-搜索以下内容中的其他搜索应用
//  public var searchConfig: LarkNCExtensionPB_Entities_AppConfig.SearchConfig {
//    get {return _storage._searchConfig ?? LarkNCExtensionPB_Entities_AppConfig.SearchConfig()}
//    set {_uniqueStorage()._searchConfig = newValue}
//  }
  /// Returns true if `searchConfig` has been explicitly set.
//  public var hasSearchConfig: Bool {return _storage._searchConfig != nil}
  /// Clears the value of `searchConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearSearchConfig() {_uniqueStorage()._searchConfig = nil}
//
  /// 首页 banner 的配置；banner：打开系统通知开关、加入更多人到组织……
//  public var bannerConfig: LarkNCExtensionPB_Entities_AppConfig.BannerConfig {
//    get {return _storage._bannerConfig ?? LarkNCExtensionPB_Entities_AppConfig.BannerConfig()}
//    set {_uniqueStorage()._bannerConfig = newValue}
//  }
  /// Returns true if `bannerConfig` has been explicitly set.
//  public var hasBannerConfig: Bool {return _storage._bannerConfig != nil}
  /// Clears the value of `bannerConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearBannerConfig() {_uniqueStorage()._bannerConfig = nil}
//
  /// 是否提供密聊功能
//  public var cryptoChatState: LarkNCExtensionPB_Entities_AppConfig.CryptoChatState {
//    get {return _storage._cryptoChatState ?? .unknown}
//    set {_uniqueStorage()._cryptoChatState = newValue}
//  }
  /// Returns true if `cryptoChatState` has been explicitly set.
//  public var hasCryptoChatState: Bool {return _storage._cryptoChatState != nil}
  /// Clears the value of `cryptoChatState`. Subsequent reads from it will return its default value.
//  public mutating func clearCryptoChatState() {_uniqueStorage()._cryptoChatState = nil}
//
//  public var lanTrans: LarkNCExtensionPB_Entities_AppConfig.LANTrans {
//    get {return _storage._lanTrans ?? LarkNCExtensionPB_Entities_AppConfig.LANTrans()}
//    set {_uniqueStorage()._lanTrans = newValue}
//  }
  /// Returns true if `lanTrans` has been explicitly set.
//  public var hasLanTrans: Bool {return _storage._lanTrans != nil}
  /// Clears the value of `lanTrans`. Subsequent reads from it will return its default value.
//  public mutating func clearLanTrans() {_uniqueStorage()._lanTrans = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum CryptoChatState: LarkHTTP.Enum {
//    public typealias RawValue = Int
//
    /// 这个情况下，如果本地已经有配置，应当保留，否则使用 Default 的配置
//    case unknown // = 0
//
    /// 允许收发密聊
//    case allow // = 1
//
    /// 不允许收发密聊
//    case block // = 2
//
    /// 当前状态是只可收，不能够发送，无法看到密聊入口
//    case `default` // = 3
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .allow
//      case 2: self = .block
//      case 3: self = .default
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .allow: return 1
//      case .block: return 2
//      case .default: return 3
//      }
//    }
//
//  }
//
//  public struct MessageConfig {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 最大消息撤回时长；单位分钟；默认 1 天
//    public var maxRecallTimeLimit: Int64 {
//      get {return _maxRecallTimeLimit ?? 1440}
//      set {_maxRecallTimeLimit = newValue}
//    }
    /// Returns true if `maxRecallTimeLimit` has been explicitly set.
//    public var hasMaxRecallTimeLimit: Bool {return self._maxRecallTimeLimit != nil}
    /// Clears the value of `maxRecallTimeLimit`. Subsequent reads from it will return its default value.
//    public mutating func clearMaxRecallTimeLimit() {self._maxRecallTimeLimit = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _maxRecallTimeLimit: Int64? = nil
//  }
//
//  public struct ChatConfig {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 群组最大人数
//    public var maxMemberCount: Int32 {
//      get {return _storage._maxMemberCount ?? 2000}
//      set {_uniqueStorage()._maxMemberCount = newValue}
//    }
    /// Returns true if `maxMemberCount` has been explicitly set.
//    public var hasMaxMemberCount: Bool {return _storage._maxMemberCount != nil}
    /// Clears the value of `maxMemberCount`. Subsequent reads from it will return its default value.
//    public mutating func clearMaxMemberCount() {_uniqueStorage()._maxMemberCount = nil}
//
    /// 群成员发言权限
//    public var postPermission: LarkNCExtensionPB_Entities_AppConfig.ChatConfig.ChatPostPermission {
//      get {return _storage._postPermission ?? LarkNCExtensionPB_Entities_AppConfig.ChatConfig.ChatPostPermission()}
//      set {_uniqueStorage()._postPermission = newValue}
//    }
    /// Returns true if `postPermission` has been explicitly set.
//    public var hasPostPermission: Bool {return _storage._postPermission != nil}
    /// Clears the value of `postPermission`. Subsequent reads from it will return its default value.
//    public mutating func clearPostPermission() {_uniqueStorage()._postPermission = nil}
//
    /// 撤回加人的有效期，单位小时
//    public var withdrawChatterExpirationByHour: Int32 {
//      get {return _storage._withdrawChatterExpirationByHour ?? 0}
//      set {_uniqueStorage()._withdrawChatterExpirationByHour = newValue}
//    }
    /// Returns true if `withdrawChatterExpirationByHour` has been explicitly set.
//    public var hasWithdrawChatterExpirationByHour: Bool {return _storage._withdrawChatterExpirationByHour != nil}
    /// Clears the value of `withdrawChatterExpirationByHour`. Subsequent reads from it will return its default value.
//    public mutating func clearWithdrawChatterExpirationByHour() {_uniqueStorage()._withdrawChatterExpirationByHour = nil}
//
    /// 群成员（非群主）创建外部群时，源chat最大成员数
//    public var maxOriginGroupChatUserCount4CreateExternalChat: Int32 {
//      get {return _storage._maxOriginGroupChatUserCount4CreateExternalChat ?? 0}
//      set {_uniqueStorage()._maxOriginGroupChatUserCount4CreateExternalChat = newValue}
//    }
    /// Returns true if `maxOriginGroupChatUserCount4CreateExternalChat` has been explicitly set.
//    public var hasMaxOriginGroupChatUserCount4CreateExternalChat: Bool {return _storage._maxOriginGroupChatUserCount4CreateExternalChat != nil}
    /// Clears the value of `maxOriginGroupChatUserCount4CreateExternalChat`. Subsequent reads from it will return its default value.
//    public mutating func clearMaxOriginGroupChatUserCount4CreateExternalChat() {_uniqueStorage()._maxOriginGroupChatUserCount4CreateExternalChat = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public struct ChatPostPermission {
      // LarkHTTP.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the LarkHTTP library for
      // methods supported on all messages.
//
      /// 是否可以在话题群设置群成员发言权限；todo 找 SDK 确认是否还在使用
//      public var openToThread: Bool {
//        get {return _openToThread ?? false}
//        set {_openToThread = newValue}
//      }
      /// Returns true if `openToThread` has been explicitly set.
//      public var hasOpenToThread: Bool {return self._openToThread != nil}
      /// Clears the value of `openToThread`. Subsequent reads from it will return its default value.
//      public mutating func clearOpenToThread() {self._openToThread = nil}
//
//      public var unknownFields = LarkHTTP.UnknownStorage()
//
//      public init() {}
//
//      fileprivate var _openToThread: Bool? = nil
//    }
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
  /// voip 心跳配置
//  public struct VoiceCallConfig {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 心跳周期；单位秒
//    public var heartbeatCycle: Int32 {
//      get {return _heartbeatCycle ?? 3}
//      set {_heartbeatCycle = newValue}
//    }
    /// Returns true if `heartbeatCycle` has been explicitly set.
//    public var hasHeartbeatCycle: Bool {return self._heartbeatCycle != nil}
    /// Clears the value of `heartbeatCycle`. Subsequent reads from it will return its default value.
//    public mutating func clearHeartbeatCycle() {self._heartbeatCycle = nil}
//
    /// 心跳过期时长；单位秒
//    public var heartbeatExpiredTime: Int32 {
//      get {return _heartbeatExpiredTime ?? 12}
//      set {_heartbeatExpiredTime = newValue}
//    }
    /// Returns true if `heartbeatExpiredTime` has been explicitly set.
//    public var hasHeartbeatExpiredTime: Bool {return self._heartbeatExpiredTime != nil}
    /// Clears the value of `heartbeatExpiredTime`. Subsequent reads from it will return its default value.
//    public mutating func clearHeartbeatExpiredTime() {self._heartbeatExpiredTime = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _heartbeatCycle: Int32? = nil
//    fileprivate var _heartbeatExpiredTime: Int32? = nil
//  }
//
//  public struct BillingPackageConfig {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    ///-1表示没有上限、服务出错会返回-1
    ///0-100 lark相关
    ///chat相关
//    public var chatNumberLimit: Int64 {
//      get {return _chatNumberLimit ?? -1}
//      set {_chatNumberLimit = newValue}
//    }
    /// Returns true if `chatNumberLimit` has been explicitly set.
//    public var hasChatNumberLimit: Bool {return self._chatNumberLimit != nil}
    /// Clears the value of `chatNumberLimit`. Subsequent reads from it will return its default value.
//    public mutating func clearChatNumberLimit() {self._chatNumberLimit = nil}
//
    /// 已废弃，使用「app_number_limit」；todo deprecated
//    public var chatBotLimit: Int64 {
//      get {return _chatBotLimit ?? -1}
//      set {_chatBotLimit = newValue}
//    }
    /// Returns true if `chatBotLimit` has been explicitly set.
//    public var hasChatBotLimit: Bool {return self._chatBotLimit != nil}
    /// Clears the value of `chatBotLimit`. Subsequent reads from it will return its default value.
//    public mutating func clearChatBotLimit() {self._chatBotLimit = nil}
//
    /// 添加应用的最大数量
//    public var appNumberLimit: Int64 {
//      get {return _appNumberLimit ?? -1}
//      set {_appNumberLimit = newValue}
//    }
    /// Returns true if `appNumberLimit` has been explicitly set.
//    public var hasAppNumberLimit: Bool {return self._appNumberLimit != nil}
    /// Clears the value of `appNumberLimit`. Subsequent reads from it will return its default value.
//    public mutating func clearAppNumberLimit() {self._appNumberLimit = nil}
//
    ///加急相关
//    public var buzzLimit: Int64 {
//      get {return _buzzLimit ?? -1}
//      set {_buzzLimit = newValue}
//    }
    /// Returns true if `buzzLimit` has been explicitly set.
//    public var hasBuzzLimit: Bool {return self._buzzLimit != nil}
    /// Clears the value of `buzzLimit`. Subsequent reads from it will return its default value.
//    public mutating func clearBuzzLimit() {self._buzzLimit = nil}
//
    /// 密聊相关
//    public var hasSecretChat_p: Bool {
//      get {return _hasSecretChat_p ?? true}
//      set {_hasSecretChat_p = newValue}
//    }
    /// Returns true if `hasSecretChat_p` has been explicitly set.
//    public var hasHasSecretChat_p: Bool {return self._hasSecretChat_p != nil}
    /// Clears the value of `hasSecretChat_p`. Subsequent reads from it will return its default value.
//    public mutating func clearHasSecretChat_p() {self._hasSecretChat_p = nil}
//
    ///100-199 doc 相关
//    public var docNumberLimit: Int64 {
//      get {return _docNumberLimit ?? -1}
//      set {_docNumberLimit = newValue}
//    }
    /// Returns true if `docNumberLimit` has been explicitly set.
//    public var hasDocNumberLimit: Bool {return self._docNumberLimit != nil}
    /// Clears the value of `docNumberLimit`. Subsequent reads from it will return its default value.
//    public mutating func clearDocNumberLimit() {self._docNumberLimit = nil}
//
    /// 200-299 视频会议相关
//    public var videochatParticipantLimit: Int64 {
//      get {return _videochatParticipantLimit ?? -1}
//      set {_videochatParticipantLimit = newValue}
//    }
    /// Returns true if `videochatParticipantLimit` has been explicitly set.
//    public var hasVideochatParticipantLimit: Bool {return self._videochatParticipantLimit != nil}
    /// Clears the value of `videochatParticipantLimit`. Subsequent reads from it will return its default value.
//    public mutating func clearVideochatParticipantLimit() {self._videochatParticipantLimit = nil}
//
    /// 视频会议时长限制
//    public var videochatDurationLimit: Int64 {
//      get {return _videochatDurationLimit ?? -1}
//      set {_videochatDurationLimit = newValue}
//    }
    /// Returns true if `videochatDurationLimit` has been explicitly set.
//    public var hasVideochatDurationLimit: Bool {return self._videochatDurationLimit != nil}
    /// Clears the value of `videochatDurationLimit`. Subsequent reads from it will return its default value.
//    public mutating func clearVideochatDurationLimit() {self._videochatDurationLimit = nil}
//
    /// 300-399 翻译相关
//    public var isOpenAutoTranslation: Bool {
//      get {return _isOpenAutoTranslation ?? true}
//      set {_isOpenAutoTranslation = newValue}
//    }
    /// Returns true if `isOpenAutoTranslation` has been explicitly set.
//    public var hasIsOpenAutoTranslation: Bool {return self._isOpenAutoTranslation != nil}
    /// Clears the value of `isOpenAutoTranslation`. Subsequent reads from it will return its default value.
//    public mutating func clearIsOpenAutoTranslation() {self._isOpenAutoTranslation = nil}
//
    ///400-499红包相关
//    public var isLarkHongbaoEnable: Bool {
//      get {return _isLarkHongbaoEnable ?? true}
//      set {_isLarkHongbaoEnable = newValue}
//    }
    /// Returns true if `isLarkHongbaoEnable` has been explicitly set.
//    public var hasIsLarkHongbaoEnable: Bool {return self._isLarkHongbaoEnable != nil}
    /// Clears the value of `isLarkHongbaoEnable`. Subsequent reads from it will return its default value.
//    public mutating func clearIsLarkHongbaoEnable() {self._isLarkHongbaoEnable = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _chatNumberLimit: Int64? = nil
//    fileprivate var _chatBotLimit: Int64? = nil
//    fileprivate var _appNumberLimit: Int64? = nil
//    fileprivate var _buzzLimit: Int64? = nil
//    fileprivate var _hasSecretChat_p: Bool? = nil
//    fileprivate var _docNumberLimit: Int64? = nil
//    fileprivate var _videochatParticipantLimit: Int64? = nil
//    fileprivate var _videochatDurationLimit: Int64? = nil
//    fileprivate var _isOpenAutoTranslation: Bool? = nil
//    fileprivate var _isLarkHongbaoEnable: Bool? = nil
//  }
//
//  public struct URLConfig {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 租户的 lark 域名，example: a.feishu.cn
//    public var domain: LarkNCExtensionPB_Entities_AppConfig.URLConfig.Domain {
//      get {return _storage._domain ?? LarkNCExtensionPB_Entities_AppConfig.URLConfig.Domain()}
//      set {_uniqueStorage()._domain = newValue}
//    }
    /// Returns true if `domain` has been explicitly set.
//    public var hasDomain: Bool {return _storage._domain != nil}
    /// Clears the value of `domain`. Subsequent reads from it will return its default value.
//    public mutating func clearDomain() {_uniqueStorage()._domain = nil}
//
    /// doc 域名列表（第一个最新的，其余是老域名做兼容）
//    public var docDomains: [LarkNCExtensionPB_Entities_AppConfig.URLConfig.Domain] {
//      get {return _storage._docDomains}
//      set {_uniqueStorage()._docDomains = newValue}
//    }
//
    /// 新建 doc 地址
//    public var createDocAddr: String {
//      get {return _storage._createDocAddr ?? String()}
//      set {_uniqueStorage()._createDocAddr = newValue}
//    }
    /// Returns true if `createDocAddr` has been explicitly set.
//    public var hasCreateDocAddr: Bool {return _storage._createDocAddr != nil}
    /// Clears the value of `createDocAddr`. Subsequent reads from it will return its default value.
//    public mutating func clearCreateDocAddr() {_uniqueStorage()._createDocAddr = nil}
//
    /// 客户端预览延迟；在这个时间后还没有获取服务端 URL 预览就在客户端预览；客户端 URL 预览功能处于未启用的状态，可能会废弃
//    public var urlPreviewTimeWait: Int32 {
//      get {return _storage._urlPreviewTimeWait ?? 1}
//      set {_uniqueStorage()._urlPreviewTimeWait = newValue}
//    }
    /// Returns true if `urlPreviewTimeWait` has been explicitly set.
//    public var hasURLPreviewTimeWait: Bool {return _storage._urlPreviewTimeWait != nil}
    /// Clears the value of `urlPreviewTimeWait`. Subsequent reads from it will return its default value.
//    public mutating func clearURLPreviewTimeWait() {_uniqueStorage()._urlPreviewTimeWait = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public struct Domain {
      // LarkHTTP.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the LarkHTTP library for
      // methods supported on all messages.
//
//      public var domain: String {
//        get {return _domain ?? String()}
//        set {_domain = newValue}
//      }
      /// Returns true if `domain` has been explicitly set.
//      public var hasDomain: Bool {return self._domain != nil}
      /// Clears the value of `domain`. Subsequent reads from it will return its default value.
//      public mutating func clearDomain() {self._domain = nil}
//
//      public var unknownFields = LarkHTTP.UnknownStorage()
//
//      public init() {}
//
//      fileprivate var _domain: String? = nil
//    }
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
  ///
  ///about_lark:
  ///"全部更新历史": "help-update-suite"
  ///"特色功能介绍": "help-key-feature"
  ///"最佳实践": "help-best-practice"
  ///"获取最新客户端": "help-latest-client"
  ///"软件用户协议":"help-user-agreement"
  ///"软件隐私政策": "help-private-policy"
  ///
  ///android 设置：
  ///"help-android-samsung"
  ///"help-android-oppo"
  ///"help-android-vivo"
  ///"help-android-lenovo"
  ///"help-android-zte"
  ///"help-android-smartisan"
  ///"help-android-xiaomi"
  ///
  ///功能帮助文档：
  ///"红包钱包帮助文档": "help-about-hongbao"  //Header 中带上语言设置
//  public struct Resource {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 文档资源地址列表；最佳实践、特色功能介绍……
//    public var addrs: Dictionary<String,String> = [:]
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public struct URLRegex {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// app_id to regex；SDK 据此识别特定类型的链接，实现特殊逻辑
//    public var regexes: Dictionary<Int32,String> = [:]
//
    /// 云空间免密登陆用 url 换取 token 的超时时间；单位毫秒，默认 300ms
//    public var timeOut: Int32 {
//      get {return _timeOut ?? 300}
//      set {_timeOut = newValue}
//    }
    /// Returns true if `timeOut` has been explicitly set.
//    public var hasTimeOut: Bool {return self._timeOut != nil}
    /// Clears the value of `timeOut`. Subsequent reads from it will return its default value.
//    public mutating func clearTimeOut() {self._timeOut = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _timeOut: Int32? = nil
//  }
//
//  public struct SearchConfig {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 外部搜索配置
//    public var externalSearches: [LarkNCExtensionPB_Entities_ExternalSearch] = []
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public struct Zendesk {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var entry: LarkNCExtensionPB_Entities_AppConfig.Zendesk.OneOf_Entry? = nil
//
    /// web 工单
//    public var webFormURL: String {
//      get {
//        if case .webFormURL(let v)? = entry {return v}
//        return String()
//      }
//      set {entry = .webFormURL(newValue)}
//    }
//
    /// 客服群开关；有客服群就不使用 web 工单
//    public var oncallChat: Bool {
//      get {
//        if case .oncallChat(let v)? = entry {return v}
//        return false
//      }
//      set {entry = .oncallChat(newValue)}
//    }
//
    /// 识别zendesk url，做特化跳转处理
//    public var pattern: String {
//      get {return _pattern ?? String()}
//      set {_pattern = newValue}
//    }
    /// Returns true if `pattern` has been explicitly set.
//    public var hasPattern: Bool {return self._pattern != nil}
    /// Clears the value of `pattern`. Subsequent reads from it will return its default value.
//    public mutating func clearPattern() {self._pattern = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum OneOf_Entry: Equatable {
      /// web 工单
//      case webFormURL(String)
      /// 客服群开关；有客服群就不使用 web 工单
//      case oncallChat(Bool)
//
//    #if !swift(>=4.1)
//      public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig.Zendesk.OneOf_Entry, rhs: LarkNCExtensionPB_Entities_AppConfig.Zendesk.OneOf_Entry) -> Bool {
//        switch (lhs, rhs) {
//        case (.webFormURL(let l), .webFormURL(let r)): return l == r
//        case (.oncallChat(let l), .oncallChat(let r)): return l == r
//        default: return false
//        }
//      }
//    #endif
//    }
//
//    public init() {}
//
//    fileprivate var _pattern: String? = nil
//  }
//
//  public struct BannerConfig {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// "提示打开系统通知开关" banner 关闭后下次再弹出的延迟时间，单位分钟
//    public var notificationRefreshTime: Int32 {
//      get {return _notificationRefreshTime ?? 0}
//      set {_notificationRefreshTime = newValue}
//    }
    /// Returns true if `notificationRefreshTime` has been explicitly set.
//    public var hasNotificationRefreshTime: Bool {return self._notificationRefreshTime != nil}
    /// Clears the value of `notificationRefreshTime`. Subsequent reads from it will return its default value.
//    public mutating func clearNotificationRefreshTime() {self._notificationRefreshTime = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _notificationRefreshTime: Int32? = nil
//  }
//
//  public struct LANTrans {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 局域网传输的文件大小阈值，超过阈值则自动用局域网传输文件
//    public var lanTransMinSizeMb: Int32 {
//      get {return _lanTransMinSizeMb ?? 0}
//      set {_lanTransMinSizeMb = newValue}
//    }
    /// Returns true if `lanTransMinSizeMb` has been explicitly set.
//    public var hasLanTransMinSizeMb: Bool {return self._lanTransMinSizeMb != nil}
    /// Clears the value of `lanTransMinSizeMb`. Subsequent reads from it will return its default value.
//    public mutating func clearLanTransMinSizeMb() {self._lanTransMinSizeMb = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _lanTransMinSizeMb: Int32? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_AppConfig.CryptoChatState: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// App Config
//public struct LarkNCExtensionPB_Entities_AppConfigV2 {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var version: Int64 {
//    get {return _storage._version ?? 0}
//    set {_uniqueStorage()._version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {_uniqueStorage()._version = nil}
//
//  public var updateTime: Int64 {
//    get {return _storage._updateTime ?? 0}
//    set {_uniqueStorage()._updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}
//
//  public var section: LarkNCExtensionPB_Entities_AppConfigV2.Section {
//    get {return _storage._section ?? LarkNCExtensionPB_Entities_AppConfigV2.Section()}
//    set {_uniqueStorage()._section = newValue}
//  }
  /// Returns true if `section` has been explicitly set.
//  public var hasSection: Bool {return _storage._section != nil}
  /// Clears the value of `section`. Subsequent reads from it will return its default value.
//  public mutating func clearSection() {_uniqueStorage()._section = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum Source: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//
    /// 默认配置源
//    case `default` // = 1
//
    /// 精简模式
//    case leanMode // = 2
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .default
//      case 2: self = .leanMode
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .default: return 1
//      case .leanMode: return 2
//      }
//    }
//
//  }
//
//  public struct FeatureConf {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 当前Feature是否开启
//    public var isOn: Bool {
//      get {return _isOn ?? false}
//      set {_isOn = newValue}
//    }
    /// Returns true if `isOn` has been explicitly set.
//    public var hasIsOn: Bool {return self._isOn != nil}
    /// Clears the value of `isOn`. Subsequent reads from it will return its default value.
//    public mutating func clearIsOn() {self._isOn = nil}
//
    /// Feature相关参数 json
//    public var traits: String {
//      get {return _traits ?? String()}
//      set {_traits = newValue}
//    }
    /// Returns true if `traits` has been explicitly set.
//    public var hasTraits: Bool {return self._traits != nil}
    /// Clears the value of `traits`. Subsequent reads from it will return its default value.
//    public mutating func clearTraits() {self._traits = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _isOn: Bool? = nil
//    fileprivate var _traits: String? = nil
//  }
//
//  public struct Section {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// FeatureKey => FeatureConf
//    public var features: Dictionary<String,LarkNCExtensionPB_Entities_AppConfigV2.FeatureConf> = [:]
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_AppConfigV2.Source: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 新消息通知设置
//public struct LarkNCExtensionPB_Entities_NotificationSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var method: OneOf_Method? {
//    get {return _storage._method}
//    set {_uniqueStorage()._method = newValue}
//  }
//
  /// 接收全部新消息提醒
//  public var all: Bool {
//    get {
//      if case .all(let v)? = _storage._method {return v}
//      return false
//    }
//    set {_uniqueStorage()._method = .all(newValue)}
//  }
//
  /// 接收部分新消息提醒
//  public var specificMessages: LarkNCExtensionPB_Entities_NotificationSetting.SpecificNotification {
//    get {
//      if case .specificMessages(let v)? = _storage._method {return v}
//      return LarkNCExtensionPB_Entities_NotificationSetting.SpecificNotification()
//    }
//    set {_uniqueStorage()._method = .specificMessages(newValue)}
//  }
//
  /// 无新消息通知
//  public var noNotificaion: Bool {
//    get {
//      if case .noNotificaion(let v)? = _storage._method {return v}
//      return false
//    }
//    set {_uniqueStorage()._method = .noNotificaion(newValue)}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum OneOf_Method: Equatable {
    /// 接收全部新消息提醒
//    case all(Bool)
    /// 接收部分新消息提醒
//    case specificMessages(LarkNCExtensionPB_Entities_NotificationSetting.SpecificNotification)
    /// 无新消息通知
//    case noNotificaion(Bool)
//
//  #if !swift(>=4.1)
//    public static func ==(lhs: LarkNCExtensionPB_Entities_NotificationSetting.OneOf_Method, rhs: LarkNCExtensionPB_Entities_NotificationSetting.OneOf_Method) -> Bool {
//      switch (lhs, rhs) {
//      case (.all(let l), .all(let r)): return l == r
//      case (.specificMessages(let l), .specificMessages(let r)): return l == r
//      case (.noNotificaion(let l), .noNotificaion(let r)): return l == r
//      default: return false
//      }
//    }
//  #endif
//  }
//
//  public struct SpecificNotification {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// @ 消息开关
//    public var mention: Bool {
//      get {return _mention ?? false}
//      set {_mention = newValue}
//    }
    /// Returns true if `mention` has been explicitly set.
//    public var hasMention: Bool {return self._mention != nil}
    /// Clears the value of `mention`. Subsequent reads from it will return its default value.
//    public mutating func clearMention() {self._mention = nil}
//
    /// 加急消息开关
//    public var buzz: Bool {
//      get {return _buzz ?? false}
//      set {_buzz = newValue}
//    }
    /// Returns true if `buzz` has been explicitly set.
//    public var hasBuzz: Bool {return self._buzz != nil}
    /// Clears the value of `buzz`. Subsequent reads from it will return its default value.
//    public mutating func clearBuzz() {self._buzz = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _mention: Bool? = nil
//    fileprivate var _buzz: Bool? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// messenger notification setting
//public struct LarkNCExtensionPB_Entities_MessengerNotificationSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var switchState: LarkNCExtensionPB_Entities_MessengerNotificationSetting.SwithState {
//    get {return _storage._switchState ?? .unknownState}
//    set {_uniqueStorage()._switchState = newValue}
//  }
  /// Returns true if `switchState` has been explicitly set.
//  public var hasSwitchState: Bool {return _storage._switchState != nil}
  /// Clears the value of `switchState`. Subsequent reads from it will return its default value.
//  public mutating func clearSwitchState() {_uniqueStorage()._switchState = nil}
//
  /// notification for buzz
//  public var buzzOpen: Bool {
//    get {return _storage._buzzOpen ?? false}
//    set {_uniqueStorage()._buzzOpen = newValue}
//  }
  /// Returns true if `buzzOpen` has been explicitly set.
//  public var hasBuzzOpen: Bool {return _storage._buzzOpen != nil}
  /// Clears the value of `buzzOpen`. Subsequent reads from it will return its default value.
//  public mutating func clearBuzzOpen() {_uniqueStorage()._buzzOpen = nil}
//
  /// notification for reaction
//  public var reactionOpen: Bool {
//    get {return _storage._reactionOpen ?? false}
//    set {_uniqueStorage()._reactionOpen = newValue}
//  }
  /// Returns true if `reactionOpen` has been explicitly set.
//  public var hasReactionOpen: Bool {return _storage._reactionOpen != nil}
  /// Clears the value of `reactionOpen`. Subsequent reads from it will return its default value.
//  public mutating func clearReactionOpen() {_uniqueStorage()._reactionOpen = nil}
//
  /// notification for msg
//  public var mentionOpen: Bool {
//    get {return _storage._mentionOpen ?? false}
//    set {_uniqueStorage()._mentionOpen = newValue}
//  }
  /// Returns true if `mentionOpen` has been explicitly set.
//  public var hasMentionOpen: Bool {return _storage._mentionOpen != nil}
  /// Clears the value of `mentionOpen`. Subsequent reads from it will return its default value.
//  public mutating func clearMentionOpen() {_uniqueStorage()._mentionOpen = nil}
//
//  public var p2PChatOpen: Bool {
//    get {return _storage._p2PChatOpen ?? false}
//    set {_uniqueStorage()._p2PChatOpen = newValue}
//  }
  /// Returns true if `p2PChatOpen` has been explicitly set.
//  public var hasP2PChatOpen: Bool {return _storage._p2PChatOpen != nil}
  /// Clears the value of `p2PChatOpen`. Subsequent reads from it will return its default value.
//  public mutating func clearP2PChatOpen() {_uniqueStorage()._p2PChatOpen = nil}
//
//  public var groupChatOpen: Bool {
//    get {return _storage._groupChatOpen ?? false}
//    set {_uniqueStorage()._groupChatOpen = newValue}
//  }
  /// Returns true if `groupChatOpen` has been explicitly set.
//  public var hasGroupChatOpen: Bool {return _storage._groupChatOpen != nil}
  /// Clears the value of `groupChatOpen`. Subsequent reads from it will return its default value.
//  public mutating func clearGroupChatOpen() {_uniqueStorage()._groupChatOpen = nil}
//
  /// 单聊消息
//  public var userP2PChatOpen: Bool {
//    get {return _storage._userP2PChatOpen ?? false}
//    set {_uniqueStorage()._userP2PChatOpen = newValue}
//  }
  /// Returns true if `userP2PChatOpen` has been explicitly set.
//  public var hasUserP2PChatOpen: Bool {return _storage._userP2PChatOpen != nil}
  /// Clears the value of `userP2PChatOpen`. Subsequent reads from it will return its default value.
//  public mutating func clearUserP2PChatOpen() {_uniqueStorage()._userP2PChatOpen = nil}
//
  /// @所有人的消息
//  public var mentionAllOpen: Bool {
//    get {return _storage._mentionAllOpen ?? false}
//    set {_uniqueStorage()._mentionAllOpen = newValue}
//  }
  /// Returns true if `mentionAllOpen` has been explicitly set.
//  public var hasMentionAllOpen: Bool {return _storage._mentionAllOpen != nil}
  /// Clears the value of `mentionAllOpen`. Subsequent reads from it will return its default value.
//  public mutating func clearMentionAllOpen() {_uniqueStorage()._mentionAllOpen = nil}
//
  /// 星标联系人
//  public var specialFocusOpen: Bool {
//    get {return _storage._specialFocusOpen ?? true}
//    set {_uniqueStorage()._specialFocusOpen = newValue}
//  }
  /// Returns true if `specialFocusOpen` has been explicitly set.
//  public var hasSpecialFocusOpen: Bool {return _storage._specialFocusOpen != nil}
  /// Clears the value of `specialFocusOpen`. Subsequent reads from it will return its default value.
//  public mutating func clearSpecialFocusOpen() {_uniqueStorage()._specialFocusOpen = nil}
//
  /// 星标联系人相关的设置
//  public var specialFocusSetting: LarkNCExtensionPB_Entities_MessengerNotificationSetting.SpecialFocus {
//    get {return _storage._specialFocusSetting ?? LarkNCExtensionPB_Entities_MessengerNotificationSetting.SpecialFocus()}
//    set {_uniqueStorage()._specialFocusSetting = newValue}
//  }
  /// Returns true if `specialFocusSetting` has been explicitly set.
//  public var hasSpecialFocusSetting: Bool {return _storage._specialFocusSetting != nil}
  /// Clears the value of `specialFocusSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearSpecialFocusSetting() {_uniqueStorage()._specialFocusSetting = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum SwithState: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownState // = 0
//
    /// 关闭
//    case closed // = 1
//
    /// 部分打开
//    case halfOpen // = 2
//
    /// 全开
//    case `open` // = 3
//
//    public init() {
//      self = .unknownState
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownState
//      case 1: self = .closed
//      case 2: self = .halfOpen
//      case 3: self = .open
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownState: return 0
//      case .closed: return 1
//      case .halfOpen: return 2
//      case .open: return 3
//      }
//    }
//
//  }
//
  /// 星标联系人通知设置
//  public struct SpecialFocus {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 会话免打扰依然提醒
//    public var noticeInMuteChat: Bool {
//      get {return _noticeInMuteChat ?? true}
//      set {_noticeInMuteChat = newValue}
//    }
    /// Returns true if `noticeInMuteChat` has been explicitly set.
//    public var hasNoticeInMuteChat: Bool {return self._noticeInMuteChat != nil}
    /// Clears the value of `noticeInMuteChat`. Subsequent reads from it will return its default value.
//    public mutating func clearNoticeInMuteChat() {self._noticeInMuteChat = nil}
//
    /// 通知静音依然提醒
//    public var noticeInMuteMode: Bool {
//      get {return _noticeInMuteMode ?? true}
//      set {_noticeInMuteMode = newValue}
//    }
    /// Returns true if `noticeInMuteMode` has been explicitly set.
//    public var hasNoticeInMuteMode: Bool {return self._noticeInMuteMode != nil}
    /// Clears the value of `noticeInMuteMode`. Subsequent reads from it will return its default value.
//    public mutating func clearNoticeInMuteMode() {self._noticeInMuteMode = nil}
//
    /// 在会话盒子中依然提醒
//    public var noticeInChatBox: Bool {
//      get {return _noticeInChatBox ?? true}
//      set {_noticeInChatBox = newValue}
//    }
    /// Returns true if `noticeInChatBox` has been explicitly set.
//    public var hasNoticeInChatBox: Bool {return self._noticeInChatBox != nil}
    /// Clears the value of `noticeInChatBox`. Subsequent reads from it will return its default value.
//    public mutating func clearNoticeInChatBox() {self._noticeInChatBox = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _noticeInMuteChat: Bool? = nil
//    fileprivate var _noticeInMuteMode: Bool? = nil
//    fileprivate var _noticeInChatBox: Bool? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_MessengerNotificationSetting.SwithState: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_UserNotificationSettingV3 {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var commonNotificationSetting: LarkNCExtensionPB_Entities_UserNotificationSettingV3.CommonNotificationSetting {
//    get {return _storage._commonNotificationSetting ?? LarkNCExtensionPB_Entities_UserNotificationSettingV3.CommonNotificationSetting()}
//    set {_uniqueStorage()._commonNotificationSetting = newValue}
//  }
  /// Returns true if `commonNotificationSetting` has been explicitly set.
//  public var hasCommonNotificationSetting: Bool {return _storage._commonNotificationSetting != nil}
  /// Clears the value of `commonNotificationSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearCommonNotificationSetting() {_uniqueStorage()._commonNotificationSetting = nil}
//
  /// 重要联系人相关的设置
//  public var specialFocusSetting: LarkNCExtensionPB_Entities_MessengerNotificationSetting.SpecialFocus {
//    get {return _storage._specialFocusSetting ?? LarkNCExtensionPB_Entities_MessengerNotificationSetting.SpecialFocus()}
//    set {_uniqueStorage()._specialFocusSetting = newValue}
//  }
  /// Returns true if `specialFocusSetting` has been explicitly set.
//  public var hasSpecialFocusSetting: Bool {return _storage._specialFocusSetting != nil}
  /// Clears the value of `specialFocusSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearSpecialFocusSetting() {_uniqueStorage()._specialFocusSetting = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
  /// 通知普通设置（全部新消息，部分新消息，全部不通知）
//  public struct CommonNotificationSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 预留1-8，作为后续迁移旧通知
//    public var specialFocusOpen: Bool {
//      get {return _specialFocusOpen ?? false}
//      set {_specialFocusOpen = newValue}
//    }
    /// Returns true if `specialFocusOpen` has been explicitly set.
//    public var hasSpecialFocusOpen: Bool {return self._specialFocusOpen != nil}
    /// Clears the value of `specialFocusOpen`. Subsequent reads from it will return its default value.
//    public mutating func clearSpecialFocusOpen() {self._specialFocusOpen = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _specialFocusOpen: Bool? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// drive notification setting
//public struct LarkNCExtensionPB_Entities_DriveNotificationSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var notifyOpen: Bool {
//    get {return _notifyOpen ?? false}
//    set {_notifyOpen = newValue}
//  }
  /// Returns true if `notifyOpen` has been explicitly set.
//  public var hasNotifyOpen: Bool {return self._notifyOpen != nil}
  /// Clears the value of `notifyOpen`. Subsequent reads from it will return its default value.
//  public mutating func clearNotifyOpen() {self._notifyOpen = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _notifyOpen: Bool? = nil
//}

/// notification setting v2, include messenger && drive
//public struct LarkNCExtensionPB_Entities_NotificationSettingV2 {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var messengerSetting: Data {
//    get {return _messengerSetting ?? LarkHTTP.Internal.emptyData}
//    set {_messengerSetting = newValue}
//  }
  /// Returns true if `messengerSetting` has been explicitly set.
//  public var hasMessengerSetting: Bool {return self._messengerSetting != nil}
  /// Clears the value of `messengerSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearMessengerSetting() {self._messengerSetting = nil}
//
//  public var driveSetting: Data {
//    get {return _driveSetting ?? LarkHTTP.Internal.emptyData}
//    set {_driveSetting = newValue}
//  }
  /// Returns true if `driveSetting` has been explicitly set.
//  public var hasDriveSetting: Bool {return self._driveSetting != nil}
  /// Clears the value of `driveSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearDriveSetting() {self._driveSetting = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _messengerSetting: Data? = nil
//  fileprivate var _driveSetting: Data? = nil
//}

/// 用户个人设置
//public struct LarkNCExtensionPB_Entities_UserSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 工作状态相关设置
//  public var workStatusSetting: LarkNCExtensionPB_Entities_UserSetting.WorkStatusSetting {
//    get {return _storage._workStatusSetting ?? LarkNCExtensionPB_Entities_UserSetting.WorkStatusSetting()}
//    set {_uniqueStorage()._workStatusSetting = newValue}
//  }
  /// Returns true if `workStatusSetting` has been explicitly set.
//  public var hasWorkStatusSetting: Bool {return _storage._workStatusSetting != nil}
  /// Clears the value of `workStatusSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearWorkStatusSetting() {_uniqueStorage()._workStatusSetting = nil}
//
  /// 会话未读信息的角标设置
//  public var badgeSetting: LarkNCExtensionPB_Entities_UserSetting.BadgeSetting {
//    get {return _storage._badgeSetting ?? LarkNCExtensionPB_Entities_UserSetting.BadgeSetting()}
//    set {_uniqueStorage()._badgeSetting = newValue}
//  }
  /// Returns true if `badgeSetting` has been explicitly set.
//  public var hasBadgeSetting: Bool {return _storage._badgeSetting != nil}
  /// Clears the value of `badgeSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearBadgeSetting() {_uniqueStorage()._badgeSetting = nil}
//
  /// 新消息通知设置
//  public var notificationSetting: LarkNCExtensionPB_Entities_NotificationSetting {
//    get {return _storage._notificationSetting ?? LarkNCExtensionPB_Entities_NotificationSetting()}
//    set {_uniqueStorage()._notificationSetting = newValue}
//  }
  /// Returns true if `notificationSetting` has been explicitly set.
//  public var hasNotificationSetting: Bool {return _storage._notificationSetting != nil}
  /// Clears the value of `notificationSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearNotificationSetting() {_uniqueStorage()._notificationSetting = nil}
//
  /// 时间格式设置
//  public var timeFormatSetting: LarkNCExtensionPB_Entities_UserSetting.TimeFormatSetting {
//    get {return _storage._timeFormatSetting ?? LarkNCExtensionPB_Entities_UserSetting.TimeFormatSetting()}
//    set {_uniqueStorage()._timeFormatSetting = newValue}
//  }
  /// Returns true if `timeFormatSetting` has been explicitly set.
//  public var hasTimeFormatSetting: Bool {return _storage._timeFormatSetting != nil}
  /// Clears the value of `timeFormatSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearTimeFormatSetting() {_uniqueStorage()._timeFormatSetting = nil}
//
  /// 自动语音转文字的开关
//  public var autoAudioToText: Bool {
//    get {return _storage._autoAudioToText ?? false}
//    set {_uniqueStorage()._autoAudioToText = newValue}
//  }
  /// Returns true if `autoAudioToText` has been explicitly set.
//  public var hasAutoAudioToText: Bool {return _storage._autoAudioToText != nil}
  /// Clears the value of `autoAudioToText`. Subsequent reads from it will return its default value.
//  public mutating func clearAutoAudioToText() {_uniqueStorage()._autoAudioToText = nil}
//
  /// 短信、电话加急设置
//  public var smsPhoneUrgentSetting: LarkNCExtensionPB_Entities_UserSetting.SmsPhoneUrgentSetting {
//    get {return _storage._smsPhoneUrgentSetting ?? LarkNCExtensionPB_Entities_UserSetting.SmsPhoneUrgentSetting()}
//    set {_uniqueStorage()._smsPhoneUrgentSetting = newValue}
//  }
  /// Returns true if `smsPhoneUrgentSetting` has been explicitly set.
//  public var hasSmsPhoneUrgentSetting: Bool {return _storage._smsPhoneUrgentSetting != nil}
  /// Clears the value of `smsPhoneUrgentSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearSmsPhoneUrgentSetting() {_uniqueStorage()._smsPhoneUrgentSetting = nil}
//
  /// 更新时间时间戳（毫秒）
//  public var updateTimeMs: Int64 {
//    get {return _storage._updateTimeMs ?? 0}
//    set {_uniqueStorage()._updateTimeMs = newValue}
//  }
  /// Returns true if `updateTimeMs` has been explicitly set.
//  public var hasUpdateTimeMs: Bool {return _storage._updateTimeMs != nil}
  /// Clears the value of `updateTimeMs`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTimeMs() {_uniqueStorage()._updateTimeMs = nil}
//
  /// 勿扰模式，在该时间戳前保持勿扰（毫秒时间戳，0 表示退出勿扰模式）
//  public var donotDisturbBeforeMs: Int64 {
//    get {return _storage._donotDisturbBeforeMs ?? 0}
//    set {_uniqueStorage()._donotDisturbBeforeMs = newValue}
//  }
  /// Returns true if `donotDisturbBeforeMs` has been explicitly set.
//  public var hasDonotDisturbBeforeMs: Bool {return _storage._donotDisturbBeforeMs != nil}
  /// Clears the value of `donotDisturbBeforeMs`. Subsequent reads from it will return its default value.
//  public mutating func clearDonotDisturbBeforeMs() {_uniqueStorage()._donotDisturbBeforeMs = nil}
//
  /// 会话相关设置
//  public var feedSetting: LarkNCExtensionPB_Entities_UserSetting.FeedSetting {
//    get {return _storage._feedSetting ?? LarkNCExtensionPB_Entities_UserSetting.FeedSetting()}
//    set {_uniqueStorage()._feedSetting = newValue}
//  }
  /// Returns true if `feedSetting` has been explicitly set.
//  public var hasFeedSetting: Bool {return _storage._feedSetting != nil}
  /// Clears the value of `feedSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearFeedSetting() {_uniqueStorage()._feedSetting = nil}
//
  /// 通知设置
//  public var notificationSettingV2: LarkNCExtensionPB_Entities_NotificationSettingV2 {
//    get {return _storage._notificationSettingV2 ?? LarkNCExtensionPB_Entities_NotificationSettingV2()}
//    set {_uniqueStorage()._notificationSettingV2 = newValue}
//  }
  /// Returns true if `notificationSettingV2` has been explicitly set.
//  public var hasNotificationSettingV2: Bool {return _storage._notificationSettingV2 != nil}
  /// Clears the value of `notificationSettingV2`. Subsequent reads from it will return its default value.
//  public mutating func clearNotificationSettingV2() {_uniqueStorage()._notificationSettingV2 = nil}
//
  ///会议消息勿扰详情： https://bytedance.feishu.cn/docs/doccnkQ6Hy2npXFkf2SPth9iNce#
//  public var messageNotificationsOffDuringCalls: Bool {
//    get {return _storage._messageNotificationsOffDuringCalls ?? true}
//    set {_uniqueStorage()._messageNotificationsOffDuringCalls = newValue}
//  }
  /// Returns true if `messageNotificationsOffDuringCalls` has been explicitly set.
//  public var hasMessageNotificationsOffDuringCalls: Bool {return _storage._messageNotificationsOffDuringCalls != nil}
  /// Clears the value of `messageNotificationsOffDuringCalls`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageNotificationsOffDuringCalls() {_uniqueStorage()._messageNotificationsOffDuringCalls = nil}
//
  /// 导航栏是否展示勿扰的会话 badge
//  public var navigationShowMuteBadge: Bool {
//    get {return _storage._navigationShowMuteBadge ?? true}
//    set {_uniqueStorage()._navigationShowMuteBadge = newValue}
//  }
  /// Returns true if `navigationShowMuteBadge` has been explicitly set.
//  public var hasNavigationShowMuteBadge: Bool {return _storage._navigationShowMuteBadge != nil}
  /// Clears the value of `navigationShowMuteBadge`. Subsequent reads from it will return its default value.
//  public mutating func clearNavigationShowMuteBadge() {_uniqueStorage()._navigationShowMuteBadge = nil}
//
//  public var externalDisplayTimezoneSetting: LarkNCExtensionPB_Entities_UserSetting.ExternalDisplayTimezoneSetting {
//    get {return _storage._externalDisplayTimezoneSetting ?? LarkNCExtensionPB_Entities_UserSetting.ExternalDisplayTimezoneSetting()}
//    set {_uniqueStorage()._externalDisplayTimezoneSetting = newValue}
//  }
  /// Returns true if `externalDisplayTimezoneSetting` has been explicitly set.
//  public var hasExternalDisplayTimezoneSetting: Bool {return _storage._externalDisplayTimezoneSetting != nil}
  /// Clears the value of `externalDisplayTimezoneSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearExternalDisplayTimezoneSetting() {_uniqueStorage()._externalDisplayTimezoneSetting = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public struct WorkStatusSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 用户工作状态发生变更，通知其他人的开关
//    public var shouldNotifyWorkStatus: Bool {
//      get {return _shouldNotifyWorkStatus ?? true}
//      set {_shouldNotifyWorkStatus = newValue}
//    }
    /// Returns true if `shouldNotifyWorkStatus` has been explicitly set.
//    public var hasShouldNotifyWorkStatus: Bool {return self._shouldNotifyWorkStatus != nil}
    /// Clears the value of `shouldNotifyWorkStatus`. Subsequent reads from it will return its default value.
//    public mutating func clearShouldNotifyWorkStatus() {self._shouldNotifyWorkStatus = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _shouldNotifyWorkStatus: Bool? = nil
//  }
//
//  public struct BadgeSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// badge 样式
//    public var style: LarkNCExtensionPB_Entities_UserSetting.BadgeSetting.Style {
//      get {return _style ?? .default}
//      set {_style = newValue}
//    }
    /// Returns true if `style` has been explicitly set.
//    public var hasStyle: Bool {return self._style != nil}
    /// Clears the value of `style`. Subsequent reads from it will return its default value.
//    public mutating func clearStyle() {self._style = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Style: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 普通会话：红背景数字；免打扰会话：灰背景数字
//      case `default` // = 1
//
      /// 普通会话：红背景数字；免打扰会话：红点
//      case redPoint // = 2
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .default
//        case 2: self = .redPoint
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .default: return 1
//        case .redPoint: return 2
//        }
//      }
//
//    }
//
//    public init() {}
//
//    fileprivate var _style: LarkNCExtensionPB_Entities_UserSetting.BadgeSetting.Style? = nil
//  }
//
  /// 对外展示时区设置
//  public struct ExternalDisplayTimezoneSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 是否跟随系统，默认为 false
//    public var followSystem: Bool {
//      get {return _followSystem ?? false}
//      set {_followSystem = newValue}
//    }
    /// Returns true if `followSystem` has been explicitly set.
//    public var hasFollowSystem: Bool {return self._followSystem != nil}
    /// Clears the value of `followSystem`. Subsequent reads from it will return its default value.
//    public mutating func clearFollowSystem() {self._followSystem = nil}
//
    /// 对外展示时区，从 chatter.timezone 中获取
//    public var timezone: String {
//      get {return _timezone ?? String()}
//      set {_timezone = newValue}
//    }
    /// Returns true if `timezone` has been explicitly set.
//    public var hasTimezone: Bool {return self._timezone != nil}
    /// Clears the value of `timezone`. Subsequent reads from it will return its default value.
//    public mutating func clearTimezone() {self._timezone = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _followSystem: Bool? = nil
//    fileprivate var _timezone: String? = nil
//  }
//
//  public struct TimeFormatSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var timeFormat: LarkNCExtensionPB_Entities_UserSetting.TimeFormatSetting.TimeFormat {
//      get {return _timeFormat ?? .twelveHour}
//      set {_timeFormat = newValue}
//    }
    /// Returns true if `timeFormat` has been explicitly set.
//    public var hasTimeFormat: Bool {return self._timeFormat != nil}
    /// Clears the value of `timeFormat`. Subsequent reads from it will return its default value.
//    public mutating func clearTimeFormat() {self._timeFormat = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum TimeFormat: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 12 小时制
//      case twelveHour // = 1
//
      /// 24 小时制
//      case twentyFourHour // = 2
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .twelveHour
//        case 2: self = .twentyFourHour
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .twelveHour: return 1
//        case .twentyFourHour: return 2
//        }
//      }
//
//    }
//
//    public init() {}
//
//    fileprivate var _timeFormat: LarkNCExtensionPB_Entities_UserSetting.TimeFormatSetting.TimeFormat? = nil
//  }
//
//  public struct SmsPhoneUrgentSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 是否接受短信、电话加急
//    public var accept: Bool {
//      get {return _accept ?? false}
//      set {_accept = newValue}
//    }
    /// Returns true if `accept` has been explicitly set.
//    public var hasAccept: Bool {return self._accept != nil}
    /// Clears the value of `accept`. Subsequent reads from it will return its default value.
//    public mutating func clearAccept() {self._accept = nil}
//
    /// 是否可以修改 accept；客户端仅接收不修改该字段
//    public var canModify: Bool {
//      get {return _canModify ?? false}
//      set {_canModify = newValue}
//    }
    /// Returns true if `canModify` has been explicitly set.
//    public var hasCanModify: Bool {return self._canModify != nil}
    /// Clears the value of `canModify`. Subsequent reads from it will return its default value.
//    public mutating func clearCanModify() {self._canModify = nil}
//
    /// 打开 accept 时需要弹窗确认（特殊地区的免责声明）；客户端仅接收不修改该字段
//    public var needConfirm: Bool {
//      get {return _needConfirm ?? false}
//      set {_needConfirm = newValue}
//    }
    /// Returns true if `needConfirm` has been explicitly set.
//    public var hasNeedConfirm: Bool {return self._needConfirm != nil}
    /// Clears the value of `needConfirm`. Subsequent reads from it will return its default value.
//    public mutating func clearNeedConfirm() {self._needConfirm = nil}
//
    /// 是否允许发送短信、电话加急
//    public var canSend: Bool {
//      get {return _canSend ?? false}
//      set {_canSend = newValue}
//    }
    /// Returns true if `canSend` has been explicitly set.
//    public var hasCanSend: Bool {return self._canSend != nil}
    /// Clears the value of `canSend`. Subsequent reads from it will return its default value.
//    public mutating func clearCanSend() {self._canSend = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _accept: Bool? = nil
//    fileprivate var _canModify: Bool? = nil
//    fileprivate var _needConfirm: Bool? = nil
//    fileprivate var _canSend: Bool? = nil
//  }
//
//  public struct FeedSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// deprecated，自动把不常用会话加入会话盒子的开关
//    public var isOpenAutoBox: Bool {
//      get {return _isOpenAutoBox ?? false}
//      set {_isOpenAutoBox = newValue}
//    }
    /// Returns true if `isOpenAutoBox` has been explicitly set.
//    public var hasIsOpenAutoBox: Bool {return self._isOpenAutoBox != nil}
    /// Clears the value of `isOpenAutoBox`. Subsequent reads from it will return its default value.
//    public mutating func clearIsOpenAutoBox() {self._isOpenAutoBox = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _isOpenAutoBox: Bool? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_SecurityConfig {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 端上数据最大缓存时间
//  public var dataCacheExpirationConfig: LarkNCExtensionPB_Entities_SecurityConfig.DataCacheExpirationConfig {
//    get {return _storage._dataCacheExpirationConfig ?? LarkNCExtensionPB_Entities_SecurityConfig.DataCacheExpirationConfig()}
//    set {_uniqueStorage()._dataCacheExpirationConfig = newValue}
//  }
  /// Returns true if `dataCacheExpirationConfig` has been explicitly set.
//  public var hasDataCacheExpirationConfig: Bool {return _storage._dataCacheExpirationConfig != nil}
  /// Clears the value of `dataCacheExpirationConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearDataCacheExpirationConfig() {_uniqueStorage()._dataCacheExpirationConfig = nil}
//
  /// 水印开关
//  public var enableWatermark: Bool {
//    get {return _storage._enableWatermark ?? false}
//    set {_uniqueStorage()._enableWatermark = newValue}
//  }
  /// Returns true if `enableWatermark` has been explicitly set.
//  public var hasEnableWatermark: Bool {return _storage._enableWatermark != nil}
  /// Clears the value of `enableWatermark`. Subsequent reads from it will return its default value.
//  public mutating func clearEnableWatermark() {_uniqueStorage()._enableWatermark = nil}
//
  /// 用户设备离线后，数据保存多长时间，单位秒（s）
//  public var offlineDataExpiration: Int64 {
//    get {return _storage._offlineDataExpiration ?? 0}
//    set {_uniqueStorage()._offlineDataExpiration = newValue}
//  }
  /// Returns true if `offlineDataExpiration` has been explicitly set.
//  public var hasOfflineDataExpiration: Bool {return _storage._offlineDataExpiration != nil}
  /// Clears the value of `offlineDataExpiration`. Subsequent reads from it will return its default value.
//  public mutating func clearOfflineDataExpiration() {_uniqueStorage()._offlineDataExpiration = nil}
//
  ///  config 的 version, 使用较大的 version
//  public var version: Int64 {
//    get {return _storage._version ?? 0}
//    set {_uniqueStorage()._version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {_uniqueStorage()._version = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public struct DataCacheExpirationConfig {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var enable: Bool {
//      get {return _enable ?? false}
//      set {_enable = newValue}
//    }
    /// Returns true if `enable` has been explicitly set.
//    public var hasEnable: Bool {return self._enable != nil}
    /// Clears the value of `enable`. Subsequent reads from it will return its default value.
//    public mutating func clearEnable() {self._enable = nil}
//
    /// 延迟时间；缓存有效时长
//    public var delaySecond: Int64 {
//      get {return _delaySecond ?? 0}
//      set {_delaySecond = newValue}
//    }
    /// Returns true if `delaySecond` has been explicitly set.
//    public var hasDelaySecond: Bool {return self._delaySecond != nil}
    /// Clears the value of `delaySecond`. Subsequent reads from it will return its default value.
//    public mutating func clearDelaySecond() {self._delaySecond = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _enable: Bool? = nil
//    fileprivate var _delaySecond: Int64? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_ChatEntitySetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 添加新成员设置
//  public var addMemberPermissionSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.AddMemberPermissionSetting.Enum {
//    get {return _storage._addMemberPermissionSetting ?? .allMembers}
//    set {_uniqueStorage()._addMemberPermissionSetting = newValue}
//  }
  /// Returns true if `addMemberPermissionSetting` has been explicitly set.
//  public var hasAddMemberPermissionSetting: Bool {return _storage._addMemberPermissionSetting != nil}
  /// Clears the value of `addMemberPermissionSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearAddMemberPermissionSetting() {_uniqueStorage()._addMemberPermissionSetting = nil}
//
  /// @所有人设置
//  public var atAllPermissionSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.AtAllPermissionSetting.Enum {
//    get {return _storage._atAllPermissionSetting ?? .allMembers}
//    set {_uniqueStorage()._atAllPermissionSetting = newValue}
//  }
  /// Returns true if `atAllPermissionSetting` has been explicitly set.
//  public var hasAtAllPermissionSetting: Bool {return _storage._atAllPermissionSetting != nil}
  /// Clears the value of `atAllPermissionSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearAtAllPermissionSetting() {_uniqueStorage()._atAllPermissionSetting = nil}
//
  /// 进群系统消息提醒设置
//  public var joinMessageVisibleSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.SystemMessageVisibleSetting.Enum {
//    get {return _storage._joinMessageVisibleSetting ?? .onlyOwner}
//    set {_uniqueStorage()._joinMessageVisibleSetting = newValue}
//  }
  /// Returns true if `joinMessageVisibleSetting` has been explicitly set.
//  public var hasJoinMessageVisibleSetting: Bool {return _storage._joinMessageVisibleSetting != nil}
  /// Clears the value of `joinMessageVisibleSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearJoinMessageVisibleSetting() {_uniqueStorage()._joinMessageVisibleSetting = nil}
//
  /// 退群系统消息提醒设置
//  public var quitMessageVisibleSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.SystemMessageVisibleSetting.Enum {
//    get {return _storage._quitMessageVisibleSetting ?? .onlyOwner}
//    set {_uniqueStorage()._quitMessageVisibleSetting = newValue}
//  }
  /// Returns true if `quitMessageVisibleSetting` has been explicitly set.
//  public var hasQuitMessageVisibleSetting: Bool {return _storage._quitMessageVisibleSetting != nil}
  /// Clears the value of `quitMessageVisibleSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearQuitMessageVisibleSetting() {_uniqueStorage()._quitMessageVisibleSetting = nil}
//
  /// 群分享设置
//  public var shareCardPermissionSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.ShareCardPermissionSetting.Enum {
//    get {return _storage._shareCardPermissionSetting ?? .allowed}
//    set {_uniqueStorage()._shareCardPermissionSetting = newValue}
//  }
  /// Returns true if `shareCardPermissionSetting` has been explicitly set.
//  public var hasShareCardPermissionSetting: Bool {return _storage._shareCardPermissionSetting != nil}
  /// Clears the value of `shareCardPermissionSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearShareCardPermissionSetting() {_uniqueStorage()._shareCardPermissionSetting = nil}
//
  /// 进群申请设置
//  public var addMemberApplySetting: LarkNCExtensionPB_Entities_ChatEntitySetting.AddMemberApplySetting.Enum {
//    get {return _storage._addMemberApplySetting ?? .noApply}
//    set {_uniqueStorage()._addMemberApplySetting = newValue}
//  }
  /// Returns true if `addMemberApplySetting` has been explicitly set.
//  public var hasAddMemberApplySetting: Bool {return _storage._addMemberApplySetting != nil}
  /// Clears the value of `addMemberApplySetting`. Subsequent reads from it will return its default value.
//  public mutating func clearAddMemberApplySetting() {_uniqueStorage()._addMemberApplySetting = nil}
//
  /// 帖子匿名开关
//  public var threadAnonymousSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.ThreadAnonymousSetting.Enum {
//    get {return _storage._threadAnonymousSetting ?? .invisible}
//    set {_uniqueStorage()._threadAnonymousSetting = newValue}
//  }
  /// Returns true if `threadAnonymousSetting` has been explicitly set.
//  public var hasThreadAnonymousSetting: Bool {return _storage._threadAnonymousSetting != nil}
  /// Clears the value of `threadAnonymousSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadAnonymousSetting() {_uniqueStorage()._threadAnonymousSetting = nil}
//
  /// 消息可见性设置
//  public var messageVisibilitySetting: LarkNCExtensionPB_Entities_ChatEntitySetting.MessageVisibilitySetting.Enum {
//    get {return _storage._messageVisibilitySetting ?? .allMessages}
//    set {_uniqueStorage()._messageVisibilitySetting = newValue}
//  }
  /// Returns true if `messageVisibilitySetting` has been explicitly set.
//  public var hasMessageVisibilitySetting: Bool {return _storage._messageVisibilitySetting != nil}
  /// Clears the value of `messageVisibilitySetting`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageVisibilitySetting() {_uniqueStorage()._messageVisibilitySetting = nil}
//
  /// 群匿名设置
//  public var anonymousSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.AnonymousSetting {
//    get {return _storage._anonymousSetting ?? LarkNCExtensionPB_Entities_ChatEntitySetting.AnonymousSetting()}
//    set {_uniqueStorage()._anonymousSetting = newValue}
//  }
  /// Returns true if `anonymousSetting` has been explicitly set.
//  public var hasAnonymousSetting: Bool {return _storage._anonymousSetting != nil}
  /// Clears the value of `anonymousSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearAnonymousSetting() {_uniqueStorage()._anonymousSetting = nil}
//
  /// 加急权限设置
//  public var createUrgentSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.CreateUrgentSetting.Enum {
//    get {return _storage._createUrgentSetting ?? .allMembers}
//    set {_uniqueStorage()._createUrgentSetting = newValue}
//  }
  /// Returns true if `createUrgentSetting` has been explicitly set.
//  public var hasCreateUrgentSetting: Bool {return _storage._createUrgentSetting != nil}
  /// Clears the value of `createUrgentSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateUrgentSetting() {_uniqueStorage()._createUrgentSetting = nil}
//
  /// 发起视频会议权限设置
//  public var createVideoConferenceSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.CreateVideoConferenceSetting.Enum {
//    get {return _storage._createVideoConferenceSetting ?? .allMembers}
//    set {_uniqueStorage()._createVideoConferenceSetting = newValue}
//  }
  /// Returns true if `createVideoConferenceSetting` has been explicitly set.
//  public var hasCreateVideoConferenceSetting: Bool {return _storage._createVideoConferenceSetting != nil}
  /// Clears the value of `createVideoConferenceSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateVideoConferenceSetting() {_uniqueStorage()._createVideoConferenceSetting = nil}
//
  /// Pin/Unpin权限设置
//  public var pinPermissionSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.PinPermissionSetting.Enum {
//    get {return _storage._pinPermissionSetting ?? .allMembers}
//    set {_uniqueStorage()._pinPermissionSetting = newValue}
//  }
  /// Returns true if `pinPermissionSetting` has been explicitly set.
//  public var hasPinPermissionSetting: Bool {return _storage._pinPermissionSetting != nil}
  /// Clears the value of `pinPermissionSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearPinPermissionSetting() {_uniqueStorage()._pinPermissionSetting = nil}
//
  /// 消息置顶权限设置
//  public var topNoticePermissionSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.TopNoticePermissionSetting.Enum {
//    get {return _storage._topNoticePermissionSetting ?? .allMembers}
//    set {_uniqueStorage()._topNoticePermissionSetting = newValue}
//  }
  /// Returns true if `topNoticePermissionSetting` has been explicitly set.
//  public var hasTopNoticePermissionSetting: Bool {return _storage._topNoticePermissionSetting != nil}
  /// Clears the value of `topNoticePermissionSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearTopNoticePermissionSetting() {_uniqueStorage()._topNoticePermissionSetting = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum Field: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//    case addMemberPermissionSetting // = 1
//    case atAllPermissionSetting // = 2
//    case joinMessageVisibleSetting // = 3
//    case quitMessageVisibleSetting // = 4
//    case shareCardPermissionSetting // = 5
//    case addMemberApplySetting // = 6
//    case threadAnonymousSetting // = 7
//    case messageVisibilitySetting // = 8
//    case allowAnonymousSetting // = 9
//    case createUrgentSetting // = 10
//    case createVideoConferenceSetting // = 11
//    case pinPermissionSetting // = 12
//    case topNoticePermissionSetting // = 14
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .addMemberPermissionSetting
//      case 2: self = .atAllPermissionSetting
//      case 3: self = .joinMessageVisibleSetting
//      case 4: self = .quitMessageVisibleSetting
//      case 5: self = .shareCardPermissionSetting
//      case 6: self = .addMemberApplySetting
//      case 7: self = .threadAnonymousSetting
//      case 8: self = .messageVisibilitySetting
//      case 9: self = .allowAnonymousSetting
//      case 10: self = .createUrgentSetting
//      case 11: self = .createVideoConferenceSetting
//      case 12: self = .pinPermissionSetting
//      case 14: self = .topNoticePermissionSetting
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .addMemberPermissionSetting: return 1
//      case .atAllPermissionSetting: return 2
//      case .joinMessageVisibleSetting: return 3
//      case .quitMessageVisibleSetting: return 4
//      case .shareCardPermissionSetting: return 5
//      case .addMemberApplySetting: return 6
//      case .threadAnonymousSetting: return 7
//      case .messageVisibilitySetting: return 8
//      case .allowAnonymousSetting: return 9
//      case .createUrgentSetting: return 10
//      case .createVideoConferenceSetting: return 11
//      case .pinPermissionSetting: return 12
//      case .topNoticePermissionSetting: return 14
//      }
//    }
//
//  }
//
//  public struct AddMemberPermissionSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Enum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 所有人可以加人
//      case allMembers // = 1
//
      /// 仅群主/管理员加人
//      case onlyOwner // = 2
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .allMembers
//        case 2: self = .onlyOwner
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .allMembers: return 1
//        case .onlyOwner: return 2
//        }
//      }
//
//    }
//
//    public init() {}
//  }
//
//  public struct AddMemberApplySetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Enum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 加群不需要申请
//      case noApply // = 1
//
      /// 加群需要申请
//      case needApply // = 2
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .noApply
//        case 2: self = .needApply
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .noApply: return 1
//        case .needApply: return 2
//        }
//      }
//
//    }
//
//    public init() {}
//  }
//
//  public struct SystemMessageVisibleSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Enum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 进退群消息仅群主/管理员可见
//      case onlyOwner // = 1
//
      /// 进退群消息所有人可见
//      case allMembers // = 2
//
      /// 进退群消息任何人不可见
//      case notAnyone // = 3
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .onlyOwner
//        case 2: self = .allMembers
//        case 3: self = .notAnyone
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .onlyOwner: return 1
//        case .allMembers: return 2
//        case .notAnyone: return 3
//        }
//      }
//
//    }
//
//    public init() {}
//  }
//
//  public struct ShareCardPermissionSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Enum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 所有人可分享群
//      case allowed // = 1
//
      /// 仅群主/管理员可分享
//      case notAllowed // = 2
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .allowed
//        case 2: self = .notAllowed
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .allowed: return 1
//        case .notAllowed: return 2
//        }
//      }
//
//    }
//
//    public init() {}
//  }
//
//  public struct AtAllPermissionSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Enum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 所有人可@所有人
//      case allMembers // = 1
//
      /// 仅群主/管理员可@所有人
//      case onlyOwner // = 2
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .allMembers
//        case 2: self = .onlyOwner
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .allMembers: return 1
//        case .onlyOwner: return 2
//        }
//      }
//
//    }
//
//    public init() {}
//  }
//
//  public struct ThreadAnonymousSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Enum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 不显示匿名开关，此时匿名状态为关
//      case invisible // = 1
//
      /// 显示匿名开关，匿名状态为关
//      case notAllowed // = 2
//
      /// 显示匿名开关，匿名状态为开
//      case allowed // = 3
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .invisible
//        case 2: self = .notAllowed
//        case 3: self = .allowed
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .invisible: return 1
//        case .notAllowed: return 2
//        case .allowed: return 3
//        }
//      }
//
//    }
//
//    public init() {}
//  }
//
//  public struct MessageVisibilitySetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Enum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 可查看所有的消息，包括进群前的历史消息
//      case allMessages // = 1
//
      /// 只能查看新消息，无法查看进群前的历史消息
//      case onlyNewMessages // = 2
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .allMessages
//        case 2: self = .onlyNewMessages
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .allMessages: return 1
//        case .onlyNewMessages: return 2
//        }
//      }
//
//    }
//
//    public init() {}
//  }
//
//  public struct AnonymousSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var isAllowAnonymous: Bool {
//      get {return _isAllowAnonymous ?? false}
//      set {_isAllowAnonymous = newValue}
//    }
    /// Returns true if `isAllowAnonymous` has been explicitly set.
//    public var hasIsAllowAnonymous: Bool {return self._isAllowAnonymous != nil}
    /// Clears the value of `isAllowAnonymous`. Subsequent reads from it will return its default value.
//    public mutating func clearIsAllowAnonymous() {self._isAllowAnonymous = nil}
//
    /// 后续匿名开关扩展需求
//    public var isVisible: Bool {
//      get {return _isVisible ?? false}
//      set {_isVisible = newValue}
//    }
    /// Returns true if `isVisible` has been explicitly set.
//    public var hasIsVisible: Bool {return self._isVisible != nil}
    /// Clears the value of `isVisible`. Subsequent reads from it will return its default value.
//    public mutating func clearIsVisible() {self._isVisible = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _isAllowAnonymous: Bool? = nil
//    fileprivate var _isVisible: Bool? = nil
//  }
//
//  public struct CreateUrgentSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Enum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 所有成员均可对消息加急
//      case allMembers // = 1
//
      /// 只有管理者(群主或管理员)可对消息加级
//      case onlyManager // = 2
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .allMembers
//        case 2: self = .onlyManager
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .allMembers: return 1
//        case .onlyManager: return 2
//        }
//      }
//
//    }
//
//    public init() {}
//  }
//
//  public struct CreateVideoConferenceSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Enum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 所有成员均可发起视频会议
//      case allMembers // = 1
//
      /// 只有管理者(群主或管理员)可发起视频会议
//      case onlyManager // = 2
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .allMembers
//        case 2: self = .onlyManager
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .allMembers: return 1
//        case .onlyManager: return 2
//        }
//      }
//
//    }
//
//    public init() {}
//  }
//
//  public struct PinPermissionSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Enum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 所有成员均可对消息Pin/UnPin
//      case allMembers // = 1
//
      /// 只有管理者(群主或管理员)可对消息Pin/UnPin
//      case onlyManager // = 2
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .allMembers
//        case 2: self = .onlyManager
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .allMembers: return 1
//        case .onlyManager: return 2
//        }
//      }
//
//    }
//
//    public init() {}
//  }
//
//  public struct TopNoticePermissionSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Enum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 所有成员均可对消息置顶/取消
//      case allMembers // = 1
//
      /// 只有管理者(群主或管理员)可对消息置顶/取消
//      case onlyManager // = 2
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .allMembers
//        case 2: self = .onlyManager
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .allMembers: return 1
//        case .onlyManager: return 2
//        }
//      }
//
//    }
//
//    public init() {}
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.Field: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_CryptoMessageDetail {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var content: Data {
    get {return _content ?? LarkHTTP.Internal.emptyData}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {self._content = nil}

  public var fromDeviceID: String {
    get {return _fromDeviceID ?? String()}
    set {_fromDeviceID = newValue}
  }
  /// Returns true if `fromDeviceID` has been explicitly set.
//  public var hasFromDeviceID: Bool {return self._fromDeviceID != nil}
  /// Clears the value of `fromDeviceID`. Subsequent reads from it will return its default value.
//  public mutating func clearFromDeviceID() {self._fromDeviceID = nil}

  public var senderPublicKey: Data {
    get {return _senderPublicKey ?? LarkHTTP.Internal.emptyData}
    set {_senderPublicKey = newValue}
  }
  /// Returns true if `senderPublicKey` has been explicitly set.
//  public var hasSenderPublicKey: Bool {return self._senderPublicKey != nil}
  /// Clears the value of `senderPublicKey`. Subsequent reads from it will return its default value.
//  public mutating func clearSenderPublicKey() {self._senderPublicKey = nil}

  public var nonce: Data {
    get {return _nonce ?? LarkHTTP.Internal.emptyData}
    set {_nonce = newValue}
  }
  /// Returns true if `nonce` has been explicitly set.
//  public var hasNonce: Bool {return self._nonce != nil}
  /// Clears the value of `nonce`. Subsequent reads from it will return its default value.
//  public mutating func clearNonce() {self._nonce = nil}

  public var additionalData: Data {
    get {return _additionalData ?? LarkHTTP.Internal.emptyData}
    set {_additionalData = newValue}
  }
  /// Returns true if `additionalData` has been explicitly set.
//  public var hasAdditionalData: Bool {return self._additionalData != nil}
  /// Clears the value of `additionalData`. Subsequent reads from it will return its default value.
//  public mutating func clearAdditionalData() {self._additionalData = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _content: Data? = nil
  fileprivate var _fromDeviceID: String? = nil
  fileprivate var _senderPublicKey: Data? = nil
  fileprivate var _nonce: Data? = nil
  fileprivate var _additionalData: Data? = nil
}

public struct LarkNCExtensionPB_Entities_SecretMessageDetail {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var content: Data {
    get {return _content ?? LarkHTTP.Internal.emptyData}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {self._content = nil}

  public var senderPublicKey: Data {
    get {return _senderPublicKey ?? LarkHTTP.Internal.emptyData}
    set {_senderPublicKey = newValue}
  }
  /// Returns true if `senderPublicKey` has been explicitly set.
//  public var hasSenderPublicKey: Bool {return self._senderPublicKey != nil}
  /// Clears the value of `senderPublicKey`. Subsequent reads from it will return its default value.
//  public mutating func clearSenderPublicKey() {self._senderPublicKey = nil}

  public var header: Data {
    get {return _header ?? LarkHTTP.Internal.emptyData}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
//  public mutating func clearHeader() {self._header = nil}

  public var fromDeviceID: String {
    get {return _fromDeviceID ?? String()}
    set {_fromDeviceID = newValue}
  }
  /// Returns true if `fromDeviceID` has been explicitly set.
//  public var hasFromDeviceID: Bool {return self._fromDeviceID != nil}
  /// Clears the value of `fromDeviceID`. Subsequent reads from it will return its default value.
//  public mutating func clearFromDeviceID() {self._fromDeviceID = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _content: Data? = nil
  fileprivate var _senderPublicKey: Data? = nil
  fileprivate var _header: Data? = nil
  fileprivate var _fromDeviceID: String? = nil
}

public struct LarkNCExtensionPB_Entities_CryptoInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var cryptoType: LarkNCExtensionPB_Entities_CryptoInfo.CryptoType {
    get {return _storage._cryptoType ?? .unknown}
    set {_uniqueStorage()._cryptoType = newValue}
  }
  /// Returns true if `cryptoType` has been explicitly set.
//  public var hasCryptoType: Bool {return _storage._cryptoType != nil}
  /// Clears the value of `cryptoType`. Subsequent reads from it will return its default value.
//  public mutating func clearCryptoType() {_uniqueStorage()._cryptoType = nil}

  /// 密钥版本，为解决消息接收方因为各种原因单方面重置了密钥，发送方使用了旧的密钥
  public var secretVersion: String {
    get {return _storage._secretVersion ?? String()}
    set {_uniqueStorage()._secretVersion = newValue}
  }
  /// Returns true if `secretVersion` has been explicitly set.
//  public var hasSecretVersion: Bool {return _storage._secretVersion != nil}
  /// Clears the value of `secretVersion`. Subsequent reads from it will return its default value.
//  public mutating func clearSecretVersion() {_uniqueStorage()._secretVersion = nil}

  /// 阅后即焚时间设置，秒为单位，客户端可以灵活使用
  public var burnedSeconds: Int32 {
    get {return _storage._burnedSeconds ?? 0}
    set {_uniqueStorage()._burnedSeconds = newValue}
  }
  /// Returns true if `burnedSeconds` has been explicitly set.
//  public var hasBurnedSeconds: Bool {return _storage._burnedSeconds != nil}
  /// Clears the value of `burnedSeconds`. Subsequent reads from it will return its default value.
//  public mutating func clearBurnedSeconds() {_uniqueStorage()._burnedSeconds = nil}

  /// fallback模式的加密消息
  public var fallbackDetail: LarkNCExtensionPB_Entities_CryptoMessageDetail {
    get {return _storage._fallbackDetail ?? LarkNCExtensionPB_Entities_CryptoMessageDetail()}
    set {_uniqueStorage()._fallbackDetail = newValue}
  }
  /// Returns true if `fallbackDetail` has been explicitly set.
//  public var hasFallbackDetail: Bool {return _storage._fallbackDetail != nil}
  /// Clears the value of `fallbackDetail`. Subsequent reads from it will return its default value.
//  public mutating func clearFallbackDetail() {_uniqueStorage()._fallbackDetail = nil}

  /// 密聊2.0 加密消息
  public var secretMessageDetail: LarkNCExtensionPB_Entities_SecretMessageDetail {
    get {return _storage._secretMessageDetail ?? LarkNCExtensionPB_Entities_SecretMessageDetail()}
    set {_uniqueStorage()._secretMessageDetail = newValue}
  }
  /// Returns true if `secretMessageDetail` has been explicitly set.
//  public var hasSecretMessageDetail: Bool {return _storage._secretMessageDetail != nil}
  /// Clears the value of `secretMessageDetail`. Subsequent reads from it will return its default value.
//  public mutating func clearSecretMessageDetail() {_uniqueStorage()._secretMessageDetail = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum CryptoType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case plainText // = 1
    case e2Ee // = 2
    case thirdParty // = 3

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .plainText
      case 2: self = .e2Ee
      case 3: self = .thirdParty
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .plainText: return 1
      case .e2Ee: return 2
      case .thirdParty: return 3
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_CryptoInfo.CryptoType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_ChatConfig {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 该chat是否有回复框
//  public var chatable: Bool {
//    get {return _chatable ?? true}
//    set {_chatable = newValue}
//  }
  /// Returns true if `chatable` has been explicitly set.
//  public var hasChatable: Bool {return self._chatable != nil}
  /// Clears the value of `chatable`. Subsequent reads from it will return its default value.
//  public mutating func clearChatable() {self._chatable = nil}
//
  /// 该chat是否可以被mute
//  public var muteable: Bool {
//    get {return _muteable ?? true}
//    set {_muteable = newValue}
//  }
  /// Returns true if `muteable` has been explicitly set.
//  public var hasMuteable: Bool {return self._muteable != nil}
  /// Clears the value of `muteable`. Subsequent reads from it will return its default value.
//  public mutating func clearMuteable() {self._muteable = nil}
//
  /// 是否计入总badge
//  public var inTotalBadge: Bool {
//    get {return _inTotalBadge ?? true}
//    set {_inTotalBadge = newValue}
//  }
  /// Returns true if `inTotalBadge` has been explicitly set.
//  public var hasInTotalBadge: Bool {return self._inTotalBadge != nil}
  /// Clears the value of `inTotalBadge`. Subsequent reads from it will return its default value.
//  public mutating func clearInTotalBadge() {self._inTotalBadge = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _chatable: Bool? = nil
//  fileprivate var _muteable: Bool? = nil
//  fileprivate var _inTotalBadge: Bool? = nil
//}

//public struct LarkNCExtensionPB_Entities_Chat {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 会话ID
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
  /// 会话类型
//  public var type: LarkNCExtensionPB_Entities_Chat.TypeEnum {
//    get {return _storage._type ?? .p2P}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
  /// 会话中最后一条msgID
//  public var lastMessageID: String {
//    get {return _storage._lastMessageID ?? String()}
//    set {_uniqueStorage()._lastMessageID = newValue}
//  }
  /// Returns true if `lastMessageID` has been explicitly set.
//  public var hasLastMessageID: Bool {return _storage._lastMessageID != nil}
  /// Clears the value of `lastMessageID`. Subsequent reads from it will return its default value.
//  public mutating func clearLastMessageID() {_uniqueStorage()._lastMessageID = nil}
//
  /// 会话名字
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
  /// 会话头像，具体参数见 Image
//  public var avatar: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatar ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
  /// 群主ID
//  public var ownerID: String {
//    get {return _storage._ownerID ?? String()}
//    set {_uniqueStorage()._ownerID = newValue}
//  }
  /// Returns true if `ownerID` has been explicitly set.
//  public var hasOwnerID: Bool {return _storage._ownerID != nil}
  /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
//  public mutating func clearOwnerID() {_uniqueStorage()._ownerID = nil}
//
  /// deprecated todo 确认废弃版本
//  public var newMessageCount: Int32 {
//    get {return _storage._newMessageCount ?? 0}
//    set {_uniqueStorage()._newMessageCount = newValue}
//  }
  /// Returns true if `newMessageCount` has been explicitly set.
//  public var hasNewMessageCount: Bool {return _storage._newMessageCount != nil}
  /// Clears the value of `newMessageCount`. Subsequent reads from it will return its default value.
//  public mutating func clearNewMessageCount() {_uniqueStorage()._newMessageCount = nil}
//
  /// 会话状态
//  public var status: LarkNCExtensionPB_Entities_Chat.Status {
//    get {return _storage._status ?? .normal}
//    set {_uniqueStorage()._status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
  /// 会话更新时间
//  public var updateTime: Int64 {
//    get {return _storage._updateTime ?? 0}
//    set {_uniqueStorage()._updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}
//
  /// p2p会话的key
//  public var key: String {
//    get {return _storage._key ?? String()}
//    set {_uniqueStorage()._key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}
//
  /// 群描述
//  public var description_p: String {
//    get {return _storage._description_p ?? String()}
//    set {_uniqueStorage()._description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}
//
  /// 群总人数（包括机器人）
//  public var memberCount: Int32 {
//    get {return _storage._memberCount ?? 0}
//    set {_uniqueStorage()._memberCount = newValue}
//  }
  /// Returns true if `memberCount` has been explicitly set.
//  public var hasMemberCount: Bool {return _storage._memberCount != nil}
  /// Clears the value of `memberCount`. Subsequent reads from it will return its default value.
//  public mutating func clearMemberCount() {_uniqueStorage()._memberCount = nil}
//
  /// 是否是部门群
//  public var isDepartment: Bool {
//    get {return _storage._isDepartment ?? false}
//    set {_uniqueStorage()._isDepartment = newValue}
//  }
  /// Returns true if `isDepartment` has been explicitly set.
//  public var hasIsDepartment: Bool {return _storage._isDepartment != nil}
  /// Clears the value of `isDepartment`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDepartment() {_uniqueStorage()._isDepartment = nil}
//
  /// 废弃 todo 确认废弃版本
//  public var isPublic: Bool {
//    get {return _storage._isPublic ?? false}
//    set {_uniqueStorage()._isPublic = newValue}
//  }
  /// Returns true if `isPublic` has been explicitly set.
//  public var hasIsPublic: Bool {return _storage._isPublic != nil}
  /// Clears the value of `isPublic`. Subsequent reads from it will return its default value.
//  public mutating func clearIsPublic() {_uniqueStorage()._isPublic = nil}
//
  /// 会话中最后一条msg的position
//  public var lastMessagePosition: Int32 {
//    get {return _storage._lastMessagePosition ?? 0}
//    set {_uniqueStorage()._lastMessagePosition = newValue}
//  }
  /// Returns true if `lastMessagePosition` has been explicitly set.
//  public var hasLastMessagePosition: Bool {return _storage._lastMessagePosition != nil}
  /// Clears the value of `lastMessagePosition`. Subsequent reads from it will return its default value.
//  public mutating func clearLastMessagePosition() {_uniqueStorage()._lastMessagePosition = nil}
//
  /// 群中人数
//  public var userCount: Int32 {
//    get {return _storage._userCount ?? 0}
//    set {_uniqueStorage()._userCount = newValue}
//  }
  /// Returns true if `userCount` has been explicitly set.
//  public var hasUserCount: Bool {return _storage._userCount != nil}
  /// Clears the value of `userCount`. Subsequent reads from it will return its default value.
//  public mutating func clearUserCount() {_uniqueStorage()._userCount = nil}
//
  /// 群名的拼音
//  public var namePinyin: String {
//    get {return _storage._namePinyin ?? String()}
//    set {_uniqueStorage()._namePinyin = newValue}
//  }
  /// Returns true if `namePinyin` has been explicitly set.
//  public var hasNamePinyin: Bool {return _storage._namePinyin != nil}
  /// Clears the value of `namePinyin`. Subsequent reads from it will return its default value.
//  public mutating func clearNamePinyin() {_uniqueStorage()._namePinyin = nil}
//
  /// 会话的创建时间
//  public var createTime: Int64 {
//    get {return _storage._createTime ?? 0}
//    set {_uniqueStorage()._createTime = newValue}
//  }
  /// Returns true if `createTime` has been explicitly set.
//  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}
//
  /// 是否客服群
//  public var isCustomerService: Bool {
//    get {return _storage._isCustomerService ?? false}
//    set {_uniqueStorage()._isCustomerService = newValue}
//  }
  /// Returns true if `isCustomerService` has been explicitly set.
//  public var hasIsCustomerService: Bool {return _storage._isCustomerService != nil}
  /// Clears the value of `isCustomerService`. Subsequent reads from it will return its default value.
//  public mutating func clearIsCustomerService() {_uniqueStorage()._isCustomerService = nil}
//
  /// 已废弃！！！todo 确认废弃版本
//  public var role: LarkNCExtensionPB_Entities_Chat.Role {
//    get {return _storage._role ?? .ignore}
//    set {_uniqueStorage()._role = newValue}
//  }
  /// Returns true if `role` has been explicitly set.
//  public var hasRole: Bool {return _storage._role != nil}
  /// Clears the value of `role`. Subsequent reads from it will return its default value.
//  public mutating func clearRole() {_uniqueStorage()._role = nil}
//
  /// 头像是否为自定义的, true 表示自定义，false 表示非自定义
//  public var isCustomIcon: Bool {
//    get {return _storage._isCustomIcon ?? false}
//    set {_uniqueStorage()._isCustomIcon = newValue}
//  }
  /// Returns true if `isCustomIcon` has been explicitly set.
//  public var hasIsCustomIcon: Bool {return _storage._isCustomIcon != nil}
  /// Clears the value of `isCustomIcon`. Subsequent reads from it will return its default value.
//  public mutating func clearIsCustomIcon() {_uniqueStorage()._isCustomIcon = nil}
//
  /// deprecated todo 确认废弃版本
//  public var noBadgedNewMessageCount: Int32 {
//    get {return _storage._noBadgedNewMessageCount ?? 0}
//    set {_uniqueStorage()._noBadgedNewMessageCount = newValue}
//  }
  /// Returns true if `noBadgedNewMessageCount` has been explicitly set.
//  public var hasNoBadgedNewMessageCount: Bool {return _storage._noBadgedNewMessageCount != nil}
  /// Clears the value of `noBadgedNewMessageCount`. Subsequent reads from it will return its default value.
//  public mutating func clearNoBadgedNewMessageCount() {_uniqueStorage()._noBadgedNewMessageCount = nil}
//
  /// 是否开启仅群主可编辑群信息
//  public var offEditGroupChatInfo: Bool {
//    get {return _storage._offEditGroupChatInfo ?? false}
//    set {_uniqueStorage()._offEditGroupChatInfo = newValue}
//  }
  /// Returns true if `offEditGroupChatInfo` has been explicitly set.
//  public var hasOffEditGroupChatInfo: Bool {return _storage._offEditGroupChatInfo != nil}
  /// Clears the value of `offEditGroupChatInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearOffEditGroupChatInfo() {_uniqueStorage()._offEditGroupChatInfo = nil}
//
  /// 群公告
//  public var announcement: LarkNCExtensionPB_Entities_Chat.Announcement {
//    get {return _storage._announcement ?? LarkNCExtensionPB_Entities_Chat.Announcement()}
//    set {_uniqueStorage()._announcement = newValue}
//  }
  /// Returns true if `announcement` has been explicitly set.
//  public var hasAnnouncement: Bool {return _storage._announcement != nil}
  /// Clears the value of `announcement`. Subsequent reads from it will return its default value.
//  public mutating func clearAnnouncement() {_uniqueStorage()._announcement = nil}
//
  /// 群归属的租户ID
//  public var tenantID: String {
//    get {return _storage._tenantID ?? String()}
//    set {_uniqueStorage()._tenantID = newValue}
//  }
  /// Returns true if `tenantID` has been explicitly set.
//  public var hasTenantID: Bool {return _storage._tenantID != nil}
  /// Clears the value of `tenantID`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantID() {_uniqueStorage()._tenantID = nil}
//
  /// 更新时间 单位 毫秒
//  public var updateTimeMs: Int64 {
//    get {return _storage._updateTimeMs ?? 0}
//    set {_uniqueStorage()._updateTimeMs = newValue}
//  }
  /// Returns true if `updateTimeMs` has been explicitly set.
//  public var hasUpdateTimeMs: Bool {return _storage._updateTimeMs != nil}
  /// Clears the value of `updateTimeMs`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTimeMs() {_uniqueStorage()._updateTimeMs = nil}
//
  /// 是否提醒，默认为提醒; 放入user_chat_setting中，将来会废弃该字段
//  public var isRemind: Bool {
//    get {return _storage._isRemind ?? true}
//    set {_uniqueStorage()._isRemind = newValue}
//  }
  /// Returns true if `isRemind` has been explicitly set.
//  public var hasIsRemind: Bool {return _storage._isRemind != nil}
  /// Clears the value of `isRemind`. Subsequent reads from it will return its default value.
//  public mutating func clearIsRemind() {_uniqueStorage()._isRemind = nil}
//
  /// 群主管理
//  public var chatEntitySetting: LarkNCExtensionPB_Entities_ChatEntitySetting {
//    get {return _storage._chatEntitySetting ?? LarkNCExtensionPB_Entities_ChatEntitySetting()}
//    set {_uniqueStorage()._chatEntitySetting = newValue}
//  }
  /// Returns true if `chatEntitySetting` has been explicitly set.
//  public var hasChatEntitySetting: Bool {return _storage._chatEntitySetting != nil}
  /// Clears the value of `chatEntitySetting`. Subsequent reads from it will return its default value.
//  public mutating func clearChatEntitySetting() {_uniqueStorage()._chatEntitySetting = nil}
//
  /// 个人维度的群设置
//  public var userSetting: LarkNCExtensionPB_Entities_ChatSetting {
//    get {return _storage._userSetting ?? LarkNCExtensionPB_Entities_ChatSetting()}
//    set {_uniqueStorage()._userSetting = newValue}
//  }
  /// Returns true if `userSetting` has been explicitly set.
//  public var hasUserSetting: Bool {return _storage._userSetting != nil}
  /// Clears the value of `userSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearUserSetting() {_uniqueStorage()._userSetting = nil}
//
  /// 是否解散
//  public var isDissolved: Bool {
//    get {return _storage._isDissolved ?? false}
//    set {_uniqueStorage()._isDissolved = newValue}
//  }
  /// Returns true if `isDissolved` has been explicitly set.
//  public var hasIsDissolved: Bool {return _storage._isDissolved != nil}
  /// Clears the value of `isDissolved`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDissolved() {_uniqueStorage()._isDissolved = nil}
//
  /// 是否是会议群
//  public var isMeeting: Bool {
//    get {return _storage._isMeeting ?? false}
//    set {_uniqueStorage()._isMeeting = newValue}
//  }
  /// Returns true if `isMeeting` has been explicitly set.
//  public var hasIsMeeting: Bool {return _storage._isMeeting != nil}
  /// Clears the value of `isMeeting`. Subsequent reads from it will return its default value.
//  public mutating func clearIsMeeting() {_uniqueStorage()._isMeeting = nil}
//
  /// 最后一条可见消息的ID
//  public var lastVisibleMessageID: String {
//    get {return _storage._lastVisibleMessageID ?? String()}
//    set {_uniqueStorage()._lastVisibleMessageID = newValue}
//  }
  /// Returns true if `lastVisibleMessageID` has been explicitly set.
//  public var hasLastVisibleMessageID: Bool {return _storage._lastVisibleMessageID != nil}
  /// Clears the value of `lastVisibleMessageID`. Subsequent reads from it will return its default value.
//  public mutating func clearLastVisibleMessageID() {_uniqueStorage()._lastVisibleMessageID = nil}
//
  /// chat最后一条可见消息patch
//  public var messageLastVisiblePatch: LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch {
//    get {return _storage._messageLastVisiblePatch ?? LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch()}
//    set {_uniqueStorage()._messageLastVisiblePatch = newValue}
//  }
  /// Returns true if `messageLastVisiblePatch` has been explicitly set.
//  public var hasMessageLastVisiblePatch: Bool {return _storage._messageLastVisiblePatch != nil}
  /// Clears the value of `messageLastVisiblePatch`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageLastVisiblePatch() {_uniqueStorage()._messageLastVisiblePatch = nil}
//
  /// 最后一条帖子的ID
//  public var lastThreadID: String {
//    get {return _storage._lastThreadID ?? String()}
//    set {_uniqueStorage()._lastThreadID = newValue}
//  }
  /// Returns true if `lastThreadID` has been explicitly set.
//  public var hasLastThreadID: Bool {return _storage._lastThreadID != nil}
  /// Clears the value of `lastThreadID`. Subsequent reads from it will return its default value.
//  public mutating func clearLastThreadID() {_uniqueStorage()._lastThreadID = nil}
//
  /// deprecated todo 确认废弃版本
//  public var newThreadCount: Int32 {
//    get {return _storage._newThreadCount ?? 0}
//    set {_uniqueStorage()._newThreadCount = newValue}
//  }
  /// Returns true if `newThreadCount` has been explicitly set.
//  public var hasNewThreadCount: Bool {return _storage._newThreadCount != nil}
  /// Clears the value of `newThreadCount`. Subsequent reads from it will return its default value.
//  public mutating func clearNewThreadCount() {_uniqueStorage()._newThreadCount = nil}
//
  /// 最后一条帖子的position
//  public var lastThreadPosition: Int32 {
//    get {return _storage._lastThreadPosition ?? 0}
//    set {_uniqueStorage()._lastThreadPosition = newValue}
//  }
  /// Returns true if `lastThreadPosition` has been explicitly set.
//  public var hasLastThreadPosition: Bool {return _storage._lastThreadPosition != nil}
  /// Clears the value of `lastThreadPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearLastThreadPosition() {_uniqueStorage()._lastThreadPosition = nil}
//
  /// 是否是密聊
//  public var isCrypto: Bool {
//    get {return _storage._isCrypto ?? false}
//    set {_uniqueStorage()._isCrypto = newValue}
//  }
  /// Returns true if `isCrypto` has been explicitly set.
//  public var hasIsCrypto: Bool {return _storage._isCrypto != nil}
  /// Clears the value of `isCrypto`. Subsequent reads from it will return its default value.
//  public mutating func clearIsCrypto() {_uniqueStorage()._isCrypto = nil}
//
  /// deprecated todo 确认废弃版本
//  public var noBadgedNewThreadCount: Int32 {
//    get {return _storage._noBadgedNewThreadCount ?? 0}
//    set {_uniqueStorage()._noBadgedNewThreadCount = newValue}
//  }
  /// Returns true if `noBadgedNewThreadCount` has been explicitly set.
//  public var hasNoBadgedNewThreadCount: Bool {return _storage._noBadgedNewThreadCount != nil}
  /// Clears the value of `noBadgedNewThreadCount`. Subsequent reads from it will return its default value.
//  public mutating func clearNoBadgedNewThreadCount() {_uniqueStorage()._noBadgedNewThreadCount = nil}
//
  /// deprecated todo 确认废弃版本
//  public var threadStartPosition: Int32 {
//    get {return _storage._threadStartPosition ?? 0}
//    set {_uniqueStorage()._threadStartPosition = newValue}
//  }
  /// Returns true if `threadStartPosition` has been explicitly set.
//  public var hasThreadStartPosition: Bool {return _storage._threadStartPosition != nil}
  /// Clears the value of `threadStartPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadStartPosition() {_uniqueStorage()._threadStartPosition = nil}
//
  ///1=普通模式，2=thread模式
//  public var chatMode: LarkNCExtensionPB_Entities_Chat.ChatMode {
//    get {return _storage._chatMode ?? .default}
//    set {_uniqueStorage()._chatMode = newValue}
//  }
  /// Returns true if `chatMode` has been explicitly set.
//  public var hasChatMode: Bool {return _storage._chatMode != nil}
  /// Clears the value of `chatMode`. Subsequent reads from it will return its default value.
//  public mutating func clearChatMode() {_uniqueStorage()._chatMode = nil}
//
  /// 对会话的配置，是否mute,是否有回复框，是否加入总badge计算等
//  public var chatConfig: LarkNCExtensionPB_Entities_ChatConfig {
//    get {return _storage._chatConfig ?? LarkNCExtensionPB_Entities_ChatConfig()}
//    set {_uniqueStorage()._chatConfig = newValue}
//  }
  /// Returns true if `chatConfig` has been explicitly set.
//  public var hasChatConfig: Bool {return _storage._chatConfig != nil}
  /// Clears the value of `chatConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearChatConfig() {_uniqueStorage()._chatConfig = nil}
//
  /// 是否是跨租户会话
//  public var isCrossTenant: Bool {
//    get {return _storage._isCrossTenant ?? false}
//    set {_uniqueStorage()._isCrossTenant = newValue}
//  }
  /// Returns true if `isCrossTenant` has been explicitly set.
//  public var hasIsCrossTenant: Bool {return _storage._isCrossTenant != nil}
  /// Clears the value of `isCrossTenant`. Subsequent reads from it will return its default value.
//  public mutating func clearIsCrossTenant() {_uniqueStorage()._isCrossTenant = nil}
//
  /// 是否是全员群
//  public var isTenant: Bool {
//    get {return _storage._isTenant ?? false}
//    set {_uniqueStorage()._isTenant = newValue}
//  }
  /// Returns true if `isTenant` has been explicitly set.
//  public var hasIsTenant: Bool {return _storage._isTenant != nil}
  /// Clears the value of `isTenant`. Subsequent reads from it will return its default value.
//  public mutating func clearIsTenant() {_uniqueStorage()._isTenant = nil}
//
  ///前端用于判断是否支持/展示这个chat
//  public var supportView: LarkNCExtensionPB_Entities_Chat.SupportView {
//    get {return _storage._supportView ?? .viewUnknown}
//    set {_uniqueStorage()._supportView = newValue}
//  }
  /// Returns true if `supportView` has been explicitly set.
//  public var hasSupportView: Bool {return _storage._supportView != nil}
  /// Clears the value of `supportView`. Subsequent reads from it will return its default value.
//  public mutating func clearSupportView() {_uniqueStorage()._supportView = nil}
//
  /// 用户加入这个群的时间 毫秒
//  public var joinTimeMs: Int64 {
//    get {return _storage._joinTimeMs ?? 0}
//    set {_uniqueStorage()._joinTimeMs = newValue}
//  }
  /// Returns true if `joinTimeMs` has been explicitly set.
//  public var hasJoinTimeMs: Bool {return _storage._joinTimeMs != nil}
  /// Clears the value of `joinTimeMs`. Subsequent reads from it will return its default value.
//  public mutating func clearJoinTimeMs() {_uniqueStorage()._joinTimeMs = nil}
//
  /// 值班群特化，增加这个字段 (group_chat 实体存储）
//  public var oncallID: Int64 {
//    get {return _storage._oncallID ?? 0}
//    set {_uniqueStorage()._oncallID = newValue}
//  }
  /// Returns true if `oncallID` has been explicitly set.
//  public var hasOncallID: Bool {return _storage._oncallID != nil}
  /// Clears the value of `oncallID`. Subsequent reads from it will return its default value.
//  public mutating func clearOncallID() {_uniqueStorage()._oncallID = nil}
//
  /// 最后一条可见msg的pos
//  public var lastVisibleMessagePosition: Int32 {
//    get {return _storage._lastVisibleMessagePosition ?? 0}
//    set {_uniqueStorage()._lastVisibleMessagePosition = newValue}
//  }
  /// Returns true if `lastVisibleMessagePosition` has been explicitly set.
//  public var hasLastVisibleMessagePosition: Bool {return _storage._lastVisibleMessagePosition != nil}
  /// Clears the value of `lastVisibleMessagePosition`. Subsequent reads from it will return its default value.
//  public mutating func clearLastVisibleMessagePosition() {_uniqueStorage()._lastVisibleMessagePosition = nil}
//
  /// deprecated todo 确认废弃版本
//  public var lastVisibleMessageNoBadgedCount: Int32 {
//    get {return _storage._lastVisibleMessageNoBadgedCount ?? 0}
//    set {_uniqueStorage()._lastVisibleMessageNoBadgedCount = newValue}
//  }
  /// Returns true if `lastVisibleMessageNoBadgedCount` has been explicitly set.
//  public var hasLastVisibleMessageNoBadgedCount: Bool {return _storage._lastVisibleMessageNoBadgedCount != nil}
  /// Clears the value of `lastVisibleMessageNoBadgedCount`. Subsequent reads from it will return its default value.
//  public mutating func clearLastVisibleMessageNoBadgedCount() {_uniqueStorage()._lastVisibleMessageNoBadgedCount = nil}
//
  /// 已读位置
//  public var readPosition: Int32 {
//    get {return _storage._readPosition ?? 0}
//    set {_uniqueStorage()._readPosition = newValue}
//  }
  /// Returns true if `readPosition` has been explicitly set.
//  public var hasReadPosition: Bool {return _storage._readPosition != nil}
  /// Clears the value of `readPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearReadPosition() {_uniqueStorage()._readPosition = nil}
//
  /// 到已读位置的badge数
//  public var readPositionBadgeCount: Int32 {
//    get {return _storage._readPositionBadgeCount ?? 0}
//    set {_uniqueStorage()._readPositionBadgeCount = newValue}
//  }
  /// Returns true if `readPositionBadgeCount` has been explicitly set.
//  public var hasReadPositionBadgeCount: Bool {return _storage._readPositionBadgeCount != nil}
  /// Clears the value of `readPositionBadgeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearReadPositionBadgeCount() {_uniqueStorage()._readPositionBadgeCount = nil}
//
  /// 到最后一条msg的badge数
//  public var lastMessagePositionBadgeCount: Int32 {
//    get {return _storage._lastMessagePositionBadgeCount ?? 0}
//    set {_uniqueStorage()._lastMessagePositionBadgeCount = newValue}
//  }
  /// Returns true if `lastMessagePositionBadgeCount` has been explicitly set.
//  public var hasLastMessagePositionBadgeCount: Bool {return _storage._lastMessagePositionBadgeCount != nil}
  /// Clears the value of `lastMessagePositionBadgeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearLastMessagePositionBadgeCount() {_uniqueStorage()._lastMessagePositionBadgeCount = nil}
//
  /// 是否打开水印
//  public var enableWatermark: Bool {
//    get {return _storage._enableWatermark ?? false}
//    set {_uniqueStorage()._enableWatermark = newValue}
//  }
  /// Returns true if `enableWatermark` has been explicitly set.
//  public var hasEnableWatermark: Bool {return _storage._enableWatermark != nil}
  /// Clears the value of `enableWatermark`. Subsequent reads from it will return its default value.
//  public mutating func clearEnableWatermark() {_uniqueStorage()._enableWatermark = nil}
//
  /// 右下角小icon
//  public var miniAvatar: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._miniAvatar ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._miniAvatar = newValue}
//  }
  /// Returns true if `miniAvatar` has been explicitly set.
//  public var hasMiniAvatar: Bool {return _storage._miniAvatar != nil}
  /// Clears the value of `miniAvatar`. Subsequent reads from it will return its default value.
//  public mutating func clearMiniAvatar() {_uniqueStorage()._miniAvatar = nil}
//
  /// chat 右侧通用容器id
//  public var sidebarID: String {
//    get {return _storage._sidebarID ?? String()}
//    set {_uniqueStorage()._sidebarID = newValue}
//  }
  /// Returns true if `sidebarID` has been explicitly set.
//  public var hasSidebarID: Bool {return _storage._sidebarID != nil}
  /// Clears the value of `sidebarID`. Subsequent reads from it will return its default value.
//  public mutating func clearSidebarID() {_uniqueStorage()._sidebarID = nil}
//
  ///加空格 无法直接取代name_pinyin 临时使用
//  public var namePy: String {
//    get {return _storage._namePy ?? String()}
//    set {_uniqueStorage()._namePy = newValue}
//  }
  /// Returns true if `namePy` has been explicitly set.
//  public var hasNamePy: Bool {return _storage._namePy != nil}
  /// Clears the value of `namePy`. Subsequent reads from it will return its default value.
//  public mutating func clearNamePy() {_uniqueStorage()._namePy = nil}
//
  /// 群名国际化zh_cn, en_us -> name ; SDK统一用小写 todo 确认废弃版本
//  public var i18NNames: Dictionary<String,String> {
//    get {return _storage._i18NNames}
//    set {_uniqueStorage()._i18NNames = newValue}
//  }
//
  ///会话的国际化信息
//  public var i18NInf: LarkNCExtensionPB_Entities_Chat.I18nInf {
//    get {return _storage._i18NInf ?? LarkNCExtensionPB_Entities_Chat.I18nInf()}
//    set {_uniqueStorage()._i18NInf = newValue}
//  }
  /// Returns true if `i18NInf` has been explicitly set.
//  public var hasI18NInf: Bool {return _storage._i18NInf != nil}
  /// Clears the value of `i18NInf`. Subsequent reads from it will return its default value.
//  public mutating func clearI18NInf() {_uniqueStorage()._i18NInf = nil}
//
  /// thread模式下的已读位置
//  public var readThreadPosition: Int32 {
//    get {return _storage._readThreadPosition ?? 0}
//    set {_uniqueStorage()._readThreadPosition = newValue}
//  }
  /// Returns true if `readThreadPosition` has been explicitly set.
//  public var hasReadThreadPosition: Bool {return _storage._readThreadPosition != nil}
  /// Clears the value of `readThreadPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearReadThreadPosition() {_uniqueStorage()._readThreadPosition = nil}
//
  /// thread模式下的已读badge数
//  public var readThreadPositionBadgeCount: Int32 {
//    get {return _storage._readThreadPositionBadgeCount ?? 0}
//    set {_uniqueStorage()._readThreadPositionBadgeCount = newValue}
//  }
  /// Returns true if `readThreadPositionBadgeCount` has been explicitly set.
//  public var hasReadThreadPositionBadgeCount: Bool {return _storage._readThreadPositionBadgeCount != nil}
  /// Clears the value of `readThreadPositionBadgeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearReadThreadPositionBadgeCount() {_uniqueStorage()._readThreadPositionBadgeCount = nil}
//
  /// thread模式下到最后一条msg的badge数
//  public var lastThreadPositionBadgeCount: Int32 {
//    get {return _storage._lastThreadPositionBadgeCount ?? 0}
//    set {_uniqueStorage()._lastThreadPositionBadgeCount = newValue}
//  }
  /// Returns true if `lastThreadPositionBadgeCount` has been explicitly set.
//  public var hasLastThreadPositionBadgeCount: Bool {return _storage._lastThreadPositionBadgeCount != nil}
  /// Clears the value of `lastThreadPositionBadgeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearLastThreadPositionBadgeCount() {_uniqueStorage()._lastThreadPositionBadgeCount = nil}
//
  /// thread模式下最后一条可见帖子的pos
//  public var lastVisibleThreadPosition: Int32 {
//    get {return _storage._lastVisibleThreadPosition ?? 0}
//    set {_uniqueStorage()._lastVisibleThreadPosition = newValue}
//  }
  /// Returns true if `lastVisibleThreadPosition` has been explicitly set.
//  public var hasLastVisibleThreadPosition: Bool {return _storage._lastVisibleThreadPosition != nil}
  /// Clears the value of `lastVisibleThreadPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearLastVisibleThreadPosition() {_uniqueStorage()._lastVisibleThreadPosition = nil}
//
  /// thread模式下最后一条可见帖子的ID
//  public var lastVisibleThreadID: String {
//    get {return _storage._lastVisibleThreadID ?? String()}
//    set {_uniqueStorage()._lastVisibleThreadID = newValue}
//  }
  /// Returns true if `lastVisibleThreadID` has been explicitly set.
//  public var hasLastVisibleThreadID: Bool {return _storage._lastVisibleThreadID != nil}
  /// Clears the value of `lastVisibleThreadID`. Subsequent reads from it will return its default value.
//  public mutating func clearLastVisibleThreadID() {_uniqueStorage()._lastVisibleThreadID = nil}
//
  /// thread最后一条可见消息patch
//  public var threadLastVisiblePatch: LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch {
//    get {return _storage._threadLastVisiblePatch ?? LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch()}
//    set {_uniqueStorage()._threadLastVisiblePatch = newValue}
//  }
  /// Returns true if `threadLastVisiblePatch` has been explicitly set.
//  public var hasThreadLastVisiblePatch: Bool {return _storage._threadLastVisiblePatch != nil}
  /// Clears the value of `threadLastVisiblePatch`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadLastVisiblePatch() {_uniqueStorage()._threadLastVisiblePatch = nil}
//
  /// 会话安全设置
//  public var chatSecurityConfig: LarkNCExtensionPB_Entities_ChatSecurityConfig {
//    get {return _storage._chatSecurityConfig ?? LarkNCExtensionPB_Entities_ChatSecurityConfig()}
//    set {_uniqueStorage()._chatSecurityConfig = newValue}
//  }
  /// Returns true if `chatSecurityConfig` has been explicitly set.
//  public var hasChatSecurityConfig: Bool {return _storage._chatSecurityConfig != nil}
  /// Clears the value of `chatSecurityConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearChatSecurityConfig() {_uniqueStorage()._chatSecurityConfig = nil}
//
  /// 是否是公开群
//  public var isPublicV2: Bool {
//    get {return _storage._isPublicV2 ?? false}
//    set {_uniqueStorage()._isPublicV2 = newValue}
//  }
  /// Returns true if `isPublicV2` has been explicitly set.
//  public var hasIsPublicV2: Bool {return _storage._isPublicV2 != nil}
  /// Clears the value of `isPublicV2`. Subsequent reads from it will return its default value.
//  public mutating func clearIsPublicV2() {_uniqueStorage()._isPublicV2 = nil}
//
  /// 群发言类型
//  public var postType: LarkNCExtensionPB_Entities_ChatPostType {
//    get {return _storage._postType ?? .unknownPostType}
//    set {_uniqueStorage()._postType = newValue}
//  }
  /// Returns true if `postType` has been explicitly set.
//  public var hasPostType: Bool {return _storage._postType != nil}
  /// Clears the value of `postType`. Subsequent reads from it will return its default value.
//  public mutating func clearPostType() {_uniqueStorage()._postType = nil}
//
  /// 是否可以发言
//  public var allowPost: Bool {
//    get {return _storage._allowPost ?? false}
//    set {_uniqueStorage()._allowPost = newValue}
//  }
  /// Returns true if `allowPost` has been explicitly set.
//  public var hasAllowPost: Bool {return _storage._allowPost != nil}
  /// Clears the value of `allowPost`. Subsequent reads from it will return its default value.
//  public mutating func clearAllowPost() {_uniqueStorage()._allowPost = nil}
//
  /// unit - second chat维度的密聊消息销毁时间(约定倒计时值)
//  public var burnedTime: Int64 {
//    get {return _storage._burnedTime ?? 0}
//    set {_uniqueStorage()._burnedTime = newValue}
//  }
  /// Returns true if `burnedTime` has been explicitly set.
//  public var hasBurnedTime: Bool {return _storage._burnedTime != nil}
  /// Clears the value of `burnedTime`. Subsequent reads from it will return its default value.
//  public mutating func clearBurnedTime() {_uniqueStorage()._burnedTime = nil}
//
  /// 入群申请数量，只对owner/管理员生效；其他成员，返回nil
//  public var putChatterApplyCount: Int32 {
//    get {return _storage._putChatterApplyCount ?? 0}
//    set {_uniqueStorage()._putChatterApplyCount = newValue}
//  }
  /// Returns true if `putChatterApplyCount` has been explicitly set.
//  public var hasPutChatterApplyCount: Bool {return _storage._putChatterApplyCount != nil}
  /// Clears the value of `putChatterApplyCount`. Subsequent reads from it will return its default value.
//  public mutating func clearPutChatterApplyCount() {_uniqueStorage()._putChatterApplyCount = nil}
//
  /// 是否展示 banner
//  public var showBanner: Bool {
//    get {return _storage._showBanner ?? false}
//    set {_uniqueStorage()._showBanner = newValue}
//  }
  /// Returns true if `showBanner` has been explicitly set.
//  public var hasShowBanner: Bool {return _storage._showBanner != nil}
  /// Clears the value of `showBanner`. Subsequent reads from it will return its default value.
//  public mutating func clearShowBanner() {_uniqueStorage()._showBanner = nil}
//
  /// 大群模式
//  public var isLargeGroup: Bool {
//    get {return _storage._isLargeGroup ?? false}
//    set {_uniqueStorage()._isLargeGroup = newValue}
//  }
  /// Returns true if `isLargeGroup` has been explicitly set.
//  public var hasIsLargeGroup: Bool {return _storage._isLargeGroup != nil}
  /// Clears the value of `isLargeGroup`. Subsequent reads from it will return its default value.
//  public mutating func clearIsLargeGroup() {_uniqueStorage()._isLargeGroup = nil}
//
  /// 暂未使用，服务台需要的字段。群维度可用，user维度不可用
//  public var firstChatMessagePosition: Int32 {
//    get {return _storage._firstChatMessagePosition ?? 0}
//    set {_uniqueStorage()._firstChatMessagePosition = newValue}
//  }
  /// Returns true if `firstChatMessagePosition` has been explicitly set.
//  public var hasFirstChatMessagePosition: Bool {return _storage._firstChatMessagePosition != nil}
  /// Clears the value of `firstChatMessagePosition`. Subsequent reads from it will return its default value.
//  public mutating func clearFirstChatMessagePosition() {_uniqueStorage()._firstChatMessagePosition = nil}
//
  /// chat上的标签, tags元素为entities.proto:Tag 的序号（不直接引用enum Tag，这样chat服务不需要Tag的更改而发版上线）
//  public var tags: [Int32] {
//    get {return _storage._tags}
//    set {_uniqueStorage()._tags = newValue}
//  }
//
  ///扩展字段，在业务方需要服务端存储或传递数据时作为扩展字段使用
//  public var extra: Dictionary<String,String> {
//    get {return _storage._extra}
//    set {_uniqueStorage()._extra = newValue}
//  }
//
  /// 是否为飞阅会群
//  public var isSamePageMeeting: Bool {
//    get {return _storage._isSamePageMeeting ?? false}
//    set {_uniqueStorage()._isSamePageMeeting = newValue}
//  }
  /// Returns true if `isSamePageMeeting` has been explicitly set.
//  public var hasIsSamePageMeeting: Bool {return _storage._isSamePageMeeting != nil}
  /// Clears the value of `isSamePageMeeting`. Subsequent reads from it will return its default value.
//  public mutating func clearIsSamePageMeeting() {_uniqueStorage()._isSamePageMeeting = nil}
//
  ///我参与的话题，已读时间戳
//  public var myThreadsReadTimestamp: Int64 {
//    get {return _storage._myThreadsReadTimestamp ?? 0}
//    set {_uniqueStorage()._myThreadsReadTimestamp = newValue}
//  }
  /// Returns true if `myThreadsReadTimestamp` has been explicitly set.
//  public var hasMyThreadsReadTimestamp: Bool {return _storage._myThreadsReadTimestamp != nil}
  /// Clears the value of `myThreadsReadTimestamp`. Subsequent reads from it will return its default value.
//  public mutating func clearMyThreadsReadTimestamp() {_uniqueStorage()._myThreadsReadTimestamp = nil}
//
  ///我参与的话题，最新时间戳
//  public var myThreadsLastTimestamp: Int64 {
//    get {return _storage._myThreadsLastTimestamp ?? 0}
//    set {_uniqueStorage()._myThreadsLastTimestamp = newValue}
//  }
  /// Returns true if `myThreadsLastTimestamp` has been explicitly set.
//  public var hasMyThreadsLastTimestamp: Bool {return _storage._myThreadsLastTimestamp != nil}
  /// Clears the value of `myThreadsLastTimestamp`. Subsequent reads from it will return its default value.
//  public mutating func clearMyThreadsLastTimestamp() {_uniqueStorage()._myThreadsLastTimestamp = nil}
//
  /// 是否家校群
//  public var isEdu: Bool {
//    get {return _storage._isEdu ?? false}
//    set {_uniqueStorage()._isEdu = newValue}
//  }
  /// Returns true if `isEdu` has been explicitly set.
//  public var hasIsEdu: Bool {return _storage._isEdu != nil}
  /// Clears the value of `isEdu`. Subsequent reads from it will return its default value.
//  public mutating func clearIsEdu() {_uniqueStorage()._isEdu = nil}
//
  /// 我参与的话题，最后触发参与的messageID
//  public var myThreadsLastDisplayMessageID: Int64 {
//    get {return _storage._myThreadsLastDisplayMessageID ?? 0}
//    set {_uniqueStorage()._myThreadsLastDisplayMessageID = newValue}
//  }
  /// Returns true if `myThreadsLastDisplayMessageID` has been explicitly set.
//  public var hasMyThreadsLastDisplayMessageID: Bool {return _storage._myThreadsLastDisplayMessageID != nil}
  /// Clears the value of `myThreadsLastDisplayMessageID`. Subsequent reads from it will return its default value.
//  public mutating func clearMyThreadsLastDisplayMessageID() {_uniqueStorage()._myThreadsLastDisplayMessageID = nil}
//
  /// 我参与的话题，参与列表未读数量
//  public var myThreadsUnreadCount: Int32 {
//    get {return _storage._myThreadsUnreadCount ?? 0}
//    set {_uniqueStorage()._myThreadsUnreadCount = newValue}
//  }
  /// Returns true if `myThreadsUnreadCount` has been explicitly set.
//  public var hasMyThreadsUnreadCount: Bool {return _storage._myThreadsUnreadCount != nil}
  /// Clears the value of `myThreadsUnreadCount`. Subsequent reads from it will return its default value.
//  public mutating func clearMyThreadsUnreadCount() {_uniqueStorage()._myThreadsUnreadCount = nil}
//
  ///是否是私有互通群
//  public var isCrossWithKa: Bool {
//    get {return _storage._isCrossWithKa ?? false}
//    set {_uniqueStorage()._isCrossWithKa = newValue}
//  }
  /// Returns true if `isCrossWithKa` has been explicitly set.
//  public var hasIsCrossWithKa: Bool {return _storage._isCrossWithKa != nil}
  /// Clears the value of `isCrossWithKa`. Subsequent reads from it will return its default value.
//  public mutating func clearIsCrossWithKa() {_uniqueStorage()._isCrossWithKa = nil}
//
  /// 是否是管理员
//  public var isAdmin: Bool {
//    get {return _storage._isAdmin ?? false}
//    set {_uniqueStorage()._isAdmin = newValue}
//  }
  /// Returns true if `isAdmin` has been explicitly set.
//  public var hasIsAdmin: Bool {return _storage._isAdmin != nil}
  /// Clears the value of `isAdmin`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAdmin() {_uniqueStorage()._isAdmin = nil}
//
  /// 是否是超大群
//  public var isSuper: Bool {
//    get {return _storage._isSuper ?? false}
//    set {_uniqueStorage()._isSuper = newValue}
//  }
  /// Returns true if `isSuper` has been explicitly set.
//  public var hasIsSuper: Bool {return _storage._isSuper != nil}
  /// Clears the value of `isSuper`. Subsequent reads from it will return its default value.
//  public mutating func clearIsSuper() {_uniqueStorage()._isSuper = nil}
//
  /// 是否为团队群
//  public var isTeam: Bool {
//    get {return _storage._isTeam ?? false}
//    set {_uniqueStorage()._isTeam = newValue}
//  }
  /// Returns true if `isTeam` has been explicitly set.
//  public var hasIsTeam: Bool {return _storage._isTeam != nil}
  /// Clears the value of `isTeam`. Subsequent reads from it will return its default value.
//  public mutating func clearIsTeam() {_uniqueStorage()._isTeam = nil}
//
  /// 各个业务方依附在Chat中的字段
//  public var bizContent: LarkNCExtensionPB_Entities_ChatBizContent {
//    get {return _storage._bizContent ?? LarkNCExtensionPB_Entities_ChatBizContent()}
//    set {_uniqueStorage()._bizContent = newValue}
//  }
  /// Returns true if `bizContent` has been explicitly set.
//  public var hasBizContent: Bool {return _storage._bizContent != nil}
  /// Clears the value of `bizContent`. Subsequent reads from it will return its default value.
//  public mutating func clearBizContent() {_uniqueStorage()._bizContent = nil}
//
  /// 会话成员在会话内的其他业务状态, 参考ChatterExtraStateType
//  public var chatterExtraStates: Dictionary<Int32,Int32> {
//    get {return _storage._chatterExtraStates}
//    set {_uniqueStorage()._chatterExtraStates = newValue}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//
    /// 单聊
//    case p2P // = 1
//
    /// 群聊
//    case group // = 2
//
    /// 小组模式/话题群
//    case topicGroup // = 3
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .p2P
//      case 2: self = .group
//      case 3: self = .topicGroup
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .p2P: return 1
//      case .group: return 2
//      case .topicGroup: return 3
//      }
//    }
//
//  }
//
//  public enum Status: LarkHTTP.Enum {
//    public typealias RawValue = Int
//
    /// 正常
//    case normal // = 0
//
    /// 归档
//    case archive // = 1
//
    /// 解散
//    case deleted // = 2
//
//    public init() {
//      self = .normal
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .normal
//      case 1: self = .archive
//      case 2: self = .deleted
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .normal: return 0
//      case .archive: return 1
//      case .deleted: return 2
//      }
//    }
//
//  }
//
//  public enum ChatMode: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownChatMode // = 0
//
    /// 默认模式
//    case `default` // = 1
//
    /// 废弃 原小组
//    case thread // = 2
//
    /// 小组模式
//    case threadV2 // = 3
//
//    public init() {
//      self = .unknownChatMode
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownChatMode
//      case 1: self = .default
//      case 2: self = .thread
//      case 3: self = .threadV2
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownChatMode: return 0
//      case .default: return 1
//      case .thread: return 2
//      case .threadV2: return 3
//      }
//    }
//
//  }
//
//  public enum SupportView: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case viewUnknown // = 0
//
    /// 普通单聊/群聊
//    case viewP2Pgroup // = 1
//
    /// 会议
//    case viewMeeting // = 2
//
    /// 小组
//    case viewThread // = 3
//
    /// 密聊
//    case viewCrypto // = 4
//
//    public init() {
//      self = .viewUnknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .viewUnknown
//      case 1: self = .viewP2Pgroup
//      case 2: self = .viewMeeting
//      case 3: self = .viewThread
//      case 4: self = .viewCrypto
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .viewUnknown: return 0
//      case .viewP2Pgroup: return 1
//      case .viewMeeting: return 2
//      case .viewThread: return 3
//      case .viewCrypto: return 4
//      }
//    }
//
//  }
//
  /// role 已经被废弃 todo 确认废弃版本
//  public enum Role: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case ignore // = 0
//
    /// member: chat 的成员
//    case member // = 1
//
    /// visitor: 只可以查看 chat 名片
//    case visitor // = 2
//
    /// 不再 chat 中，但是关注了某个 thread，可以来取 chat、thread 相关信息
//    case threadFollower // = 3
//
//    public init() {
//      self = .ignore
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .ignore
//      case 1: self = .member
//      case 2: self = .visitor
//      case 3: self = .threadFollower
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .ignore: return 0
//      case .member: return 1
//      case .visitor: return 2
//      case .threadFollower: return 3
//      }
//    }
//
//  }
//
//  public struct Announcement {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 群公告内容
//    public var content: String {
//      get {return _content ?? String()}
//      set {_content = newValue}
//    }
    /// Returns true if `content` has been explicitly set.
//    public var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
//    public mutating func clearContent() {self._content = nil}
//
    /// 更新时间
//    public var updateTime: Int64 {
//      get {return _updateTime ?? 0}
//      set {_updateTime = newValue}
//    }
    /// Returns true if `updateTime` has been explicitly set.
//    public var hasUpdateTime: Bool {return self._updateTime != nil}
    /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//    public mutating func clearUpdateTime() {self._updateTime = nil}
//
    /// 最后编辑者ID
//    public var lastEditorID: String {
//      get {return _lastEditorID ?? String()}
//      set {_lastEditorID = newValue}
//    }
    /// Returns true if `lastEditorID` has been explicitly set.
//    public var hasLastEditorID: Bool {return self._lastEditorID != nil}
    /// Clears the value of `lastEditorID`. Subsequent reads from it will return its default value.
//    public mutating func clearLastEditorID() {self._lastEditorID = nil}
//
    /// 群公告url
//    public var docURL: String {
//      get {return _docURL ?? String()}
//      set {_docURL = newValue}
//    }
    /// Returns true if `docURL` has been explicitly set.
//    public var hasDocURL: Bool {return self._docURL != nil}
    /// Clears the value of `docURL`. Subsequent reads from it will return its default value.
//    public mutating func clearDocURL() {self._docURL = nil}
//
    /// deprecated 是否接入doc
//    public var enableOpendoc: Bool {
//      get {return _enableOpendoc ?? false}
//      set {_enableOpendoc = newValue}
//    }
    /// Returns true if `enableOpendoc` has been explicitly set.
//    public var hasEnableOpendoc: Bool {return self._enableOpendoc != nil}
    /// Clears the value of `enableOpendoc`. Subsequent reads from it will return its default value.
//    public mutating func clearEnableOpendoc() {self._enableOpendoc = nil}
//
    ///群公告是否接入doc文档，默认为true，为false时降级为文本形式
//    public var useOpendoc: Bool {
//      get {return _useOpendoc ?? true}
//      set {_useOpendoc = newValue}
//    }
    /// Returns true if `useOpendoc` has been explicitly set.
//    public var hasUseOpendoc: Bool {return self._useOpendoc != nil}
    /// Clears the value of `useOpendoc`. Subsequent reads from it will return its default value.
//    public mutating func clearUseOpendoc() {self._useOpendoc = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _content: String? = nil
//    fileprivate var _updateTime: Int64? = nil
//    fileprivate var _lastEditorID: String? = nil
//    fileprivate var _docURL: String? = nil
//    fileprivate var _enableOpendoc: Bool? = nil
//    fileprivate var _useOpendoc: Bool? = nil
//  }
//
//  public struct I18nInf {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 群名国际化zh_cn, en_us -> name
//    public var i18NNames: Dictionary<String,String> = [:]
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_Chat.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_Chat.Status: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_Chat.ChatMode: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_Chat.SupportView: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_Chat.Role: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_ChatBizContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 团队ID
//  public var teamID: Int64 {
//    get {return _teamID ?? 0}
//    set {_teamID = newValue}
//  }
  /// Returns true if `teamID` has been explicitly set.
//  public var hasTeamID: Bool {return self._teamID != nil}
  /// Clears the value of `teamID`. Subsequent reads from it will return its default value.
//  public mutating func clearTeamID() {self._teamID = nil}
//
  /// 团队群类型
//  public var teamChatType: LarkNCExtensionPB_Entities_TeamChatType {
//    get {return _teamChatType ?? .unknown}
//    set {_teamChatType = newValue}
//  }
  /// Returns true if `teamChatType` has been explicitly set.
//  public var hasTeamChatType: Bool {return self._teamChatType != nil}
  /// Clears the value of `teamChatType`. Subsequent reads from it will return its default value.
//  public mutating func clearTeamChatType() {self._teamChatType = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _teamID: Int64? = nil
//  fileprivate var _teamChatType: LarkNCExtensionPB_Entities_TeamChatType? = nil
//}

/// chat安全配置
//public struct LarkNCExtensionPB_Entities_ChatSecurityConfig {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 全局配置
//  public var openSecurity: Bool {
//    get {return _storage._openSecurity ?? false}
//    set {_uniqueStorage()._openSecurity = newValue}
//  }
  /// Returns true if `openSecurity` has been explicitly set.
//  public var hasOpenSecurity: Bool {return _storage._openSecurity != nil}
  /// Clears the value of `openSecurity`. Subsequent reads from it will return its default value.
//  public mutating func clearOpenSecurity() {_uniqueStorage()._openSecurity = nil}
//
  /// 显示个数
//  public var limit: Int32 {
//    get {return _storage._limit ?? 0}
//    set {_uniqueStorage()._limit = newValue}
//  }
  /// Returns true if `limit` has been explicitly set.
//  public var hasLimit: Bool {return _storage._limit != nil}
  /// Clears the value of `limit`. Subsequent reads from it will return its default value.
//  public mutating func clearLimit() {_uniqueStorage()._limit = nil}
//
  /// 已读未读配置
//  public var read: LarkNCExtensionPB_Entities_ChatSecurityConfig.Read {
//    get {return _storage._read ?? LarkNCExtensionPB_Entities_ChatSecurityConfig.Read()}
//    set {_uniqueStorage()._read = newValue}
//  }
  /// Returns true if `read` has been explicitly set.
//  public var hasRead: Bool {return _storage._read != nil}
  /// Clears the value of `read`. Subsequent reads from it will return its default value.
//  public mutating func clearRead() {_uniqueStorage()._read = nil}
//
  /// 单次加急人数上限，可配置到群维度
//  public var urgentLimit: Int32 {
//    get {return _storage._urgentLimit ?? 0}
//    set {_uniqueStorage()._urgentLimit = newValue}
//  }
  /// Returns true if `urgentLimit` has been explicitly set.
//  public var hasUrgentLimit: Bool {return _storage._urgentLimit != nil}
  /// Clears the value of `urgentLimit`. Subsequent reads from it will return its default value.
//  public mutating func clearUrgentLimit() {_uniqueStorage()._urgentLimit = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
  /// 按 feature 特化配置
  /// 已读未读配置
//  public struct Read {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var readShowType: LarkNCExtensionPB_Entities_ChatSecurityConfig.Read.ReadShowType {
//      get {return _readShowType ?? .unknown}
//      set {_readShowType = newValue}
//    }
    /// Returns true if `readShowType` has been explicitly set.
//    public var hasReadShowType: Bool {return self._readShowType != nil}
    /// Clears the value of `readShowType`. Subsequent reads from it will return its default value.
//    public mutating func clearReadShowType() {self._readShowType = nil}
//
    /// 显示个数
//    public var limit: Int32 {
//      get {return _limit ?? 0}
//      set {_limit = newValue}
//    }
    /// Returns true if `limit` has been explicitly set.
//    public var hasLimit: Bool {return self._limit != nil}
    /// Clears the value of `limit`. Subsequent reads from it will return its default value.
//    public mutating func clearLimit() {self._limit = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum ReadShowType: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 全部显示已读未读
//      case noLimit // = 1
//
      /// 显示一列已读 一列未读
//      case twoColumnWithLimit // = 2
//
      /// 显示一列已读+未读
//      case oneColumnWithLimit // = 3
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .noLimit
//        case 2: self = .twoColumnWithLimit
//        case 3: self = .oneColumnWithLimit
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .noLimit: return 1
//        case .twoColumnWithLimit: return 2
//        case .oneColumnWithLimit: return 3
//        }
//      }
//
//    }
//
//    public init() {}
//
//    fileprivate var _readShowType: LarkNCExtensionPB_Entities_ChatSecurityConfig.Read.ReadShowType? = nil
//    fileprivate var _limit: Int32? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// [Attention!!!] This structure is compacted in multi pipe v2. If you update this structure,
/// please contact multipipe service owner to confirm the update of logic in compactor.
/// doc: https://bytedance.feishu.cn/docs/doccna9mdzo7wHht9V2jcIsbZae#
/// chat中的可变字段(chat发生变更后，需要push给SDK)
//public struct LarkNCExtensionPB_Entities_ChatMutableInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
//  public var avatar: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatar ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
//  public var ownerID: String {
//    get {return _storage._ownerID ?? String()}
//    set {_uniqueStorage()._ownerID = newValue}
//  }
  /// Returns true if `ownerID` has been explicitly set.
//  public var hasOwnerID: Bool {return _storage._ownerID != nil}
  /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
//  public mutating func clearOwnerID() {_uniqueStorage()._ownerID = nil}
//
//  public var description_p: String {
//    get {return _storage._description_p ?? String()}
//    set {_uniqueStorage()._description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}
//
//  public var memberCount: Int32 {
//    get {return _storage._memberCount ?? 0}
//    set {_uniqueStorage()._memberCount = newValue}
//  }
  /// Returns true if `memberCount` has been explicitly set.
//  public var hasMemberCount: Bool {return _storage._memberCount != nil}
  /// Clears the value of `memberCount`. Subsequent reads from it will return its default value.
//  public mutating func clearMemberCount() {_uniqueStorage()._memberCount = nil}
//
//  public var userCount: Int32 {
//    get {return _storage._userCount ?? 0}
//    set {_uniqueStorage()._userCount = newValue}
//  }
  /// Returns true if `userCount` has been explicitly set.
//  public var hasUserCount: Bool {return _storage._userCount != nil}
  /// Clears the value of `userCount`. Subsequent reads from it will return its default value.
//  public mutating func clearUserCount() {_uniqueStorage()._userCount = nil}
//
//  public var namePy: String {
//    get {return _storage._namePy ?? String()}
//    set {_uniqueStorage()._namePy = newValue}
//  }
  /// Returns true if `namePy` has been explicitly set.
//  public var hasNamePy: Bool {return _storage._namePy != nil}
  /// Clears the value of `namePy`. Subsequent reads from it will return its default value.
//  public mutating func clearNamePy() {_uniqueStorage()._namePy = nil}
//
//  public var isCustomIcon: Bool {
//    get {return _storage._isCustomIcon ?? false}
//    set {_uniqueStorage()._isCustomIcon = newValue}
//  }
  /// Returns true if `isCustomIcon` has been explicitly set.
//  public var hasIsCustomIcon: Bool {return _storage._isCustomIcon != nil}
  /// Clears the value of `isCustomIcon`. Subsequent reads from it will return its default value.
//  public mutating func clearIsCustomIcon() {_uniqueStorage()._isCustomIcon = nil}
//
//  public var offEditGroupChatInfo: Bool {
//    get {return _storage._offEditGroupChatInfo ?? false}
//    set {_uniqueStorage()._offEditGroupChatInfo = newValue}
//  }
  /// Returns true if `offEditGroupChatInfo` has been explicitly set.
//  public var hasOffEditGroupChatInfo: Bool {return _storage._offEditGroupChatInfo != nil}
  /// Clears the value of `offEditGroupChatInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearOffEditGroupChatInfo() {_uniqueStorage()._offEditGroupChatInfo = nil}
//
//  public var announcement: LarkNCExtensionPB_Entities_Chat.Announcement {
//    get {return _storage._announcement ?? LarkNCExtensionPB_Entities_Chat.Announcement()}
//    set {_uniqueStorage()._announcement = newValue}
//  }
  /// Returns true if `announcement` has been explicitly set.
//  public var hasAnnouncement: Bool {return _storage._announcement != nil}
  /// Clears the value of `announcement`. Subsequent reads from it will return its default value.
//  public mutating func clearAnnouncement() {_uniqueStorage()._announcement = nil}
//
//  public var chatEntitySetting: LarkNCExtensionPB_Entities_ChatEntitySetting {
//    get {return _storage._chatEntitySetting ?? LarkNCExtensionPB_Entities_ChatEntitySetting()}
//    set {_uniqueStorage()._chatEntitySetting = newValue}
//  }
  /// Returns true if `chatEntitySetting` has been explicitly set.
//  public var hasChatEntitySetting: Bool {return _storage._chatEntitySetting != nil}
  /// Clears the value of `chatEntitySetting`. Subsequent reads from it will return its default value.
//  public mutating func clearChatEntitySetting() {_uniqueStorage()._chatEntitySetting = nil}
//
//  public var isDepartment: Bool {
//    get {return _storage._isDepartment ?? false}
//    set {_uniqueStorage()._isDepartment = newValue}
//  }
  /// Returns true if `isDepartment` has been explicitly set.
//  public var hasIsDepartment: Bool {return _storage._isDepartment != nil}
  /// Clears the value of `isDepartment`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDepartment() {_uniqueStorage()._isDepartment = nil}
//
//  public var isDissolved: Bool {
//    get {return _storage._isDissolved ?? false}
//    set {_uniqueStorage()._isDissolved = newValue}
//  }
  /// Returns true if `isDissolved` has been explicitly set.
//  public var hasIsDissolved: Bool {return _storage._isDissolved != nil}
  /// Clears the value of `isDissolved`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDissolved() {_uniqueStorage()._isDissolved = nil}
//
//  public var isPublic: Bool {
//    get {return _storage._isPublic ?? false}
//    set {_uniqueStorage()._isPublic = newValue}
//  }
  /// Returns true if `isPublic` has been explicitly set.
//  public var hasIsPublic: Bool {return _storage._isPublic != nil}
  /// Clears the value of `isPublic`. Subsequent reads from it will return its default value.
//  public mutating func clearIsPublic() {_uniqueStorage()._isPublic = nil}
//
//  public var status: LarkNCExtensionPB_Entities_Chat.Status {
//    get {return _storage._status ?? .normal}
//    set {_uniqueStorage()._status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
//  public var i18NInf: LarkNCExtensionPB_Entities_Chat.I18nInf {
//    get {return _storage._i18NInf ?? LarkNCExtensionPB_Entities_Chat.I18nInf()}
//    set {_uniqueStorage()._i18NInf = newValue}
//  }
  /// Returns true if `i18NInf` has been explicitly set.
//  public var hasI18NInf: Bool {return _storage._i18NInf != nil}
  /// Clears the value of `i18NInf`. Subsequent reads from it will return its default value.
//  public mutating func clearI18NInf() {_uniqueStorage()._i18NInf = nil}
//
//  public var isPublicV2: Bool {
//    get {return _storage._isPublicV2 ?? false}
//    set {_uniqueStorage()._isPublicV2 = newValue}
//  }
  /// Returns true if `isPublicV2` has been explicitly set.
//  public var hasIsPublicV2: Bool {return _storage._isPublicV2 != nil}
  /// Clears the value of `isPublicV2`. Subsequent reads from it will return its default value.
//  public mutating func clearIsPublicV2() {_uniqueStorage()._isPublicV2 = nil}
//
//  public var postType: LarkNCExtensionPB_Entities_ChatPostType {
//    get {return _storage._postType ?? .unknownPostType}
//    set {_uniqueStorage()._postType = newValue}
//  }
  /// Returns true if `postType` has been explicitly set.
//  public var hasPostType: Bool {return _storage._postType != nil}
  /// Clears the value of `postType`. Subsequent reads from it will return its default value.
//  public mutating func clearPostType() {_uniqueStorage()._postType = nil}
//
//  public var allowPost: Bool {
//    get {return _storage._allowPost ?? false}
//    set {_uniqueStorage()._allowPost = newValue}
//  }
  /// Returns true if `allowPost` has been explicitly set.
//  public var hasAllowPost: Bool {return _storage._allowPost != nil}
  /// Clears the value of `allowPost`. Subsequent reads from it will return its default value.
//  public mutating func clearAllowPost() {_uniqueStorage()._allowPost = nil}
//
//  public var securityConfig: LarkNCExtensionPB_Entities_ChatSecurityConfig {
//    get {return _storage._securityConfig ?? LarkNCExtensionPB_Entities_ChatSecurityConfig()}
//    set {_uniqueStorage()._securityConfig = newValue}
//  }
  /// Returns true if `securityConfig` has been explicitly set.
//  public var hasSecurityConfig: Bool {return _storage._securityConfig != nil}
  /// Clears the value of `securityConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearSecurityConfig() {_uniqueStorage()._securityConfig = nil}
//
//  public var burnedTime: Int64 {
//    get {return _storage._burnedTime ?? 0}
//    set {_uniqueStorage()._burnedTime = newValue}
//  }
  /// Returns true if `burnedTime` has been explicitly set.
//  public var hasBurnedTime: Bool {return _storage._burnedTime != nil}
  /// Clears the value of `burnedTime`. Subsequent reads from it will return its default value.
//  public mutating func clearBurnedTime() {_uniqueStorage()._burnedTime = nil}
//
//  public var putChatterApplyCount: Int32 {
//    get {return _storage._putChatterApplyCount ?? 0}
//    set {_uniqueStorage()._putChatterApplyCount = newValue}
//  }
  /// Returns true if `putChatterApplyCount` has been explicitly set.
//  public var hasPutChatterApplyCount: Bool {return _storage._putChatterApplyCount != nil}
  /// Clears the value of `putChatterApplyCount`. Subsequent reads from it will return its default value.
//  public mutating func clearPutChatterApplyCount() {_uniqueStorage()._putChatterApplyCount = nil}
//
//  public var showBanner: Bool {
//    get {return _storage._showBanner ?? false}
//    set {_uniqueStorage()._showBanner = newValue}
//  }
  /// Returns true if `showBanner` has been explicitly set.
//  public var hasShowBanner: Bool {return _storage._showBanner != nil}
  /// Clears the value of `showBanner`. Subsequent reads from it will return its default value.
//  public mutating func clearShowBanner() {_uniqueStorage()._showBanner = nil}
//
//  public var isMeeting: Bool {
//    get {return _storage._isMeeting ?? false}
//    set {_uniqueStorage()._isMeeting = newValue}
//  }
  /// Returns true if `isMeeting` has been explicitly set.
//  public var hasIsMeeting: Bool {return _storage._isMeeting != nil}
  /// Clears the value of `isMeeting`. Subsequent reads from it will return its default value.
//  public mutating func clearIsMeeting() {_uniqueStorage()._isMeeting = nil}
//
//  public var isLargeGroup: Bool {
//    get {return _storage._isLargeGroup ?? false}
//    set {_uniqueStorage()._isLargeGroup = newValue}
//  }
  /// Returns true if `isLargeGroup` has been explicitly set.
//  public var hasIsLargeGroup: Bool {return _storage._isLargeGroup != nil}
  /// Clears the value of `isLargeGroup`. Subsequent reads from it will return its default value.
//  public mutating func clearIsLargeGroup() {_uniqueStorage()._isLargeGroup = nil}
//
//  public var firstChatMessagePosition: Int32 {
//    get {return _storage._firstChatMessagePosition ?? 0}
//    set {_uniqueStorage()._firstChatMessagePosition = newValue}
//  }
  /// Returns true if `firstChatMessagePosition` has been explicitly set.
//  public var hasFirstChatMessagePosition: Bool {return _storage._firstChatMessagePosition != nil}
  /// Clears the value of `firstChatMessagePosition`. Subsequent reads from it will return its default value.
//  public mutating func clearFirstChatMessagePosition() {_uniqueStorage()._firstChatMessagePosition = nil}
//
//  public var chatConfig: LarkNCExtensionPB_Entities_ChatConfig {
//    get {return _storage._chatConfig ?? LarkNCExtensionPB_Entities_ChatConfig()}
//    set {_uniqueStorage()._chatConfig = newValue}
//  }
  /// Returns true if `chatConfig` has been explicitly set.
//  public var hasChatConfig: Bool {return _storage._chatConfig != nil}
  /// Clears the value of `chatConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearChatConfig() {_uniqueStorage()._chatConfig = nil}
//
  /// 右下角小icon
//  public var miniAvatar: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._miniAvatar ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._miniAvatar = newValue}
//  }
  /// Returns true if `miniAvatar` has been explicitly set.
//  public var hasMiniAvatar: Bool {return _storage._miniAvatar != nil}
  /// Clears the value of `miniAvatar`. Subsequent reads from it will return its default value.
//  public mutating func clearMiniAvatar() {_uniqueStorage()._miniAvatar = nil}
//
  /// chat 右侧通用容器id
//  public var sidebarID: String {
//    get {return _storage._sidebarID ?? String()}
//    set {_uniqueStorage()._sidebarID = newValue}
//  }
  /// Returns true if `sidebarID` has been explicitly set.
//  public var hasSidebarID: Bool {return _storage._sidebarID != nil}
  /// Clears the value of `sidebarID`. Subsequent reads from it will return its default value.
//  public mutating func clearSidebarID() {_uniqueStorage()._sidebarID = nil}
//
  /// chat上的标签, tags元素为entities.proto:Tag 的序号（不直接引用enum Tag，这样chat服务不需要Tag的更改而发版上线）
//  public var tags: [Int32] {
//    get {return _storage._tags}
//    set {_uniqueStorage()._tags = newValue}
//  }
//
  ///扩展字段，在业务方需要服务端存储或传递数据时作为扩展字段使用，当发生变化时，需要推送给sdk
//  public var extra: Dictionary<String,String> {
//    get {return _storage._extra}
//    set {_uniqueStorage()._extra = newValue}
//  }
//
  ///是否是飞阅会
//  public var isSamePageMeeting: Bool {
//    get {return _storage._isSamePageMeeting ?? false}
//    set {_uniqueStorage()._isSamePageMeeting = newValue}
//  }
  /// Returns true if `isSamePageMeeting` has been explicitly set.
//  public var hasIsSamePageMeeting: Bool {return _storage._isSamePageMeeting != nil}
  /// Clears the value of `isSamePageMeeting`. Subsequent reads from it will return its default value.
//  public mutating func clearIsSamePageMeeting() {_uniqueStorage()._isSamePageMeeting = nil}
//
  /// 优化 feed 拉取所需要的算 badge 字段
//  public var readPosition: Int32 {
//    get {return _storage._readPosition ?? 0}
//    set {_uniqueStorage()._readPosition = newValue}
//  }
  /// Returns true if `readPosition` has been explicitly set.
//  public var hasReadPosition: Bool {return _storage._readPosition != nil}
  /// Clears the value of `readPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearReadPosition() {_uniqueStorage()._readPosition = nil}
//
//  public var readPositionBadgeCount: Int32 {
//    get {return _storage._readPositionBadgeCount ?? 0}
//    set {_uniqueStorage()._readPositionBadgeCount = newValue}
//  }
  /// Returns true if `readPositionBadgeCount` has been explicitly set.
//  public var hasReadPositionBadgeCount: Bool {return _storage._readPositionBadgeCount != nil}
  /// Clears the value of `readPositionBadgeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearReadPositionBadgeCount() {_uniqueStorage()._readPositionBadgeCount = nil}
//
//  public var lastMessagePositionBadgeCount: Int32 {
//    get {return _storage._lastMessagePositionBadgeCount ?? 0}
//    set {_uniqueStorage()._lastMessagePositionBadgeCount = newValue}
//  }
  /// Returns true if `lastMessagePositionBadgeCount` has been explicitly set.
//  public var hasLastMessagePositionBadgeCount: Bool {return _storage._lastMessagePositionBadgeCount != nil}
  /// Clears the value of `lastMessagePositionBadgeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearLastMessagePositionBadgeCount() {_uniqueStorage()._lastMessagePositionBadgeCount = nil}
//
//  public var lastThreadPosition: Int32 {
//    get {return _storage._lastThreadPosition ?? 0}
//    set {_uniqueStorage()._lastThreadPosition = newValue}
//  }
  /// Returns true if `lastThreadPosition` has been explicitly set.
//  public var hasLastThreadPosition: Bool {return _storage._lastThreadPosition != nil}
  /// Clears the value of `lastThreadPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearLastThreadPosition() {_uniqueStorage()._lastThreadPosition = nil}
//
//  public var readThreadPosition: Int32 {
//    get {return _storage._readThreadPosition ?? 0}
//    set {_uniqueStorage()._readThreadPosition = newValue}
//  }
  /// Returns true if `readThreadPosition` has been explicitly set.
//  public var hasReadThreadPosition: Bool {return _storage._readThreadPosition != nil}
  /// Clears the value of `readThreadPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearReadThreadPosition() {_uniqueStorage()._readThreadPosition = nil}
//
//  public var readThreadPositionBadgeCount: Int32 {
//    get {return _storage._readThreadPositionBadgeCount ?? 0}
//    set {_uniqueStorage()._readThreadPositionBadgeCount = newValue}
//  }
  /// Returns true if `readThreadPositionBadgeCount` has been explicitly set.
//  public var hasReadThreadPositionBadgeCount: Bool {return _storage._readThreadPositionBadgeCount != nil}
  /// Clears the value of `readThreadPositionBadgeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearReadThreadPositionBadgeCount() {_uniqueStorage()._readThreadPositionBadgeCount = nil}
//
//  public var lastThreadPositionBadgeCount: Int32 {
//    get {return _storage._lastThreadPositionBadgeCount ?? 0}
//    set {_uniqueStorage()._lastThreadPositionBadgeCount = newValue}
//  }
  /// Returns true if `lastThreadPositionBadgeCount` has been explicitly set.
//  public var hasLastThreadPositionBadgeCount: Bool {return _storage._lastThreadPositionBadgeCount != nil}
  /// Clears the value of `lastThreadPositionBadgeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearLastThreadPositionBadgeCount() {_uniqueStorage()._lastThreadPositionBadgeCount = nil}
//
//  public var lastVisibleMessagePosition: Int32 {
//    get {return _storage._lastVisibleMessagePosition ?? 0}
//    set {_uniqueStorage()._lastVisibleMessagePosition = newValue}
//  }
  /// Returns true if `lastVisibleMessagePosition` has been explicitly set.
//  public var hasLastVisibleMessagePosition: Bool {return _storage._lastVisibleMessagePosition != nil}
  /// Clears the value of `lastVisibleMessagePosition`. Subsequent reads from it will return its default value.
//  public mutating func clearLastVisibleMessagePosition() {_uniqueStorage()._lastVisibleMessagePosition = nil}
//
//  public var lastVisibleMessageID: String {
//    get {return _storage._lastVisibleMessageID ?? String()}
//    set {_uniqueStorage()._lastVisibleMessageID = newValue}
//  }
  /// Returns true if `lastVisibleMessageID` has been explicitly set.
//  public var hasLastVisibleMessageID: Bool {return _storage._lastVisibleMessageID != nil}
  /// Clears the value of `lastVisibleMessageID`. Subsequent reads from it will return its default value.
//  public mutating func clearLastVisibleMessageID() {_uniqueStorage()._lastVisibleMessageID = nil}
//
//  public var lastVisibleThreadPosition: Int32 {
//    get {return _storage._lastVisibleThreadPosition ?? 0}
//    set {_uniqueStorage()._lastVisibleThreadPosition = newValue}
//  }
  /// Returns true if `lastVisibleThreadPosition` has been explicitly set.
//  public var hasLastVisibleThreadPosition: Bool {return _storage._lastVisibleThreadPosition != nil}
  /// Clears the value of `lastVisibleThreadPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearLastVisibleThreadPosition() {_uniqueStorage()._lastVisibleThreadPosition = nil}
//
//  public var lastVisibleThreadID: String {
//    get {return _storage._lastVisibleThreadID ?? String()}
//    set {_uniqueStorage()._lastVisibleThreadID = newValue}
//  }
  /// Returns true if `lastVisibleThreadID` has been explicitly set.
//  public var hasLastVisibleThreadID: Bool {return _storage._lastVisibleThreadID != nil}
  /// Clears the value of `lastVisibleThreadID`. Subsequent reads from it will return its default value.
//  public mutating func clearLastVisibleThreadID() {_uniqueStorage()._lastVisibleThreadID = nil}
//
//  public var isRemind: Bool {
//    get {return _storage._isRemind ?? false}
//    set {_uniqueStorage()._isRemind = newValue}
//  }
  /// Returns true if `isRemind` has been explicitly set.
//  public var hasIsRemind: Bool {return _storage._isRemind != nil}
  /// Clears the value of `isRemind`. Subsequent reads from it will return its default value.
//  public mutating func clearIsRemind() {_uniqueStorage()._isRemind = nil}
//
  ///是否是租户群
//  public var isTenant: Bool {
//    get {return _storage._isTenant ?? false}
//    set {_uniqueStorage()._isTenant = newValue}
//  }
  /// Returns true if `isTenant` has been explicitly set.
//  public var hasIsTenant: Bool {return _storage._isTenant != nil}
  /// Clears the value of `isTenant`. Subsequent reads from it will return its default value.
//  public mutating func clearIsTenant() {_uniqueStorage()._isTenant = nil}
//
//  public var lastMessagePosition: Int32 {
//    get {return _storage._lastMessagePosition ?? 0}
//    set {_uniqueStorage()._lastMessagePosition = newValue}
//  }
  /// Returns true if `lastMessagePosition` has been explicitly set.
//  public var hasLastMessagePosition: Bool {return _storage._lastMessagePosition != nil}
  /// Clears the value of `lastMessagePosition`. Subsequent reads from it will return its default value.
//  public mutating func clearLastMessagePosition() {_uniqueStorage()._lastMessagePosition = nil}
//
  ///我参与的话题，已读时间戳
//  public var myThreadsReadTimestamp: Int64 {
//    get {return _storage._myThreadsReadTimestamp ?? 0}
//    set {_uniqueStorage()._myThreadsReadTimestamp = newValue}
//  }
  /// Returns true if `myThreadsReadTimestamp` has been explicitly set.
//  public var hasMyThreadsReadTimestamp: Bool {return _storage._myThreadsReadTimestamp != nil}
  /// Clears the value of `myThreadsReadTimestamp`. Subsequent reads from it will return its default value.
//  public mutating func clearMyThreadsReadTimestamp() {_uniqueStorage()._myThreadsReadTimestamp = nil}
//
  ///我参与的话题，最新时间戳
//  public var myThreadsLastTimestamp: Int64 {
//    get {return _storage._myThreadsLastTimestamp ?? 0}
//    set {_uniqueStorage()._myThreadsLastTimestamp = newValue}
//  }
  /// Returns true if `myThreadsLastTimestamp` has been explicitly set.
//  public var hasMyThreadsLastTimestamp: Bool {return _storage._myThreadsLastTimestamp != nil}
  /// Clears the value of `myThreadsLastTimestamp`. Subsequent reads from it will return its default value.
//  public mutating func clearMyThreadsLastTimestamp() {_uniqueStorage()._myThreadsLastTimestamp = nil}
//
  /// 是否家校群
//  public var isEdu: Bool {
//    get {return _storage._isEdu ?? false}
//    set {_uniqueStorage()._isEdu = newValue}
//  }
  /// Returns true if `isEdu` has been explicitly set.
//  public var hasIsEdu: Bool {return _storage._isEdu != nil}
  /// Clears the value of `isEdu`. Subsequent reads from it will return its default value.
//  public mutating func clearIsEdu() {_uniqueStorage()._isEdu = nil}
//
  /// 我参与的话题，最后触发参与的messageID
//  public var myThreadsLastDisplayMessageID: Int64 {
//    get {return _storage._myThreadsLastDisplayMessageID ?? 0}
//    set {_uniqueStorage()._myThreadsLastDisplayMessageID = newValue}
//  }
  /// Returns true if `myThreadsLastDisplayMessageID` has been explicitly set.
//  public var hasMyThreadsLastDisplayMessageID: Bool {return _storage._myThreadsLastDisplayMessageID != nil}
  /// Clears the value of `myThreadsLastDisplayMessageID`. Subsequent reads from it will return its default value.
//  public mutating func clearMyThreadsLastDisplayMessageID() {_uniqueStorage()._myThreadsLastDisplayMessageID = nil}
//
  /// 我参与的话题，参与列表未读数量
//  public var myThreadsUnreadCount: Int32 {
//    get {return _storage._myThreadsUnreadCount ?? 0}
//    set {_uniqueStorage()._myThreadsUnreadCount = newValue}
//  }
  /// Returns true if `myThreadsUnreadCount` has been explicitly set.
//  public var hasMyThreadsUnreadCount: Bool {return _storage._myThreadsUnreadCount != nil}
  /// Clears the value of `myThreadsUnreadCount`. Subsequent reads from it will return its default value.
//  public mutating func clearMyThreadsUnreadCount() {_uniqueStorage()._myThreadsUnreadCount = nil}
//
  /// 是否是管理员
//  public var isAdmin: Bool {
//    get {return _storage._isAdmin ?? false}
//    set {_uniqueStorage()._isAdmin = newValue}
//  }
  /// Returns true if `isAdmin` has been explicitly set.
//  public var hasIsAdmin: Bool {return _storage._isAdmin != nil}
  /// Clears the value of `isAdmin`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAdmin() {_uniqueStorage()._isAdmin = nil}
//
  /// 是否是超大群
//  public var isSuper: Bool {
//    get {return _storage._isSuper ?? false}
//    set {_uniqueStorage()._isSuper = newValue}
//  }
  /// Returns true if `isSuper` has been explicitly set.
//  public var hasIsSuper: Bool {return _storage._isSuper != nil}
  /// Clears the value of `isSuper`. Subsequent reads from it will return its default value.
//  public mutating func clearIsSuper() {_uniqueStorage()._isSuper = nil}
//
  /// 是否为团队群
//  public var isTeam: Bool {
//    get {return _storage._isTeam ?? false}
//    set {_uniqueStorage()._isTeam = newValue}
//  }
  /// Returns true if `isTeam` has been explicitly set.
//  public var hasIsTeam: Bool {return _storage._isTeam != nil}
  /// Clears the value of `isTeam`. Subsequent reads from it will return its default value.
//  public mutating func clearIsTeam() {_uniqueStorage()._isTeam = nil}
//
  /// 各个业务方依附在ChatMutableInfo中的字段
//  public var bizContent: LarkNCExtensionPB_Entities_ChatBizContent {
//    get {return _storage._bizContent ?? LarkNCExtensionPB_Entities_ChatBizContent()}
//    set {_uniqueStorage()._bizContent = newValue}
//  }
  /// Returns true if `bizContent` has been explicitly set.
//  public var hasBizContent: Bool {return _storage._bizContent != nil}
  /// Clears the value of `bizContent`. Subsequent reads from it will return its default value.
//  public mutating func clearBizContent() {_uniqueStorage()._bizContent = nil}
//
  /// 会话成员在会话内的其他业务状态，参考ChatterExtraStateType
//  public var chatterExtraStates: Dictionary<Int32,Int32> {
//    get {return _storage._chatterExtraStates}
//    set {_uniqueStorage()._chatterExtraStates = newValue}
//  }
//
  /// 用户设置
//  public var userSetting: LarkNCExtensionPB_Entities_ChatSetting {
//    get {return _storage._userSetting ?? LarkNCExtensionPB_Entities_ChatSetting()}
//    set {_uniqueStorage()._userSetting = newValue}
//  }
  /// Returns true if `userSetting` has been explicitly set.
//  public var hasUserSetting: Bool {return _storage._userSetting != nil}
  /// Clears the value of `userSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearUserSetting() {_uniqueStorage()._userSetting = nil}
//
//  public var messageVisiblePatch: LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch {
//    get {return _storage._messageVisiblePatch ?? LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch()}
//    set {_uniqueStorage()._messageVisiblePatch = newValue}
//  }
  /// Returns true if `messageVisiblePatch` has been explicitly set.
//  public var hasMessageVisiblePatch: Bool {return _storage._messageVisiblePatch != nil}
  /// Clears the value of `messageVisiblePatch`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageVisiblePatch() {_uniqueStorage()._messageVisiblePatch = nil}
//
//  public var threadVisiblePatch: LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch {
//    get {return _storage._threadVisiblePatch ?? LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch()}
//    set {_uniqueStorage()._threadVisiblePatch = newValue}
//  }
  /// Returns true if `threadVisiblePatch` has been explicitly set.
//  public var hasThreadVisiblePatch: Bool {return _storage._threadVisiblePatch != nil}
  /// Clears the value of `threadVisiblePatch`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadVisiblePatch() {_uniqueStorage()._threadVisiblePatch = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// 申请人的摘要信息
//public struct LarkNCExtensionPB_Entities_ContactSummary {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var userID: String {
//    get {return _storage._userID ?? String()}
//    set {_uniqueStorage()._userID = newValue}
//  }
  /// Returns true if `userID` has been explicitly set.
//  public var hasUserID: Bool {return _storage._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
//  public mutating func clearUserID() {_uniqueStorage()._userID = nil}
//
//  public var userName: String {
//    get {return _storage._userName ?? String()}
//    set {_uniqueStorage()._userName = newValue}
//  }
  /// Returns true if `userName` has been explicitly set.
//  public var hasUserName: Bool {return _storage._userName != nil}
  /// Clears the value of `userName`. Subsequent reads from it will return its default value.
//  public mutating func clearUserName() {_uniqueStorage()._userName = nil}
//
//  public var userEnName: String {
//    get {return _storage._userEnName ?? String()}
//    set {_uniqueStorage()._userEnName = newValue}
//  }
  /// Returns true if `userEnName` has been explicitly set.
//  public var hasUserEnName: Bool {return _storage._userEnName != nil}
  /// Clears the value of `userEnName`. Subsequent reads from it will return its default value.
//  public mutating func clearUserEnName() {_uniqueStorage()._userEnName = nil}
//
//  public var departmentName: String {
//    get {return _storage._departmentName ?? String()}
//    set {_uniqueStorage()._departmentName = newValue}
//  }
  /// Returns true if `departmentName` has been explicitly set.
//  public var hasDepartmentName: Bool {return _storage._departmentName != nil}
  /// Clears the value of `departmentName`. Subsequent reads from it will return its default value.
//  public mutating func clearDepartmentName() {_uniqueStorage()._departmentName = nil}
//
  /// deprecated since lark 3.17.0
//  public var avatarKey: String {
//    get {return _storage._avatarKey ?? String()}
//    set {_uniqueStorage()._avatarKey = newValue}
//  }
  /// Returns true if `avatarKey` has been explicitly set.
//  public var hasAvatarKey: Bool {return _storage._avatarKey != nil}
  /// Clears the value of `avatarKey`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarKey() {_uniqueStorage()._avatarKey = nil}
//
//  public var tenantName: String {
//    get {return _storage._tenantName ?? String()}
//    set {_uniqueStorage()._tenantName = newValue}
//  }
  /// Returns true if `tenantName` has been explicitly set.
//  public var hasTenantName: Bool {return _storage._tenantName != nil}
  /// Clears the value of `tenantName`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantName() {_uniqueStorage()._tenantName = nil}
//
  /// deprecated since lark 3.17.0
//  public var avatarFsUnit: String {
//    get {return _storage._avatarFsUnit ?? String()}
//    set {_uniqueStorage()._avatarFsUnit = newValue}
//  }
  /// Returns true if `avatarFsUnit` has been explicitly set.
//  public var hasAvatarFsUnit: Bool {return _storage._avatarFsUnit != nil}
  /// Clears the value of `avatarFsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarFsUnit() {_uniqueStorage()._avatarFsUnit = nil}
//
  /// 头像
//  public var avatar: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatar ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// 入群/加好友的申请
//public struct LarkNCExtensionPB_Entities_ChatApplication {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 从1开始的自增 id
//  public var id: Int64 {
//    get {return _storage._id ?? 0}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
  /// 申请的类型
//  public var type: LarkNCExtensionPB_Entities_ChatApplication.ChatApplicationType {
//    get {return _storage._type ?? .unknownType}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
  /// 入群申请的目标群 id 暂时没用
//  public var chatID: String {
//    get {return _storage._chatID ?? String()}
//    set {_uniqueStorage()._chatID = newValue}
//  }
  /// Returns true if `chatID` has been explicitly set.
//  public var hasChatID: Bool {return _storage._chatID != nil}
  /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatID() {_uniqueStorage()._chatID = nil}
//
  /// 申请人的摘要信息
//  public var contactSummary: LarkNCExtensionPB_Entities_ContactSummary {
//    get {return _storage._contactSummary ?? LarkNCExtensionPB_Entities_ContactSummary()}
//    set {_uniqueStorage()._contactSummary = newValue}
//  }
  /// Returns true if `contactSummary` has been explicitly set.
//  public var hasContactSummary: Bool {return _storage._contactSummary != nil}
  /// Clears the value of `contactSummary`. Subsequent reads from it will return its default value.
//  public mutating func clearContactSummary() {_uniqueStorage()._contactSummary = nil}
//
  /// 申请时间
//  public var applyTime: Int64 {
//    get {return _storage._applyTime ?? 0}
//    set {_uniqueStorage()._applyTime = newValue}
//  }
  /// Returns true if `applyTime` has been explicitly set.
//  public var hasApplyTime: Bool {return _storage._applyTime != nil}
  /// Clears the value of `applyTime`. Subsequent reads from it will return its default value.
//  public mutating func clearApplyTime() {_uniqueStorage()._applyTime = nil}
//
  /// 处理时间
//  public var processedTime: Int64 {
//    get {return _storage._processedTime ?? 0}
//    set {_uniqueStorage()._processedTime = newValue}
//  }
  /// Returns true if `processedTime` has been explicitly set.
//  public var hasProcessedTime: Bool {return _storage._processedTime != nil}
  /// Clears the value of `processedTime`. Subsequent reads from it will return its default value.
//  public mutating func clearProcessedTime() {_uniqueStorage()._processedTime = nil}
//
  /// 申请状态
//  public var status: LarkNCExtensionPB_Entities_ChatApplication.ApplicationStatus {
//    get {return _storage._status ?? .unknownStatus}
//    set {_uniqueStorage()._status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
  /// 用户是否已读此条申请，后端是分开存储的，user维度
//  public var isRead: Bool {
//    get {return _storage._isRead ?? false}
//    set {_uniqueStorage()._isRead = newValue}
//  }
  /// Returns true if `isRead` has been explicitly set.
//  public var hasIsRead: Bool {return _storage._isRead != nil}
  /// Clears the value of `isRead`. Subsequent reads from it will return its default value.
//  public mutating func clearIsRead() {_uniqueStorage()._isRead = nil}
//
  /// 附加信息
//  public var extraMessage: String {
//    get {return _storage._extraMessage ?? String()}
//    set {_uniqueStorage()._extraMessage = newValue}
//  }
  /// Returns true if `extraMessage` has been explicitly set.
//  public var hasExtraMessage: Bool {return _storage._extraMessage != nil}
  /// Clears the value of `extraMessage`. Subsequent reads from it will return its default value.
//  public mutating func clearExtraMessage() {_uniqueStorage()._extraMessage = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum ApplicationStatus: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownStatus // = 0
//
    /// 处理中
//    case pending // = 1
//
    /// 已同意
//    case agreed // = 2
//
    /// 已拒绝
//    case refused // = 3
//
    /// 已删除
//    case deleted // = 4
//
    /// 已过期
//    case expired // = 5
//
//    public init() {
//      self = .unknownStatus
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownStatus
//      case 1: self = .pending
//      case 2: self = .agreed
//      case 3: self = .refused
//      case 4: self = .deleted
//      case 5: self = .expired
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownStatus: return 0
//      case .pending: return 1
//      case .agreed: return 2
//      case .refused: return 3
//      case .deleted: return 4
//      case .expired: return 5
//      }
//    }
//
//  }
//
//  public enum ChatApplicationType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownType // = 0
//    case friend // = 1
//    case joinChat // = 2
//
//    public init() {
//      self = .unknownType
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownType
//      case 1: self = .friend
//      case 2: self = .joinChat
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownType: return 0
//      case .friend: return 1
//      case .joinChat: return 2
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_ChatApplication.ApplicationStatus: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_ChatApplication.ChatApplicationType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_Contact {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 添加好友关系后的主键 id （contact_id）
//  public var id: Int64 {
//    get {return _storage._id ?? 0}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
  /// contact的信息存储在chatter实体中
//  public var chatter: LarkNCExtensionPB_Entities_Chatter {
//    get {return _storage._chatter ?? LarkNCExtensionPB_Entities_Chatter()}
//    set {_uniqueStorage()._chatter = newValue}
//  }
  /// Returns true if `chatter` has been explicitly set.
//  public var hasChatter: Bool {return _storage._chatter != nil}
  /// Clears the value of `chatter`. Subsequent reads from it will return its default value.
//  public mutating func clearChatter() {_uniqueStorage()._chatter = nil}
//
  /// 是否已删除
//  public var isDeleted: Bool {
//    get {return _storage._isDeleted ?? false}
//    set {_uniqueStorage()._isDeleted = newValue}
//  }
  /// Returns true if `isDeleted` has been explicitly set.
//  public var hasIsDeleted: Bool {return _storage._isDeleted != nil}
  /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDeleted() {_uniqueStorage()._isDeleted = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// 分享历史信息
//public struct LarkNCExtensionPB_Entities_ChatShareInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
  /// 分享类型
//  public var type: LarkNCExtensionPB_Entities_ChatShareInfo.ShareType {
//    get {return _storage._type ?? .unknownType}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
  /// 分享状态
//  public var status: LarkNCExtensionPB_Entities_ChatShareInfo.ShareStatus {
//    get {return _storage._status ?? .unknownState}
//    set {_uniqueStorage()._status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
  /// 分享至的目标
//  public var targetType: LarkNCExtensionPB_Entities_ChatShareInfo.ShareTargetType {
//    get {return _storage._targetType ?? .unknownTargetType}
//    set {_uniqueStorage()._targetType = newValue}
//  }
  /// Returns true if `targetType` has been explicitly set.
//  public var hasTargetType: Bool {return _storage._targetType != nil}
  /// Clears the value of `targetType`. Subsequent reads from it will return its default value.
//  public mutating func clearTargetType() {_uniqueStorage()._targetType = nil}
//
  /// 被分享的群ID
//  public var shareChatID: String {
//    get {return _storage._shareChatID ?? String()}
//    set {_uniqueStorage()._shareChatID = newValue}
//  }
  /// Returns true if `shareChatID` has been explicitly set.
//  public var hasShareChatID: Bool {return _storage._shareChatID != nil}
  /// Clears the value of `shareChatID`. Subsequent reads from it will return its default value.
//  public mutating func clearShareChatID() {_uniqueStorage()._shareChatID = nil}
//
  /// 分享者ID
//  public var chatterID: String {
//    get {return _storage._chatterID ?? String()}
//    set {_uniqueStorage()._chatterID = newValue}
//  }
  /// Returns true if `chatterID` has been explicitly set.
//  public var hasChatterID: Bool {return _storage._chatterID != nil}
  /// Clears the value of `chatterID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatterID() {_uniqueStorage()._chatterID = nil}
//
  /// 分享token
//  public var token: String {
//    get {return _storage._token ?? String()}
//    set {_uniqueStorage()._token = newValue}
//  }
  /// Returns true if `token` has been explicitly set.
//  public var hasToken: Bool {return _storage._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
//  public mutating func clearToken() {_uniqueStorage()._token = nil}
//
  /// 分享创建时间
//  public var createTime: Int64 {
//    get {return _storage._createTime ?? 0}
//    set {_uniqueStorage()._createTime = newValue}
//  }
  /// Returns true if `createTime` has been explicitly set.
//  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}
//
  /// 分享过期时间
//  public var expireTime: Int64 {
//    get {return _storage._expireTime ?? 0}
//    set {_uniqueStorage()._expireTime = newValue}
//  }
  /// Returns true if `expireTime` has been explicitly set.
//  public var hasExpireTime: Bool {return _storage._expireTime != nil}
  /// Clears the value of `expireTime`. Subsequent reads from it will return its default value.
//  public mutating func clearExpireTime() {_uniqueStorage()._expireTime = nil}
//
//  public var extra: LarkNCExtensionPB_Entities_ChatShareInfo.ShareExtra {
//    get {return _storage._extra ?? LarkNCExtensionPB_Entities_ChatShareInfo.ShareExtra()}
//    set {_uniqueStorage()._extra = newValue}
//  }
  /// Returns true if `extra` has been explicitly set.
//  public var hasExtra: Bool {return _storage._extra != nil}
  /// Clears the value of `extra`. Subsequent reads from it will return its default value.
//  public mutating func clearExtra() {_uniqueStorage()._extra = nil}
//
  /// 分享者类型
//  public var chatterType: LarkNCExtensionPB_Entities_ChatterType {
//    get {return _storage._chatterType ?? .unknownChatter}
//    set {_uniqueStorage()._chatterType = newValue}
//  }
  /// Returns true if `chatterType` has been explicitly set.
//  public var hasChatterType: Bool {return _storage._chatterType != nil}
  /// Clears the value of `chatterType`. Subsequent reads from it will return its default value.
//  public mutating func clearChatterType() {_uniqueStorage()._chatterType = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum ShareType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//
    /// 未知类型
//    case unknownType // = 0
//
    /// 卡片消息
//    case cardMessage // = 1
//
    /// 二维码
//    case qrcode // = 2
//
    /// 文档中的群卡片
//    case cardDoc // = 3
//
    ///群链接
//    case link // = 4
//
//    public init() {
//      self = .unknownType
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownType
//      case 1: self = .cardMessage
//      case 2: self = .qrcode
//      case 3: self = .cardDoc
//      case 4: self = .link
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownType: return 0
//      case .cardMessage: return 1
//      case .qrcode: return 2
//      case .cardDoc: return 3
//      case .link: return 4
//      }
//    }
//
//  }
//
//  public enum ShareTargetType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//
    /// 未知类型
//    case unknownTargetType // = 0
//
    /// 群聊
//    case targetChat // = 1
//
    /// 单聊
//    case targetChatter // = 2
//
    /// 二维码
//    case targetQrcode // = 3
//
    /// 文档
//    case targetDoc // = 4
//
    ///群链接
//    case targetLink // = 5
//
//    public init() {
//      self = .unknownTargetType
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownTargetType
//      case 1: self = .targetChat
//      case 2: self = .targetChatter
//      case 3: self = .targetQrcode
//      case 4: self = .targetDoc
//      case 5: self = .targetLink
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownTargetType: return 0
//      case .targetChat: return 1
//      case .targetChatter: return 2
//      case .targetQrcode: return 3
//      case .targetDoc: return 4
//      case .targetLink: return 5
//      }
//    }
//
//  }
//
//  public enum ShareStatus: LarkHTTP.Enum {
//    public typealias RawValue = Int
//
    /// 未知状态
//    case unknownState // = 0
//
    /// 生效中
//    case active // = 1
//
    /// 已过期
//    case expired // = 2
//
    /// 已禁止
//    case deactived // = 3
//
//    public init() {
//      self = .unknownState
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownState
//      case 1: self = .active
//      case 2: self = .expired
//      case 3: self = .deactived
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownState: return 0
//      case .active: return 1
//      case .expired: return 2
//      case .deactived: return 3
//      }
//    }
//
//  }
//
//  public struct ShareExtra {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 分享到的群ID
//    public var chatID: String {
//      get {return _chatID ?? String()}
//      set {_chatID = newValue}
//    }
    /// Returns true if `chatID` has been explicitly set.
//    public var hasChatID: Bool {return self._chatID != nil}
    /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//    public mutating func clearChatID() {self._chatID = nil}
//
    /// 分享到群的名称
//    public var chatName: String {
//      get {return _chatName ?? String()}
//      set {_chatName = newValue}
//    }
    /// Returns true if `chatName` has been explicitly set.
//    public var hasChatName: Bool {return self._chatName != nil}
    /// Clears the value of `chatName`. Subsequent reads from it will return its default value.
//    public mutating func clearChatName() {self._chatName = nil}
//
    /// 二维码的URL
//    public var sharedURL: String {
//      get {return _sharedURL ?? String()}
//      set {_sharedURL = newValue}
//    }
    /// Returns true if `sharedURL` has been explicitly set.
//    public var hasSharedURL: Bool {return self._sharedURL != nil}
    /// Clears the value of `sharedURL`. Subsequent reads from it will return its default value.
//    public mutating func clearSharedURL() {self._sharedURL = nil}
//
    /// 如果分享到单聊的用户ID
//    public var userID: String {
//      get {return _userID ?? String()}
//      set {_userID = newValue}
//    }
    /// Returns true if `userID` has been explicitly set.
//    public var hasUserID: Bool {return self._userID != nil}
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
//    public mutating func clearUserID() {self._userID = nil}
//
    /// 单聊的用户名称
//    public var userName: String {
//      get {return _userName ?? String()}
//      set {_userName = newValue}
//    }
    /// Returns true if `userName` has been explicitly set.
//    public var hasUserName: Bool {return self._userName != nil}
    /// Clears the value of `userName`. Subsequent reads from it will return its default value.
//    public mutating func clearUserName() {self._userName = nil}
//
    /// doc的URL
//    public var docURL: String {
//      get {return _docURL ?? String()}
//      set {_docURL = newValue}
//    }
    /// Returns true if `docURL` has been explicitly set.
//    public var hasDocURL: Bool {return self._docURL != nil}
    /// Clears the value of `docURL`. Subsequent reads from it will return its default value.
//    public mutating func clearDocURL() {self._docURL = nil}
//
    /// doc的名称
//    public var docName: String {
//      get {return _docName ?? String()}
//      set {_docName = newValue}
//    }
    /// Returns true if `docName` has been explicitly set.
//    public var hasDocName: Bool {return self._docName != nil}
    /// Clears the value of `docName`. Subsequent reads from it will return its default value.
//    public mutating func clearDocName() {self._docName = nil}
//
    /// doc的种类
//    public var docType: LarkNCExtensionPB_Entities_DocType {
//      get {return _docType ?? .unknownDocType}
//      set {_docType = newValue}
//    }
    /// Returns true if `docType` has been explicitly set.
//    public var hasDocType: Bool {return self._docType != nil}
    /// Clears the value of `docType`. Subsequent reads from it will return its default value.
//    public mutating func clearDocType() {self._docType = nil}
//
    /// 是否对此doc有访问权限
//    public var unauthorizedDoc: Bool {
//      get {return _unauthorizedDoc ?? false}
//      set {_unauthorizedDoc = newValue}
//    }
    /// Returns true if `unauthorizedDoc` has been explicitly set.
//    public var hasUnauthorizedDoc: Bool {return self._unauthorizedDoc != nil}
    /// Clears the value of `unauthorizedDoc`. Subsequent reads from it will return its default value.
//    public mutating func clearUnauthorizedDoc() {self._unauthorizedDoc = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _chatID: String? = nil
//    fileprivate var _chatName: String? = nil
//    fileprivate var _sharedURL: String? = nil
//    fileprivate var _userID: String? = nil
//    fileprivate var _userName: String? = nil
//    fileprivate var _docURL: String? = nil
//    fileprivate var _docName: String? = nil
//    fileprivate var _docType: LarkNCExtensionPB_Entities_DocType? = nil
//    fileprivate var _unauthorizedDoc: Bool? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_ChatShareInfo.ShareType: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_ChatShareInfo.ShareTargetType: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_ChatShareInfo.ShareStatus: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 群成员进退历史
//public struct LarkNCExtensionPB_Entities_ChatJoinLeaveHistory {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
  /// 进群OR退群
//  public var action: LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.Action {
//    get {return _storage._action ?? .unknownAction}
//    set {_uniqueStorage()._action = newValue}
//  }
  /// Returns true if `action` has been explicitly set.
//  public var hasAction: Bool {return _storage._action != nil}
  /// Clears the value of `action`. Subsequent reads from it will return its default value.
//  public mutating func clearAction() {_uniqueStorage()._action = nil}
//
  /// 具体事件类型
//  public var event: LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.EventType {
//    get {return _storage._event ?? .unknownType}
//    set {_uniqueStorage()._event = newValue}
//  }
  /// Returns true if `event` has been explicitly set.
//  public var hasEvent: Bool {return _storage._event != nil}
  /// Clears the value of `event`. Subsequent reads from it will return its default value.
//  public mutating func clearEvent() {_uniqueStorage()._event = nil}
//
  /// 进退群的用户
//  public var chatterID: String {
//    get {return _storage._chatterID ?? String()}
//    set {_uniqueStorage()._chatterID = newValue}
//  }
  /// Returns true if `chatterID` has been explicitly set.
//  public var hasChatterID: Bool {return _storage._chatterID != nil}
  /// Clears the value of `chatterID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatterID() {_uniqueStorage()._chatterID = nil}
//
//  public var chatID: String {
//    get {return _storage._chatID ?? String()}
//    set {_uniqueStorage()._chatID = newValue}
//  }
  /// Returns true if `chatID` has been explicitly set.
//  public var hasChatID: Bool {return _storage._chatID != nil}
  /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatID() {_uniqueStorage()._chatID = nil}
//
//  public var createTime: Int64 {
//    get {return _storage._createTime ?? 0}
//    set {_uniqueStorage()._createTime = newValue}
//  }
  /// Returns true if `createTime` has been explicitly set.
//  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}
//
//  public var extra: LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.HistoryExtra {
//    get {return _storage._extra ?? LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.HistoryExtra()}
//    set {_uniqueStorage()._extra = newValue}
//  }
  /// Returns true if `extra` has been explicitly set.
//  public var hasExtra: Bool {return _storage._extra != nil}
  /// Clears the value of `extra`. Subsequent reads from it will return its default value.
//  public mutating func clearExtra() {_uniqueStorage()._extra = nil}
//
  /// 进退群用户的类型
//  public var chatterType: LarkNCExtensionPB_Entities_ChatterType {
//    get {return _storage._chatterType ?? .unknownChatter}
//    set {_uniqueStorage()._chatterType = newValue}
//  }
  /// Returns true if `chatterType` has been explicitly set.
//  public var hasChatterType: Bool {return _storage._chatterType != nil}
  /// Clears the value of `chatterType`. Subsequent reads from it will return its default value.
//  public mutating func clearChatterType() {_uniqueStorage()._chatterType = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum Action: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownAction // = 0
//
    /// 加群
//    case join // = 1
//
    /// 退群
//    case leave // = 2
//
//    public init() {
//      self = .unknownAction
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownAction
//      case 1: self = .join
//      case 2: self = .leave
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownAction: return 0
//      case .join: return 1
//      case .leave: return 2
//      }
//    }
//
//  }
//
//  public enum EventType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownType // = 0
//
    /// 自己退群
//    case delSelf // = 1
//
    /// 由管理员踢出群
//    case delAdmin // = 2
//
    /// 通过群卡片加群
//    case invMessageCard // = 10
//
    /// 通过二维码加群
//    case invQrCode // = 11
//
    /// 通过其他人邀请加群
//    case invChatter // = 12
//
    /// 通过doc中分享的群卡片加群
//    case invDoc // = 13
//
    /// 通过搜索加群
//    case invSearch // = 14
//
    /// 兜底的文案 => xxx加入群组
//    case invSelf // = 15
//
    /// 通过分享在单聊的群卡片加群 优先级比INV_MESSAGE_CARD高
//    case invP2PChat // = 16
//
    /// 通过分享在群聊的群卡片加群 优先级比INV_MESSAGE_CARD高
//    case invGroupChat // = 17
//
    /// 通过群链接加群
//    case invLink // = 18
//
//    public init() {
//      self = .unknownType
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownType
//      case 1: self = .delSelf
//      case 2: self = .delAdmin
//      case 10: self = .invMessageCard
//      case 11: self = .invQrCode
//      case 12: self = .invChatter
//      case 13: self = .invDoc
//      case 14: self = .invSearch
//      case 15: self = .invSelf
//      case 16: self = .invP2PChat
//      case 17: self = .invGroupChat
//      case 18: self = .invLink
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownType: return 0
//      case .delSelf: return 1
//      case .delAdmin: return 2
//      case .invMessageCard: return 10
//      case .invQrCode: return 11
//      case .invChatter: return 12
//      case .invDoc: return 13
//      case .invSearch: return 14
//      case .invSelf: return 15
//      case .invP2PChat: return 16
//      case .invGroupChat: return 17
//      case .invLink: return 18
//      }
//    }
//
//  }
//
//  public struct ContentValue {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var id: String {
//      get {return _id ?? String()}
//      set {_id = newValue}
//    }
    /// Returns true if `id` has been explicitly set.
//    public var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
//    public mutating func clearID() {self._id = nil}
//
    /// ID的类型
//    public var type: LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.ContentValue.ValueType {
//      get {return _type ?? .unknownValueType}
//      set {_type = newValue}
//    }
    /// Returns true if `type` has been explicitly set.
//    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {self._type = nil}
//
    /// 如果类型为Doc时 Doc的URL
//    public var docURL: String {
//      get {return _docURL ?? String()}
//      set {_docURL = newValue}
//    }
    /// Returns true if `docURL` has been explicitly set.
//    public var hasDocURL: Bool {return self._docURL != nil}
    /// Clears the value of `docURL`. Subsequent reads from it will return its default value.
//    public mutating func clearDocURL() {self._docURL = nil}
//
    /// 如果类型为Doc时 Doc的标题
//    public var docName: String {
//      get {return _docName ?? String()}
//      set {_docName = newValue}
//    }
    /// Returns true if `docName` has been explicitly set.
//    public var hasDocName: Bool {return self._docName != nil}
    /// Clears the value of `docName`. Subsequent reads from it will return its default value.
//    public mutating func clearDocName() {self._docName = nil}
//
    /// 是否对此doc有访问权限 true => 无权限的文档
//    public var unauthorizedDoc: Bool {
//      get {return _unauthorizedDoc ?? false}
//      set {_unauthorizedDoc = newValue}
//    }
    /// Returns true if `unauthorizedDoc` has been explicitly set.
//    public var hasUnauthorizedDoc: Bool {return self._unauthorizedDoc != nil}
    /// Clears the value of `unauthorizedDoc`. Subsequent reads from it will return its default value.
//    public mutating func clearUnauthorizedDoc() {self._unauthorizedDoc = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum ValueType: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknownValueType // = 0
//
      /// 用户ID
//      case user // = 1
//
      /// 机器人ID
//      case bot // = 2
//
      /// 群ID
//      case chat // = 3
//
      /// DocID
//      case doc // = 4
//
//      public init() {
//        self = .unknownValueType
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknownValueType
//        case 1: self = .user
//        case 2: self = .bot
//        case 3: self = .chat
//        case 4: self = .doc
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknownValueType: return 0
//        case .user: return 1
//        case .bot: return 2
//        case .chat: return 3
//        case .doc: return 4
//        }
//      }
//
//    }
//
//    public init() {}
//
//    fileprivate var _id: String? = nil
//    fileprivate var _type: LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.ContentValue.ValueType? = nil
//    fileprivate var _docURL: String? = nil
//    fileprivate var _docName: String? = nil
//    fileprivate var _unauthorizedDoc: Bool? = nil
//  }
//
//  public struct HistoryExtra {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 展示文案的模板
//    public var template: String {
//      get {return _template ?? String()}
//      set {_template = newValue}
//    }
    /// Returns true if `template` has been explicitly set.
//    public var hasTemplate: Bool {return self._template != nil}
    /// Clears the value of `template`. Subsequent reads from it will return its default value.
//    public mutating func clearTemplate() {self._template = nil}
//
    /// 模板中待填充的数据
//    public var contentValues: Dictionary<String,LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.ContentValue> = [:]
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _template: String? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.Action: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.EventType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_ThreadStateInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var state: LarkNCExtensionPB_Entities_ThreadState {
//    get {return _state ?? .unknownState}
//    set {_state = newValue}
//  }
  /// Returns true if `state` has been explicitly set.
//  public var hasState: Bool {return self._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
//  public mutating func clearState() {self._state = nil}
//
//  public var operatorID: String {
//    get {return _operatorID ?? String()}
//    set {_operatorID = newValue}
//  }
  /// Returns true if `operatorID` has been explicitly set.
//  public var hasOperatorID: Bool {return self._operatorID != nil}
  /// Clears the value of `operatorID`. Subsequent reads from it will return its default value.
//  public mutating func clearOperatorID() {self._operatorID = nil}
//
//  public var updateTimeMs: Int64 {
//    get {return _updateTimeMs ?? 0}
//    set {_updateTimeMs = newValue}
//  }
  /// Returns true if `updateTimeMs` has been explicitly set.
//  public var hasUpdateTimeMs: Bool {return self._updateTimeMs != nil}
  /// Clears the value of `updateTimeMs`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTimeMs() {self._updateTimeMs = nil}
//
  /// state枚举值的对应数值，为了解决新增枚举值项被老版本转义成UNKNOWN_STATE
//  public var stateNum: Int32 {
//    get {return _stateNum ?? 0}
//    set {_stateNum = newValue}
//  }
  /// Returns true if `stateNum` has been explicitly set.
//  public var hasStateNum: Bool {return self._stateNum != nil}
  /// Clears the value of `stateNum`. Subsequent reads from it will return its default value.
//  public mutating func clearStateNum() {self._stateNum = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _state: LarkNCExtensionPB_Entities_ThreadState? = nil
//  fileprivate var _operatorID: String? = nil
//  fileprivate var _updateTimeMs: Int64? = nil
//  fileprivate var _stateNum: Int32? = nil
//}

//public struct LarkNCExtensionPB_Entities_Thread {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
//  public var channelID: String {
//    get {return _storage._channelID ?? String()}
//    set {_uniqueStorage()._channelID = newValue}
//  }
  /// Returns true if `channelID` has been explicitly set.
//  public var hasChannelID: Bool {return _storage._channelID != nil}
  /// Clears the value of `channelID`. Subsequent reads from it will return its default value.
//  public mutating func clearChannelID() {_uniqueStorage()._channelID = nil}
//
//  public var channelType: LarkNCExtensionPB_Entities_ChannelType {
//    get {return _storage._channelType ?? .chatChannel}
//    set {_uniqueStorage()._channelType = newValue}
//  }
  /// Returns true if `channelType` has been explicitly set.
//  public var hasChannelType: Bool {return _storage._channelType != nil}
  /// Clears the value of `channelType`. Subsequent reads from it will return its default value.
//  public mutating func clearChannelType() {_uniqueStorage()._channelType = nil}
//
//  public var topic: String {
//    get {return _storage._topic ?? String()}
//    set {_uniqueStorage()._topic = newValue}
//  }
  /// Returns true if `topic` has been explicitly set.
//  public var hasTopic: Bool {return _storage._topic != nil}
  /// Clears the value of `topic`. Subsequent reads from it will return its default value.
//  public mutating func clearTopic() {_uniqueStorage()._topic = nil}
//
  /// position of thread in it's chat
//  public var position: Int32 {
//    get {return _storage._position ?? 0}
//    set {_uniqueStorage()._position = newValue}
//  }
  /// Returns true if `position` has been explicitly set.
//  public var hasPosition: Bool {return _storage._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
//  public mutating func clearPosition() {_uniqueStorage()._position = nil}
//
  /// 秒
//  public var updateTime: Int64 {
//    get {return _storage._updateTime ?? 0}
//    set {_uniqueStorage()._updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}
//
  /// first message in thread
//  public var rootMessageID: String {
//    get {return _storage._rootMessageID ?? String()}
//    set {_uniqueStorage()._rootMessageID = newValue}
//  }
  /// Returns true if `rootMessageID` has been explicitly set.
//  public var hasRootMessageID: Bool {return _storage._rootMessageID != nil}
  /// Clears the value of `rootMessageID`. Subsequent reads from it will return its default value.
//  public mutating func clearRootMessageID() {_uniqueStorage()._rootMessageID = nil}
//
//  public var lastMessageID: String {
//    get {return _storage._lastMessageID ?? String()}
//    set {_uniqueStorage()._lastMessageID = newValue}
//  }
  /// Returns true if `lastMessageID` has been explicitly set.
//  public var hasLastMessageID: Bool {return _storage._lastMessageID != nil}
  /// Clears the value of `lastMessageID`. Subsequent reads from it will return its default value.
//  public mutating func clearLastMessageID() {_uniqueStorage()._lastMessageID = nil}
//
  /// last position of message in it's thread
//  public var lastMessagePosition: Int32 {
//    get {return _storage._lastMessagePosition ?? 0}
//    set {_uniqueStorage()._lastMessagePosition = newValue}
//  }
  /// Returns true if `lastMessagePosition` has been explicitly set.
//  public var hasLastMessagePosition: Bool {return _storage._lastMessagePosition != nil}
  /// Clears the value of `lastMessagePosition`. Subsequent reads from it will return its default value.
//  public mutating func clearLastMessagePosition() {_uniqueStorage()._lastMessagePosition = nil}
//
  /// deprecated
//  public var newMessageCount: Int32 {
//    get {return _storage._newMessageCount ?? 0}
//    set {_uniqueStorage()._newMessageCount = newValue}
//  }
  /// Returns true if `newMessageCount` has been explicitly set.
//  public var hasNewMessageCount: Bool {return _storage._newMessageCount != nil}
  /// Clears the value of `newMessageCount`. Subsequent reads from it will return its default value.
//  public mutating func clearNewMessageCount() {_uniqueStorage()._newMessageCount = nil}
//
//  public var replyCount: Int32 {
//    get {return _storage._replyCount ?? 0}
//    set {_uniqueStorage()._replyCount = newValue}
//  }
  /// Returns true if `replyCount` has been explicitly set.
//  public var hasReplyCount: Bool {return _storage._replyCount != nil}
  /// Clears the value of `replyCount`. Subsequent reads from it will return its default value.
//  public mutating func clearReplyCount() {_uniqueStorage()._replyCount = nil}
//
  /// deprecated
//  public var noBadgedNewMessageCount: Int32 {
//    get {return _storage._noBadgedNewMessageCount ?? 0}
//    set {_uniqueStorage()._noBadgedNewMessageCount = newValue}
//  }
  /// Returns true if `noBadgedNewMessageCount` has been explicitly set.
//  public var hasNoBadgedNewMessageCount: Bool {return _storage._noBadgedNewMessageCount != nil}
  /// Clears the value of `noBadgedNewMessageCount`. Subsequent reads from it will return its default value.
//  public mutating func clearNoBadgedNewMessageCount() {_uniqueStorage()._noBadgedNewMessageCount = nil}
//
  /// thread 中第一条回复的 position
//  public var messageStartPosition: Int32 {
//    get {return _storage._messageStartPosition ?? 0}
//    set {_uniqueStorage()._messageStartPosition = newValue}
//  }
  /// Returns true if `messageStartPosition` has been explicitly set.
//  public var hasMessageStartPosition: Bool {return _storage._messageStartPosition != nil}
  /// Clears the value of `messageStartPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageStartPosition() {_uniqueStorage()._messageStartPosition = nil}
//
  /// the creator or owner of this thread
//  public var ownerID: String {
//    get {return _storage._ownerID ?? String()}
//    set {_uniqueStorage()._ownerID = newValue}
//  }
  /// Returns true if `ownerID` has been explicitly set.
//  public var hasOwnerID: Bool {return _storage._ownerID != nil}
  /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
//  public mutating func clearOwnerID() {_uniqueStorage()._ownerID = nil}
//
//  public var isVisible: Bool {
//    get {return _storage._isVisible ?? false}
//    set {_uniqueStorage()._isVisible = newValue}
//  }
  /// Returns true if `isVisible` has been explicitly set.
//  public var hasIsVisible: Bool {return _storage._isVisible != nil}
  /// Clears the value of `isVisible`. Subsequent reads from it will return its default value.
//  public mutating func clearIsVisible() {_uniqueStorage()._isVisible = nil}
//
//  public var isBadged: Bool {
//    get {return _storage._isBadged ?? false}
//    set {_uniqueStorage()._isBadged = newValue}
//  }
  /// Returns true if `isBadged` has been explicitly set.
//  public var hasIsBadged: Bool {return _storage._isBadged != nil}
  /// Clears the value of `isBadged`. Subsequent reads from it will return its default value.
//  public mutating func clearIsBadged() {_uniqueStorage()._isBadged = nil}
//
//  public var badgeCount: Int32 {
//    get {return _storage._badgeCount ?? 0}
//    set {_uniqueStorage()._badgeCount = newValue}
//  }
  /// Returns true if `badgeCount` has been explicitly set.
//  public var hasBadgeCount: Bool {return _storage._badgeCount != nil}
  /// Clears the value of `badgeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearBadgeCount() {_uniqueStorage()._badgeCount = nil}
//
//  public var lastVisibleMessagePosition: Int32 {
//    get {return _storage._lastVisibleMessagePosition ?? 0}
//    set {_uniqueStorage()._lastVisibleMessagePosition = newValue}
//  }
  /// Returns true if `lastVisibleMessagePosition` has been explicitly set.
//  public var hasLastVisibleMessagePosition: Bool {return _storage._lastVisibleMessagePosition != nil}
  /// Clears the value of `lastVisibleMessagePosition`. Subsequent reads from it will return its default value.
//  public mutating func clearLastVisibleMessagePosition() {_uniqueStorage()._lastVisibleMessagePosition = nil}
//
//  public var lastVisibleMessageID: String {
//    get {return _storage._lastVisibleMessageID ?? String()}
//    set {_uniqueStorage()._lastVisibleMessageID = newValue}
//  }
  /// Returns true if `lastVisibleMessageID` has been explicitly set.
//  public var hasLastVisibleMessageID: Bool {return _storage._lastVisibleMessageID != nil}
  /// Clears the value of `lastVisibleMessageID`. Subsequent reads from it will return its default value.
//  public mutating func clearLastVisibleMessageID() {_uniqueStorage()._lastVisibleMessageID = nil}
//
//  public var readPosition: Int32 {
//    get {return _storage._readPosition ?? 0}
//    set {_uniqueStorage()._readPosition = newValue}
//  }
  /// Returns true if `readPosition` has been explicitly set.
//  public var hasReadPosition: Bool {return _storage._readPosition != nil}
  /// Clears the value of `readPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearReadPosition() {_uniqueStorage()._readPosition = nil}
//
//  public var readPositionBadgeCount: Int32 {
//    get {return _storage._readPositionBadgeCount ?? 0}
//    set {_uniqueStorage()._readPositionBadgeCount = newValue}
//  }
  /// Returns true if `readPositionBadgeCount` has been explicitly set.
//  public var hasReadPositionBadgeCount: Bool {return _storage._readPositionBadgeCount != nil}
  /// Clears the value of `readPositionBadgeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearReadPositionBadgeCount() {_uniqueStorage()._readPositionBadgeCount = nil}
//
//  public var lastMessagePositionBadgeCount: Int32 {
//    get {return _storage._lastMessagePositionBadgeCount ?? 0}
//    set {_uniqueStorage()._lastMessagePositionBadgeCount = newValue}
//  }
  /// Returns true if `lastMessagePositionBadgeCount` has been explicitly set.
//  public var hasLastMessagePositionBadgeCount: Bool {return _storage._lastMessagePositionBadgeCount != nil}
  /// Clears the value of `lastMessagePositionBadgeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearLastMessagePositionBadgeCount() {_uniqueStorage()._lastMessagePositionBadgeCount = nil}
//
//  public var createTime: Int64 {
//    get {return _storage._createTime ?? 0}
//    set {_uniqueStorage()._createTime = newValue}
//  }
  /// Returns true if `createTime` has been explicitly set.
//  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}
//
//  public var subtitle: String {
//    get {return _storage._subtitle ?? String()}
//    set {_uniqueStorage()._subtitle = newValue}
//  }
  /// Returns true if `subtitle` has been explicitly set.
//  public var hasSubtitle: Bool {return _storage._subtitle != nil}
  /// Clears the value of `subtitle`. Subsequent reads from it will return its default value.
//  public mutating func clearSubtitle() {_uniqueStorage()._subtitle = nil}
//
//  public var isNoTraceRemoved: Bool {
//    get {return _storage._isNoTraceRemoved ?? false}
//    set {_uniqueStorage()._isNoTraceRemoved = newValue}
//  }
  /// Returns true if `isNoTraceRemoved` has been explicitly set.
//  public var hasIsNoTraceRemoved: Bool {return _storage._isNoTraceRemoved != nil}
  /// Clears the value of `isNoTraceRemoved`. Subsequent reads from it will return its default value.
//  public mutating func clearIsNoTraceRemoved() {_uniqueStorage()._isNoTraceRemoved = nil}
//
//  public var noReplyCount: Int32 {
//    get {return _storage._noReplyCount ?? 0}
//    set {_uniqueStorage()._noReplyCount = newValue}
//  }
  /// Returns true if `noReplyCount` has been explicitly set.
//  public var hasNoReplyCount: Bool {return _storage._noReplyCount != nil}
  /// Clears the value of `noReplyCount`. Subsequent reads from it will return its default value.
//  public mutating func clearNoReplyCount() {_uniqueStorage()._noReplyCount = nil}
//
//  public var stateInfo: LarkNCExtensionPB_Entities_ThreadStateInfo {
//    get {return _storage._stateInfo ?? LarkNCExtensionPB_Entities_ThreadStateInfo()}
//    set {_uniqueStorage()._stateInfo = newValue}
//  }
  /// Returns true if `stateInfo` has been explicitly set.
//  public var hasStateInfo: Bool {return _storage._stateInfo != nil}
  /// Clears the value of `stateInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearStateInfo() {_uniqueStorage()._stateInfo = nil}
//
  /// 参与列表排序时间
//  public var rankTime: Int64 {
//    get {return _storage._rankTime ?? 0}
//    set {_uniqueStorage()._rankTime = newValue}
//  }
  /// Returns true if `rankTime` has been explicitly set.
//  public var hasRankTime: Bool {return _storage._rankTime != nil}
  /// Clears the value of `rankTime`. Subsequent reads from it will return its default value.
//  public mutating func clearRankTime() {_uniqueStorage()._rankTime = nil}
//
  /// 帖子是否允许匿名回复
//  public var canAnonymousReply: Bool {
//    get {return _storage._canAnonymousReply ?? false}
//    set {_uniqueStorage()._canAnonymousReply = newValue}
//  }
  /// Returns true if `canAnonymousReply` has been explicitly set.
//  public var hasCanAnonymousReply: Bool {return _storage._canAnonymousReply != nil}
  /// Clears the value of `canAnonymousReply`. Subsequent reads from it will return its default value.
//  public mutating func clearCanAnonymousReply() {_uniqueStorage()._canAnonymousReply = nil}
//
  ///普通群支持话题：新版话题字段
//  public var topRepliers: [Int64] {
//    get {return _storage._topRepliers}
//    set {_uniqueStorage()._topRepliers = newValue}
//  }
//
  ///最新回复时间（秒）
//  public var latestReplyTime: Int64 {
//    get {return _storage._latestReplyTime ?? 0}
//    set {_uniqueStorage()._latestReplyTime = newValue}
//  }
  /// Returns true if `latestReplyTime` has been explicitly set.
//  public var hasLatestReplyTime: Bool {return _storage._latestReplyTime != nil}
  /// Clears the value of `latestReplyTime`. Subsequent reads from it will return its default value.
//  public mutating func clearLatestReplyTime() {_uniqueStorage()._latestReplyTime = nil}
//
  /// 在对话群中reply_in_thread
//  public var isReplyInThread: Bool {
//    get {return _storage._isReplyInThread ?? false}
//    set {_uniqueStorage()._isReplyInThread = newValue}
//  }
  /// Returns true if `isReplyInThread` has been explicitly set.
//  public var hasIsReplyInThread: Bool {return _storage._isReplyInThread != nil}
  /// Clears the value of `isReplyInThread`. Subsequent reads from it will return its default value.
//  public mutating func clearIsReplyInThread() {_uniqueStorage()._isReplyInThread = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_MessageWithThread {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var rootMessage: LarkNCExtensionPB_Entities_Message {
//    get {return _storage._rootMessage ?? LarkNCExtensionPB_Entities_Message()}
//    set {_uniqueStorage()._rootMessage = newValue}
//  }
  /// Returns true if `rootMessage` has been explicitly set.
//  public var hasRootMessage: Bool {return _storage._rootMessage != nil}
  /// Clears the value of `rootMessage`. Subsequent reads from it will return its default value.
//  public mutating func clearRootMessage() {_uniqueStorage()._rootMessage = nil}
//
//  public var lastMessages: [LarkNCExtensionPB_Entities_Message] {
//    get {return _storage._lastMessages}
//    set {_uniqueStorage()._lastMessages = newValue}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_ThreadSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var threadID: String {
//    get {return _threadID ?? String()}
//    set {_threadID = newValue}
//  }
  /// Returns true if `threadID` has been explicitly set.
//  public var hasThreadID: Bool {return self._threadID != nil}
  /// Clears the value of `threadID`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadID() {self._threadID = nil}
//
  /// 是否订阅
//  public var isFollow: Bool {
//    get {return _isFollow ?? false}
//    set {_isFollow = newValue}
//  }
  /// Returns true if `isFollow` has been explicitly set.
//  public var hasIsFollow: Bool {return self._isFollow != nil}
  /// Clears the value of `isFollow`. Subsequent reads from it will return its default value.
//  public mutating func clearIsFollow() {self._isFollow = nil}
//
  /// 是否订阅 3.36后新版使用 仅发生在用户主动订阅
//  public var isFollowV2: Bool {
//    get {return _isFollowV2 ?? false}
//    set {_isFollowV2 = newValue}
//  }
  /// Returns true if `isFollowV2` has been explicitly set.
//  public var hasIsFollowV2: Bool {return self._isFollowV2 != nil}
  /// Clears the value of `isFollowV2`. Subsequent reads from it will return its default value.
//  public mutating func clearIsFollowV2() {self._isFollowV2 = nil}
//
  /// 用户在 thread 下的匿名身份, sdk 只对非 null 情况处理，如果是 null，sdk 不做覆盖
//  public var anonymousID: String {
//    get {return _anonymousID ?? String()}
//    set {_anonymousID = newValue}
//  }
  /// Returns true if `anonymousID` has been explicitly set.
//  public var hasAnonymousID: Bool {return self._anonymousID != nil}
  /// Clears the value of `anonymousID`. Subsequent reads from it will return its default value.
//  public mutating func clearAnonymousID() {self._anonymousID = nil}
//
  ///帖子的消息提醒设置，为false时，为免打扰
//  public var isRemind: Bool {
//    get {return _isRemind ?? true}
//    set {_isRemind = newValue}
//  }
  /// Returns true if `isRemind` has been explicitly set.
//  public var hasIsRemind: Bool {return self._isRemind != nil}
  /// Clears the value of `isRemind`. Subsequent reads from it will return its default value.
//  public mutating func clearIsRemind() {self._isRemind = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _threadID: String? = nil
//  fileprivate var _isFollow: Bool? = nil
//  fileprivate var _isFollowV2: Bool? = nil
//  fileprivate var _anonymousID: String? = nil
//  fileprivate var _isRemind: Bool? = nil
//}

//public struct LarkNCExtensionPB_Entities_ThreadFilter {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var filterID: Int64 {
//    get {return _filterID ?? 0}
//    set {_filterID = newValue}
//  }
  /// Returns true if `filterID` has been explicitly set.
//  public var hasFilterID: Bool {return self._filterID != nil}
  /// Clears the value of `filterID`. Subsequent reads from it will return its default value.
//  public mutating func clearFilterID() {self._filterID = nil}
//
//  public var i18NNames: Dictionary<String,String> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _filterID: Int64? = nil
//}

/// 用户保护模式
//public struct LarkNCExtensionPB_Entities_AccessibleInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 默认可用
//  public var isAccessible: Bool {
//    get {return _isAccessible ?? true}
//    set {_isAccessible = newValue}
//  }
  /// Returns true if `isAccessible` has been explicitly set.
//  public var hasIsAccessible: Bool {return self._isAccessible != nil}
  /// Clears the value of `isAccessible`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAccessible() {self._isAccessible = nil}
//
//  public var inaccessibleCode: LarkNCExtensionPB_Entities_AccessibleInfo.InaccessibleCode {
//    get {return _inaccessibleCode ?? .default}
//    set {_inaccessibleCode = newValue}
//  }
  /// Returns true if `inaccessibleCode` has been explicitly set.
//  public var hasInaccessibleCode: Bool {return self._inaccessibleCode != nil}
  /// Clears the value of `inaccessibleCode`. Subsequent reads from it will return its default value.
//  public mutating func clearInaccessibleCode() {self._inaccessibleCode = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum InaccessibleCode: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case `default` // = 0
//    case executives // = 1
//    case emptyName // = 2
//    case emptyPhone // = 3
//    case crossTenant // = 4
//    case notFriend // = 5
//
//    public init() {
//      self = .default
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .default
//      case 1: self = .executives
//      case 2: self = .emptyName
//      case 3: self = .emptyPhone
//      case 4: self = .crossTenant
//      case 5: self = .notFriend
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .default: return 0
//      case .executives: return 1
//      case .emptyName: return 2
//      case .emptyPhone: return 3
//      case .crossTenant: return 4
//      case .notFriend: return 5
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _isAccessible: Bool? = nil
//  fileprivate var _inaccessibleCode: LarkNCExtensionPB_Entities_AccessibleInfo.InaccessibleCode? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_AccessibleInfo.InaccessibleCode: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_UserConfig {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// deprecated
//  public var phoneCallAccessible: Bool {
//    get {return _storage._phoneCallAccessible ?? true}
//    set {_uniqueStorage()._phoneCallAccessible = newValue}
//  }
  /// Returns true if `phoneCallAccessible` has been explicitly set.
//  public var hasPhoneCallAccessible: Bool {return _storage._phoneCallAccessible != nil}
  /// Clears the value of `phoneCallAccessible`. Subsequent reads from it will return its default value.
//  public mutating func clearPhoneCallAccessible() {_uniqueStorage()._phoneCallAccessible = nil}
//
  /// deprecated
//  public var voiceCallAccessible: Bool {
//    get {return _storage._voiceCallAccessible ?? true}
//    set {_uniqueStorage()._voiceCallAccessible = newValue}
//  }
  /// Returns true if `voiceCallAccessible` has been explicitly set.
//  public var hasVoiceCallAccessible: Bool {return _storage._voiceCallAccessible != nil}
  /// Clears the value of `voiceCallAccessible`. Subsequent reads from it will return its default value.
//  public mutating func clearVoiceCallAccessible() {_uniqueStorage()._voiceCallAccessible = nil}
//
  /// deprecated
//  public var videoCallAccessible: Bool {
//    get {return _storage._videoCallAccessible ?? true}
//    set {_uniqueStorage()._videoCallAccessible = newValue}
//  }
  /// Returns true if `videoCallAccessible` has been explicitly set.
//  public var hasVideoCallAccessible: Bool {return _storage._videoCallAccessible != nil}
  /// Clears the value of `videoCallAccessible`. Subsequent reads from it will return its default value.
//  public mutating func clearVideoCallAccessible() {_uniqueStorage()._videoCallAccessible = nil}
//
//  public var accessPhoneCall: LarkNCExtensionPB_Entities_AccessibleInfo {
//    get {return _storage._accessPhoneCall ?? LarkNCExtensionPB_Entities_AccessibleInfo()}
//    set {_uniqueStorage()._accessPhoneCall = newValue}
//  }
  /// Returns true if `accessPhoneCall` has been explicitly set.
//  public var hasAccessPhoneCall: Bool {return _storage._accessPhoneCall != nil}
  /// Clears the value of `accessPhoneCall`. Subsequent reads from it will return its default value.
//  public mutating func clearAccessPhoneCall() {_uniqueStorage()._accessPhoneCall = nil}
//
//  public var accessVoiceCall: LarkNCExtensionPB_Entities_AccessibleInfo {
//    get {return _storage._accessVoiceCall ?? LarkNCExtensionPB_Entities_AccessibleInfo()}
//    set {_uniqueStorage()._accessVoiceCall = newValue}
//  }
  /// Returns true if `accessVoiceCall` has been explicitly set.
//  public var hasAccessVoiceCall: Bool {return _storage._accessVoiceCall != nil}
  /// Clears the value of `accessVoiceCall`. Subsequent reads from it will return its default value.
//  public mutating func clearAccessVoiceCall() {_uniqueStorage()._accessVoiceCall = nil}
//
//  public var accessVideoCall: LarkNCExtensionPB_Entities_AccessibleInfo {
//    get {return _storage._accessVideoCall ?? LarkNCExtensionPB_Entities_AccessibleInfo()}
//    set {_uniqueStorage()._accessVideoCall = newValue}
//  }
  /// Returns true if `accessVideoCall` has been explicitly set.
//  public var hasAccessVideoCall: Bool {return _storage._accessVideoCall != nil}
  /// Clears the value of `accessVideoCall`. Subsequent reads from it will return its default value.
//  public mutating func clearAccessVideoCall() {_uniqueStorage()._accessVideoCall = nil}
//
//  public var accessUrgent: LarkNCExtensionPB_Entities_AccessibleInfo {
//    get {return _storage._accessUrgent ?? LarkNCExtensionPB_Entities_AccessibleInfo()}
//    set {_uniqueStorage()._accessUrgent = newValue}
//  }
  /// Returns true if `accessUrgent` has been explicitly set.
//  public var hasAccessUrgent: Bool {return _storage._accessUrgent != nil}
  /// Clears the value of `accessUrgent`. Subsequent reads from it will return its default value.
//  public mutating func clearAccessUrgent() {_uniqueStorage()._accessUrgent = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_User {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
//  public var avatar: LarkNCExtensionPB_Entities_ImageSet {
//    get {return _storage._avatar ?? LarkNCExtensionPB_Entities_ImageSet()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
//  public var status: Int32 {
//    get {return _storage._status ?? 0}
//    set {_uniqueStorage()._status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
//  public var avatarURL: String {
//    get {return _storage._avatarURL ?? String()}
//    set {_uniqueStorage()._avatarURL = newValue}
//  }
  /// Returns true if `avatarURL` has been explicitly set.
//  public var hasAvatarURL: Bool {return _storage._avatarURL != nil}
  /// Clears the value of `avatarURL`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarURL() {_uniqueStorage()._avatarURL = nil}
//
  /// aborted
//  public var namePinyin: String {
//    get {return _storage._namePinyin ?? String()}
//    set {_uniqueStorage()._namePinyin = newValue}
//  }
  /// Returns true if `namePinyin` has been explicitly set.
//  public var hasNamePinyin: Bool {return _storage._namePinyin != nil}
  /// Clears the value of `namePinyin`. Subsequent reads from it will return its default value.
//  public mutating func clearNamePinyin() {_uniqueStorage()._namePinyin = nil}
//
//  public var updateTime: Int64 {
//    get {return _storage._updateTime ?? 0}
//    set {_uniqueStorage()._updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}
//
  /// [废弃] optional string phone_number = 8;
//  public var isRegistered: Bool {
//    get {return _storage._isRegistered ?? false}
//    set {_uniqueStorage()._isRegistered = newValue}
//  }
  /// Returns true if `isRegistered` has been explicitly set.
//  public var hasIsRegistered: Bool {return _storage._isRegistered != nil}
  /// Clears the value of `isRegistered`. Subsequent reads from it will return its default value.
//  public mutating func clearIsRegistered() {_uniqueStorage()._isRegistered = nil}
//
//  public var namePy: String {
//    get {return _storage._namePy ?? String()}
//    set {_uniqueStorage()._namePy = newValue}
//  }
  /// Returns true if `namePy` has been explicitly set.
//  public var hasNamePy: Bool {return _storage._namePy != nil}
  /// Clears the value of `namePy`. Subsequent reads from it will return its default value.
//  public mutating func clearNamePy() {_uniqueStorage()._namePy = nil}
//
//  public var tenantID: String {
//    get {return _storage._tenantID ?? String()}
//    set {_uniqueStorage()._tenantID = newValue}
//  }
  /// Returns true if `tenantID` has been explicitly set.
//  public var hasTenantID: Bool {return _storage._tenantID != nil}
  /// Clears the value of `tenantID`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantID() {_uniqueStorage()._tenantID = nil}
//
//  public var description_p: String {
//    get {return _storage._description_p ?? String()}
//    set {_uniqueStorage()._description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}
//
//  public var descriptionFlag: LarkNCExtensionPB_Entities_User.DescriptionFlag {
//    get {return _storage._descriptionFlag ?? .default}
//    set {_uniqueStorage()._descriptionFlag = newValue}
//  }
  /// Returns true if `descriptionFlag` has been explicitly set.
//  public var hasDescriptionFlag: Bool {return _storage._descriptionFlag != nil}
  /// Clears the value of `descriptionFlag`. Subsequent reads from it will return its default value.
//  public mutating func clearDescriptionFlag() {_uniqueStorage()._descriptionFlag = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum DescriptionFlag: LarkHTTP.Enum {
//    public typealias RawValue = Int
//
    /// 默认状态
//    case `default` // = 0
//
    /// 出差状态
//    case onBusiness // = 1
//
    /// 请假状态
//    case onLeave // = 2
//
    /// 开会状态
//    case onMeeting // = 3
//
//    public init() {
//      self = .default
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .default
//      case 1: self = .onBusiness
//      case 2: self = .onLeave
//      case 3: self = .onMeeting
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .default: return 0
//      case .onBusiness: return 1
//      case .onLeave: return 2
//      case .onMeeting: return 3
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_User.DescriptionFlag: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_BotConfig {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var withBotTag: String {
//    get {return _withBotTag ?? "bot"}
//    set {_withBotTag = newValue}
//  }
  /// Returns true if `withBotTag` has been explicitly set.
//  public var hasWithBotTag: Bool {return self._withBotTag != nil}
  /// Clears the value of `withBotTag`. Subsequent reads from it will return its default value.
//  public mutating func clearWithBotTag() {self._withBotTag = nil}
//
//  public var inContacts: Bool {
//    get {return _inContacts ?? true}
//    set {_inContacts = newValue}
//  }
  /// Returns true if `inContacts` has been explicitly set.
//  public var hasInContacts: Bool {return self._inContacts != nil}
  /// Clears the value of `inContacts`. Subsequent reads from it will return its default value.
//  public mutating func clearInContacts() {self._inContacts = nil}
//
//  public var canJoinGroup: Bool {
//    get {return _canJoinGroup ?? true}
//    set {_canJoinGroup = newValue}
//  }
  /// Returns true if `canJoinGroup` has been explicitly set.
//  public var hasCanJoinGroup: Bool {return self._canJoinGroup != nil}
  /// Clears the value of `canJoinGroup`. Subsequent reads from it will return its default value.
//  public mutating func clearCanJoinGroup() {self._canJoinGroup = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _withBotTag: String? = nil
//  fileprivate var _inContacts: Bool? = nil
//  fileprivate var _canJoinGroup: Bool? = nil
//}

/// 应用相关实体
//public struct LarkNCExtensionPB_Entities_ActionExtraInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var adminID: Int64 {
//    get {return _adminID ?? 0}
//    set {_adminID = newValue}
//  }
  /// Returns true if `adminID` has been explicitly set.
//  public var hasAdminID: Bool {return self._adminID != nil}
  /// Clears the value of `adminID`. Subsequent reads from it will return its default value.
//  public mutating func clearAdminID() {self._adminID = nil}
//
//  public var url: String {
//    get {return _url ?? String()}
//    set {_url = newValue}
//  }
  /// Returns true if `url` has been explicitly set.
//  public var hasURL: Bool {return self._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
//  public mutating func clearURL() {self._url = nil}
//
//  public var params: String {
//    get {return _params ?? String()}
//    set {_params = newValue}
//  }
  /// Returns true if `params` has been explicitly set.
//  public var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
//  public mutating func clearParams() {self._params = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _adminID: Int64? = nil
//  fileprivate var _url: String? = nil
//  fileprivate var _params: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_ActionInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var i18NText: Dictionary<String,String> {
//    get {return _storage._i18NText}
//    set {_uniqueStorage()._i18NText = newValue}
//  }
//
//  public var operatorCode: LarkNCExtensionPB_Entities_ActionInfo.ActionOperateCode {
//    get {return _storage._operatorCode ?? .closeWindow}
//    set {_uniqueStorage()._operatorCode = newValue}
//  }
  /// Returns true if `operatorCode` has been explicitly set.
//  public var hasOperatorCode: Bool {return _storage._operatorCode != nil}
  /// Clears the value of `operatorCode`. Subsequent reads from it will return its default value.
//  public mutating func clearOperatorCode() {_uniqueStorage()._operatorCode = nil}
//
//  public var actionCode: LarkNCExtensionPB_Entities_ActionInfo.ActionCode {
//    get {return _storage._actionCode ?? .actionNone}
//    set {_uniqueStorage()._actionCode = newValue}
//  }
  /// Returns true if `actionCode` has been explicitly set.
//  public var hasActionCode: Bool {return _storage._actionCode != nil}
  /// Clears the value of `actionCode`. Subsequent reads from it will return its default value.
//  public mutating func clearActionCode() {_uniqueStorage()._actionCode = nil}
//
//  public var extra: LarkNCExtensionPB_Entities_ActionExtraInfo {
//    get {return _storage._extra ?? LarkNCExtensionPB_Entities_ActionExtraInfo()}
//    set {_uniqueStorage()._extra = newValue}
//  }
  /// Returns true if `extra` has been explicitly set.
//  public var hasExtra: Bool {return _storage._extra != nil}
  /// Clears the value of `extra`. Subsequent reads from it will return its default value.
//  public mutating func clearExtra() {_uniqueStorage()._extra = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum ActionOperateCode: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case closeWindow // = 1
//    case closeApp // = 2
//
//    public init() {
//      self = .closeWindow
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .closeWindow
//      case 2: self = .closeApp
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .closeWindow: return 1
//      case .closeApp: return 2
//      }
//    }
//
//  }
//
//  public enum ActionCode: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case actionNone // = 0
//    case actionContactAdmin // = 1
//    case actionApplyUse // = 2
//
//    public init() {
//      self = .actionNone
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .actionNone
//      case 1: self = .actionContactAdmin
//      case 2: self = .actionApplyUse
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .actionNone: return 0
//      case .actionContactAdmin: return 1
//      case .actionApplyUse: return 2
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_ActionInfo.ActionOperateCode: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_ActionInfo.ActionCode: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_TipsContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var version: Int64 {
//    get {return _version ?? 0}
//    set {_version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {self._version = nil}
//
//  public var i18NTitle: Dictionary<String,String> = [:]
//
//  public var i18NMsg: Dictionary<String,String> = [:]
//
//  public var actions: [LarkNCExtensionPB_Entities_ActionInfo] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _version: Int64? = nil
//}

//public struct LarkNCExtensionPB_Entities_BotTipsContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var version: Int64 {
//    get {return _version ?? 0}
//    set {_version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {self._version = nil}
//
//  public var i18NMsg: Dictionary<String,String> = [:]
//
//  public var adminID: Int64 {
//    get {return _adminID ?? 0}
//    set {_adminID = newValue}
//  }
  /// Returns true if `adminID` has been explicitly set.
//  public var hasAdminID: Bool {return self._adminID != nil}
  /// Clears the value of `adminID`. Subsequent reads from it will return its default value.
//  public mutating func clearAdminID() {self._adminID = nil}
//
//  public var adminName: Dictionary<String,String> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _version: Int64? = nil
//  fileprivate var _adminID: Int64? = nil
//}

//public struct LarkNCExtensionPB_Entities_BotCheckStatus {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var botID: Int64 {
//    get {return _storage._botID ?? 0}
//    set {_uniqueStorage()._botID = newValue}
//  }
  /// Returns true if `botID` has been explicitly set.
//  public var hasBotID: Bool {return _storage._botID != nil}
  /// Clears the value of `botID`. Subsequent reads from it will return its default value.
//  public mutating func clearBotID() {_uniqueStorage()._botID = nil}
//
//  public var status: LarkNCExtensionPB_Entities_BotCheckStatus.BotUsageStatus {
//    get {return _storage._status ?? .botUsable}
//    set {_uniqueStorage()._status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
//  public var tips: LarkNCExtensionPB_Entities_BotTipsContent {
//    get {return _storage._tips ?? LarkNCExtensionPB_Entities_BotTipsContent()}
//    set {_uniqueStorage()._tips = newValue}
//  }
  /// Returns true if `tips` has been explicitly set.
//  public var hasTips: Bool {return _storage._tips != nil}
  /// Clears the value of `tips`. Subsequent reads from it will return its default value.
//  public mutating func clearTips() {_uniqueStorage()._tips = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum BotUsageStatus: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case botUsable // = 1
//    case botTenantForbidden // = 2
//    case botPlatformForbidden // = 3
//    case botDeveloperForbidden // = 4
//    case botOffline // = 5
//    case botUserUnvisible // = 6
//
//    public init() {
//      self = .botUsable
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .botUsable
//      case 2: self = .botTenantForbidden
//      case 3: self = .botPlatformForbidden
//      case 4: self = .botDeveloperForbidden
//      case 5: self = .botOffline
//      case 6: self = .botUserUnvisible
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .botUsable: return 1
//      case .botTenantForbidden: return 2
//      case .botPlatformForbidden: return 3
//      case .botDeveloperForbidden: return 4
//      case .botOffline: return 5
//      case .botUserUnvisible: return 6
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_BotCheckStatus.BotUsageStatus: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_AppStatusInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var cliID: String {
//    get {return _storage._cliID ?? String()}
//    set {_uniqueStorage()._cliID = newValue}
//  }
  /// Returns true if `cliID` has been explicitly set.
//  public var hasCliID: Bool {return _storage._cliID != nil}
  /// Clears the value of `cliID`. Subsequent reads from it will return its default value.
//  public mutating func clearCliID() {_uniqueStorage()._cliID = nil}
//
//  public var status: LarkNCExtensionPB_Entities_AppStatusInfo.AppUsageStatus {
//    get {return _storage._status ?? .appUsable}
//    set {_uniqueStorage()._status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
//  public var tips: LarkNCExtensionPB_Entities_TipsContent {
//    get {return _storage._tips ?? LarkNCExtensionPB_Entities_TipsContent()}
//    set {_uniqueStorage()._tips = newValue}
//  }
  /// Returns true if `tips` has been explicitly set.
//  public var hasTips: Bool {return _storage._tips != nil}
  /// Clears the value of `tips`. Subsequent reads from it will return its default value.
//  public mutating func clearTips() {_uniqueStorage()._tips = nil}
//
//  public var botList: [LarkNCExtensionPB_Entities_BotCheckStatus] {
//    get {return _storage._botList}
//    set {_uniqueStorage()._botList = newValue}
//  }
//
//  public var appAbility: [LarkNCExtensionPB_Entities_AppStatusInfo.FeatureAbility] {
//    get {return _storage._appAbility}
//    set {_uniqueStorage()._appAbility = newValue}
//  }
//
//  public var appURL: String {
//    get {return _storage._appURL ?? String()}
//    set {_uniqueStorage()._appURL = newValue}
//  }
  /// Returns true if `appURL` has been explicitly set.
//  public var hasAppURL: Bool {return _storage._appURL != nil}
  /// Clears the value of `appURL`. Subsequent reads from it will return its default value.
//  public mutating func clearAppURL() {_uniqueStorage()._appURL = nil}
//
//  public var i18NNames: Dictionary<String,String> {
//    get {return _storage._i18NNames}
//    set {_uniqueStorage()._i18NNames = newValue}
//  }
//
//  public var i18NDescriptions: Dictionary<String,String> {
//    get {return _storage._i18NDescriptions}
//    set {_uniqueStorage()._i18NDescriptions = newValue}
//  }
//
  /// deprecated since lark 3.17.0
//  public var avatarKey: String {
//    get {return _storage._avatarKey ?? String()}
//    set {_uniqueStorage()._avatarKey = newValue}
//  }
  /// Returns true if `avatarKey` has been explicitly set.
//  public var hasAvatarKey: Bool {return _storage._avatarKey != nil}
  /// Clears the value of `avatarKey`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarKey() {_uniqueStorage()._avatarKey = nil}
//
//  public var appID: Int64 {
//    get {return _storage._appID ?? 0}
//    set {_uniqueStorage()._appID = newValue}
//  }
  /// Returns true if `appID` has been explicitly set.
//  public var hasAppID: Bool {return _storage._appID != nil}
  /// Clears the value of `appID`. Subsequent reads from it will return its default value.
//  public mutating func clearAppID() {_uniqueStorage()._appID = nil}
//
//  public var chatable: Bool {
//    get {return _storage._chatable ?? false}
//    set {_uniqueStorage()._chatable = newValue}
//  }
  /// Returns true if `chatable` has been explicitly set.
//  public var hasChatable: Bool {return _storage._chatable != nil}
  /// Clears the value of `chatable`. Subsequent reads from it will return its default value.
//  public mutating func clearChatable() {_uniqueStorage()._chatable = nil}
//
//  public var extraConfig: String {
//    get {return _storage._extraConfig ?? String()}
//    set {_uniqueStorage()._extraConfig = newValue}
//  }
  /// Returns true if `extraConfig` has been explicitly set.
//  public var hasExtraConfig: Bool {return _storage._extraConfig != nil}
  /// Clears the value of `extraConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearExtraConfig() {_uniqueStorage()._extraConfig = nil}
//
//  public var avatar: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatar ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
  /// deprecated forever删除字段CI不通过
//  public var appStoreURL: String {
//    get {return _storage._appStoreURL ?? String()}
//    set {_uniqueStorage()._appStoreURL = newValue}
//  }
  /// Returns true if `appStoreURL` has been explicitly set.
//  public var hasAppStoreURL: Bool {return _storage._appStoreURL != nil}
  /// Clears the value of `appStoreURL`. Subsequent reads from it will return its default value.
//  public mutating func clearAppStoreURL() {_uniqueStorage()._appStoreURL = nil}
//
//  public var isIsv: Bool {
//    get {return _storage._isIsv ?? false}
//    set {_uniqueStorage()._isIsv = newValue}
//  }
  /// Returns true if `isIsv` has been explicitly set.
//  public var hasIsIsv: Bool {return _storage._isIsv != nil}
  /// Clears the value of `isIsv`. Subsequent reads from it will return its default value.
//  public mutating func clearIsIsv() {_uniqueStorage()._isIsv = nil}
//
//  public var isAvailable: Bool {
//    get {return _storage._isAvailable ?? false}
//    set {_uniqueStorage()._isAvailable = newValue}
//  }
  /// Returns true if `isAvailable` has been explicitly set.
//  public var hasIsAvailable: Bool {return _storage._isAvailable != nil}
  /// Clears the value of `isAvailable`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAvailable() {_uniqueStorage()._isAvailable = nil}
//
//  public var extraHitFields: [LarkNCExtensionPB_Entities_ExtraHitField] {
//    get {return _storage._extraHitFields}
//    set {_uniqueStorage()._extraHitFields = newValue}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum AppUsageStatus: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case appUsable // = 1
//    case appTenantForbidden // = 2
//    case appPlatformForbidden // = 3
//    case appDeveloperForbidden // = 4
//    case appOffline // = 5
//    case appUserUnvisible // = 6
//    case appNeedPayUse // = 7
//    case appDeleted // = 8
//
//    public init() {
//      self = .appUsable
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .appUsable
//      case 2: self = .appTenantForbidden
//      case 3: self = .appPlatformForbidden
//      case 4: self = .appDeveloperForbidden
//      case 5: self = .appOffline
//      case 6: self = .appUserUnvisible
//      case 7: self = .appNeedPayUse
//      case 8: self = .appDeleted
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .appUsable: return 1
//      case .appTenantForbidden: return 2
//      case .appPlatformForbidden: return 3
//      case .appDeveloperForbidden: return 4
//      case .appOffline: return 5
//      case .appUserUnvisible: return 6
//      case .appNeedPayUse: return 7
//      case .appDeleted: return 8
//      }
//    }
//
//  }
//
//  public enum FeatureAbility: LarkHTTP.Enum {
//    public typealias RawValue = Int
//
    /// 小程序能力
//    case small // = 1
//
    /// H5能力
//    case h5 // = 2
//
    /// 机器人能力
//    case bot // = 3
//
//    public init() {
//      self = .small
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .small
//      case 2: self = .h5
//      case 3: self = .bot
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .small: return 1
//      case .h5: return 2
//      case .bot: return 3
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_AppStatusInfo.AppUsageStatus: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_AppStatusInfo.FeatureAbility: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_UnavailableIsvStatusInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var cliID: String {
//    get {return _storage._cliID ?? String()}
//    set {_uniqueStorage()._cliID = newValue}
//  }
  /// Returns true if `cliID` has been explicitly set.
//  public var hasCliID: Bool {return _storage._cliID != nil}
  /// Clears the value of `cliID`. Subsequent reads from it will return its default value.
//  public mutating func clearCliID() {_uniqueStorage()._cliID = nil}
//
//  public var i18NNames: Dictionary<String,String> {
//    get {return _storage._i18NNames}
//    set {_uniqueStorage()._i18NNames = newValue}
//  }
//
//  public var i18NDescriptions: Dictionary<String,String> {
//    get {return _storage._i18NDescriptions}
//    set {_uniqueStorage()._i18NDescriptions = newValue}
//  }
//
//  public var appStoreURL: String {
//    get {return _storage._appStoreURL ?? String()}
//    set {_uniqueStorage()._appStoreURL = newValue}
//  }
  /// Returns true if `appStoreURL` has been explicitly set.
//  public var hasAppStoreURL: Bool {return _storage._appStoreURL != nil}
  /// Clears the value of `appStoreURL`. Subsequent reads from it will return its default value.
//  public mutating func clearAppStoreURL() {_uniqueStorage()._appStoreURL = nil}
//
//  public var appID: Int64 {
//    get {return _storage._appID ?? 0}
//    set {_uniqueStorage()._appID = newValue}
//  }
  /// Returns true if `appID` has been explicitly set.
//  public var hasAppID: Bool {return _storage._appID != nil}
  /// Clears the value of `appID`. Subsequent reads from it will return its default value.
//  public mutating func clearAppID() {_uniqueStorage()._appID = nil}
//
//  public var avatar: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatar ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
//  public var extraHitFields: [LarkNCExtensionPB_Entities_ExtraHitField] {
//    get {return _storage._extraHitFields}
//    set {_uniqueStorage()._extraHitFields = newValue}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_ExtraHitField {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 高亮字段名称 如：【关键词】多语言后端处理
//  public var fieldName: String {
//    get {return _fieldName ?? String()}
//    set {_fieldName = newValue}
//  }
  /// Returns true if `fieldName` has been explicitly set.
//  public var hasFieldName: Bool {return self._fieldName != nil}
  /// Clears the value of `fieldName`. Subsequent reads from it will return its default value.
//  public mutating func clearFieldName() {self._fieldName = nil}
//
//  public var title: String {
//    get {return _title ?? String()}
//    set {_title = newValue}
//  }
  /// Returns true if `title` has been explicitly set.
//  public var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
//  public mutating func clearTitle() {self._title = nil}
//
//  public var titleHitTerms: [String] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _fieldName: String? = nil
//  fileprivate var _title: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_BotInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var botID: Int64 {
//    get {return _storage._botID ?? 0}
//    set {_uniqueStorage()._botID = newValue}
//  }
  /// Returns true if `botID` has been explicitly set.
//  public var hasBotID: Bool {return _storage._botID != nil}
  /// Clears the value of `botID`. Subsequent reads from it will return its default value.
//  public mutating func clearBotID() {_uniqueStorage()._botID = nil}
//
//  public var appStatus: LarkNCExtensionPB_Entities_AppStatusInfo {
//    get {return _storage._appStatus ?? LarkNCExtensionPB_Entities_AppStatusInfo()}
//    set {_uniqueStorage()._appStatus = newValue}
//  }
  /// Returns true if `appStatus` has been explicitly set.
//  public var hasAppStatus: Bool {return _storage._appStatus != nil}
  /// Clears the value of `appStatus`. Subsequent reads from it will return its default value.
//  public mutating func clearAppStatus() {_uniqueStorage()._appStatus = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_Bot {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
//  public var avatar: LarkNCExtensionPB_Entities_ImageSet {
//    get {return _storage._avatar ?? LarkNCExtensionPB_Entities_ImageSet()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
//  public var status: Int32 {
//    get {return _storage._status ?? 0}
//    set {_uniqueStorage()._status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
//  public var avatarURL: String {
//    get {return _storage._avatarURL ?? String()}
//    set {_uniqueStorage()._avatarURL = newValue}
//  }
  /// Returns true if `avatarURL` has been explicitly set.
//  public var hasAvatarURL: Bool {return _storage._avatarURL != nil}
  /// Clears the value of `avatarURL`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarURL() {_uniqueStorage()._avatarURL = nil}
//
//  public var updateTime: Int64 {
//    get {return _storage._updateTime ?? 0}
//    set {_uniqueStorage()._updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}
//
//  public var creatorID: String {
//    get {return _storage._creatorID ?? String()}
//    set {_uniqueStorage()._creatorID = newValue}
//  }
  /// Returns true if `creatorID` has been explicitly set.
//  public var hasCreatorID: Bool {return _storage._creatorID != nil}
  /// Clears the value of `creatorID`. Subsequent reads from it will return its default value.
//  public mutating func clearCreatorID() {_uniqueStorage()._creatorID = nil}
//
//  public var description_p: String {
//    get {return _storage._description_p ?? String()}
//    set {_uniqueStorage()._description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}
//
//  public var namePy: String {
//    get {return _storage._namePy ?? String()}
//    set {_uniqueStorage()._namePy = newValue}
//  }
  /// Returns true if `namePy` has been explicitly set.
//  public var hasNamePy: Bool {return _storage._namePy != nil}
  /// Clears the value of `namePy`. Subsequent reads from it will return its default value.
//  public mutating func clearNamePy() {_uniqueStorage()._namePy = nil}
//
//  public var tenantID: String {
//    get {return _storage._tenantID ?? String()}
//    set {_uniqueStorage()._tenantID = newValue}
//  }
  /// Returns true if `tenantID` has been explicitly set.
//  public var hasTenantID: Bool {return _storage._tenantID != nil}
  /// Clears the value of `tenantID`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantID() {_uniqueStorage()._tenantID = nil}
//
//  public var botConfig: LarkNCExtensionPB_Entities_BotConfig {
//    get {return _storage._botConfig ?? LarkNCExtensionPB_Entities_BotConfig()}
//    set {_uniqueStorage()._botConfig = newValue}
//  }
  /// Returns true if `botConfig` has been explicitly set.
//  public var hasBotConfig: Bool {return _storage._botConfig != nil}
  /// Clears the value of `botConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearBotConfig() {_uniqueStorage()._botConfig = nil}
//
//  public var enName: String {
//    get {return _storage._enName ?? String()}
//    set {_uniqueStorage()._enName = newValue}
//  }
  /// Returns true if `enName` has been explicitly set.
//  public var hasEnName: Bool {return _storage._enName != nil}
  /// Clears the value of `enName`. Subsequent reads from it will return its default value.
//  public mutating func clearEnName() {_uniqueStorage()._enName = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_TimeZone {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 格式: “区域/位置”, 例如“Asia/Shanghai”
//  public var name: String {
//    get {return _name ?? String()}
//    set {_name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {self._name = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _name: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_TagInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var isShowTag: Bool {
//    get {return _isShowTag ?? false}
//    set {_isShowTag = newValue}
//  }
  /// Returns true if `isShowTag` has been explicitly set.
//  public var hasIsShowTag: Bool {return self._isShowTag != nil}
  /// Clears the value of `isShowTag`. Subsequent reads from it will return its default value.
//  public mutating func clearIsShowTag() {self._isShowTag = nil}
//
//  public var tagColor: LarkNCExtensionPB_Entities_TagColor {
//    get {return _tagColor ?? .blue}
//    set {_tagColor = newValue}
//  }
  /// Returns true if `tagColor` has been explicitly set.
//  public var hasTagColor: Bool {return self._tagColor != nil}
  /// Clears the value of `tagColor`. Subsequent reads from it will return its default value.
//  public mutating func clearTagColor() {self._tagColor = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _isShowTag: Bool? = nil
//  fileprivate var _tagColor: LarkNCExtensionPB_Entities_TagColor? = nil
//}

//public struct LarkNCExtensionPB_Entities_EffectiveInterval {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var startTime: Int64 {
//    get {return _startTime ?? 0}
//    set {_startTime = newValue}
//  }
  /// Returns true if `startTime` has been explicitly set.
//  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
//  public mutating func clearStartTime() {self._startTime = nil}
//
//  public var endTime: Int64 {
//    get {return _endTime ?? 0}
//    set {_endTime = newValue}
//  }
  /// Returns true if `endTime` has been explicitly set.
//  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
//  public mutating func clearEndTime() {self._endTime = nil}
//
//  public var isShowEndTime: Bool {
//    get {return _isShowEndTime ?? true}
//    set {_isShowEndTime = newValue}
//  }
  /// Returns true if `isShowEndTime` has been explicitly set.
//  public var hasIsShowEndTime: Bool {return self._isShowEndTime != nil}
  /// Clears the value of `isShowEndTime`. Subsequent reads from it will return its default value.
//  public mutating func clearIsShowEndTime() {self._isShowEndTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _startTime: Int64? = nil
//  fileprivate var _endTime: Int64? = nil
//  fileprivate var _isShowEndTime: Bool? = nil
//}

//public struct LarkNCExtensionPB_Entities_TimeFormat {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 时间单位
//  public var timeUnit: LarkNCExtensionPB_Entities_TimeUnit {
//    get {return _timeUnit ?? .second}
//    set {_timeUnit = newValue}
//  }
  /// Returns true if `timeUnit` has been explicitly set.
//  public var hasTimeUnit: Bool {return self._timeUnit != nil}
  /// Clears the value of `timeUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearTimeUnit() {self._timeUnit = nil}
//
//  public var startEndLayout: LarkNCExtensionPB_Entities_TimeFormat.StartEndLayout {
//    get {return _startEndLayout ?? .hide}
//    set {_startEndLayout = newValue}
//  }
  /// Returns true if `startEndLayout` has been explicitly set.
//  public var hasStartEndLayout: Bool {return self._startEndLayout != nil}
  /// Clears the value of `startEndLayout`. Subsequent reads from it will return its default value.
//  public mutating func clearStartEndLayout() {self._startEndLayout = nil}
//
  /// 是否对其它用户展示时间，个人看自己profile始终展示时间，对其它用户展示由设置决定
//  public var isShowToOthers: Bool {
//    get {return _isShowToOthers ?? false}
//    set {_isShowToOthers = newValue}
//  }
  /// Returns true if `isShowToOthers` has been explicitly set.
//  public var hasIsShowToOthers: Bool {return self._isShowToOthers != nil}
  /// Clears the value of `isShowToOthers`. Subsequent reads from it will return its default value.
//  public mutating func clearIsShowToOthers() {self._isShowToOthers = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum StartEndLayout: LarkHTTP.Enum {
//    public typealias RawValue = Int
//
    /// 不展示
//    case hide // = 0
//
    /// 常规起始都显示
//    case normal // = 1
//
    /// 只显示开始时间
//    case startOnly // = 2
//
    /// 只显示结束时间
//    case endOnly // = 3
//
//    public init() {
//      self = .hide
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .hide
//      case 1: self = .normal
//      case 2: self = .startOnly
//      case 3: self = .endOnly
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .hide: return 0
//      case .normal: return 1
//      case .startOnly: return 2
//      case .endOnly: return 3
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _timeUnit: LarkNCExtensionPB_Entities_TimeUnit? = nil
//  fileprivate var _startEndLayout: LarkNCExtensionPB_Entities_TimeFormat.StartEndLayout? = nil
//  fileprivate var _isShowToOthers: Bool? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_TimeFormat.StartEndLayout: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 个人状态纯显示字段
//public struct LarkNCExtensionPB_Entities_ChatterCustomStatus {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var title: String {
//    get {return _storage._title ?? String()}
//    set {_uniqueStorage()._title = newValue}
//  }
  /// Returns true if `title` has been explicitly set.
//  public var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
//  public mutating func clearTitle() {_uniqueStorage()._title = nil}
//
//  public var i18NTitle: Dictionary<String,String> {
//    get {return _storage._i18NTitle}
//    set {_uniqueStorage()._i18NTitle = newValue}
//  }
//
//  public var iconKey: String {
//    get {return _storage._iconKey ?? String()}
//    set {_uniqueStorage()._iconKey = newValue}
//  }
  /// Returns true if `iconKey` has been explicitly set.
//  public var hasIconKey: Bool {return _storage._iconKey != nil}
  /// Clears the value of `iconKey`. Subsequent reads from it will return its default value.
//  public mutating func clearIconKey() {_uniqueStorage()._iconKey = nil}
//
//  public var fsUnit: String {
//    get {return _storage._fsUnit ?? String()}
//    set {_uniqueStorage()._fsUnit = newValue}
//  }
  /// Returns true if `fsUnit` has been explicitly set.
//  public var hasFsUnit: Bool {return _storage._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}
//
//  public var effectiveInterval: LarkNCExtensionPB_Entities_EffectiveInterval {
//    get {return _storage._effectiveInterval ?? LarkNCExtensionPB_Entities_EffectiveInterval()}
//    set {_uniqueStorage()._effectiveInterval = newValue}
//  }
  /// Returns true if `effectiveInterval` has been explicitly set.
//  public var hasEffectiveInterval: Bool {return _storage._effectiveInterval != nil}
  /// Clears the value of `effectiveInterval`. Subsequent reads from it will return its default value.
//  public mutating func clearEffectiveInterval() {_uniqueStorage()._effectiveInterval = nil}
//
//  public var isNotDisturbMode: Bool {
//    get {return _storage._isNotDisturbMode ?? false}
//    set {_uniqueStorage()._isNotDisturbMode = newValue}
//  }
  /// Returns true if `isNotDisturbMode` has been explicitly set.
//  public var hasIsNotDisturbMode: Bool {return _storage._isNotDisturbMode != nil}
  /// Clears the value of `isNotDisturbMode`. Subsequent reads from it will return its default value.
//  public mutating func clearIsNotDisturbMode() {_uniqueStorage()._isNotDisturbMode = nil}
//
//  public var tagInfo: LarkNCExtensionPB_Entities_TagInfo {
//    get {return _storage._tagInfo ?? LarkNCExtensionPB_Entities_TagInfo()}
//    set {_uniqueStorage()._tagInfo = newValue}
//  }
  /// Returns true if `tagInfo` has been explicitly set.
//  public var hasTagInfo: Bool {return _storage._tagInfo != nil}
  /// Clears the value of `tagInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearTagInfo() {_uniqueStorage()._tagInfo = nil}
//
//  public var timeFormat: LarkNCExtensionPB_Entities_TimeFormat {
//    get {return _storage._timeFormat ?? LarkNCExtensionPB_Entities_TimeFormat()}
//    set {_uniqueStorage()._timeFormat = newValue}
//  }
  /// Returns true if `timeFormat` has been explicitly set.
//  public var hasTimeFormat: Bool {return _storage._timeFormat != nil}
  /// Clears the value of `timeFormat`. Subsequent reads from it will return its default value.
//  public mutating func clearTimeFormat() {_uniqueStorage()._timeFormat = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// i18n 值表示
//public struct LarkNCExtensionPB_Entities_I18nVal {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 如果 i18n 中未找到对一个语言版本的 val，降级到 default val
//  public var defaultVal: String {
//    get {return _defaultVal ?? String()}
//    set {_defaultVal = newValue}
//  }
  /// Returns true if `defaultVal` has been explicitly set.
//  public var hasDefaultVal: Bool {return self._defaultVal != nil}
  /// Clears the value of `defaultVal`. Subsequent reads from it will return its default value.
//  public mutating func clearDefaultVal() {self._defaultVal = nil}
//
  /// key 为语言，value 对应值, 国际化 val
//  public var i18NVals: Dictionary<String,String> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _defaultVal: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_AvatarMedal {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 用户头像挂件key
//  public var key: String {
//    get {return _storage._key ?? String()}
//    set {_uniqueStorage()._key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}
//
  /// 用户头像挂件fs_unit
//  public var fsUnit: String {
//    get {return _storage._fsUnit ?? String()}
//    set {_uniqueStorage()._fsUnit = newValue}
//  }
  /// Returns true if `fsUnit` has been explicitly set.
//  public var hasFsUnit: Bool {return _storage._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}
//
  /// tooltip, 勋章透出名字都是这个
//  public var i18NName: LarkNCExtensionPB_Entities_I18nVal {
//    get {return _storage._i18NName ?? LarkNCExtensionPB_Entities_I18nVal()}
//    set {_uniqueStorage()._i18NName = newValue}
//  }
  /// Returns true if `i18NName` has been explicitly set.
//  public var hasI18NName: Bool {return _storage._i18NName != nil}
  /// Clears the value of `i18NName`. Subsequent reads from it will return its default value.
//  public mutating func clearI18NName() {_uniqueStorage()._i18NName = nil}
//
  /// 是否展示勋章，用户可能有勋章数据，但租户设置不展示
//  public var showSwitch: Bool {
//    get {return _storage._showSwitch ?? false}
//    set {_uniqueStorage()._showSwitch = newValue}
//  }
  /// Returns true if `showSwitch` has been explicitly set.
//  public var hasShowSwitch: Bool {return _storage._showSwitch != nil}
  /// Clears the value of `showSwitch`. Subsequent reads from it will return its default value.
//  public mutating func clearShowSwitch() {_uniqueStorage()._showSwitch = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_Chatter {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
  /// deprecated since lark 3.17.0
//  public var avatar: LarkNCExtensionPB_Entities_ImageSet {
//    get {return _storage._avatar ?? LarkNCExtensionPB_Entities_ImageSet()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
  ///是否注册，是否离职
//  public var status: Int32 {
//    get {return _storage._status ?? 0}
//    set {_uniqueStorage()._status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
  /// deprecated since lark 3.17.0
//  public var avatarURL: String {
//    get {return _storage._avatarURL ?? String()}
//    set {_uniqueStorage()._avatarURL = newValue}
//  }
  /// Returns true if `avatarURL` has been explicitly set.
//  public var hasAvatarURL: Bool {return _storage._avatarURL != nil}
  /// Clears the value of `avatarURL`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarURL() {_uniqueStorage()._avatarURL = nil}
//
//  public var updateTime: Int64 {
//    get {return _storage._updateTime ?? 0}
//    set {_uniqueStorage()._updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}
//
  ///aborted
//  public var namePinyin: String {
//    get {return _storage._namePinyin ?? String()}
//    set {_uniqueStorage()._namePinyin = newValue}
//  }
  /// Returns true if `namePinyin` has been explicitly set.
//  public var hasNamePinyin: Bool {return _storage._namePinyin != nil}
  /// Clears the value of `namePinyin`. Subsequent reads from it will return its default value.
//  public mutating func clearNamePinyin() {_uniqueStorage()._namePinyin = nil}
//
  /// bot创建人
//  public var creatorID: String {
//    get {return _storage._creatorID ?? String()}
//    set {_uniqueStorage()._creatorID = newValue}
//  }
  /// Returns true if `creatorID` has been explicitly set.
//  public var hasCreatorID: Bool {return _storage._creatorID != nil}
  /// Clears the value of `creatorID`. Subsequent reads from it will return its default value.
//  public mutating func clearCreatorID() {_uniqueStorage()._creatorID = nil}
//
  /// bot,user
//  public var type: LarkNCExtensionPB_Entities_ChatterType {
//    get {return _storage._type ?? .unknownChatter}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
  /// [废弃] optional string phone_number = 10;
//  public var description_p: String {
//    get {return _storage._description_p ?? String()}
//    set {_uniqueStorage()._description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}
//
  /// 是否注册
//  public var isRegistered: Bool {
//    get {return _storage._isRegistered ?? false}
//    set {_uniqueStorage()._isRegistered = newValue}
//  }
  /// Returns true if `isRegistered` has been explicitly set.
//  public var hasIsRegistered: Bool {return _storage._isRegistered != nil}
  /// Clears the value of `isRegistered`. Subsequent reads from it will return its default value.
//  public mutating func clearIsRegistered() {_uniqueStorage()._isRegistered = nil}
//
  /// 拼音
//  public var namePy: String {
//    get {return _storage._namePy ?? String()}
//    set {_uniqueStorage()._namePy = newValue}
//  }
  /// Returns true if `namePy` has been explicitly set.
//  public var hasNamePy: Bool {return _storage._namePy != nil}
  /// Clears the value of `namePy`. Subsequent reads from it will return its default value.
//  public mutating func clearNamePy() {_uniqueStorage()._namePy = nil}
//
  /// user.EnName bot.EnName or bot.Extra.botConfigSetting.I18nNames[en_us]
//  public var enUsName: String {
//    get {return _storage._enUsName ?? String()}
//    set {_uniqueStorage()._enUsName = newValue}
//  }
  /// Returns true if `enUsName` has been explicitly set.
//  public var hasEnUsName: Bool {return _storage._enUsName != nil}
  /// Clears the value of `enUsName`. Subsequent reads from it will return its default value.
//  public mutating func clearEnUsName() {_uniqueStorage()._enUsName = nil}
//
  /// 租户id
//  public var tenantID: String {
//    get {return _storage._tenantID ?? String()}
//    set {_uniqueStorage()._tenantID = newValue}
//  }
  /// Returns true if `tenantID` has been explicitly set.
//  public var hasTenantID: Bool {return _storage._tenantID != nil}
  /// Clears the value of `tenantID`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantID() {_uniqueStorage()._tenantID = nil}
//
//  public var descriptionFlag: LarkNCExtensionPB_Entities_Chatter.DescriptionFlag {
//    get {return _storage._descriptionFlag ?? .default}
//    set {_uniqueStorage()._descriptionFlag = newValue}
//  }
  /// Returns true if `descriptionFlag` has been explicitly set.
//  public var hasDescriptionFlag: Bool {return _storage._descriptionFlag != nil}
  /// Clears the value of `descriptionFlag`. Subsequent reads from it will return its default value.
//  public mutating func clearDescriptionFlag() {_uniqueStorage()._descriptionFlag = nil}
//
  /// bot 配置
//  public var botConfig: LarkNCExtensionPB_Entities_BotConfig {
//    get {return _storage._botConfig ?? LarkNCExtensionPB_Entities_BotConfig()}
//    set {_uniqueStorage()._botConfig = newValue}
//  }
  /// Returns true if `botConfig` has been explicitly set.
//  public var hasBotConfig: Bool {return _storage._botConfig != nil}
  /// Clears the value of `botConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearBotConfig() {_uniqueStorage()._botConfig = nil}
//
  /// I18n name,key是语言缩写，当前支持语言zh_CN, en_US, ja_JP
//  public var internationalName: Dictionary<String,String> {
//    get {return _storage._internationalName}
//    set {_uniqueStorage()._internationalName = newValue}
//  }
//
  /// 备注名
//  public var alias: String {
//    get {return _storage._alias ?? String()}
//    set {_uniqueStorage()._alias = newValue}
//  }
  /// Returns true if `alias` has been explicitly set.
//  public var hasAlias: Bool {return _storage._alias != nil}
  /// Clears the value of `alias`. Subsequent reads from it will return its default value.
//  public mutating func clearAlias() {_uniqueStorage()._alias = nil}
//
  /// 工作状态, 是否请假
//  public var workStatus: LarkNCExtensionPB_Entities_WorkStatus {
//    get {return _storage._workStatus ?? LarkNCExtensionPB_Entities_WorkStatus()}
//    set {_uniqueStorage()._workStatus = newValue}
//  }
  /// Returns true if `workStatus` has been explicitly set.
//  public var hasWorkStatus: Bool {return _storage._workStatus != nil}
  /// Clears the value of `workStatus`. Subsequent reads from it will return its default value.
//  public mutating func clearWorkStatus() {_uniqueStorage()._workStatus = nil}
//
  /// deprecated I18n信息
//  public var i18NDescriptions: Dictionary<String,String> {
//    get {return _storage._i18NDescriptions}
//    set {_uniqueStorage()._i18NDescriptions = newValue}
//  }
//
  ///统一账户 id
//  public var accountID: String {
//    get {return _storage._accountID ?? String()}
//    set {_uniqueStorage()._accountID = newValue}
//  }
  /// Returns true if `accountID` has been explicitly set.
//  public var hasAccountID: Bool {return _storage._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
//  public mutating func clearAccountID() {_uniqueStorage()._accountID = nil}
//
  /// I18n信息 仅bot有
//  public var i18NInf: LarkNCExtensionPB_Entities_Chatter.I18nInf {
//    get {return _storage._i18NInf ?? LarkNCExtensionPB_Entities_Chatter.I18nInf()}
//    set {_uniqueStorage()._i18NInf = newValue}
//  }
  /// Returns true if `i18NInf` has been explicitly set.
//  public var hasI18NInf: Bool {return _storage._i18NInf != nil}
  /// Clears the value of `i18NInf`. Subsequent reads from it will return its default value.
//  public mutating func clearI18NInf() {_uniqueStorage()._i18NInf = nil}
//
  /// 用户配置
//  public var userConfig: LarkNCExtensionPB_Entities_UserConfig {
//    get {return _storage._userConfig ?? LarkNCExtensionPB_Entities_UserConfig()}
//    set {_uniqueStorage()._userConfig = newValue}
//  }
  /// Returns true if `userConfig` has been explicitly set.
//  public var hasUserConfig: Bool {return _storage._userConfig != nil}
  /// Clears the value of `userConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearUserConfig() {_uniqueStorage()._userConfig = nil}
//
  /// 邮箱
//  public var email: String {
//    get {return _storage._email ?? String()}
//    set {_uniqueStorage()._email = newValue}
//  }
  /// Returns true if `email` has been explicitly set.
//  public var hasEmail: Bool {return _storage._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
//  public mutating func clearEmail() {_uniqueStorage()._email = nil}
//
  /// 勿扰模式
//  public var donotDisturbBeforeMs: Int64 {
//    get {return _storage._donotDisturbBeforeMs ?? 0}
//    set {_uniqueStorage()._donotDisturbBeforeMs = newValue}
//  }
  /// Returns true if `donotDisturbBeforeMs` has been explicitly set.
//  public var hasDonotDisturbBeforeMs: Bool {return _storage._donotDisturbBeforeMs != nil}
  /// Clears the value of `donotDisturbBeforeMs`. Subsequent reads from it will return its default value.
//  public mutating func clearDonotDisturbBeforeMs() {_uniqueStorage()._donotDisturbBeforeMs = nil}
//
  /// 是否接受短信、电话加急
//  public var acceptSmsPhoneUrgent: Bool {
//    get {return _storage._acceptSmsPhoneUrgent ?? false}
//    set {_uniqueStorage()._acceptSmsPhoneUrgent = newValue}
//  }
  /// Returns true if `acceptSmsPhoneUrgent` has been explicitly set.
//  public var hasAcceptSmsPhoneUrgent: Bool {return _storage._acceptSmsPhoneUrgent != nil}
  /// Clears the value of `acceptSmsPhoneUrgent`. Subsequent reads from it will return its default value.
//  public mutating func clearAcceptSmsPhoneUrgent() {_uniqueStorage()._acceptSmsPhoneUrgent = nil}
//
  /// 登陆时间
//  public var lastLoginTime: Int64 {
//    get {return _storage._lastLoginTime ?? 0}
//    set {_uniqueStorage()._lastLoginTime = newValue}
//  }
  /// Returns true if `lastLoginTime` has been explicitly set.
//  public var hasLastLoginTime: Bool {return _storage._lastLoginTime != nil}
  /// Clears the value of `lastLoginTime`. Subsequent reads from it will return its default value.
//  public mutating func clearLastLoginTime() {_uniqueStorage()._lastLoginTime = nil}
//
  /// 头像
//  public var avatarImage: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatarImage ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatarImage = newValue}
//  }
  /// Returns true if `avatarImage` has been explicitly set.
//  public var hasAvatarImage: Bool {return _storage._avatarImage != nil}
  /// Clears the value of `avatarImage`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarImage() {_uniqueStorage()._avatarImage = nil}
//
  /// 时区
//  public var timeZone: LarkNCExtensionPB_Entities_TimeZone {
//    get {return _storage._timeZone ?? LarkNCExtensionPB_Entities_TimeZone()}
//    set {_uniqueStorage()._timeZone = newValue}
//  }
  /// Returns true if `timeZone` has been explicitly set.
//  public var hasTimeZone: Bool {return _storage._timeZone != nil}
  /// Clears the value of `timeZone`. Subsequent reads from it will return its default value.
//  public mutating func clearTimeZone() {_uniqueStorage()._timeZone = nil}
//
  /// 游客模式，是否是游客标识
//  public var isGuest: Bool {
//    get {return _storage._isGuest ?? false}
//    set {_uniqueStorage()._isGuest = newValue}
//  }
  /// Returns true if `isGuest` has been explicitly set.
//  public var hasIsGuest: Bool {return _storage._isGuest != nil}
  /// Clears the value of `isGuest`. Subsequent reads from it will return its default value.
//  public mutating func clearIsGuest() {_uniqueStorage()._isGuest = nil}
//
  ///账号是否处于暂停状态
//  public var isFrozen: Bool {
//    get {return _storage._isFrozen ?? false}
//    set {_uniqueStorage()._isFrozen = newValue}
//  }
  /// Returns true if `isFrozen` has been explicitly set.
//  public var hasIsFrozen: Bool {return _storage._isFrozen != nil}
  /// Clears the value of `isFrozen`. Subsequent reads from it will return its default value.
//  public mutating func clearIsFrozen() {_uniqueStorage()._isFrozen = nil}
//
  /// 是否是匿名标识
//  public var isAnonymous: Bool {
//    get {return _storage._isAnonymous ?? false}
//    set {_uniqueStorage()._isAnonymous = newValue}
//  }
  /// Returns true if `isAnonymous` has been explicitly set.
//  public var hasIsAnonymous: Bool {return _storage._isAnonymous != nil}
  /// Clears the value of `isAnonymous`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAnonymous() {_uniqueStorage()._isAnonymous = nil}
//
  ///部门信息
//  public var department: [LarkNCExtensionPB_Entities_Department] {
//    get {return _storage._department}
//    set {_uniqueStorage()._department = newValue}
//  }
//
  /// 企业邮箱
//  public var enterpriseEmail: String {
//    get {return _storage._enterpriseEmail ?? String()}
//    set {_uniqueStorage()._enterpriseEmail = newValue}
//  }
  /// Returns true if `enterpriseEmail` has been explicitly set.
//  public var hasEnterpriseEmail: Bool {return _storage._enterpriseEmail != nil}
  /// Clears the value of `enterpriseEmail`. Subsequent reads from it will return its default value.
//  public mutating func clearEnterpriseEmail() {_uniqueStorage()._enterpriseEmail = nil}
//
  /// 自定义个人状态，start_time升序
//  public var customStatuses: [LarkNCExtensionPB_Entities_ChatterCustomStatus] {
//    get {return _storage._customStatuses}
//    set {_uniqueStorage()._customStatuses = newValue}
//  }
//
  /// 用户头像挂件，本字段为nil，SDK无需处理头像挂件，即使有也不要删
//  public var avatarMedal: LarkNCExtensionPB_Entities_AvatarMedal {
//    get {return _storage._avatarMedal ?? LarkNCExtensionPB_Entities_AvatarMedal()}
//    set {_uniqueStorage()._avatarMedal = newValue}
//  }
  /// Returns true if `avatarMedal` has been explicitly set.
//  public var hasAvatarMedal: Bool {return _storage._avatarMedal != nil}
  /// Clears the value of `avatarMedal`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarMedal() {_uniqueStorage()._avatarMedal = nil}
//
  /// 本字段不为nil，但是AvatarMedal结构内的url为nil，SDK续删除头像挂件，其余情况替换即可
//  public var anotherName: String {
//    get {return _storage._anotherName ?? String()}
//    set {_uniqueStorage()._anotherName = newValue}
//  }
  /// Returns true if `anotherName` has been explicitly set.
//  public var hasAnotherName: Bool {return _storage._anotherName != nil}
  /// Clears the value of `anotherName`. Subsequent reads from it will return its default value.
//  public mutating func clearAnotherName() {_uniqueStorage()._anotherName = nil}
//
  /// 用户激活状态
//  public var activeStatus: Int32 {
//    get {return _storage._activeStatus ?? 0}
//    set {_uniqueStorage()._activeStatus = newValue}
//  }
  /// Returns true if `activeStatus` has been explicitly set.
//  public var hasActiveStatus: Bool {return _storage._activeStatus != nil}
  /// Clears the value of `activeStatus`. Subsequent reads from it will return its default value.
//  public mutating func clearActiveStatus() {_uniqueStorage()._activeStatus = nil}
//
  /// 特别关注
//  public var isSpecialFocus: Bool {
//    get {return _storage._isSpecialFocus ?? false}
//    set {_uniqueStorage()._isSpecialFocus = newValue}
//  }
  /// Returns true if `isSpecialFocus` has been explicitly set.
//  public var hasIsSpecialFocus: Bool {return _storage._isSpecialFocus != nil}
  /// Clears the value of `isSpecialFocus`. Subsequent reads from it will return its default value.
//  public mutating func clearIsSpecialFocus() {_uniqueStorage()._isSpecialFocus = nil}
//
  /// 用户常用主语言
//  public var majorLanguage: String {
//    get {return _storage._majorLanguage ?? String()}
//    set {_uniqueStorage()._majorLanguage = newValue}
//  }
  /// Returns true if `majorLanguage` has been explicitly set.
//  public var hasMajorLanguage: Bool {return _storage._majorLanguage != nil}
  /// Clears the value of `majorLanguage`. Subsequent reads from it will return its default value.
//  public mutating func clearMajorLanguage() {_uniqueStorage()._majorLanguage = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum DescriptionFlag: LarkHTTP.Enum {
//    public typealias RawValue = Int
//
    /// 默认状态
//    case `default` // = 0
//
    /// 出差状态
//    case onBusiness // = 1
//
    /// 请假状态
//    case onLeave // = 2
//
    /// 开会状态
//    case onMeeting // = 3
//
//    public init() {
//      self = .default
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .default
//      case 1: self = .onBusiness
//      case 2: self = .onLeave
//      case 3: self = .onMeeting
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .default: return 0
//      case .onBusiness: return 1
//      case .onLeave: return 2
//      case .onMeeting: return 3
//      }
//    }
//
//  }
//
//  public struct I18nInf {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// I18n信息 仅bot有
//    public var i18NDescriptions: Dictionary<String,String> = [:]
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_Chatter.DescriptionFlag: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_MessageReaction {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 消息Id
//  public var messageID: String {
//    get {return _messageID ?? String()}
//    set {_messageID = newValue}
//  }
  /// Returns true if `messageID` has been explicitly set.
//  public var hasMessageID: Bool {return self._messageID != nil}
  /// Clears the value of `messageID`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageID() {self._messageID = nil}
//
  /// 消息的reaction信息
//  public var reactions: [LarkNCExtensionPB_Entities_MessageReaction.Reaction] = []
//
//  public var updateTime: Int64 {
//    get {return _updateTime ?? 0}
//    set {_updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {self._updateTime = nil}
//
//  public var nanoUpdateTime: Int64 {
//    get {return _nanoUpdateTime ?? 0}
//    set {_nanoUpdateTime = newValue}
//  }
  /// Returns true if `nanoUpdateTime` has been explicitly set.
//  public var hasNanoUpdateTime: Bool {return self._nanoUpdateTime != nil}
  /// Clears the value of `nanoUpdateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearNanoUpdateTime() {self._nanoUpdateTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public struct Reaction {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// reaction 类型, 例如“thumb up”
//    public var type: String {
//      get {return _type ?? String()}
//      set {_type = newValue}
//    }
    /// Returns true if `type` has been explicitly set.
//    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {self._type = nil}
//
//    public var count: Int32 {
//      get {return _count ?? 0}
//      set {_count = newValue}
//    }
    /// Returns true if `count` has been explicitly set.
//    public var hasCount: Bool {return self._count != nil}
    /// Clears the value of `count`. Subsequent reads from it will return its default value.
//    public mutating func clearCount() {self._count = nil}
//
    /// 此reaction相关的用户 [逐渐废弃]
//    public var userIds: [String] = []
//
    /// 此 reaction 相关的 chatter
//    public var chatterIds: [String] = []
//
    ///chatter_id -> update_time 用作chatter以及reaction_type的排序
//    public var udpateTimes: Dictionary<String,Int64> = [:]
//
    ///chatter_id -> update_time 用作chatter以及reaction_type的排序
//    public var nanoUpdateTimes: Dictionary<String,Int64> = [:]
//
    /// 当前 reaction type 的更新时间，如最后一次是取消，则是取消的时间
//    public var nanoUpdateTime: Int64 {
//      get {return _nanoUpdateTime ?? 0}
//      set {_nanoUpdateTime = newValue}
//    }
    /// Returns true if `nanoUpdateTime` has been explicitly set.
//    public var hasNanoUpdateTime: Bool {return self._nanoUpdateTime != nil}
    /// Clears the value of `nanoUpdateTime`. Subsequent reads from it will return its default value.
//    public mutating func clearNanoUpdateTime() {self._nanoUpdateTime = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _type: String? = nil
//    fileprivate var _count: Int32? = nil
//    fileprivate var _nanoUpdateTime: Int64? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _messageID: String? = nil
//  fileprivate var _updateTime: Int64? = nil
//  fileprivate var _nanoUpdateTime: Int64? = nil
//}

//public struct LarkNCExtensionPB_Entities_MessageReminder {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
//  public var messageID: String {
//    get {return _messageID ?? String()}
//    set {_messageID = newValue}
//  }
  /// Returns true if `messageID` has been explicitly set.
//  public var hasMessageID: Bool {return self._messageID != nil}
  /// Clears the value of `messageID`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageID() {self._messageID = nil}
//
  /// 提醒预定的发生时间
//  public var reminderTime: Int64 {
//    get {return _reminderTime ?? 0}
//    set {_reminderTime = newValue}
//  }
  /// Returns true if `reminderTime` has been explicitly set.
//  public var hasReminderTime: Bool {return self._reminderTime != nil}
  /// Clears the value of `reminderTime`. Subsequent reads from it will return its default value.
//  public mutating func clearReminderTime() {self._reminderTime = nil}
//
//  public var chatID: String {
//    get {return _chatID ?? String()}
//    set {_chatID = newValue}
//  }
  /// Returns true if `chatID` has been explicitly set.
//  public var hasChatID: Bool {return self._chatID != nil}
  /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatID() {self._chatID = nil}
//
//  public var reminderPosition: Int32 {
//    get {return _reminderPosition ?? 0}
//    set {_reminderPosition = newValue}
//  }
  /// Returns true if `reminderPosition` has been explicitly set.
//  public var hasReminderPosition: Bool {return self._reminderPosition != nil}
  /// Clears the value of `reminderPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearReminderPosition() {self._reminderPosition = nil}
//
//  public var canceled: Bool {
//    get {return _canceled ?? false}
//    set {_canceled = newValue}
//  }
  /// Returns true if `canceled` has been explicitly set.
//  public var hasCanceled: Bool {return self._canceled != nil}
  /// Clears the value of `canceled`. Subsequent reads from it will return its default value.
//  public mutating func clearCanceled() {self._canceled = nil}
//
  /// 提醒被确认的时间
//  public var confirmedTime: Int64 {
//    get {return _confirmedTime ?? 0}
//    set {_confirmedTime = newValue}
//  }
  /// Returns true if `confirmedTime` has been explicitly set.
//  public var hasConfirmedTime: Bool {return self._confirmedTime != nil}
  /// Clears the value of `confirmedTime`. Subsequent reads from it will return its default value.
//  public mutating func clearConfirmedTime() {self._confirmedTime = nil}
//
//  public var messagePosition: Int32 {
//    get {return _messagePosition ?? 0}
//    set {_messagePosition = newValue}
//  }
  /// Returns true if `messagePosition` has been explicitly set.
//  public var hasMessagePosition: Bool {return self._messagePosition != nil}
  /// Clears the value of `messagePosition`. Subsequent reads from it will return its default value.
//  public mutating func clearMessagePosition() {self._messagePosition = nil}
//
//  public var updateTime: Int64 {
//    get {return _updateTime ?? 0}
//    set {_updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {self._updateTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _messageID: String? = nil
//  fileprivate var _reminderTime: Int64? = nil
//  fileprivate var _chatID: String? = nil
//  fileprivate var _reminderPosition: Int32? = nil
//  fileprivate var _canceled: Bool? = nil
//  fileprivate var _confirmedTime: Int64? = nil
//  fileprivate var _messagePosition: Int32? = nil
//  fileprivate var _updateTime: Int64? = nil
//}

//public struct LarkNCExtensionPB_Entities_ChatSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 是否提醒，默认为提醒
//  public var isRemind: Bool {
//    get {return _storage._isRemind ?? true}
//    set {_uniqueStorage()._isRemind = newValue}
//  }
  /// Returns true if `isRemind` has been explicitly set.
//  public var hasIsRemind: Bool {return _storage._isRemind != nil}
  /// Clears the value of `isRemind`. Subsequent reads from it will return its default value.
//  public mutating func clearIsRemind() {_uniqueStorage()._isRemind = nil}
//
//  public var updateTime: Int64 {
//    get {return _storage._updateTime ?? 0}
//    set {_uniqueStorage()._updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}
//
//  public var checkMessagePosition: LarkNCExtensionPB_Entities_ChatSetting.CheckMessagePositionSetting.Enum {
//    get {return _storage._checkMessagePosition ?? .recentLeft}
//    set {_uniqueStorage()._checkMessagePosition = newValue}
//  }
  /// Returns true if `checkMessagePosition` has been explicitly set.
//  public var hasCheckMessagePosition: Bool {return _storage._checkMessagePosition != nil}
  /// Clears the value of `checkMessagePosition`. Subsequent reads from it will return its default value.
//  public mutating func clearCheckMessagePosition() {_uniqueStorage()._checkMessagePosition = nil}
//
//  public var isAutoTranslate: Bool {
//    get {return _storage._isAutoTranslate ?? false}
//    set {_uniqueStorage()._isAutoTranslate = newValue}
//  }
  /// Returns true if `isAutoTranslate` has been explicitly set.
//  public var hasIsAutoTranslate: Bool {return _storage._isAutoTranslate != nil}
  /// Clears the value of `isAutoTranslate`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAutoTranslate() {_uniqueStorage()._isAutoTranslate = nil}
//
  /// 隐藏昵称？: 默认为 false，表示显示昵称
//  public var isHiddenNickname: Bool {
//    get {return _storage._isHiddenNickname ?? false}
//    set {_uniqueStorage()._isHiddenNickname = newValue}
//  }
  /// Returns true if `isHiddenNickname` has been explicitly set.
//  public var hasIsHiddenNickname: Bool {return _storage._isHiddenNickname != nil}
  /// Clears the value of `isHiddenNickname`. Subsequent reads from it will return its default value.
//  public mutating func clearIsHiddenNickname() {_uniqueStorage()._isHiddenNickname = nil}
//
  ///自动翻译开关的版本
//  public var isAutoTranslateVersion: Int64 {
//    get {return _storage._isAutoTranslateVersion ?? 0}
//    set {_uniqueStorage()._isAutoTranslateVersion = newValue}
//  }
  /// Returns true if `isAutoTranslateVersion` has been explicitly set.
//  public var hasIsAutoTranslateVersion: Bool {return _storage._isAutoTranslateVersion != nil}
  /// Clears the value of `isAutoTranslateVersion`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAutoTranslateVersion() {_uniqueStorage()._isAutoTranslateVersion = nil}
//
  /// 匿名状态下，在群中的匿名id
//  public var anonymousUserID: Int64 {
//    get {return _storage._anonymousUserID ?? 0}
//    set {_uniqueStorage()._anonymousUserID = newValue}
//  }
  /// Returns true if `anonymousUserID` has been explicitly set.
//  public var hasAnonymousUserID: Bool {return _storage._anonymousUserID != nil}
  /// Clears the value of `anonymousUserID`. Subsequent reads from it will return its default value.
//  public mutating func clearAnonymousUserID() {_uniqueStorage()._anonymousUserID = nil}
//
  /// 是否@所有人不提示
//  public var isMuteAtAll: Bool {
//    get {return _storage._isMuteAtAll ?? false}
//    set {_uniqueStorage()._isMuteAtAll = newValue}
//  }
  /// Returns true if `isMuteAtAll` has been explicitly set.
//  public var hasIsMuteAtAll: Bool {return _storage._isMuteAtAll != nil}
  /// Clears the value of `isMuteAtAll`. Subsequent reads from it will return its default value.
//  public mutating func clearIsMuteAtAll() {_uniqueStorage()._isMuteAtAll = nil}
//
  /// 边写边译
//  public var typingTranslate: LarkNCExtensionPB_Entities_ChatSetting.TypingTranslateEntity {
//    get {return _storage._typingTranslate ?? LarkNCExtensionPB_Entities_ChatSetting.TypingTranslateEntity()}
//    set {_uniqueStorage()._typingTranslate = newValue}
//  }
  /// Returns true if `typingTranslate` has been explicitly set.
//  public var hasTypingTranslate: Bool {return _storage._typingTranslate != nil}
  /// Clears the value of `typingTranslate`. Subsequent reads from it will return its default value.
//  public mutating func clearTypingTranslate() {_uniqueStorage()._typingTranslate = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum Field: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//    case isRemind // = 1
//    case updateTime // = 2
//    case checkMessagePosition // = 3
//    case isAutoTranslate // = 4
//    case isHiddenNickname // = 5
//    case isMuteAtAll // = 6
//    case typingTranslate // = 7
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .isRemind
//      case 2: self = .updateTime
//      case 3: self = .checkMessagePosition
//      case 4: self = .isAutoTranslate
//      case 5: self = .isHiddenNickname
//      case 6: self = .isMuteAtAll
//      case 7: self = .typingTranslate
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .isRemind: return 1
//      case .updateTime: return 2
//      case .checkMessagePosition: return 3
//      case .isAutoTranslate: return 4
//      case .isHiddenNickname: return 5
//      case .isMuteAtAll: return 6
//      case .typingTranslate: return 7
//      }
//    }
//
//  }
//
  /// 目前设置项只有群消息提醒，以后可在这里扩充
//  public struct CheckMessagePositionSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum Enum: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//      case recentLeft // = 1
//      case newestUnread // = 2
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .recentLeft
//        case 2: self = .newestUnread
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .recentLeft: return 1
//        case .newestUnread: return 2
//        }
//      }
//
//    }
//
//    public init() {}
//  }
//
//  public struct TypingTranslateEntity {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var isOpen: Bool {
//      get {return _isOpen ?? false}
//      set {_isOpen = newValue}
//    }
    /// Returns true if `isOpen` has been explicitly set.
//    public var hasIsOpen: Bool {return self._isOpen != nil}
    /// Clears the value of `isOpen`. Subsequent reads from it will return its default value.
//    public mutating func clearIsOpen() {self._isOpen = nil}
//
//    public var openMode: LarkNCExtensionPB_Entities_ChatSetting.TypingTranslateEntity.OpenMode {
//      get {return _openMode ?? .unknown}
//      set {_openMode = newValue}
//    }
    /// Returns true if `openMode` has been explicitly set.
//    public var hasOpenMode: Bool {return self._openMode != nil}
    /// Clears the value of `openMode`. Subsequent reads from it will return its default value.
//    public mutating func clearOpenMode() {self._openMode = nil}
//
//    public var locale: String {
//      get {return _locale ?? String()}
//      set {_locale = newValue}
//    }
    /// Returns true if `locale` has been explicitly set.
//    public var hasLocale: Bool {return self._locale != nil}
    /// Clears the value of `locale`. Subsequent reads from it will return its default value.
//    public mutating func clearLocale() {self._locale = nil}
//
    /// 服务端下发，端上不修改，chat纬度 能否自动开启边写边译;
//    public var canAutoOpen: Bool {
//      get {return _canAutoOpen ?? true}
//      set {_canAutoOpen = newValue}
//    }
    /// Returns true if `canAutoOpen` has been explicitly set.
//    public var hasCanAutoOpen: Bool {return self._canAutoOpen != nil}
    /// Clears the value of `canAutoOpen`. Subsequent reads from it will return its default value.
//    public mutating func clearCanAutoOpen() {self._canAutoOpen = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public enum OpenMode: LarkHTTP.Enum {
//      public typealias RawValue = Int
//      case unknown // = 0
//
      /// 手动
//      case manual // = 1
//
      /// 自动
//      case auto // = 2
//
//      public init() {
//        self = .unknown
//      }
//
//      public init?(rawValue: Int) {
//        switch rawValue {
//        case 0: self = .unknown
//        case 1: self = .manual
//        case 2: self = .auto
//        default: return nil
//        }
//      }
//
//      public var rawValue: Int {
//        switch self {
//        case .unknown: return 0
//        case .manual: return 1
//        case .auto: return 2
//        }
//      }
//
//    }
//
//    public init() {}
//
//    fileprivate var _isOpen: Bool? = nil
//    fileprivate var _openMode: LarkNCExtensionPB_Entities_ChatSetting.TypingTranslateEntity.OpenMode? = nil
//    fileprivate var _locale: String? = nil
//    fileprivate var _canAutoOpen: Bool? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_ChatSetting.Field: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_Department {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
  /// 部门名称
//  public var name: String {
//    get {return _name ?? String()}
//    set {_name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {self._name = nil}
//
  /// 上级部门ID
//  public var parentID: String {
//    get {return _parentID ?? String()}
//    set {_parentID = newValue}
//  }
  /// Returns true if `parentID` has been explicitly set.
//  public var hasParentID: Bool {return self._parentID != nil}
  /// Clears the value of `parentID`. Subsequent reads from it will return its default value.
//  public mutating func clearParentID() {self._parentID = nil}
//
  /// 部门负责人UserID
//  public var leaderID: String {
//    get {return _leaderID ?? String()}
//    set {_leaderID = newValue}
//  }
  /// Returns true if `leaderID` has been explicitly set.
//  public var hasLeaderID: Bool {return self._leaderID != nil}
  /// Clears the value of `leaderID`. Subsequent reads from it will return its default value.
//  public mutating func clearLeaderID() {self._leaderID = nil}
//
  /// 成员数
//  public var memberCount: Int32 {
//    get {return _memberCount ?? 0}
//    set {_memberCount = newValue}
//  }
  /// Returns true if `memberCount` has been explicitly set.
//  public var hasMemberCount: Bool {return self._memberCount != nil}
  /// Clears the value of `memberCount`. Subsequent reads from it will return its default value.
//  public mutating func clearMemberCount() {self._memberCount = nil}
//
  /// 部门状态
//  public var status: Int32 {
//    get {return _status ?? 0}
//    set {_status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {self._status = nil}
//
  /// 部门名称拼音
//  public var namePinyin: String {
//    get {return _namePinyin ?? String()}
//    set {_namePinyin = newValue}
//  }
  /// Returns true if `namePinyin` has been explicitly set.
//  public var hasNamePinyin: Bool {return self._namePinyin != nil}
  /// Clears the value of `namePinyin`. Subsequent reads from it will return its default value.
//  public mutating func clearNamePinyin() {self._namePinyin = nil}
//
  /// 部门群的ChatID
//  public var chatID: String {
//    get {return _chatID ?? String()}
//    set {_chatID = newValue}
//  }
  /// Returns true if `chatID` has been explicitly set.
//  public var hasChatID: Bool {return self._chatID != nil}
  /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatID() {self._chatID = nil}
//
  /// 是否有子部门
//  public var hasChild_p: Bool {
//    get {return _hasChild_p ?? false}
//    set {_hasChild_p = newValue}
//  }
  /// Returns true if `hasChild_p` has been explicitly set.
//  public var hasHasChild_p: Bool {return self._hasChild_p != nil}
  /// Clears the value of `hasChild_p`. Subsequent reads from it will return its default value.
//  public mutating func clearHasChild_p() {self._hasChild_p = nil}
//
  /// 部门国际化值，取不到则使用name(2)兜底,key是语言缩写，当前支持语言zh_cn, en_us, ja_jp等, 后端参见 common/i18n 中定义
//  public var i18NName: Dictionary<String,String> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _name: String? = nil
//  fileprivate var _parentID: String? = nil
//  fileprivate var _leaderID: String? = nil
//  fileprivate var _memberCount: Int32? = nil
//  fileprivate var _status: Int32? = nil
//  fileprivate var _namePinyin: String? = nil
//  fileprivate var _chatID: String? = nil
//  fileprivate var _hasChild_p: Bool? = nil
//}

//public struct LarkNCExtensionPB_Entities_Notice {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var shouldNotify: Bool {
//    get {return _shouldNotify ?? false}
//    set {_shouldNotify = newValue}
//  }
  /// Returns true if `shouldNotify` has been explicitly set.
//  public var hasShouldNotify: Bool {return self._shouldNotify != nil}
  /// Clears the value of `shouldNotify`. Subsequent reads from it will return its default value.
//  public mutating func clearShouldNotify() {self._shouldNotify = nil}
//
//  public var title: String {
//    get {return _title ?? String()}
//    set {_title = newValue}
//  }
  /// Returns true if `title` has been explicitly set.
//  public var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
//  public mutating func clearTitle() {self._title = nil}
//
//  public var content: String {
//    get {return _content ?? String()}
//    set {_content = newValue}
//  }
  /// Returns true if `content` has been explicitly set.
//  public var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
//  public mutating func clearContent() {self._content = nil}
//
//  public var summary: String {
//    get {return _summary ?? String()}
//    set {_summary = newValue}
//  }
  /// Returns true if `summary` has been explicitly set.
//  public var hasSummary: Bool {return self._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
//  public mutating func clearSummary() {self._summary = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _shouldNotify: Bool? = nil
//  fileprivate var _title: String? = nil
//  fileprivate var _content: String? = nil
//  fileprivate var _summary: String? = nil
//}

/// 已废弃
//public struct LarkNCExtensionPB_Entities_EmailThread {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 第一封邮件的 id
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
//  public var ownerID: String {
//    get {return _ownerID ?? String()}
//    set {_ownerID = newValue}
//  }
  /// Returns true if `ownerID` has been explicitly set.
//  public var hasOwnerID: Bool {return self._ownerID != nil}
  /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
//  public mutating func clearOwnerID() {self._ownerID = nil}
//
//  public var lastMessageID: String {
//    get {return _lastMessageID ?? String()}
//    set {_lastMessageID = newValue}
//  }
  /// Returns true if `lastMessageID` has been explicitly set.
//  public var hasLastMessageID: Bool {return self._lastMessageID != nil}
  /// Clears the value of `lastMessageID`. Subsequent reads from it will return its default value.
//  public mutating func clearLastMessageID() {self._lastMessageID = nil}
//
//  public var newMessageCount: Int32 {
//    get {return _newMessageCount ?? 0}
//    set {_newMessageCount = newValue}
//  }
  /// Returns true if `newMessageCount` has been explicitly set.
//  public var hasNewMessageCount: Bool {return self._newMessageCount != nil}
  /// Clears the value of `newMessageCount`. Subsequent reads from it will return its default value.
//  public mutating func clearNewMessageCount() {self._newMessageCount = nil}
//
//  public var lastMessagePosition: Int32 {
//    get {return _lastMessagePosition ?? 0}
//    set {_lastMessagePosition = newValue}
//  }
  /// Returns true if `lastMessagePosition` has been explicitly set.
//  public var hasLastMessagePosition: Bool {return self._lastMessagePosition != nil}
  /// Clears the value of `lastMessagePosition`. Subsequent reads from it will return its default value.
//  public mutating func clearLastMessagePosition() {self._lastMessagePosition = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _ownerID: String? = nil
//  fileprivate var _lastMessageID: String? = nil
//  fileprivate var _newMessageCount: Int32? = nil
//  fileprivate var _lastMessagePosition: Int32? = nil
//}

//public struct LarkNCExtensionPB_Entities_EmailMember {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// chatter_id or chat_id
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
//  public var type: LarkNCExtensionPB_Entities_EmailMember.TypeEnum {
//    get {return _type ?? .unknown}
//    set {_type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}
//
//  public var inviterID: String {
//    get {return _inviterID ?? String()}
//    set {_inviterID = newValue}
//  }
  /// Returns true if `inviterID` has been explicitly set.
//  public var hasInviterID: Bool {return self._inviterID != nil}
  /// Clears the value of `inviterID`. Subsequent reads from it will return its default value.
//  public mutating func clearInviterID() {self._inviterID = nil}
//
//  public var joinTime: Int64 {
//    get {return _joinTime ?? 0}
//    set {_joinTime = newValue}
//  }
  /// Returns true if `joinTime` has been explicitly set.
//  public var hasJoinTime: Bool {return self._joinTime != nil}
  /// Clears the value of `joinTime`. Subsequent reads from it will return its default value.
//  public mutating func clearJoinTime() {self._joinTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//    case chatter // = 1
//    case chat // = 2
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .chatter
//      case 2: self = .chat
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .chatter: return 1
//      case .chat: return 2
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _type: LarkNCExtensionPB_Entities_EmailMember.TypeEnum? = nil
//  fileprivate var _inviterID: String? = nil
//  fileprivate var _joinTime: Int64? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_EmailMember.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_Email {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 第一封邮件的 id
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
//  public var ownerID: String {
//    get {return _ownerID ?? String()}
//    set {_ownerID = newValue}
//  }
  /// Returns true if `ownerID` has been explicitly set.
//  public var hasOwnerID: Bool {return self._ownerID != nil}
  /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
//  public mutating func clearOwnerID() {self._ownerID = nil}
//
//  public var lastMessageID: String {
//    get {return _lastMessageID ?? String()}
//    set {_lastMessageID = newValue}
//  }
  /// Returns true if `lastMessageID` has been explicitly set.
//  public var hasLastMessageID: Bool {return self._lastMessageID != nil}
  /// Clears the value of `lastMessageID`. Subsequent reads from it will return its default value.
//  public mutating func clearLastMessageID() {self._lastMessageID = nil}
//
//  public var newMessageCount: Int32 {
//    get {return _newMessageCount ?? 0}
//    set {_newMessageCount = newValue}
//  }
  /// Returns true if `newMessageCount` has been explicitly set.
//  public var hasNewMessageCount: Bool {return self._newMessageCount != nil}
  /// Clears the value of `newMessageCount`. Subsequent reads from it will return its default value.
//  public mutating func clearNewMessageCount() {self._newMessageCount = nil}
//
//  public var lastMessagePosition: Int32 {
//    get {return _lastMessagePosition ?? 0}
//    set {_lastMessagePosition = newValue}
//  }
  /// Returns true if `lastMessagePosition` has been explicitly set.
//  public var hasLastMessagePosition: Bool {return self._lastMessagePosition != nil}
  /// Clears the value of `lastMessagePosition`. Subsequent reads from it will return its default value.
//  public mutating func clearLastMessagePosition() {self._lastMessagePosition = nil}
//
//  public var updateTime: Int64 {
//    get {return _updateTime ?? 0}
//    set {_updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {self._updateTime = nil}
//
//  public var subject: String {
//    get {return _subject ?? String()}
//    set {_subject = newValue}
//  }
  /// Returns true if `subject` has been explicitly set.
//  public var hasSubject: Bool {return self._subject != nil}
  /// Clears the value of `subject`. Subsequent reads from it will return its default value.
//  public mutating func clearSubject() {self._subject = nil}
//
//  public var status: LarkNCExtensionPB_Entities_Email.Status {
//    get {return _status ?? .normal}
//    set {_status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {self._status = nil}
//
//  public var updateFields: [LarkNCExtensionPB_Entities_EmailFields] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum Status: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//    case normal // = 1
//    case modified // = 2
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .normal
//      case 2: self = .modified
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .normal: return 1
//      case .modified: return 2
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _ownerID: String? = nil
//  fileprivate var _lastMessageID: String? = nil
//  fileprivate var _newMessageCount: Int32? = nil
//  fileprivate var _lastMessagePosition: Int32? = nil
//  fileprivate var _updateTime: Int64? = nil
//  fileprivate var _subject: String? = nil
//  fileprivate var _status: LarkNCExtensionPB_Entities_Email.Status? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_Email.Status: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_Oncall {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
//  public var description_p: String {
//    get {return _storage._description_p ?? String()}
//    set {_uniqueStorage()._description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}
//
  ///排序依据
//  public var namePinyin: String {
//    get {return _storage._namePinyin ?? String()}
//    set {_uniqueStorage()._namePinyin = newValue}
//  }
  /// Returns true if `namePinyin` has been explicitly set.
//  public var hasNamePinyin: Bool {return _storage._namePinyin != nil}
  /// Clears the value of `namePinyin`. Subsequent reads from it will return its default value.
//  public mutating func clearNamePinyin() {_uniqueStorage()._namePinyin = nil}
//
  /// deprecated
//  public var avatar: LarkNCExtensionPB_Entities_ImageSet {
//    get {return _storage._avatar ?? LarkNCExtensionPB_Entities_ImageSet()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
  /// deprecated
//  public var avatarURL: String {
//    get {return _storage._avatarURL ?? String()}
//    set {_uniqueStorage()._avatarURL = newValue}
//  }
  /// Returns true if `avatarURL` has been explicitly set.
//  public var hasAvatarURL: Bool {return _storage._avatarURL != nil}
  /// Clears the value of `avatarURL`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarURL() {_uniqueStorage()._avatarURL = nil}
//
  /// 用户专属的 chat_id
//  public var chatID: String {
//    get {return _storage._chatID ?? String()}
//    set {_uniqueStorage()._chatID = newValue}
//  }
  /// Returns true if `chatID` has been explicitly set.
//  public var hasChatID: Bool {return _storage._chatID != nil}
  /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatID() {_uniqueStorage()._chatID = nil}
//
//  public var tagIds: [Int64] {
//    get {return _storage._tagIds}
//    set {_uniqueStorage()._tagIds = newValue}
//  }
//
//  public var enName: String {
//    get {return _storage._enName ?? String()}
//    set {_uniqueStorage()._enName = newValue}
//  }
  /// Returns true if `enName` has been explicitly set.
//  public var hasEnName: Bool {return _storage._enName != nil}
  /// Clears the value of `enName`. Subsequent reads from it will return its default value.
//  public mutating func clearEnName() {_uniqueStorage()._enName = nil}
//
//  public var enDescription: String {
//    get {return _storage._enDescription ?? String()}
//    set {_uniqueStorage()._enDescription = newValue}
//  }
  /// Returns true if `enDescription` has been explicitly set.
//  public var hasEnDescription: Bool {return _storage._enDescription != nil}
  /// Clears the value of `enDescription`. Subsequent reads from it will return its default value.
//  public mutating func clearEnDescription() {_uniqueStorage()._enDescription = nil}
//
//  public var i18NInf: LarkNCExtensionPB_Entities_Oncall.I18nInf {
//    get {return _storage._i18NInf ?? LarkNCExtensionPB_Entities_Oncall.I18nInf()}
//    set {_uniqueStorage()._i18NInf = newValue}
//  }
  /// Returns true if `i18NInf` has been explicitly set.
//  public var hasI18NInf: Bool {return _storage._i18NInf != nil}
  /// Clears the value of `i18NInf`. Subsequent reads from it will return its default value.
//  public mutating func clearI18NInf() {_uniqueStorage()._i18NInf = nil}
//
//  public var phoneNumber: String {
//    get {return _storage._phoneNumber ?? String()}
//    set {_uniqueStorage()._phoneNumber = newValue}
//  }
  /// Returns true if `phoneNumber` has been explicitly set.
//  public var hasPhoneNumber: Bool {return _storage._phoneNumber != nil}
  /// Clears the value of `phoneNumber`. Subsequent reads from it will return its default value.
//  public mutating func clearPhoneNumber() {_uniqueStorage()._phoneNumber = nil}
//
//  public var reportLocation: Bool {
//    get {return _storage._reportLocation ?? false}
//    set {_uniqueStorage()._reportLocation = newValue}
//  }
  /// Returns true if `reportLocation` has been explicitly set.
//  public var hasReportLocation: Bool {return _storage._reportLocation != nil}
  /// Clears the value of `reportLocation`. Subsequent reads from it will return its default value.
//  public mutating func clearReportLocation() {_uniqueStorage()._reportLocation = nil}
//
//  public var avatarImage: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatarImage ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatarImage = newValue}
//  }
  /// Returns true if `avatarImage` has been explicitly set.
//  public var hasAvatarImage: Bool {return _storage._avatarImage != nil}
  /// Clears the value of `avatarImage`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarImage() {_uniqueStorage()._avatarImage = nil}
//
  /// 标签, icon_tags元素为entities.proto:Tag 的序号
//  public var iconTags: [Int32] {
//    get {return _storage._iconTags}
//    set {_uniqueStorage()._iconTags = newValue}
//  }
//
  /// this field denotes the business hours periods of an Oncall.
  /// empty means no business hours.
  /// number of elements of this field is always multiple of two, so that
  /// each pair of element denotes an business hours interval.
  /// it's possible that the first timestamp is before now, which means now is within business hours.
//  public var businessHoursPeriodsMs: [Int64] {
//    get {return _storage._businessHoursPeriodsMs}
//    set {_uniqueStorage()._businessHoursPeriodsMs = newValue}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public struct I18nInf {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var i18NNames: Dictionary<String,String> = [:]
//
//    public var i18NDescriptions: Dictionary<String,String> = [:]
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_OncallTag {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: Int64 {
//    get {return _id ?? 0}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
//  public var name: String {
//    get {return _name ?? String()}
//    set {_name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {self._name = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _id: Int64? = nil
//  fileprivate var _name: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_Coordinate {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var longitude: Float {
//    get {return _longitude ?? 0}
//    set {_longitude = newValue}
//  }
  /// Returns true if `longitude` has been explicitly set.
//  public var hasLongitude: Bool {return self._longitude != nil}
  /// Clears the value of `longitude`. Subsequent reads from it will return its default value.
//  public mutating func clearLongitude() {self._longitude = nil}
//
//  public var latitude: Float {
//    get {return _latitude ?? 0}
//    set {_latitude = newValue}
//  }
  /// Returns true if `latitude` has been explicitly set.
//  public var hasLatitude: Bool {return self._latitude != nil}
  /// Clears the value of `latitude`. Subsequent reads from it will return its default value.
//  public mutating func clearLatitude() {self._latitude = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _longitude: Float? = nil
//  fileprivate var _latitude: Float? = nil
//}

//public struct LarkNCExtensionPB_Entities_CircleArea {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var center: LarkNCExtensionPB_Entities_Coordinate {
//    get {return _storage._center ?? LarkNCExtensionPB_Entities_Coordinate()}
//    set {_uniqueStorage()._center = newValue}
//  }
  /// Returns true if `center` has been explicitly set.
//  public var hasCenter: Bool {return _storage._center != nil}
  /// Clears the value of `center`. Subsequent reads from it will return its default value.
//  public mutating func clearCenter() {_uniqueStorage()._center = nil}
//
//  public var radius: Float {
//    get {return _storage._radius ?? 0}
//    set {_uniqueStorage()._radius = newValue}
//  }
  /// Returns true if `radius` has been explicitly set.
//  public var hasRadius: Bool {return _storage._radius != nil}
  /// Clears the value of `radius`. Subsequent reads from it will return its default value.
//  public mutating func clearRadius() {_uniqueStorage()._radius = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_RectangleArea {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var northEast: LarkNCExtensionPB_Entities_Coordinate {
//    get {return _storage._northEast ?? LarkNCExtensionPB_Entities_Coordinate()}
//    set {_uniqueStorage()._northEast = newValue}
//  }
  /// Returns true if `northEast` has been explicitly set.
//  public var hasNorthEast: Bool {return _storage._northEast != nil}
  /// Clears the value of `northEast`. Subsequent reads from it will return its default value.
//  public mutating func clearNorthEast() {_uniqueStorage()._northEast = nil}
//
//  public var southWest: LarkNCExtensionPB_Entities_Coordinate {
//    get {return _storage._southWest ?? LarkNCExtensionPB_Entities_Coordinate()}
//    set {_uniqueStorage()._southWest = newValue}
//  }
  /// Returns true if `southWest` has been explicitly set.
//  public var hasSouthWest: Bool {return _storage._southWest != nil}
  /// Clears the value of `southWest`. Subsequent reads from it will return its default value.
//  public mutating func clearSouthWest() {_uniqueStorage()._southWest = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_PolygonArea {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var points: [LarkNCExtensionPB_Entities_Coordinate] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

//public struct LarkNCExtensionPB_Entities_Location {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var location: OneOf_Location? {
//    get {return _storage._location}
//    set {_uniqueStorage()._location = newValue}
//  }
//
//  public var point: LarkNCExtensionPB_Entities_Coordinate {
//    get {
//      if case .point(let v)? = _storage._location {return v}
//      return LarkNCExtensionPB_Entities_Coordinate()
//    }
//    set {_uniqueStorage()._location = .point(newValue)}
//  }
//
//  public var circleArea: LarkNCExtensionPB_Entities_CircleArea {
//    get {
//      if case .circleArea(let v)? = _storage._location {return v}
//      return LarkNCExtensionPB_Entities_CircleArea()
//    }
//    set {_uniqueStorage()._location = .circleArea(newValue)}
//  }
//
//  public var rectangleArea: LarkNCExtensionPB_Entities_RectangleArea {
//    get {
//      if case .rectangleArea(let v)? = _storage._location {return v}
//      return LarkNCExtensionPB_Entities_RectangleArea()
//    }
//    set {_uniqueStorage()._location = .rectangleArea(newValue)}
//  }
//
//  public var polygonArea: LarkNCExtensionPB_Entities_PolygonArea {
//    get {
//      if case .polygonArea(let v)? = _storage._location {return v}
//      return LarkNCExtensionPB_Entities_PolygonArea()
//    }
//    set {_uniqueStorage()._location = .polygonArea(newValue)}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum OneOf_Location: Equatable {
//    case point(LarkNCExtensionPB_Entities_Coordinate)
//    case circleArea(LarkNCExtensionPB_Entities_CircleArea)
//    case rectangleArea(LarkNCExtensionPB_Entities_RectangleArea)
//    case polygonArea(LarkNCExtensionPB_Entities_PolygonArea)
//
//  #if !swift(>=4.1)
//    public static func ==(lhs: LarkNCExtensionPB_Entities_Location.OneOf_Location, rhs: LarkNCExtensionPB_Entities_Location.OneOf_Location) -> Bool {
//      switch (lhs, rhs) {
//      case (.point(let l), .point(let r)): return l == r
//      case (.circleArea(let l), .circleArea(let r)): return l == r
//      case (.rectangleArea(let l), .rectangleArea(let r)): return l == r
//      case (.polygonArea(let l), .polygonArea(let r)): return l == r
//      default: return false
//      }
//    }
//  #endif
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_DeviceSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var deviceID: String {
//    get {return _deviceID ?? String()}
//    set {_deviceID = newValue}
//  }
  /// Returns true if `deviceID` has been explicitly set.
//  public var hasDeviceID: Bool {return self._deviceID != nil}
  /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
//  public mutating func clearDeviceID() {self._deviceID = nil}
//
  /// 废弃 TODO deprecated
//  public var locale: LarkNCExtensionPB_Entities_LanguageType {
//    get {return _locale ?? .zhCn}
//    set {_locale = newValue}
//  }
  /// Returns true if `locale` has been explicitly set.
//  public var hasLocale: Bool {return self._locale != nil}
  /// Clears the value of `locale`. Subsequent reads from it will return its default value.
//  public mutating func clearLocale() {self._locale = nil}
//
  /// 地区标识；客户端用来控制显示语言
//  public var localeIdentifier: String {
//    get {return _localeIdentifier ?? "zh_CN"}
//    set {_localeIdentifier = newValue}
//  }
  /// Returns true if `localeIdentifier` has been explicitly set.
//  public var hasLocaleIdentifier: Bool {return self._localeIdentifier != nil}
  /// Clears the value of `localeIdentifier`. Subsequent reads from it will return its default value.
//  public mutating func clearLocaleIdentifier() {self._localeIdentifier = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _deviceID: String? = nil
//  fileprivate var _locale: LarkNCExtensionPB_Entities_LanguageType? = nil
//  fileprivate var _localeIdentifier: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_DocPermission {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var permCode: Int32 {
//    get {return _permCode ?? 0}
//    set {_permCode = newValue}
//  }
  /// Returns true if `permCode` has been explicitly set.
//  public var hasPermCode: Bool {return self._permCode != nil}
  /// Clears the value of `permCode`. Subsequent reads from it will return its default value.
//  public mutating func clearPermCode() {self._permCode = nil}
//
//  public var permName: String {
//    get {return _permName ?? String()}
//    set {_permName = newValue}
//  }
  /// Returns true if `permName` has been explicitly set.
//  public var hasPermName: Bool {return self._permName != nil}
  /// Clears the value of `permName`. Subsequent reads from it will return its default value.
//  public mutating func clearPermName() {self._permName = nil}
//
//  public var isSet: Bool {
//    get {return _isSet ?? false}
//    set {_isSet = newValue}
//  }
  /// Returns true if `isSet` has been explicitly set.
//  public var hasIsSet: Bool {return self._isSet != nil}
  /// Clears the value of `isSet`. Subsequent reads from it will return its default value.
//  public mutating func clearIsSet() {self._isSet = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _permCode: Int32? = nil
//  fileprivate var _permName: String? = nil
//  fileprivate var _isSet: Bool? = nil
//}

public struct LarkNCExtensionPB_Entities_Icon {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 图标类型，目前有图片类型，后续可支持emoji等类型
  public var type: LarkNCExtensionPB_Entities_IconType {
    get {return _type ?? .unknownIconType}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}

  /// 图片key或emoji 字符
  public var key: String {
    get {return _key ?? String()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {self._key = nil}

  /// 图标的资源位置信息
  public var fsUnit: String {
    get {return _fsUnit ?? String()}
    set {_fsUnit = newValue}
  }
  /// Returns true if `fsUnit` has been explicitly set.
  public var hasFsUnit: Bool {return self._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {self._fsUnit = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _type: LarkNCExtensionPB_Entities_IconType? = nil
  fileprivate var _key: String? = nil
  fileprivate var _fsUnit: String? = nil
}

//public struct LarkNCExtensionPB_Entities_Doc {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 文档 token
//  public var token: String {
//    get {return _storage._token ?? String()}
//    set {_uniqueStorage()._token = newValue}
//  }
  /// Returns true if `token` has been explicitly set.
//  public var hasToken: Bool {return _storage._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
//  public mutating func clearToken() {_uniqueStorage()._token = nil}
//
  /// 文档 URL
//  public var url: String {
//    get {return _storage._url ?? String()}
//    set {_uniqueStorage()._url = newValue}
//  }
  /// Returns true if `url` has been explicitly set.
//  public var hasURL: Bool {return _storage._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
//  public mutating func clearURL() {_uniqueStorage()._url = nil}
//
  /// 文档类型
//  public var docType: LarkNCExtensionPB_Entities_DocType {
//    get {return _storage._docType ?? .unknownDocType}
//    set {_uniqueStorage()._docType = newValue}
//  }
  /// Returns true if `docType` has been explicitly set.
//  public var hasDocType: Bool {return _storage._docType != nil}
  /// Clears the value of `docType`. Subsequent reads from it will return its default value.
//  public mutating func clearDocType() {_uniqueStorage()._docType = nil}
//
  /// 标题
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
  /// 文档图标 KEY
//  public var iconKey: String {
//    get {return _storage._iconKey ?? String()}
//    set {_uniqueStorage()._iconKey = newValue}
//  }
  /// Returns true if `iconKey` has been explicitly set.
//  public var hasIconKey: Bool {return _storage._iconKey != nil}
  /// Clears the value of `iconKey`. Subsequent reads from it will return its default value.
//  public mutating func clearIconKey() {_uniqueStorage()._iconKey = nil}
//
  /// 缩略图 URL
//  public var abstract: String {
//    get {return _storage._abstract ?? String()}
//    set {_uniqueStorage()._abstract = newValue}
//  }
  /// Returns true if `abstract` has been explicitly set.
//  public var hasAbstract: Bool {return _storage._abstract != nil}
  /// Clears the value of `abstract`. Subsequent reads from it will return its default value.
//  public mutating func clearAbstract() {_uniqueStorage()._abstract = nil}
//
  /// 创建时间
//  public var createTime: Int64 {
//    get {return _storage._createTime ?? 0}
//    set {_uniqueStorage()._createTime = newValue}
//  }
  /// Returns true if `createTime` has been explicitly set.
//  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}
//
  /// 更新时间
//  public var updateTime: Int64 {
//    get {return _storage._updateTime ?? 0}
//    set {_uniqueStorage()._updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}
//
  /// 所有者名字 [deprecated, 不支持国际化]
//  public var ownerName: String {
//    get {return _storage._ownerName ?? String()}
//    set {_uniqueStorage()._ownerName = newValue}
//  }
  /// Returns true if `ownerName` has been explicitly set.
//  public var hasOwnerName: Bool {return _storage._ownerName != nil}
  /// Clears the value of `ownerName`. Subsequent reads from it will return its default value.
//  public mutating func clearOwnerName() {_uniqueStorage()._ownerName = nil}
//
  /// 所有者 ID
//  public var ownerID: Int64 {
//    get {return _storage._ownerID ?? 0}
//    set {_uniqueStorage()._ownerID = newValue}
//  }
  /// Returns true if `ownerID` has been explicitly set.
//  public var hasOwnerID: Bool {return _storage._ownerID != nil}
  /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
//  public mutating func clearOwnerID() {_uniqueStorage()._ownerID = nil}
//
  /// 是否外部文档
//  public var isCrossTenant: Bool {
//    get {return _storage._isCrossTenant ?? false}
//    set {_uniqueStorage()._isCrossTenant = newValue}
//  }
  /// Returns true if `isCrossTenant` has been explicitly set.
//  public var hasIsCrossTenant: Bool {return _storage._isCrossTenant != nil}
  /// Clears the value of `isCrossTenant`. Subsequent reads from it will return its default value.
//  public mutating func clearIsCrossTenant() {_uniqueStorage()._isCrossTenant = nil}
//
  /// 是否未命名文档
//  public var isUntitled: Bool {
//    get {return _storage._isUntitled ?? false}
//    set {_uniqueStorage()._isUntitled = newValue}
//  }
  /// Returns true if `isUntitled` has been explicitly set.
//  public var hasIsUntitled: Bool {return _storage._isUntitled != nil}
  /// Clears the value of `isUntitled`. Subsequent reads from it will return its default value.
//  public mutating func clearIsUntitled() {_uniqueStorage()._isUntitled = nil}
//
  /// 文档类型字符串
//  public var strDocType: String {
//    get {return _storage._strDocType ?? String()}
//    set {_uniqueStorage()._strDocType = newValue}
//  }
  /// Returns true if `strDocType` has been explicitly set.
//  public var hasStrDocType: Bool {return _storage._strDocType != nil}
  /// Clears the value of `strDocType`. Subsequent reads from it will return its default value.
//  public mutating func clearStrDocType() {_uniqueStorage()._strDocType = nil}
//
  /// 过期时间
//  public var expires: Int64 {
//    get {return _storage._expires ?? 0}
//    set {_uniqueStorage()._expires = newValue}
//  }
  /// Returns true if `expires` has been explicitly set.
//  public var hasExpires: Bool {return _storage._expires != nil}
  /// Clears the value of `expires`. Subsequent reads from it will return its default value.
//  public mutating func clearExpires() {_uniqueStorage()._expires = nil}
//
  /// 用户权限
//  public var userPerm: Int32 {
//    get {return _storage._userPerm ?? 0}
//    set {_uniqueStorage()._userPerm = newValue}
//  }
  /// Returns true if `userPerm` has been explicitly set.
//  public var hasUserPerm: Bool {return _storage._userPerm != nil}
  /// Clears the value of `userPerm`. Subsequent reads from it will return its default value.
//  public mutating func clearUserPerm() {_uniqueStorage()._userPerm = nil}
//
  /// 自定义icon
//  public var icon: LarkNCExtensionPB_Entities_Icon {
//    get {return _storage._icon ?? LarkNCExtensionPB_Entities_Icon()}
//    set {_uniqueStorage()._icon = newValue}
//  }
  /// Returns true if `icon` has been explicitly set.
//  public var hasIcon: Bool {return _storage._icon != nil}
  /// Clears the value of `icon`. Subsequent reads from it will return its default value.
//  public mutating func clearIcon() {_uniqueStorage()._icon = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_DocCard {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 文档 token
//  public var token: String {
//    get {return _storage._token ?? String()}
//    set {_uniqueStorage()._token = newValue}
//  }
  /// Returns true if `token` has been explicitly set.
//  public var hasToken: Bool {return _storage._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
//  public mutating func clearToken() {_uniqueStorage()._token = nil}
//
  /// 消息 ID
//  public var messageID: String {
//    get {return _storage._messageID ?? String()}
//    set {_uniqueStorage()._messageID = newValue}
//  }
  /// Returns true if `messageID` has been explicitly set.
//  public var hasMessageID: Bool {return _storage._messageID != nil}
  /// Clears the value of `messageID`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageID() {_uniqueStorage()._messageID = nil}
//
  /// 会话 ID
//  public var groupID: String {
//    get {return _storage._groupID ?? String()}
//    set {_uniqueStorage()._groupID = newValue}
//  }
  /// Returns true if `groupID` has been explicitly set.
//  public var hasGroupID: Bool {return _storage._groupID != nil}
  /// Clears the value of `groupID`. Subsequent reads from it will return its default value.
//  public mutating func clearGroupID() {_uniqueStorage()._groupID = nil}
//
  /// 权限列表
//  public var permissionsCouldPut: [LarkNCExtensionPB_Entities_DocPermission] {
//    get {return _storage._permissionsCouldPut}
//    set {_uniqueStorage()._permissionsCouldPut = newValue}
//  }
//
  /// 分享信息 [deprecated, 不支持国际化]
//  public var shareInfo: String {
//    get {return _storage._shareInfo ?? String()}
//    set {_uniqueStorage()._shareInfo = newValue}
//  }
  /// Returns true if `shareInfo` has been explicitly set.
//  public var hasShareInfo: Bool {return _storage._shareInfo != nil}
  /// Clears the value of `shareInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearShareInfo() {_uniqueStorage()._shareInfo = nil}
//
  /// 授权者 [deprecated]
//  public var authedByUserID: Int64 {
//    get {return _storage._authedByUserID ?? 0}
//    set {_uniqueStorage()._authedByUserID = newValue}
//  }
  /// Returns true if `authedByUserID` has been explicitly set.
//  public var hasAuthedByUserID: Bool {return _storage._authedByUserID != nil}
  /// Clears the value of `authedByUserID`. Subsequent reads from it will return its default value.
//  public mutating func clearAuthedByUserID() {_uniqueStorage()._authedByUserID = nil}
//
  /// 授予权限 [deprecated]
//  public var authedPerm: Int32 {
//    get {return _storage._authedPerm ?? 0}
//    set {_uniqueStorage()._authedPerm = newValue}
//  }
  /// Returns true if `authedPerm` has been explicitly set.
//  public var hasAuthedPerm: Bool {return _storage._authedPerm != nil}
  /// Clears the value of `authedPerm`. Subsequent reads from it will return its default value.
//  public mutating func clearAuthedPerm() {_uniqueStorage()._authedPerm = nil}
//
  /// 消息卡片是否存在
//  public var messageExisted: Bool {
//    get {return _storage._messageExisted ?? false}
//    set {_uniqueStorage()._messageExisted = newValue}
//  }
  /// Returns true if `messageExisted` has been explicitly set.
//  public var hasMessageExisted: Bool {return _storage._messageExisted != nil}
  /// Clears the value of `messageExisted`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageExisted() {_uniqueStorage()._messageExisted = nil}
//
  /// 文档标题
//  public var title: String {
//    get {return _storage._title ?? String()}
//    set {_uniqueStorage()._title = newValue}
//  }
  /// Returns true if `title` has been explicitly set.
//  public var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
//  public mutating func clearTitle() {_uniqueStorage()._title = nil}
//
  /// deprecated
//  public var expires: Int64 {
//    get {return _storage._expires ?? 0}
//    set {_uniqueStorage()._expires = newValue}
//  }
  /// Returns true if `expires` has been explicitly set.
//  public var hasExpires: Bool {return _storage._expires != nil}
  /// Clears the value of `expires`. Subsequent reads from it will return its default value.
//  public mutating func clearExpires() {_uniqueStorage()._expires = nil}
//
  /// deprecated
//  public var userPerm: Int32 {
//    get {return _storage._userPerm ?? 0}
//    set {_uniqueStorage()._userPerm = newValue}
//  }
  /// Returns true if `userPerm` has been explicitly set.
//  public var hasUserPerm: Bool {return _storage._userPerm != nil}
  /// Clears the value of `userPerm`. Subsequent reads from it will return its default value.
//  public mutating func clearUserPerm() {_uniqueStorage()._userPerm = nil}
//
  /// 文档 URL
//  public var docURL: String {
//    get {return _storage._docURL ?? String()}
//    set {_uniqueStorage()._docURL = newValue}
//  }
  /// Returns true if `docURL` has been explicitly set.
//  public var hasDocURL: Bool {return _storage._docURL != nil}
  /// Clears the value of `docURL`. Subsequent reads from it will return its default value.
//  public mutating func clearDocURL() {_uniqueStorage()._docURL = nil}
//
  /// 是否渲染卡片
//  public var shouldRender: Bool {
//    get {return _storage._shouldRender ?? false}
//    set {_uniqueStorage()._shouldRender = newValue}
//  }
  /// Returns true if `shouldRender` has been explicitly set.
//  public var hasShouldRender: Bool {return _storage._shouldRender != nil}
  /// Clears the value of `shouldRender`. Subsequent reads from it will return its default value.
//  public mutating func clearShouldRender() {_uniqueStorage()._shouldRender = nil}
//
  /// 发送者分享状态
//  public var shareStatus: Int64 {
//    get {return _storage._shareStatus ?? 0}
//    set {_uniqueStorage()._shareStatus = newValue}
//  }
  /// Returns true if `shareStatus` has been explicitly set.
//  public var hasShareStatus: Bool {return _storage._shareStatus != nil}
  /// Clears the value of `shareStatus`. Subsequent reads from it will return its default value.
//  public mutating func clearShareStatus() {_uniqueStorage()._shareStatus = nil}
//
  /// 缩略图详情, JSON 格式
//  public var thumbnailDetail: String {
//    get {return _storage._thumbnailDetail ?? String()}
//    set {_uniqueStorage()._thumbnailDetail = newValue}
//  }
  /// Returns true if `thumbnailDetail` has been explicitly set.
//  public var hasThumbnailDetail: Bool {return _storage._thumbnailDetail != nil}
  /// Clears the value of `thumbnailDetail`. Subsequent reads from it will return its default value.
//  public mutating func clearThumbnailDetail() {_uniqueStorage()._thumbnailDetail = nil}
//
  /// 卡片接收者权限
//  public var receiverPerm: Int32 {
//    get {return _storage._receiverPerm ?? 0}
//    set {_uniqueStorage()._receiverPerm = newValue}
//  }
  /// Returns true if `receiverPerm` has been explicitly set.
//  public var hasReceiverPerm: Bool {return _storage._receiverPerm != nil}
  /// Clears the value of `receiverPerm`. Subsequent reads from it will return its default value.
//  public mutating func clearReceiverPerm() {_uniqueStorage()._receiverPerm = nil}
//
  /// 发送者是外部用户（和文档 owner 不是同一租户）
//  public var senderIsExternal: Bool {
//    get {return _storage._senderIsExternal ?? false}
//    set {_uniqueStorage()._senderIsExternal = newValue}
//  }
  /// Returns true if `senderIsExternal` has been explicitly set.
//  public var hasSenderIsExternal: Bool {return _storage._senderIsExternal != nil}
  /// Clears the value of `senderIsExternal`. Subsequent reads from it will return its default value.
//  public mutating func clearSenderIsExternal() {_uniqueStorage()._senderIsExternal = nil}
//
  /// 额外字段, JSON 格式
//  public var extra: String {
//    get {return _storage._extra ?? String()}
//    set {_uniqueStorage()._extra = newValue}
//  }
  /// Returns true if `extra` has been explicitly set.
//  public var hasExtra: Bool {return _storage._extra != nil}
  /// Clears the value of `extra`. Subsequent reads from it will return its default value.
//  public mutating func clearExtra() {_uniqueStorage()._extra = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_DocMessage {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 消息 ID
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
  /// 消息类型
//  public var type: LarkNCExtensionPB_Entities_DocMessage.TypeEnum {
//    get {return _storage._type ?? .unknownType}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
  /// 消息创建时间
//  public var createTime: Int64 {
//    get {return _storage._createTime ?? 0}
//    set {_uniqueStorage()._createTime = newValue}
//  }
  /// Returns true if `createTime` has been explicitly set.
//  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}
//
  /// 消息更新时间
//  public var updateTime: Int64 {
//    get {return _storage._updateTime ?? 0}
//    set {_uniqueStorage()._updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}
//
  /// 消息内容
//  public var content: String {
//    get {return _storage._content ?? String()}
//    set {_uniqueStorage()._content = newValue}
//  }
  /// Returns true if `content` has been explicitly set.
//  public var hasContent: Bool {return _storage._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
//  public mutating func clearContent() {_uniqueStorage()._content = nil}
//
  /// Feed ID
//  public var docFeedID: String {
//    get {return _storage._docFeedID ?? String()}
//    set {_uniqueStorage()._docFeedID = newValue}
//  }
  /// Returns true if `docFeedID` has been explicitly set.
//  public var hasDocFeedID: Bool {return _storage._docFeedID != nil}
  /// Clears the value of `docFeedID`. Subsequent reads from it will return its default value.
//  public mutating func clearDocFeedID() {_uniqueStorage()._docFeedID = nil}
//
  /// 产生消息的用户 ID
//  public var fromID: String {
//    get {return _storage._fromID ?? String()}
//    set {_uniqueStorage()._fromID = newValue}
//  }
  /// Returns true if `fromID` has been explicitly set.
//  public var hasFromID: Bool {return _storage._fromID != nil}
  /// Clears the value of `fromID`. Subsequent reads from it will return its default value.
//  public mutating func clearFromID() {_uniqueStorage()._fromID = nil}
//
  /// Feed 摘要描述
//  public var richText: LarkNCExtensionPB_Entities_RichText {
//    get {return _storage._richText ?? LarkNCExtensionPB_Entities_RichText()}
//    set {_uniqueStorage()._richText = newValue}
//  }
  /// Returns true if `richText` has been explicitly set.
//  public var hasRichText: Bool {return _storage._richText != nil}
  /// Clears the value of `richText`. Subsequent reads from it will return its default value.
//  public mutating func clearRichText() {_uniqueStorage()._richText = nil}
//
  /// reaction
//  public var docReactions: [LarkNCExtensionPB_Entities_DocMessage.Reaction] {
//    get {return _storage._docReactions}
//    set {_uniqueStorage()._docReactions = newValue}
//  }
//
  /// 弹窗通知内容
//  public var reactionNotice: LarkNCExtensionPB_Entities_DocMessage.ReactionNotice {
//    get {return _storage._reactionNotice ?? LarkNCExtensionPB_Entities_DocMessage.ReactionNotice()}
//    set {_uniqueStorage()._reactionNotice = newValue}
//  }
  /// Returns true if `reactionNotice` has been explicitly set.
//  public var hasReactionNotice: Bool {return _storage._reactionNotice != nil}
  /// Clears the value of `reactionNotice`. Subsequent reads from it will return its default value.
//  public mutating func clearReactionNotice() {_uniqueStorage()._reactionNotice = nil}
//
  /// 是否支持消息内容国际化
//  public var isI18NMessage: Bool {
//    get {return _storage._isI18NMessage ?? false}
//    set {_uniqueStorage()._isI18NMessage = newValue}
//  }
  /// Returns true if `isI18NMessage` has been explicitly set.
//  public var hasIsI18NMessage: Bool {return _storage._isI18NMessage != nil}
  /// Clears the value of `isI18NMessage`. Subsequent reads from it will return its default value.
//  public mutating func clearIsI18NMessage() {_uniqueStorage()._isI18NMessage = nil}
//
  /// 消息国际化
//  public var i18NInfo: LarkNCExtensionPB_Entities_DocMessage.I18nInfo {
//    get {return _storage._i18NInfo ?? LarkNCExtensionPB_Entities_DocMessage.I18nInfo()}
//    set {_uniqueStorage()._i18NInfo = newValue}
//  }
  /// Returns true if `i18NInfo` has been explicitly set.
//  public var hasI18NInfo: Bool {return _storage._i18NInfo != nil}
  /// Clears the value of `i18NInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearI18NInfo() {_uniqueStorage()._i18NInfo = nil}
//
//  public var extra: String {
//    get {return _storage._extra ?? String()}
//    set {_uniqueStorage()._extra = newValue}
//  }
  /// Returns true if `extra` has been explicitly set.
//  public var hasExtra: Bool {return _storage._extra != nil}
  /// Clears the value of `extra`. Subsequent reads from it will return its default value.
//  public mutating func clearExtra() {_uniqueStorage()._extra = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
  /// 消息类型
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownType // = 0
//
    /// at
//    case mention // = 1
//
    /// 添加评论
//    case comment // = 2
//
    /// 回复评论
//    case reply // = 3
//
    /// 解决评论
//    case solve // = 4
//
    /// 分享文档
//    case share // = 5
//
    /// 重新打开评论 [未使用]
//    case reopen // = 6
//
    /// 评论 reaction
//    case commentReaction // = 7
//
    /// 模板卡片消息
//    case templateCard // = 8
//
    /// 撤回评论
//    case withdraw // = 9
//
//    public init() {
//      self = .unknownType
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownType
//      case 1: self = .mention
//      case 2: self = .comment
//      case 3: self = .reply
//      case 4: self = .solve
//      case 5: self = .share
//      case 6: self = .reopen
//      case 7: self = .commentReaction
//      case 8: self = .templateCard
//      case 9: self = .withdraw
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownType: return 0
//      case .mention: return 1
//      case .comment: return 2
//      case .reply: return 3
//      case .solve: return 4
//      case .share: return 5
//      case .reopen: return 6
//      case .commentReaction: return 7
//      case .templateCard: return 8
//      case .withdraw: return 9
//      }
//    }
//
//  }
//
  /// 模板参数类型
//  public enum TmplParamElemType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//    case userID // = 1
//    case text // = 2
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .userID
//      case 2: self = .text
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .userID: return 1
//      case .text: return 2
//      }
//    }
//
//  }
//
//  public struct Reaction {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// reaction 类型, 例如“thumb up”
//    public var type: String {
//      get {return _type ?? String()}
//      set {_type = newValue}
//    }
    /// Returns true if `type` has been explicitly set.
//    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {self._type = nil}
//
    /// 此 reaction 相关的 chatter
//    public var chatterIds: [String] = []
//
    ///chatter_id -> update_time 用作chatter以及reaction_type的排序
//    public var updateTimes: Dictionary<String,Int64> = [:]
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _type: String? = nil
//  }
//
//  public struct ReactionNotice {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 点赞类型
//    public var type: String {
//      get {return _type ?? String()}
//      set {_type = newValue}
//    }
    /// Returns true if `type` has been explicitly set.
//    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {self._type = nil}
//
    /// True: 取消reaction   False: reaction
//    public var isCancelled: Bool {
//      get {return _isCancelled ?? false}
//      set {_isCancelled = newValue}
//    }
    /// Returns true if `isCancelled` has been explicitly set.
//    public var hasIsCancelled: Bool {return self._isCancelled != nil}
    /// Clears the value of `isCancelled`. Subsequent reads from it will return its default value.
//    public mutating func clearIsCancelled() {self._isCancelled = nil}
//
    /// 哪个用户进行了reaction
//    public var chatterID: String {
//      get {return _chatterID ?? String()}
//      set {_chatterID = newValue}
//    }
    /// Returns true if `chatterID` has been explicitly set.
//    public var hasChatterID: Bool {return self._chatterID != nil}
    /// Clears the value of `chatterID`. Subsequent reads from it will return its default value.
//    public mutating func clearChatterID() {self._chatterID = nil}
//
    /// 是否弹系统消息通知
//    public var shouldNotify: Bool {
//      get {return _shouldNotify ?? false}
//      set {_shouldNotify = newValue}
//    }
    /// Returns true if `shouldNotify` has been explicitly set.
//    public var hasShouldNotify: Bool {return self._shouldNotify != nil}
    /// Clears the value of `shouldNotify`. Subsequent reads from it will return its default value.
//    public mutating func clearShouldNotify() {self._shouldNotify = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _type: String? = nil
//    fileprivate var _isCancelled: Bool? = nil
//    fileprivate var _chatterID: String? = nil
//    fileprivate var _shouldNotify: Bool? = nil
//  }
//
//  public struct I18nInfo {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 标题国际化
//    public var i18NTitles: Dictionary<String,String> = [:]
//
    /// richtext 国际化
//    public var i18NRichtexts: Dictionary<String,LarkNCExtensionPB_Entities_RichText> = [:]
//
    /// 废弃
//    public var titleTmplCode: Int64 {
//      get {return _titleTmplCode ?? 0}
//      set {_titleTmplCode = newValue}
//    }
    /// Returns true if `titleTmplCode` has been explicitly set.
//    public var hasTitleTmplCode: Bool {return self._titleTmplCode != nil}
    /// Clears the value of `titleTmplCode`. Subsequent reads from it will return its default value.
//    public mutating func clearTitleTmplCode() {self._titleTmplCode = nil}
//
    /// 废弃
//    public var textTmplCode: Int64 {
//      get {return _textTmplCode ?? 0}
//      set {_textTmplCode = newValue}
//    }
    /// Returns true if `textTmplCode` has been explicitly set.
//    public var hasTextTmplCode: Bool {return self._textTmplCode != nil}
    /// Clears the value of `textTmplCode`. Subsequent reads from it will return its default value.
//    public mutating func clearTextTmplCode() {self._textTmplCode = nil}
//
    /// 标题模板动态参数
//    public var titleTmplParams: Dictionary<String,LarkNCExtensionPB_Entities_DocMessage.TmplParamElement> = [:]
//
    /// 摘要模板动态参数
//    public var textTmplParams: Dictionary<String,LarkNCExtensionPB_Entities_DocMessage.TmplParamElement> = [:]
//
    /// 标题模板key
//    public var titleTmplKey: String {
//      get {return _titleTmplKey ?? String()}
//      set {_titleTmplKey = newValue}
//    }
    /// Returns true if `titleTmplKey` has been explicitly set.
//    public var hasTitleTmplKey: Bool {return self._titleTmplKey != nil}
    /// Clears the value of `titleTmplKey`. Subsequent reads from it will return its default value.
//    public mutating func clearTitleTmplKey() {self._titleTmplKey = nil}
//
    /// 摘要模板key
//    public var textTmplKey: String {
//      get {return _textTmplKey ?? String()}
//      set {_textTmplKey = newValue}
//    }
    /// Returns true if `textTmplKey` has been explicitly set.
//    public var hasTextTmplKey: Bool {return self._textTmplKey != nil}
    /// Clears the value of `textTmplKey`. Subsequent reads from it will return its default value.
//    public mutating func clearTextTmplKey() {self._textTmplKey = nil}
//
    /// 摘要模板动态参数v2
//    public var textTmplParamsV2: Dictionary<String,LarkNCExtensionPB_Entities_DocMessage.TmplParamElement> = [:]
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _titleTmplCode: Int64? = nil
//    fileprivate var _textTmplCode: Int64? = nil
//    fileprivate var _titleTmplKey: String? = nil
//    fileprivate var _textTmplKey: String? = nil
//  }
//
//  public struct TmplParamElement {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var type: LarkNCExtensionPB_Entities_DocMessage.TmplParamElemType {
//      get {return _type ?? .unknown}
//      set {_type = newValue}
//    }
    /// Returns true if `type` has been explicitly set.
//    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
//    public mutating func clearType() {self._type = nil}
//
//    public var content: String {
//      get {return _content ?? String()}
//      set {_content = newValue}
//    }
    /// Returns true if `content` has been explicitly set.
//    public var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
//    public mutating func clearContent() {self._content = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _type: LarkNCExtensionPB_Entities_DocMessage.TmplParamElemType? = nil
//    fileprivate var _content: String? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_DocMessage.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_DocMessage.TmplParamElemType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_OpenAppFeed {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var appID: Int64 {
//    get {return _storage._appID ?? 0}
//    set {_uniqueStorage()._appID = newValue}
//  }
  /// Returns true if `appID` has been explicitly set.
//  public var hasAppID: Bool {return _storage._appID != nil}
  /// Clears the value of `appID`. Subsequent reads from it will return its default value.
//  public mutating func clearAppID() {_uniqueStorage()._appID = nil}
//
  /// deprecated 3.17
//  public var avatarKey: String {
//    get {return _storage._avatarKey ?? String()}
//    set {_uniqueStorage()._avatarKey = newValue}
//  }
  /// Returns true if `avatarKey` has been explicitly set.
//  public var hasAvatarKey: Bool {return _storage._avatarKey != nil}
  /// Clears the value of `avatarKey`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarKey() {_uniqueStorage()._avatarKey = nil}
//
  /// deprecated 3.17
//  public var avatarURL: String {
//    get {return _storage._avatarURL ?? String()}
//    set {_uniqueStorage()._avatarURL = newValue}
//  }
  /// Returns true if `avatarURL` has been explicitly set.
//  public var hasAvatarURL: Bool {return _storage._avatarURL != nil}
  /// Clears the value of `avatarURL`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarURL() {_uniqueStorage()._avatarURL = nil}
//
//  public var appName: String {
//    get {return _storage._appName ?? String()}
//    set {_uniqueStorage()._appName = newValue}
//  }
  /// Returns true if `appName` has been explicitly set.
//  public var hasAppName: Bool {return _storage._appName != nil}
  /// Clears the value of `appName`. Subsequent reads from it will return its default value.
//  public mutating func clearAppName() {_uniqueStorage()._appName = nil}
//
//  public var botIds: [Int64] {
//    get {return _storage._botIds}
//    set {_uniqueStorage()._botIds = newValue}
//  }
//
//  public var pcSchema: String {
//    get {return _storage._pcSchema ?? String()}
//    set {_uniqueStorage()._pcSchema = newValue}
//  }
  /// Returns true if `pcSchema` has been explicitly set.
//  public var hasPcSchema: Bool {return _storage._pcSchema != nil}
  /// Clears the value of `pcSchema`. Subsequent reads from it will return its default value.
//  public mutating func clearPcSchema() {_uniqueStorage()._pcSchema = nil}
//
//  public var iosSchema: String {
//    get {return _storage._iosSchema ?? String()}
//    set {_uniqueStorage()._iosSchema = newValue}
//  }
  /// Returns true if `iosSchema` has been explicitly set.
//  public var hasIosSchema: Bool {return _storage._iosSchema != nil}
  /// Clears the value of `iosSchema`. Subsequent reads from it will return its default value.
//  public mutating func clearIosSchema() {_uniqueStorage()._iosSchema = nil}
//
//  public var androidSchema: String {
//    get {return _storage._androidSchema ?? String()}
//    set {_uniqueStorage()._androidSchema = newValue}
//  }
  /// Returns true if `androidSchema` has been explicitly set.
//  public var hasAndroidSchema: Bool {return _storage._androidSchema != nil}
  /// Clears the value of `androidSchema`. Subsequent reads from it will return its default value.
//  public mutating func clearAndroidSchema() {_uniqueStorage()._androidSchema = nil}
//
//  public var latestOpenSequence: Int64 {
//    get {return _storage._latestOpenSequence ?? 0}
//    set {_uniqueStorage()._latestOpenSequence = newValue}
//  }
  /// Returns true if `latestOpenSequence` has been explicitly set.
//  public var hasLatestOpenSequence: Bool {return _storage._latestOpenSequence != nil}
  /// Clears the value of `latestOpenSequence`. Subsequent reads from it will return its default value.
//  public mutating func clearLatestOpenSequence() {_uniqueStorage()._latestOpenSequence = nil}
//
//  public var latestReadSequence: Int64 {
//    get {return _storage._latestReadSequence ?? 0}
//    set {_uniqueStorage()._latestReadSequence = newValue}
//  }
  /// Returns true if `latestReadSequence` has been explicitly set.
//  public var hasLatestReadSequence: Bool {return _storage._latestReadSequence != nil}
  /// Clears the value of `latestReadSequence`. Subsequent reads from it will return its default value.
//  public mutating func clearLatestReadSequence() {_uniqueStorage()._latestReadSequence = nil}
//
//  public var tag: String {
//    get {return _storage._tag ?? String()}
//    set {_uniqueStorage()._tag = newValue}
//  }
  /// Returns true if `tag` has been explicitly set.
//  public var hasTag: Bool {return _storage._tag != nil}
  /// Clears the value of `tag`. Subsequent reads from it will return its default value.
//  public mutating func clearTag() {_uniqueStorage()._tag = nil}
//
//  public var summary: String {
//    get {return _storage._summary ?? String()}
//    set {_uniqueStorage()._summary = newValue}
//  }
  /// Returns true if `summary` has been explicitly set.
//  public var hasSummary: Bool {return _storage._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
//  public mutating func clearSummary() {_uniqueStorage()._summary = nil}
//
//  public var notifyOpen: Bool {
//    get {return _storage._notifyOpen ?? false}
//    set {_uniqueStorage()._notifyOpen = newValue}
//  }
  /// Returns true if `notifyOpen` has been explicitly set.
//  public var hasNotifyOpen: Bool {return _storage._notifyOpen != nil}
  /// Clears the value of `notifyOpen`. Subsequent reads from it will return its default value.
//  public mutating func clearNotifyOpen() {_uniqueStorage()._notifyOpen = nil}
//
//  public var appNameI18N: Dictionary<String,String> {
//    get {return _storage._appNameI18N}
//    set {_uniqueStorage()._appNameI18N = newValue}
//  }
//
  /// 应用pushfeed的时间戳
//  public var pushTime: Int64 {
//    get {return _storage._pushTime ?? 0}
//    set {_uniqueStorage()._pushTime = newValue}
//  }
  /// Returns true if `pushTime` has been explicitly set.
//  public var hasPushTime: Bool {return _storage._pushTime != nil}
  /// Clears the value of `pushTime`. Subsequent reads from it will return its default value.
//  public mutating func clearPushTime() {_uniqueStorage()._pushTime = nil}
//
  /// 新的头像字段
//  public var avatar: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatar ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
  ///app类型，二进制位表示（十进制就是 1->小程序 2->H5 8->机器人）
//  public var appType: Int64 {
//    get {return _storage._appType ?? 0}
//    set {_uniqueStorage()._appType = newValue}
//  }
  /// Returns true if `appType` has been explicitly set.
//  public var hasAppType: Bool {return _storage._appType != nil}
  /// Clears the value of `appType`. Subsequent reads from it will return its default value.
//  public mutating func clearAppType() {_uniqueStorage()._appType = nil}
//
  ///会话id
//  public var chatID: String {
//    get {return _storage._chatID ?? String()}
//    set {_uniqueStorage()._chatID = newValue}
//  }
  /// Returns true if `chatID` has been explicitly set.
//  public var hasChatID: Bool {return _storage._chatID != nil}
  /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatID() {_uniqueStorage()._chatID = nil}
//
  ///应用pushfeed的时间戳 单位毫秒
//  public var pushTimeMs: Int64 {
//    get {return _storage._pushTimeMs ?? 0}
//    set {_uniqueStorage()._pushTimeMs = newValue}
//  }
  /// Returns true if `pushTimeMs` has been explicitly set.
//  public var hasPushTimeMs: Bool {return _storage._pushTimeMs != nil}
  /// Clears the value of `pushTimeMs`. Subsequent reads from it will return its default value.
//  public mutating func clearPushTimeMs() {_uniqueStorage()._pushTimeMs = nil}
//
  ///cli_ 前缀的应用id
//  public var appClientID: String {
//    get {return _storage._appClientID ?? String()}
//    set {_uniqueStorage()._appClientID = newValue}
//  }
  /// Returns true if `appClientID` has been explicitly set.
//  public var hasAppClientID: Bool {return _storage._appClientID != nil}
  /// Clears the value of `appClientID`. Subsequent reads from it will return its default value.
//  public mutating func clearAppClientID() {_uniqueStorage()._appClientID = nil}
//
  /// summary的国际化信息
//  public var summaryI18N: Dictionary<String,String> {
//    get {return _storage._summaryI18N}
//    set {_uniqueStorage()._summaryI18N = newValue}
//  }
//
//  public var incrementIndex: Int64 {
//    get {return _storage._incrementIndex ?? 0}
//    set {_uniqueStorage()._incrementIndex = newValue}
//  }
  /// Returns true if `incrementIndex` has been explicitly set.
//  public var hasIncrementIndex: Bool {return _storage._incrementIndex != nil}
  /// Clears the value of `incrementIndex`. Subsequent reads from it will return its default value.
//  public mutating func clearIncrementIndex() {_uniqueStorage()._incrementIndex = nil}
//
//  public var readIndex: Int64 {
//    get {return _storage._readIndex ?? 0}
//    set {_uniqueStorage()._readIndex = newValue}
//  }
  /// Returns true if `readIndex` has been explicitly set.
//  public var hasReadIndex: Bool {return _storage._readIndex != nil}
  /// Clears the value of `readIndex`. Subsequent reads from it will return its default value.
//  public mutating func clearReadIndex() {_uniqueStorage()._readIndex = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// ！！！改前阅读以下备注
/// 历史原因，此处枚举目前被多个不同工程重复定义，要求不同工程都的枚举定义需要保持一致，否则将产生各种问题
/// 新增、编辑枚举需同步更新定义的文件有：
/// 1. git.byted.org/ee/apacana/kitc/idl/bear/server/suite_constants.thrift
/// 2. (注意和6.在同一个文件) enum DocType code.byted.org/lark/im-protobuf/idl/entities.proto
/// 3. code.byted.org/lark/rpc-interface/idl/bear/constants.thrift
/// 4. code.byted.org/lark_search/rpc-interface/idl/services/broker_migration.thrift
/// 5. code.byted.org/lark/rust-sdk/im-protobuf-sdk/client/basic/v1/entities.proto
/// 6. (注意和2.在同一个文件) enum DocFeed code.byted.org/lark/im-protobuf/idl/entities.proto
//public struct LarkNCExtensionPB_Entities_DocFeed {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// doc_feed_id
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
  /// 文档标题
//  public var title: String {
//    get {return _storage._title ?? String()}
//    set {_uniqueStorage()._title = newValue}
//  }
  /// Returns true if `title` has been explicitly set.
//  public var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
//  public mutating func clearTitle() {_uniqueStorage()._title = nil}
//
  /// Feed 文档类型
//  public var type: LarkNCExtensionPB_Entities_DocFeed.TypeEnum {
//    get {return _storage._type ?? .unknownType}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
  /// Feed 左侧图标 KEY
//  public var iconKey: String {
//    get {return _storage._iconKey ?? String()}
//    set {_uniqueStorage()._iconKey = newValue}
//  }
  /// Returns true if `iconKey` has been explicitly set.
//  public var hasIconKey: Bool {return _storage._iconKey != nil}
  /// Clears the value of `iconKey`. Subsequent reads from it will return its default value.
//  public mutating func clearIconKey() {_uniqueStorage()._iconKey = nil}
//
  /// 文档 URL
//  public var url: String {
//    get {return _storage._url ?? String()}
//    set {_uniqueStorage()._url = newValue}
//  }
  /// Returns true if `url` has been explicitly set.
//  public var hasURL: Bool {return _storage._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
//  public mutating func clearURL() {_uniqueStorage()._url = nil}
//
  /// Feed 创建时间
//  public var createTime: Int64 {
//    get {return _storage._createTime ?? 0}
//    set {_uniqueStorage()._createTime = newValue}
//  }
  /// Returns true if `createTime` has been explicitly set.
//  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}
//
  /// Feed 更新时间
//  public var updateTime: Int64 {
//    get {return _storage._updateTime ?? 0}
//    set {_uniqueStorage()._updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}
//
  /// 所有者 ID
//  public var ownerID: String {
//    get {return _storage._ownerID ?? String()}
//    set {_uniqueStorage()._ownerID = newValue}
//  }
  /// Returns true if `ownerID` has been explicitly set.
//  public var hasOwnerID: Bool {return _storage._ownerID != nil}
  /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
//  public mutating func clearOwnerID() {_uniqueStorage()._ownerID = nil}
//
  /// Feed 最新消息 ID
//  public var lastMessageID: String {
//    get {return _storage._lastMessageID ?? String()}
//    set {_uniqueStorage()._lastMessageID = newValue}
//  }
  /// Returns true if `lastMessageID` has been explicitly set.
//  public var hasLastMessageID: Bool {return _storage._lastMessageID != nil}
  /// Clears the value of `lastMessageID`. Subsequent reads from it will return its default value.
//  public mutating func clearLastMessageID() {_uniqueStorage()._lastMessageID = nil}
//
  /// 未读消息数
//  public var newMessageCount: Int32 {
//    get {return _storage._newMessageCount ?? 0}
//    set {_uniqueStorage()._newMessageCount = newValue}
//  }
  /// Returns true if `newMessageCount` has been explicitly set.
//  public var hasNewMessageCount: Bool {return _storage._newMessageCount != nil}
  /// Clears the value of `newMessageCount`. Subsequent reads from it will return its default value.
//  public mutating func clearNewMessageCount() {_uniqueStorage()._newMessageCount = nil}
//
  /// Feed 所有消息 ID
//  public var docMessageIds: [String] {
//    get {return _storage._docMessageIds}
//    set {_uniqueStorage()._docMessageIds = newValue}
//  }
//
  /// 是否外部文档
//  public var isCrossTenant: Bool {
//    get {return _storage._isCrossTenant ?? false}
//    set {_uniqueStorage()._isCrossTenant = newValue}
//  }
  /// Returns true if `isCrossTenant` has been explicitly set.
//  public var hasIsCrossTenant: Bool {return _storage._isCrossTenant != nil}
  /// Clears the value of `isCrossTenant`. Subsequent reads from it will return its default value.
//  public mutating func clearIsCrossTenant() {_uniqueStorage()._isCrossTenant = nil}
//
  /// 是否提醒
//  public var isRemind: Bool {
//    get {return _storage._isRemind ?? true}
//    set {_uniqueStorage()._isRemind = newValue}
//  }
  /// Returns true if `isRemind` has been explicitly set.
//  public var hasIsRemind: Bool {return _storage._isRemind != nil}
  /// Clears the value of `isRemind`. Subsequent reads from it will return its default value.
//  public mutating func clearIsRemind() {_uniqueStorage()._isRemind = nil}
//
  /// 未读消息 ID
//  public var unreadMessageIds: [Int64] {
//    get {return _storage._unreadMessageIds}
//    set {_uniqueStorage()._unreadMessageIds = newValue}
//  }
//
  /// 文档 Token
//  public var token: String {
//    get {return _storage._token ?? String()}
//    set {_uniqueStorage()._token = newValue}
//  }
  /// Returns true if `token` has been explicitly set.
//  public var hasToken: Bool {return _storage._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
//  public mutating func clearToken() {_uniqueStorage()._token = nil}
//
  /// Feed 文档类型 字符串
//  public var strType: String {
//    get {return _storage._strType ?? String()}
//    set {_uniqueStorage()._strType = newValue}
//  }
  /// Returns true if `strType` has been explicitly set.
//  public var hasStrType: Bool {return _storage._strType != nil}
  /// Clears the value of `strType`. Subsequent reads from it will return its default value.
//  public mutating func clearStrType() {_uniqueStorage()._strType = nil}
//
  /// 自定义icon
//  public var icon: LarkNCExtensionPB_Entities_Icon {
//    get {return _storage._icon ?? LarkNCExtensionPB_Entities_Icon()}
//    set {_uniqueStorage()._icon = newValue}
//  }
  /// Returns true if `icon` has been explicitly set.
//  public var hasIcon: Bool {return _storage._icon != nil}
  /// Clears the value of `icon`. Subsequent reads from it will return its default value.
//  public mutating func clearIcon() {_uniqueStorage()._icon = nil}
//
  /// 未读消息版本号
//  public var newMessageCountVer: Int32 {
//    get {return _storage._newMessageCountVer ?? 0}
//    set {_uniqueStorage()._newMessageCountVer = newValue}
//  }
  /// Returns true if `newMessageCountVer` has been explicitly set.
//  public var hasNewMessageCountVer: Bool {return _storage._newMessageCountVer != nil}
  /// Clears the value of `newMessageCountVer`. Subsequent reads from it will return its default value.
//  public mutating func clearNewMessageCountVer() {_uniqueStorage()._newMessageCountVer = nil}
//
  /// 是否不提醒
//  public var isNotRemind: Bool {
//    get {return _storage._isNotRemind ?? false}
//    set {_uniqueStorage()._isNotRemind = newValue}
//  }
  /// Returns true if `isNotRemind` has been explicitly set.
//  public var hasIsNotRemind: Bool {return _storage._isNotRemind != nil}
  /// Clears the value of `isNotRemind`. Subsequent reads from it will return its default value.
//  public mutating func clearIsNotRemind() {_uniqueStorage()._isNotRemind = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
  /// Feed 文档类型
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownType // = 0
//
    /// doc
//    case doc // = 1
//
    /// sheet
//    case sheet // = 2
//
    /// bitable
//    case bitable // = 3
//
    /// mindnote
//    case mindnote // = 4
//
    /// file
//    case file // = 5
//
    /// slide
//    case slide // = 6
//    case wiki // = 7
//    case docx // = 8
//
    /// space folder
//    case folder // = 9
//
    /// wiki 2.0 catalog
//    case catalog // = 10
//
//    public init() {
//      self = .unknownType
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownType
//      case 1: self = .doc
//      case 2: self = .sheet
//      case 3: self = .bitable
//      case 4: self = .mindnote
//      case 5: self = .file
//      case 6: self = .slide
//      case 7: self = .wiki
//      case 8: self = .docx
//      case 9: self = .folder
//      case 10: self = .catalog
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownType: return 0
//      case .doc: return 1
//      case .sheet: return 2
//      case .bitable: return 3
//      case .mindnote: return 4
//      case .file: return 5
//      case .slide: return 6
//      case .wiki: return 7
//      case .docx: return 8
//      case .folder: return 9
//      case .catalog: return 10
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_DocFeed.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_DocFeedSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 是否提醒
//  public var isRemind: Bool {
//    get {return _isRemind ?? true}
//    set {_isRemind = newValue}
//  }
  /// Returns true if `isRemind` has been explicitly set.
//  public var hasIsRemind: Bool {return self._isRemind != nil}
  /// Clears the value of `isRemind`. Subsequent reads from it will return its default value.
//  public mutating func clearIsRemind() {self._isRemind = nil}
//
  /// 只用于push下发
//  public var updateTime: Int64 {
//    get {return _updateTime ?? 0}
//    set {_updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {self._updateTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum Field: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//    case isRemind // = 1
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .isRemind
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .isRemind: return 1
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _isRemind: Bool? = nil
//  fileprivate var _updateTime: Int64? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_DocFeedSetting.Field: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 数据库中 dav_user 表的 extra 信息
//public struct LarkNCExtensionPB_Entities_CaldavUserExtra {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var caldavUserExtraItems: [LarkNCExtensionPB_Entities_CaldavUserExtraItem] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

/// extra 一条条目包含的信息
//public struct LarkNCExtensionPB_Entities_CaldavUserExtraItem {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 每个密码都会有一个 id 来唯一标识
//  public var passwordID: String {
//    get {return _passwordID ?? String()}
//    set {_passwordID = newValue}
//  }
  /// Returns true if `passwordID` has been explicitly set.
//  public var hasPasswordID: Bool {return self._passwordID != nil}
  /// Clears the value of `passwordID`. Subsequent reads from it will return its default value.
//  public mutating func clearPasswordID() {self._passwordID = nil}
//
  /// 用户为密码定义的名称
//  public var passwordName: String {
//    get {return _passwordName ?? String()}
//    set {_passwordName = newValue}
//  }
  /// Returns true if `passwordName` has been explicitly set.
//  public var hasPasswordName: Bool {return self._passwordName != nil}
  /// Clears the value of `passwordName`. Subsequent reads from it will return its default value.
//  public mutating func clearPasswordName() {self._passwordName = nil}
//
  /// 密码
//  public var password: String {
//    get {return _password ?? String()}
//    set {_password = newValue}
//  }
  /// Returns true if `password` has been explicitly set.
//  public var hasPassword: Bool {return self._password != nil}
  /// Clears the value of `password`. Subsequent reads from it will return its default value.
//  public mutating func clearPassword() {self._password = nil}
//
  /// 密码的创建时间
//  public var passwordCreateTime: Int64 {
//    get {return _passwordCreateTime ?? 0}
//    set {_passwordCreateTime = newValue}
//  }
  /// Returns true if `passwordCreateTime` has been explicitly set.
//  public var hasPasswordCreateTime: Bool {return self._passwordCreateTime != nil}
  /// Clears the value of `passwordCreateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearPasswordCreateTime() {self._passwordCreateTime = nil}
//
  /// 密码最后的使用时间
//  public var passwordLastUpdateTime: Int64 {
//    get {return _passwordLastUpdateTime ?? 0}
//    set {_passwordLastUpdateTime = newValue}
//  }
  /// Returns true if `passwordLastUpdateTime` has been explicitly set.
//  public var hasPasswordLastUpdateTime: Bool {return self._passwordLastUpdateTime != nil}
  /// Clears the value of `passwordLastUpdateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearPasswordLastUpdateTime() {self._passwordLastUpdateTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _passwordID: String? = nil
//  fileprivate var _passwordName: String? = nil
//  fileprivate var _password: String? = nil
//  fileprivate var _passwordCreateTime: Int64? = nil
//  fileprivate var _passwordLastUpdateTime: Int64? = nil
//}

/// 用于返回给客户端的 caldav password 集合
//public struct LarkNCExtensionPB_Entities_CaldavPasswordItem {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 每个密码都会有一个 id 来唯一标识
//  public var passwordID: String {
//    get {return _passwordID ?? String()}
//    set {_passwordID = newValue}
//  }
  /// Returns true if `passwordID` has been explicitly set.
//  public var hasPasswordID: Bool {return self._passwordID != nil}
  /// Clears the value of `passwordID`. Subsequent reads from it will return its default value.
//  public mutating func clearPasswordID() {self._passwordID = nil}
//
  /// 用户为密码定义的名称
//  public var passwordName: String {
//    get {return _passwordName ?? String()}
//    set {_passwordName = newValue}
//  }
  /// Returns true if `passwordName` has been explicitly set.
//  public var hasPasswordName: Bool {return self._passwordName != nil}
  /// Clears the value of `passwordName`. Subsequent reads from it will return its default value.
//  public mutating func clearPasswordName() {self._passwordName = nil}
//
  /// 密码的创建时间
//  public var passwordCreateTime: Int64 {
//    get {return _passwordCreateTime ?? 0}
//    set {_passwordCreateTime = newValue}
//  }
  /// Returns true if `passwordCreateTime` has been explicitly set.
//  public var hasPasswordCreateTime: Bool {return self._passwordCreateTime != nil}
  /// Clears the value of `passwordCreateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearPasswordCreateTime() {self._passwordCreateTime = nil}
//
  /// 密码最后的使用时间
//  public var passwordLastUpdateTime: Int64 {
//    get {return _passwordLastUpdateTime ?? 0}
//    set {_passwordLastUpdateTime = newValue}
//  }
  /// Returns true if `passwordLastUpdateTime` has been explicitly set.
//  public var hasPasswordLastUpdateTime: Bool {return self._passwordLastUpdateTime != nil}
  /// Clears the value of `passwordLastUpdateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearPasswordLastUpdateTime() {self._passwordLastUpdateTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _passwordID: String? = nil
//  fileprivate var _passwordName: String? = nil
//  fileprivate var _passwordCreateTime: Int64? = nil
//  fileprivate var _passwordLastUpdateTime: Int64? = nil
//}

public struct LarkNCExtensionPB_Entities_Reminder {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var calendarEventID: String {
    get {return _calendarEventID ?? "0"}
    set {_calendarEventID = newValue}
  }
  /// Returns true if `calendarEventID` has been explicitly set.
//  public var hasCalendarEventID: Bool {return self._calendarEventID != nil}
  /// Clears the value of `calendarEventID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarEventID() {self._calendarEventID = nil}

  public var minutes: Int32 {
    get {return _minutes ?? 0}
    set {_minutes = newValue}
  }
  /// Returns true if `minutes` has been explicitly set.
  public var hasMinutes: Bool {return self._minutes != nil}
  /// Clears the value of `minutes`. Subsequent reads from it will return its default value.
//  public mutating func clearMinutes() {self._minutes = nil}

  public var method: LarkNCExtensionPB_Entities_Reminder.Method {
    get {return _method ?? .default}
    set {_method = newValue}
  }
  /// Returns true if `method` has been explicitly set.
//  public var hasMethod: Bool {return self._method != nil}
  /// Clears the value of `method`. Subsequent reads from it will return its default value.
//  public mutating func clearMethod() {self._method = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum Method: LarkHTTP.Enum {
    public typealias RawValue = Int
    case `default` // = 1
    case email // = 2
    case popup // = 3
    case sms // = 4

    public init() {
      self = .default
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .default
      case 2: self = .email
      case 3: self = .popup
      case 4: self = .sms
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .default: return 1
      case .email: return 2
      case .popup: return 3
      case .sms: return 4
      }
    }

  }

  public init() {}

  fileprivate var _calendarEventID: String? = nil
  fileprivate var _minutes: Int32? = nil
  fileprivate var _method: LarkNCExtensionPB_Entities_Reminder.Method? = nil
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_Reminder.Method: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_CalendarResourceInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var capacity: Int32 {
    get {return _capacity ?? 0}
    set {_capacity = newValue}
  }
  /// Returns true if `capacity` has been explicitly set.
  public var hasCapacity: Bool {return self._capacity != nil}
  /// Clears the value of `capacity`. Subsequent reads from it will return its default value.
//  public mutating func clearCapacity() {self._capacity = nil}

  public var cityName: String {
    get {return _cityName ?? String()}
    set {_cityName = newValue}
  }
  /// Returns true if `cityName` has been explicitly set.
//  public var hasCityName: Bool {return self._cityName != nil}
  /// Clears the value of `cityName`. Subsequent reads from it will return its default value.
//  public mutating func clearCityName() {self._cityName = nil}

  public var buildingName: String {
    get {return _buildingName ?? String()}
    set {_buildingName = newValue}
  }
  /// Returns true if `buildingName` has been explicitly set.
//  public var hasBuildingName: Bool {return self._buildingName != nil}
  /// Clears the value of `buildingName`. Subsequent reads from it will return its default value.
//  public mutating func clearBuildingName() {self._buildingName = nil}

  public var resourceName: String {
    get {return _resourceName ?? String()}
    set {_resourceName = newValue}
  }
  /// Returns true if `resourceName` has been explicitly set.
//  public var hasResourceName: Bool {return self._resourceName != nil}
  /// Clears the value of `resourceName`. Subsequent reads from it will return its default value.
//  public mutating func clearResourceName() {self._resourceName = nil}

  public var floorName: String {
    get {return _floorName ?? String()}
    set {_floorName = newValue}
  }
  /// Returns true if `floorName` has been explicitly set.
//  public var hasFloorName: Bool {return self._floorName != nil}
  /// Clears the value of `floorName`. Subsequent reads from it will return its default value.
//  public mutating func clearFloorName() {self._floorName = nil}

  public var isDisabled: Bool {
    get {return _isDisabled ?? false}
    set {_isDisabled = newValue}
  }
  /// Returns true if `isDisabled` has been explicitly set.
//  public var hasIsDisabled: Bool {return self._isDisabled != nil}
  /// Clears the value of `isDisabled`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDisabled() {self._isDisabled = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _capacity: Int32? = nil
  fileprivate var _cityName: String? = nil
  fileprivate var _buildingName: String? = nil
  fileprivate var _resourceName: String? = nil
  fileprivate var _floorName: String? = nil
  fileprivate var _isDisabled: Bool? = nil
}

public struct LarkNCExtensionPB_Entities_Calendar {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id ?? "0"}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var summary: String {
    get {return _storage._summary ?? String()}
    set {_uniqueStorage()._summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  public var hasSummary: Bool {return _storage._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
//  public mutating func clearSummary() {_uniqueStorage()._summary = nil}

  public var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  /// 在该日历上创建日程的默认时区
  public var defaultTimezone: String {
    get {return _storage._defaultTimezone ?? String()}
    set {_uniqueStorage()._defaultTimezone = newValue}
  }
  /// Returns true if `defaultTimezone` has been explicitly set.
//  public var hasDefaultTimezone: Bool {return _storage._defaultTimezone != nil}
  /// Clears the value of `defaultTimezone`. Subsequent reads from it will return its default value.
//  public mutating func clearDefaultTimezone() {_uniqueStorage()._defaultTimezone = nil}

  public var creatorUserID: String {
    get {return _storage._creatorUserID ?? "0"}
    set {_uniqueStorage()._creatorUserID = newValue}
  }
  /// Returns true if `creatorUserID` has been explicitly set.
//  public var hasCreatorUserID: Bool {return _storage._creatorUserID != nil}
  /// Clears the value of `creatorUserID`. Subsequent reads from it will return its default value.
//  public mutating func clearCreatorUserID() {_uniqueStorage()._creatorUserID = nil}

  public var createTime: Int64 {
    get {return _storage._createTime ?? 0}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  public var updateTime: Int64 {
    get {return _storage._updateTime ?? 0}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  ///对该日历的访问权限, 老版本，4.6之后不再使用，share_options代替
  public var defaultRole: LarkNCExtensionPB_Entities_Calendar.AccessRole {
    get {return _storage._defaultRole ?? .freeBusyReader}
    set {_uniqueStorage()._defaultRole = newValue}
  }
  /// Returns true if `defaultRole` has been explicitly set.
//  public var hasDefaultRole: Bool {return _storage._defaultRole != nil}
  /// Clears the value of `defaultRole`. Subsequent reads from it will return its default value.
//  public mutating func clearDefaultRole() {_uniqueStorage()._defaultRole = nil}

  ///日历类型
  public var type: LarkNCExtensionPB_Entities_Calendar.TypeEnum {
    get {return _storage._type ?? .other}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}

  public var accessRole: LarkNCExtensionPB_Entities_Calendar.AccessRole {
    get {return _storage._accessRole ?? .freeBusyReader}
    set {_uniqueStorage()._accessRole = newValue}
  }
  /// Returns true if `accessRole` has been explicitly set.
//  public var hasAccessRole: Bool {return _storage._accessRole != nil}
  /// Clears the value of `accessRole`. Subsequent reads from it will return its default value.
//  public mutating func clearAccessRole() {_uniqueStorage()._accessRole = nil}

  ///自己对日历的状态，分享过来可以接受拒绝等
  public var status: LarkNCExtensionPB_Entities_Calendar.Status {
    get {return _storage._status ?? .default}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var foregroundColor: Int32 {
    get {return _storage._foregroundColor ?? 0}
    set {_uniqueStorage()._foregroundColor = newValue}
  }
  /// Returns true if `foregroundColor` has been explicitly set.
//  public var hasForegroundColor: Bool {return _storage._foregroundColor != nil}
  /// Clears the value of `foregroundColor`. Subsequent reads from it will return its default value.
//  public mutating func clearForegroundColor() {_uniqueStorage()._foregroundColor = nil}

  public var backgroundColor: Int32 {
    get {return _storage._backgroundColor ?? 0}
    set {_uniqueStorage()._backgroundColor = newValue}
  }
  /// Returns true if `backgroundColor` has been explicitly set.
  public var hasBackgroundColor: Bool {return _storage._backgroundColor != nil}
  /// Clears the value of `backgroundColor`. Subsequent reads from it will return its default value.
  public mutating func clearBackgroundColor() {_uniqueStorage()._backgroundColor = nil}

  public var weight: Int32 {
    get {return _storage._weight ?? 0}
    set {_uniqueStorage()._weight = newValue}
  }
  /// Returns true if `weight` has been explicitly set.
//  public var hasWeight: Bool {return _storage._weight != nil}
  /// Clears the value of `weight`. Subsequent reads from it will return its default value.
//  public mutating func clearWeight() {_uniqueStorage()._weight = nil}

  public var isDefault: Bool {
    get {return _storage._isDefault ?? false}
    set {_uniqueStorage()._isDefault = newValue}
  }
  /// Returns true if `isDefault` has been explicitly set.
//  public var hasIsDefault: Bool {return _storage._isDefault != nil}
  /// Clears the value of `isDefault`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDefault() {_uniqueStorage()._isDefault = nil}

  public var isVisible: Bool {
    get {return _storage._isVisible ?? true}
    set {_uniqueStorage()._isVisible = newValue}
  }
  /// Returns true if `isVisible` has been explicitly set.
//  public var hasIsVisible: Bool {return _storage._isVisible != nil}
  /// Clears the value of `isVisible`. Subsequent reads from it will return its default value.
//  public mutating func clearIsVisible() {_uniqueStorage()._isVisible = nil}

  public var isPrimary: Bool {
    get {return _storage._isPrimary ?? false}
    set {_uniqueStorage()._isPrimary = newValue}
  }
  /// Returns true if `isPrimary` has been explicitly set.
//  public var hasIsPrimary: Bool {return _storage._isPrimary != nil}
  /// Clears the value of `isPrimary`. Subsequent reads from it will return its default value.
//  public mutating func clearIsPrimary() {_uniqueStorage()._isPrimary = nil}

  public var isDeleted: Bool {
    get {return _storage._isDeleted ?? false}
    set {_uniqueStorage()._isDeleted = newValue}
  }
  /// Returns true if `isDeleted` has been explicitly set.
//  public var hasIsDeleted: Bool {return _storage._isDeleted != nil}
  /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDeleted() {_uniqueStorage()._isDeleted = nil}

  ///默认的提示时间
  public var defaultReminders: String {
    get {return _storage._defaultReminders ?? String()}
    set {_uniqueStorage()._defaultReminders = newValue}
  }
  /// Returns true if `defaultReminders` has been explicitly set.
//  public var hasDefaultReminders: Bool {return _storage._defaultReminders != nil}
  /// Clears the value of `defaultReminders`. Subsequent reads from it will return its default value.
//  public mutating func clearDefaultReminders() {_uniqueStorage()._defaultReminders = nil}

  public var members: [LarkNCExtensionPB_Entities_CalendarMember] {
    get {return _storage._members}
    set {_uniqueStorage()._members = newValue}
  }

  public var email: String {
    get {return _storage._email ?? String()}
    set {_uniqueStorage()._email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  public var hasEmail: Bool {return _storage._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
//  public mutating func clearEmail() {_uniqueStorage()._email = nil}

  public var isSynced: Bool {
    get {return _storage._isSynced ?? true}
    set {_uniqueStorage()._isSynced = newValue}
  }
  /// Returns true if `isSynced` has been explicitly set.
//  public var hasIsSynced: Bool {return _storage._isSynced != nil}
  /// Clears the value of `isSynced`. Subsequent reads from it will return its default value.
//  public mutating func clearIsSynced() {_uniqueStorage()._isSynced = nil}

  public var isAccept: Bool {
    get {return _storage._isAccept ?? false}
    set {_uniqueStorage()._isAccept = newValue}
  }
  /// Returns true if `isAccept` has been explicitly set.
//  public var hasIsAccept: Bool {return _storage._isAccept != nil}
  /// Clears the value of `isAccept`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAccept() {_uniqueStorage()._isAccept = nil}

  public var isSubscriber: Bool {
    get {return _storage._isSubscriber ?? false}
    set {_uniqueStorage()._isSubscriber = newValue}
  }
  /// Returns true if `isSubscriber` has been explicitly set.
//  public var hasIsSubscriber: Bool {return _storage._isSubscriber != nil}
  /// Clears the value of `isSubscriber`. Subsequent reads from it will return its default value.
//  public mutating func clearIsSubscriber() {_uniqueStorage()._isSubscriber = nil}

  public var isPublic: Bool {
    get {return _storage._isPublic ?? false}
    set {_uniqueStorage()._isPublic = newValue}
  }
  /// Returns true if `isPublic` has been explicitly set.
  public var hasIsPublic: Bool {return _storage._isPublic != nil}
  /// Clears the value of `isPublic`. Subsequent reads from it will return its default value.
//  public mutating func clearIsPublic() {_uniqueStorage()._isPublic = nil}

  public var note: String {
    get {return _storage._note ?? String()}
    set {_uniqueStorage()._note = newValue}
  }
  /// Returns true if `note` has been explicitly set.
  public var hasNote: Bool {return _storage._note != nil}
  /// Clears the value of `note`. Subsequent reads from it will return its default value.
//  public mutating func clearNote() {_uniqueStorage()._note = nil}

  public var calendarResourceInfo: LarkNCExtensionPB_Entities_CalendarResourceInfo {
    get {return _storage._calendarResourceInfo ?? LarkNCExtensionPB_Entities_CalendarResourceInfo()}
    set {_uniqueStorage()._calendarResourceInfo = newValue}
  }
  /// Returns true if `calendarResourceInfo` has been explicitly set.
//  public var hasCalendarResourceInfo: Bool {return _storage._calendarResourceInfo != nil}
  /// Clears the value of `calendarResourceInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarResourceInfo() {_uniqueStorage()._calendarResourceInfo = nil}

  public var isAllStaff: Bool {
    get {return _storage._isAllStaff ?? false}
    set {_uniqueStorage()._isAllStaff = newValue}
  }
  /// Returns true if `isAllStaff` has been explicitly set.
//  public var hasIsAllStaff: Bool {return _storage._isAllStaff != nil}
  /// Clears the value of `isAllStaff`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAllStaff() {_uniqueStorage()._isAllStaff = nil}

  public var externalAccount: LarkNCExtensionPB_Entities_ExternalAccount {
    get {return _storage._externalAccount ?? LarkNCExtensionPB_Entities_ExternalAccount()}
    set {_uniqueStorage()._externalAccount = newValue}
  }
  /// Returns true if `externalAccount` has been explicitly set.
//  public var hasExternalAccount: Bool {return _storage._externalAccount != nil}
  /// Clears the value of `externalAccount`. Subsequent reads from it will return its default value.
//  public mutating func clearExternalAccount() {_uniqueStorage()._externalAccount = nil}

  public var workHourSetting: LarkNCExtensionPB_Entities_WorkHourSetting {
    get {return _storage._workHourSetting ?? LarkNCExtensionPB_Entities_WorkHourSetting()}
    set {_uniqueStorage()._workHourSetting = newValue}
  }
  /// Returns true if `workHourSetting` has been explicitly set.
//  public var hasWorkHourSetting: Bool {return _storage._workHourSetting != nil}
  /// Clears the value of `workHourSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearWorkHourSetting() {_uniqueStorage()._workHourSetting = nil}

  public var visibilityProperty: Int32 {
    get {return _storage._visibilityProperty ?? 0}
    set {_uniqueStorage()._visibilityProperty = newValue}
  }
  /// Returns true if `visibilityProperty` has been explicitly set.
//  public var hasVisibilityProperty: Bool {return _storage._visibilityProperty != nil}
  /// Clears the value of `visibilityProperty`. Subsequent reads from it will return its default value.
//  public mutating func clearVisibilityProperty() {_uniqueStorage()._visibilityProperty = nil}

  /// 工作时区
  public var timezone: String {
    get {return _storage._timezone ?? String()}
    set {_uniqueStorage()._timezone = newValue}
  }
  /// Returns true if `timezone` has been explicitly set.
  public var hasTimezone: Bool {return _storage._timezone != nil}
  /// Clears the value of `timezone`. Subsequent reads from it will return its default value.
//  public mutating func clearTimezone() {_uniqueStorage()._timezone = nil}

  ///  日程UI描述 Deprecated
  public var calendarEventSchema: Data {
    get {return _storage._calendarEventSchema ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._calendarEventSchema = newValue}
  }
  /// Returns true if `calendarEventSchema` has been explicitly set.
  public var hasCalendarEventSchema: Bool {return _storage._calendarEventSchema != nil}
  /// Clears the value of `calendarEventSchema`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarEventSchema() {_uniqueStorage()._calendarEventSchema = nil}

  public var calendarSchema: Data {
    get {return _storage._calendarSchema ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._calendarSchema = newValue}
  }
  /// Returns true if `calendarSchema` has been explicitly set.
//  public var hasCalendarSchema: Bool {return _storage._calendarSchema != nil}
  /// Clears the value of `calendarSchema`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarSchema() {_uniqueStorage()._calendarSchema = nil}

  /// 关联外部应用数据
  public var schemaExtraData: Data {
    get {return _storage._schemaExtraData ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._schemaExtraData = newValue}
  }
  /// Returns true if `schemaExtraData` has been explicitly set.
//  public var hasSchemaExtraData: Bool {return _storage._schemaExtraData != nil}
  /// Clears the value of `schemaExtraData`. Subsequent reads from it will return its default value.
//  public mutating func clearSchemaExtraData() {_uniqueStorage()._schemaExtraData = nil}

  /// 日程UI描述
  public var calendarEventSchemaV2: Data {
    get {return _storage._calendarEventSchemaV2 ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._calendarEventSchemaV2 = newValue}
  }
  /// Returns true if `calendarEventSchemaV2` has been explicitly set.
//  public var hasCalendarEventSchemaV2: Bool {return _storage._calendarEventSchemaV2 != nil}
  /// Clears the value of `calendarEventSchemaV2`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarEventSchemaV2() {_uniqueStorage()._calendarEventSchemaV2 = nil}

  ///如果是离职者主日历，该字段存在
  public var successorUserID: String {
    get {return _storage._successorUserID ?? String()}
    set {_uniqueStorage()._successorUserID = newValue}
  }
  /// Returns true if `successorUserID` has been explicitly set.
//  public var hasSuccessorUserID: Bool {return _storage._successorUserID != nil}
  /// Clears the value of `successorUserID`. Subsequent reads from it will return its default value.
//  public mutating func clearSuccessorUserID() {_uniqueStorage()._successorUserID = nil}

  /// 日历相关的默认权限设置
  public var shareOptions: LarkNCExtensionPB_Entities_Calendar.CalendarShareOptions {
    get {return _storage._shareOptions ?? LarkNCExtensionPB_Entities_Calendar.CalendarShareOptions()}
    set {_uniqueStorage()._shareOptions = newValue}
  }
  /// Returns true if `shareOptions` has been explicitly set.
//  public var hasShareOptions: Bool {return _storage._shareOptions != nil}
  /// Clears the value of `shareOptions`. Subsequent reads from it will return its default value.
//  public mutating func clearShareOptions() {_uniqueStorage()._shareOptions = nil}

  /// 分享信息
  public var shareInfo: LarkNCExtensionPB_Entities_Calendar.CalendarShareInfo {
    get {return _storage._shareInfo ?? LarkNCExtensionPB_Entities_Calendar.CalendarShareInfo()}
    set {_uniqueStorage()._shareInfo = newValue}
  }
  /// Returns true if `shareInfo` has been explicitly set.
  public var hasShareInfo: Bool {return _storage._shareInfo != nil}
  /// Clears the value of `shareInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearShareInfo() {_uniqueStorage()._shareInfo = nil}

  /// 是否外部日历
  public var isCrossTenant: Bool {
    get {return _storage._isCrossTenant ?? false}
    set {_uniqueStorage()._isCrossTenant = newValue}
  }
  /// Returns true if `isCrossTenant` has been explicitly set.
  public var hasIsCrossTenant: Bool {return _storage._isCrossTenant != nil}
  /// Clears the value of `isCrossTenant`. Subsequent reads from it will return its default value.
//  public mutating func clearIsCrossTenant() {_uniqueStorage()._isCrossTenant = nil}

  /// 日历的拥有者,
  public var calendarOwnerID: String {
    get {return _storage._calendarOwnerID ?? String()}
    set {_uniqueStorage()._calendarOwnerID = newValue}
  }
  /// Returns true if `calendarOwnerID` has been explicitly set.
  public var hasCalendarOwnerID: Bool {return _storage._calendarOwnerID != nil}
  /// Clears the value of `calendarOwnerID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarOwnerID() {_uniqueStorage()._calendarOwnerID = nil}

  ///日历封面图片信息
  public var coverImage: LarkNCExtensionPB_Entities_ImImage {
    get {return _storage._coverImage ?? LarkNCExtensionPB_Entities_ImImage()}
    set {_uniqueStorage()._coverImage = newValue}
  }
  /// Returns true if `coverImage` has been explicitly set.
  public var hasCoverImage: Bool {return _storage._coverImage != nil}
  /// Clears the value of `coverImage`. Subsequent reads from it will return its default value.
//  public mutating func clearCoverImage() {_uniqueStorage()._coverImage = nil}

  /// 日历的租户id
  public var calendarTenantID: String {
    get {return _storage._calendarTenantID ?? String()}
    set {_uniqueStorage()._calendarTenantID = newValue}
  }
  /// Returns true if `calendarTenantID` has been explicitly set.
//  public var hasCalendarTenantID: Bool {return _storage._calendarTenantID != nil}
  /// Clears the value of `calendarTenantID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarTenantID() {_uniqueStorage()._calendarTenantID = nil}

  public var officialType: LarkNCExtensionPB_Entities_Calendar.OfficialType {
    get {return _storage._officialType ?? .notOfficial}
    set {_uniqueStorage()._officialType = newValue}
  }
  /// Returns true if `officialType` has been explicitly set.
//  public var hasOfficialType: Bool {return _storage._officialType != nil}
  /// Clears the value of `officialType`. Subsequent reads from it will return its default value.
//  public mutating func clearOfficialType() {_uniqueStorage()._officialType = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum TypeEnum: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownType // = 0
    case primary // = 1
    case other // = 2
    case google // = 3
    case resources // = 4
    case googleResources // = 5
    case dismissed // = 6
    case email // = 7
    case exchange // = 8

    /// 活动日历
    case activity // = 9

    public init() {
      self = .unknownType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownType
      case 1: self = .primary
      case 2: self = .other
      case 3: self = .google
      case 4: self = .resources
      case 5: self = .googleResources
      case 6: self = .dismissed
      case 7: self = .email
      case 8: self = .exchange
      case 9: self = .activity
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownType: return 0
      case .primary: return 1
      case .other: return 2
      case .google: return 3
      case .resources: return 4
      case .googleResources: return 5
      case .dismissed: return 6
      case .email: return 7
      case .exchange: return 8
      case .activity: return 9
      }
    }

  }

  public enum AccessRole: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case freeBusyReader // = 1
    case reader // = 2
    case writer // = 3
    case owner // = 4

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .freeBusyReader
      case 2: self = .reader
      case 3: self = .writer
      case 4: self = .owner
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .freeBusyReader: return 1
      case .reader: return 2
      case .writer: return 3
      case .owner: return 4
      }
    }

  }

  public enum Status: LarkHTTP.Enum {
    public typealias RawValue = Int
    case `default` // = 1
    case accepted // = 2
    case declined // = 3
    case invited // = 4
    case removed // = 5

    public init() {
      self = .default
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .default
      case 2: self = .accepted
      case 3: self = .declined
      case 4: self = .invited
      case 5: self = .removed
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .default: return 1
      case .accepted: return 2
      case .declined: return 3
      case .invited: return 4
      case .removed: return 5
      }
    }

  }

  enum VisibilityProperty: LarkHTTP.Enum {
    public typealias RawValue = Int

    /// pc_normal_view
    case normalView // = 1

    /// pc_meeting_view
    case meetingView // = 2

    /// pc_today_preview
    case todayFeedView // = 4
    case mobileNormalView // = 8
    case mobileMeetingView // = 16
    case webNormalView // = 32
    case webMeetingView // = 64

    public init() {
      self = .normalView
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .normalView
      case 2: self = .meetingView
      case 4: self = .todayFeedView
      case 8: self = .mobileNormalView
      case 16: self = .mobileMeetingView
      case 32: self = .webNormalView
      case 64: self = .webMeetingView
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .normalView: return 1
      case .meetingView: return 2
      case .todayFeedView: return 4
      case .mobileNormalView: return 8
      case .mobileMeetingView: return 16
      case .webNormalView: return 32
      case .webMeetingView: return 64
      }
    }

  }

  /// bitmap
  enum SubscriptionType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case subNormalView // = 1
    case subMeetingView // = 2

    public init() {
      self = .subNormalView
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .subNormalView
      case 2: self = .subMeetingView
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .subNormalView: return 1
      case .subMeetingView: return 2
      }
    }

  }

  public enum ShareOption: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknownShareOpt // = 0

    /// 不可被订阅
    case shareOptPrivate // = 5

    /// 可被订阅，只可查看忙闲
    case shareOptFreeBusyReader // = 10

    /// 可被订阅，可以查看详情
    case shareOptReader // = 15

    /// 可被订阅，拥有该权限的共享成员可以编辑日历及日程信息
    case shareOptWriter // = 20

    /// 可被订阅，拥有该权限的共享成员：1.拥有WRITER权限，2.可以设置日历共享成员
    case shareOptOwner // = 25

    public init() {
      self = .unknownShareOpt
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownShareOpt
      case 5: self = .shareOptPrivate
      case 10: self = .shareOptFreeBusyReader
      case 15: self = .shareOptReader
      case 20: self = .shareOptWriter
      case 25: self = .shareOptOwner
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownShareOpt: return 0
      case .shareOptPrivate: return 5
      case .shareOptFreeBusyReader: return 10
      case .shareOptReader: return 15
      case .shareOptWriter: return 20
      case .shareOptOwner: return 25
      }
    }

  }

  ///来自官方的类型
  public enum OfficialType: LarkHTTP.Enum {
    public typealias RawValue = Int

    ///非官方
    case notOfficial // = 0

    ///字节
    case bytedance // = 1

    public init() {
      self = .notOfficial
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .notOfficial
      case 1: self = .bytedance
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .notOfficial: return 0
      case .bytedance: return 1
      }
    }

  }

  /// 日历默认访问权限
  public struct CalendarShareOptions {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// 租户内默认访问权限
    public var defaultShareOption: LarkNCExtensionPB_Entities_Calendar.ShareOption {
      get {return _defaultShareOption ?? .unknownShareOpt}
      set {_defaultShareOption = newValue}
    }
    /// Returns true if `defaultShareOption` has been explicitly set.
//    public var hasDefaultShareOption: Bool {return self._defaultShareOption != nil}
    /// Clears the value of `defaultShareOption`. Subsequent reads from it will return its default value.
//    public mutating func clearDefaultShareOption() {self._defaultShareOption = nil}

    /// 租户外默认访问权限
    public var crossDefaultShareOption: LarkNCExtensionPB_Entities_Calendar.ShareOption {
      get {return _crossDefaultShareOption ?? .unknownShareOpt}
      set {_crossDefaultShareOption = newValue}
    }
    /// Returns true if `crossDefaultShareOption` has been explicitly set.
//    public var hasCrossDefaultShareOption: Bool {return self._crossDefaultShareOption != nil}
    /// Clears the value of `crossDefaultShareOption`. Subsequent reads from it will return its default value.
//    public mutating func clearCrossDefaultShareOption() {self._crossDefaultShareOption = nil}

    /// 租户外最高访问权限
    public var crossTopShareOption: LarkNCExtensionPB_Entities_Calendar.ShareOption {
      get {return _crossTopShareOption ?? .unknownShareOpt}
      set {_crossTopShareOption = newValue}
    }
    /// Returns true if `crossTopShareOption` has been explicitly set.
//    public var hasCrossTopShareOption: Bool {return self._crossTopShareOption != nil}
    /// Clears the value of `crossTopShareOption`. Subsequent reads from it will return its default value.
//    public mutating func clearCrossTopShareOption() {self._crossTopShareOption = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _defaultShareOption: LarkNCExtensionPB_Entities_Calendar.ShareOption? = nil
    fileprivate var _crossDefaultShareOption: LarkNCExtensionPB_Entities_Calendar.ShareOption? = nil
    fileprivate var _crossTopShareOption: LarkNCExtensionPB_Entities_Calendar.ShareOption? = nil
  }

  /// 分享相关信息
  public struct CalendarShareInfo {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// 分享的url
    public var shareURL: String {
      get {return _shareURL ?? String()}
      set {_shareURL = newValue}
    }
    /// Returns true if `shareURL` has been explicitly set.
//    public var hasShareURL: Bool {return self._shareURL != nil}
    /// Clears the value of `shareURL`. Subsequent reads from it will return its default value.
//    public mutating func clearShareURL() {self._shareURL = nil}

    /// 当前订阅人数
    public var subscriberNum: Int32 {
      get {return _subscriberNum ?? 0}
      set {_subscriberNum = newValue}
    }
    /// Returns true if `subscriberNum` has been explicitly set.
//    public var hasSubscriberNum: Bool {return self._subscriberNum != nil}
    /// Clears the value of `subscriberNum`. Subsequent reads from it will return its default value.
//    public mutating func clearSubscriberNum() {self._subscriberNum = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _shareURL: String? = nil
    fileprivate var _subscriberNum: Int32? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_Calendar.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Calendar.AccessRole: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Calendar.Status: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Calendar.VisibilityProperty: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Calendar.SubscriptionType: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Calendar.ShareOption: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Calendar.OfficialType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// IM提供的图片存储服务，业务方下发到客户端到形式
public struct LarkNCExtensionPB_Entities_ImImage {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// image_key 与 fs_unit 总是成对出现
  public var imageKey: String {
    get {return _storage._imageKey ?? String()}
    set {_uniqueStorage()._imageKey = newValue}
  }
  /// Returns true if `imageKey` has been explicitly set.
//  public var hasImageKey: Bool {return _storage._imageKey != nil}
  /// Clears the value of `imageKey`. Subsequent reads from it will return its default value.
//  public mutating func clearImageKey() {_uniqueStorage()._imageKey = nil}

  /// fs_unit 标记了访问图片的 endpoint
  public var fsUnit: String {
    get {return _storage._fsUnit ?? String()}
    set {_uniqueStorage()._fsUnit = newValue}
  }
  /// Returns true if `fsUnit` has been explicitly set.
  public var hasFsUnit: Bool {return _storage._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}

  /// crypto 为加密图片对应的秘钥
  public var crypto: LarkNCExtensionPB_Entities_Crypto {
    get {return _storage._crypto ?? LarkNCExtensionPB_Entities_Crypto()}
    set {_uniqueStorage()._crypto = newValue}
  }
  /// Returns true if `crypto` has been explicitly set.
  public var hasCrypto: Bool {return _storage._crypto != nil}
  /// Clears the value of `crypto`. Subsequent reads from it will return its default value.
//  public mutating func clearCrypto() {_uniqueStorage()._crypto = nil}

  ///图片尺寸信息
  public var attrs: [LarkNCExtensionPB_Entities_ImImage.ImageAttribute] {
    get {return _storage._attrs}
    set {_uniqueStorage()._attrs = newValue}
  }

  public var unknownFields = LarkHTTP.UnknownStorage()

  public struct ImageAttribute {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var cropType: LarkNCExtensionPB_Entities_ImageCropType {
      get {return _cropType ?? .origin}
      set {_cropType = newValue}
    }
    /// Returns true if `cropType` has been explicitly set.
//    public var hasCropType: Bool {return self._cropType != nil}
    /// Clears the value of `cropType`. Subsequent reads from it will return its default value.
//    public mutating func clearCropType() {self._cropType = nil}

    public var width: Int64 {
      get {return _width ?? 0}
      set {_width = newValue}
    }
    /// Returns true if `width` has been explicitly set.
//    public var hasWidth: Bool {return self._width != nil}
    /// Clears the value of `width`. Subsequent reads from it will return its default value.
//    public mutating func clearWidth() {self._width = nil}

    public var height: Int64 {
      get {return _height ?? 0}
      set {_height = newValue}
    }
    /// Returns true if `height` has been explicitly set.
//    public var hasHeight: Bool {return self._height != nil}
    /// Clears the value of `height`. Subsequent reads from it will return its default value.
//    public mutating func clearHeight() {self._height = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _cropType: LarkNCExtensionPB_Entities_ImageCropType? = nil
    fileprivate var _width: Int64? = nil
    fileprivate var _height: Int64? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

//public struct LarkNCExtensionPB_Entities_UserCalendarInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 备注名，之后废弃，兼容端上展示
//  public var note: String {
//    get {return _note ?? String()}
//    set {_note = newValue}
//  }
  /// Returns true if `note` has been explicitly set.
//  public var hasNote: Bool {return self._note != nil}
  /// Clears the value of `note`. Subsequent reads from it will return its default value.
//  public mutating func clearNote() {self._note = nil}
//
//  public var backgroundColor: Int32 {
//    get {return _backgroundColor ?? 0}
//    set {_backgroundColor = newValue}
//  }
  /// Returns true if `backgroundColor` has been explicitly set.
//  public var hasBackgroundColor: Bool {return self._backgroundColor != nil}
  /// Clears the value of `backgroundColor`. Subsequent reads from it will return its default value.
//  public mutating func clearBackgroundColor() {self._backgroundColor = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _note: String? = nil
//  fileprivate var _backgroundColor: Int32? = nil
//}

//public struct LarkNCExtensionPB_Entities_CalendarMemberCommit {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var memberType: LarkNCExtensionPB_Entities_CalendarMemberCommit.CalendarMemberType {
//    get {return _storage._memberType ?? .individual}
//    set {_uniqueStorage()._memberType = newValue}
//  }
  /// Returns true if `memberType` has been explicitly set.
//  public var hasMemberType: Bool {return _storage._memberType != nil}
  /// Clears the value of `memberType`. Subsequent reads from it will return its default value.
//  public mutating func clearMemberType() {_uniqueStorage()._memberType = nil}
//
//  public var accessRole: LarkNCExtensionPB_Entities_Calendar.AccessRole {
//    get {return _storage._accessRole ?? .freeBusyReader}
//    set {_uniqueStorage()._accessRole = newValue}
//  }
  /// Returns true if `accessRole` has been explicitly set.
//  public var hasAccessRole: Bool {return _storage._accessRole != nil}
  /// Clears the value of `accessRole`. Subsequent reads from it will return its default value.
//  public mutating func clearAccessRole() {_uniqueStorage()._accessRole = nil}
//
//  public var dependency: OneOf_Dependency? {
//    get {return _storage._dependency}
//    set {_uniqueStorage()._dependency = newValue}
//  }
//
//  public var user: LarkNCExtensionPB_Entities_CalendarMemberCommit.User {
//    get {
//      if case .user(let v)? = _storage._dependency {return v}
//      return LarkNCExtensionPB_Entities_CalendarMemberCommit.User()
//    }
//    set {_uniqueStorage()._dependency = .user(newValue)}
//  }
//
//  public var group: LarkNCExtensionPB_Entities_CalendarMemberCommit.Group {
//    get {
//      if case .group(let v)? = _storage._dependency {return v}
//      return LarkNCExtensionPB_Entities_CalendarMemberCommit.Group()
//    }
//    set {_uniqueStorage()._dependency = .group(newValue)}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum OneOf_Dependency: Equatable {
//    case user(LarkNCExtensionPB_Entities_CalendarMemberCommit.User)
//    case group(LarkNCExtensionPB_Entities_CalendarMemberCommit.Group)
//
//  #if !swift(>=4.1)
//    public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarMemberCommit.OneOf_Dependency, rhs: LarkNCExtensionPB_Entities_CalendarMemberCommit.OneOf_Dependency) -> Bool {
//      switch (lhs, rhs) {
//      case (.user(let l), .user(let r)): return l == r
//      case (.group(let l), .group(let r)): return l == r
//      default: return false
//      }
//    }
//  #endif
//  }
//
//  public enum CalendarMemberType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case individual // = 1
//    case group // = 2
//
//    public init() {
//      self = .individual
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .individual
//      case 2: self = .group
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .individual: return 1
//      case .group: return 2
//      }
//    }
//
//  }
//
//  public struct User {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 对应chatter_id
//    public var userID: String {
//      get {return _userID ?? String()}
//      set {_userID = newValue}
//    }
    /// Returns true if `userID` has been explicitly set.
//    public var hasUserID: Bool {return self._userID != nil}
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
//    public mutating func clearUserID() {self._userID = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _userID: String? = nil
//  }
//
//  public struct Group {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 群对应的chat_id
//    public var groupID: String {
//      get {return _groupID ?? String()}
//      set {_groupID = newValue}
//    }
    /// Returns true if `groupID` has been explicitly set.
//    public var hasGroupID: Bool {return self._groupID != nil}
    /// Clears the value of `groupID`. Subsequent reads from it will return its default value.
//    public mutating func clearGroupID() {self._groupID = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _groupID: String? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_CalendarMemberCommit.CalendarMemberType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_CalendarMemberCommits {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var addMembers: [LarkNCExtensionPB_Entities_CalendarMemberCommit] = []
//
//  public var updateMembers: [LarkNCExtensionPB_Entities_CalendarMemberCommit] = []
//
//  public var removeUserIds: [String] = []
//
//  public var removeGroupIds: [String] = []
//
  /// 留言
//  public var comment: String {
//    get {return _comment ?? String()}
//    set {_comment = newValue}
//  }
  /// Returns true if `comment` has been explicitly set.
//  public var hasComment: Bool {return self._comment != nil}
  /// Clears the value of `comment`. Subsequent reads from it will return its default value.
//  public mutating func clearComment() {self._comment = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _comment: String? = nil
//}

/// id是必须的，会进行校验，其余字段nil不做修改
//public struct LarkNCExtensionPB_Entities_CalendarSaveInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 日历id
//  public var id: String {
//    get {return _storage._id ?? "0"}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
//  public var summary: String {
//    get {return _storage._summary ?? String()}
//    set {_uniqueStorage()._summary = newValue}
//  }
  /// Returns true if `summary` has been explicitly set.
//  public var hasSummary: Bool {return _storage._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
//  public mutating func clearSummary() {_uniqueStorage()._summary = nil}
//
//  public var description_p: String {
//    get {return _storage._description_p ?? String()}
//    set {_uniqueStorage()._description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}
//
//  public var defaultTimezone: String {
//    get {return _storage._defaultTimezone ?? String()}
//    set {_uniqueStorage()._defaultTimezone = newValue}
//  }
  /// Returns true if `defaultTimezone` has been explicitly set.
//  public var hasDefaultTimezone: Bool {return _storage._defaultTimezone != nil}
  /// Clears the value of `defaultTimezone`. Subsequent reads from it will return its default value.
//  public mutating func clearDefaultTimezone() {_uniqueStorage()._defaultTimezone = nil}
//
  ///日历封面图片key
//  public var coverImageKey: String {
//    get {return _storage._coverImageKey ?? String()}
//    set {_uniqueStorage()._coverImageKey = newValue}
//  }
  /// Returns true if `coverImageKey` has been explicitly set.
//  public var hasCoverImageKey: Bool {return _storage._coverImageKey != nil}
  /// Clears the value of `coverImageKey`. Subsequent reads from it will return its default value.
//  public mutating func clearCoverImageKey() {_uniqueStorage()._coverImageKey = nil}
//
  /// 日历相关的默认权限设置
//  public var shareOptions: LarkNCExtensionPB_Entities_Calendar.CalendarShareOptions {
//    get {return _storage._shareOptions ?? LarkNCExtensionPB_Entities_Calendar.CalendarShareOptions()}
//    set {_uniqueStorage()._shareOptions = newValue}
//  }
  /// Returns true if `shareOptions` has been explicitly set.
//  public var hasShareOptions: Bool {return _storage._shareOptions != nil}
  /// Clears the value of `shareOptions`. Subsequent reads from it will return its default value.
//  public mutating func clearShareOptions() {_uniqueStorage()._shareOptions = nil}
//
  /// 日历成员的增量修改
//  public var memberCommits: LarkNCExtensionPB_Entities_CalendarMemberCommits {
//    get {return _storage._memberCommits ?? LarkNCExtensionPB_Entities_CalendarMemberCommits()}
//    set {_uniqueStorage()._memberCommits = newValue}
//  }
  /// Returns true if `memberCommits` has been explicitly set.
//  public var hasMemberCommits: Bool {return _storage._memberCommits != nil}
  /// Clears the value of `memberCommits`. Subsequent reads from it will return its default value.
//  public mutating func clearMemberCommits() {_uniqueStorage()._memberCommits = nil}
//
  /// 用户对日历的个人设置
//  public var individualCalendarInfo: LarkNCExtensionPB_Entities_UserCalendarInfo {
//    get {return _storage._individualCalendarInfo ?? LarkNCExtensionPB_Entities_UserCalendarInfo()}
//    set {_uniqueStorage()._individualCalendarInfo = newValue}
//  }
  /// Returns true if `individualCalendarInfo` has been explicitly set.
//  public var hasIndividualCalendarInfo: Bool {return _storage._individualCalendarInfo != nil}
  /// Clears the value of `individualCalendarInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearIndividualCalendarInfo() {_uniqueStorage()._individualCalendarInfo = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

public struct LarkNCExtensionPB_Entities_ExternalAccount {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var email: String {
    get {return _email ?? String()}
    set {_email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  public var hasEmail: Bool {return self._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
//  public mutating func clearEmail() {self._email = nil}

  /// password_invalid = true表示密码无效，false表示密码有效
  public var passwordInvalid: Bool {
    get {return _passwordInvalid ?? false}
    set {_passwordInvalid = newValue}
  }
  /// Returns true if `passwordInvalid` has been explicitly set.
//  public var hasPasswordInvalid: Bool {return self._passwordInvalid != nil}
  /// Clears the value of `passwordInvalid`. Subsequent reads from it will return its default value.
//  public mutating func clearPasswordInvalid() {self._passwordInvalid = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _email: String? = nil
  fileprivate var _passwordInvalid: Bool? = nil
}

//public struct LarkNCExtensionPB_Entities_ExternalMailAccountSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var enableCalendar: Bool {
//    get {return _enableCalendar ?? false}
//    set {_enableCalendar = newValue}
//  }
  /// Returns true if `enableCalendar` has been explicitly set.
//  public var hasEnableCalendar: Bool {return self._enableCalendar != nil}
  /// Clears the value of `enableCalendar`. Subsequent reads from it will return its default value.
//  public mutating func clearEnableCalendar() {self._enableCalendar = nil}
//
//  public var enableEmailAttendeeInvitation: Bool {
//    get {return _enableEmailAttendeeInvitation ?? false}
//    set {_enableEmailAttendeeInvitation = newValue}
//  }
  /// Returns true if `enableEmailAttendeeInvitation` has been explicitly set.
//  public var hasEnableEmailAttendeeInvitation: Bool {return self._enableEmailAttendeeInvitation != nil}
  /// Clears the value of `enableEmailAttendeeInvitation`. Subsequent reads from it will return its default value.
//  public mutating func clearEnableEmailAttendeeInvitation() {self._enableEmailAttendeeInvitation = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _enableCalendar: Bool? = nil
//  fileprivate var _enableEmailAttendeeInvitation: Bool? = nil
//}

//public struct LarkNCExtensionPB_Entities_ExternalMailAccount {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var mailAddress: String {
//    get {return _storage._mailAddress ?? String()}
//    set {_uniqueStorage()._mailAddress = newValue}
//  }
  /// Returns true if `mailAddress` has been explicitly set.
//  public var hasMailAddress: Bool {return _storage._mailAddress != nil}
  /// Clears the value of `mailAddress`. Subsequent reads from it will return its default value.
//  public mutating func clearMailAddress() {_uniqueStorage()._mailAddress = nil}
//
//  public var type: LarkNCExtensionPB_Entities_ExternalMailAccount.AccountType {
//    get {return _storage._type ?? .google}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
//  public var hasGmailScope_p: Bool {
//    get {return _storage._hasGmailScope_p ?? false}
//    set {_uniqueStorage()._hasGmailScope_p = newValue}
//  }
  /// Returns true if `hasGmailScope_p` has been explicitly set.
//  public var hasHasGmailScope_p: Bool {return _storage._hasGmailScope_p != nil}
  /// Clears the value of `hasGmailScope_p`. Subsequent reads from it will return its default value.
//  public mutating func clearHasGmailScope_p() {_uniqueStorage()._hasGmailScope_p = nil}
//
//  public var setting: LarkNCExtensionPB_Entities_ExternalMailAccountSetting {
//    get {return _storage._setting ?? LarkNCExtensionPB_Entities_ExternalMailAccountSetting()}
//    set {_uniqueStorage()._setting = newValue}
//  }
  /// Returns true if `setting` has been explicitly set.
//  public var hasSetting: Bool {return _storage._setting != nil}
  /// Clears the value of `setting`. Subsequent reads from it will return its default value.
//  public mutating func clearSetting() {_uniqueStorage()._setting = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum AccountType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case google // = 1
//    case exchange // = 2
//
//    public init() {
//      self = .google
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .google
//      case 2: self = .exchange
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .google: return 1
//      case .exchange: return 2
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_ExternalMailAccount.AccountType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_CalendarBriefInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
//  public var type: LarkNCExtensionPB_Entities_Calendar.TypeEnum {
//    get {return _type ?? .unknownType}
//    set {_type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}
//
//  public var successorUserID: Int64 {
//    get {return _successorUserID ?? 0}
//    set {_successorUserID = newValue}
//  }
  /// Returns true if `successorUserID` has been explicitly set.
//  public var hasSuccessorUserID: Bool {return self._successorUserID != nil}
  /// Clears the value of `successorUserID`. Subsequent reads from it will return its default value.
//  public mutating func clearSuccessorUserID() {self._successorUserID = nil}
//
//  public var isAllStaff: Bool {
//    get {return _isAllStaff ?? false}
//    set {_isAllStaff = newValue}
//  }
  /// Returns true if `isAllStaff` has been explicitly set.
//  public var hasIsAllStaff: Bool {return self._isAllStaff != nil}
  /// Clears the value of `isAllStaff`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAllStaff() {self._isAllStaff = nil}
//
  ///日历主题
//  public var calendarSummary: String {
//    get {return _calendarSummary ?? String()}
//    set {_calendarSummary = newValue}
//  }
  /// Returns true if `calendarSummary` has been explicitly set.
//  public var hasCalendarSummary: Bool {return self._calendarSummary != nil}
  /// Clears the value of `calendarSummary`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarSummary() {self._calendarSummary = nil}
//
  ///日历创建者user id
//  public var creatorUserID: Int64 {
//    get {return _creatorUserID ?? 0}
//    set {_creatorUserID = newValue}
//  }
  /// Returns true if `creatorUserID` has been explicitly set.
//  public var hasCreatorUserID: Bool {return self._creatorUserID != nil}
  /// Clears the value of `creatorUserID`. Subsequent reads from it will return its default value.
//  public mutating func clearCreatorUserID() {self._creatorUserID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _type: LarkNCExtensionPB_Entities_Calendar.TypeEnum? = nil
//  fileprivate var _successorUserID: Int64? = nil
//  fileprivate var _isAllStaff: Bool? = nil
//  fileprivate var _calendarSummary: String? = nil
//  fileprivate var _creatorUserID: Int64? = nil
//}

/// 在数据库中存储日历的max_version
//public struct LarkNCExtensionPB_Entities_CalendarExtra {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var maxVersion: Int64 {
//    get {return _storage._maxVersion ?? 0}
//    set {_uniqueStorage()._maxVersion = newValue}
//  }
  /// Returns true if `maxVersion` has been explicitly set.
//  public var hasMaxVersion: Bool {return _storage._maxVersion != nil}
  /// Clears the value of `maxVersion`. Subsequent reads from it will return its default value.
//  public mutating func clearMaxVersion() {_uniqueStorage()._maxVersion = nil}
//
  /// optional int64 folder_obj_type = 2 [default = 0]; // 已废弃
//  public var folderObjToken: String {
//    get {return _storage._folderObjToken ?? String()}
//    set {_uniqueStorage()._folderObjToken = newValue}
//  }
  /// Returns true if `folderObjToken` has been explicitly set.
//  public var hasFolderObjToken: Bool {return _storage._folderObjToken != nil}
  /// Clears the value of `folderObjToken`. Subsequent reads from it will return its default value.
//  public mutating func clearFolderObjToken() {_uniqueStorage()._folderObjToken = nil}
//
//  public var successorUserID: Int64 {
//    get {return _storage._successorUserID ?? 0}
//    set {_uniqueStorage()._successorUserID = newValue}
//  }
  /// Returns true if `successorUserID` has been explicitly set.
//  public var hasSuccessorUserID: Bool {return _storage._successorUserID != nil}
  /// Clears the value of `successorUserID`. Subsequent reads from it will return its default value.
//  public mutating func clearSuccessorUserID() {_uniqueStorage()._successorUserID = nil}
//
//  public var calendarSchema: LarkNCExtensionPB_Entities_CalendarSchemaCollection {
//    get {return _storage._calendarSchema ?? LarkNCExtensionPB_Entities_CalendarSchemaCollection()}
//    set {_uniqueStorage()._calendarSchema = newValue}
//  }
  /// Returns true if `calendarSchema` has been explicitly set.
//  public var hasCalendarSchema: Bool {return _storage._calendarSchema != nil}
  /// Clears the value of `calendarSchema`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarSchema() {_uniqueStorage()._calendarSchema = nil}
//
//  public var calendarEventSchema: LarkNCExtensionPB_Entities_CalendarSchemaCollection {
//    get {return _storage._calendarEventSchema ?? LarkNCExtensionPB_Entities_CalendarSchemaCollection()}
//    set {_uniqueStorage()._calendarEventSchema = newValue}
//  }
  /// Returns true if `calendarEventSchema` has been explicitly set.
//  public var hasCalendarEventSchema: Bool {return _storage._calendarEventSchema != nil}
  /// Clears the value of `calendarEventSchema`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarEventSchema() {_uniqueStorage()._calendarEventSchema = nil}
//
//  public var coverImgInfo: LarkNCExtensionPB_Entities_ImImage {
//    get {return _storage._coverImgInfo ?? LarkNCExtensionPB_Entities_ImImage()}
//    set {_uniqueStorage()._coverImgInfo = newValue}
//  }
  /// Returns true if `coverImgInfo` has been explicitly set.
//  public var hasCoverImgInfo: Bool {return _storage._coverImgInfo != nil}
  /// Clears the value of `coverImgInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearCoverImgInfo() {_uniqueStorage()._coverImgInfo = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

public struct LarkNCExtensionPB_Entities_CalendarMember {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var chatterID: String {
    get {return _chatterID ?? String()}
    set {_chatterID = newValue}
  }
  /// Returns true if `chatterID` has been explicitly set.
  public var hasChatterID: Bool {return self._chatterID != nil}
  /// Clears the value of `chatterID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatterID() {self._chatterID = nil}

  public var accessRole: LarkNCExtensionPB_Entities_Calendar.AccessRole {
    get {return _accessRole ?? .freeBusyReader}
    set {_accessRole = newValue}
  }
  /// Returns true if `accessRole` has been explicitly set.
//  public var hasAccessRole: Bool {return self._accessRole != nil}
  /// Clears the value of `accessRole`. Subsequent reads from it will return its default value.
//  public mutating func clearAccessRole() {self._accessRole = nil}

  public var status: LarkNCExtensionPB_Entities_Calendar.Status {
    get {return _status ?? .default}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var tags: [LarkNCExtensionPB_Entities_UserCalendarRefTag] = []

  /// 个人或者群
  public var memberType: LarkNCExtensionPB_Entities_CalendarMember.CalendarMemberType {
    get {return _memberType ?? .individual}
    set {_memberType = newValue}
  }
  /// Returns true if `memberType` has been explicitly set.
//  public var hasMemberType: Bool {return self._memberType != nil}
  /// Clears the value of `memberType`. Subsequent reads from it will return its default value.
//  public mutating func clearMemberType() {self._memberType = nil}

  public var chatID: String {
    get {return _chatID ?? String()}
    set {_chatID = newValue}
  }
  /// Returns true if `chatID` has been explicitly set.
  public var hasChatID: Bool {return self._chatID != nil}
  /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatID() {self._chatID = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum CalendarMemberType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case individual // = 1
    case group // = 2

    public init() {
      self = .individual
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .individual
      case 2: self = .group
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .individual: return 1
      case .group: return 2
      }
    }

  }

  enum CalendarMemberSupportType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case supportIndividual // = 1
    case supportIndividualGroup // = 2

    public init() {
      self = .supportIndividual
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .supportIndividual
      case 2: self = .supportIndividualGroup
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .supportIndividual: return 1
      case .supportIndividualGroup: return 2
      }
    }

  }

  public init() {}

  fileprivate var _chatterID: String? = nil
  fileprivate var _accessRole: LarkNCExtensionPB_Entities_Calendar.AccessRole? = nil
  fileprivate var _status: LarkNCExtensionPB_Entities_Calendar.Status? = nil
  fileprivate var _memberType: LarkNCExtensionPB_Entities_CalendarMember.CalendarMemberType? = nil
  fileprivate var _chatID: String? = nil
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_CalendarMember.CalendarMemberType: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_CalendarMember.CalendarMemberSupportType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_UserCalendarRefTag {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var type: LarkNCExtensionPB_Entities_UserCalendarRefTag.UserCalendarRefTagType {
    get {return _type ?? .individual}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}

  public var content: String {
    get {return _content ?? String()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {self._content = nil}

  public var accessRole: Int32 {
    get {return _accessRole ?? 0}
    set {_accessRole = newValue}
  }
  /// Returns true if `accessRole` has been explicitly set.
//  public var hasAccessRole: Bool {return self._accessRole != nil}
  /// Clears the value of `accessRole`. Subsequent reads from it will return its default value.
//  public mutating func clearAccessRole() {self._accessRole = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum UserCalendarRefTagType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case individual // = 1
    case group // = 2

    public init() {
      self = .individual
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .individual
      case 2: self = .group
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .individual: return 1
      case .group: return 2
      }
    }

  }

  public init() {}

  fileprivate var _type: LarkNCExtensionPB_Entities_UserCalendarRefTag.UserCalendarRefTagType? = nil
  fileprivate var _content: String? = nil
  fileprivate var _accessRole: Int32? = nil
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_UserCalendarRefTag.UserCalendarRefTagType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// 用于数据库中存储user_calendar_ref的extra信息
//public struct LarkNCExtensionPB_Entities_UserCalendarExtra {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var tags: [LarkNCExtensionPB_Entities_UserCalendarRefTag] = []
//
//  public var calendarCreatorUserID: Int64 {
//    get {return _calendarCreatorUserID ?? 0}
//    set {_calendarCreatorUserID = newValue}
//  }
  /// Returns true if `calendarCreatorUserID` has been explicitly set.
//  public var hasCalendarCreatorUserID: Bool {return self._calendarCreatorUserID != nil}
  /// Clears the value of `calendarCreatorUserID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarCreatorUserID() {self._calendarCreatorUserID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _calendarCreatorUserID: Int64? = nil
//}

//public struct LarkNCExtensionPB_Entities_CalendarContact {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var calendarID: String {
//    get {return _calendarID ?? String()}
//    set {_calendarID = newValue}
//  }
  /// Returns true if `calendarID` has been explicitly set.
//  public var hasCalendarID: Bool {return self._calendarID != nil}
  /// Clears the value of `calendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarID() {self._calendarID = nil}
//
//  public var summary: String {
//    get {return _summary ?? String()}
//    set {_summary = newValue}
//  }
  /// Returns true if `summary` has been explicitly set.
//  public var hasSummary: Bool {return self._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
//  public mutating func clearSummary() {self._summary = nil}
//
//  public var avatarURL: String {
//    get {return _avatarURL ?? String()}
//    set {_avatarURL = newValue}
//  }
  /// Returns true if `avatarURL` has been explicitly set.
//  public var hasAvatarURL: Bool {return self._avatarURL != nil}
  /// Clears the value of `avatarURL`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarURL() {self._avatarURL = nil}
//
//  public var isResource: Bool {
//    get {return _isResource ?? false}
//    set {_isResource = newValue}
//  }
  /// Returns true if `isResource` has been explicitly set.
//  public var hasIsResource: Bool {return self._isResource != nil}
  /// Clears the value of `isResource`. Subsequent reads from it will return its default value.
//  public mutating func clearIsResource() {self._isResource = nil}
//
//  public var departmentIds: [String] = []
//
//  public var chatterID: String {
//    get {return _chatterID ?? String()}
//    set {_chatterID = newValue}
//  }
  /// Returns true if `chatterID` has been explicitly set.
//  public var hasChatterID: Bool {return self._chatterID != nil}
  /// Clears the value of `chatterID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatterID() {self._chatterID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _calendarID: String? = nil
//  fileprivate var _summary: String? = nil
//  fileprivate var _avatarURL: String? = nil
//  fileprivate var _isResource: Bool? = nil
//  fileprivate var _chatterID: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_EventCardTemplate {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var summary: String {
//    get {return _storage._summary ?? String()}
//    set {_uniqueStorage()._summary = newValue}
//  }
  /// Returns true if `summary` has been explicitly set.
//  public var hasSummary: Bool {return _storage._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
//  public mutating func clearSummary() {_uniqueStorage()._summary = nil}
//
//  public var senderID: String {
//    get {return _storage._senderID ?? String()}
//    set {_uniqueStorage()._senderID = newValue}
//  }
  /// Returns true if `senderID` has been explicitly set.
//  public var hasSenderID: Bool {return _storage._senderID != nil}
  /// Clears the value of `senderID`. Subsequent reads from it will return its default value.
//  public mutating func clearSenderID() {_uniqueStorage()._senderID = nil}
//
//  public var isOptional: Bool {
//    get {return _storage._isOptional ?? false}
//    set {_uniqueStorage()._isOptional = newValue}
//  }
  /// Returns true if `isOptional` has been explicitly set.
//  public var hasIsOptional: Bool {return _storage._isOptional != nil}
  /// Clears the value of `isOptional`. Subsequent reads from it will return its default value.
//  public mutating func clearIsOptional() {_uniqueStorage()._isOptional = nil}
//
//  public var startTime: Int64 {
//    get {return _storage._startTime ?? 0}
//    set {_uniqueStorage()._startTime = newValue}
//  }
  /// Returns true if `startTime` has been explicitly set.
//  public var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
//  public mutating func clearStartTime() {_uniqueStorage()._startTime = nil}
//
//  public var endTime: Int64 {
//    get {return _storage._endTime ?? 0}
//    set {_uniqueStorage()._endTime = newValue}
//  }
  /// Returns true if `endTime` has been explicitly set.
//  public var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
//  public mutating func clearEndTime() {_uniqueStorage()._endTime = nil}
//
//  public var rrule: String {
//    get {return _storage._rrule ?? String()}
//    set {_uniqueStorage()._rrule = newValue}
//  }
  /// Returns true if `rrule` has been explicitly set.
//  public var hasRrule: Bool {return _storage._rrule != nil}
  /// Clears the value of `rrule`. Subsequent reads from it will return its default value.
//  public mutating func clearRrule() {_uniqueStorage()._rrule = nil}
//
//  public var isAllDay: Bool {
//    get {return _storage._isAllDay ?? false}
//    set {_uniqueStorage()._isAllDay = newValue}
//  }
  /// Returns true if `isAllDay` has been explicitly set.
//  public var hasIsAllDay: Bool {return _storage._isAllDay != nil}
  /// Clears the value of `isAllDay`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAllDay() {_uniqueStorage()._isAllDay = nil}
//
//  public var version: Int64 {
//    get {return _storage._version ?? 0}
//    set {_uniqueStorage()._version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {_uniqueStorage()._version = nil}
//
//  public var startTimezone: String {
//    get {return _storage._startTimezone ?? String()}
//    set {_uniqueStorage()._startTimezone = newValue}
//  }
  /// Returns true if `startTimezone` has been explicitly set.
//  public var hasStartTimezone: Bool {return _storage._startTimezone != nil}
  /// Clears the value of `startTimezone`. Subsequent reads from it will return its default value.
//  public mutating func clearStartTimezone() {_uniqueStorage()._startTimezone = nil}
//
//  public var endTimezone: String {
//    get {return _storage._endTimezone ?? String()}
//    set {_uniqueStorage()._endTimezone = newValue}
//  }
  /// Returns true if `endTimezone` has been explicitly set.
//  public var hasEndTimezone: Bool {return _storage._endTimezone != nil}
  /// Clears the value of `endTimezone`. Subsequent reads from it will return its default value.
//  public mutating func clearEndTimezone() {_uniqueStorage()._endTimezone = nil}
//
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
//  public var type: Int32 {
//    get {return _storage._type ?? 0}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
//  public var uid: String {
//    get {return _storage._uid ?? String()}
//    set {_uniqueStorage()._uid = newValue}
//  }
  /// Returns true if `uid` has been explicitly set.
//  public var hasUid: Bool {return _storage._uid != nil}
  /// Clears the value of `uid`. Subsequent reads from it will return its default value.
//  public mutating func clearUid() {_uniqueStorage()._uid = nil}
//
//  public var originalTime: Int64 {
//    get {return _storage._originalTime ?? 0}
//    set {_uniqueStorage()._originalTime = newValue}
//  }
  /// Returns true if `originalTime` has been explicitly set.
//  public var hasOriginalTime: Bool {return _storage._originalTime != nil}
  /// Clears the value of `originalTime`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginalTime() {_uniqueStorage()._originalTime = nil}
//
//  public var calendarID: String {
//    get {return _storage._calendarID ?? String()}
//    set {_uniqueStorage()._calendarID = newValue}
//  }
  /// Returns true if `calendarID` has been explicitly set.
//  public var hasCalendarID: Bool {return _storage._calendarID != nil}
  /// Clears the value of `calendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarID() {_uniqueStorage()._calendarID = nil}
//
//  public var meetingRooms: [String] {
//    get {return _storage._meetingRooms}
//    set {_uniqueStorage()._meetingRooms = newValue}
//  }
//
//  public var attendeeChatterIds: [String] {
//    get {return _storage._attendeeChatterIds}
//    set {_uniqueStorage()._attendeeChatterIds = newValue}
//  }
//
//  public var chatIds: [String] {
//    get {return _storage._chatIds}
//    set {_uniqueStorage()._chatIds = newValue}
//  }
//
//  public var selfAttendeeStatus: Int32 {
//    get {return _storage._selfAttendeeStatus ?? 0}
//    set {_uniqueStorage()._selfAttendeeStatus = newValue}
//  }
  /// Returns true if `selfAttendeeStatus` has been explicitly set.
//  public var hasSelfAttendeeStatus: Bool {return _storage._selfAttendeeStatus != nil}
  /// Clears the value of `selfAttendeeStatus`. Subsequent reads from it will return its default value.
//  public mutating func clearSelfAttendeeStatus() {_uniqueStorage()._selfAttendeeStatus = nil}
//
//  public var attendeeCount: Int32 {
//    get {return _storage._attendeeCount ?? 0}
//    set {_uniqueStorage()._attendeeCount = newValue}
//  }
  /// Returns true if `attendeeCount` has been explicitly set.
//  public var hasAttendeeCount: Bool {return _storage._attendeeCount != nil}
  /// Clears the value of `attendeeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearAttendeeCount() {_uniqueStorage()._attendeeCount = nil}
//
//  public var location: String {
//    get {return _storage._location ?? String()}
//    set {_uniqueStorage()._location = newValue}
//  }
  /// Returns true if `location` has been explicitly set.
//  public var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
//  public mutating func clearLocation() {_uniqueStorage()._location = nil}
//
//  public var description_p: String {
//    get {return _storage._description_p ?? String()}
//    set {_uniqueStorage()._description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}
//
//  public var eventType: Int32 {
//    get {return _storage._eventType ?? 0}
//    set {_uniqueStorage()._eventType = newValue}
//  }
  /// Returns true if `eventType` has been explicitly set.
//  public var hasEventType: Bool {return _storage._eventType != nil}
  /// Clears the value of `eventType`. Subsequent reads from it will return its default value.
//  public mutating func clearEventType() {_uniqueStorage()._eventType = nil}
//
//  public var isCrossTenant: Bool {
//    get {return _storage._isCrossTenant ?? false}
//    set {_uniqueStorage()._isCrossTenant = newValue}
//  }
  /// Returns true if `isCrossTenant` has been explicitly set.
//  public var hasIsCrossTenant: Bool {return _storage._isCrossTenant != nil}
  /// Clears the value of `isCrossTenant`. Subsequent reads from it will return its default value.
//  public mutating func clearIsCrossTenant() {_uniqueStorage()._isCrossTenant = nil}
//
//  public var individualChatterIds: [String] {
//    get {return _storage._individualChatterIds}
//    set {_uniqueStorage()._individualChatterIds = newValue}
//  }
//
//  public var calendarResourceInfos: [LarkNCExtensionPB_Entities_CalendarResourceInfo] {
//    get {return _storage._calendarResourceInfos}
//    set {_uniqueStorage()._calendarResourceInfos = newValue}
//  }
//
//  public var rsvpUserID: String {
//    get {return _storage._rsvpUserID ?? String()}
//    set {_uniqueStorage()._rsvpUserID = newValue}
//  }
  /// Returns true if `rsvpUserID` has been explicitly set.
//  public var hasRsvpUserID: Bool {return _storage._rsvpUserID != nil}
  /// Clears the value of `rsvpUserID`. Subsequent reads from it will return its default value.
//  public mutating func clearRsvpUserID() {_uniqueStorage()._rsvpUserID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

public struct LarkNCExtensionPB_Entities_CalendarEvent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id ?? "0"}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var uniqueKey: String {
    get {return _storage._uniqueKey ?? String()}
    set {_uniqueStorage()._uniqueKey = newValue}
  }
  /// Returns true if `uniqueKey` has been explicitly set.
//  public var hasUniqueKey: Bool {return _storage._uniqueKey != nil}
  /// Clears the value of `uniqueKey`. Subsequent reads from it will return its default value.
//  public mutating func clearUniqueKey() {_uniqueStorage()._uniqueKey = nil}

  ///日程所在日历的id，区分被邀请人
  public var calendarID: String {
    get {return _storage._calendarID ?? String()}
    set {_uniqueStorage()._calendarID = newValue}
  }
  /// Returns true if `calendarID` has been explicitly set.
//  public var hasCalendarID: Bool {return _storage._calendarID != nil}
  /// Clears the value of `calendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarID() {_uniqueStorage()._calendarID = nil}

  ///重复性日程例外原来开始的时间
  public var originalTime: Int64 {
    get {return _storage._originalTime ?? 0}
    set {_uniqueStorage()._originalTime = newValue}
  }
  /// Returns true if `originalTime` has been explicitly set.
//  public var hasOriginalTime: Bool {return _storage._originalTime != nil}
  /// Clears the value of `originalTime`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginalTime() {_uniqueStorage()._originalTime = nil}

  ///日程创建者的 calendar_id
  public var creatorCalendarID: String {
    get {return _storage._creatorCalendarID ?? "0"}
    set {_uniqueStorage()._creatorCalendarID = newValue}
  }
  /// Returns true if `creatorCalendarID` has been explicitly set.
//  public var hasCreatorCalendarID: Bool {return _storage._creatorCalendarID != nil}
  /// Clears the value of `creatorCalendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearCreatorCalendarID() {_uniqueStorage()._creatorCalendarID = nil}

  ///原始日程所属日历的id
  public var organizerCalendarID: String {
    get {return _storage._organizerCalendarID ?? "0"}
    set {_uniqueStorage()._organizerCalendarID = newValue}
  }
  /// Returns true if `organizerCalendarID` has been explicitly set.
//  public var hasOrganizerCalendarID: Bool {return _storage._organizerCalendarID != nil}
  /// Clears the value of `organizerCalendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearOrganizerCalendarID() {_uniqueStorage()._organizerCalendarID = nil}

  ///用户参与日程的状态
  public var selfAttendeeStatus: LarkNCExtensionPB_Entities_CalendarEvent.SelfAttendeeStatus {
    get {return _storage._selfAttendeeStatus ?? .attendeeStatusAccept}
    set {_uniqueStorage()._selfAttendeeStatus = newValue}
  }
  /// Returns true if `selfAttendeeStatus` has been explicitly set.
  public var hasSelfAttendeeStatus: Bool {return _storage._selfAttendeeStatus != nil}
  /// Clears the value of `selfAttendeeStatus`. Subsequent reads from it will return its default value.
//  public mutating func clearSelfAttendeeStatus() {_uniqueStorage()._selfAttendeeStatus = nil}

  public var start: Int64 {
    get {return _storage._start ?? 0}
    set {_uniqueStorage()._start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  public var hasStart: Bool {return _storage._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
//  public mutating func clearStart() {_uniqueStorage()._start = nil}

  public var startTimezone: String {
    get {return _storage._startTimezone ?? String()}
    set {_uniqueStorage()._startTimezone = newValue}
  }
  /// Returns true if `startTimezone` has been explicitly set.
//  public var hasStartTimezone: Bool {return _storage._startTimezone != nil}
  /// Clears the value of `startTimezone`. Subsequent reads from it will return its default value.
//  public mutating func clearStartTimezone() {_uniqueStorage()._startTimezone = nil}

  public var end: Int64 {
    get {return _storage._end ?? 0}
    set {_uniqueStorage()._end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  public var hasEnd: Bool {return _storage._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
//  public mutating func clearEnd() {_uniqueStorage()._end = nil}

  public var endTimezone: String {
    get {return _storage._endTimezone ?? String()}
    set {_uniqueStorage()._endTimezone = newValue}
  }
  /// Returns true if `endTimezone` has been explicitly set.
//  public var hasEndTimezone: Bool {return _storage._endTimezone != nil}
  /// Clears the value of `endTimezone`. Subsequent reads from it will return its default value.
//  public mutating func clearEndTimezone() {_uniqueStorage()._endTimezone = nil}

  public var status: LarkNCExtensionPB_Entities_CalendarEvent.Status {
    get {return _storage._status ?? .confirmed}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var locations: [LarkNCExtensionPB_Entities_CalendarEventLocation] {
    get {return _storage._locations}
    set {_uniqueStorage()._locations = newValue}
  }

  public var rrule: String {
    get {return _storage._rrule ?? String()}
    set {_uniqueStorage()._rrule = newValue}
  }
  /// Returns true if `rrule` has been explicitly set.
  public var hasRrule: Bool {return _storage._rrule != nil}
  /// Clears the value of `rrule`. Subsequent reads from it will return its default value.
//  public mutating func clearRrule() {_uniqueStorage()._rrule = nil}

  public var guestsCanInviteOthers: Bool {
    get {return _storage._guestsCanInviteOthers ?? true}
    set {_uniqueStorage()._guestsCanInviteOthers = newValue}
  }
  /// Returns true if `guestsCanInviteOthers` has been explicitly set.
//  public var hasGuestsCanInviteOthers: Bool {return _storage._guestsCanInviteOthers != nil}
  /// Clears the value of `guestsCanInviteOthers`. Subsequent reads from it will return its default value.
//  public mutating func clearGuestsCanInviteOthers() {_uniqueStorage()._guestsCanInviteOthers = nil}

  public var guestsCanSeeOtherGuests: Bool {
    get {return _storage._guestsCanSeeOtherGuests ?? true}
    set {_uniqueStorage()._guestsCanSeeOtherGuests = newValue}
  }
  /// Returns true if `guestsCanSeeOtherGuests` has been explicitly set.
//  public var hasGuestsCanSeeOtherGuests: Bool {return _storage._guestsCanSeeOtherGuests != nil}
  /// Clears the value of `guestsCanSeeOtherGuests`. Subsequent reads from it will return its default value.
//  public mutating func clearGuestsCanSeeOtherGuests() {_uniqueStorage()._guestsCanSeeOtherGuests = nil}

  public var guestsCanModify: Bool {
    get {return _storage._guestsCanModify ?? false}
    set {_uniqueStorage()._guestsCanModify = newValue}
  }
  /// Returns true if `guestsCanModify` has been explicitly set.
//  public var hasGuestsCanModify: Bool {return _storage._guestsCanModify != nil}
  /// Clears the value of `guestsCanModify`. Subsequent reads from it will return its default value.
//  public mutating func clearGuestsCanModify() {_uniqueStorage()._guestsCanModify = nil}

  public var createTime: Int64 {
    get {return _storage._createTime ?? 0}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  public var updateTime: Int64 {
    get {return _storage._updateTime ?? 0}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  public var isDeleted: Bool {
    get {return _storage._isDeleted ?? false}
    set {_uniqueStorage()._isDeleted = newValue}
  }
  /// Returns true if `isDeleted` has been explicitly set.
//  public var hasIsDeleted: Bool {return _storage._isDeleted != nil}
  /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDeleted() {_uniqueStorage()._isDeleted = nil}

  ///颜色信息（默认是日历颜色）
  public var color: Int32 {
    get {return _storage._color ?? -1}
    set {_uniqueStorage()._color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  public var hasColor: Bool {return _storage._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  public mutating func clearColor() {_uniqueStorage()._color = nil}

  /// 日程来源（App创建、web创建等）
  public var source: LarkNCExtensionPB_Entities_CalendarEvent.Source {
    get {return _storage._source ?? .pcClient}
    set {_uniqueStorage()._source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  public var hasSource: Bool {return _storage._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
//  public mutating func clearSource() {_uniqueStorage()._source = nil}

  public var visibility: LarkNCExtensionPB_Entities_CalendarEvent.Visibility {
    get {return _storage._visibility ?? .default}
    set {_uniqueStorage()._visibility = newValue}
  }
  /// Returns true if `visibility` has been explicitly set.
//  public var hasVisibility: Bool {return _storage._visibility != nil}
  /// Clears the value of `visibility`. Subsequent reads from it will return its default value.
//  public mutating func clearVisibility() {_uniqueStorage()._visibility = nil}

  ///重要程度（NORMAL, URGANT等）0-9
  public var importance: Int32 {
    get {return _storage._importance ?? 0}
    set {_uniqueStorage()._importance = newValue}
  }
  /// Returns true if `importance` has been explicitly set.
//  public var hasImportance: Bool {return _storage._importance != nil}
  /// Clears the value of `importance`. Subsequent reads from it will return its default value.
//  public mutating func clearImportance() {_uniqueStorage()._importance = nil}

  public var isAllDay: Bool {
    get {return _storage._isAllDay ?? false}
    set {_uniqueStorage()._isAllDay = newValue}
  }
  /// Returns true if `isAllDay` has been explicitly set.
//  public var hasIsAllDay: Bool {return _storage._isAllDay != nil}
  /// Clears the value of `isAllDay`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAllDay() {_uniqueStorage()._isAllDay = nil}

  ///日程参与人
  public var attendees: [LarkNCExtensionPB_Entities_CalendarEventAttendee] {
    get {return _storage._attendees}
    set {_uniqueStorage()._attendees = newValue}
  }

  ///日程提醒
  public var reminders: [LarkNCExtensionPB_Entities_Reminder] {
    get {return _storage._reminders}
    set {_uniqueStorage()._reminders = newValue}
  }

  ///calendar_id指向的日历是否空闲
  public var isFree: Bool {
    get {return _storage._isFree ?? false}
    set {_uniqueStorage()._isFree = newValue}
  }
  /// Returns true if `isFree` has been explicitly set.
//  public var hasIsFree: Bool {return _storage._isFree != nil}
  /// Clears the value of `isFree`. Subsequent reads from it will return its default value.
//  public mutating func clearIsFree() {_uniqueStorage()._isFree = nil}

  public var summary: String {
    get {return _storage._summary ?? String()}
    set {_uniqueStorage()._summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  public var hasSummary: Bool {return _storage._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
//  public mutating func clearSummary() {_uniqueStorage()._summary = nil}

  public var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  public var originalEvent: String {
    get {return _storage._originalEvent ?? String()}
    set {_uniqueStorage()._originalEvent = newValue}
  }
  /// Returns true if `originalEvent` has been explicitly set.
//  public var hasOriginalEvent: Bool {return _storage._originalEvent != nil}
  /// Clears the value of `originalEvent`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginalEvent() {_uniqueStorage()._originalEvent = nil}

  public var originalIsAllDay: Bool {
    get {return _storage._originalIsAllDay ?? false}
    set {_uniqueStorage()._originalIsAllDay = newValue}
  }
  /// Returns true if `originalIsAllDay` has been explicitly set.
//  public var hasOriginalIsAllDay: Bool {return _storage._originalIsAllDay != nil}
  /// Clears the value of `originalIsAllDay`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginalIsAllDay() {_uniqueStorage()._originalIsAllDay = nil}

  public var audioURL: String {
    get {return _storage._audioURL ?? String()}
    set {_uniqueStorage()._audioURL = newValue}
  }
  /// Returns true if `audioURL` has been explicitly set.
//  public var hasAudioURL: Bool {return _storage._audioURL != nil}
  /// Clears the value of `audioURL`. Subsequent reads from it will return its default value.
//  public mutating func clearAudioURL() {_uniqueStorage()._audioURL = nil}

  public var url: String {
    get {return _storage._url ?? String()}
    set {_uniqueStorage()._url = newValue}
  }
  /// Returns true if `url` has been explicitly set.
  public var hasURL: Bool {return _storage._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
//  public mutating func clearURL() {_uniqueStorage()._url = nil}

  public var hasAlarm_p: Bool {
    get {return _storage._hasAlarm_p ?? true}
    set {_uniqueStorage()._hasAlarm_p = newValue}
  }
  /// Returns true if `hasAlarm_p` has been explicitly set.
//  public var hasHasAlarm_p: Bool {return _storage._hasAlarm_p != nil}
  /// Clears the value of `hasAlarm_p`. Subsequent reads from it will return its default value.
//  public mutating func clearHasAlarm_p() {_uniqueStorage()._hasAlarm_p = nil}

  public var hasAttendee_p: Bool {
    get {return _storage._hasAttendee_p ?? false}
    set {_uniqueStorage()._hasAttendee_p = newValue}
  }
  /// Returns true if `hasAttendee_p` has been explicitly set.
//  public var hasHasAttendee_p: Bool {return _storage._hasAttendee_p != nil}
  /// Clears the value of `hasAttendee_p`. Subsequent reads from it will return its default value.
//  public mutating func clearHasAttendee_p() {_uniqueStorage()._hasAttendee_p = nil}

  public var hasLocation_p: Bool {
    get {return _storage._hasLocation_p ?? false}
    set {_uniqueStorage()._hasLocation_p = newValue}
  }
  /// Returns true if `hasLocation_p` has been explicitly set.
//  public var hasHasLocation_p: Bool {return _storage._hasLocation_p != nil}
  /// Clears the value of `hasLocation_p`. Subsequent reads from it will return its default value.
//  public mutating func clearHasLocation_p() {_uniqueStorage()._hasLocation_p = nil}

  public var version: Int64 {
    get {return _storage._version ?? 0}
    set {_uniqueStorage()._version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {_uniqueStorage()._version = nil}

  public var sequence: Int32 {
    get {return _storage._sequence ?? 0}
    set {_uniqueStorage()._sequence = newValue}
  }
  /// Returns true if `sequence` has been explicitly set.
//  public var hasSequence: Bool {return _storage._sequence != nil}
  /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
//  public mutating func clearSequence() {_uniqueStorage()._sequence = nil}

  public var type: LarkNCExtensionPB_Entities_CalendarEvent.TypeEnum {
    get {return _storage._type ?? .defaultType}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}

  public var meetingID: String {
    get {return _storage._meetingID ?? String()}
    set {_uniqueStorage()._meetingID = newValue}
  }
  /// Returns true if `meetingID` has been explicitly set.
//  public var hasMeetingID: Bool {return _storage._meetingID != nil}
  /// Clears the value of `meetingID`. Subsequent reads from it will return its default value.
//  public mutating func clearMeetingID() {_uniqueStorage()._meetingID = nil}

  /// 已废弃
  public var docsObjToken: String {
    get {return _storage._docsObjToken ?? String()}
    set {_uniqueStorage()._docsObjToken = newValue}
  }
  /// Returns true if `docsObjToken` has been explicitly set.
//  public var hasDocsObjToken: Bool {return _storage._docsObjToken != nil}
  /// Clears the value of `docsObjToken`. Subsequent reads from it will return its default value.
//  public mutating func clearDocsObjToken() {_uniqueStorage()._docsObjToken = nil}

  /// docs 富文本描述
  public var docsDescription: String {
    get {return _storage._docsDescription ?? String()}
    set {_uniqueStorage()._docsDescription = newValue}
  }
  /// Returns true if `docsDescription` has been explicitly set.
//  public var hasDocsDescription: Bool {return _storage._docsDescription != nil}
  /// Clears the value of `docsDescription`. Subsequent reads from it will return its default value.
//  public mutating func clearDocsDescription() {_uniqueStorage()._docsDescription = nil}

  /// 日程接受者的主日历ID
  public var successorCalendarID: String {
    get {return _storage._successorCalendarID ?? String()}
    set {_uniqueStorage()._successorCalendarID = newValue}
  }
  /// Returns true if `successorCalendarID` has been explicitly set.
//  public var hasSuccessorCalendarID: Bool {return _storage._successorCalendarID != nil}
  /// Clears the value of `successorCalendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearSuccessorCalendarID() {_uniqueStorage()._successorCalendarID = nil}

  public var notificationType: LarkNCExtensionPB_Entities_CalendarEvent.NotificationType {
    get {return _storage._notificationType ?? .defaultNotificationType}
    set {_uniqueStorage()._notificationType = newValue}
  }
  /// Returns true if `notificationType` has been explicitly set.
//  public var hasNotificationType: Bool {return _storage._notificationType != nil}
  /// Clears the value of `notificationType`. Subsequent reads from it will return its default value.
//  public mutating func clearNotificationType() {_uniqueStorage()._notificationType = nil}

  /// 是否外部日程
  public var isCrossTenant: Bool {
    get {return _storage._isCrossTenant ?? false}
    set {_uniqueStorage()._isCrossTenant = newValue}
  }
  /// Returns true if `isCrossTenant` has been explicitly set.
  public var hasIsCrossTenant: Bool {return _storage._isCrossTenant != nil}
  /// Clears the value of `isCrossTenant`. Subsequent reads from it will return its default value.
//  public mutating func clearIsCrossTenant() {_uniqueStorage()._isCrossTenant = nil}

  /// 是否解散会议
  public var dissolveMeeting: Bool {
    get {return _storage._dissolveMeeting ?? true}
    set {_uniqueStorage()._dissolveMeeting = newValue}
  }
  /// Returns true if `dissolveMeeting` has been explicitly set.
//  public var hasDissolveMeeting: Bool {return _storage._dissolveMeeting != nil}
  /// Clears the value of `dissolveMeeting`. Subsequent reads from it will return its default value.
//  public mutating func clearDissolveMeeting() {_uniqueStorage()._dissolveMeeting = nil}

  public var calendarEventGroupAttendees: [LarkNCExtensionPB_Entities_CalendarEventGroupAttendee] {
    get {return _storage._calendarEventGroupAttendees}
    set {_uniqueStorage()._calendarEventGroupAttendees = newValue}
  }

  public var calendarResources: [LarkNCExtensionPB_Entities_CalendarResource] {
    get {return _storage._calendarResources}
    set {_uniqueStorage()._calendarResources = newValue}
  }

  public var calendarBuildings: [LarkNCExtensionPB_Entities_CalendarBuilding] {
    get {return _storage._calendarBuildings}
    set {_uniqueStorage()._calendarBuildings = newValue}
  }

  /// 该日程的会议纪要信息。
  public var meetingMinuteURL: String {
    get {return _storage._meetingMinuteURL ?? String()}
    set {_uniqueStorage()._meetingMinuteURL = newValue}
  }
  /// Returns true if `meetingMinuteURL` has been explicitly set.
//  public var hasMeetingMinuteURL: Bool {return _storage._meetingMinuteURL != nil}
  /// Clears the value of `meetingMinuteURL`. Subsequent reads from it will return its default value.
//  public mutating func clearMeetingMinuteURL() {_uniqueStorage()._meetingMinuteURL = nil}

  public var isMeetingMinuteUpdate: Bool {
    get {return _storage._isMeetingMinuteUpdate ?? false}
    set {_uniqueStorage()._isMeetingMinuteUpdate = newValue}
  }
  /// Returns true if `isMeetingMinuteUpdate` has been explicitly set.
//  public var hasIsMeetingMinuteUpdate: Bool {return _storage._isMeetingMinuteUpdate != nil}
  /// Clears the value of `isMeetingMinuteUpdate`. Subsequent reads from it will return its default value.
//  public mutating func clearIsMeetingMinuteUpdate() {_uniqueStorage()._isMeetingMinuteUpdate = nil}

  public var vchatUniqueID: String {
    get {return _storage._vchatUniqueID ?? String()}
    set {_uniqueStorage()._vchatUniqueID = newValue}
  }
  /// Returns true if `vchatUniqueID` has been explicitly set.
//  public var hasVchatUniqueID: Bool {return _storage._vchatUniqueID != nil}
  /// Clears the value of `vchatUniqueID`. Subsequent reads from it will return its default value.
//  public mutating func clearVchatUniqueID() {_uniqueStorage()._vchatUniqueID = nil}

  /// Google日程相关的信息
  public var googleEventExtra: LarkNCExtensionPB_Entities_GoogleEventExtra {
    get {return _storage._googleEventExtra ?? LarkNCExtensionPB_Entities_GoogleEventExtra()}
    set {_uniqueStorage()._googleEventExtra = newValue}
  }
  /// Returns true if `googleEventExtra` has been explicitly set.
//  public var hasGoogleEventExtra: Bool {return _storage._googleEventExtra != nil}
  /// Clears the value of `googleEventExtra`. Subsequent reads from it will return its default value.
//  public mutating func clearGoogleEventExtra() {_uniqueStorage()._googleEventExtra = nil}

  public var inviteOperatorID: String {
    get {return _storage._inviteOperatorID ?? String()}
    set {_uniqueStorage()._inviteOperatorID = newValue}
  }
  /// Returns true if `inviteOperatorID` has been explicitly set.
//  public var hasInviteOperatorID: Bool {return _storage._inviteOperatorID != nil}
  /// Clears the value of `inviteOperatorID`. Subsequent reads from it will return its default value.
//  public mutating func clearInviteOperatorID() {_uniqueStorage()._inviteOperatorID = nil}

  public var attachments: [LarkNCExtensionPB_Entities_CalendarEventAttachment] {
    get {return _storage._attachments}
    set {_uniqueStorage()._attachments = newValue}
  }

  public var attendeeSource: Int32 {
    get {return _storage._attendeeSource ?? 1}
    set {_uniqueStorage()._attendeeSource = newValue}
  }
  /// Returns true if `attendeeSource` has been explicitly set.
//  public var hasAttendeeSource: Bool {return _storage._attendeeSource != nil}
  /// Clears the value of `attendeeSource`. Subsequent reads from it will return its default value.
//  public mutating func clearAttendeeSource() {_uniqueStorage()._attendeeSource = nil}

  /// 日程UI描述 Deprecated
  public var schema: Data {
    get {return _storage._schema ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._schema = newValue}
  }
  /// Returns true if `schema` has been explicitly set.
  public var hasSchema: Bool {return _storage._schema != nil}
  /// Clears the value of `schema`. Subsequent reads from it will return its default value.
//  public mutating func clearSchema() {_uniqueStorage()._schema = nil}

  public var category: LarkNCExtensionPB_Entities_CalendarEvent.Category {
    get {return _storage._category ?? .defaultCategory}
    set {_uniqueStorage()._category = newValue}
  }
  /// Returns true if `category` has been explicitly set.
//  public var hasCategory: Bool {return _storage._category != nil}
  /// Clears the value of `category`. Subsequent reads from it will return its default value.
//  public mutating func clearCategory() {_uniqueStorage()._category = nil}

  /// 飞阅会 doc 链接
  public var samePageMeeting: LarkNCExtensionPB_Entities_SamePageMeetingInfo {
    get {return _storage._samePageMeeting ?? LarkNCExtensionPB_Entities_SamePageMeetingInfo()}
    set {_uniqueStorage()._samePageMeeting = newValue}
  }
  /// Returns true if `samePageMeeting` has been explicitly set.
//  public var hasSamePageMeeting: Bool {return _storage._samePageMeeting != nil}
  /// Clears the value of `samePageMeeting`. Subsequent reads from it will return its default value.
//  public mutating func clearSamePageMeeting() {_uniqueStorage()._samePageMeeting = nil}

  /// 日程UI描
  public var schemaV2: Data {
    get {return _storage._schemaV2 ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._schemaV2 = newValue}
  }
  /// Returns true if `schemaV2` has been explicitly set.
//  public var hasSchemaV2: Bool {return _storage._schemaV2 != nil}
  /// Clears the value of `schemaV2`. Subsequent reads from it will return its default value.
//  public mutating func clearSchemaV2() {_uniqueStorage()._schemaV2 = nil}

  public var attendeeInfo: LarkNCExtensionPB_Entities_EventAttendeeInfo {
    get {return _storage._attendeeInfo ?? LarkNCExtensionPB_Entities_EventAttendeeInfo()}
    set {_uniqueStorage()._attendeeInfo = newValue}
  }
  /// Returns true if `attendeeInfo` has been explicitly set.
//  public var hasAttendeeInfo: Bool {return _storage._attendeeInfo != nil}
  /// Clears the value of `attendeeInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearAttendeeInfo() {_uniqueStorage()._attendeeInfo = nil}

  public var videoConfig: LarkNCExtensionPB_Entities_EventVChatConfig {
    get {return _storage._videoConfig ?? LarkNCExtensionPB_Entities_EventVChatConfig()}
    set {_uniqueStorage()._videoConfig = newValue}
  }
  /// Returns true if `videoConfig` has been explicitly set.
//  public var hasVideoConfig: Bool {return _storage._videoConfig != nil}
  /// Clears the value of `videoConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearVideoConfig() {_uniqueStorage()._videoConfig = nil}

  public var lastDate: Int64 {
    get {return _storage._lastDate ?? 0}
    set {_uniqueStorage()._lastDate = newValue}
  }
  /// Returns true if `lastDate` has been explicitly set.
//  public var hasLastDate: Bool {return _storage._lastDate != nil}
  /// Clears the value of `lastDate`. Subsequent reads from it will return its default value.
//  public mutating func clearLastDate() {_uniqueStorage()._lastDate = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum Source: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case web // = 1
    case ios // = 2
    case iosApp // = 3
    case android // = 4
    case androidApp // = 5
    case pcClient // = 6
    case google // = 7
    case people // = 8
    case placeHolder // = 9
    case openApi // = 10
    case caldav // = 11
    case timeoff // = 12
    case email // = 13
    case exchange // = 14

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .web
      case 2: self = .ios
      case 3: self = .iosApp
      case 4: self = .android
      case 5: self = .androidApp
      case 6: self = .pcClient
      case 7: self = .google
      case 8: self = .people
      case 9: self = .placeHolder
      case 10: self = .openApi
      case 11: self = .caldav
      case 12: self = .timeoff
      case 13: self = .email
      case 14: self = .exchange
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .web: return 1
      case .ios: return 2
      case .iosApp: return 3
      case .android: return 4
      case .androidApp: return 5
      case .pcClient: return 6
      case .google: return 7
      case .people: return 8
      case .placeHolder: return 9
      case .openApi: return 10
      case .caldav: return 11
      case .timeoff: return 12
      case .email: return 13
      case .exchange: return 14
      }
    }

  }

  public enum Visibility: LarkHTTP.Enum {
    public typealias RawValue = Int
    case `default` // = 1
    case `public` // = 2
    case `private` // = 3

    public init() {
      self = .default
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .default
      case 2: self = .public
      case 3: self = .private
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .default: return 1
      case .public: return 2
      case .private: return 3
      }
    }

  }

  public enum Status: LarkHTTP.Enum {
    public typealias RawValue = Int
    case tentative // = 1
    case confirmed // = 2
    case cancelled // = 3

    public init() {
      self = .tentative
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .tentative
      case 2: self = .confirmed
      case 3: self = .cancelled
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .tentative: return 1
      case .confirmed: return 2
      case .cancelled: return 3
      }
    }

  }

  public enum TypeEnum: LarkHTTP.Enum {
    public typealias RawValue = Int
    case defaultType // = 1
    case meeting // = 2

    public init() {
      self = .defaultType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .defaultType
      case 2: self = .meeting
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .defaultType: return 1
      case .meeting: return 2
      }
    }

  }

  public enum NotificationType: LarkHTTP.Enum {
    public typealias RawValue = Int

    /// 默认情况,没有设置
    case defaultNotificationType // = 1

    /// 不发通知
    case noNotification // = 2

    /// 发送通知
    case sendNotification // = 3

    public init() {
      self = .defaultNotificationType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .defaultNotificationType
      case 2: self = .noNotification
      case 3: self = .sendNotification
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .defaultNotificationType: return 1
      case .noNotification: return 2
      case .sendNotification: return 3
      }
    }

  }

  public enum SelfAttendeeStatus: LarkHTTP.Enum {
    public typealias RawValue = Int
    case attendeeStatusNeedsAction // = 1
    case attendeeStatusAccept // = 2
    case attendeeStatusTentative // = 3
    case attendeeStatusDecline // = 4
    case attendeeStatusRemoved // = 5

    public init() {
      self = .attendeeStatusNeedsAction
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .attendeeStatusNeedsAction
      case 2: self = .attendeeStatusAccept
      case 3: self = .attendeeStatusTentative
      case 4: self = .attendeeStatusDecline
      case 5: self = .attendeeStatusRemoved
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .attendeeStatusNeedsAction: return 1
      case .attendeeStatusAccept: return 2
      case .attendeeStatusTentative: return 3
      case .attendeeStatusDecline: return 4
      case .attendeeStatusRemoved: return 5
      }
    }

  }

  /// 为了客户端的向前兼容性，不在数据结构中直接使用该Enum，仅表示值。
  enum AttendeeSource: LarkHTTP.Enum {
    public typealias RawValue = Int
    case lark // = 1
    case mail // = 2
    case exchangeSync // = 3

    public init() {
      self = .lark
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .lark
      case 2: self = .mail
      case 3: self = .exchangeSync
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .lark: return 1
      case .mail: return 2
      case .exchangeSync: return 3
      }
    }

  }

  /// 飞阅会日程 枚举类型
  public enum Category: LarkHTTP.Enum {
    public typealias RawValue = Int
    case defaultCategory // = 1

    /// 飞阅会类型日程
    case samePageMeeting // = 2

    /// 针对会议室限制的虚假日程
    case resourceStrategy // = 3

    /// 针对会议室征用的虚假日程
    case resourceRequisition // = 4

    public init() {
      self = .defaultCategory
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .defaultCategory
      case 2: self = .samePageMeeting
      case 3: self = .resourceStrategy
      case 4: self = .resourceRequisition
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .defaultCategory: return 1
      case .samePageMeeting: return 2
      case .resourceStrategy: return 3
      case .resourceRequisition: return 4
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_CalendarEvent.Source: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_CalendarEvent.Visibility: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_CalendarEvent.Status: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_CalendarEvent.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_CalendarEvent.NotificationType: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_CalendarEvent.SelfAttendeeStatus: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_CalendarEvent.AttendeeSource: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_CalendarEvent.Category: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_CalendarEventExtraInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// todo: 需要补充注释做什么用的
//  public var chatterID: String {
//    get {return _storage._chatterID ?? String()}
//    set {_uniqueStorage()._chatterID = newValue}
//  }
  /// Returns true if `chatterID` has been explicitly set.
//  public var hasChatterID: Bool {return _storage._chatterID != nil}
  /// Clears the value of `chatterID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatterID() {_uniqueStorage()._chatterID = nil}
//
//  public var meeting: LarkNCExtensionPB_Entities_Meeting {
//    get {return _storage._meeting ?? LarkNCExtensionPB_Entities_Meeting()}
//    set {_uniqueStorage()._meeting = newValue}
//  }
  /// Returns true if `meeting` has been explicitly set.
//  public var hasMeeting: Bool {return _storage._meeting != nil}
  /// Clears the value of `meeting`. Subsequent reads from it will return its default value.
//  public mutating func clearMeeting() {_uniqueStorage()._meeting = nil}
//
//  public var vChat: LarkNCExtensionPB_Entities_Vchat {
//    get {return _storage._vChat ?? LarkNCExtensionPB_Entities_Vchat()}
//    set {_uniqueStorage()._vChat = newValue}
//  }
  /// Returns true if `vChat` has been explicitly set.
//  public var hasVChat: Bool {return _storage._vChat != nil}
  /// Clears the value of `vChat`. Subsequent reads from it will return its default value.
//  public mutating func clearVChat() {_uniqueStorage()._vChat = nil}
//
//  public var briefInfo: LarkNCExtensionPB_Entities_CalendarBriefInfo {
//    get {return _storage._briefInfo ?? LarkNCExtensionPB_Entities_CalendarBriefInfo()}
//    set {_uniqueStorage()._briefInfo = newValue}
//  }
  /// Returns true if `briefInfo` has been explicitly set.
//  public var hasBriefInfo: Bool {return _storage._briefInfo != nil}
  /// Clears the value of `briefInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearBriefInfo() {_uniqueStorage()._briefInfo = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// 返回的日程
//public struct LarkNCExtensionPB_Entities_CalendarEventInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var calendarEventCore: LarkNCExtensionPB_Entities_CalendarEventCore {
//    get {return _storage._calendarEventCore ?? LarkNCExtensionPB_Entities_CalendarEventCore()}
//    set {_uniqueStorage()._calendarEventCore = newValue}
//  }
  /// Returns true if `calendarEventCore` has been explicitly set.
//  public var hasCalendarEventCore: Bool {return _storage._calendarEventCore != nil}
  /// Clears the value of `calendarEventCore`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarEventCore() {_uniqueStorage()._calendarEventCore = nil}
//
//  public var extraInfo: LarkNCExtensionPB_Entities_CalendarEventExtraInfo {
//    get {return _storage._extraInfo ?? LarkNCExtensionPB_Entities_CalendarEventExtraInfo()}
//    set {_uniqueStorage()._extraInfo = newValue}
//  }
  /// Returns true if `extraInfo` has been explicitly set.
//  public var hasExtraInfo: Bool {return _storage._extraInfo != nil}
  /// Clears the value of `extraInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearExtraInfo() {_uniqueStorage()._extraInfo = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

public struct LarkNCExtensionPB_Entities_GoogleEventExtra {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var dataSource: LarkNCExtensionPB_Entities_GoogleEventExtra.DataSource {
    get {return _dataSource ?? .google}
    set {_dataSource = newValue}
  }
  /// Returns true if `dataSource` has been explicitly set.
//  public var hasDataSource: Bool {return self._dataSource != nil}
  /// Clears the value of `dataSource`. Subsequent reads from it will return its default value.
//  public mutating func clearDataSource() {self._dataSource = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum DataSource: LarkHTTP.Enum {
    public typealias RawValue = Int
    case google // = 1
    case cache // = 2

    public init() {
      self = .google
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .google
      case 2: self = .cache
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .google: return 1
      case .cache: return 2
      }
    }

  }

  public init() {}

  fileprivate var _dataSource: LarkNCExtensionPB_Entities_GoogleEventExtra.DataSource? = nil
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_GoogleEventExtra.DataSource: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_EventExtra {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var type: LarkNCExtensionPB_Entities_CalendarEvent.TypeEnum {
//    get {return _storage._type ?? .defaultType}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
//  public var calendarSchemaCollection: LarkNCExtensionPB_Entities_CalendarSchemaCollection {
//    get {return _storage._calendarSchemaCollection ?? LarkNCExtensionPB_Entities_CalendarSchemaCollection()}
//    set {_uniqueStorage()._calendarSchemaCollection = newValue}
//  }
  /// Returns true if `calendarSchemaCollection` has been explicitly set.
//  public var hasCalendarSchemaCollection: Bool {return _storage._calendarSchemaCollection != nil}
  /// Clears the value of `calendarSchemaCollection`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarSchemaCollection() {_uniqueStorage()._calendarSchemaCollection = nil}
//
//  public var exceptionCreating: Bool {
//    get {return _storage._exceptionCreating ?? false}
//    set {_uniqueStorage()._exceptionCreating = newValue}
//  }
  /// Returns true if `exceptionCreating` has been explicitly set.
//  public var hasExceptionCreating: Bool {return _storage._exceptionCreating != nil}
  /// Clears the value of `exceptionCreating`. Subsequent reads from it will return its default value.
//  public mutating func clearExceptionCreating() {_uniqueStorage()._exceptionCreating = nil}
//
//  public var vchatConfig: LarkNCExtensionPB_Entities_EventVChatConfig {
//    get {return _storage._vchatConfig ?? LarkNCExtensionPB_Entities_EventVChatConfig()}
//    set {_uniqueStorage()._vchatConfig = newValue}
//  }
  /// Returns true if `vchatConfig` has been explicitly set.
//  public var hasVchatConfig: Bool {return _storage._vchatConfig != nil}
  /// Clears the value of `vchatConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearVchatConfig() {_uniqueStorage()._vchatConfig = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

public struct LarkNCExtensionPB_Entities_EventVChatConfig {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var vchatType: LarkNCExtensionPB_Entities_Vchat.VChatType {
    get {return _storage._vchatType ?? .unKnown}
    set {_uniqueStorage()._vchatType = newValue}
  }
  /// Returns true if `vchatType` has been explicitly set.
//  public var hasVchatType: Bool {return _storage._vchatType != nil}
  /// Clears the value of `vchatType`. Subsequent reads from it will return its default value.
//  public mutating func clearVchatType() {_uniqueStorage()._vchatType = nil}

  ///跟日程绑定的第三方链接，VChat那个meeting_url是跟meeting绑定的
  public var meetingURL: String {
    get {return _storage._meetingURL ?? String()}
    set {_uniqueStorage()._meetingURL = newValue}
  }
  /// Returns true if `meetingURL` has been explicitly set.
//  public var hasMeetingURL: Bool {return _storage._meetingURL != nil}
  /// Clears the value of `meetingURL`. Subsequent reads from it will return its default value.
//  public mutating func clearMeetingURL() {_uniqueStorage()._meetingURL = nil}

  public var customizedConfigs: OneOf_CustomizedConfigs? {
    get {return _storage._customizedConfigs}
    set {_uniqueStorage()._customizedConfigs = newValue}
  }

  public var otherConfigs: LarkNCExtensionPB_Entities_EventVChatConfig.OtherVideoMeetingConfigs {
    get {
      if case .otherConfigs(let v)? = _storage._customizedConfigs {return v}
      return LarkNCExtensionPB_Entities_EventVChatConfig.OtherVideoMeetingConfigs()
    }
    set {_uniqueStorage()._customizedConfigs = .otherConfigs(newValue)}
  }

  public var googleConfigs: LarkNCExtensionPB_Entities_EventVChatConfig.GoogleVideoConferenceConfig {
    get {
      if case .googleConfigs(let v)? = _storage._customizedConfigs {return v}
      return LarkNCExtensionPB_Entities_EventVChatConfig.GoogleVideoConferenceConfig()
    }
    set {_uniqueStorage()._customizedConfigs = .googleConfigs(newValue)}
  }

  public var larkVcBindingData: LarkNCExtensionPB_Entities_EventVChatConfig.LarkVCBindingData {
    get {return _storage._larkVcBindingData ?? LarkNCExtensionPB_Entities_EventVChatConfig.LarkVCBindingData()}
    set {_uniqueStorage()._larkVcBindingData = newValue}
  }
  /// Returns true if `larkVcBindingData` has been explicitly set.
//  public var hasLarkVcBindingData: Bool {return _storage._larkVcBindingData != nil}
  /// Clears the value of `larkVcBindingData`. Subsequent reads from it will return its default value.
//  public mutating func clearLarkVcBindingData() {_uniqueStorage()._larkVcBindingData = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum OneOf_CustomizedConfigs: Equatable {
    case otherConfigs(LarkNCExtensionPB_Entities_EventVChatConfig.OtherVideoMeetingConfigs)
    case googleConfigs(LarkNCExtensionPB_Entities_EventVChatConfig.GoogleVideoConferenceConfig)

  #if !swift(>=4.1)
    public static func ==(lhs: LarkNCExtensionPB_Entities_EventVChatConfig.OneOf_CustomizedConfigs, rhs: LarkNCExtensionPB_Entities_EventVChatConfig.OneOf_CustomizedConfigs) -> Bool {
      switch (lhs, rhs) {
      case (.otherConfigs(let l), .otherConfigs(let r)): return l == r
      case (.googleConfigs(let l), .googleConfigs(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct OtherVideoMeetingConfigs {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var icon: LarkNCExtensionPB_Entities_EventVChatConfig.OtherVideoMeetingConfigs.IconType {
      get {return _icon ?? .default}
      set {_icon = newValue}
    }
    /// Returns true if `icon` has been explicitly set.
    public var hasIcon: Bool {return self._icon != nil}
    /// Clears the value of `icon`. Subsequent reads from it will return its default value.
//    public mutating func clearIcon() {self._icon = nil}

    ///为空使用默认文案
    public var customizedDescription: String {
      get {return _customizedDescription ?? String()}
      set {_customizedDescription = newValue}
    }
    /// Returns true if `customizedDescription` has been explicitly set.
//    public var hasCustomizedDescription: Bool {return self._customizedDescription != nil}
    /// Clears the value of `customizedDescription`. Subsequent reads from it will return its default value.
//    public mutating func clearCustomizedDescription() {self._customizedDescription = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public enum IconType: LarkHTTP.Enum {
      public typealias RawValue = Int
      case `default` // = 0
      case videoMeeting // = 1
      case live // = 2

      public init() {
        self = .default
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .default
        case 1: self = .videoMeeting
        case 2: self = .live
        default: return nil
        }
      }

      public var rawValue: Int {
        switch self {
        case .default: return 0
        case .videoMeeting: return 1
        case .live: return 2
        }
      }

    }

    public init() {}

    fileprivate var _icon: LarkNCExtensionPB_Entities_EventVChatConfig.OtherVideoMeetingConfigs.IconType? = nil
    fileprivate var _customizedDescription: String? = nil
  }

  public struct GoogleVideoConferenceConfig {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// 注：本次新增数据目前只有google日程会返回，飞书日程的vc数据逻辑不变
    public var phoneNumber: String {
      get {return _phoneNumber ?? String()}
      set {_phoneNumber = newValue}
    }
    /// Returns true if `phoneNumber` has been explicitly set.
//    public var hasPhoneNumber: Bool {return self._phoneNumber != nil}
    /// Clears the value of `phoneNumber`. Subsequent reads from it will return its default value.
//    public mutating func clearPhoneNumber() {self._phoneNumber = nil}

    ///更多电话号码(需要跳转网页)，https://tel.meet/yhv-wekt-dkv?pin=8588708237981
    public var morePhoneNumberURL: String {
      get {return _morePhoneNumberURL ?? String()}
      set {_morePhoneNumberURL = newValue}
    }
    /// Returns true if `morePhoneNumberURL` has been explicitly set.
//    public var hasMorePhoneNumberURL: Bool {return self._morePhoneNumberURL != nil}
    /// Clears the value of `morePhoneNumberURL`. Subsequent reads from it will return its default value.
//    public mutating func clearMorePhoneNumberURL() {self._morePhoneNumberURL = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _phoneNumber: String? = nil
    fileprivate var _morePhoneNumberURL: String? = nil
  }

  public struct LarkVCBindingData {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var vcSettingID: String {
      get {return _vcSettingID ?? String()}
      set {_vcSettingID = newValue}
    }
    /// Returns true if `vcSettingID` has been explicitly set.
//    public var hasVcSettingID: Bool {return self._vcSettingID != nil}
    /// Clears the value of `vcSettingID`. Subsequent reads from it will return its default value.
//    public mutating func clearVcSettingID() {self._vcSettingID = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _vcSettingID: String? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

//public struct LarkNCExtensionPB_Entities_CalendarEventRefExtra {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var attendeeCalendarIds: [Int64] = []
//
//  public var isAttendeeListSetted: Bool {
//    get {return _isAttendeeListSetted ?? false}
//    set {_isAttendeeListSetted = newValue}
//  }
  /// Returns true if `isAttendeeListSetted` has been explicitly set.
//  public var hasIsAttendeeListSetted: Bool {return self._isAttendeeListSetted != nil}
  /// Clears the value of `isAttendeeListSetted`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAttendeeListSetted() {self._isAttendeeListSetted = nil}
//
//  public var davExtra: String {
//    get {return _davExtra ?? String()}
//    set {_davExtra = newValue}
//  }
  /// Returns true if `davExtra` has been explicitly set.
//  public var hasDavExtra: Bool {return self._davExtra != nil}
  /// Clears the value of `davExtra`. Subsequent reads from it will return its default value.
//  public mutating func clearDavExtra() {self._davExtra = nil}
//
//  public var maxVersion: Int64 {
//    get {return _maxVersion ?? 0}
//    set {_maxVersion = newValue}
//  }
  /// Returns true if `maxVersion` has been explicitly set.
//  public var hasMaxVersion: Bool {return self._maxVersion != nil}
  /// Clears the value of `maxVersion`. Subsequent reads from it will return its default value.
//  public mutating func clearMaxVersion() {self._maxVersion = nil}
//
//  public var eventChangeVersion: Int64 {
//    get {return _eventChangeVersion ?? 0}
//    set {_eventChangeVersion = newValue}
//  }
  /// Returns true if `eventChangeVersion` has been explicitly set.
//  public var hasEventChangeVersion: Bool {return self._eventChangeVersion != nil}
  /// Clears the value of `eventChangeVersion`. Subsequent reads from it will return its default value.
//  public mutating func clearEventChangeVersion() {self._eventChangeVersion = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _isAttendeeListSetted: Bool? = nil
//  fileprivate var _davExtra: String? = nil
//  fileprivate var _maxVersion: Int64? = nil
//  fileprivate var _eventChangeVersion: Int64? = nil
//}

//public struct LarkNCExtensionPB_Entities_CalendarEventCore {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
//  public var uniqueKey: String {
//    get {return _storage._uniqueKey ?? String()}
//    set {_uniqueStorage()._uniqueKey = newValue}
//  }
  /// Returns true if `uniqueKey` has been explicitly set.
//  public var hasUniqueKey: Bool {return _storage._uniqueKey != nil}
  /// Clears the value of `uniqueKey`. Subsequent reads from it will return its default value.
//  public mutating func clearUniqueKey() {_uniqueStorage()._uniqueKey = nil}
//
//  public var originalTime: Int64 {
//    get {return _storage._originalTime ?? 0}
//    set {_uniqueStorage()._originalTime = newValue}
//  }
  /// Returns true if `originalTime` has been explicitly set.
//  public var hasOriginalTime: Bool {return _storage._originalTime != nil}
  /// Clears the value of `originalTime`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginalTime() {_uniqueStorage()._originalTime = nil}
//
//  public var calendarID: String {
//    get {return _storage._calendarID ?? String()}
//    set {_uniqueStorage()._calendarID = newValue}
//  }
  /// Returns true if `calendarID` has been explicitly set.
//  public var hasCalendarID: Bool {return _storage._calendarID != nil}
  /// Clears the value of `calendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarID() {_uniqueStorage()._calendarID = nil}
//
//  public var creatorCalendarID: String {
//    get {return _storage._creatorCalendarID ?? String()}
//    set {_uniqueStorage()._creatorCalendarID = newValue}
//  }
  /// Returns true if `creatorCalendarID` has been explicitly set.
//  public var hasCreatorCalendarID: Bool {return _storage._creatorCalendarID != nil}
  /// Clears the value of `creatorCalendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearCreatorCalendarID() {_uniqueStorage()._creatorCalendarID = nil}
//
//  public var organizerCalendarID: String {
//    get {return _storage._organizerCalendarID ?? String()}
//    set {_uniqueStorage()._organizerCalendarID = newValue}
//  }
  /// Returns true if `organizerCalendarID` has been explicitly set.
//  public var hasOrganizerCalendarID: Bool {return _storage._organizerCalendarID != nil}
  /// Clears the value of `organizerCalendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearOrganizerCalendarID() {_uniqueStorage()._organizerCalendarID = nil}
//
//  public var version: Int64 {
//    get {return _storage._version ?? 0}
//    set {_uniqueStorage()._version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {_uniqueStorage()._version = nil}
//
//  public var rrule: String {
//    get {return _storage._rrule ?? String()}
//    set {_uniqueStorage()._rrule = newValue}
//  }
  /// Returns true if `rrule` has been explicitly set.
//  public var hasRrule: Bool {return _storage._rrule != nil}
  /// Clears the value of `rrule`. Subsequent reads from it will return its default value.
//  public mutating func clearRrule() {_uniqueStorage()._rrule = nil}
//
//  public var start: Int64 {
//    get {return _storage._start ?? 0}
//    set {_uniqueStorage()._start = newValue}
//  }
  /// Returns true if `start` has been explicitly set.
//  public var hasStart: Bool {return _storage._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
//  public mutating func clearStart() {_uniqueStorage()._start = nil}
//
//  public var end: Int64 {
//    get {return _storage._end ?? 0}
//    set {_uniqueStorage()._end = newValue}
//  }
  /// Returns true if `end` has been explicitly set.
//  public var hasEnd: Bool {return _storage._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
//  public mutating func clearEnd() {_uniqueStorage()._end = nil}
//
//  public var status: LarkNCExtensionPB_Entities_CalendarEventCore.Status {
//    get {return _storage._status ?? .confirmed}
//    set {_uniqueStorage()._status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
//  public var isAllDay: Bool {
//    get {return _storage._isAllDay ?? false}
//    set {_uniqueStorage()._isAllDay = newValue}
//  }
  /// Returns true if `isAllDay` has been explicitly set.
//  public var hasIsAllDay: Bool {return _storage._isAllDay != nil}
  /// Clears the value of `isAllDay`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAllDay() {_uniqueStorage()._isAllDay = nil}
//
//  public var isDeleted: Bool {
//    get {return _storage._isDeleted ?? false}
//    set {_uniqueStorage()._isDeleted = newValue}
//  }
  /// Returns true if `isDeleted` has been explicitly set.
//  public var hasIsDeleted: Bool {return _storage._isDeleted != nil}
  /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDeleted() {_uniqueStorage()._isDeleted = nil}
//
//  public var isFree: Bool {
//    get {return _storage._isFree ?? false}
//    set {_uniqueStorage()._isFree = newValue}
//  }
  /// Returns true if `isFree` has been explicitly set.
//  public var hasIsFree: Bool {return _storage._isFree != nil}
  /// Clears the value of `isFree`. Subsequent reads from it will return its default value.
//  public mutating func clearIsFree() {_uniqueStorage()._isFree = nil}
//
//  public var ack: Bool {
//    get {return _storage._ack ?? true}
//    set {_uniqueStorage()._ack = newValue}
//  }
  /// Returns true if `ack` has been explicitly set.
//  public var hasAck: Bool {return _storage._ack != nil}
  /// Clears the value of `ack`. Subsequent reads from it will return its default value.
//  public mutating func clearAck() {_uniqueStorage()._ack = nil}
//
//  public var needUpdate: Bool {
//    get {return _storage._needUpdate ?? true}
//    set {_uniqueStorage()._needUpdate = newValue}
//  }
  /// Returns true if `needUpdate` has been explicitly set.
//  public var hasNeedUpdate: Bool {return _storage._needUpdate != nil}
  /// Clears the value of `needUpdate`. Subsequent reads from it will return its default value.
//  public mutating func clearNeedUpdate() {_uniqueStorage()._needUpdate = nil}
//
//  public var selfAttendeeStatus: LarkNCExtensionPB_Entities_CalendarEventCore.SelfAttendeeStatus {
//    get {return _storage._selfAttendeeStatus ?? .attendeeStatusNeedsAction}
//    set {_uniqueStorage()._selfAttendeeStatus = newValue}
//  }
  /// Returns true if `selfAttendeeStatus` has been explicitly set.
//  public var hasSelfAttendeeStatus: Bool {return _storage._selfAttendeeStatus != nil}
  /// Clears the value of `selfAttendeeStatus`. Subsequent reads from it will return its default value.
//  public mutating func clearSelfAttendeeStatus() {_uniqueStorage()._selfAttendeeStatus = nil}
//
//  public var summary: String {
//    get {return _storage._summary ?? String()}
//    set {_uniqueStorage()._summary = newValue}
//  }
  /// Returns true if `summary` has been explicitly set.
//  public var hasSummary: Bool {return _storage._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
//  public mutating func clearSummary() {_uniqueStorage()._summary = nil}
//
//  public var color: Int32 {
//    get {return _storage._color ?? -1}
//    set {_uniqueStorage()._color = newValue}
//  }
  /// Returns true if `color` has been explicitly set.
//  public var hasColor: Bool {return _storage._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
//  public mutating func clearColor() {_uniqueStorage()._color = nil}
//
  ///日程提醒
//  public var reminders: [LarkNCExtensionPB_Entities_Reminder] {
//    get {return _storage._reminders}
//    set {_uniqueStorage()._reminders = newValue}
//  }
//
//  public var visibility: LarkNCExtensionPB_Entities_CalendarEvent.Visibility {
//    get {return _storage._visibility ?? .default}
//    set {_uniqueStorage()._visibility = newValue}
//  }
  /// Returns true if `visibility` has been explicitly set.
//  public var hasVisibility: Bool {return _storage._visibility != nil}
  /// Clears the value of `visibility`. Subsequent reads from it will return its default value.
//  public mutating func clearVisibility() {_uniqueStorage()._visibility = nil}
//
//  public var locations: [LarkNCExtensionPB_Entities_CalendarEventLocation] {
//    get {return _storage._locations}
//    set {_uniqueStorage()._locations = newValue}
//  }
//
  /// 资源类型参与人
//  public var attendees: [LarkNCExtensionPB_Entities_CalendarEventAttendee] {
//    get {return _storage._attendees}
//    set {_uniqueStorage()._attendees = newValue}
//  }
//
//  public var startTimezone: String {
//    get {return _storage._startTimezone ?? String()}
//    set {_uniqueStorage()._startTimezone = newValue}
//  }
  /// Returns true if `startTimezone` has been explicitly set.
//  public var hasStartTimezone: Bool {return _storage._startTimezone != nil}
  /// Clears the value of `startTimezone`. Subsequent reads from it will return its default value.
//  public mutating func clearStartTimezone() {_uniqueStorage()._startTimezone = nil}
//
//  public var endTimezone: String {
//    get {return _storage._endTimezone ?? String()}
//    set {_uniqueStorage()._endTimezone = newValue}
//  }
  /// Returns true if `endTimezone` has been explicitly set.
//  public var hasEndTimezone: Bool {return _storage._endTimezone != nil}
  /// Clears the value of `endTimezone`. Subsequent reads from it will return its default value.
//  public mutating func clearEndTimezone() {_uniqueStorage()._endTimezone = nil}
//
//  public var source: LarkNCExtensionPB_Entities_CalendarEvent.Source {
//    get {return _storage._source ?? .pcClient}
//    set {_uniqueStorage()._source = newValue}
//  }
  /// Returns true if `source` has been explicitly set.
//  public var hasSource: Bool {return _storage._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
//  public mutating func clearSource() {_uniqueStorage()._source = nil}
//
//  public var type: LarkNCExtensionPB_Entities_CalendarEvent.TypeEnum {
//    get {return _storage._type ?? .defaultType}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
//  public var guestsCanInviteOthers: Bool {
//    get {return _storage._guestsCanInviteOthers ?? true}
//    set {_uniqueStorage()._guestsCanInviteOthers = newValue}
//  }
  /// Returns true if `guestsCanInviteOthers` has been explicitly set.
//  public var hasGuestsCanInviteOthers: Bool {return _storage._guestsCanInviteOthers != nil}
  /// Clears the value of `guestsCanInviteOthers`. Subsequent reads from it will return its default value.
//  public mutating func clearGuestsCanInviteOthers() {_uniqueStorage()._guestsCanInviteOthers = nil}
//
//  public var guestsCanSeeOtherGuests: Bool {
//    get {return _storage._guestsCanSeeOtherGuests ?? true}
//    set {_uniqueStorage()._guestsCanSeeOtherGuests = newValue}
//  }
  /// Returns true if `guestsCanSeeOtherGuests` has been explicitly set.
//  public var hasGuestsCanSeeOtherGuests: Bool {return _storage._guestsCanSeeOtherGuests != nil}
  /// Clears the value of `guestsCanSeeOtherGuests`. Subsequent reads from it will return its default value.
//  public mutating func clearGuestsCanSeeOtherGuests() {_uniqueStorage()._guestsCanSeeOtherGuests = nil}
//
//  public var guestsCanModify: Bool {
//    get {return _storage._guestsCanModify ?? false}
//    set {_uniqueStorage()._guestsCanModify = newValue}
//  }
  /// Returns true if `guestsCanModify` has been explicitly set.
//  public var hasGuestsCanModify: Bool {return _storage._guestsCanModify != nil}
  /// Clears the value of `guestsCanModify`. Subsequent reads from it will return its default value.
//  public mutating func clearGuestsCanModify() {_uniqueStorage()._guestsCanModify = nil}
//
//  public var meetingID: String {
//    get {return _storage._meetingID ?? String()}
//    set {_uniqueStorage()._meetingID = newValue}
//  }
  /// Returns true if `meetingID` has been explicitly set.
//  public var hasMeetingID: Bool {return _storage._meetingID != nil}
  /// Clears the value of `meetingID`. Subsequent reads from it will return its default value.
//  public mutating func clearMeetingID() {_uniqueStorage()._meetingID = nil}
//
  /// 已废弃
//  public var docsObjToken: String {
//    get {return _storage._docsObjToken ?? String()}
//    set {_uniqueStorage()._docsObjToken = newValue}
//  }
  /// Returns true if `docsObjToken` has been explicitly set.
//  public var hasDocsObjToken: Bool {return _storage._docsObjToken != nil}
  /// Clears the value of `docsObjToken`. Subsequent reads from it will return its default value.
//  public mutating func clearDocsObjToken() {_uniqueStorage()._docsObjToken = nil}
//
  /// 日程接受者的主日历ID
//  public var successorCalendarID: String {
//    get {return _storage._successorCalendarID ?? String()}
//    set {_uniqueStorage()._successorCalendarID = newValue}
//  }
  /// Returns true if `successorCalendarID` has been explicitly set.
//  public var hasSuccessorCalendarID: Bool {return _storage._successorCalendarID != nil}
  /// Clears the value of `successorCalendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearSuccessorCalendarID() {_uniqueStorage()._successorCalendarID = nil}
//
  /// 是否外部日程
//  public var isCrossTenant: Bool {
//    get {return _storage._isCrossTenant ?? false}
//    set {_uniqueStorage()._isCrossTenant = newValue}
//  }
  /// Returns true if `isCrossTenant` has been explicitly set.
//  public var hasIsCrossTenant: Bool {return _storage._isCrossTenant != nil}
  /// Clears the value of `isCrossTenant`. Subsequent reads from it will return its default value.
//  public mutating func clearIsCrossTenant() {_uniqueStorage()._isCrossTenant = nil}
//
//  public var calendarEventGroupAttendees: [LarkNCExtensionPB_Entities_CalendarEventGroupAttendee] {
//    get {return _storage._calendarEventGroupAttendees}
//    set {_uniqueStorage()._calendarEventGroupAttendees = newValue}
//  }
//
//  public var originalEvent: String {
//    get {return _storage._originalEvent ?? String()}
//    set {_uniqueStorage()._originalEvent = newValue}
//  }
  /// Returns true if `originalEvent` has been explicitly set.
//  public var hasOriginalEvent: Bool {return _storage._originalEvent != nil}
  /// Clears the value of `originalEvent`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginalEvent() {_uniqueStorage()._originalEvent = nil}
//
  /// 会议纪要url
//  public var meetingMinuteURL: String {
//    get {return _storage._meetingMinuteURL ?? String()}
//    set {_uniqueStorage()._meetingMinuteURL = newValue}
//  }
  /// Returns true if `meetingMinuteURL` has been explicitly set.
//  public var hasMeetingMinuteURL: Bool {return _storage._meetingMinuteURL != nil}
  /// Clears the value of `meetingMinuteURL`. Subsequent reads from it will return its default value.
//  public mutating func clearMeetingMinuteURL() {_uniqueStorage()._meetingMinuteURL = nil}
//
//  public var vchatUniqueID: String {
//    get {return _storage._vchatUniqueID ?? String()}
//    set {_uniqueStorage()._vchatUniqueID = newValue}
//  }
  /// Returns true if `vchatUniqueID` has been explicitly set.
//  public var hasVchatUniqueID: Bool {return _storage._vchatUniqueID != nil}
  /// Clears the value of `vchatUniqueID`. Subsequent reads from it will return its default value.
//  public mutating func clearVchatUniqueID() {_uniqueStorage()._vchatUniqueID = nil}
//
  /// Google日程相关的信息
//  public var googleEventExtra: LarkNCExtensionPB_Entities_GoogleEventExtra {
//    get {return _storage._googleEventExtra ?? LarkNCExtensionPB_Entities_GoogleEventExtra()}
//    set {_uniqueStorage()._googleEventExtra = newValue}
//  }
  /// Returns true if `googleEventExtra` has been explicitly set.
//  public var hasGoogleEventExtra: Bool {return _storage._googleEventExtra != nil}
  /// Clears the value of `googleEventExtra`. Subsequent reads from it will return its default value.
//  public mutating func clearGoogleEventExtra() {_uniqueStorage()._googleEventExtra = nil}
//
//  public var forceUpdate: Bool {
//    get {return _storage._forceUpdate ?? false}
//    set {_uniqueStorage()._forceUpdate = newValue}
//  }
  /// Returns true if `forceUpdate` has been explicitly set.
//  public var hasForceUpdate: Bool {return _storage._forceUpdate != nil}
  /// Clears the value of `forceUpdate`. Subsequent reads from it will return its default value.
//  public mutating func clearForceUpdate() {_uniqueStorage()._forceUpdate = nil}
//
//  public var attendeeSource: Int32 {
//    get {return _storage._attendeeSource ?? 1}
//    set {_uniqueStorage()._attendeeSource = newValue}
//  }
  /// Returns true if `attendeeSource` has been explicitly set.
//  public var hasAttendeeSource: Bool {return _storage._attendeeSource != nil}
  /// Clears the value of `attendeeSource`. Subsequent reads from it will return its default value.
//  public mutating func clearAttendeeSource() {_uniqueStorage()._attendeeSource = nil}
//
  /// 日程类型
//  public var category: LarkNCExtensionPB_Entities_CalendarEventCore.Category {
//    get {return _storage._category ?? .defaultCategory}
//    set {_uniqueStorage()._category = newValue}
//  }
  /// Returns true if `category` has been explicitly set.
//  public var hasCategory: Bool {return _storage._category != nil}
  /// Clears the value of `category`. Subsequent reads from it will return its default value.
//  public mutating func clearCategory() {_uniqueStorage()._category = nil}
//
//  public var attendeeInfo: LarkNCExtensionPB_Entities_EventAttendeeInfo {
//    get {return _storage._attendeeInfo ?? LarkNCExtensionPB_Entities_EventAttendeeInfo()}
//    set {_uniqueStorage()._attendeeInfo = newValue}
//  }
  /// Returns true if `attendeeInfo` has been explicitly set.
//  public var hasAttendeeInfo: Bool {return _storage._attendeeInfo != nil}
  /// Clears the value of `attendeeInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearAttendeeInfo() {_uniqueStorage()._attendeeInfo = nil}
//
//  public var videoConfig: LarkNCExtensionPB_Entities_EventVChatConfig {
//    get {return _storage._videoConfig ?? LarkNCExtensionPB_Entities_EventVChatConfig()}
//    set {_uniqueStorage()._videoConfig = newValue}
//  }
  /// Returns true if `videoConfig` has been explicitly set.
//  public var hasVideoConfig: Bool {return _storage._videoConfig != nil}
  /// Clears the value of `videoConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearVideoConfig() {_uniqueStorage()._videoConfig = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum Status: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case tentative // = 1
//    case confirmed // = 2
//    case cancelled // = 3
//
//    public init() {
//      self = .tentative
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .tentative
//      case 2: self = .confirmed
//      case 3: self = .cancelled
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .tentative: return 1
//      case .confirmed: return 2
//      case .cancelled: return 3
//      }
//    }
//
//  }
//
//  public enum SelfAttendeeStatus: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case attendeeStatusNeedsAction // = 1
//    case attendeeStatusAccept // = 2
//    case attendeeStatusTentative // = 3
//    case attendeeStatusDecline // = 4
//    case attendeeStatusRemoved // = 5
//
//    public init() {
//      self = .attendeeStatusNeedsAction
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .attendeeStatusNeedsAction
//      case 2: self = .attendeeStatusAccept
//      case 3: self = .attendeeStatusTentative
//      case 4: self = .attendeeStatusDecline
//      case 5: self = .attendeeStatusRemoved
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .attendeeStatusNeedsAction: return 1
//      case .attendeeStatusAccept: return 2
//      case .attendeeStatusTentative: return 3
//      case .attendeeStatusDecline: return 4
//      case .attendeeStatusRemoved: return 5
//      }
//    }
//
//  }
//
  /// 日程类型枚举类型
//  public enum Category: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case defaultCategory // = 1
//
    /// 飞阅会类型日程
//    case samePageMeeting // = 2
//
    /// 针对会议室给前端提供的虚假日程
//    case resourceStrategy // = 3
//
    /// 针对会议室征用给前端提供的虚假日程
//    case resourceRequisition // = 4
//
//    public init() {
//      self = .defaultCategory
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .defaultCategory
//      case 2: self = .samePageMeeting
//      case 3: self = .resourceStrategy
//      case 4: self = .resourceRequisition
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .defaultCategory: return 1
//      case .samePageMeeting: return 2
//      case .resourceStrategy: return 3
//      case .resourceRequisition: return 4
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_CalendarEventCore.Status: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_CalendarEventCore.SelfAttendeeStatus: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_CalendarEventCore.Category: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 会议相关实体
//public struct LarkNCExtensionPB_Entities_Meeting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 会议id
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
  /// 会议聊天id
//  public var chatID: String {
//    get {return _chatID ?? String()}
//    set {_chatID = newValue}
//  }
  /// Returns true if `chatID` has been explicitly set.
//  public var hasChatID: Bool {return self._chatID != nil}
  /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatID() {self._chatID = nil}
//
  /// 是否第一次进入会议
//  public var isFirstEntrance: Bool {
//    get {return _isFirstEntrance ?? true}
//    set {_isFirstEntrance = newValue}
//  }
  /// Returns true if `isFirstEntrance` has been explicitly set.
//  public var hasIsFirstEntrance: Bool {return self._isFirstEntrance != nil}
  /// Clears the value of `isFirstEntrance`. Subsequent reads from it will return its default value.
//  public mutating func clearIsFirstEntrance() {self._isFirstEntrance = nil}
//
  /// 存储meeting对应的calendar_event_ref_id
//  public var calendarEventRefIds: [String] = []
//
  /// 存储创建的会议群聊的会议纪要文档的URL
//  public var docsURL: String {
//    get {return _docsURL ?? String()}
//    set {_docsURL = newValue}
//  }
  /// Returns true if `docsURL` has been explicitly set.
//  public var hasDocsURL: Bool {return self._docsURL != nil}
  /// Clears the value of `docsURL`. Subsequent reads from it will return its default value.
//  public mutating func clearDocsURL() {self._docsURL = nil}
//
  /// 是否需要展示条幅
//  public var shouldShowScroll: Bool {
//    get {return _shouldShowScroll ?? true}
//    set {_shouldShowScroll = newValue}
//  }
  /// Returns true if `shouldShowScroll` has been explicitly set.
//  public var hasShouldShowScroll: Bool {return self._shouldShowScroll != nil}
  /// Clears the value of `shouldShowScroll`. Subsequent reads from it will return its default value.
//  public mutating func clearShouldShowScroll() {self._shouldShowScroll = nil}
//
  /// 条幅类型
//  public var scrollType: LarkNCExtensionPB_Entities_ScrollType {
//    get {return _scrollType ?? .eventInfo}
//    set {_scrollType = newValue}
//  }
  /// Returns true if `scrollType` has been explicitly set.
//  public var hasScrollType: Bool {return self._scrollType != nil}
  /// Clears the value of `scrollType`. Subsequent reads from it will return its default value.
//  public mutating func clearScrollType() {self._scrollType = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _chatID: String? = nil
//  fileprivate var _isFirstEntrance: Bool? = nil
//  fileprivate var _docsURL: String? = nil
//  fileprivate var _shouldShowScroll: Bool? = nil
//  fileprivate var _scrollType: LarkNCExtensionPB_Entities_ScrollType? = nil
//}

/// 用于数据库中存储 meeting 的 extra 信息
//public struct LarkNCExtensionPB_Entities_MeetingExtra {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var docsObjType: Int64 {
//    get {return _docsObjType ?? 0}
//    set {_docsObjType = newValue}
//  }
  /// Returns true if `docsObjType` has been explicitly set.
//  public var hasDocsObjType: Bool {return self._docsObjType != nil}
  /// Clears the value of `docsObjType`. Subsequent reads from it will return its default value.
//  public mutating func clearDocsObjType() {self._docsObjType = nil}
//
//  public var docsObjToken: String {
//    get {return _docsObjToken ?? String()}
//    set {_docsObjToken = newValue}
//  }
  /// Returns true if `docsObjToken` has been explicitly set.
//  public var hasDocsObjToken: Bool {return self._docsObjToken != nil}
  /// Clears the value of `docsObjToken`. Subsequent reads from it will return its default value.
//  public mutating func clearDocsObjToken() {self._docsObjToken = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _docsObjType: Int64? = nil
//  fileprivate var _docsObjToken: String? = nil
//}

/// 用于数据库中存储 meeting_chatter_actions 的 extra 信息
//public struct LarkNCExtensionPB_Entities_MeetingChatterActionsExtra {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 用户第一次进入会议会话的时间戳
//  public var firstEntranceTime: Int64 {
//    get {return _firstEntranceTime ?? 0}
//    set {_firstEntranceTime = newValue}
//  }
  /// Returns true if `firstEntranceTime` has been explicitly set.
//  public var hasFirstEntranceTime: Bool {return self._firstEntranceTime != nil}
  /// Clears the value of `firstEntranceTime`. Subsequent reads from it will return its default value.
//  public mutating func clearFirstEntranceTime() {self._firstEntranceTime = nil}
//
  /// 是否需要展示条幅
//  public var shouldShowScroll: Bool {
//    get {return _shouldShowScroll ?? true}
//    set {_shouldShowScroll = newValue}
//  }
  /// Returns true if `shouldShowScroll` has been explicitly set.
//  public var hasShouldShowScroll: Bool {return self._shouldShowScroll != nil}
  /// Clears the value of `shouldShowScroll`. Subsequent reads from it will return its default value.
//  public mutating func clearShouldShowScroll() {self._shouldShowScroll = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _firstEntranceTime: Int64? = nil
//  fileprivate var _shouldShowScroll: Bool? = nil
//}

/// 日历视频会议相关实体
public struct LarkNCExtensionPB_Entities_Vchat {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// unique
  public var uniqueID: String {
    get {return _uniqueID ?? String()}
    set {_uniqueID = newValue}
  }
  /// Returns true if `uniqueID` has been explicitly set.
  public var hasUniqueID: Bool {return self._uniqueID != nil}
  /// Clears the value of `uniqueID`. Subsequent reads from it will return its default value.
//  public mutating func clearUniqueID() {self._uniqueID = nil}

  /// meeting number, 会回收使用，可能重复
  public var meetingNo: String {
    get {return _meetingNo ?? String()}
    set {_meetingNo = newValue}
  }
  /// Returns true if `meetingNo` has been explicitly set.
//  public var hasMeetingNo: Bool {return self._meetingNo != nil}
  /// Clears the value of `meetingNo`. Subsequent reads from it will return its default value.
//  public mutating func clearMeetingNo() {self._meetingNo = nil}

  /// meeting_no 是否已经过期
  public var isExpired: Bool {
    get {return _isExpired ?? false}
    set {_isExpired = newValue}
  }
  /// Returns true if `isExpired` has been explicitly set.
//  public var hasIsExpired: Bool {return self._isExpired != nil}
  /// Clears the value of `isExpired`. Subsequent reads from it will return its default value.
//  public mutating func clearIsExpired() {self._isExpired = nil}

  public var meetingURL: String {
    get {return _meetingURL ?? String()}
    set {_meetingURL = newValue}
  }
  /// Returns true if `meetingURL` has been explicitly set.
//  public var hasMeetingURL: Bool {return self._meetingURL != nil}
  /// Clears the value of `meetingURL`. Subsequent reads from it will return its default value.
//  public mutating func clearMeetingURL() {self._meetingURL = nil}

  public var type: LarkNCExtensionPB_Entities_Vchat.TypeEnum {
    get {return _type ?? .videoConference}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}

  public var vchatType: LarkNCExtensionPB_Entities_Vchat.VChatType {
    get {return _vchatType ?? .unKnown}
    set {_vchatType = newValue}
  }
  /// Returns true if `vchatType` has been explicitly set.
//  public var hasVchatType: Bool {return self._vchatType != nil}
  /// Clears the value of `vchatType`. Subsequent reads from it will return its default value.
//  public mutating func clearVchatType() {self._vchatType = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  enum Status: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case live // = 1

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .live
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .live: return 1
      }
    }

  }

  /// 未来废弃，3.38（含）以下会使用该 type。
  public enum TypeEnum: LarkHTTP.Enum {
    public typealias RawValue = Int
    case videoConference // = 1
    case thirdParty // = 2

    public init() {
      self = .videoConference
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .videoConference
      case 2: self = .thirdParty
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .videoConference: return 1
      case .thirdParty: return 2
      }
    }

  }

  public enum VChatType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case unKnown // = 0
    case larkVideoConference // = 1
    case thirdPartyURL // = 2

    /// 直播主播链接
    case larkLiveHost // = 3
    case noVideoMeeting // = 4

    /// google vc
    case googleVideoConference // = 5

    public init() {
      self = .unKnown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unKnown
      case 1: self = .larkVideoConference
      case 2: self = .thirdPartyURL
      case 3: self = .larkLiveHost
      case 4: self = .noVideoMeeting
      case 5: self = .googleVideoConference
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unKnown: return 0
      case .larkVideoConference: return 1
      case .thirdPartyURL: return 2
      case .larkLiveHost: return 3
      case .noVideoMeeting: return 4
      case .googleVideoConference: return 5
      }
    }

  }

  public init() {}

  fileprivate var _uniqueID: String? = nil
  fileprivate var _meetingNo: String? = nil
  fileprivate var _isExpired: Bool? = nil
  fileprivate var _meetingURL: String? = nil
  fileprivate var _type: LarkNCExtensionPB_Entities_Vchat.TypeEnum? = nil
  fileprivate var _vchatType: LarkNCExtensionPB_Entities_Vchat.VChatType? = nil
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_Vchat.Status: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Vchat.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_Vchat.VChatType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_CalendarEventVChatChange {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var calendarID: String {
//    get {return _storage._calendarID ?? String()}
//    set {_uniqueStorage()._calendarID = newValue}
//  }
  /// Returns true if `calendarID` has been explicitly set.
//  public var hasCalendarID: Bool {return _storage._calendarID != nil}
  /// Clears the value of `calendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarID() {_uniqueStorage()._calendarID = nil}
//
//  public var uid: String {
//    get {return _storage._uid ?? String()}
//    set {_uniqueStorage()._uid = newValue}
//  }
  /// Returns true if `uid` has been explicitly set.
//  public var hasUid: Bool {return _storage._uid != nil}
  /// Clears the value of `uid`. Subsequent reads from it will return its default value.
//  public mutating func clearUid() {_uniqueStorage()._uid = nil}
//
//  public var originalTime: String {
//    get {return _storage._originalTime ?? String()}
//    set {_uniqueStorage()._originalTime = newValue}
//  }
  /// Returns true if `originalTime` has been explicitly set.
//  public var hasOriginalTime: Bool {return _storage._originalTime != nil}
  /// Clears the value of `originalTime`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginalTime() {_uniqueStorage()._originalTime = nil}
//
//  public var vchat: LarkNCExtensionPB_Entities_Vchat {
//    get {return _storage._vchat ?? LarkNCExtensionPB_Entities_Vchat()}
//    set {_uniqueStorage()._vchat = newValue}
//  }
  /// Returns true if `vchat` has been explicitly set.
//  public var hasVchat: Bool {return _storage._vchat != nil}
  /// Clears the value of `vchat`. Subsequent reads from it will return its default value.
//  public mutating func clearVchat() {_uniqueStorage()._vchat = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_VchatLiveStatus {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 视频会议进行状态
//  public var status: LarkNCExtensionPB_Entities_Vchat.Status {
//    get {return _status ?? .unknown}
//    set {_status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {self._status = nil}
//
  /// 若视频会议为LIVE状态，会议的开始时间，秒
//  public var startTime: Int64 {
//    get {return _startTime ?? 0}
//    set {_startTime = newValue}
//  }
  /// Returns true if `startTime` has been explicitly set.
//  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
//  public mutating func clearStartTime() {self._startTime = nil}
//
  /// 若视频会议为LIVE状态，会议已经开始的时长，秒
//  public var liveDuration: Int64 {
//    get {return _liveDuration ?? 0}
//    set {_liveDuration = newValue}
//  }
  /// Returns true if `liveDuration` has been explicitly set.
//  public var hasLiveDuration: Bool {return self._liveDuration != nil}
  /// Clears the value of `liveDuration`. Subsequent reads from it will return its default value.
//  public mutating func clearLiveDuration() {self._liveDuration = nil}
//
  /// 视频会议ID，不同于MeetingNumber，每次新开会议都会变
//  public var meetingID: String {
//    get {return _meetingID ?? String()}
//    set {_meetingID = newValue}
//  }
  /// Returns true if `meetingID` has been explicitly set.
//  public var hasMeetingID: Bool {return self._meetingID != nil}
  /// Clears the value of `meetingID`. Subsequent reads from it will return its default value.
//  public mutating func clearMeetingID() {self._meetingID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _status: LarkNCExtensionPB_Entities_Vchat.Status? = nil
//  fileprivate var _startTime: Int64? = nil
//  fileprivate var _liveDuration: Int64? = nil
//  fileprivate var _meetingID: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_CalendarEventKey {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var uniqueKey: String {
//    get {return _uniqueKey ?? String()}
//    set {_uniqueKey = newValue}
//  }
  /// Returns true if `uniqueKey` has been explicitly set.
//  public var hasUniqueKey: Bool {return self._uniqueKey != nil}
  /// Clears the value of `uniqueKey`. Subsequent reads from it will return its default value.
//  public mutating func clearUniqueKey() {self._uniqueKey = nil}
//
//  public var calendarID: String {
//    get {return _calendarID ?? String()}
//    set {_calendarID = newValue}
//  }
  /// Returns true if `calendarID` has been explicitly set.
//  public var hasCalendarID: Bool {return self._calendarID != nil}
  /// Clears the value of `calendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarID() {self._calendarID = nil}
//
//  public var originalTime: Int64 {
//    get {return _originalTime ?? 0}
//    set {_originalTime = newValue}
//  }
  /// Returns true if `originalTime` has been explicitly set.
//  public var hasOriginalTime: Bool {return self._originalTime != nil}
  /// Clears the value of `originalTime`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginalTime() {self._originalTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _uniqueKey: String? = nil
//  fileprivate var _calendarID: String? = nil
//  fileprivate var _originalTime: Int64? = nil
//}

//public struct LarkNCExtensionPB_Entities_MeetingEventRef {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var uniqueKey: String {
//    get {return _uniqueKey ?? String()}
//    set {_uniqueKey = newValue}
//  }
  /// Returns true if `uniqueKey` has been explicitly set.
//  public var hasUniqueKey: Bool {return self._uniqueKey != nil}
  /// Clears the value of `uniqueKey`. Subsequent reads from it will return its default value.
//  public mutating func clearUniqueKey() {self._uniqueKey = nil}
//
//  public var originalTime: Int64 {
//    get {return _originalTime ?? 0}
//    set {_originalTime = newValue}
//  }
  /// Returns true if `originalTime` has been explicitly set.
//  public var hasOriginalTime: Bool {return self._originalTime != nil}
  /// Clears the value of `originalTime`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginalTime() {self._originalTime = nil}
//
//  public var meetingID: String {
//    get {return _meetingID ?? String()}
//    set {_meetingID = newValue}
//  }
  /// Returns true if `meetingID` has been explicitly set.
//  public var hasMeetingID: Bool {return self._meetingID != nil}
  /// Clears the value of `meetingID`. Subsequent reads from it will return its default value.
//  public mutating func clearMeetingID() {self._meetingID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _uniqueKey: String? = nil
//  fileprivate var _originalTime: Int64? = nil
//  fileprivate var _meetingID: String? = nil
//}

public struct LarkNCExtensionPB_Entities_CalendarEventAttendeeTag {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var type: LarkNCExtensionPB_Entities_CalendarEventAttendeeTag.CalendarEventAttendeeTagType {
    get {return _type ?? .individual}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}

  public var content: String {
    get {return _content ?? String()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {self._content = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum CalendarEventAttendeeTagType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case individual // = 1
    case group // = 2

    public init() {
      self = .individual
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .individual
      case 2: self = .group
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .individual: return 1
      case .group: return 2
      }
    }

  }

  public init() {}

  fileprivate var _type: LarkNCExtensionPB_Entities_CalendarEventAttendeeTag.CalendarEventAttendeeTagType? = nil
  fileprivate var _content: String? = nil
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_CalendarEventAttendeeTag.CalendarEventAttendeeTagType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_CalendarEventAttendee {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var displayName: String {
    get {return _storage._displayName ?? String()}
    set {_uniqueStorage()._displayName = newValue}
  }
  /// Returns true if `displayName` has been explicitly set.
  public var hasDisplayName: Bool {return _storage._displayName != nil}
  /// Clears the value of `displayName`. Subsequent reads from it will return its default value.
//  public mutating func clearDisplayName() {_uniqueStorage()._displayName = nil}

  public var attendeeCalendarID: String {
    get {return _storage._attendeeCalendarID ?? String()}
    set {_uniqueStorage()._attendeeCalendarID = newValue}
  }
  /// Returns true if `attendeeCalendarID` has been explicitly set.
//  public var hasAttendeeCalendarID: Bool {return _storage._attendeeCalendarID != nil}
  /// Clears the value of `attendeeCalendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearAttendeeCalendarID() {_uniqueStorage()._attendeeCalendarID = nil}

  public var isOrganizer: Bool {
    get {return _storage._isOrganizer ?? false}
    set {_uniqueStorage()._isOrganizer = newValue}
  }
  /// Returns true if `isOrganizer` has been explicitly set.
//  public var hasIsOrganizer: Bool {return _storage._isOrganizer != nil}
  /// Clears the value of `isOrganizer`. Subsequent reads from it will return its default value.
//  public mutating func clearIsOrganizer() {_uniqueStorage()._isOrganizer = nil}

  public var isResource: Bool {
    get {return _storage._isResource ?? false}
    set {_uniqueStorage()._isResource = newValue}
  }
  /// Returns true if `isResource` has been explicitly set.
//  public var hasIsResource: Bool {return _storage._isResource != nil}
  /// Clears the value of `isResource`. Subsequent reads from it will return its default value.
//  public mutating func clearIsResource() {_uniqueStorage()._isResource = nil}

  public var isOptional: Bool {
    get {return _storage._isOptional ?? false}
    set {_uniqueStorage()._isOptional = newValue}
  }
  /// Returns true if `isOptional` has been explicitly set.
//  public var hasIsOptional: Bool {return _storage._isOptional != nil}
  /// Clears the value of `isOptional`. Subsequent reads from it will return its default value.
//  public mutating func clearIsOptional() {_uniqueStorage()._isOptional = nil}

  public var status: LarkNCExtensionPB_Entities_CalendarEventAttendee.Status {
    get {return _storage._status ?? .needsAction}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  ///额外添加的参与人数
  public var additionalGuests: Int32 {
    get {return _storage._additionalGuests ?? 0}
    set {_uniqueStorage()._additionalGuests = newValue}
  }
  /// Returns true if `additionalGuests` has been explicitly set.
//  public var hasAdditionalGuests: Bool {return _storage._additionalGuests != nil}
  /// Clears the value of `additionalGuests`. Subsequent reads from it will return its default value.
//  public mutating func clearAdditionalGuests() {_uniqueStorage()._additionalGuests = nil}

  public var createTime: Int64 {
    get {return _storage._createTime ?? 0}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  public var updateTime: Int64 {
    get {return _storage._updateTime ?? 0}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  public var type: LarkNCExtensionPB_Entities_Calendar.TypeEnum {
    get {return _storage._type ?? .primary}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}

  public var tags: [LarkNCExtensionPB_Entities_CalendarEventAttendeeTag] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  public var tenantID: String {
    get {return _storage._tenantID ?? String()}
    set {_uniqueStorage()._tenantID = newValue}
  }
  /// Returns true if `tenantID` has been explicitly set.
  public var hasTenantID: Bool {return _storage._tenantID != nil}
  /// Clears the value of `tenantID`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantID() {_uniqueStorage()._tenantID = nil}

  public var inviteInfo: LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation {
    get {return _storage._inviteInfo ?? LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation()}
    set {_uniqueStorage()._inviteInfo = newValue}
  }
  /// Returns true if `inviteInfo` has been explicitly set.
//  public var hasInviteInfo: Bool {return _storage._inviteInfo != nil}
  /// Clears the value of `inviteInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearInviteInfo() {_uniqueStorage()._inviteInfo = nil}

  /// resource是否被禁用
  public var isDisabled: Bool {
    get {return _storage._isDisabled ?? false}
    set {_uniqueStorage()._isDisabled = newValue}
  }
  /// Returns true if `isDisabled` has been explicitly set.
//  public var hasIsDisabled: Bool {return _storage._isDisabled != nil}
  /// Clears the value of `isDisabled`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDisabled() {_uniqueStorage()._isDisabled = nil}

  /// attendee的email
  public var email: String {
    get {return _storage._email ?? String()}
    set {_uniqueStorage()._email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  public var hasEmail: Bool {return _storage._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
//  public mutating func clearEmail() {_uniqueStorage()._email = nil}

  /// 是否第三方参与人
  public var isThirdParty: Bool {
    get {return _storage._isThirdParty ?? false}
    set {_uniqueStorage()._isThirdParty = newValue}
  }
  /// Returns true if `isThirdParty` has been explicitly set.
//  public var hasIsThirdParty: Bool {return _storage._isThirdParty != nil}
  /// Clears the value of `isThirdParty`. Subsequent reads from it will return its default value.
//  public mutating func clearIsThirdParty() {_uniqueStorage()._isThirdParty = nil}

  public var attendeeSchema: Data {
    get {return _storage._attendeeSchema ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._attendeeSchema = newValue}
  }
  /// Returns true if `attendeeSchema` has been explicitly set.
//  public var hasAttendeeSchema: Bool {return _storage._attendeeSchema != nil}
  /// Clears the value of `attendeeSchema`. Subsequent reads from it will return its default value.
//  public mutating func clearAttendeeSchema() {_uniqueStorage()._attendeeSchema = nil}

  /// 关联外部应用数据
  public var schemaExtraData: Data {
    get {return _storage._schemaExtraData ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._schemaExtraData = newValue}
  }
  /// Returns true if `schemaExtraData` has been explicitly set.
//  public var hasSchemaExtraData: Bool {return _storage._schemaExtraData != nil}
  /// Clears the value of `schemaExtraData`. Subsequent reads from it will return its default value.
//  public mutating func clearSchemaExtraData() {_uniqueStorage()._schemaExtraData = nil}

  /// 参与人额外属性
  public var resourceStatus: LarkNCExtensionPB_Entities_CalendarEventAttendee.ResourceStatus {
    get {return _storage._resourceStatus ?? .normal}
    set {_uniqueStorage()._resourceStatus = newValue}
  }
  /// Returns true if `resourceStatus` has been explicitly set.
//  public var hasResourceStatus: Bool {return _storage._resourceStatus != nil}
  /// Clears the value of `resourceStatus`. Subsequent reads from it will return its default value.
//  public mutating func clearResourceStatus() {_uniqueStorage()._resourceStatus = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum Status: LarkHTTP.Enum {
    public typealias RawValue = Int
    case needsAction // = 1
    case accept // = 2
    case tentative // = 3
    case decline // = 4
    case removed // = 5

    public init() {
      self = .needsAction
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .needsAction
      case 2: self = .accept
      case 3: self = .tentative
      case 4: self = .decline
      case 5: self = .removed
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .needsAction: return 1
      case .accept: return 2
      case .tentative: return 3
      case .decline: return 4
      case .removed: return 5
      }
    }

  }

  public enum ResourceStatus: LarkHTTP.Enum {
    public typealias RawValue = Int
    case normal // = 0
    case releasedEarly // = 1

    public init() {
      self = .normal
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .normal
      case 1: self = .releasedEarly
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .normal: return 0
      case .releasedEarly: return 1
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_CalendarEventAttendee.Status: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_CalendarEventAttendee.ResourceStatus: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 邀请者chatter id
  public var inviteOperatorID: String {
    get {return _inviteOperatorID ?? String()}
    set {_inviteOperatorID = newValue}
  }
  /// Returns true if `inviteOperatorID` has been explicitly set.
//  public var hasInviteOperatorID: Bool {return self._inviteOperatorID != nil}
  /// Clears the value of `inviteOperatorID`. Subsequent reads from it will return its default value.
//  public mutating func clearInviteOperatorID() {self._inviteOperatorID = nil}

  /// 邀请者日历id
  public var inviteOperatorCalendarID: String {
    get {return _inviteOperatorCalendarID ?? String()}
    set {_inviteOperatorCalendarID = newValue}
  }
  /// Returns true if `inviteOperatorCalendarID` has been explicitly set.
//  public var hasInviteOperatorCalendarID: Bool {return self._inviteOperatorCalendarID != nil}
  /// Clears the value of `inviteOperatorCalendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearInviteOperatorCalendarID() {self._inviteOperatorCalendarID = nil}

  /// 触发邀请人操作的日程所在的日历
  public var inviterCalendarID: String {
    get {return _inviterCalendarID ?? String()}
    set {_inviterCalendarID = newValue}
  }
  /// Returns true if `inviterCalendarID` has been explicitly set.
//  public var hasInviterCalendarID: Bool {return self._inviterCalendarID != nil}
  /// Clears the value of `inviterCalendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearInviterCalendarID() {self._inviterCalendarID = nil}

  /// 首次邀请者的chatter_id
  public var firstInviteOperatorID: String {
    get {return _firstInviteOperatorID ?? String()}
    set {_firstInviteOperatorID = newValue}
  }
  /// Returns true if `firstInviteOperatorID` has been explicitly set.
//  public var hasFirstInviteOperatorID: Bool {return self._firstInviteOperatorID != nil}
  /// Clears the value of `firstInviteOperatorID`. Subsequent reads from it will return its default value.
//  public mutating func clearFirstInviteOperatorID() {self._firstInviteOperatorID = nil}

  public var inviteTime: Int64 {
    get {return _inviteTime ?? 0}
    set {_inviteTime = newValue}
  }
  /// Returns true if `inviteTime` has been explicitly set.
//  public var hasInviteTime: Bool {return self._inviteTime != nil}
  /// Clears the value of `inviteTime`. Subsequent reads from it will return its default value.
//  public mutating func clearInviteTime() {self._inviteTime = nil}

  /// 发起移除的人的chatter_id
  public var removedChatterID: String {
    get {return _removedChatterID ?? String()}
    set {_removedChatterID = newValue}
  }
  /// Returns true if `removedChatterID` has been explicitly set.
//  public var hasRemovedChatterID: Bool {return self._removedChatterID != nil}
  /// Clears the value of `removedChatterID`. Subsequent reads from it will return its default value.
//  public mutating func clearRemovedChatterID() {self._removedChatterID = nil}

  /// 发起移除的request_id
  public var removedRequestID: String {
    get {return _removedRequestID ?? String()}
    set {_removedRequestID = newValue}
  }
  /// Returns true if `removedRequestID` has been explicitly set.
//  public var hasRemovedRequestID: Bool {return self._removedRequestID != nil}
  /// Clears the value of `removedRequestID`. Subsequent reads from it will return its default value.
//  public mutating func clearRemovedRequestID() {self._removedRequestID = nil}

  public var removeTime: Int64 {
    get {return _removeTime ?? 0}
    set {_removeTime = newValue}
  }
  /// Returns true if `removeTime` has been explicitly set.
//  public var hasRemoveTime: Bool {return self._removeTime != nil}
  /// Clears the value of `removeTime`. Subsequent reads from it will return its default value.
//  public mutating func clearRemoveTime() {self._removeTime = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _inviteOperatorID: String? = nil
  fileprivate var _inviteOperatorCalendarID: String? = nil
  fileprivate var _inviterCalendarID: String? = nil
  fileprivate var _firstInviteOperatorID: String? = nil
  fileprivate var _inviteTime: Int64? = nil
  fileprivate var _removedChatterID: String? = nil
  fileprivate var _removedRequestID: String? = nil
  fileprivate var _removeTime: Int64? = nil
}

public struct LarkNCExtensionPB_Entities_CalendarEventGroupAttendee {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 该群参与人对应的lark群的Chat_id
  public var chatID: String {
    get {return _storage._chatID ?? String()}
    set {_uniqueStorage()._chatID = newValue}
  }
  /// Returns true if `chatID` has been explicitly set.
  public var hasChatID: Bool {return _storage._chatID != nil}
  /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatID() {_uniqueStorage()._chatID = nil}

  /// 表示群参与人是否被删除
  public var isRemoved: Bool {
    get {return _storage._isRemoved ?? false}
    set {_uniqueStorage()._isRemoved = newValue}
  }
  /// Returns true if `isRemoved` has been explicitly set.
//  public var hasIsRemoved: Bool {return _storage._isRemoved != nil}
  /// Clears the value of `isRemoved`. Subsequent reads from it will return its default value.
//  public mutating func clearIsRemoved() {_uniqueStorage()._isRemoved = nil}

  public var inviteInfo: LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation {
    get {return _storage._inviteInfo ?? LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation()}
    set {_uniqueStorage()._inviteInfo = newValue}
  }
  /// Returns true if `inviteInfo` has been explicitly set.
//  public var hasInviteInfo: Bool {return _storage._inviteInfo != nil}
  /// Clears the value of `inviteInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearInviteInfo() {_uniqueStorage()._inviteInfo = nil}

  /// 有效的成员个数，只在新版本客户端返回
  public var validMemberCount: Int32 {
    get {return _storage._validMemberCount ?? 0}
    set {_uniqueStorage()._validMemberCount = newValue}
  }
  /// Returns true if `validMemberCount` has been explicitly set.
//  public var hasValidMemberCount: Bool {return _storage._validMemberCount != nil}
  /// Clears the value of `validMemberCount`. Subsequent reads from it will return its default value.
//  public mutating func clearValidMemberCount() {_uniqueStorage()._validMemberCount = nil}

  /// 当前用户是否在群聊中
  public var isSelfInGroupMember: Bool {
    get {return _storage._isSelfInGroupMember ?? false}
    set {_uniqueStorage()._isSelfInGroupMember = newValue}
  }
  /// Returns true if `isSelfInGroupMember` has been explicitly set.
//  public var hasIsSelfInGroupMember: Bool {return _storage._isSelfInGroupMember != nil}
  /// Clears the value of `isSelfInGroupMember`. Subsequent reads from it will return its default value.
//  public mutating func clearIsSelfInGroupMember() {_uniqueStorage()._isSelfInGroupMember = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 用于数据库中存储event_chat_ref的extra信息
//public struct LarkNCExtensionPB_Entities_EventChatRefExtra {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var inviteInfo: LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation {
//    get {return _storage._inviteInfo ?? LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation()}
//    set {_uniqueStorage()._inviteInfo = newValue}
//  }
  /// Returns true if `inviteInfo` has been explicitly set.
//  public var hasInviteInfo: Bool {return _storage._inviteInfo != nil}
  /// Clears the value of `inviteInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearInviteInfo() {_uniqueStorage()._inviteInfo = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_ResourceCustomization {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var customizationData: [LarkNCExtensionPB_Entities_CustomizationData] = []
//
  /// 需要发送准备信息的联系人
//  public var contactIds: [Int64] = []
//
  ///准备时间，秒单位
//  public var preparationTime: Int64 {
//    get {return _preparationTime ?? 0}
//    set {_preparationTime = newValue}
//  }
  /// Returns true if `preparationTime` has been explicitly set.
//  public var hasPreparationTime: Bool {return self._preparationTime != nil}
  /// Clears the value of `preparationTime`. Subsequent reads from it will return its default value.
//  public mutating func clearPreparationTime() {self._preparationTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _preparationTime: Int64? = nil
//}

//public struct LarkNCExtensionPB_Entities_CustomizationData {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 定制化类型
//  public var customizationType: LarkNCExtensionPB_Entities_CustomizationData.CustomizationType {
//    get {return _customizationType ?? .singleSelect}
//    set {_customizationType = newValue}
//  }
  /// Returns true if `customizationType` has been explicitly set.
//  public var hasCustomizationType: Bool {return self._customizationType != nil}
  /// Clears the value of `customizationType`. Subsequent reads from it will return its default value.
//  public mutating func clearCustomizationType() {self._customizationType = nil}
//
  ///是否必选
//  public var isRequired: Bool {
//    get {return _isRequired ?? false}
//    set {_isRequired = newValue}
//  }
  /// Returns true if `isRequired` has been explicitly set.
//  public var hasIsRequired: Bool {return self._isRequired != nil}
  /// Clears the value of `isRequired`. Subsequent reads from it will return its default value.
//  public mutating func clearIsRequired() {self._isRequired = nil}
//
  ///问题内容 (exp: 是否需要水)
//  public var label: String {
//    get {return _label ?? String()}
//    set {_label = newValue}
//  }
  /// Returns true if `label` has been explicitly set.
//  public var hasLabel: Bool {return self._label != nil}
  /// Clears the value of `label`. Subsequent reads from it will return its default value.
//  public mutating func clearLabel() {self._label = nil}
//
  ///识别唯一标示
//  public var indexKey: String {
//    get {return _indexKey ?? String()}
//    set {_indexKey = newValue}
//  }
  /// Returns true if `indexKey` has been explicitly set.
//  public var hasIndexKey: Bool {return self._indexKey != nil}
  /// Clears the value of `indexKey`. Subsequent reads from it will return its default value.
//  public mutating func clearIndexKey() {self._indexKey = nil}
//
  /// 选项内容
//  public var options: [LarkNCExtensionPB_Entities_CustomizationOption] = []
//
  /// 选项条件，即满足条件
//  public var conditions: [LarkNCExtensionPB_Entities_OptionCondition] = []
//
  /// 如果是input情况的输入内容 （客户端输入）
//  public var inputContent: String {
//    get {return _inputContent ?? String()}
//    set {_inputContent = newValue}
//  }
  /// Returns true if `inputContent` has been explicitly set.
//  public var hasInputContent: Bool {return self._inputContent != nil}
  /// Clears the value of `inputContent`. Subsequent reads from it will return its default value.
//  public mutating func clearInputContent() {self._inputContent = nil}
//
  /// input的填充项
//  public var placeHolder: String {
//    get {return _placeHolder ?? String()}
//    set {_placeHolder = newValue}
//  }
  /// Returns true if `placeHolder` has been explicitly set.
//  public var hasPlaceHolder: Bool {return self._placeHolder != nil}
  /// Clears the value of `placeHolder`. Subsequent reads from it will return its default value.
//  public mutating func clearPlaceHolder() {self._placeHolder = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum CustomizationType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case singleSelect // = 1
//    case multipleSelect // = 2
//    case input // = 3
//
//    public init() {
//      self = .singleSelect
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .singleSelect
//      case 2: self = .multipleSelect
//      case 3: self = .input
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .singleSelect: return 1
//      case .multipleSelect: return 2
//      case .input: return 3
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _customizationType: LarkNCExtensionPB_Entities_CustomizationData.CustomizationType? = nil
//  fileprivate var _isRequired: Bool? = nil
//  fileprivate var _label: String? = nil
//  fileprivate var _indexKey: String? = nil
//  fileprivate var _inputContent: String? = nil
//  fileprivate var _placeHolder: String? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_CustomizationData.CustomizationType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_CustomizationOption {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 是否是其他选项
//  public var isOthers: Bool {
//    get {return _isOthers ?? false}
//    set {_isOthers = newValue}
//  }
  /// Returns true if `isOthers` has been explicitly set.
//  public var hasIsOthers: Bool {return self._isOthers != nil}
  /// Clears the value of `isOthers`. Subsequent reads from it will return its default value.
//  public mutating func clearIsOthers() {self._isOthers = nil}
//
  /// 其他的输入内容 （客户端输入）
//  public var othersContent: String {
//    get {return _othersContent ?? String()}
//    set {_othersContent = newValue}
//  }
  /// Returns true if `othersContent` has been explicitly set.
//  public var hasOthersContent: Bool {return self._othersContent != nil}
  /// Clears the value of `othersContent`. Subsequent reads from it will return its default value.
//  public mutating func clearOthersContent() {self._othersContent = nil}
//
  /// 选项名
//  public var optionLabel: String {
//    get {return _optionLabel ?? String()}
//    set {_optionLabel = newValue}
//  }
  /// Returns true if `optionLabel` has been explicitly set.
//  public var hasOptionLabel: Bool {return self._optionLabel != nil}
  /// Clears the value of `optionLabel`. Subsequent reads from it will return its default value.
//  public mutating func clearOptionLabel() {self._optionLabel = nil}
//
  /// 选项图片
//  public var optionImageURL: String {
//    get {return _optionImageURL ?? String()}
//    set {_optionImageURL = newValue}
//  }
  /// Returns true if `optionImageURL` has been explicitly set.
//  public var hasOptionImageURL: Bool {return self._optionImageURL != nil}
  /// Clears the value of `optionImageURL`. Subsequent reads from it will return its default value.
//  public mutating func clearOptionImageURL() {self._optionImageURL = nil}
//
  /// 识别唯一标示，配合condition食用
//  public var optionKey: String {
//    get {return _optionKey ?? String()}
//    set {_optionKey = newValue}
//  }
  /// Returns true if `optionKey` has been explicitly set.
//  public var hasOptionKey: Bool {return self._optionKey != nil}
  /// Clears the value of `optionKey`. Subsequent reads from it will return its default value.
//  public mutating func clearOptionKey() {self._optionKey = nil}
//
  /// 选项是否选择 （客户端输入）
//  public var isSelected: Bool {
//    get {return _isSelected ?? false}
//    set {_isSelected = newValue}
//  }
  /// Returns true if `isSelected` has been explicitly set.
//  public var hasIsSelected: Bool {return self._isSelected != nil}
  /// Clears the value of `isSelected`. Subsequent reads from it will return its default value.
//  public mutating func clearIsSelected() {self._isSelected = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _isOthers: Bool? = nil
//  fileprivate var _othersContent: String? = nil
//  fileprivate var _optionLabel: String? = nil
//  fileprivate var _optionImageURL: String? = nil
//  fileprivate var _optionKey: String? = nil
//  fileprivate var _isSelected: Bool? = nil
//}

//public struct LarkNCExtensionPB_Entities_OptionCondition {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 需要满足条件的key，
//  public var customKey: String {
//    get {return _customKey ?? String()}
//    set {_customKey = newValue}
//  }
  /// Returns true if `customKey` has been explicitly set.
//  public var hasCustomKey: Bool {return self._customKey != nil}
  /// Clears the value of `customKey`. Subsequent reads from it will return its default value.
//  public mutating func clearCustomKey() {self._customKey = nil}
//
  /// 需要哪些选项被选中
//  public var optionKeys: [String] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _customKey: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_ResourceApprovalRequest {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var createChatterID: Int64 {
//    get {return _createChatterID ?? 0}
//    set {_createChatterID = newValue}
//  }
  /// Returns true if `createChatterID` has been explicitly set.
//  public var hasCreateChatterID: Bool {return self._createChatterID != nil}
  /// Clears the value of `createChatterID`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateChatterID() {self._createChatterID = nil}
//
//  public var approvalCode: String {
//    get {return _approvalCode ?? String()}
//    set {_approvalCode = newValue}
//  }
  /// Returns true if `approvalCode` has been explicitly set.
//  public var hasApprovalCode: Bool {return self._approvalCode != nil}
  /// Clears the value of `approvalCode`. Subsequent reads from it will return its default value.
//  public mutating func clearApprovalCode() {self._approvalCode = nil}
//
//  public var instanceCode: String {
//    get {return _instanceCode ?? String()}
//    set {_instanceCode = newValue}
//  }
  /// Returns true if `instanceCode` has been explicitly set.
//  public var hasInstanceCode: Bool {return self._instanceCode != nil}
  /// Clears the value of `instanceCode`. Subsequent reads from it will return its default value.
//  public mutating func clearInstanceCode() {self._instanceCode = nil}
//
//  public var reason: String {
//    get {return _reason ?? String()}
//    set {_reason = newValue}
//  }
  /// Returns true if `reason` has been explicitly set.
//  public var hasReason: Bool {return self._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
//  public mutating func clearReason() {self._reason = nil}
//
//  public var approverUserIds: [Int64] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _createChatterID: Int64? = nil
//  fileprivate var _approvalCode: String? = nil
//  fileprivate var _instanceCode: String? = nil
//  fileprivate var _reason: String? = nil
//}

/// 用于数据库中存储event_attendee的extra信息
//public struct LarkNCExtensionPB_Entities_CalendarEventAttendeeExtra {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var type: LarkNCExtensionPB_Entities_Calendar.TypeEnum {
//    get {return _storage._type ?? .primary}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
//  public var tags: [LarkNCExtensionPB_Entities_CalendarEventAttendeeTag] {
//    get {return _storage._tags}
//    set {_uniqueStorage()._tags = newValue}
//  }
//
//  public var tenantID: Int64 {
//    get {return _storage._tenantID ?? 0}
//    set {_uniqueStorage()._tenantID = newValue}
//  }
  /// Returns true if `tenantID` has been explicitly set.
//  public var hasTenantID: Bool {return _storage._tenantID != nil}
  /// Clears the value of `tenantID`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantID() {_uniqueStorage()._tenantID = nil}
//
//  public var inviteInfo: LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation {
//    get {return _storage._inviteInfo ?? LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation()}
//    set {_uniqueStorage()._inviteInfo = newValue}
//  }
  /// Returns true if `inviteInfo` has been explicitly set.
//  public var hasInviteInfo: Bool {return _storage._inviteInfo != nil}
  /// Clears the value of `inviteInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearInviteInfo() {_uniqueStorage()._inviteInfo = nil}
//
//  public var rsvpComment: String {
//    get {return _storage._rsvpComment ?? String()}
//    set {_uniqueStorage()._rsvpComment = newValue}
//  }
  /// Returns true if `rsvpComment` has been explicitly set.
//  public var hasRsvpComment: Bool {return _storage._rsvpComment != nil}
  /// Clears the value of `rsvpComment`. Subsequent reads from it will return its default value.
//  public mutating func clearRsvpComment() {_uniqueStorage()._rsvpComment = nil}
//
//  public var email: String {
//    get {return _storage._email ?? String()}
//    set {_uniqueStorage()._email = newValue}
//  }
  /// Returns true if `email` has been explicitly set.
//  public var hasEmail: Bool {return _storage._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
//  public mutating func clearEmail() {_uniqueStorage()._email = nil}
//
//  public var receiverEmail: String {
//    get {return _storage._receiverEmail ?? String()}
//    set {_uniqueStorage()._receiverEmail = newValue}
//  }
  /// Returns true if `receiverEmail` has been explicitly set.
//  public var hasReceiverEmail: Bool {return _storage._receiverEmail != nil}
  /// Clears the value of `receiverEmail`. Subsequent reads from it will return its default value.
//  public mutating func clearReceiverEmail() {_uniqueStorage()._receiverEmail = nil}
//
//  public var resourceStatus: LarkNCExtensionPB_Entities_CalendarEventAttendee.ResourceStatus {
//    get {return _storage._resourceStatus ?? .normal}
//    set {_uniqueStorage()._resourceStatus = newValue}
//  }
  /// Returns true if `resourceStatus` has been explicitly set.
//  public var hasResourceStatus: Bool {return _storage._resourceStatus != nil}
  /// Clears the value of `resourceStatus`. Subsequent reads from it will return its default value.
//  public mutating func clearResourceStatus() {_uniqueStorage()._resourceStatus = nil}
//
//  public var resourceApprovalRequest: LarkNCExtensionPB_Entities_ResourceApprovalRequest {
//    get {return _storage._resourceApprovalRequest ?? LarkNCExtensionPB_Entities_ResourceApprovalRequest()}
//    set {_uniqueStorage()._resourceApprovalRequest = newValue}
//  }
  /// Returns true if `resourceApprovalRequest` has been explicitly set.
//  public var hasResourceApprovalRequest: Bool {return _storage._resourceApprovalRequest != nil}
  /// Clears the value of `resourceApprovalRequest`. Subsequent reads from it will return its default value.
//  public mutating func clearResourceApprovalRequest() {_uniqueStorage()._resourceApprovalRequest = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

public struct LarkNCExtensionPB_Entities_CalendarEventLocation {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {self._name = nil}

  public var address: String {
    get {return _address ?? String()}
    set {_address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  public var hasAddress: Bool {return self._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
//  public mutating func clearAddress() {self._address = nil}

  public var type: LarkNCExtensionPB_Entities_CalendarEventLocation.TypeEnum {
    get {return _type ?? .ordinary}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}

  public var latitude: Float {
    get {return _latitude ?? 360}
    set {_latitude = newValue}
  }
  /// Returns true if `latitude` has been explicitly set.
  public var hasLatitude: Bool {return self._latitude != nil}
  /// Clears the value of `latitude`. Subsequent reads from it will return its default value.
//  public mutating func clearLatitude() {self._latitude = nil}

  public var longitude: Float {
    get {return _longitude ?? 360}
    set {_longitude = newValue}
  }
  /// Returns true if `longitude` has been explicitly set.
//  public var hasLongitude: Bool {return self._longitude != nil}
  /// Clears the value of `longitude`. Subsequent reads from it will return its default value.
//  public mutating func clearLongitude() {self._longitude = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum TypeEnum: LarkHTTP.Enum {
    public typealias RawValue = Int
    case meetingRoom // = 1
    case ordinary // = 2

    public init() {
      self = .meetingRoom
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .meetingRoom
      case 2: self = .ordinary
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .meetingRoom: return 1
      case .ordinary: return 2
      }
    }

  }

  public init() {}

  fileprivate var _name: String? = nil
  fileprivate var _address: String? = nil
  fileprivate var _type: LarkNCExtensionPB_Entities_CalendarEventLocation.TypeEnum? = nil
  fileprivate var _latitude: Float? = nil
  fileprivate var _longitude: Float? = nil
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_CalendarEventLocation.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_CalendarEventInstance {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
//  public var eventRefID: String {
//    get {return _eventRefID ?? String()}
//    set {_eventRefID = newValue}
//  }
  /// Returns true if `eventRefID` has been explicitly set.
//  public var hasEventRefID: Bool {return self._eventRefID != nil}
  /// Clears the value of `eventRefID`. Subsequent reads from it will return its default value.
//  public mutating func clearEventRefID() {self._eventRefID = nil}
//
//  public var calendarID: String {
//    get {return _calendarID ?? String()}
//    set {_calendarID = newValue}
//  }
  /// Returns true if `calendarID` has been explicitly set.
//  public var hasCalendarID: Bool {return self._calendarID != nil}
  /// Clears the value of `calendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarID() {self._calendarID = nil}
//
//  public var beginTime: Int64 {
//    get {return _beginTime ?? 0}
//    set {_beginTime = newValue}
//  }
  /// Returns true if `beginTime` has been explicitly set.
//  public var hasBeginTime: Bool {return self._beginTime != nil}
  /// Clears the value of `beginTime`. Subsequent reads from it will return its default value.
//  public mutating func clearBeginTime() {self._beginTime = nil}
//
//  public var endTime: Int64 {
//    get {return _endTime ?? 0}
//    set {_endTime = newValue}
//  }
  /// Returns true if `endTime` has been explicitly set.
//  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
//  public mutating func clearEndTime() {self._endTime = nil}
//
//  public var score: Double {
//    get {return _score ?? 0}
//    set {_score = newValue}
//  }
  /// Returns true if `score` has been explicitly set.
//  public var hasScore: Bool {return self._score != nil}
  /// Clears the value of `score`. Subsequent reads from it will return its default value.
//  public mutating func clearScore() {self._score = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _eventRefID: String? = nil
//  fileprivate var _calendarID: String? = nil
//  fileprivate var _beginTime: Int64? = nil
//  fileprivate var _endTime: Int64? = nil
//  fileprivate var _score: Double? = nil
//}

//public struct LarkNCExtensionPB_Entities_EventInfoInstances {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var eventID: String {
//    get {return _eventID ?? String()}
//    set {_eventID = newValue}
//  }
  /// Returns true if `eventID` has been explicitly set.
//  public var hasEventID: Bool {return self._eventID != nil}
  /// Clears the value of `eventID`. Subsequent reads from it will return its default value.
//  public mutating func clearEventID() {self._eventID = nil}
//
//  public var summary: String {
//    get {return _summary ?? String()}
//    set {_summary = newValue}
//  }
  /// Returns true if `summary` has been explicitly set.
//  public var hasSummary: Bool {return self._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
//  public mutating func clearSummary() {self._summary = nil}
//
//  public var uid: String {
//    get {return _uid ?? String()}
//    set {_uid = newValue}
//  }
  /// Returns true if `uid` has been explicitly set.
//  public var hasUid: Bool {return self._uid != nil}
  /// Clears the value of `uid`. Subsequent reads from it will return its default value.
//  public mutating func clearUid() {self._uid = nil}
//
//  public var originalTime: Int64 {
//    get {return _originalTime ?? 0}
//    set {_originalTime = newValue}
//  }
  /// Returns true if `originalTime` has been explicitly set.
//  public var hasOriginalTime: Bool {return self._originalTime != nil}
  /// Clears the value of `originalTime`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginalTime() {self._originalTime = nil}
//
//  public var startTime: Int64 {
//    get {return _startTime ?? 0}
//    set {_startTime = newValue}
//  }
  /// Returns true if `startTime` has been explicitly set.
//  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
//  public mutating func clearStartTime() {self._startTime = nil}
//
//  public var color: Int32 {
//    get {return _color ?? 0}
//    set {_color = newValue}
//  }
  /// Returns true if `color` has been explicitly set.
//  public var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
//  public mutating func clearColor() {self._color = nil}
//
//  public var isAllDay: Bool {
//    get {return _isAllDay ?? false}
//    set {_isAllDay = newValue}
//  }
  /// Returns true if `isAllDay` has been explicitly set.
//  public var hasIsAllDay: Bool {return self._isAllDay != nil}
  /// Clears the value of `isAllDay`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAllDay() {self._isAllDay = nil}
//
//  public var eventVisibility: LarkNCExtensionPB_Entities_UserEventVisibility {
//    get {return _eventVisibility ?? .busyReader}
//    set {_eventVisibility = newValue}
//  }
  /// Returns true if `eventVisibility` has been explicitly set.
//  public var hasEventVisibility: Bool {return self._eventVisibility != nil}
  /// Clears the value of `eventVisibility`. Subsequent reads from it will return its default value.
//  public mutating func clearEventVisibility() {self._eventVisibility = nil}
//
//  public var selfAttendeeStatus: LarkNCExtensionPB_Entities_CalendarEvent.SelfAttendeeStatus {
//    get {return _selfAttendeeStatus ?? .attendeeStatusNeedsAction}
//    set {_selfAttendeeStatus = newValue}
//  }
  /// Returns true if `selfAttendeeStatus` has been explicitly set.
//  public var hasSelfAttendeeStatus: Bool {return self._selfAttendeeStatus != nil}
  /// Clears the value of `selfAttendeeStatus`. Subsequent reads from it will return its default value.
//  public mutating func clearSelfAttendeeStatus() {self._selfAttendeeStatus = nil}
//
//  public var resourceCalendarIds: [String] = []
//
//  public var locations: [LarkNCExtensionPB_Entities_CalendarEventLocation] = []
//
  ///日程展开的instance，需要扣掉例外instance
//  public var instanceSpans: [LarkNCExtensionPB_Entities_StartEndTime] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _eventID: String? = nil
//  fileprivate var _summary: String? = nil
//  fileprivate var _uid: String? = nil
//  fileprivate var _originalTime: Int64? = nil
//  fileprivate var _startTime: Int64? = nil
//  fileprivate var _color: Int32? = nil
//  fileprivate var _isAllDay: Bool? = nil
//  fileprivate var _eventVisibility: LarkNCExtensionPB_Entities_UserEventVisibility? = nil
//  fileprivate var _selfAttendeeStatus: LarkNCExtensionPB_Entities_CalendarEvent.SelfAttendeeStatus? = nil
//}

public struct LarkNCExtensionPB_Entities_CalendarEventAttachment {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var fileToken: String {
    get {return _fileToken ?? String()}
    set {_fileToken = newValue}
  }
  /// Returns true if `fileToken` has been explicitly set.
//  public var hasFileToken: Bool {return self._fileToken != nil}
  /// Clears the value of `fileToken`. Subsequent reads from it will return its default value.
//  public mutating func clearFileToken() {self._fileToken = nil}

  public var fileSize: String {
    get {return _fileSize ?? String()}
    set {_fileSize = newValue}
  }
  /// Returns true if `fileSize` has been explicitly set.
//  public var hasFileSize: Bool {return self._fileSize != nil}
  /// Clears the value of `fileSize`. Subsequent reads from it will return its default value.
//  public mutating func clearFileSize() {self._fileSize = nil}

  public var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {self._name = nil}

  public var type: LarkNCExtensionPB_Entities_CalendarEventAttachment.TypeEnum {
    get {return _type ?? .unknown}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}

  public var uploaderUserID: String {
    get {return _uploaderUserID ?? String()}
    set {_uploaderUserID = newValue}
  }
  /// Returns true if `uploaderUserID` has been explicitly set.
//  public var hasUploaderUserID: Bool {return self._uploaderUserID != nil}
  /// Clears the value of `uploaderUserID`. Subsequent reads from it will return its default value.
//  public mutating func clearUploaderUserID() {self._uploaderUserID = nil}

  /// 是否已经删除，前端删除attachment时标记该字段
  public var isDeleted: Bool {
    get {return _isDeleted ?? false}
    set {_isDeleted = newValue}
  }
  /// Returns true if `isDeleted` has been explicitly set.
//  public var hasIsDeleted: Bool {return self._isDeleted != nil}
  /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDeleted() {self._isDeleted = nil}

  /// 客户端填写，服务端保存，不做特殊处理
  public var position: Int32 {
    get {return _position ?? 0}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
//  public mutating func clearPosition() {self._position = nil}

  /// 飞阅会文档链接
  public var docUrls: [String] = []

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum TypeEnum: LarkHTTP.Enum {
    public typealias RawValue = Int

    /// 未知类型
    case unknown // = 0

    /// 本地文件
    case local // = 1

    /// 飞阅会链接
    case samepagemeeting // = 2

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .local
      case 2: self = .samepagemeeting
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .local: return 1
      case .samepagemeeting: return 2
      }
    }

  }

  public init() {}

  fileprivate var _fileToken: String? = nil
  fileprivate var _fileSize: String? = nil
  fileprivate var _name: String? = nil
  fileprivate var _type: LarkNCExtensionPB_Entities_CalendarEventAttachment.TypeEnum? = nil
  fileprivate var _uploaderUserID: String? = nil
  fileprivate var _isDeleted: Bool? = nil
  fileprivate var _position: Int32? = nil
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_CalendarEventAttachment.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Entities_SamePageMeetingInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var url: [String] = []

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}
}

//public struct LarkNCExtensionPB_Entities_ApprovalTrigger {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  ///trigger > 0 就是条件审批
//  public var durationTrigger: Int64 {
//    get {return _durationTrigger ?? 0}
//    set {_durationTrigger = newValue}
//  }
  /// Returns true if `durationTrigger` has been explicitly set.
//  public var hasDurationTrigger: Bool {return self._durationTrigger != nil}
  /// Clears the value of `durationTrigger`. Subsequent reads from it will return its default value.
//  public mutating func clearDurationTrigger() {self._durationTrigger = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _durationTrigger: Int64? = nil
//}

//public struct LarkNCExtensionPB_Entities_ResourceApprovalInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 有user_id就要审批
//  public var approverUserIds: [Int64] {
//    get {return _storage._approverUserIds}
//    set {_uniqueStorage()._approverUserIds = newValue}
//  }
//
//  public var trigger: LarkNCExtensionPB_Entities_ApprovalTrigger {
//    get {return _storage._trigger ?? LarkNCExtensionPB_Entities_ApprovalTrigger()}
//    set {_uniqueStorage()._trigger = newValue}
//  }
  /// Returns true if `trigger` has been explicitly set.
//  public var hasTrigger: Bool {return _storage._trigger != nil}
  /// Clears the value of `trigger`. Subsequent reads from it will return its default value.
//  public mutating func clearTrigger() {_uniqueStorage()._trigger = nil}
//
  /// admin的全局审批开关
//  public var adminOnOff: Bool {
//    get {return _storage._adminOnOff ?? false}
//    set {_uniqueStorage()._adminOnOff = newValue}
//  }
  /// Returns true if `adminOnOff` has been explicitly set.
//  public var hasAdminOnOff: Bool {return _storage._adminOnOff != nil}
  /// Clears the value of `adminOnOff`. Subsequent reads from it will return its default value.
//  public mutating func clearAdminOnOff() {_uniqueStorage()._adminOnOff = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

///所有限制策略均为 单位为秒的时间段
//public struct LarkNCExtensionPB_Entities_ResourceStrategy {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 单次预定最长时间
//  public var singleMaxDuration: Int64 {
//    get {return _singleMaxDuration ?? 0}
//    set {_singleMaxDuration = newValue}
//  }
  /// Returns true if `singleMaxDuration` has been explicitly set.
//  public var hasSingleMaxDuration: Bool {return self._singleMaxDuration != nil}
  /// Clears the value of `singleMaxDuration`. Subsequent reads from it will return its default value.
//  public mutating func clearSingleMaxDuration() {self._singleMaxDuration = nil}
//
  /// 最远可预定时间，例：如果是只能预定两年内的会议室： 3600*24*365
//  public var untilMaxDuration: Int64 {
//    get {return _untilMaxDuration ?? 0}
//    set {_untilMaxDuration = newValue}
//  }
  /// Returns true if `untilMaxDuration` has been explicitly set.
//  public var hasUntilMaxDuration: Bool {return self._untilMaxDuration != nil}
  /// Clears the value of `untilMaxDuration`. Subsequent reads from it will return its default value.
//  public mutating func clearUntilMaxDuration() {self._untilMaxDuration = nil}
//
  /// 每日可预定的开始时间
//  public var dailyStartTime: Int64 {
//    get {return _dailyStartTime ?? 0}
//    set {_dailyStartTime = newValue}
//  }
  /// Returns true if `dailyStartTime` has been explicitly set.
//  public var hasDailyStartTime: Bool {return self._dailyStartTime != nil}
  /// Clears the value of `dailyStartTime`. Subsequent reads from it will return its default value.
//  public mutating func clearDailyStartTime() {self._dailyStartTime = nil}
//
  /// 每日可预定的结束时间
//  public var dailyEndTime: Int64 {
//    get {return _dailyEndTime ?? 0}
//    set {_dailyEndTime = newValue}
//  }
  /// Returns true if `dailyEndTime` has been explicitly set.
//  public var hasDailyEndTime: Bool {return self._dailyEndTime != nil}
  /// Clears the value of `dailyEndTime`. Subsequent reads from it will return its default value.
//  public mutating func clearDailyEndTime() {self._dailyEndTime = nil}
//
  /// 即每日预定时间的时区, 如预定的中国时间6-8 则是 start_time: 3600*6 ,end_time: 3600*8, timezone: Asia/shanghai
//  public var timezone: String {
//    get {return _timezone ?? String()}
//    set {_timezone = newValue}
//  }
  /// Returns true if `timezone` has been explicitly set.
//  public var hasTimezone: Bool {return self._timezone != nil}
  /// Clears the value of `timezone`. Subsequent reads from it will return its default value.
//  public mutating func clearTimezone() {self._timezone = nil}
//
//  public var isEnable: Bool {
//    get {return _isEnable ?? false}
//    set {_isEnable = newValue}
//  }
  /// Returns true if `isEnable` has been explicitly set.
//  public var hasIsEnable: Bool {return self._isEnable != nil}
  /// Clears the value of `isEnable`. Subsequent reads from it will return its default value.
//  public mutating func clearIsEnable() {self._isEnable = nil}
//
  /// 开放当日可预约的最早时间，单位为秒。若GMT+8 8点可预约，该值为3600*8
//  public var earliestBookTime: Int32 {
//    get {return _earliestBookTime ?? 0}
//    set {_earliestBookTime = newValue}
//  }
  /// Returns true if `earliestBookTime` has been explicitly set.
//  public var hasEarliestBookTime: Bool {return self._earliestBookTime != nil}
  /// Clears the value of `earliestBookTime`. Subsequent reads from it will return its default value.
//  public mutating func clearEarliestBookTime() {self._earliestBookTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _singleMaxDuration: Int64? = nil
//  fileprivate var _untilMaxDuration: Int64? = nil
//  fileprivate var _dailyStartTime: Int64? = nil
//  fileprivate var _dailyEndTime: Int64? = nil
//  fileprivate var _timezone: String? = nil
//  fileprivate var _isEnable: Bool? = nil
//  fileprivate var _earliestBookTime: Int32? = nil
//}

//public struct LarkNCExtensionPB_Entities_ResourceRelatedInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var resourceStrategy: LarkNCExtensionPB_Entities_ResourceStrategy {
//    get {return _storage._resourceStrategy ?? LarkNCExtensionPB_Entities_ResourceStrategy()}
//    set {_uniqueStorage()._resourceStrategy = newValue}
//  }
  /// Returns true if `resourceStrategy` has been explicitly set.
//  public var hasResourceStrategy: Bool {return _storage._resourceStrategy != nil}
  /// Clears the value of `resourceStrategy`. Subsequent reads from it will return its default value.
//  public mutating func clearResourceStrategy() {_uniqueStorage()._resourceStrategy = nil}
//
//  public var resourceCustomization: LarkNCExtensionPB_Entities_ResourceCustomization {
//    get {return _storage._resourceCustomization ?? LarkNCExtensionPB_Entities_ResourceCustomization()}
//    set {_uniqueStorage()._resourceCustomization = newValue}
//  }
  /// Returns true if `resourceCustomization` has been explicitly set.
//  public var hasResourceCustomization: Bool {return _storage._resourceCustomization != nil}
  /// Clears the value of `resourceCustomization`. Subsequent reads from it will return its default value.
//  public mutating func clearResourceCustomization() {_uniqueStorage()._resourceCustomization = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

public struct LarkNCExtensionPB_Entities_CalendarResource {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id ?? String()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var calendarID: String {
    get {return _storage._calendarID ?? String()}
    set {_uniqueStorage()._calendarID = newValue}
  }
  /// Returns true if `calendarID` has been explicitly set.
//  public var hasCalendarID: Bool {return _storage._calendarID != nil}
  /// Clears the value of `calendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarID() {_uniqueStorage()._calendarID = nil}

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}

  public var type: LarkNCExtensionPB_Entities_CalendarResource.TypeEnum {
    get {return _storage._type ?? .other}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}

  public var status: LarkNCExtensionPB_Entities_CalendarResource.Status {
    get {return _storage._status ?? .free}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var buildingID: String {
    get {return _storage._buildingID ?? String()}
    set {_uniqueStorage()._buildingID = newValue}
  }
  /// Returns true if `buildingID` has been explicitly set.
//  public var hasBuildingID: Bool {return _storage._buildingID != nil}
  /// Clears the value of `buildingID`. Subsequent reads from it will return its default value.
//  public mutating func clearBuildingID() {_uniqueStorage()._buildingID = nil}

  public var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  public var capacity: Int32 {
    get {return _storage._capacity ?? 0}
    set {_uniqueStorage()._capacity = newValue}
  }
  /// Returns true if `capacity` has been explicitly set.
  public var hasCapacity: Bool {return _storage._capacity != nil}
  /// Clears the value of `capacity`. Subsequent reads from it will return its default value.
//  public mutating func clearCapacity() {_uniqueStorage()._capacity = nil}

  public var floorName: String {
    get {return _storage._floorName ?? String()}
    set {_uniqueStorage()._floorName = newValue}
  }
  /// Returns true if `floorName` has been explicitly set.
//  public var hasFloorName: Bool {return _storage._floorName != nil}
  /// Clears the value of `floorName`. Subsequent reads from it will return its default value.
//  public mutating func clearFloorName() {_uniqueStorage()._floorName = nil}

  public var category: String {
    get {return _storage._category ?? String()}
    set {_uniqueStorage()._category = newValue}
  }
  /// Returns true if `category` has been explicitly set.
//  public var hasCategory: Bool {return _storage._category != nil}
  /// Clears the value of `category`. Subsequent reads from it will return its default value.
//  public mutating func clearCategory() {_uniqueStorage()._category = nil}

  public var isDeleted: Bool {
    get {return _storage._isDeleted ?? false}
    set {_uniqueStorage()._isDeleted = newValue}
  }
  /// Returns true if `isDeleted` has been explicitly set.
//  public var hasIsDeleted: Bool {return _storage._isDeleted != nil}
  /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDeleted() {_uniqueStorage()._isDeleted = nil}

  public var isExternal: Bool {
    get {return _storage._isExternal ?? false}
    set {_uniqueStorage()._isExternal = newValue}
  }
  /// Returns true if `isExternal` has been explicitly set.
//  public var hasIsExternal: Bool {return _storage._isExternal != nil}
  /// Clears the value of `isExternal`. Subsequent reads from it will return its default value.
//  public mutating func clearIsExternal() {_uniqueStorage()._isExternal = nil}

  public var weight: Int32 {
    get {return _storage._weight ?? 0}
    set {_uniqueStorage()._weight = newValue}
  }
  /// Returns true if `weight` has been explicitly set.
//  public var hasWeight: Bool {return _storage._weight != nil}
  /// Clears the value of `weight`. Subsequent reads from it will return its default value.
//  public mutating func clearWeight() {_uniqueStorage()._weight = nil}

  public var tenantID: String {
    get {return _storage._tenantID ?? String()}
    set {_uniqueStorage()._tenantID = newValue}
  }
  /// Returns true if `tenantID` has been explicitly set.
  public var hasTenantID: Bool {return _storage._tenantID != nil}
  /// Clears the value of `tenantID`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantID() {_uniqueStorage()._tenantID = nil}

  public var isDisabled: Bool {
    get {return _storage._isDisabled ?? false}
    set {_uniqueStorage()._isDisabled = newValue}
  }
  /// Returns true if `isDisabled` has been explicitly set.
//  public var hasIsDisabled: Bool {return _storage._isDisabled != nil}
  /// Clears the value of `isDisabled`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDisabled() {_uniqueStorage()._isDisabled = nil}

  public var resourceSchema: Data {
    get {return _storage._resourceSchema ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._resourceSchema = newValue}
  }
  /// Returns true if `resourceSchema` has been explicitly set.
//  public var hasResourceSchema: Bool {return _storage._resourceSchema != nil}
  /// Clears the value of `resourceSchema`. Subsequent reads from it will return its default value.
//  public mutating func clearResourceSchema() {_uniqueStorage()._resourceSchema = nil}

  /// 关联外部应用数据
  public var schemaExtraData: Data {
    get {return _storage._schemaExtraData ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._schemaExtraData = newValue}
  }
  /// Returns true if `schemaExtraData` has been explicitly set.
//  public var hasSchemaExtraData: Bool {return _storage._schemaExtraData != nil}
  /// Clears the value of `schemaExtraData`. Subsequent reads from it will return its default value.
//  public mutating func clearSchemaExtraData() {_uniqueStorage()._schemaExtraData = nil}

  ///设备名, 不再使用
  public var equipmentNames: [String] {
    get {return _storage._equipmentNames}
    set {_uniqueStorage()._equipmentNames = newValue}
  }

  /// key:id , val: default_name
  public var equipmentNameMap: Dictionary<String,String> {
    get {return _storage._equipmentNameMap}
    set {_uniqueStorage()._equipmentNameMap = newValue}
  }

  public var unknownFields = LarkHTTP.UnknownStorage()

  public enum TypeEnum: LarkHTTP.Enum {
    public typealias RawValue = Int
    case meetingRoom // = 1
    case other // = 2

    public init() {
      self = .meetingRoom
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .meetingRoom
      case 2: self = .other
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .meetingRoom: return 1
      case .other: return 2
      }
    }

  }

  public enum Status: LarkHTTP.Enum {
    public typealias RawValue = Int
    case free // = 1
    case busy // = 2

    public init() {
      self = .free
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .free
      case 2: self = .busy
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .free: return 1
      case .busy: return 2
      }
    }

  }

  enum ExternalResourceType: LarkHTTP.Enum {
    public typealias RawValue = Int
    case google // = 1

    public init() {
      self = .google
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .google
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .google: return 1
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension LarkNCExtensionPB_Entities_CalendarResource.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_CalendarResource.Status: CaseIterable {
  // Support synthesized by the compiler.
}

extension LarkNCExtensionPB_Entities_CalendarResource.ExternalResourceType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// 用于数据库中存储resource的extra信息
//public struct LarkNCExtensionPB_Entities_CalendarResourceExtra {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var description_p: String {
//    get {return _storage._description_p ?? String()}
//    set {_uniqueStorage()._description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}
//
//  public var capacity: Int32 {
//    get {return _storage._capacity ?? 0}
//    set {_uniqueStorage()._capacity = newValue}
//  }
  /// Returns true if `capacity` has been explicitly set.
//  public var hasCapacity: Bool {return _storage._capacity != nil}
  /// Clears the value of `capacity`. Subsequent reads from it will return its default value.
//  public mutating func clearCapacity() {_uniqueStorage()._capacity = nil}
//
//  public var category: String {
//    get {return _storage._category ?? String()}
//    set {_uniqueStorage()._category = newValue}
//  }
  /// Returns true if `category` has been explicitly set.
//  public var hasCategory: Bool {return _storage._category != nil}
  /// Clears the value of `category`. Subsequent reads from it will return its default value.
//  public mutating func clearCategory() {_uniqueStorage()._category = nil}
//
//  public var floorName: String {
//    get {return _storage._floorName ?? String()}
//    set {_uniqueStorage()._floorName = newValue}
//  }
  /// Returns true if `floorName` has been explicitly set.
//  public var hasFloorName: Bool {return _storage._floorName != nil}
  /// Clears the value of `floorName`. Subsequent reads from it will return its default value.
//  public mutating func clearFloorName() {_uniqueStorage()._floorName = nil}
//
  /// 二维码链接, key: language('zh', 'en', 'jp')  value: 对应语言的 image key
//  public var imageKeyMap: Dictionary<String,String> {
//    get {return _storage._imageKeyMap}
//    set {_uniqueStorage()._imageKeyMap = newValue}
//  }
//
  /// 备注
//  public var comment: String {
//    get {return _storage._comment ?? String()}
//    set {_uniqueStorage()._comment = newValue}
//  }
  /// Returns true if `comment` has been explicitly set.
//  public var hasComment: Bool {return _storage._comment != nil}
  /// Clears the value of `comment`. Subsequent reads from it will return its default value.
//  public mutating func clearComment() {_uniqueStorage()._comment = nil}
//
  /// 图片url
//  public var imageURL: String {
//    get {return _storage._imageURL ?? String()}
//    set {_uniqueStorage()._imageURL = newValue}
//  }
  /// Returns true if `imageURL` has been explicitly set.
//  public var hasImageURL: Bool {return _storage._imageURL != nil}
  /// Clears the value of `imageURL`. Subsequent reads from it will return its default value.
//  public mutating func clearImageURL() {_uniqueStorage()._imageURL = nil}
//
//  public var approvalInfo: LarkNCExtensionPB_Entities_ResourceApprovalInfo {
//    get {return _storage._approvalInfo ?? LarkNCExtensionPB_Entities_ResourceApprovalInfo()}
//    set {_uniqueStorage()._approvalInfo = newValue}
//  }
  /// Returns true if `approvalInfo` has been explicitly set.
//  public var hasApprovalInfo: Bool {return _storage._approvalInfo != nil}
  /// Clears the value of `approvalInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearApprovalInfo() {_uniqueStorage()._approvalInfo = nil}
//
//  public var requisitionInfo: LarkNCExtensionPB_Entities_ResourceRequisition {
//    get {return _storage._requisitionInfo ?? LarkNCExtensionPB_Entities_ResourceRequisition()}
//    set {_uniqueStorage()._requisitionInfo = newValue}
//  }
  /// Returns true if `requisitionInfo` has been explicitly set.
//  public var hasRequisitionInfo: Bool {return _storage._requisitionInfo != nil}
  /// Clears the value of `requisitionInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearRequisitionInfo() {_uniqueStorage()._requisitionInfo = nil}
//
  ///签到二维码, key: language('zh', 'en', 'jp')  value: 对应语言的 image key
//  public var checkInImageKeyMap: Dictionary<String,String> {
//    get {return _storage._checkInImageKeyMap}
//    set {_uniqueStorage()._checkInImageKeyMap = newValue}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_ResourceRequisition {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var startTime: Int64 {
//    get {return _startTime ?? 0}
//    set {_startTime = newValue}
//  }
  /// Returns true if `startTime` has been explicitly set.
//  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
//  public mutating func clearStartTime() {self._startTime = nil}
//
//  public var endTime: Int64 {
//    get {return _endTime ?? 0}
//    set {_endTime = newValue}
//  }
  /// Returns true if `endTime` has been explicitly set.
//  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
//  public mutating func clearEndTime() {self._endTime = nil}
//
//  public var contactIds: [Int64] = []
//
//  public var reason: String {
//    get {return _reason ?? String()}
//    set {_reason = newValue}
//  }
  /// Returns true if `reason` has been explicitly set.
//  public var hasReason: Bool {return self._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
//  public mutating func clearReason() {self._reason = nil}
//
//  public var needNotification: Bool {
//    get {return _needNotification ?? false}
//    set {_needNotification = newValue}
//  }
  /// Returns true if `needNotification` has been explicitly set.
//  public var hasNeedNotification: Bool {return self._needNotification != nil}
  /// Clears the value of `needNotification`. Subsequent reads from it will return its default value.
//  public mutating func clearNeedNotification() {self._needNotification = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _startTime: Int64? = nil
//  fileprivate var _endTime: Int64? = nil
//  fileprivate var _reason: String? = nil
//  fileprivate var _needNotification: Bool? = nil
//}

/// 只读的配置项
//public struct LarkNCExtensionPB_Entities_CalendarSettingConfig {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 语言和辅助日历的映射关系
//  public var langAlternateCalendarMap: Dictionary<String,LarkNCExtensionPB_Entities_AlternateCalendar> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

//public struct LarkNCExtensionPB_Entities_CalendarSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 新建日程默认时长，单位分钟
//  public var defaultEventDurationV2: Int32 {
//    get {return _storage._defaultEventDurationV2 ?? 30}
//    set {_uniqueStorage()._defaultEventDurationV2 = newValue}
//  }
  /// Returns true if `defaultEventDurationV2` has been explicitly set.
//  public var hasDefaultEventDurationV2: Bool {return _storage._defaultEventDurationV2 != nil}
  /// Clears the value of `defaultEventDurationV2`. Subsequent reads from it will return its default value.
//  public mutating func clearDefaultEventDurationV2() {_uniqueStorage()._defaultEventDurationV2 = nil}
//
  /// 是否在视图上显示已拒绝的日程
//  public var showRejectedSchedule: Bool {
//    get {return _storage._showRejectedSchedule ?? true}
//    set {_uniqueStorage()._showRejectedSchedule = newValue}
//  }
  /// Returns true if `showRejectedSchedule` has been explicitly set.
//  public var hasShowRejectedSchedule: Bool {return _storage._showRejectedSchedule != nil}
  /// Clears the value of `showRejectedSchedule`. Subsequent reads from it will return its default value.
//  public mutating func clearShowRejectedSchedule() {_uniqueStorage()._showRejectedSchedule = nil}
//
  /// 全天日程默认提醒时间，默认值:-480 (当天8点)
//  public var defaultAllDayReminder: Int32 {
//    get {return _storage._defaultAllDayReminder ?? -480}
//    set {_uniqueStorage()._defaultAllDayReminder = newValue}
//  }
  /// Returns true if `defaultAllDayReminder` has been explicitly set.
//  public var hasDefaultAllDayReminder: Bool {return _storage._defaultAllDayReminder != nil}
  /// Clears the value of `defaultAllDayReminder`. Subsequent reads from it will return its default value.
//  public mutating func clearDefaultAllDayReminder() {_uniqueStorage()._defaultAllDayReminder = nil}
//
  /// 非全天日程默认提醒时间，默认值:5 (提前5分钟)
//  public var defaultNoneAllDayReminder: Int32 {
//    get {return _storage._defaultNoneAllDayReminder ?? 5}
//    set {_uniqueStorage()._defaultNoneAllDayReminder = newValue}
//  }
  /// Returns true if `defaultNoneAllDayReminder` has been explicitly set.
//  public var hasDefaultNoneAllDayReminder: Bool {return _storage._defaultNoneAllDayReminder != nil}
  /// Clears the value of `defaultNoneAllDayReminder`. Subsequent reads from it will return its default value.
//  public mutating func clearDefaultNoneAllDayReminder() {_uniqueStorage()._defaultNoneAllDayReminder = nil}
//
  /// Output only, do not accept input from frontend/app clients.
//  public var bindGoogleCalendar: Bool {
//    get {return _storage._bindGoogleCalendar ?? false}
//    set {_uniqueStorage()._bindGoogleCalendar = newValue}
//  }
  /// Returns true if `bindGoogleCalendar` has been explicitly set.
//  public var hasBindGoogleCalendar: Bool {return _storage._bindGoogleCalendar != nil}
  /// Clears the value of `bindGoogleCalendar`. Subsequent reads from it will return its default value.
//  public mutating func clearBindGoogleCalendar() {_uniqueStorage()._bindGoogleCalendar = nil}
//
  /// 是否只push接受的日程提醒
//  public var remindAcceptOnly: Bool {
//    get {return _storage._remindAcceptOnly ?? false}
//    set {_uniqueStorage()._remindAcceptOnly = newValue}
//  }
  /// Returns true if `remindAcceptOnly` has been explicitly set.
//  public var hasRemindAcceptOnly: Bool {return _storage._remindAcceptOnly != nil}
  /// Clears the value of `remindAcceptOnly`. Subsequent reads from it will return its default value.
//  public mutating func clearRemindAcceptOnly() {_uniqueStorage()._remindAcceptOnly = nil}
//
  /// 有人拒绝日程邀请时是否通知
//  public var notifyWhenGuestsDecline: Bool {
//    get {return _storage._notifyWhenGuestsDecline ?? false}
//    set {_uniqueStorage()._notifyWhenGuestsDecline = newValue}
//  }
  /// Returns true if `notifyWhenGuestsDecline` has been explicitly set.
//  public var hasNotifyWhenGuestsDecline: Bool {return _storage._notifyWhenGuestsDecline != nil}
  /// Clears the value of `notifyWhenGuestsDecline`. Subsequent reads from it will return its default value.
//  public mutating func clearNotifyWhenGuestsDecline() {_uniqueStorage()._notifyWhenGuestsDecline = nil}
//
  /// 是否开启过去日程蒙版
//  public var showPastEventsMask: Bool {
//    get {return _storage._showPastEventsMask ?? true}
//    set {_uniqueStorage()._showPastEventsMask = newValue}
//  }
  /// Returns true if `showPastEventsMask` has been explicitly set.
//  public var hasShowPastEventsMask: Bool {return _storage._showPastEventsMask != nil}
  /// Clears the value of `showPastEventsMask`. Subsequent reads from it will return its default value.
//  public mutating func clearShowPastEventsMask() {_uniqueStorage()._showPastEventsMask = nil}
//
  /// 存储的皮肤的颜色
//  public var skinType: Int32 {
//    get {return _storage._skinType ?? 1}
//    set {_uniqueStorage()._skinType = newValue}
//  }
  /// Returns true if `skinType` has been explicitly set.
//  public var hasSkinType: Bool {return _storage._skinType != nil}
  /// Clears the value of `skinType`. Subsequent reads from it will return its default value.
//  public mutating func clearSkinType() {_uniqueStorage()._skinType = nil}
//
  /// 设备时区
//  public var timezone: String {
//    get {return _storage._timezone ?? String()}
//    set {_uniqueStorage()._timezone = newValue}
//  }
  /// Returns true if `timezone` has been explicitly set.
//  public var hasTimezone: Bool {return _storage._timezone != nil}
  /// Clears the value of `timezone`. Subsequent reads from it will return its default value.
//  public mutating func clearTimezone() {_uniqueStorage()._timezone = nil}
//
  /// 是否开启过去日程蒙版 pc
//  public var showPastEventsMaskPc: Bool {
//    get {return _storage._showPastEventsMaskPc ?? true}
//    set {_uniqueStorage()._showPastEventsMaskPc = newValue}
//  }
  /// Returns true if `showPastEventsMaskPc` has been explicitly set.
//  public var hasShowPastEventsMaskPc: Bool {return _storage._showPastEventsMaskPc != nil}
  /// Clears the value of `showPastEventsMaskPc`. Subsequent reads from it will return its default value.
//  public mutating func clearShowPastEventsMaskPc() {_uniqueStorage()._showPastEventsMaskPc = nil}
//
  /// 存储的皮肤的颜色 pc
//  public var skinTypePc: Int32 {
//    get {return _storage._skinTypePc ?? 1}
//    set {_uniqueStorage()._skinTypePc = newValue}
//  }
  /// Returns true if `skinTypePc` has been explicitly set.
//  public var hasSkinTypePc: Bool {return _storage._skinTypePc != nil}
  /// Clears the value of `skinTypePc`. Subsequent reads from it will return its default value.
//  public mutating func clearSkinTypePc() {_uniqueStorage()._skinTypePc = nil}
//
  /// 是否开启过去日程蒙版 android
//  public var showPastEventsMaskAndroid: Bool {
//    get {return _storage._showPastEventsMaskAndroid ?? true}
//    set {_uniqueStorage()._showPastEventsMaskAndroid = newValue}
//  }
  /// Returns true if `showPastEventsMaskAndroid` has been explicitly set.
//  public var hasShowPastEventsMaskAndroid: Bool {return _storage._showPastEventsMaskAndroid != nil}
  /// Clears the value of `showPastEventsMaskAndroid`. Subsequent reads from it will return its default value.
//  public mutating func clearShowPastEventsMaskAndroid() {_uniqueStorage()._showPastEventsMaskAndroid = nil}
//
  /// 存储的皮肤的颜色 android
//  public var skinTypeAndroid: Int32 {
//    get {return _storage._skinTypeAndroid ?? 1}
//    set {_uniqueStorage()._skinTypeAndroid = newValue}
//  }
  /// Returns true if `skinTypeAndroid` has been explicitly set.
//  public var hasSkinTypeAndroid: Bool {return _storage._skinTypeAndroid != nil}
  /// Clears the value of `skinTypeAndroid`. Subsequent reads from it will return its default value.
//  public mutating func clearSkinTypeAndroid() {_uniqueStorage()._skinTypeAndroid = nil}
//
  /// 是否开启过去日程蒙版 ios
//  public var showPastEventsMaskIos: Bool {
//    get {return _storage._showPastEventsMaskIos ?? true}
//    set {_uniqueStorage()._showPastEventsMaskIos = newValue}
//  }
  /// Returns true if `showPastEventsMaskIos` has been explicitly set.
//  public var hasShowPastEventsMaskIos: Bool {return _storage._showPastEventsMaskIos != nil}
  /// Clears the value of `showPastEventsMaskIos`. Subsequent reads from it will return its default value.
//  public mutating func clearShowPastEventsMaskIos() {_uniqueStorage()._showPastEventsMaskIos = nil}
//
  /// 存储的皮肤的颜色 ios
//  public var skinTypeIos: Int32 {
//    get {return _storage._skinTypeIos ?? 1}
//    set {_uniqueStorage()._skinTypeIos = newValue}
//  }
  /// Returns true if `skinTypeIos` has been explicitly set.
//  public var hasSkinTypeIos: Bool {return _storage._skinTypeIos != nil}
  /// Clears the value of `skinTypeIos`. Subsequent reads from it will return its default value.
//  public mutating func clearSkinTypeIos() {_uniqueStorage()._skinTypeIos = nil}
//
  /// 存储视图每周开始的时间 周日为0
//  public var weekStartDay: Int32 {
//    get {return _storage._weekStartDay ?? 0}
//    set {_uniqueStorage()._weekStartDay = newValue}
//  }
  /// Returns true if `weekStartDay` has been explicitly set.
//  public var hasWeekStartDay: Bool {return _storage._weekStartDay != nil}
  /// Clears the value of `weekStartDay`. Subsequent reads from it will return its default value.
//  public mutating func clearWeekStartDay() {_uniqueStorage()._weekStartDay = nil}
//
  /// 用户绑定的google日历Email
//  public var googleCalendarEmail: String {
//    get {return _storage._googleCalendarEmail ?? String()}
//    set {_uniqueStorage()._googleCalendarEmail = newValue}
//  }
  /// Returns true if `googleCalendarEmail` has been explicitly set.
//  public var hasGoogleCalendarEmail: Bool {return _storage._googleCalendarEmail != nil}
  /// Clears the value of `googleCalendarEmail`. Subsequent reads from it will return its default value.
//  public mutating func clearGoogleCalendarEmail() {_uniqueStorage()._googleCalendarEmail = nil}
//
  /// 是否显示辅助时区
//  public var showOtherTimezone: Bool {
//    get {return _storage._showOtherTimezone ?? false}
//    set {_uniqueStorage()._showOtherTimezone = newValue}
//  }
  /// Returns true if `showOtherTimezone` has been explicitly set.
//  public var hasShowOtherTimezone: Bool {return _storage._showOtherTimezone != nil}
  /// Clears the value of `showOtherTimezone`. Subsequent reads from it will return its default value.
//  public mutating func clearShowOtherTimezone() {_uniqueStorage()._showOtherTimezone = nil}
//
  /// 辅助时区列表
//  public var otherTimezones: [String] {
//    get {return _storage._otherTimezones}
//    set {_uniqueStorage()._otherTimezones = newValue}
//  }
//
  /// 隐藏绑定谷歌日历
//  public var hideBindingGoogleCalendar: Bool {
//    get {return _storage._hideBindingGoogleCalendar ?? false}
//    set {_uniqueStorage()._hideBindingGoogleCalendar = newValue}
//  }
  /// Returns true if `hideBindingGoogleCalendar` has been explicitly set.
//  public var hasHideBindingGoogleCalendar: Bool {return _storage._hideBindingGoogleCalendar != nil}
  /// Clears the value of `hideBindingGoogleCalendar`. Subsequent reads from it will return its default value.
//  public mutating func clearHideBindingGoogleCalendar() {_uniqueStorage()._hideBindingGoogleCalendar = nil}
//
  /// 是否继续提示夏令时变更
//  public var summerTimeAlert: Bool {
//    get {return _storage._summerTimeAlert ?? true}
//    set {_uniqueStorage()._summerTimeAlert = newValue}
//  }
  /// Returns true if `summerTimeAlert` has been explicitly set.
//  public var hasSummerTimeAlert: Bool {return _storage._summerTimeAlert != nil}
  /// Clears the value of `summerTimeAlert`. Subsequent reads from it will return its default value.
//  public mutating func clearSummerTimeAlert() {_uniqueStorage()._summerTimeAlert = nil}
//
  /// 是否启用系统时区
//  public var enableSystemTimezone: Bool {
//    get {return _storage._enableSystemTimezone ?? true}
//    set {_uniqueStorage()._enableSystemTimezone = newValue}
//  }
  /// Returns true if `enableSystemTimezone` has been explicitly set.
//  public var hasEnableSystemTimezone: Bool {return _storage._enableSystemTimezone != nil}
  /// Clears the value of `enableSystemTimezone`. Subsequent reads from it will return its default value.
//  public mutating func clearEnableSystemTimezone() {_uniqueStorage()._enableSystemTimezone = nil}
//
  /// 工作时间
//  public var workHourSetting: LarkNCExtensionPB_Entities_WorkHourSetting {
//    get {return _storage._workHourSetting ?? LarkNCExtensionPB_Entities_WorkHourSetting()}
//    set {_uniqueStorage()._workHourSetting = newValue}
//  }
  /// Returns true if `workHourSetting` has been explicitly set.
//  public var hasWorkHourSetting: Bool {return _storage._workHourSetting != nil}
  /// Clears the value of `workHourSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearWorkHourSetting() {_uniqueStorage()._workHourSetting = nil}
//
  /// 显示今日日程概览
//  public var showTodayView: Bool {
//    get {return _storage._showTodayView ?? true}
//    set {_uniqueStorage()._showTodayView = newValue}
//  }
  /// Returns true if `showTodayView` has been explicitly set.
//  public var hasShowTodayView: Bool {return _storage._showTodayView != nil}
  /// Clears the value of `showTodayView`. Subsequent reads from it will return its default value.
//  public mutating func clearShowTodayView() {_uniqueStorage()._showTodayView = nil}
//
  /// 是否开启过去日程蒙版 web
//  public var showPastEventsMaskWeb: Bool {
//    get {return _storage._showPastEventsMaskWeb ?? true}
//    set {_uniqueStorage()._showPastEventsMaskWeb = newValue}
//  }
  /// Returns true if `showPastEventsMaskWeb` has been explicitly set.
//  public var hasShowPastEventsMaskWeb: Bool {return _storage._showPastEventsMaskWeb != nil}
  /// Clears the value of `showPastEventsMaskWeb`. Subsequent reads from it will return its default value.
//  public mutating func clearShowPastEventsMaskWeb() {_uniqueStorage()._showPastEventsMaskWeb = nil}
//
  /// 存储的皮肤的颜色 web
//  public var skinTypeWeb: Int32 {
//    get {return _storage._skinTypeWeb ?? 1}
//    set {_uniqueStorage()._skinTypeWeb = newValue}
//  }
  /// Returns true if `skinTypeWeb` has been explicitly set.
//  public var hasSkinTypeWeb: Bool {return _storage._skinTypeWeb != nil}
  /// Clears the value of `skinTypeWeb`. Subsequent reads from it will return its default value.
//  public mutating func clearSkinTypeWeb() {_uniqueStorage()._skinTypeWeb = nil}
//
  /// 启用的辅助日历，如农历
//  public var alternateCalendar: LarkNCExtensionPB_Entities_AlternateCalendar {
//    get {return _storage._alternateCalendar ?? .noneCalendar}
//    set {_uniqueStorage()._alternateCalendar = newValue}
//  }
  /// Returns true if `alternateCalendar` has been explicitly set.
//  public var hasAlternateCalendar: Bool {return _storage._alternateCalendar != nil}
  /// Clears the value of `alternateCalendar`. Subsequent reads from it will return its default value.
//  public mutating func clearAlternateCalendar() {_uniqueStorage()._alternateCalendar = nil}
//
  /// 只读的配置项
//  public var calendarSettingConfig: LarkNCExtensionPB_Entities_CalendarSettingConfig {
//    get {return _storage._calendarSettingConfig ?? LarkNCExtensionPB_Entities_CalendarSettingConfig()}
//    set {_uniqueStorage()._calendarSettingConfig = newValue}
//  }
  /// Returns true if `calendarSettingConfig` has been explicitly set.
//  public var hasCalendarSettingConfig: Bool {return _storage._calendarSettingConfig != nil}
  /// Clears the value of `calendarSettingConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarSettingConfig() {_uniqueStorage()._calendarSettingConfig = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_CalendarTenantSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  ///会议室是否支持多选
//  public var enableMultiSelection: Bool {
//    get {return _enableMultiSelection ?? false}
//    set {_enableMultiSelection = newValue}
//  }
  /// Returns true if `enableMultiSelection` has been explicitly set.
//  public var hasEnableMultiSelection: Bool {return self._enableMultiSelection != nil}
  /// Clears the value of `enableMultiSelection`. Subsequent reads from it will return its default value.
//  public mutating func clearEnableMultiSelection() {self._enableMultiSelection = nil}
//
//  public var displayType: LarkNCExtensionPB_Entities_ResourceDisplayType {
//    get {return _displayType ?? .unspecified}
//    set {_displayType = newValue}
//  }
  /// Returns true if `displayType` has been explicitly set.
//  public var hasDisplayType: Bool {return self._displayType != nil}
  /// Clears the value of `displayType`. Subsequent reads from it will return its default value.
//  public mutating func clearDisplayType() {self._displayType = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _enableMultiSelection: Bool? = nil
//  fileprivate var _displayType: LarkNCExtensionPB_Entities_ResourceDisplayType? = nil
//}

public struct LarkNCExtensionPB_Entities_WorkHourSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 是否开启了工作时间设置
  public var enableWorkHour: Bool {
    get {return _enableWorkHour ?? false}
    set {_enableWorkHour = newValue}
  }
  /// Returns true if `enableWorkHour` has been explicitly set.
//  public var hasEnableWorkHour: Bool {return self._enableWorkHour != nil}
  /// Clears the value of `enableWorkHour`. Subsequent reads from it will return its default value.
//  public mutating func clearEnableWorkHour() {self._enableWorkHour = nil}

  /// 用户设置的工作时间 key: DayOfWeek value: WorkHourItem
  public var workHourItems: Dictionary<String,LarkNCExtensionPB_Entities_WorkHourItem> = [:]

  /// 记录是否是第一次设置工作时间
  public var isFirstSet: Bool {
    get {return _isFirstSet ?? true}
    set {_isFirstSet = newValue}
  }
  /// Returns true if `isFirstSet` has been explicitly set.
//  public var hasIsFirstSet: Bool {return self._isFirstSet != nil}
  /// Clears the value of `isFirstSet`. Subsequent reads from it will return its default value.
//  public mutating func clearIsFirstSet() {self._isFirstSet = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _enableWorkHour: Bool? = nil
  fileprivate var _isFirstSet: Bool? = nil
}

public struct LarkNCExtensionPB_Entities_WorkHourItem {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var spans: [LarkNCExtensionPB_Entities_WorkHourSpan] = []

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}
}

public struct LarkNCExtensionPB_Entities_WorkHourSpan {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 单位:分钟
  public var startMinute: Int32 {
    get {return _startMinute ?? 0}
    set {_startMinute = newValue}
  }
  /// Returns true if `startMinute` has been explicitly set.
//  public var hasStartMinute: Bool {return self._startMinute != nil}
  /// Clears the value of `startMinute`. Subsequent reads from it will return its default value.
//  public mutating func clearStartMinute() {self._startMinute = nil}

  /// 单位:分钟
  public var endMinute: Int32 {
    get {return _endMinute ?? 0}
    set {_endMinute = newValue}
  }
  /// Returns true if `endMinute` has been explicitly set.
//  public var hasEndMinute: Bool {return self._endMinute != nil}
  /// Clears the value of `endMinute`. Subsequent reads from it will return its default value.
//  public mutating func clearEndMinute() {self._endMinute = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _startMinute: Int32? = nil
  fileprivate var _endMinute: Int32? = nil
}

//public struct LarkNCExtensionPB_Entities_CalendarUserDeviceSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var timezone: String {
//    get {return _timezone ?? String()}
//    set {_timezone = newValue}
//  }
  /// Returns true if `timezone` has been explicitly set.
//  public var hasTimezone: Bool {return self._timezone != nil}
  /// Clears the value of `timezone`. Subsequent reads from it will return its default value.
//  public mutating func clearTimezone() {self._timezone = nil}
//
//  public var deviceID: String {
//    get {return _deviceID ?? String()}
//    set {_deviceID = newValue}
//  }
  /// Returns true if `deviceID` has been explicitly set.
//  public var hasDeviceID: Bool {return self._deviceID != nil}
  /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
//  public mutating func clearDeviceID() {self._deviceID = nil}
//
//  public var enableSystemTimezone: Bool {
//    get {return _enableSystemTimezone ?? false}
//    set {_enableSystemTimezone = newValue}
//  }
  /// Returns true if `enableSystemTimezone` has been explicitly set.
//  public var hasEnableSystemTimezone: Bool {return self._enableSystemTimezone != nil}
  /// Clears the value of `enableSystemTimezone`. Subsequent reads from it will return its default value.
//  public mutating func clearEnableSystemTimezone() {self._enableSystemTimezone = nil}
//
//  public var alternateCalendar: LarkNCExtensionPB_Entities_AlternateCalendar {
//    get {return _alternateCalendar ?? .noneCalendar}
//    set {_alternateCalendar = newValue}
//  }
  /// Returns true if `alternateCalendar` has been explicitly set.
//  public var hasAlternateCalendar: Bool {return self._alternateCalendar != nil}
  /// Clears the value of `alternateCalendar`. Subsequent reads from it will return its default value.
//  public mutating func clearAlternateCalendar() {self._alternateCalendar = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _timezone: String? = nil
//  fileprivate var _deviceID: String? = nil
//  fileprivate var _enableSystemTimezone: Bool? = nil
//  fileprivate var _alternateCalendar: LarkNCExtensionPB_Entities_AlternateCalendar? = nil
//}

//public struct LarkNCExtensionPB_Entities_CalendarUserDeviceSettings {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var calendarUserDeviceSettings: [LarkNCExtensionPB_Entities_CalendarUserDeviceSetting] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

public struct LarkNCExtensionPB_Entities_CalendarBuilding {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}

  public var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {self._name = nil}

  public var description_p: String {
    get {return _description_p ?? String()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {self._description_p = nil}

  public var latitude: Float {
    get {return _latitude ?? 360}
    set {_latitude = newValue}
  }
  /// Returns true if `latitude` has been explicitly set.
  public var hasLatitude: Bool {return self._latitude != nil}
  /// Clears the value of `latitude`. Subsequent reads from it will return its default value.
//  public mutating func clearLatitude() {self._latitude = nil}

  public var longitude: Float {
    get {return _longitude ?? 360}
    set {_longitude = newValue}
  }
  /// Returns true if `longitude` has been explicitly set.
//  public var hasLongitude: Bool {return self._longitude != nil}
  /// Clears the value of `longitude`. Subsequent reads from it will return its default value.
//  public mutating func clearLongitude() {self._longitude = nil}

  public var floors: [String] = []

  public var meetingRooms: [LarkNCExtensionPB_Entities_CalendarResource] = []

  public var isDeleted: Bool {
    get {return _isDeleted ?? false}
    set {_isDeleted = newValue}
  }
  /// Returns true if `isDeleted` has been explicitly set.
//  public var hasIsDeleted: Bool {return self._isDeleted != nil}
  /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDeleted() {self._isDeleted = nil}

  public var weight: Int32 {
    get {return _weight ?? 0}
    set {_weight = newValue}
  }
  /// Returns true if `weight` has been explicitly set.
//  public var hasWeight: Bool {return self._weight != nil}
  /// Clears the value of `weight`. Subsequent reads from it will return its default value.
//  public mutating func clearWeight() {self._weight = nil}

  /// resource可抢占的时间段，按秒计，eg: 10分钟后可抢占, 600
  public var seizeTime: Int64 {
    get {return _seizeTime ?? 0}
    set {_seizeTime = newValue}
  }
  /// Returns true if `seizeTime` has been explicitly set.
//  public var hasSeizeTime: Bool {return self._seizeTime != nil}
  /// Clears the value of `seizeTime`. Subsequent reads from it will return its default value.
//  public mutating func clearSeizeTime() {self._seizeTime = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _id: String? = nil
  fileprivate var _name: String? = nil
  fileprivate var _description_p: String? = nil
  fileprivate var _latitude: Float? = nil
  fileprivate var _longitude: Float? = nil
  fileprivate var _isDeleted: Bool? = nil
  fileprivate var _weight: Int32? = nil
  fileprivate var _seizeTime: Int64? = nil
}

/// 用于数据库中存储building的extra信息
//public struct LarkNCExtensionPB_Entities_CalendarBuildingExtra {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var description_p: String {
//    get {return _description_p ?? String()}
//    set {_description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {self._description_p = nil}
//
//  public var latitude: Float {
//    get {return _latitude ?? 360}
//    set {_latitude = newValue}
//  }
  /// Returns true if `latitude` has been explicitly set.
//  public var hasLatitude: Bool {return self._latitude != nil}
  /// Clears the value of `latitude`. Subsequent reads from it will return its default value.
//  public mutating func clearLatitude() {self._latitude = nil}
//
//  public var longitude: Float {
//    get {return _longitude ?? 360}
//    set {_longitude = newValue}
//  }
  /// Returns true if `longitude` has been explicitly set.
//  public var hasLongitude: Bool {return self._longitude != nil}
  /// Clears the value of `longitude`. Subsequent reads from it will return its default value.
//  public mutating func clearLongitude() {self._longitude = nil}
//
//  public var floors: [String] = []
//
//  public var location: String {
//    get {return _location ?? String()}
//    set {_location = newValue}
//  }
  /// Returns true if `location` has been explicitly set.
//  public var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
//  public mutating func clearLocation() {self._location = nil}
//
  ///用于存储building的时区信息,详见 IANA Time Zone database, 例如"America/New_York"
//  public var timezone: String {
//    get {return _timezone ?? String()}
//    set {_timezone = newValue}
//  }
  /// Returns true if `timezone` has been explicitly set.
//  public var hasTimezone: Bool {return self._timezone != nil}
  /// Clears the value of `timezone`. Subsequent reads from it will return its default value.
//  public mutating func clearTimezone() {self._timezone = nil}
//
  /// resource可抢占的时间段，按秒计，eg: 10分钟后可抢占, 600
//  public var seizeTime: Int64 {
//    get {return _seizeTime ?? 0}
//    set {_seizeTime = newValue}
//  }
  /// Returns true if `seizeTime` has been explicitly set.
//  public var hasSeizeTime: Bool {return self._seizeTime != nil}
  /// Clears the value of `seizeTime`. Subsequent reads from it will return its default value.
//  public mutating func clearSeizeTime() {self._seizeTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _description_p: String? = nil
//  fileprivate var _latitude: Float? = nil
//  fileprivate var _longitude: Float? = nil
//  fileprivate var _location: String? = nil
//  fileprivate var _timezone: String? = nil
//  fileprivate var _seizeTime: Int64? = nil
//}

/// 用于搜索参与人中返回的信息
//public struct LarkNCExtensionPB_Entities_SearchContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
//  public var name: String {
//    get {return _name ?? String()}
//    set {_name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {self._name = nil}
//
//  public var description_p: String {
//    get {return _description_p ?? String()}
//    set {_description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {self._description_p = nil}
//
//  public var avatarURL: String {
//    get {return _avatarURL ?? String()}
//    set {_avatarURL = newValue}
//  }
  /// Returns true if `avatarURL` has been explicitly set.
//  public var hasAvatarURL: Bool {return self._avatarURL != nil}
  /// Clears the value of `avatarURL`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarURL() {self._avatarURL = nil}
//
//  public var searchContentType: LarkNCExtensionPB_Entities_SearchContent.SearchContentType {
//    get {return _searchContentType ?? .chatter}
//    set {_searchContentType = newValue}
//  }
  /// Returns true if `searchContentType` has been explicitly set.
//  public var hasSearchContentType: Bool {return self._searchContentType != nil}
  /// Clears the value of `searchContentType`. Subsequent reads from it will return its default value.
//  public mutating func clearSearchContentType() {self._searchContentType = nil}
//
  /// 租户id
//  public var tenantID: String {
//    get {return _tenantID ?? String()}
//    set {_tenantID = newValue}
//  }
  /// Returns true if `tenantID` has been explicitly set.
//  public var hasTenantID: Bool {return self._tenantID != nil}
  /// Clears the value of `tenantID`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantID() {self._tenantID = nil}
//
  /// 是否是跨租户会话
//  public var isCrossTenant: Bool {
//    get {return _isCrossTenant ?? false}
//    set {_isCrossTenant = newValue}
//  }
  /// Returns true if `isCrossTenant` has been explicitly set.
//  public var hasIsCrossTenant: Bool {return self._isCrossTenant != nil}
  /// Clears the value of `isCrossTenant`. Subsequent reads from it will return its default value.
//  public mutating func clearIsCrossTenant() {self._isCrossTenant = nil}
//
  /// 是否是会议群
//  public var isMeetingGroup: Bool {
//    get {return _isMeetingGroup ?? false}
//    set {_isMeetingGroup = newValue}
//  }
  /// Returns true if `isMeetingGroup` has been explicitly set.
//  public var hasIsMeetingGroup: Bool {return self._isMeetingGroup != nil}
  /// Clears the value of `isMeetingGroup`. Subsequent reads from it will return its default value.
//  public mutating func clearIsMeetingGroup() {self._isMeetingGroup = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum SearchContentType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case chatter // = 1
//    case group // = 2
//
//    public init() {
//      self = .chatter
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .chatter
//      case 2: self = .group
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .chatter: return 1
//      case .group: return 2
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _name: String? = nil
//  fileprivate var _description_p: String? = nil
//  fileprivate var _avatarURL: String? = nil
//  fileprivate var _searchContentType: LarkNCExtensionPB_Entities_SearchContent.SearchContentType? = nil
//  fileprivate var _tenantID: String? = nil
//  fileprivate var _isCrossTenant: Bool? = nil
//  fileprivate var _isMeetingGroup: Bool? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_SearchContent.SearchContentType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_GroupMemberContact {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var calendarID: String {
//    get {return _calendarID ?? String()}
//    set {_calendarID = newValue}
//  }
  /// Returns true if `calendarID` has been explicitly set.
//  public var hasCalendarID: Bool {return self._calendarID != nil}
  /// Clears the value of `calendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarID() {self._calendarID = nil}
//
//  public var avatarURL: String {
//    get {return _avatarURL ?? String()}
//    set {_avatarURL = newValue}
//  }
  /// Returns true if `avatarURL` has been explicitly set.
//  public var hasAvatarURL: Bool {return self._avatarURL != nil}
  /// Clears the value of `avatarURL`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarURL() {self._avatarURL = nil}
//
//  public var name: String {
//    get {return _name ?? String()}
//    set {_name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {self._name = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _calendarID: String? = nil
//  fileprivate var _avatarURL: String? = nil
//  fileprivate var _name: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_GroupMembersContact {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var groupMembersContact: [LarkNCExtensionPB_Entities_GroupMemberContact] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

//public struct LarkNCExtensionPB_Entities_MultiCalendarSearchContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var calendarID: String {
//    get {return _calendarID ?? String()}
//    set {_calendarID = newValue}
//  }
  /// Returns true if `calendarID` has been explicitly set.
//  public var hasCalendarID: Bool {return self._calendarID != nil}
  /// Clears the value of `calendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarID() {self._calendarID = nil}
//
//  public var type: LarkNCExtensionPB_Entities_MultiCalendarSearchContent.MultiCalendarSearchContentType {
//    get {return _type ?? .chatter}
//    set {_type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}
//
//  public var title: String {
//    get {return _title ?? String()}
//    set {_title = newValue}
//  }
  /// Returns true if `title` has been explicitly set.
//  public var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
//  public mutating func clearTitle() {self._title = nil}
//
//  public var subtitle: String {
//    get {return _subtitle ?? String()}
//    set {_subtitle = newValue}
//  }
  /// Returns true if `subtitle` has been explicitly set.
//  public var hasSubtitle: Bool {return self._subtitle != nil}
  /// Clears the value of `subtitle`. Subsequent reads from it will return its default value.
//  public mutating func clearSubtitle() {self._subtitle = nil}
//
//  public var avatarURL: String {
//    get {return _avatarURL ?? String()}
//    set {_avatarURL = newValue}
//  }
  /// Returns true if `avatarURL` has been explicitly set.
//  public var hasAvatarURL: Bool {return self._avatarURL != nil}
  /// Clears the value of `avatarURL`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarURL() {self._avatarURL = nil}
//
//  public var isPrivate: Bool {
//    get {return _isPrivate ?? false}
//    set {_isPrivate = newValue}
//  }
  /// Returns true if `isPrivate` has been explicitly set.
//  public var hasIsPrivate: Bool {return self._isPrivate != nil}
  /// Clears the value of `isPrivate`. Subsequent reads from it will return its default value.
//  public mutating func clearIsPrivate() {self._isPrivate = nil}
//
//  public var isMember: Bool {
//    get {return _isMember ?? false}
//    set {_isMember = newValue}
//  }
  /// Returns true if `isMember` has been explicitly set.
//  public var hasIsMember: Bool {return self._isMember != nil}
  /// Clears the value of `isMember`. Subsequent reads from it will return its default value.
//  public mutating func clearIsMember() {self._isMember = nil}
//
//  public var isDisabled: Bool {
//    get {return _isDisabled ?? false}
//    set {_isDisabled = newValue}
//  }
  /// Returns true if `isDisabled` has been explicitly set.
//  public var hasIsDisabled: Bool {return self._isDisabled != nil}
  /// Clears the value of `isDisabled`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDisabled() {self._isDisabled = nil}
//
//  public var isDismiss: Bool {
//    get {return _isDismiss ?? false}
//    set {_isDismiss = newValue}
//  }
  /// Returns true if `isDismiss` has been explicitly set.
//  public var hasIsDismiss: Bool {return self._isDismiss != nil}
  /// Clears the value of `isDismiss`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDismiss() {self._isDismiss = nil}
//
  /// 当前日历是否跨租户
//  public var isCrossTenant: Bool {
//    get {return _isCrossTenant ?? false}
//    set {_isCrossTenant = newValue}
//  }
  /// Returns true if `isCrossTenant` has been explicitly set.
//  public var hasIsCrossTenant: Bool {return self._isCrossTenant != nil}
  /// Clears the value of `isCrossTenant`. Subsequent reads from it will return its default value.
//  public mutating func clearIsCrossTenant() {self._isCrossTenant = nil}
//
  /// 当前日历租户id
//  public var calendarTenantID: String {
//    get {return _calendarTenantID ?? String()}
//    set {_calendarTenantID = newValue}
//  }
  /// Returns true if `calendarTenantID` has been explicitly set.
//  public var hasCalendarTenantID: Bool {return self._calendarTenantID != nil}
  /// Clears the value of `calendarTenantID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarTenantID() {self._calendarTenantID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum MultiCalendarSearchContentType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case chatter // = 1
//    case meetingRoom // = 2
//    case sharedCalendar // = 3
//
//    public init() {
//      self = .chatter
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .chatter
//      case 2: self = .meetingRoom
//      case 3: self = .sharedCalendar
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .chatter: return 1
//      case .meetingRoom: return 2
//      case .sharedCalendar: return 3
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _calendarID: String? = nil
//  fileprivate var _type: LarkNCExtensionPB_Entities_MultiCalendarSearchContent.MultiCalendarSearchContentType? = nil
//  fileprivate var _title: String? = nil
//  fileprivate var _subtitle: String? = nil
//  fileprivate var _avatarURL: String? = nil
//  fileprivate var _isPrivate: Bool? = nil
//  fileprivate var _isMember: Bool? = nil
//  fileprivate var _isDisabled: Bool? = nil
//  fileprivate var _isDismiss: Bool? = nil
//  fileprivate var _isCrossTenant: Bool? = nil
//  fileprivate var _calendarTenantID: String? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_MultiCalendarSearchContent.MultiCalendarSearchContentType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_MeetingSubscriptionInformation {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var isPublic: Bool {
//    get {return _storage._isPublic ?? false}
//    set {_uniqueStorage()._isPublic = newValue}
//  }
  /// Returns true if `isPublic` has been explicitly set.
//  public var hasIsPublic: Bool {return _storage._isPublic != nil}
  /// Clears the value of `isPublic`. Subsequent reads from it will return its default value.
//  public mutating func clearIsPublic() {_uniqueStorage()._isPublic = nil}
//
//  public var summary: String {
//    get {return _storage._summary ?? String()}
//    set {_uniqueStorage()._summary = newValue}
//  }
  /// Returns true if `summary` has been explicitly set.
//  public var hasSummary: Bool {return _storage._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
//  public mutating func clearSummary() {_uniqueStorage()._summary = nil}
//
//  public var eventCreator: LarkNCExtensionPB_Entities_EventCreator {
//    get {return _storage._eventCreator ?? LarkNCExtensionPB_Entities_EventCreator()}
//    set {_uniqueStorage()._eventCreator = newValue}
//  }
  /// Returns true if `eventCreator` has been explicitly set.
//  public var hasEventCreator: Bool {return _storage._eventCreator != nil}
  /// Clears the value of `eventCreator`. Subsequent reads from it will return its default value.
//  public mutating func clearEventCreator() {_uniqueStorage()._eventCreator = nil}
//
//  public var instance: LarkNCExtensionPB_Entities_CalendarEventInstance {
//    get {return _storage._instance ?? LarkNCExtensionPB_Entities_CalendarEventInstance()}
//    set {_uniqueStorage()._instance = newValue}
//  }
  /// Returns true if `instance` has been explicitly set.
//  public var hasInstance: Bool {return _storage._instance != nil}
  /// Clears the value of `instance`. Subsequent reads from it will return its default value.
//  public mutating func clearInstance() {_uniqueStorage()._instance = nil}
//
//  public var isAllDay: Bool {
//    get {return _storage._isAllDay ?? false}
//    set {_uniqueStorage()._isAllDay = newValue}
//  }
  /// Returns true if `isAllDay` has been explicitly set.
//  public var hasIsAllDay: Bool {return _storage._isAllDay != nil}
  /// Clears the value of `isAllDay`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAllDay() {_uniqueStorage()._isAllDay = nil}
//
//  public var originalEventCreator: LarkNCExtensionPB_Entities_EventCreator {
//    get {return _storage._originalEventCreator ?? LarkNCExtensionPB_Entities_EventCreator()}
//    set {_uniqueStorage()._originalEventCreator = newValue}
//  }
  /// Returns true if `originalEventCreator` has been explicitly set.
//  public var hasOriginalEventCreator: Bool {return _storage._originalEventCreator != nil}
  /// Clears the value of `originalEventCreator`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginalEventCreator() {_uniqueStorage()._originalEventCreator = nil}
//
//  public var eventOrganizer: LarkNCExtensionPB_Entities_EventCreator {
//    get {return _storage._eventOrganizer ?? LarkNCExtensionPB_Entities_EventCreator()}
//    set {_uniqueStorage()._eventOrganizer = newValue}
//  }
  /// Returns true if `eventOrganizer` has been explicitly set.
//  public var hasEventOrganizer: Bool {return _storage._eventOrganizer != nil}
  /// Clears the value of `eventOrganizer`. Subsequent reads from it will return its default value.
//  public mutating func clearEventOrganizer() {_uniqueStorage()._eventOrganizer = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_EventCreator {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var creatorType: LarkNCExtensionPB_Entities_EventCreator.EventCreatorType {
//    get {return _creatorType ?? .chatter}
//    set {_creatorType = newValue}
//  }
  /// Returns true if `creatorType` has been explicitly set.
//  public var hasCreatorType: Bool {return self._creatorType != nil}
  /// Clears the value of `creatorType`. Subsequent reads from it will return its default value.
//  public mutating func clearCreatorType() {self._creatorType = nil}
//
//  public var chatterID: String {
//    get {return _chatterID ?? String()}
//    set {_chatterID = newValue}
//  }
  /// Returns true if `chatterID` has been explicitly set.
//  public var hasChatterID: Bool {return self._chatterID != nil}
  /// Clears the value of `chatterID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatterID() {self._chatterID = nil}
//
//  public var creatorName: String {
//    get {return _creatorName ?? String()}
//    set {_creatorName = newValue}
//  }
  /// Returns true if `creatorName` has been explicitly set.
//  public var hasCreatorName: Bool {return self._creatorName != nil}
  /// Clears the value of `creatorName`. Subsequent reads from it will return its default value.
//  public mutating func clearCreatorName() {self._creatorName = nil}
//
//  public var department: String {
//    get {return _department ?? String()}
//    set {_department = newValue}
//  }
  /// Returns true if `department` has been explicitly set.
//  public var hasDepartment: Bool {return self._department != nil}
  /// Clears the value of `department`. Subsequent reads from it will return its default value.
//  public mutating func clearDepartment() {self._department = nil}
//
//  public var avatarURL: String {
//    get {return _avatarURL ?? String()}
//    set {_avatarURL = newValue}
//  }
  /// Returns true if `avatarURL` has been explicitly set.
//  public var hasAvatarURL: Bool {return self._avatarURL != nil}
  /// Clears the value of `avatarURL`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarURL() {self._avatarURL = nil}
//
//  public var dismissedCreatorID: Int64 {
//    get {return _dismissedCreatorID ?? 0}
//    set {_dismissedCreatorID = newValue}
//  }
  /// Returns true if `dismissedCreatorID` has been explicitly set.
//  public var hasDismissedCreatorID: Bool {return self._dismissedCreatorID != nil}
  /// Clears the value of `dismissedCreatorID`. Subsequent reads from it will return its default value.
//  public mutating func clearDismissedCreatorID() {self._dismissedCreatorID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum EventCreatorType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case chatter // = 1
//    case google // = 2
//    case chatterBot // = 3
//
//    public init() {
//      self = .chatter
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .chatter
//      case 2: self = .google
//      case 3: self = .chatterBot
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .chatter: return 1
//      case .google: return 2
//      case .chatterBot: return 3
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _creatorType: LarkNCExtensionPB_Entities_EventCreator.EventCreatorType? = nil
//  fileprivate var _chatterID: String? = nil
//  fileprivate var _creatorName: String? = nil
//  fileprivate var _department: String? = nil
//  fileprivate var _avatarURL: String? = nil
//  fileprivate var _dismissedCreatorID: Int64? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_EventCreator.EventCreatorType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_TenantAllStuffCalendarRefExtra {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

//public struct LarkNCExtensionPB_Entities_Tenant {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
//  public var contactName: String {
//    get {return _storage._contactName ?? String()}
//    set {_uniqueStorage()._contactName = newValue}
//  }
  /// Returns true if `contactName` has been explicitly set.
//  public var hasContactName: Bool {return _storage._contactName != nil}
  /// Clears the value of `contactName`. Subsequent reads from it will return its default value.
//  public mutating func clearContactName() {_uniqueStorage()._contactName = nil}
//
//  public var contactMobile: String {
//    get {return _storage._contactMobile ?? String()}
//    set {_uniqueStorage()._contactMobile = newValue}
//  }
  /// Returns true if `contactMobile` has been explicitly set.
//  public var hasContactMobile: Bool {return _storage._contactMobile != nil}
  /// Clears the value of `contactMobile`. Subsequent reads from it will return its default value.
//  public mutating func clearContactMobile() {_uniqueStorage()._contactMobile = nil}
//
//  public var contactEmail: String {
//    get {return _storage._contactEmail ?? String()}
//    set {_uniqueStorage()._contactEmail = newValue}
//  }
  /// Returns true if `contactEmail` has been explicitly set.
//  public var hasContactEmail: Bool {return _storage._contactEmail != nil}
  /// Clears the value of `contactEmail`. Subsequent reads from it will return its default value.
//  public mutating func clearContactEmail() {_uniqueStorage()._contactEmail = nil}
//
//  public var address: String {
//    get {return _storage._address ?? String()}
//    set {_uniqueStorage()._address = newValue}
//  }
  /// Returns true if `address` has been explicitly set.
//  public var hasAddress: Bool {return _storage._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
//  public mutating func clearAddress() {_uniqueStorage()._address = nil}
//
//  public var domain: String {
//    get {return _storage._domain ?? String()}
//    set {_uniqueStorage()._domain = newValue}
//  }
  /// Returns true if `domain` has been explicitly set.
//  public var hasDomain: Bool {return _storage._domain != nil}
  /// Clears the value of `domain`. Subsequent reads from it will return its default value.
//  public mutating func clearDomain() {_uniqueStorage()._domain = nil}
//
//  public var postCode: String {
//    get {return _storage._postCode ?? String()}
//    set {_uniqueStorage()._postCode = newValue}
//  }
  /// Returns true if `postCode` has been explicitly set.
//  public var hasPostCode: Bool {return _storage._postCode != nil}
  /// Clears the value of `postCode`. Subsequent reads from it will return its default value.
//  public mutating func clearPostCode() {_uniqueStorage()._postCode = nil}
//
//  public var remark: String {
//    get {return _storage._remark ?? String()}
//    set {_uniqueStorage()._remark = newValue}
//  }
  /// Returns true if `remark` has been explicitly set.
//  public var hasRemark: Bool {return _storage._remark != nil}
  /// Clears the value of `remark`. Subsequent reads from it will return its default value.
//  public mutating func clearRemark() {_uniqueStorage()._remark = nil}
//
//  public var telephone: String {
//    get {return _storage._telephone ?? String()}
//    set {_uniqueStorage()._telephone = newValue}
//  }
  /// Returns true if `telephone` has been explicitly set.
//  public var hasTelephone: Bool {return _storage._telephone != nil}
  /// Clears the value of `telephone`. Subsequent reads from it will return its default value.
//  public mutating func clearTelephone() {_uniqueStorage()._telephone = nil}
//
  /// deprecated since lark 3.17.0
//  public var iconURL: String {
//    get {return _storage._iconURL ?? String()}
//    set {_uniqueStorage()._iconURL = newValue}
//  }
  /// Returns true if `iconURL` has been explicitly set.
//  public var hasIconURL: Bool {return _storage._iconURL != nil}
  /// Clears the value of `iconURL`. Subsequent reads from it will return its default value.
//  public mutating func clearIconURL() {_uniqueStorage()._iconURL = nil}
//
//  public var avatar: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatar ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
  /// 互信的unit的集合，同一Unit League内可以相互就近接入，在rpc鉴权上视为同一个unit
//  public var unitLeague: String {
//    get {return _storage._unitLeague ?? String()}
//    set {_uniqueStorage()._unitLeague = newValue}
//  }
  /// Returns true if `unitLeague` has been explicitly set.
//  public var hasUnitLeague: Bool {return _storage._unitLeague != nil}
  /// Clears the value of `unitLeague`. Subsequent reads from it will return its default value.
//  public mutating func clearUnitLeague() {_uniqueStorage()._unitLeague = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_StartEndTime {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var startTime: Int64 {
//    get {return _startTime ?? 0}
//    set {_startTime = newValue}
//  }
  /// Returns true if `startTime` has been explicitly set.
//  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
//  public mutating func clearStartTime() {self._startTime = nil}
//
//  public var endTime: Int64 {
//    get {return _endTime ?? 0}
//    set {_endTime = newValue}
//  }
  /// Returns true if `endTime` has been explicitly set.
//  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
//  public mutating func clearEndTime() {self._endTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _startTime: Int64? = nil
//  fileprivate var _endTime: Int64? = nil
//}

//public struct LarkNCExtensionPB_Entities_CalendarInstanceSet {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var calendarEventInstances: [LarkNCExtensionPB_Entities_CalendarEventInstance] = []
//
  /// event_ref_id -> calendar_event
//  public var events: Dictionary<String,LarkNCExtensionPB_Entities_CalendarEvent> = [:]
//
  /// event_ref_id -> event_creator
//  public var eventCreators: Dictionary<String,LarkNCExtensionPB_Entities_EventCreator> = [:]
//
  /// event_ref_id -> original_event_creator
//  public var originalEventCreators: Dictionary<String,LarkNCExtensionPB_Entities_EventCreator> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

//public struct LarkNCExtensionPB_Entities_UserName {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// default name
//  public var name: String {
//    get {return _name ?? String()}
//    set {_name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {self._name = nil}
//
  /// 姓名的拼音
//  public var namePy: String {
//    get {return _namePy ?? String()}
//    set {_namePy = newValue}
//  }
  /// Returns true if `namePy` has been explicitly set.
//  public var hasNamePy: Bool {return self._namePy != nil}
  /// Clears the value of `namePy`. Subsequent reads from it will return its default value.
//  public mutating func clearNamePy() {self._namePy = nil}
//
  /// key是语言缩写，当前支持语言zh_cn, en_us, ja_jp，与RPC passport/entity.thrift保持一致
//  public var internationalName: Dictionary<String,String> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _name: String? = nil
//  fileprivate var _namePy: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_EventIdVersionPair {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var calendarEventID: String {
//    get {return _calendarEventID ?? String()}
//    set {_calendarEventID = newValue}
//  }
  /// Returns true if `calendarEventID` has been explicitly set.
//  public var hasCalendarEventID: Bool {return self._calendarEventID != nil}
  /// Clears the value of `calendarEventID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarEventID() {self._calendarEventID = nil}
//
//  public var version: Int64 {
//    get {return _version ?? 0}
//    set {_version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {self._version = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _calendarEventID: String? = nil
//  fileprivate var _version: Int64? = nil
//}

//public struct LarkNCExtensionPB_Entities_CalendarEventVersionSet {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var eventVersionSet: [LarkNCExtensionPB_Entities_EventIdVersionPair] {
//    get {return _storage._eventVersionSet}
//    set {_uniqueStorage()._eventVersionSet = newValue}
//  }
//
//  public var timePair: LarkNCExtensionPB_Entities_StartEndTime {
//    get {return _storage._timePair ?? LarkNCExtensionPB_Entities_StartEndTime()}
//    set {_uniqueStorage()._timePair = newValue}
//  }
  /// Returns true if `timePair` has been explicitly set.
//  public var hasTimePair: Bool {return _storage._timePair != nil}
  /// Clears the value of `timePair`. Subsequent reads from it will return its default value.
//  public mutating func clearTimePair() {_uniqueStorage()._timePair = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// 工作状态
//public struct LarkNCExtensionPB_Entities_WorkStatus {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 工作状态
//  public var status: LarkNCExtensionPB_Entities_WorkStatus.Status {
//    get {return _status ?? .unknown}
//    set {_status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {self._status = nil}
//
  /// 开始时间, 单位 秒
//  public var startTime: Int64 {
//    get {return _startTime ?? 0}
//    set {_startTime = newValue}
//  }
  /// Returns true if `startTime` has been explicitly set.
//  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
//  public mutating func clearStartTime() {self._startTime = nil}
//
  /// 结束时间
//  public var endTime: Int64 {
//    get {return _endTime ?? 0}
//    set {_endTime = newValue}
//  }
  /// Returns true if `endTime` has been explicitly set.
//  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
//  public mutating func clearEndTime() {self._endTime = nil}
//
  /// 工作状态描述 "zh_cn"->"休假中" i18n
//  public var descriptionTemplates: Dictionary<String,String> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum Status: LarkHTTP.Enum {
//    public typealias RawValue = Int
//
    /// 默认状态
//    case unknown // = 0
//
    /// 请假状态
//    case onLeave // = 1
//
    /// 开会状态
//    case onMeeting // = 2
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .onLeave
//      case 2: self = .onMeeting
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .onLeave: return 1
//      case .onMeeting: return 2
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _status: LarkNCExtensionPB_Entities_WorkStatus.Status? = nil
//  fileprivate var _startTime: Int64? = nil
//  fileprivate var _endTime: Int64? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_WorkStatus.Status: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_CryptoChatInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var firstPosition: Int32 {
//    get {return _firstPosition ?? 0}
//    set {_firstPosition = newValue}
//  }
  /// Returns true if `firstPosition` has been explicitly set.
//  public var hasFirstPosition: Bool {return self._firstPosition != nil}
  /// Clears the value of `firstPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearFirstPosition() {self._firstPosition = nil}
//
//  public var firstPositionBadgeCount: Int32 {
//    get {return _firstPositionBadgeCount ?? 0}
//    set {_firstPositionBadgeCount = newValue}
//  }
  /// Returns true if `firstPositionBadgeCount` has been explicitly set.
//  public var hasFirstPositionBadgeCount: Bool {return self._firstPositionBadgeCount != nil}
  /// Clears the value of `firstPositionBadgeCount`. Subsequent reads from it will return its default value.
//  public mutating func clearFirstPositionBadgeCount() {self._firstPositionBadgeCount = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _firstPosition: Int32? = nil
//  fileprivate var _firstPositionBadgeCount: Int32? = nil
//}

//public struct LarkNCExtensionPB_Entities_AccountUser {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var chatter: LarkNCExtensionPB_Entities_Chatter {
//    get {return _storage._chatter ?? LarkNCExtensionPB_Entities_Chatter()}
//    set {_uniqueStorage()._chatter = newValue}
//  }
  /// Returns true if `chatter` has been explicitly set.
//  public var hasChatter: Bool {return _storage._chatter != nil}
  /// Clears the value of `chatter`. Subsequent reads from it will return its default value.
//  public mutating func clearChatter() {_uniqueStorage()._chatter = nil}
//
  /// deprecated since lark 3.17.0
//  public var iconURL: String {
//    get {return _storage._iconURL ?? String()}
//    set {_uniqueStorage()._iconURL = newValue}
//  }
  /// Returns true if `iconURL` has been explicitly set.
//  public var hasIconURL: Bool {return _storage._iconURL != nil}
  /// Clears the value of `iconURL`. Subsequent reads from it will return its default value.
//  public mutating func clearIconURL() {_uniqueStorage()._iconURL = nil}
//
//  public var description_p: String {
//    get {return _storage._description_p ?? String()}
//    set {_uniqueStorage()._description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}
//
//  public var tenantCode: String {
//    get {return _storage._tenantCode ?? String()}
//    set {_uniqueStorage()._tenantCode = newValue}
//  }
  /// Returns true if `tenantCode` has been explicitly set.
//  public var hasTenantCode: Bool {return _storage._tenantCode != nil}
  /// Clears the value of `tenantCode`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantCode() {_uniqueStorage()._tenantCode = nil}
//
  /// passport config v3 使用的 env
//  public var userEnv: String {
//    get {return _storage._userEnv ?? String()}
//    set {_uniqueStorage()._userEnv = newValue}
//  }
  /// Returns true if `userEnv` has been explicitly set.
//  public var hasUserEnv: Bool {return _storage._userEnv != nil}
  /// Clears the value of `userEnv`. Subsequent reads from it will return its default value.
//  public mutating func clearUserEnv() {_uniqueStorage()._userEnv = nil}
//
//  public var tenantTag: LarkNCExtensionPB_Entities_TenantTag {
//    get {return _storage._tenantTag ?? .standard}
//    set {_uniqueStorage()._tenantTag = newValue}
//  }
  /// Returns true if `tenantTag` has been explicitly set.
//  public var hasTenantTag: Bool {return _storage._tenantTag != nil}
  /// Clears the value of `tenantTag`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantTag() {_uniqueStorage()._tenantTag = nil}
//
//  public var avatar: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatar ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
//  public var accountSecurityConfig: LarkNCExtensionPB_Entities_AccountSecurityConfig {
//    get {return _storage._accountSecurityConfig ?? LarkNCExtensionPB_Entities_AccountSecurityConfig()}
//    set {_uniqueStorage()._accountSecurityConfig = newValue}
//  }
  /// Returns true if `accountSecurityConfig` has been explicitly set.
//  public var hasAccountSecurityConfig: Bool {return _storage._accountSecurityConfig != nil}
  /// Clears the value of `accountSecurityConfig`. Subsequent reads from it will return its default value.
//  public mutating func clearAccountSecurityConfig() {_uniqueStorage()._accountSecurityConfig = nil}
//
//  public var tenantSingleProducts: [LarkNCExtensionPB_Entities_TenantSingleProduct] {
//    get {return _storage._tenantSingleProducts}
//    set {_uniqueStorage()._tenantSingleProducts = newValue}
//  }
//
//  public var isIdp: Bool {
//    get {return _storage._isIdp ?? false}
//    set {_uniqueStorage()._isIdp = newValue}
//  }
  /// Returns true if `isIdp` has been explicitly set.
//  public var hasIsIdp: Bool {return _storage._isIdp != nil}
  /// Clears the value of `isIdp`. Subsequent reads from it will return its default value.
//  public mutating func clearIsIdp() {_uniqueStorage()._isIdp = nil}
//
//  public var isFrozen: Bool {
//    get {return _storage._isFrozen ?? false}
//    set {_uniqueStorage()._isFrozen = newValue}
//  }
  /// Returns true if `isFrozen` has been explicitly set.
//  public var hasIsFrozen: Bool {return _storage._isFrozen != nil}
  /// Clears the value of `isFrozen`. Subsequent reads from it will return its default value.
//  public mutating func clearIsFrozen() {_uniqueStorage()._isFrozen = nil}
//
//  public var isActive: Bool {
//    get {return _storage._isActive ?? false}
//    set {_uniqueStorage()._isActive = newValue}
//  }
  /// Returns true if `isActive` has been explicitly set.
//  public var hasIsActive: Bool {return _storage._isActive != nil}
  /// Clears the value of `isActive`. Subsequent reads from it will return its default value.
//  public mutating func clearIsActive() {_uniqueStorage()._isActive = nil}
//
//  public var userUnit: String {
//    get {return _storage._userUnit ?? String()}
//    set {_uniqueStorage()._userUnit = newValue}
//  }
  /// Returns true if `userUnit` has been explicitly set.
//  public var hasUserUnit: Bool {return _storage._userUnit != nil}
  /// Clears the value of `userUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearUserUnit() {_uniqueStorage()._userUnit = nil}
//
  /// deprecate 没有在任何版本使用过
//  public var userBrand: String {
//    get {return _storage._userBrand ?? String()}
//    set {_uniqueStorage()._userBrand = newValue}
//  }
  /// Returns true if `userBrand` has been explicitly set.
//  public var hasUserBrand: Bool {return _storage._userBrand != nil}
  /// Clears the value of `userBrand`. Subsequent reads from it will return its default value.
//  public mutating func clearUserBrand() {_uniqueStorage()._userBrand = nil}
//
//  public var suiteFullDomain: String {
//    get {return _storage._suiteFullDomain ?? String()}
//    set {_uniqueStorage()._suiteFullDomain = newValue}
//  }
  /// Returns true if `suiteFullDomain` has been explicitly set.
//  public var hasSuiteFullDomain: Bool {return _storage._suiteFullDomain != nil}
  /// Clears the value of `suiteFullDomain`. Subsequent reads from it will return its default value.
//  public mutating func clearSuiteFullDomain() {_uniqueStorage()._suiteFullDomain = nil}
//
  ///是否允许升级为大B
//  public var upgradeEnabled: Bool {
//    get {return _storage._upgradeEnabled ?? false}
//    set {_uniqueStorage()._upgradeEnabled = newValue}
//  }
  /// Returns true if `upgradeEnabled` has been explicitly set.
//  public var hasUpgradeEnabled: Bool {return _storage._upgradeEnabled != nil}
  /// Clears the value of `upgradeEnabled`. Subsequent reads from it will return its default value.
//  public mutating func clearUpgradeEnabled() {_uniqueStorage()._upgradeEnabled = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_AccountSecurityConfig {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var moduleModifyPwd: LarkNCExtensionPB_Entities_ModuleSwitchConfig {
//    get {return _storage._moduleModifyPwd ?? LarkNCExtensionPB_Entities_ModuleSwitchConfig()}
//    set {_uniqueStorage()._moduleModifyPwd = newValue}
//  }
  /// Returns true if `moduleModifyPwd` has been explicitly set.
//  public var hasModuleModifyPwd: Bool {return _storage._moduleModifyPwd != nil}
  /// Clears the value of `moduleModifyPwd`. Subsequent reads from it will return its default value.
//  public mutating func clearModuleModifyPwd() {_uniqueStorage()._moduleModifyPwd = nil}
//
//  public var moduleAccountManagement: LarkNCExtensionPB_Entities_ModuleSwitchConfig {
//    get {return _storage._moduleAccountManagement ?? LarkNCExtensionPB_Entities_ModuleSwitchConfig()}
//    set {_uniqueStorage()._moduleAccountManagement = newValue}
//  }
  /// Returns true if `moduleAccountManagement` has been explicitly set.
//  public var hasModuleAccountManagement: Bool {return _storage._moduleAccountManagement != nil}
  /// Clears the value of `moduleAccountManagement`. Subsequent reads from it will return its default value.
//  public mutating func clearModuleAccountManagement() {_uniqueStorage()._moduleAccountManagement = nil}
//
//  public var moduleSecurityVerification: LarkNCExtensionPB_Entities_ModuleSwitchConfig {
//    get {return _storage._moduleSecurityVerification ?? LarkNCExtensionPB_Entities_ModuleSwitchConfig()}
//    set {_uniqueStorage()._moduleSecurityVerification = newValue}
//  }
  /// Returns true if `moduleSecurityVerification` has been explicitly set.
//  public var hasModuleSecurityVerification: Bool {return _storage._moduleSecurityVerification != nil}
  /// Clears the value of `moduleSecurityVerification`. Subsequent reads from it will return its default value.
//  public mutating func clearModuleSecurityVerification() {_uniqueStorage()._moduleSecurityVerification = nil}
//
//  public var moduleDeviceManagement: LarkNCExtensionPB_Entities_ModuleSwitchConfig {
//    get {return _storage._moduleDeviceManagement ?? LarkNCExtensionPB_Entities_ModuleSwitchConfig()}
//    set {_uniqueStorage()._moduleDeviceManagement = newValue}
//  }
  /// Returns true if `moduleDeviceManagement` has been explicitly set.
//  public var hasModuleDeviceManagement: Bool {return _storage._moduleDeviceManagement != nil}
  /// Clears the value of `moduleDeviceManagement`. Subsequent reads from it will return its default value.
//  public mutating func clearModuleDeviceManagement() {_uniqueStorage()._moduleDeviceManagement = nil}
//
//  public var module2Fa: LarkNCExtensionPB_Entities_ModuleSwitchConfig {
//    get {return _storage._module2Fa ?? LarkNCExtensionPB_Entities_ModuleSwitchConfig()}
//    set {_uniqueStorage()._module2Fa = newValue}
//  }
  /// Returns true if `module2Fa` has been explicitly set.
//  public var hasModule2Fa: Bool {return _storage._module2Fa != nil}
  /// Clears the value of `module2Fa`. Subsequent reads from it will return its default value.
//  public mutating func clearModule2Fa() {_uniqueStorage()._module2Fa = nil}
//
//  public var moduleBioAuth: LarkNCExtensionPB_Entities_ModuleSwitchConfig {
//    get {return _storage._moduleBioAuth ?? LarkNCExtensionPB_Entities_ModuleSwitchConfig()}
//    set {_uniqueStorage()._moduleBioAuth = newValue}
//  }
  /// Returns true if `moduleBioAuth` has been explicitly set.
//  public var hasModuleBioAuth: Bool {return _storage._moduleBioAuth != nil}
  /// Clears the value of `moduleBioAuth`. Subsequent reads from it will return its default value.
//  public mutating func clearModuleBioAuth() {_uniqueStorage()._moduleBioAuth = nil}
//
//  public var moduleBioAuthLogin: LarkNCExtensionPB_Entities_ModuleSwitchConfig {
//    get {return _storage._moduleBioAuthLogin ?? LarkNCExtensionPB_Entities_ModuleSwitchConfig()}
//    set {_uniqueStorage()._moduleBioAuthLogin = newValue}
//  }
  /// Returns true if `moduleBioAuthLogin` has been explicitly set.
//  public var hasModuleBioAuthLogin: Bool {return _storage._moduleBioAuthLogin != nil}
  /// Clears the value of `moduleBioAuthLogin`. Subsequent reads from it will return its default value.
//  public mutating func clearModuleBioAuthLogin() {_uniqueStorage()._moduleBioAuthLogin = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_ModuleSwitchConfig {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var switchStatus: Int32 {
//    get {return _switchStatus ?? 0}
//    set {_switchStatus = newValue}
//  }
  /// Returns true if `switchStatus` has been explicitly set.
//  public var hasSwitchStatus: Bool {return self._switchStatus != nil}
  /// Clears the value of `switchStatus`. Subsequent reads from it will return its default value.
//  public mutating func clearSwitchStatus() {self._switchStatus = nil}
//
//  public var moduleInfo: Dictionary<String,String> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _switchStatus: Int32? = nil
//}

/// feed card 处理建议 - 飞书云文档
/// https://bytedance.feishu.cn/docs/doccnz4MfH8ez3R8SEJ9SUn5BTb#
//public struct LarkNCExtensionPB_Entities_FeedCard {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
  /// feed 类型，chat/doc/thread/etc
//  public var type: LarkNCExtensionPB_Entities_FeedCard.TypeEnum {
//    get {return _type ?? .chat}
//    set {_type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}
//
  /// feed card 更新时间，单位 s，是旧兼容字段保持传递，需要同时填写对应的新字段 update_time_ms
//  public var updateTime: Int64 {
//    get {return _updateTime ?? 0}
//    set {_updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {self._updateTime = nil}
//
  /// feed card 更新时间，单位 ms
//  public var updateTimeMs: Int64 {
//    get {return _updateTimeMs ?? 0}
//    set {_updateTimeMs = newValue}
//  }
  /// Returns true if `updateTimeMs` has been explicitly set.
//  public var hasUpdateTimeMs: Bool {return self._updateTimeMs != nil}
  /// Clears the value of `updateTimeMs`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTimeMs() {self._updateTimeMs = nil}
//
  /// 是否稍后处理
//  public var isDelayed: Bool {
//    get {return _isDelayed ?? false}
//    set {_isDelayed = newValue}
//  }
  /// Returns true if `isDelayed` has been explicitly set.
//  public var hasIsDelayed: Bool {return self._isDelayed != nil}
  /// Clears the value of `isDelayed`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDelayed() {self._isDelayed = nil}
//
  /// 非 0 表示处于会话盒子中
//  public var parentCardID: Int64 {
//    get {return _parentCardID ?? 0}
//    set {_parentCardID = newValue}
//  }
  /// Returns true if `parentCardID` has been explicitly set.
//  public var hasParentCardID: Bool {return self._parentCardID != nil}
  /// Clears the value of `parentCardID`. Subsequent reads from it will return its default value.
//  public mutating func clearParentCardID() {self._parentCardID = nil}
//
  /// feed card 排序时间，单位 s
//  public var rankTime: Int64 {
//    get {return _rankTime ?? 0}
//    set {_rankTime = newValue}
//  }
  /// Returns true if `rankTime` has been explicitly set.
//  public var hasRankTime: Bool {return self._rankTime != nil}
  /// Clears the value of `rankTime`. Subsequent reads from it will return its default value.
//  public mutating func clearRankTime() {self._rankTime = nil}
//
  /// feed 在 inbox 还是 done
//  public var feedType: LarkNCExtensionPB_Entities_FeedType {
//    get {return _feedType ?? .unknownType}
//    set {_feedType = newValue}
//  }
  /// Returns true if `feedType` has been explicitly set.
//  public var hasFeedType: Bool {return self._feedType != nil}
  /// Clears the value of `feedType`. Subsequent reads from it will return its default value.
//  public mutating func clearFeedType() {self._feedType = nil}
//
  /// feed card 状态，正常、待确认删除、已删除
//  public var status: LarkNCExtensionPB_Entities_FeedCard.Status {
//    get {return _status ?? .unknownStatus}
//    set {_status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {self._status = nil}
//
  /// 已废弃
//  public var imprID: String {
//    get {return _imprID ?? String()}
//    set {_imprID = newValue}
//  }
  /// Returns true if `imprID` has been explicitly set.
//  public var hasImprID: Bool {return self._imprID != nil}
  /// Clears the value of `imprID`. Subsequent reads from it will return its default value.
//  public mutating func clearImprID() {self._imprID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownType // = 0
//
    /// 聊天，群、单聊……
//    case chat // = 1
//
    /// deprecated, 邮件
//    case mail // = 2
//
    /// 文档
//    case doc // = 3
//
    /// 话题
//    case thread // = 4
//
    /// 会话盒子
//    case box // = 5
//
    /// 开放平台应用
//    case openapp // = 6
//
    /// deprecated, 小组话题
//    case topic // = 7
//
    /// deprecated, 开放平台
//    case appChat // = 8
//
    /// 订阅号
//    case subscription // = 10
//
    /// message thread，普通群基于消息创建的话题
//    case msgThread // = 11
//
//    public init() {
//      self = .unknownType
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownType
//      case 1: self = .chat
//      case 2: self = .mail
//      case 3: self = .doc
//      case 4: self = .thread
//      case 5: self = .box
//      case 6: self = .openapp
//      case 7: self = .topic
//      case 8: self = .appChat
//      case 10: self = .subscription
//      case 11: self = .msgThread
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownType: return 0
//      case .chat: return 1
//      case .mail: return 2
//      case .doc: return 3
//      case .thread: return 4
//      case .box: return 5
//      case .openapp: return 6
//      case .topic: return 7
//      case .appChat: return 8
//      case .subscription: return 10
//      case .msgThread: return 11
//      }
//    }
//
//  }
//
//  public enum Status: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownStatus // = 0
//
    /// 正常
//    case normal // = 1
//
    /// 待确认删除
//    case pendingDelete // = 2
//
    /// 已删除
//    case deleted // = 3
//
//    public init() {
//      self = .unknownStatus
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownStatus
//      case 1: self = .normal
//      case 2: self = .pendingDelete
//      case 3: self = .deleted
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownStatus: return 0
//      case .normal: return 1
//      case .pendingDelete: return 2
//      case .deleted: return 3
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _type: LarkNCExtensionPB_Entities_FeedCard.TypeEnum? = nil
//  fileprivate var _updateTime: Int64? = nil
//  fileprivate var _updateTimeMs: Int64? = nil
//  fileprivate var _isDelayed: Bool? = nil
//  fileprivate var _parentCardID: Int64? = nil
//  fileprivate var _rankTime: Int64? = nil
//  fileprivate var _feedType: LarkNCExtensionPB_Entities_FeedType? = nil
//  fileprivate var _status: LarkNCExtensionPB_Entities_FeedCard.Status? = nil
//  fileprivate var _imprID: String? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_FeedCard.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_FeedCard.Status: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_FeedCardIdentity {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
  /// feed 类型，chat/doc/thread/etc
//  public var type: LarkNCExtensionPB_Entities_FeedCard.TypeEnum {
//    get {return _type ?? .unknownType}
//    set {_type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _type: LarkNCExtensionPB_Entities_FeedCard.TypeEnum? = nil
//}

//public struct LarkNCExtensionPB_Entities_UserFeedCardIdentity {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var userID: String {
//    get {return _userID ?? String()}
//    set {_userID = newValue}
//  }
  /// Returns true if `userID` has been explicitly set.
//  public var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
//  public mutating func clearUserID() {self._userID = nil}
//
//  public var cardID: String {
//    get {return _cardID ?? String()}
//    set {_cardID = newValue}
//  }
  /// Returns true if `cardID` has been explicitly set.
//  public var hasCardID: Bool {return self._cardID != nil}
  /// Clears the value of `cardID`. Subsequent reads from it will return its default value.
//  public mutating func clearCardID() {self._cardID = nil}
//
//  public var cardType: LarkNCExtensionPB_Entities_FeedCard.TypeEnum {
//    get {return _cardType ?? .unknownType}
//    set {_cardType = newValue}
//  }
  /// Returns true if `cardType` has been explicitly set.
//  public var hasCardType: Bool {return self._cardType != nil}
  /// Clears the value of `cardType`. Subsequent reads from it will return its default value.
//  public mutating func clearCardType() {self._cardType = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _userID: String? = nil
//  fileprivate var _cardID: String? = nil
//  fileprivate var _cardType: LarkNCExtensionPB_Entities_FeedCard.TypeEnum? = nil
//}

//public struct LarkNCExtensionPB_Entities_InvisibleMessage {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
//  public var createTime: Int64 {
//    get {return _createTime ?? 0}
//    set {_createTime = newValue}
//  }
  /// Returns true if `createTime` has been explicitly set.
//  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTime() {self._createTime = nil}
//
//  public var position: Int32 {
//    get {return _position ?? 0}
//    set {_position = newValue}
//  }
  /// Returns true if `position` has been explicitly set.
//  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
//  public mutating func clearPosition() {self._position = nil}
//
//  public var threadID: String {
//    get {return _threadID ?? String()}
//    set {_threadID = newValue}
//  }
  /// Returns true if `threadID` has been explicitly set.
//  public var hasThreadID: Bool {return self._threadID != nil}
  /// Clears the value of `threadID`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadID() {self._threadID = nil}
//
//  public var threadPosition: Int32 {
//    get {return _threadPosition ?? 0}
//    set {_threadPosition = newValue}
//  }
  /// Returns true if `threadPosition` has been explicitly set.
//  public var hasThreadPosition: Bool {return self._threadPosition != nil}
  /// Clears the value of `threadPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadPosition() {self._threadPosition = nil}
//
//  public var fromID: String {
//    get {return _fromID ?? String()}
//    set {_fromID = newValue}
//  }
  /// Returns true if `fromID` has been explicitly set.
//  public var hasFromID: Bool {return self._fromID != nil}
  /// Clears the value of `fromID`. Subsequent reads from it will return its default value.
//  public mutating func clearFromID() {self._fromID = nil}
//
//  public var fromType: LarkNCExtensionPB_Entities_Message.FromType {
//    get {return _fromType ?? .user}
//    set {_fromType = newValue}
//  }
  /// Returns true if `fromType` has been explicitly set.
//  public var hasFromType: Bool {return self._fromType != nil}
  /// Clears the value of `fromType`. Subsequent reads from it will return its default value.
//  public mutating func clearFromType() {self._fromType = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _createTime: Int64? = nil
//  fileprivate var _position: Int32? = nil
//  fileprivate var _threadID: String? = nil
//  fileprivate var _threadPosition: Int32? = nil
//  fileprivate var _fromID: String? = nil
//  fileprivate var _fromType: LarkNCExtensionPB_Entities_Message.FromType? = nil
//}

//public struct LarkNCExtensionPB_Entities_InvisibleThread {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var ownerID: String {
//    get {return _ownerID ?? String()}
//    set {_ownerID = newValue}
//  }
  /// Returns true if `ownerID` has been explicitly set.
//  public var hasOwnerID: Bool {return self._ownerID != nil}
  /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
//  public mutating func clearOwnerID() {self._ownerID = nil}
//
//  public var threadID: String {
//    get {return _threadID ?? String()}
//    set {_threadID = newValue}
//  }
  /// Returns true if `threadID` has been explicitly set.
//  public var hasThreadID: Bool {return self._threadID != nil}
  /// Clears the value of `threadID`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadID() {self._threadID = nil}
//
  /// 秒
//  public var updateTime: Int64 {
//    get {return _updateTime ?? 0}
//    set {_updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {self._updateTime = nil}
//
//  public var position: Int32 {
//    get {return _position ?? 0}
//    set {_position = newValue}
//  }
  /// Returns true if `position` has been explicitly set.
//  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
//  public mutating func clearPosition() {self._position = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _ownerID: String? = nil
//  fileprivate var _threadID: String? = nil
//  fileprivate var _updateTime: Int64? = nil
//  fileprivate var _position: Int32? = nil
//}

/// 单项用户被加好友方式设置
/// 历史遗留问题不能再做下一级收敛，在关闭通过用户详情页添加好友后，1，4，5，6，7，8的改动均被视为invalid请求
//public struct LarkNCExtensionPB_Entities_WayToAddFriendSettingItem {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 被加好友方式
//  public var type: LarkNCExtensionPB_Entities_WayToAddFriendSettingItem.TypeEnum {
//    get {return _type ?? .unknownType}
//    set {_type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}
//
  /// 开关
//  public var enable: Bool {
//    get {return _enable ?? false}
//    set {_enable = newValue}
//  }
  /// Returns true if `enable` has been explicitly set.
//  public var hasEnable: Bool {return self._enable != nil}
  /// Clears the value of `enable`. Subsequent reads from it will return its default value.
//  public mutating func clearEnable() {self._enable = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownType // = 0
//
    /// 通过会话添加
//    case chat // = 1
//
    /// 通过联系人 token 添加（二维码与好友链接）
//    case contactToken // = 2
//
    /// 通过用户详情页添加好友
//    case profile // = 3
//
    /// 通过文档
//    case docs // = 4
//
    /// 通过日历
//    case calendar // = 5
//
    /// 通过音视频会议
//    case videoConference // = 6
//
    /// 通过邮件
//    case email // = 7
//
    /// 通过名片消息
//    case nameCard // = 8
//
    ///通过妙记
//    case minutes // = 9
//
//    public init() {
//      self = .unknownType
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownType
//      case 1: self = .chat
//      case 2: self = .contactToken
//      case 3: self = .profile
//      case 4: self = .docs
//      case 5: self = .calendar
//      case 6: self = .videoConference
//      case 7: self = .email
//      case 8: self = .nameCard
//      case 9: self = .minutes
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownType: return 0
//      case .chat: return 1
//      case .contactToken: return 2
//      case .profile: return 3
//      case .docs: return 4
//      case .calendar: return 5
//      case .videoConference: return 6
//      case .email: return 7
//      case .nameCard: return 8
//      case .minutes: return 9
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _type: LarkNCExtensionPB_Entities_WayToAddFriendSettingItem.TypeEnum? = nil
//  fileprivate var _enable: Bool? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_WayToAddFriendSettingItem.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 用户被加好友方式设置
//public struct LarkNCExtensionPB_Entities_WayToAddFriendSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 通过会话添加好友开关，3.25版本之后 废弃
//  public var chatSetting: Bool {
//    get {return _chatSetting ?? false}
//    set {_chatSetting = newValue}
//  }
  /// Returns true if `chatSetting` has been explicitly set.
//  public var hasChatSetting: Bool {return self._chatSetting != nil}
  /// Clears the value of `chatSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearChatSetting() {self._chatSetting = nil}
//
  /// 通过联系人 token 添加（二维码与好友链接）开关, 3.25版本之后废弃
//  public var contactTokenSetting: Bool {
//    get {return _contactTokenSetting ?? false}
//    set {_contactTokenSetting = newValue}
//  }
  /// Returns true if `contactTokenSetting` has been explicitly set.
//  public var hasContactTokenSetting: Bool {return self._contactTokenSetting != nil}
  /// Clears the value of `contactTokenSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearContactTokenSetting() {self._contactTokenSetting = nil}
//
  /// 下发所有添加我的方式隐私设置
//  public var wayToAddItems: [LarkNCExtensionPB_Entities_WayToAddFriendSettingItem] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _chatSetting: Bool? = nil
//  fileprivate var _contactTokenSetting: Bool? = nil
//}

/// 用户可以搜索到的方式设置
//public struct LarkNCExtensionPB_Entities_WayToFindMeSettingItem {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var type: LarkNCExtensionPB_Entities_WayToFindMeSettingItem.TypeEnum {
//    get {return _type ?? .unknown}
//    set {_type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}
//
  /// contact id；联系方式 id
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
  /// 用来展示的联系方式
//  public var displayedContact: String {
//    get {return _displayedContact ?? String()}
//    set {_displayedContact = newValue}
//  }
  /// Returns true if `displayedContact` has been explicitly set.
//  public var hasDisplayedContact: Bool {return self._displayedContact != nil}
  /// Clears the value of `displayedContact`. Subsequent reads from it will return its default value.
//  public mutating func clearDisplayedContact() {self._displayedContact = nil}
//
  /// 通过这个联系方式被搜索的开关
//  public var enable: Bool {
//    get {return _enable ?? false}
//    set {_enable = newValue}
//  }
  /// Returns true if `enable` has been explicitly set.
//  public var hasEnable: Bool {return self._enable != nil}
  /// Clears the value of `enable`. Subsequent reads from it will return its default value.
//  public mutating func clearEnable() {self._enable = nil}
//
  /// 联系方式是否被验证；todo 和 SDK 确认这个字段的使用方式
//  public var hasVerified_p: Bool {
//    get {return _hasVerified_p ?? false}
//    set {_hasVerified_p = newValue}
//  }
  /// Returns true if `hasVerified_p` has been explicitly set.
//  public var hasHasVerified_p: Bool {return self._hasVerified_p != nil}
  /// Clears the value of `hasVerified_p`. Subsequent reads from it will return its default value.
//  public mutating func clearHasVerified_p() {self._hasVerified_p = nil}
//
  /// 告诉端上开启联系方式搜索的时候是否需要验证
//  public var needCpVerify: Bool {
//    get {return _needCpVerify ?? false}
//    set {_needCpVerify = newValue}
//  }
  /// Returns true if `needCpVerify` has been explicitly set.
//  public var hasNeedCpVerify: Bool {return self._needCpVerify != nil}
  /// Clears the value of `needCpVerify`. Subsequent reads from it will return its default value.
//  public mutating func clearNeedCpVerify() {self._needCpVerify = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//
    /// 手机号
//    case mobile // = 1
//
    /// 邮箱
//    case email // = 2
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .mobile
//      case 2: self = .email
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .mobile: return 1
//      case .email: return 2
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _type: LarkNCExtensionPB_Entities_WayToFindMeSettingItem.TypeEnum? = nil
//  fileprivate var _id: String? = nil
//  fileprivate var _displayedContact: String? = nil
//  fileprivate var _enable: Bool? = nil
//  fileprivate var _hasVerified_p: Bool? = nil
//  fileprivate var _needCpVerify: Bool? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_WayToFindMeSettingItem.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_InstanceImportanceScore {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// calendar event id, 对应sdk server id
//  public var calendarEventID: String {
//    get {return _calendarEventID ?? String()}
//    set {_calendarEventID = newValue}
//  }
  /// Returns true if `calendarEventID` has been explicitly set.
//  public var hasCalendarEventID: Bool {return self._calendarEventID != nil}
  /// Clears the value of `calendarEventID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarEventID() {self._calendarEventID = nil}
//
  /// 日程实例时间
//  public var instanceStartTime: Int64 {
//    get {return _instanceStartTime ?? 0}
//    set {_instanceStartTime = newValue}
//  }
  /// Returns true if `instanceStartTime` has been explicitly set.
//  public var hasInstanceStartTime: Bool {return self._instanceStartTime != nil}
  /// Clears the value of `instanceStartTime`. Subsequent reads from it will return its default value.
//  public mutating func clearInstanceStartTime() {self._instanceStartTime = nil}
//
  /// 日程实例分数
//  public var score: Int32 {
//    get {return _score ?? 0}
//    set {_score = newValue}
//  }
  /// Returns true if `score` has been explicitly set.
//  public var hasScore: Bool {return self._score != nil}
  /// Clears the value of `score`. Subsequent reads from it will return its default value.
//  public mutating func clearScore() {self._score = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _calendarEventID: String? = nil
//  fileprivate var _instanceStartTime: Int64? = nil
//  fileprivate var _score: Int32? = nil
//}

/// 用户拼写纠错建议无需纠错的单词
//public struct LarkNCExtensionPB_Entities_WordEntity {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 单词文本
//  public var text: String {
//    get {return _text ?? String()}
//    set {_text = newValue}
//  }
  /// Returns true if `text` has been explicitly set.
//  public var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
//  public mutating func clearText() {self._text = nil}
//
  /// 单词的地区标识；服务端目前 locale_identifier 支持：en_US（英文）
//  public var localeIdentifier: String {
//    get {return _localeIdentifier ?? String()}
//    set {_localeIdentifier = newValue}
//  }
  /// Returns true if `localeIdentifier` has been explicitly set.
//  public var hasLocaleIdentifier: Bool {return self._localeIdentifier != nil}
  /// Clears the value of `localeIdentifier`. Subsequent reads from it will return its default value.
//  public mutating func clearLocaleIdentifier() {self._localeIdentifier = nil}
//
//  public var updateTime: Int64 {
//    get {return _updateTime ?? 0}
//    set {_updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {self._updateTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _text: String? = nil
//  fileprivate var _localeIdentifier: String? = nil
//  fileprivate var _updateTime: Int64? = nil
//}

//public struct LarkNCExtensionPB_Entities_SystemMessageAction {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var type: Int32 {
//    get {return _storage._type ?? 0}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
//  public var payload: Data {
//    get {return _storage._payload ?? LarkHTTP.Internal.emptyData}
//    set {_uniqueStorage()._payload = newValue}
//  }
  /// Returns true if `payload` has been explicitly set.
//  public var hasPayload: Bool {return _storage._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
//  public mutating func clearPayload() {_uniqueStorage()._payload = nil}
//
  /// LARK_COMMAND 使用,用于定位服务lb, 丢到Packet.cmd中
//  public var cmd: LarkNCExtensionPB_Improto_Command {
//    get {return _storage._cmd ?? .ack}
//    set {_uniqueStorage()._cmd = newValue}
//  }
  /// Returns true if `cmd` has been explicitly set.
//  public var hasCmd: Bool {return _storage._cmd != nil}
  /// Clears the value of `cmd`. Subsequent reads from it will return its default value.
//  public mutating func clearCmd() {_uniqueStorage()._cmd = nil}
//
  /// 用于存放各端跳转链接
//  public var url: LarkNCExtensionPB_Entities_SystemMessageAction.Url {
//    get {return _storage._url ?? LarkNCExtensionPB_Entities_SystemMessageAction.Url()}
//    set {_uniqueStorage()._url = newValue}
//  }
  /// Returns true if `url` has been explicitly set.
//  public var hasURL: Bool {return _storage._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
//  public mutating func clearURL() {_uniqueStorage()._url = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
  /// 一个ActType对应
//  public enum ActType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownActType // = 0
//    case inviteAtChatters // = 1
//
    /// 跳转链接
//    case url // = 2
//
    /// pb
//    case larkCommand // = 3
//
//    public init() {
//      self = .unknownActType
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownActType
//      case 1: self = .inviteAtChatters
//      case 2: self = .url
//      case 3: self = .larkCommand
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownActType: return 0
//      case .inviteAtChatters: return 1
//      case .url: return 2
//      case .larkCommand: return 3
//      }
//    }
//
//  }
//
  /// 邀请AT群外人入群
//  public struct InviteAtChatters {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var atChatterIds: [Int64] = []
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
  /// 链接
//  public struct Url {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var ios: String {
//      get {return _ios ?? String()}
//      set {_ios = newValue}
//    }
    /// Returns true if `ios` has been explicitly set.
//    public var hasIos: Bool {return self._ios != nil}
    /// Clears the value of `ios`. Subsequent reads from it will return its default value.
//    public mutating func clearIos() {self._ios = nil}
//
//    public var android: String {
//      get {return _android ?? String()}
//      set {_android = newValue}
//    }
    /// Returns true if `android` has been explicitly set.
//    public var hasAndroid: Bool {return self._android != nil}
    /// Clears the value of `android`. Subsequent reads from it will return its default value.
//    public mutating func clearAndroid() {self._android = nil}
//
//    public var pc: String {
//      get {return _pc ?? String()}
//      set {_pc = newValue}
//    }
    /// Returns true if `pc` has been explicitly set.
//    public var hasPc: Bool {return self._pc != nil}
    /// Clears the value of `pc`. Subsequent reads from it will return its default value.
//    public mutating func clearPc() {self._pc = nil}
//
//    public var web: String {
//      get {return _web ?? String()}
//      set {_web = newValue}
//    }
    /// Returns true if `web` has been explicitly set.
//    public var hasWeb: Bool {return self._web != nil}
    /// Clears the value of `web`. Subsequent reads from it will return its default value.
//    public mutating func clearWeb() {self._web = nil}
//
    /// 如果对应平台的url没有设置，则使用common
//    public var common: String {
//      get {return _common ?? String()}
//      set {_common = newValue}
//    }
    /// Returns true if `common` has been explicitly set.
//    public var hasCommon: Bool {return self._common != nil}
    /// Clears the value of `common`. Subsequent reads from it will return its default value.
//    public mutating func clearCommon() {self._common = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _ios: String? = nil
//    fileprivate var _android: String? = nil
//    fileprivate var _pc: String? = nil
//    fileprivate var _web: String? = nil
//    fileprivate var _common: String? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_SystemMessageAction.ActType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_SystemMessageItemAction {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 后续如果有扩展，再继续添加
//  public var action: OneOf_Action? {
//    get {return _storage._action}
//    set {_uniqueStorage()._action = newValue}
//  }
//
//  public var inviteAtChatters: LarkNCExtensionPB_Entities_SystemMessageItemAction.InviteAtChatters {
//    get {
//      if case .inviteAtChatters(let v)? = _storage._action {return v}
//      return LarkNCExtensionPB_Entities_SystemMessageItemAction.InviteAtChatters()
//    }
//    set {_uniqueStorage()._action = .inviteAtChatters(newValue)}
//  }
//
//  public var actionLink: LarkNCExtensionPB_Entities_SystemMessageItemAction.ActionLink {
//    get {
//      if case .actionLink(let v)? = _storage._action {return v}
//      return LarkNCExtensionPB_Entities_SystemMessageItemAction.ActionLink()
//    }
//    set {_uniqueStorage()._action = .actionLink(newValue)}
//  }
//
//  public var larkCommand: LarkNCExtensionPB_Entities_SystemMessageItemAction.LarkCommand {
//    get {
//      if case .larkCommand(let v)? = _storage._action {return v}
//      return LarkNCExtensionPB_Entities_SystemMessageItemAction.LarkCommand()
//    }
//    set {_uniqueStorage()._action = .larkCommand(newValue)}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
  /// 后续如果有扩展，再继续添加
//  public enum OneOf_Action: Equatable {
//    case inviteAtChatters(LarkNCExtensionPB_Entities_SystemMessageItemAction.InviteAtChatters)
//    case actionLink(LarkNCExtensionPB_Entities_SystemMessageItemAction.ActionLink)
//    case larkCommand(LarkNCExtensionPB_Entities_SystemMessageItemAction.LarkCommand)
//
//  #if !swift(>=4.1)
//    public static func ==(lhs: LarkNCExtensionPB_Entities_SystemMessageItemAction.OneOf_Action, rhs: LarkNCExtensionPB_Entities_SystemMessageItemAction.OneOf_Action) -> Bool {
//      switch (lhs, rhs) {
//      case (.inviteAtChatters(let l), .inviteAtChatters(let r)): return l == r
//      case (.actionLink(let l), .actionLink(let r)): return l == r
//      case (.larkCommand(let l), .larkCommand(let r)): return l == r
//      default: return false
//      }
//    }
//  #endif
//  }
//
//  public struct InviteAtChatters {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var atChatterIds: [Int64] = []
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
  /// 链接，用于App link 跳转
//  public struct ActionLink {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var ios: String {
//      get {return _ios ?? String()}
//      set {_ios = newValue}
//    }
    /// Returns true if `ios` has been explicitly set.
//    public var hasIos: Bool {return self._ios != nil}
    /// Clears the value of `ios`. Subsequent reads from it will return its default value.
//    public mutating func clearIos() {self._ios = nil}
//
//    public var android: String {
//      get {return _android ?? String()}
//      set {_android = newValue}
//    }
    /// Returns true if `android` has been explicitly set.
//    public var hasAndroid: Bool {return self._android != nil}
    /// Clears the value of `android`. Subsequent reads from it will return its default value.
//    public mutating func clearAndroid() {self._android = nil}
//
//    public var pc: String {
//      get {return _pc ?? String()}
//      set {_pc = newValue}
//    }
    /// Returns true if `pc` has been explicitly set.
//    public var hasPc: Bool {return self._pc != nil}
    /// Clears the value of `pc`. Subsequent reads from it will return its default value.
//    public mutating func clearPc() {self._pc = nil}
//
//    public var web: String {
//      get {return _web ?? String()}
//      set {_web = newValue}
//    }
    /// Returns true if `web` has been explicitly set.
//    public var hasWeb: Bool {return self._web != nil}
    /// Clears the value of `web`. Subsequent reads from it will return its default value.
//    public mutating func clearWeb() {self._web = nil}
//
    /// 如果对应平台的url没有设置，则使用common
//    public var common: String {
//      get {return _common ?? String()}
//      set {_common = newValue}
//    }
    /// Returns true if `common` has been explicitly set.
//    public var hasCommon: Bool {return self._common != nil}
    /// Clears the value of `common`. Subsequent reads from it will return its default value.
//    public mutating func clearCommon() {self._common = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _ios: String? = nil
//    fileprivate var _android: String? = nil
//    fileprivate var _pc: String? = nil
//    fileprivate var _web: String? = nil
//    fileprivate var _common: String? = nil
//  }
//
  /// LarkCommand用于客户端直接透传到服务端接口的请求
//  public struct LarkCommand {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var payload: Data {
//      get {return _payload ?? LarkHTTP.Internal.emptyData}
//      set {_payload = newValue}
//    }
    /// Returns true if `payload` has been explicitly set.
//    public var hasPayload: Bool {return self._payload != nil}
    /// Clears the value of `payload`. Subsequent reads from it will return its default value.
//    public mutating func clearPayload() {self._payload = nil}
//
    /// LARK_COMMAND 使用,用于定位服务lb, 丢到Packet.cmd中
//    public var cmd: LarkNCExtensionPB_Improto_Command {
//      get {return _cmd ?? .ack}
//      set {_cmd = newValue}
//    }
    /// Returns true if `cmd` has been explicitly set.
//    public var hasCmd: Bool {return self._cmd != nil}
    /// Clears the value of `cmd`. Subsequent reads from it will return its default value.
//    public mutating func clearCmd() {self._cmd = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _payload: Data? = nil
//    fileprivate var _cmd: LarkNCExtensionPB_Improto_Command? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_FavorItem {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var chatterID: String {
//    get {return _chatterID ?? String()}
//    set {_chatterID = newValue}
//  }
  /// Returns true if `chatterID` has been explicitly set.
//  public var hasChatterID: Bool {return self._chatterID != nil}
  /// Clears the value of `chatterID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatterID() {self._chatterID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _chatterID: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_FavorChattersInChat {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var chatID: String {
//    get {return _chatID ?? String()}
//    set {_chatID = newValue}
//  }
  /// Returns true if `chatID` has been explicitly set.
//  public var hasChatID: Bool {return self._chatID != nil}
  /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatID() {self._chatID = nil}
//
  /// 有序的选中的参与人
//  public var orderedFavorItems: [LarkNCExtensionPB_Entities_FavorItem] = []
//
  /// 选中的参与人
//  public var selectedFavorItems: [LarkNCExtensionPB_Entities_FavorItem] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _chatID: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_PlatformInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 平台类型
//  public var type: String {
//    get {return _type ?? String()}
//    set {_type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}
//
  /// 支持某 app 的最小版本
//  public var minVersion: String {
//    get {return _minVersion ?? String()}
//    set {_minVersion = newValue}
//  }
  /// Returns true if `minVersion` has been explicitly set.
//  public var hasMinVersion: Bool {return self._minVersion != nil}
  /// Clears the value of `minVersion`. Subsequent reads from it will return its default value.
//  public mutating func clearMinVersion() {self._minVersion = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _type: String? = nil
//  fileprivate var _minVersion: String? = nil
//}

/// app 信息，导航栏上的每一个 tab 项一个 app
//public struct LarkNCExtensionPB_Entities_AppInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// app id
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
  /// app 唯一标识，端上用来做区分
//  public var key: String {
//    get {return _key ?? String()}
//    set {_key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {self._key = nil}
//
  /// i18n 名字 map
//  public var name: Dictionary<String,String> = [:]
//
  /// i18n 图标 map
//  public var logo: Dictionary<String,String> = [:]
//
  /// app 类型；原生、小程序
//  public var appType: String {
//    get {return _appType ?? String()}
//    set {_appType = newValue}
//  }
  /// Returns true if `appType` has been explicitly set.
//  public var hasAppType: Bool {return self._appType != nil}
  /// Clears the value of `appType`. Subsequent reads from it will return its default value.
//  public mutating func clearAppType() {self._appType = nil}
//
  /// 平台支持信息
//  public var platforms: [LarkNCExtensionPB_Entities_PlatformInfo] = []
//
  /// 只能主导航
//  public var primaryOnly: Bool {
//    get {return _primaryOnly ?? false}
//    set {_primaryOnly = newValue}
//  }
  /// Returns true if `primaryOnly` has been explicitly set.
//  public var hasPrimaryOnly: Bool {return self._primaryOnly != nil}
  /// Clears the value of `primaryOnly`. Subsequent reads from it will return its default value.
//  public mutating func clearPrimaryOnly() {self._primaryOnly = nil}
//
  /// 描述
//  public var desc: Dictionary<String,String> = [:]
//
  /// 保留字段，存放小程序启动参数等信息
//  public var extra: Dictionary<String,String> = [:]
//
  /// true => 不可移动
//  public var unmovable: Bool {
//    get {return _unmovable ?? false}
//    set {_unmovable = newValue}
//  }
  /// Returns true if `unmovable` has been explicitly set.
//  public var hasUnmovable: Bool {return self._unmovable != nil}
  /// Clears the value of `unmovable`. Subsequent reads from it will return its default value.
//  public mutating func clearUnmovable() {self._unmovable = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _key: String? = nil
//  fileprivate var _appType: String? = nil
//  fileprivate var _primaryOnly: Bool? = nil
//  fileprivate var _unmovable: Bool? = nil
//}

/// 导航栏 app 信息，导航栏上的每一个 tab 项一个 app
//public struct LarkNCExtensionPB_Entities_NavigationAppInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// app id
//  public var id: Int64 {
//    get {return _storage._id ?? 0}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
  /// app 唯一标识，端上用来做区分
//  public var key: String {
//    get {return _storage._key ?? String()}
//    set {_uniqueStorage()._key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}
//
  /// app 类型；原生、小程序
//  public var appType: LarkNCExtensionPB_Entities_NavigationAppType {
//    get {return _storage._appType ?? .appTypeLarkNative}
//    set {_uniqueStorage()._appType = newValue}
//  }
  /// Returns true if `appType` has been explicitly set.
//  public var hasAppType: Bool {return _storage._appType != nil}
  /// Clears the value of `appType`. Subsequent reads from it will return its default value.
//  public mutating func clearAppType() {_uniqueStorage()._appType = nil}
//
  /// i18n 名字
//  public var name: Dictionary<String,String> {
//    get {return _storage._name}
//    set {_uniqueStorage()._name = newValue}
//  }
//
  /// 导航栏图标
//  public var logo: LarkNCExtensionPB_Entities_NavigationAppInfo.Logo {
//    get {return _storage._logo ?? LarkNCExtensionPB_Entities_NavigationAppInfo.Logo()}
//    set {_uniqueStorage()._logo = newValue}
//  }
  /// Returns true if `logo` has been explicitly set.
//  public var hasLogo: Bool {return _storage._logo != nil}
  /// Clears the value of `logo`. Subsequent reads from it will return its default value.
//  public mutating func clearLogo() {_uniqueStorage()._logo = nil}
//
  /// 平台支持信息
//  public var platforms: [LarkNCExtensionPB_Entities_NavigationAppInfo.PlatformInfo] {
//    get {return _storage._platforms}
//    set {_uniqueStorage()._platforms = newValue}
//  }
//
  /// 保留字段，存放小程序启动参数等信息
//  public var extra: Dictionary<String,String> {
//    get {return _storage._extra}
//    set {_uniqueStorage()._extra = newValue}
//  }
//
  /// 只能主导航
//  public var primaryOnly: Bool {
//    get {return _storage._primaryOnly ?? false}
//    set {_uniqueStorage()._primaryOnly = newValue}
//  }
  /// Returns true if `primaryOnly` has been explicitly set.
//  public var hasPrimaryOnly: Bool {return _storage._primaryOnly != nil}
  /// Clears the value of `primaryOnly`. Subsequent reads from it will return its default value.
//  public mutating func clearPrimaryOnly() {_uniqueStorage()._primaryOnly = nil}
//
  /// true => 不可移动
//  public var unmovable: Bool {
//    get {return _storage._unmovable ?? false}
//    set {_uniqueStorage()._unmovable = newValue}
//  }
  /// Returns true if `unmovable` has been explicitly set.
//  public var hasUnmovable: Bool {return _storage._unmovable != nil}
  /// Clears the value of `unmovable`. Subsequent reads from it will return its default value.
//  public mutating func clearUnmovable() {_uniqueStorage()._unmovable = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum Platform: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//    case mac // = 1
//    case windows // = 2
//    case android // = 3
//    case iphone // = 4
//    case ipad // = 5
//    case linux // = 6
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .mac
//      case 2: self = .windows
//      case 3: self = .android
//      case 4: self = .iphone
//      case 5: self = .ipad
//      case 6: self = .linux
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .mac: return 1
//      case .windows: return 2
//      case .android: return 3
//      case .iphone: return 4
//      case .ipad: return 5
//      case .linux: return 6
//      }
//    }
//
//  }
//
//  public struct Logo {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 主导航默认图标
//    public var primaryDefault: String {
//      get {return _primaryDefault ?? String()}
//      set {_primaryDefault = newValue}
//    }
    /// Returns true if `primaryDefault` has been explicitly set.
//    public var hasPrimaryDefault: Bool {return self._primaryDefault != nil}
    /// Clears the value of `primaryDefault`. Subsequent reads from it will return its default value.
//    public mutating func clearPrimaryDefault() {self._primaryDefault = nil}
//
    /// 主导航选中图标
//    public var primarySelected: String {
//      get {return _primarySelected ?? String()}
//      set {_primarySelected = newValue}
//    }
    /// Returns true if `primarySelected` has been explicitly set.
//    public var hasPrimarySelected: Bool {return self._primarySelected != nil}
    /// Clears the value of `primarySelected`. Subsequent reads from it will return its default value.
//    public mutating func clearPrimarySelected() {self._primarySelected = nil}
//
    /// 快捷导航全彩图标
//    public var shortcutDefault: String {
//      get {return _shortcutDefault ?? String()}
//      set {_shortcutDefault = newValue}
//    }
    /// Returns true if `shortcutDefault` has been explicitly set.
//    public var hasShortcutDefault: Bool {return self._shortcutDefault != nil}
    /// Clears the value of `shortcutDefault`. Subsequent reads from it will return its default value.
//    public mutating func clearShortcutDefault() {self._shortcutDefault = nil}
//
    /// 主导航默认 SVG 图标
//    public var primaryDefaultSvg: String {
//      get {return _primaryDefaultSvg ?? String()}
//      set {_primaryDefaultSvg = newValue}
//    }
    /// Returns true if `primaryDefaultSvg` has been explicitly set.
//    public var hasPrimaryDefaultSvg: Bool {return self._primaryDefaultSvg != nil}
    /// Clears the value of `primaryDefaultSvg`. Subsequent reads from it will return its default value.
//    public mutating func clearPrimaryDefaultSvg() {self._primaryDefaultSvg = nil}
//
    /// 可染色的 PNG
//    public var primaryColorPng: String {
//      get {return _primaryColorPng ?? String()}
//      set {_primaryColorPng = newValue}
//    }
    /// Returns true if `primaryColorPng` has been explicitly set.
//    public var hasPrimaryColorPng: Bool {return self._primaryColorPng != nil}
    /// Clears the value of `primaryColorPng`. Subsequent reads from it will return its default value.
//    public mutating func clearPrimaryColorPng() {self._primaryColorPng = nil}
//
    /// PC选中态彩色svg，新版本同4
//    public var pcPrimaryColorSvg: String {
//      get {return _pcPrimaryColorSvg ?? String()}
//      set {_pcPrimaryColorSvg = newValue}
//    }
    /// Returns true if `pcPrimaryColorSvg` has been explicitly set.
//    public var hasPcPrimaryColorSvg: Bool {return self._pcPrimaryColorSvg != nil}
    /// Clears the value of `pcPrimaryColorSvg`. Subsequent reads from it will return its default value.
//    public mutating func clearPcPrimaryColorSvg() {self._pcPrimaryColorSvg = nil}
//
    /// 移动端默认png，新版本同5
//    public var mobilePrimaryDefaultPng: String {
//      get {return _mobilePrimaryDefaultPng ?? String()}
//      set {_mobilePrimaryDefaultPng = newValue}
//    }
    /// Returns true if `mobilePrimaryDefaultPng` has been explicitly set.
//    public var hasMobilePrimaryDefaultPng: Bool {return self._mobilePrimaryDefaultPng != nil}
    /// Clears the value of `mobilePrimaryDefaultPng`. Subsequent reads from it will return its default value.
//    public mutating func clearMobilePrimaryDefaultPng() {self._mobilePrimaryDefaultPng = nil}
//
    /// 移动端选中态不染色png，新版本同2
//    public var mobilePrimarySelectedPng: String {
//      get {return _mobilePrimarySelectedPng ?? String()}
//      set {_mobilePrimarySelectedPng = newValue}
//    }
    /// Returns true if `mobilePrimarySelectedPng` has been explicitly set.
//    public var hasMobilePrimarySelectedPng: Bool {return self._mobilePrimarySelectedPng != nil}
    /// Clears the value of `mobilePrimarySelectedPng`. Subsequent reads from it will return its default value.
//    public mutating func clearMobilePrimarySelectedPng() {self._mobilePrimarySelectedPng = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _primaryDefault: String? = nil
//    fileprivate var _primarySelected: String? = nil
//    fileprivate var _shortcutDefault: String? = nil
//    fileprivate var _primaryDefaultSvg: String? = nil
//    fileprivate var _primaryColorPng: String? = nil
//    fileprivate var _pcPrimaryColorSvg: String? = nil
//    fileprivate var _mobilePrimaryDefaultPng: String? = nil
//    fileprivate var _mobilePrimarySelectedPng: String? = nil
//  }
//
//  public struct Version {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var major: Int32 {
//      get {return _major ?? 0}
//      set {_major = newValue}
//    }
    /// Returns true if `major` has been explicitly set.
//    public var hasMajor: Bool {return self._major != nil}
    /// Clears the value of `major`. Subsequent reads from it will return its default value.
//    public mutating func clearMajor() {self._major = nil}
//
//    public var minor: Int32 {
//      get {return _minor ?? 0}
//      set {_minor = newValue}
//    }
    /// Returns true if `minor` has been explicitly set.
//    public var hasMinor: Bool {return self._minor != nil}
    /// Clears the value of `minor`. Subsequent reads from it will return its default value.
//    public mutating func clearMinor() {self._minor = nil}
//
//    public var patch: Int32 {
//      get {return _patch ?? 0}
//      set {_patch = newValue}
//    }
    /// Returns true if `patch` has been explicitly set.
//    public var hasPatch: Bool {return self._patch != nil}
    /// Clears the value of `patch`. Subsequent reads from it will return its default value.
//    public mutating func clearPatch() {self._patch = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _major: Int32? = nil
//    fileprivate var _minor: Int32? = nil
//    fileprivate var _patch: Int32? = nil
//  }
//
//  public struct PlatformInfo {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 系统平台
//    public var platform: LarkNCExtensionPB_Entities_NavigationAppInfo.Platform {
//      get {return _storage._platform ?? .unknown}
//      set {_uniqueStorage()._platform = newValue}
//    }
    /// Returns true if `platform` has been explicitly set.
//    public var hasPlatform: Bool {return _storage._platform != nil}
    /// Clears the value of `platform`. Subsequent reads from it will return its default value.
//    public mutating func clearPlatform() {_uniqueStorage()._platform = nil}
//
    /// 最小版本
//    public var minVersion: LarkNCExtensionPB_Entities_NavigationAppInfo.Version {
//      get {return _storage._minVersion ?? LarkNCExtensionPB_Entities_NavigationAppInfo.Version()}
//      set {_uniqueStorage()._minVersion = newValue}
//    }
    /// Returns true if `minVersion` has been explicitly set.
//    public var hasMinVersion: Bool {return _storage._minVersion != nil}
    /// Clears the value of `minVersion`. Subsequent reads from it will return its default value.
//    public mutating func clearMinVersion() {_uniqueStorage()._minVersion = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_NavigationAppInfo.Platform: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 导航栏顺序
//public struct LarkNCExtensionPB_Entities_NavigationOrder {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 导航上的 app；显示在最外层的
//  public var navigations: [LarkNCExtensionPB_Entities_NavigationUniqueID] = []
//
  /// 有多少个主导航应用
//  public var primaryCount: Int32 {
//    get {return _primaryCount ?? 0}
//    set {_primaryCount = newValue}
//  }
  /// Returns true if `primaryCount` has been explicitly set.
//  public var hasPrimaryCount: Bool {return self._primaryCount != nil}
  /// Clears the value of `primaryCount`. Subsequent reads from it will return its default value.
//  public mutating func clearPrimaryCount() {self._primaryCount = nil}
//
  /// 应用总数
//  public var totalCount: Int32 {
//    get {return _totalCount ?? 0}
//    set {_totalCount = newValue}
//  }
  /// Returns true if `totalCount` has been explicitly set.
//  public var hasTotalCount: Bool {return self._totalCount != nil}
  /// Clears the value of `totalCount`. Subsequent reads from it will return its default value.
//  public mutating func clearTotalCount() {self._totalCount = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _primaryCount: Int32? = nil
//  fileprivate var _totalCount: Int32? = nil
//}

/// 导航信息
//public struct LarkNCExtensionPB_Entities_NavigationInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 主导航上的 app；显示在最外层的
//  public var mainNavigation: [LarkNCExtensionPB_Entities_AppInfo] = []
//
  /// 快捷导航的 app；被收纳的
//  public var shortcutNavigation: [LarkNCExtensionPB_Entities_AppInfo] = []
//
  /// 配置的版本号 deprecated
//  public var version: Int32 {
//    get {return _version ?? 0}
//    set {_version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {self._version = nil}
//
  /// 本次配置产生时间
//  public var versionV2: Int64 {
//    get {return _versionV2 ?? 0}
//    set {_versionV2 = newValue}
//  }
  /// Returns true if `versionV2` has been explicitly set.
//  public var hasVersionV2: Bool {return self._versionV2 != nil}
  /// Clears the value of `versionV2`. Subsequent reads from it will return its default value.
//  public mutating func clearVersionV2() {self._versionV2 = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _version: Int32? = nil
//  fileprivate var _versionV2: Int64? = nil
//}

/// 导航唯一标识 后端使用 ID + AppType 区分不同应用
//public struct LarkNCExtensionPB_Entities_NavigationUniqueID {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// app id
//  public var id: String {
//    get {return _id ?? String()}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
  /// app type
//  public var appType: LarkNCExtensionPB_Entities_NavigationAppType {
//    get {return _appType ?? .appTypeLarkNative}
//    set {_appType = newValue}
//  }
  /// Returns true if `appType` has been explicitly set.
//  public var hasAppType: Bool {return self._appType != nil}
  /// Clears the value of `appType`. Subsequent reads from it will return its default value.
//  public mutating func clearAppType() {self._appType = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _id: String? = nil
//  fileprivate var _appType: LarkNCExtensionPB_Entities_NavigationAppType? = nil
//}

/// 服务台聊天群，客户端始终显示i18n群昵称&群头像&个人签名
//public struct LarkNCExtensionPB_Entities_OncallGroupChatter {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// deprecated since lark 3.17.0
//  public var groupAvatar: LarkNCExtensionPB_Entities_ImageSet {
//    get {return _storage._groupAvatar ?? LarkNCExtensionPB_Entities_ImageSet()}
//    set {_uniqueStorage()._groupAvatar = newValue}
//  }
  /// Returns true if `groupAvatar` has been explicitly set.
//  public var hasGroupAvatar: Bool {return _storage._groupAvatar != nil}
  /// Clears the value of `groupAvatar`. Subsequent reads from it will return its default value.
//  public mutating func clearGroupAvatar() {_uniqueStorage()._groupAvatar = nil}
//
  /// i18n群昵称以及个人签名
//  public var groupI18NInf: LarkNCExtensionPB_Entities_OncallGroupChatter.I18nInf {
//    get {return _storage._groupI18NInf ?? LarkNCExtensionPB_Entities_OncallGroupChatter.I18nInf()}
//    set {_uniqueStorage()._groupI18NInf = newValue}
//  }
  /// Returns true if `groupI18NInf` has been explicitly set.
//  public var hasGroupI18NInf: Bool {return _storage._groupI18NInf != nil}
  /// Clears the value of `groupI18NInf`. Subsequent reads from it will return its default value.
//  public mutating func clearGroupI18NInf() {_uniqueStorage()._groupI18NInf = nil}
//
  /// 中文拼音，用于搜索
//  public var namePinyin: String {
//    get {return _storage._namePinyin ?? String()}
//    set {_uniqueStorage()._namePinyin = newValue}
//  }
  /// Returns true if `namePinyin` has been explicitly set.
//  public var hasNamePinyin: Bool {return _storage._namePinyin != nil}
  /// Clears the value of `namePinyin`. Subsequent reads from it will return its default value.
//  public mutating func clearNamePinyin() {_uniqueStorage()._namePinyin = nil}
//
  /// 是否需要匿名处理，比如不可以点开头像单独聊天
//  public var isAnonymous: Bool {
//    get {return _storage._isAnonymous ?? false}
//    set {_uniqueStorage()._isAnonymous = newValue}
//  }
  /// Returns true if `isAnonymous` has been explicitly set.
//  public var hasIsAnonymous: Bool {return _storage._isAnonymous != nil}
  /// Clears the value of `isAnonymous`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAnonymous() {_uniqueStorage()._isAnonymous = nil}
//
  /// 群头像
//  public var imageAvatar: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._imageAvatar ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._imageAvatar = newValue}
//  }
  /// Returns true if `imageAvatar` has been explicitly set.
//  public var hasImageAvatar: Bool {return _storage._imageAvatar != nil}
  /// Clears the value of `imageAvatar`. Subsequent reads from it will return its default value.
//  public mutating func clearImageAvatar() {_uniqueStorage()._imageAvatar = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public struct I18nInf {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var i18NNames: Dictionary<String,String> = [:]
//
//    public var i18NDescriptions: Dictionary<String,String> = [:]
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_TenantSingleProduct {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var tenantSingleProduct: Int32 {
//    get {return _tenantSingleProduct ?? 0}
//    set {_tenantSingleProduct = newValue}
//  }
  /// Returns true if `tenantSingleProduct` has been explicitly set.
//  public var hasTenantSingleProduct: Bool {return self._tenantSingleProduct != nil}
  /// Clears the value of `tenantSingleProduct`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantSingleProduct() {self._tenantSingleProduct = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _tenantSingleProduct: Int32? = nil
//}

/// 小组实体
//public struct LarkNCExtensionPB_Entities_TopicGroup {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 小组id，与对应Chat实体的id相同
//  public var id: String {
//    get {return _storage._id ?? String()}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
  /// 用户维度的小组设置
//  public var userSetting: LarkNCExtensionPB_Entities_TopicGroup.UserSetting {
//    get {return _storage._userSetting ?? LarkNCExtensionPB_Entities_TopicGroup.UserSetting()}
//    set {_uniqueStorage()._userSetting = newValue}
//  }
  /// Returns true if `userSetting` has been explicitly set.
//  public var hasUserSetting: Bool {return _storage._userSetting != nil}
  /// Clears the value of `userSetting`. Subsequent reads from it will return its default value.
//  public mutating func clearUserSetting() {_uniqueStorage()._userSetting = nil}
//
  /// 小组类型，1=私有小组，2=默认小组，3=公开小组， 0=未知类型，异常情况
//  public var type: Int32 {
//    get {return _storage._type ?? 0}
//    set {_uniqueStorage()._type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknownType // = 0
//
    /// 私有小组，用户有创建、删除等管理权限
//    case normal // = 1
//
    /// 默认小组，管理权限收敛到admin管理台
//    case `default` // = 2
//
    ///公开小组
//    case `public` // = 3
//
//    public init() {
//      self = .unknownType
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknownType
//      case 1: self = .normal
//      case 2: self = .default
//      case 3: self = .public
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknownType: return 0
//      case .normal: return 1
//      case .default: return 2
//      case .public: return 3
//      }
//    }
//
//  }
//
  /// 用户维度的设置
//  public struct UserSetting {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 是否特别关注
//    public var isFavorite: Bool {
//      get {return _isFavorite ?? false}
//      set {_isFavorite = newValue}
//    }
    /// Returns true if `isFavorite` has been explicitly set.
//    public var hasIsFavorite: Bool {return self._isFavorite != nil}
    /// Clears the value of `isFavorite`. Subsequent reads from it will return its default value.
//    public mutating func clearIsFavorite() {self._isFavorite = nil}
//
//    public var updateTime: Int64 {
//      get {return _updateTime ?? 0}
//      set {_updateTime = newValue}
//    }
    /// Returns true if `updateTime` has been explicitly set.
//    public var hasUpdateTime: Bool {return self._updateTime != nil}
    /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//    public mutating func clearUpdateTime() {self._updateTime = nil}
//
    ///用户在小组中的角色
//    public var topicGroupRole: LarkNCExtensionPB_Entities_TopicGroupRole {
//      get {return _topicGroupRole ?? .unknownRole}
//      set {_topicGroupRole = newValue}
//    }
    /// Returns true if `topicGroupRole` has been explicitly set.
//    public var hasTopicGroupRole: Bool {return self._topicGroupRole != nil}
    /// Clears the value of `topicGroupRole`. Subsequent reads from it will return its default value.
//    public mutating func clearTopicGroupRole() {self._topicGroupRole = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _isFavorite: Bool? = nil
//    fileprivate var _updateTime: Int64? = nil
//    fileprivate var _topicGroupRole: LarkNCExtensionPB_Entities_TopicGroupRole? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_TopicGroup.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_MailGroupSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var sendPermission: LarkNCExtensionPB_Entities_MailGroupSetting.SendPermission {
//    get {return _sendPermission ?? .groupMembers}
//    set {_sendPermission = newValue}
//  }
  /// Returns true if `sendPermission` has been explicitly set.
//  public var hasSendPermission: Bool {return self._sendPermission != nil}
  /// Clears the value of `sendPermission`. Subsequent reads from it will return its default value.
//  public mutating func clearSendPermission() {self._sendPermission = nil}
//
//  public var enableMailSend: Bool {
//    get {return _enableMailSend ?? true}
//    set {_enableMailSend = newValue}
//  }
  /// Returns true if `enableMailSend` has been explicitly set.
//  public var hasEnableMailSend: Bool {return self._enableMailSend != nil}
  /// Clears the value of `enableMailSend`. Subsequent reads from it will return its default value.
//  public mutating func clearEnableMailSend() {self._enableMailSend = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum SendPermission: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//    case groupAdmin // = 1
//
    /// default
//    case groupMembers // = 2
//    case organizationMembers // = 3
//    case all // = 4
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .groupAdmin
//      case 2: self = .groupMembers
//      case 3: self = .organizationMembers
//      case 4: self = .all
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .groupAdmin: return 1
//      case .groupMembers: return 2
//      case .organizationMembers: return 3
//      case .all: return 4
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _sendPermission: LarkNCExtensionPB_Entities_MailGroupSetting.SendPermission? = nil
//  fileprivate var _enableMailSend: Bool? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_MailGroupSetting.SendPermission: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// Frontend and backend definitions MUST be well aligned!
/// Because sdk receives and stores the binary data from server
/// instead of the corresponding structured message of backend definition,
/// but directly parses to this structured message and sends to frontend.
//public struct LarkNCExtensionPB_Entities_CalendarSchemaCollection {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var entitySchemas: [LarkNCExtensionPB_Entities_EntitySchema] {
//    get {return _storage._entitySchemas}
//    set {_uniqueStorage()._entitySchemas = newValue}
//  }
//
//  public var compatibility: LarkNCExtensionPB_Entities_CalendarSchemaCompatibility {
//    get {return _storage._compatibility ?? LarkNCExtensionPB_Entities_CalendarSchemaCompatibility()}
//    set {_uniqueStorage()._compatibility = newValue}
//  }
  /// Returns true if `compatibility` has been explicitly set.
//  public var hasCompatibility: Bool {return _storage._compatibility != nil}
  /// Clears the value of `compatibility`. Subsequent reads from it will return its default value.
//  public mutating func clearCompatibility() {_uniqueStorage()._compatibility = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_EntitySchema {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var uniqueName: String {
//    get {return _uniqueName ?? String()}
//    set {_uniqueName = newValue}
//  }
  /// Returns true if `uniqueName` has been explicitly set.
//  public var hasUniqueName: Bool {return self._uniqueName != nil}
  /// Clears the value of `uniqueName`. Subsequent reads from it will return its default value.
//  public mutating func clearUniqueName() {self._uniqueName = nil}
//
//  public var uiLevel: LarkNCExtensionPB_Entities_EntitySchema.ItemUILevel {
//    get {return _uiLevel ?? .hide}
//    set {_uiLevel = newValue}
//  }
  /// Returns true if `uiLevel` has been explicitly set.
//  public var hasUiLevel: Bool {return self._uiLevel != nil}
  /// Clears the value of `uiLevel`. Subsequent reads from it will return its default value.
//  public mutating func clearUiLevel() {self._uiLevel = nil}
//
  ///applink todo:错误string error处理
//  public var appLink: String {
//    get {return _appLink ?? String()}
//    set {_appLink = newValue}
//  }
  /// Returns true if `appLink` has been explicitly set.
//  public var hasAppLink: Bool {return self._appLink != nil}
  /// Clears the value of `appLink`. Subsequent reads from it will return its default value.
//  public mutating func clearAppLink() {self._appLink = nil}
//
//  public var incompatibleLevel: LarkNCExtensionPB_Entities_IncompatibleLevel {
//    get {return _incompatibleLevel ?? .showHint}
//    set {_incompatibleLevel = newValue}
//  }
  /// Returns true if `incompatibleLevel` has been explicitly set.
//  public var hasIncompatibleLevel: Bool {return self._incompatibleLevel != nil}
  /// Clears the value of `incompatibleLevel`. Subsequent reads from it will return its default value.
//  public mutating func clearIncompatibleLevel() {self._incompatibleLevel = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum ItemUILevel: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case hide // = 1
//    case readonly // = 2
//    case editable // = 3
//
//    public init() {
//      self = .hide
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .hide
//      case 2: self = .readonly
//      case 3: self = .editable
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .hide: return 1
//      case .readonly: return 2
//      case .editable: return 3
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _uniqueName: String? = nil
//  fileprivate var _uiLevel: LarkNCExtensionPB_Entities_EntitySchema.ItemUILevel? = nil
//  fileprivate var _appLink: String? = nil
//  fileprivate var _incompatibleLevel: LarkNCExtensionPB_Entities_IncompatibleLevel? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_EntitySchema.ItemUILevel: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_CalendarSchemaCompatibility {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var minimumCompatibilityVer: Int32 {
//    get {return _minimumCompatibilityVer ?? 0}
//    set {_minimumCompatibilityVer = newValue}
//  }
  /// Returns true if `minimumCompatibilityVer` has been explicitly set.
//  public var hasMinimumCompatibilityVer: Bool {return self._minimumCompatibilityVer != nil}
  /// Clears the value of `minimumCompatibilityVer`. Subsequent reads from it will return its default value.
//  public mutating func clearMinimumCompatibilityVer() {self._minimumCompatibilityVer = nil}
//
//  public var incompatibleLevel: LarkNCExtensionPB_Entities_IncompatibleLevel {
//    get {return _incompatibleLevel ?? .showHint}
//    set {_incompatibleLevel = newValue}
//  }
  /// Returns true if `incompatibleLevel` has been explicitly set.
//  public var hasIncompatibleLevel: Bool {return self._incompatibleLevel != nil}
  /// Clears the value of `incompatibleLevel`. Subsequent reads from it will return its default value.
//  public mutating func clearIncompatibleLevel() {self._incompatibleLevel = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _minimumCompatibilityVer: Int32? = nil
//  fileprivate var _incompatibleLevel: LarkNCExtensionPB_Entities_IncompatibleLevel? = nil
//}

//public struct LarkNCExtensionPB_Entities_PendingUser {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var userName: String {
//    get {return _userName ?? String()}
//    set {_userName = newValue}
//  }
  /// Returns true if `userName` has been explicitly set.
//  public var hasUserName: Bool {return self._userName != nil}
  /// Clears the value of `userName`. Subsequent reads from it will return its default value.
//  public mutating func clearUserName() {self._userName = nil}
//
  /// passport config v3 使用的 env
//  public var userEnv: String {
//    get {return _userEnv ?? String()}
//    set {_userEnv = newValue}
//  }
  /// Returns true if `userEnv` has been explicitly set.
//  public var hasUserEnv: Bool {return self._userEnv != nil}
  /// Clears the value of `userEnv`. Subsequent reads from it will return its default value.
//  public mutating func clearUserEnv() {self._userEnv = nil}
//
//  public var tenantID: Int64 {
//    get {return _tenantID ?? 0}
//    set {_tenantID = newValue}
//  }
  /// Returns true if `tenantID` has been explicitly set.
//  public var hasTenantID: Bool {return self._tenantID != nil}
  /// Clears the value of `tenantID`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantID() {self._tenantID = nil}
//
//  public var tenantName: String {
//    get {return _tenantName ?? String()}
//    set {_tenantName = newValue}
//  }
  /// Returns true if `tenantName` has been explicitly set.
//  public var hasTenantName: Bool {return self._tenantName != nil}
  /// Clears the value of `tenantName`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantName() {self._tenantName = nil}
//
//  public var tenantIconURL: String {
//    get {return _tenantIconURL ?? String()}
//    set {_tenantIconURL = newValue}
//  }
  /// Returns true if `tenantIconURL` has been explicitly set.
//  public var hasTenantIconURL: Bool {return self._tenantIconURL != nil}
  /// Clears the value of `tenantIconURL`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantIconURL() {self._tenantIconURL = nil}
//
//  public var userUnit: String {
//    get {return _userUnit ?? String()}
//    set {_userUnit = newValue}
//  }
  /// Returns true if `userUnit` has been explicitly set.
//  public var hasUserUnit: Bool {return self._userUnit != nil}
  /// Clears the value of `userUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearUserUnit() {self._userUnit = nil}
//
  /// deprecate 没有在任何版本使用过
//  public var userBrand: String {
//    get {return _userBrand ?? String()}
//    set {_userBrand = newValue}
//  }
  /// Returns true if `userBrand` has been explicitly set.
//  public var hasUserBrand: Bool {return self._userBrand != nil}
  /// Clears the value of `userBrand`. Subsequent reads from it will return its default value.
//  public mutating func clearUserBrand() {self._userBrand = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _userName: String? = nil
//  fileprivate var _userEnv: String? = nil
//  fileprivate var _tenantID: Int64? = nil
//  fileprivate var _tenantName: String? = nil
//  fileprivate var _tenantIconURL: String? = nil
//  fileprivate var _userUnit: String? = nil
//  fileprivate var _userBrand: String? = nil
//}

/// 用户可定义的头像的 meta 数据，用于头像修改时客户端初始化，需求参见
/// https://bytedance.feishu.cn/docs/doccn6ONxu2Ovy0wlq1gY81MRGe#cQbwSk
/// 字段赋值说明：https://bytedance.feishu.cn/docx/doxcnD5tRZaBboOZ5Tdzy2eL6Un#doxcngCoy0AOakeAEUd28FvBajd
//public struct LarkNCExtensionPB_Entities_AvatarMeta {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var type: LarkNCExtensionPB_Entities_AvatarMeta.TypeEnum {
//    get {return _type ?? .unknown}
//    set {_type = newValue}
//  }
  /// Returns true if `type` has been explicitly set.
//  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}
//
  /// 用户 or 随机 选择的颜色：客户端根据color自定义渲染
//  public var color: Int32 {
//    get {return _color ?? 0}
//    set {_color = newValue}
//  }
  /// Returns true if `color` has been explicitly set.
//  public var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
//  public mutating func clearColor() {self._color = nil}
//
  /// 用户选中的生成头像的文字
//  public var text: String {
//    get {return _text ?? String()}
//    set {_text = newValue}
//  }
  /// Returns true if `text` has been explicitly set.
//  public var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
//  public mutating func clearText() {self._text = nil}
//
  /// 4 deprecated
//  public var borderColor: Int32 {
//    get {return _borderColor ?? 0}
//    set {_borderColor = newValue}
//  }
  /// Returns true if `borderColor` has been explicitly set.
//  public var hasBorderColor: Bool {return self._borderColor != nil}
  /// Clears the value of `borderColor`. Subsequent reads from it will return its default value.
//  public mutating func clearBorderColor() {self._borderColor = nil}
//
  /// 6 deprecated
//  public var backgroundColor: Int32 {
//    get {return _backgroundColor ?? 0}
//    set {_backgroundColor = newValue}
//  }
  /// Returns true if `backgroundColor` has been explicitly set.
//  public var hasBackgroundColor: Bool {return self._backgroundColor != nil}
  /// Clears the value of `backgroundColor`. Subsequent reads from it will return its default value.
//  public mutating func clearBackgroundColor() {self._backgroundColor = nil}
//
  ///中心icon/字体颜色
//  public var centerColor: Int32 {
//    get {return _centerColor ?? 0}
//    set {_centerColor = newValue}
//  }
  /// Returns true if `centerColor` has been explicitly set.
//  public var hasCenterColor: Bool {return self._centerColor != nil}
  /// Clears the value of `centerColor`. Subsequent reads from it will return its default value.
//  public mutating func clearCenterColor() {self._centerColor = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum TypeEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//
    /// 没有数据, 错误数据或者系统错误降级
//    case unknown // = 0
//
    /// 在修改 or 创建时，用户未指定 name 或者选中推荐的文字时，程序随机选择的头像
//    case random // = 1
//
    /// 用户选中、指定的文字生成的头像
//    case words // = 2
//
    /// 用户自己上传的头像
//    case upload // = 3
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .random
//      case 2: self = .words
//      case 3: self = .upload
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .random: return 1
//      case .words: return 2
//      case .upload: return 3
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _type: LarkNCExtensionPB_Entities_AvatarMeta.TypeEnum? = nil
//  fileprivate var _color: Int32? = nil
//  fileprivate var _text: String? = nil
//  fileprivate var _borderColor: Int32? = nil
//  fileprivate var _backgroundColor: Int32? = nil
//  fileprivate var _centerColor: Int32? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_AvatarMeta.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_SidebarInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var sidebarType: LarkNCExtensionPB_Entities_SidebarType {
//    get {return _sidebarType ?? .unknownSidebarType}
//    set {_sidebarType = newValue}
//  }
  /// Returns true if `sidebarType` has been explicitly set.
//  public var hasSidebarType: Bool {return self._sidebarType != nil}
  /// Clears the value of `sidebarType`. Subsequent reads from it will return its default value.
//  public mutating func clearSidebarType() {self._sidebarType = nil}
//
//  public var sidebarIcon: String {
//    get {return _sidebarIcon ?? String()}
//    set {_sidebarIcon = newValue}
//  }
  /// Returns true if `sidebarIcon` has been explicitly set.
//  public var hasSidebarIcon: Bool {return self._sidebarIcon != nil}
  /// Clears the value of `sidebarIcon`. Subsequent reads from it will return its default value.
//  public mutating func clearSidebarIcon() {self._sidebarIcon = nil}
//
//  public var sidebarLink: String {
//    get {return _sidebarLink ?? String()}
//    set {_sidebarLink = newValue}
//  }
  /// Returns true if `sidebarLink` has been explicitly set.
//  public var hasSidebarLink: Bool {return self._sidebarLink != nil}
  /// Clears the value of `sidebarLink`. Subsequent reads from it will return its default value.
//  public mutating func clearSidebarLink() {self._sidebarLink = nil}
//
//  public var sidebarIsshow: Bool {
//    get {return _sidebarIsshow ?? false}
//    set {_sidebarIsshow = newValue}
//  }
  /// Returns true if `sidebarIsshow` has been explicitly set.
//  public var hasSidebarIsshow: Bool {return self._sidebarIsshow != nil}
  /// Clears the value of `sidebarIsshow`. Subsequent reads from it will return its default value.
//  public mutating func clearSidebarIsshow() {self._sidebarIsshow = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _sidebarType: LarkNCExtensionPB_Entities_SidebarType? = nil
//  fileprivate var _sidebarIcon: String? = nil
//  fileprivate var _sidebarLink: String? = nil
//  fileprivate var _sidebarIsshow: Bool? = nil
//}

//public struct LarkNCExtensionPB_Entities_SimpleMember {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var attendeeCalendarID: String {
//    get {return _attendeeCalendarID ?? String()}
//    set {_attendeeCalendarID = newValue}
//  }
  /// Returns true if `attendeeCalendarID` has been explicitly set.
//  public var hasAttendeeCalendarID: Bool {return self._attendeeCalendarID != nil}
  /// Clears the value of `attendeeCalendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearAttendeeCalendarID() {self._attendeeCalendarID = nil}
//
//  public var status: LarkNCExtensionPB_Entities_CalendarEventAttendee.Status {
//    get {return _status ?? .needsAction}
//    set {_status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {self._status = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _attendeeCalendarID: String? = nil
//  fileprivate var _status: LarkNCExtensionPB_Entities_CalendarEventAttendee.Status? = nil
//}

//public struct LarkNCExtensionPB_Entities_SimpleMembers {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var members: [LarkNCExtensionPB_Entities_SimpleMember] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

public struct LarkNCExtensionPB_Entities_EventAttendeeInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 总的参与人个数， 不包含移除的参与人
  public var totalNo: Int32 {
    get {return _storage._totalNo ?? 0}
    set {_uniqueStorage()._totalNo = newValue}
  }
  /// Returns true if `totalNo` has been explicitly set.
//  public var hasTotalNo: Bool {return _storage._totalNo != nil}
  /// Clears the value of `totalNo`. Subsequent reads from it will return its default value.
//  public mutating func clearTotalNo() {_uniqueStorage()._totalNo = nil}

  /// 接受日程的参与人个数
  public var acceptNo: Int32 {
    get {return _storage._acceptNo ?? 0}
    set {_uniqueStorage()._acceptNo = newValue}
  }
  /// Returns true if `acceptNo` has been explicitly set.
//  public var hasAcceptNo: Bool {return _storage._acceptNo != nil}
  /// Clears the value of `acceptNo`. Subsequent reads from it will return its default value.
//  public mutating func clearAcceptNo() {_uniqueStorage()._acceptNo = nil}

  /// 拒接日程的参与人个数
  public var declineNo: Int32 {
    get {return _storage._declineNo ?? 0}
    set {_uniqueStorage()._declineNo = newValue}
  }
  /// Returns true if `declineNo` has been explicitly set.
//  public var hasDeclineNo: Bool {return _storage._declineNo != nil}
  /// Clears the value of `declineNo`. Subsequent reads from it will return its default value.
//  public mutating func clearDeclineNo() {_uniqueStorage()._declineNo = nil}

  /// 待定的参与人个数
  public var tentativeNo: Int32 {
    get {return _storage._tentativeNo ?? 0}
    set {_uniqueStorage()._tentativeNo = newValue}
  }
  /// Returns true if `tentativeNo` has been explicitly set.
//  public var hasTentativeNo: Bool {return _storage._tentativeNo != nil}
  /// Clears the value of `tentativeNo`. Subsequent reads from it will return its default value.
//  public mutating func clearTentativeNo() {_uniqueStorage()._tentativeNo = nil}

  /// 没有回复日程的参与人个数
  public var needActionNo: Int32 {
    get {return _storage._needActionNo ?? 0}
    set {_uniqueStorage()._needActionNo = newValue}
  }
  /// Returns true if `needActionNo` has been explicitly set.
//  public var hasNeedActionNo: Bool {return _storage._needActionNo != nil}
  /// Clears the value of `needActionNo`. Subsequent reads from it will return its default value.
//  public mutating func clearNeedActionNo() {_uniqueStorage()._needActionNo = nil}

  /// 组织者、创建者、继承者等信息
  public var eventCreators: LarkNCExtensionPB_Entities_EventCreators {
    get {return _storage._eventCreators ?? LarkNCExtensionPB_Entities_EventCreators()}
    set {_uniqueStorage()._eventCreators = newValue}
  }
  /// Returns true if `eventCreators` has been explicitly set.
//  public var hasEventCreators: Bool {return _storage._eventCreators != nil}
  /// Clears the value of `eventCreators`. Subsequent reads from it will return its default value.
//  public mutating func clearEventCreators() {_uniqueStorage()._eventCreators = nil}

  /// 日程实体中是否包含全量个人参与人
  public var allIndividualAttendee: Bool {
    get {return _storage._allIndividualAttendee ?? false}
    set {_uniqueStorage()._allIndividualAttendee = newValue}
  }
  /// Returns true if `allIndividualAttendee` has been explicitly set.
//  public var hasAllIndividualAttendee: Bool {return _storage._allIndividualAttendee != nil}
  /// Clears the value of `allIndividualAttendee`. Subsequent reads from it will return its default value.
//  public mutating func clearAllIndividualAttendee() {_uniqueStorage()._allIndividualAttendee = nil}

  /// snapshot模式中使用的pagetoken
  public var snapshotPageToken: String {
    get {return _storage._snapshotPageToken ?? String()}
    set {_uniqueStorage()._snapshotPageToken = newValue}
  }
  /// Returns true if `snapshotPageToken` has been explicitly set.
//  public var hasSnapshotPageToken: Bool {return _storage._snapshotPageToken != nil}
  /// Clears the value of `snapshotPageToken`. Subsequent reads from it will return its default value.
//  public mutating func clearSnapshotPageToken() {_uniqueStorage()._snapshotPageToken = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 日程创建者组织者等信息
/// 当且仅当，组织者/创建者在日程的参与者列表中时，对应字段才会有值。（无论是否为REMOVED）
public struct LarkNCExtensionPB_Entities_EventCreators {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var organizer: LarkNCExtensionPB_Entities_CalendarEventAttendee {
    get {return _storage._organizer ?? LarkNCExtensionPB_Entities_CalendarEventAttendee()}
    set {_uniqueStorage()._organizer = newValue}
  }
  /// Returns true if `organizer` has been explicitly set.
  public var hasOrganizer: Bool {return _storage._organizer != nil}
  /// Clears the value of `organizer`. Subsequent reads from it will return its default value.
//  public mutating func clearOrganizer() {_uniqueStorage()._organizer = nil}

  public var creator: LarkNCExtensionPB_Entities_CalendarEventAttendee {
    get {return _storage._creator ?? LarkNCExtensionPB_Entities_CalendarEventAttendee()}
    set {_uniqueStorage()._creator = newValue}
  }
  /// Returns true if `creator` has been explicitly set.
  public var hasCreator: Bool {return _storage._creator != nil}
  /// Clears the value of `creator`. Subsequent reads from it will return its default value.
//  public mutating func clearCreator() {_uniqueStorage()._creator = nil}

  public var successor: LarkNCExtensionPB_Entities_CalendarEventAttendee {
    get {return _storage._successor ?? LarkNCExtensionPB_Entities_CalendarEventAttendee()}
    set {_uniqueStorage()._successor = newValue}
  }
  /// Returns true if `successor` has been explicitly set.
  public var hasSuccessor: Bool {return _storage._successor != nil}
  /// Clears the value of `successor`. Subsequent reads from it will return its default value.
//  public mutating func clearSuccessor() {_uniqueStorage()._successor = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 参与人的修改
//public struct LarkNCExtensionPB_Entities_AttendeeCommit {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var category: LarkNCExtensionPB_Entities_AttendeeCommit.Category {
//    get {return _storage._category ?? .user}
//    set {_uniqueStorage()._category = newValue}
//  }
  /// Returns true if `category` has been explicitly set.
//  public var hasCategory: Bool {return _storage._category != nil}
  /// Clears the value of `category`. Subsequent reads from it will return its default value.
//  public mutating func clearCategory() {_uniqueStorage()._category = nil}
//
//  public var attendeeCalendarID: String {
//    get {return _storage._attendeeCalendarID ?? "0"}
//    set {_uniqueStorage()._attendeeCalendarID = newValue}
//  }
  /// Returns true if `attendeeCalendarID` has been explicitly set.
//  public var hasAttendeeCalendarID: Bool {return _storage._attendeeCalendarID != nil}
  /// Clears the value of `attendeeCalendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearAttendeeCalendarID() {_uniqueStorage()._attendeeCalendarID = nil}
//
//  public var attendeeSchema: Data {
//    get {return _storage._attendeeSchema ?? LarkHTTP.Internal.emptyData}
//    set {_uniqueStorage()._attendeeSchema = newValue}
//  }
  /// Returns true if `attendeeSchema` has been explicitly set.
//  public var hasAttendeeSchema: Bool {return _storage._attendeeSchema != nil}
  /// Clears the value of `attendeeSchema`. Subsequent reads from it will return its default value.
//  public mutating func clearAttendeeSchema() {_uniqueStorage()._attendeeSchema = nil}
//
//  public var schemaExtraData: Data {
//    get {return _storage._schemaExtraData ?? LarkHTTP.Internal.emptyData}
//    set {_uniqueStorage()._schemaExtraData = newValue}
//  }
  /// Returns true if `schemaExtraData` has been explicitly set.
//  public var hasSchemaExtraData: Bool {return _storage._schemaExtraData != nil}
  /// Clears the value of `schemaExtraData`. Subsequent reads from it will return its default value.
//  public mutating func clearSchemaExtraData() {_uniqueStorage()._schemaExtraData = nil}
//
  /// 客户端传入参与人的状态，后端判断是否应用
//  public var status: LarkNCExtensionPB_Entities_CalendarEventAttendee.Status {
//    get {return _storage._status ?? .needsAction}
//    set {_uniqueStorage()._status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
//  public var dependency: OneOf_Dependency? {
//    get {return _storage._dependency}
//    set {_uniqueStorage()._dependency = newValue}
//  }
//
//  public var user: LarkNCExtensionPB_Entities_AttendeeCommit.User {
//    get {
//      if case .user(let v)? = _storage._dependency {return v}
//      return LarkNCExtensionPB_Entities_AttendeeCommit.User()
//    }
//    set {_uniqueStorage()._dependency = .user(newValue)}
//  }
//
//  public var group: LarkNCExtensionPB_Entities_AttendeeCommit.Group {
//    get {
//      if case .group(let v)? = _storage._dependency {return v}
//      return LarkNCExtensionPB_Entities_AttendeeCommit.Group()
//    }
//    set {_uniqueStorage()._dependency = .group(newValue)}
//  }
//
//  public var resource: LarkNCExtensionPB_Entities_AttendeeCommit.Resource {
//    get {
//      if case .resource(let v)? = _storage._dependency {return v}
//      return LarkNCExtensionPB_Entities_AttendeeCommit.Resource()
//    }
//    set {_uniqueStorage()._dependency = .resource(newValue)}
//  }
//
//  public var thirdPartyUser: LarkNCExtensionPB_Entities_AttendeeCommit.ThirdPartyUser {
//    get {
//      if case .thirdPartyUser(let v)? = _storage._dependency {return v}
//      return LarkNCExtensionPB_Entities_AttendeeCommit.ThirdPartyUser()
//    }
//    set {_uniqueStorage()._dependency = .thirdPartyUser(newValue)}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum OneOf_Dependency: Equatable {
//    case user(LarkNCExtensionPB_Entities_AttendeeCommit.User)
//    case group(LarkNCExtensionPB_Entities_AttendeeCommit.Group)
//    case resource(LarkNCExtensionPB_Entities_AttendeeCommit.Resource)
//    case thirdPartyUser(LarkNCExtensionPB_Entities_AttendeeCommit.ThirdPartyUser)
//
//  #if !swift(>=4.1)
//    public static func ==(lhs: LarkNCExtensionPB_Entities_AttendeeCommit.OneOf_Dependency, rhs: LarkNCExtensionPB_Entities_AttendeeCommit.OneOf_Dependency) -> Bool {
//      switch (lhs, rhs) {
//      case (.user(let l), .user(let r)): return l == r
//      case (.group(let l), .group(let r)): return l == r
//      case (.resource(let l), .resource(let r)): return l == r
//      case (.thirdPartyUser(let l), .thirdPartyUser(let r)): return l == r
//      default: return false
//      }
//    }
//  #endif
//  }
//
//  public enum Category: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case user // = 1
//    case group // = 2
//    case resource // = 3
//    case thirdPartyUser // = 4
//
//    public init() {
//      self = .user
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 1: self = .user
//      case 2: self = .group
//      case 3: self = .resource
//      case 4: self = .thirdPartyUser
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .user: return 1
//      case .group: return 2
//      case .resource: return 3
//      case .thirdPartyUser: return 4
//      }
//    }
//
//  }
//
//  public struct User {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var isOptional: Bool {
//      get {return _isOptional ?? false}
//      set {_isOptional = newValue}
//    }
    /// Returns true if `isOptional` has been explicitly set.
//    public var hasIsOptional: Bool {return self._isOptional != nil}
    /// Clears the value of `isOptional`. Subsequent reads from it will return its default value.
//    public mutating func clearIsOptional() {self._isOptional = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _isOptional: Bool? = nil
//  }
//
//  public struct Group {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 群对应的chat_id
//    public var groupID: String {
//      get {return _groupID ?? String()}
//      set {_groupID = newValue}
//    }
    /// Returns true if `groupID` has been explicitly set.
//    public var hasGroupID: Bool {return self._groupID != nil}
    /// Clears the value of `groupID`. Subsequent reads from it will return its default value.
//    public mutating func clearGroupID() {self._groupID = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _groupID: String? = nil
//  }
//
//  public struct Resource {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//  }
//
//  public struct ThirdPartyUser {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// attendee的email
//    public var email: String {
//      get {return _email ?? String()}
//      set {_email = newValue}
//    }
    /// Returns true if `email` has been explicitly set.
//    public var hasEmail: Bool {return self._email != nil}
    /// Clears the value of `email`. Subsequent reads from it will return its default value.
//    public mutating func clearEmail() {self._email = nil}
//
//    public var isOptional: Bool {
//      get {return _isOptional ?? false}
//      set {_isOptional = newValue}
//    }
    /// Returns true if `isOptional` has been explicitly set.
//    public var hasIsOptional: Bool {return self._isOptional != nil}
    /// Clears the value of `isOptional`. Subsequent reads from it will return its default value.
//    public mutating func clearIsOptional() {self._isOptional = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _email: String? = nil
//    fileprivate var _isOptional: Bool? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_AttendeeCommit.Category: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 所有参与人的修改
//public struct LarkNCExtensionPB_Entities_AttendeeCommits {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var addedAttendees: [LarkNCExtensionPB_Entities_AttendeeCommit] = []
//
//  public var updatedAttendees: [LarkNCExtensionPB_Entities_AttendeeCommit] = []
//
//  public var removedIndividualAttendeeCalendarIds: [String] = []
//
//  public var removedGroupIds: [String] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

/// 同一个日程，所有参与人的修改
//public struct LarkNCExtensionPB_Entities_EventAttendeeCommits {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var calendarID: String {
//    get {return _storage._calendarID ?? String()}
//    set {_uniqueStorage()._calendarID = newValue}
//  }
  /// Returns true if `calendarID` has been explicitly set.
//  public var hasCalendarID: Bool {return _storage._calendarID != nil}
  /// Clears the value of `calendarID`. Subsequent reads from it will return its default value.
//  public mutating func clearCalendarID() {_uniqueStorage()._calendarID = nil}
//
//  public var key: String {
//    get {return _storage._key ?? String()}
//    set {_uniqueStorage()._key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {_uniqueStorage()._key = nil}
//
//  public var originalTime: Int64 {
//    get {return _storage._originalTime ?? 0}
//    set {_uniqueStorage()._originalTime = newValue}
//  }
  /// Returns true if `originalTime` has been explicitly set.
//  public var hasOriginalTime: Bool {return _storage._originalTime != nil}
  /// Clears the value of `originalTime`. Subsequent reads from it will return its default value.
//  public mutating func clearOriginalTime() {_uniqueStorage()._originalTime = nil}
//
//  public var attendeeCommits: LarkNCExtensionPB_Entities_AttendeeCommits {
//    get {return _storage._attendeeCommits ?? LarkNCExtensionPB_Entities_AttendeeCommits()}
//    set {_uniqueStorage()._attendeeCommits = newValue}
//  }
  /// Returns true if `attendeeCommits` has been explicitly set.
//  public var hasAttendeeCommits: Bool {return _storage._attendeeCommits != nil}
  /// Clears the value of `attendeeCommits`. Subsequent reads from it will return its default value.
//  public mutating func clearAttendeeCommits() {_uniqueStorage()._attendeeCommits = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// onboarding/通讯录导入展示的用户信息
//public struct LarkNCExtensionPB_Entities_UserInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 头像
//  public var avatarKey: String {
//    get {return _storage._avatarKey ?? String()}
//    set {_uniqueStorage()._avatarKey = newValue}
//  }
  /// Returns true if `avatarKey` has been explicitly set.
//  public var hasAvatarKey: Bool {return _storage._avatarKey != nil}
  /// Clears the value of `avatarKey`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarKey() {_uniqueStorage()._avatarKey = nil}
//
  /// 名称
//  public var userName: String {
//    get {return _storage._userName ?? String()}
//    set {_uniqueStorage()._userName = newValue}
//  }
  /// Returns true if `userName` has been explicitly set.
//  public var hasUserName: Bool {return _storage._userName != nil}
  /// Clears the value of `userName`. Subsequent reads from it will return its default value.
//  public mutating func clearUserName() {_uniqueStorage()._userName = nil}
//
  /// 名称拼音
//  public var namePy: String {
//    get {return _storage._namePy ?? String()}
//    set {_uniqueStorage()._namePy = newValue}
//  }
  /// Returns true if `namePy` has been explicitly set.
//  public var hasNamePy: Bool {return _storage._namePy != nil}
  /// Clears the value of `namePy`. Subsequent reads from it will return its default value.
//  public mutating func clearNamePy() {_uniqueStorage()._namePy = nil}
//
  /// 租户名称
//  public var tenantName: String {
//    get {return _storage._tenantName ?? String()}
//    set {_uniqueStorage()._tenantName = newValue}
//  }
  /// Returns true if `tenantName` has been explicitly set.
//  public var hasTenantName: Bool {return _storage._tenantName != nil}
  /// Clears the value of `tenantName`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantName() {_uniqueStorage()._tenantName = nil}
//
  /// 最近7天在线总时长，单位分钟
//  public var lastSevenDayOnlineMinutes: Int32 {
//    get {return _storage._lastSevenDayOnlineMinutes ?? 0}
//    set {_uniqueStorage()._lastSevenDayOnlineMinutes = newValue}
//  }
  /// Returns true if `lastSevenDayOnlineMinutes` has been explicitly set.
//  public var hasLastSevenDayOnlineMinutes: Bool {return _storage._lastSevenDayOnlineMinutes != nil}
  /// Clears the value of `lastSevenDayOnlineMinutes`. Subsequent reads from it will return its default value.
//  public mutating func clearLastSevenDayOnlineMinutes() {_uniqueStorage()._lastSevenDayOnlineMinutes = nil}
//
  /// user id
//  public var userID: String {
//    get {return _storage._userID ?? String()}
//    set {_uniqueStorage()._userID = newValue}
//  }
  /// Returns true if `userID` has been explicitly set.
//  public var hasUserID: Bool {return _storage._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
//  public mutating func clearUserID() {_uniqueStorage()._userID = nil}
//
  /// tenant id
//  public var tenantID: String {
//    get {return _storage._tenantID ?? String()}
//    set {_uniqueStorage()._tenantID = newValue}
//  }
  /// Returns true if `tenantID` has been explicitly set.
//  public var hasTenantID: Bool {return _storage._tenantID != nil}
  /// Clears the value of `tenantID`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantID() {_uniqueStorage()._tenantID = nil}
//
  /// 别名
//  public var alias: String {
//    get {return _storage._alias ?? String()}
//    set {_uniqueStorage()._alias = newValue}
//  }
  /// Returns true if `alias` has been explicitly set.
//  public var hasAlias: Bool {return _storage._alias != nil}
  /// Clears the value of `alias`. Subsequent reads from it will return its default value.
//  public mutating func clearAlias() {_uniqueStorage()._alias = nil}
//
  /// 签名状态
//  public var description_p: String {
//    get {return _storage._description_p ?? String()}
//    set {_uniqueStorage()._description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}
//
  /// user 状态
//  public var status: Int32 {
//    get {return _storage._status ?? 0}
//    set {_uniqueStorage()._status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
  /// 是否允许被搜索的状态
//  public var searchEnable: Bool {
//    get {return _storage._searchEnable ?? false}
//    set {_uniqueStorage()._searchEnable = newValue}
//  }
  /// Returns true if `searchEnable` has been explicitly set.
//  public var hasSearchEnable: Bool {return _storage._searchEnable != nil}
  /// Clears the value of `searchEnable`. Subsequent reads from it will return its default value.
//  public mutating func clearSearchEnable() {_uniqueStorage()._searchEnable = nil}
//
  /// 新版用户头像
//  public var avatarImage: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatarImage ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatarImage = newValue}
//  }
  /// Returns true if `avatarImage` has been explicitly set.
//  public var hasAvatarImage: Bool {return _storage._avatarImage != nil}
  /// Clears the value of `avatarImage`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarImage() {_uniqueStorage()._avatarImage = nil}
//
  ///最近一次同意联系人申请的时间戳
//  public var agreeTime: Int64 {
//    get {return _storage._agreeTime ?? 0}
//    set {_uniqueStorage()._agreeTime = newValue}
//  }
  /// Returns true if `agreeTime` has been explicitly set.
//  public var hasAgreeTime: Bool {return _storage._agreeTime != nil}
  /// Clears the value of `agreeTime`. Subsequent reads from it will return its default value.
//  public mutating func clearAgreeTime() {_uniqueStorage()._agreeTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_ContactInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var userInfo: LarkNCExtensionPB_Entities_UserInfo {
//    get {return _storage._userInfo ?? LarkNCExtensionPB_Entities_UserInfo()}
//    set {_uniqueStorage()._userInfo = newValue}
//  }
  /// Returns true if `userInfo` has been explicitly set.
//  public var hasUserInfo: Bool {return _storage._userInfo != nil}
  /// Clears the value of `userInfo`. Subsequent reads from it will return its default value.
//  public mutating func clearUserInfo() {_uniqueStorage()._userInfo = nil}
//
//  public var op: LarkNCExtensionPB_Entities_ContactOperation {
//    get {return _storage._op ?? .operationUnknown}
//    set {_uniqueStorage()._op = newValue}
//  }
  /// Returns true if `op` has been explicitly set.
//  public var hasOp: Bool {return _storage._op != nil}
  /// Clears the value of `op`. Subsequent reads from it will return its default value.
//  public mutating func clearOp() {_uniqueStorage()._op = nil}
//
//  public var chatter: LarkNCExtensionPB_Entities_Chatter {
//    get {return _storage._chatter ?? LarkNCExtensionPB_Entities_Chatter()}
//    set {_uniqueStorage()._chatter = newValue}
//  }
  /// Returns true if `chatter` has been explicitly set.
//  public var hasChatter: Bool {return _storage._chatter != nil}
  /// Clears the value of `chatter`. Subsequent reads from it will return its default value.
//  public mutating func clearChatter() {_uniqueStorage()._chatter = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

/// 会议室过滤器
//public struct LarkNCExtensionPB_Entities_MeetingRoomFilter {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 最小容量
//  public var minCapacity: Int32 {
//    get {return _minCapacity ?? 0}
//    set {_minCapacity = newValue}
//  }
  /// Returns true if `minCapacity` has been explicitly set.
//  public var hasMinCapacity: Bool {return self._minCapacity != nil}
  /// Clears the value of `minCapacity`. Subsequent reads from it will return its default value.
//  public mutating func clearMinCapacity() {self._minCapacity = nil}
//
  /// 需要设备
//  public var needEquipments: [String] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _minCapacity: Int32? = nil
//}

/// 会议室楼层过滤器
//public struct LarkNCExtensionPB_Entities_MeetingRoomFloorFilter {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var buildingID: String {
//    get {return _buildingID ?? String()}
//    set {_buildingID = newValue}
//  }
  /// Returns true if `buildingID` has been explicitly set.
//  public var hasBuildingID: Bool {return self._buildingID != nil}
  /// Clears the value of `buildingID`. Subsequent reads from it will return its default value.
//  public mutating func clearBuildingID() {self._buildingID = nil}
//
  ///为空返回所有会议室
//  public var neededFloors: [String] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _buildingID: String? = nil
//}

/// 获取会议室设备
//public struct LarkNCExtensionPB_Entities_Equipment {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var defaultName: String {
//    get {return _defaultName ?? String()}
//    set {_defaultName = newValue}
//  }
  /// Returns true if `defaultName` has been explicitly set.
//  public var hasDefaultName: Bool {return self._defaultName != nil}
  /// Clears the value of `defaultName`. Subsequent reads from it will return its default value.
//  public mutating func clearDefaultName() {self._defaultName = nil}
//
//  public var i18NName: Dictionary<String,String> = [:]
//
  /// 设备类别
//  public var equipmentType: String {
//    get {return _equipmentType ?? String()}
//    set {_equipmentType = newValue}
//  }
  /// Returns true if `equipmentType` has been explicitly set.
//  public var hasEquipmentType: Bool {return self._equipmentType != nil}
  /// Clears the value of `equipmentType`. Subsequent reads from it will return its default value.
//  public mutating func clearEquipmentType() {self._equipmentType = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _defaultName: String? = nil
//  fileprivate var _equipmentType: String? = nil
//}

///User 纬度用户通用设置实体
//public struct LarkNCExtensionPB_Entities_UniversalUserSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var key: String {
//    get {return _key ?? String()}
//    set {_key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {self._key = nil}
//
  ///是否为用户默认设置字段
  ///req：is_default = true，恢复用户默认设置， is_default = false，设置value
  ///resp：is_default = true，默认设置，is_default = false，返回value
//  public var isDefault: Bool {
//    get {return _isDefault ?? false}
//    set {_isDefault = newValue}
//  }
  /// Returns true if `isDefault` has been explicitly set.
//  public var hasIsDefault: Bool {return self._isDefault != nil}
  /// Clears the value of `isDefault`. Subsequent reads from it will return its default value.
//  public mutating func clearIsDefault() {self._isDefault = nil}
//
//  public var value: LarkNCExtensionPB_Entities_UniversalUserSetting.OneOf_Value? = nil
//
  /// eg: 0, 1, 3, ... int类型表示用户某种状态
//  public var intValue: Int64 {
//    get {
//      if case .intValue(let v)? = value {return v}
//      return 0
//    }
//    set {value = .intValue(newValue)}
//  }
//
  /// eg: yes, no ...  string类型表示用户某种状态
//  public var strValue: String {
//    get {
//      if case .strValue(let v)? = value {return v}
//      return String()
//    }
//    set {value = .strValue(newValue)}
//  }
//
  /// false, true  表示用户2种状态
//  public var boolValue: Bool {
//    get {
//      if case .boolValue(let v)? = value {return v}
//      return false
//    }
//    set {value = .boolValue(newValue)}
//  }
//
  ///request 不需要传。response 设置更新时间戳
//  public var updateTime: Int64 {
//    get {return _updateTime ?? 0}
//    set {_updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {self._updateTime = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum OneOf_Value: Equatable {
    /// eg: 0, 1, 3, ... int类型表示用户某种状态
//    case intValue(Int64)
    /// eg: yes, no ...  string类型表示用户某种状态
//    case strValue(String)
    /// false, true  表示用户2种状态
//    case boolValue(Bool)
//
//  #if !swift(>=4.1)
//    public static func ==(lhs: LarkNCExtensionPB_Entities_UniversalUserSetting.OneOf_Value, rhs: LarkNCExtensionPB_Entities_UniversalUserSetting.OneOf_Value) -> Bool {
//      switch (lhs, rhs) {
//      case (.intValue(let l), .intValue(let r)): return l == r
//      case (.strValue(let l), .strValue(let r)): return l == r
//      case (.boolValue(let l), .boolValue(let r)): return l == r
//      default: return false
//      }
//    }
//  #endif
//  }
//
//  public init() {}
//
//  fileprivate var _key: String? = nil
//  fileprivate var _isDefault: Bool? = nil
//  fileprivate var _updateTime: Int64? = nil
//}

///User 纬度用户通用设置实体V2
//public struct LarkNCExtensionPB_Entities_GeneralUserSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var key: LarkNCExtensionPB_Entities_GeneralUserSetting.Key {
//    get {return _key ?? .unknown}
//    set {_key = newValue}
//  }
  /// Returns true if `key` has been explicitly set.
//  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
//  public mutating func clearKey() {self._key = nil}
//
  ///request 不需要传。response 返回更新时间戳
//  public var updateTime: Int64 {
//    get {return _updateTime ?? 0}
//    set {_updateTime = newValue}
//  }
  /// Returns true if `updateTime` has been explicitly set.
//  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
//  public mutating func clearUpdateTime() {self._updateTime = nil}
//
//  public var value: LarkNCExtensionPB_Entities_GeneralUserSetting.OneOf_Value? = nil
//
  /// 整数可转成str类型
//  public var strValue: String {
//    get {
//      if case .strValue(let v)? = value {return v}
//      return String()
//    }
//    set {value = .strValue(newValue)}
//  }
//
  /// false, true  bool适用开关设置
//  public var boolValue: Bool {
//    get {
//      if case .boolValue(let v)? = value {return v}
//      return false
//    }
//    set {value = .boolValue(newValue)}
//  }
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum OneOf_Value: Equatable {
    /// 整数可转成str类型
//    case strValue(String)
    /// false, true  bool适用开关设置
//    case boolValue(Bool)
//
//  #if !swift(>=4.1)
//    public static func ==(lhs: LarkNCExtensionPB_Entities_GeneralUserSetting.OneOf_Value, rhs: LarkNCExtensionPB_Entities_GeneralUserSetting.OneOf_Value) -> Bool {
//      switch (lhs, rhs) {
//      case (.strValue(let l), .strValue(let r)): return l == r
//      case (.boolValue(let l), .boolValue(let r)): return l == r
//      default: return false
//      }
//    }
//  #endif
//  }
//
  ///需要标注类型和默认值，server侧代码实现默认值，可灵活修改默认值
//  public enum Key: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//
    ///bool，默认false
//    case externalDisplayTimezoneSetting // = 1
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .externalDisplayTimezoneSetting
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .externalDisplayTimezoneSetting: return 1
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _key: LarkNCExtensionPB_Entities_GeneralUserSetting.Key? = nil
//  fileprivate var _updateTime: Int64? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_GeneralUserSetting.Key: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 订阅号 feed 实体
//public struct LarkNCExtensionPB_Entities_SubscriptionFeed {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var id: Int64 {
//    get {return _storage._id ?? 0}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
  /// 订阅号名称,国际化
//  public var name: Dictionary<String,String> {
//    get {return _storage._name}
//    set {_uniqueStorage()._name = newValue}
//  }
//
  /// 头像,已废弃
//  public var avatar: String {
//    get {return _storage._avatar ?? String()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
  /// 摘要内容国际化
//  public var summary: Dictionary<String,String> {
//    get {return _storage._summary}
//    set {_uniqueStorage()._summary = newValue}
//  }
//
//  public var isNotify: Bool {
//    get {return _storage._isNotify ?? false}
//    set {_uniqueStorage()._isNotify = newValue}
//  }
  /// Returns true if `isNotify` has been explicitly set.
//  public var hasIsNotify: Bool {return _storage._isNotify != nil}
  /// Clears the value of `isNotify`. Subsequent reads from it will return its default value.
//  public mutating func clearIsNotify() {_uniqueStorage()._isNotify = nil}
//
  /// 未读badge
//  public var badge: Int32 {
//    get {return _storage._badge ?? 0}
//    set {_uniqueStorage()._badge = newValue}
//  }
  /// Returns true if `badge` has been explicitly set.
//  public var hasBadge: Bool {return _storage._badge != nil}
  /// Clears the value of `badge`. Subsequent reads from it will return its default value.
//  public mutating func clearBadge() {_uniqueStorage()._badge = nil}
//
//  public var schema: Dictionary<String,String> {
//    get {return _storage._schema}
//    set {_uniqueStorage()._schema = newValue}
//  }
//
  /// 透传业务字段
//  public var body: String {
//    get {return _storage._body ?? String()}
//    set {_uniqueStorage()._body = newValue}
//  }
  /// Returns true if `body` has been explicitly set.
//  public var hasBody: Bool {return _storage._body != nil}
  /// Clears the value of `body`. Subsequent reads from it will return its default value.
//  public mutating func clearBody() {_uniqueStorage()._body = nil}
//
  /// 展示用时间戳; 单位毫秒
//  public var displayTime: Int64 {
//    get {return _storage._displayTime ?? 0}
//    set {_uniqueStorage()._displayTime = newValue}
//  }
  /// Returns true if `displayTime` has been explicitly set.
//  public var hasDisplayTime: Bool {return _storage._displayTime != nil}
  /// Clears the value of `displayTime`. Subsequent reads from it will return its default value.
//  public mutating func clearDisplayTime() {_uniqueStorage()._displayTime = nil}
//
//  public var version: Int64 {
//    get {return _storage._version ?? 0}
//    set {_uniqueStorage()._version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {_uniqueStorage()._version = nil}
//
  /// 头像
//  public var avatarImage: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatarImage ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatarImage = newValue}
//  }
  /// Returns true if `avatarImage` has been explicitly set.
//  public var hasAvatarImage: Bool {return _storage._avatarImage != nil}
  /// Clears the value of `avatarImage`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatarImage() {_uniqueStorage()._avatarImage = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 缺失的 message_id
//  public var messageID: String {
//    get {return _messageID ?? String()}
//    set {_messageID = newValue}
//  }
  /// Returns true if `messageID` has been explicitly set.
//  public var hasMessageID: Bool {return self._messageID != nil}
  /// Clears the value of `messageID`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageID() {self._messageID = nil}
//
  /// 缺失的设备信息，为增量信息, userID -> deviceIDinfo
//  public var cryptoDeviceInfo: Dictionary<String,LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo.CryptoDeviceInfo> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public struct CryptoDeviceInfo {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var deviceInfo: [LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo.CryptoDeviceInfo.DeviceInfo] = []
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public struct DeviceInfo {
      // LarkHTTP.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the LarkHTTP library for
      // methods supported on all messages.
//
      /// 设备ID
//      public var deviceID: String {
//        get {return _deviceID ?? String()}
//        set {_deviceID = newValue}
//      }
      /// Returns true if `deviceID` has been explicitly set.
//      public var hasDeviceID: Bool {return self._deviceID != nil}
      /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
//      public mutating func clearDeviceID() {self._deviceID = nil}
//
      /// 创建时间
//      public var createTime: Int64 {
//        get {return _createTime ?? 0}
//        set {_createTime = newValue}
//      }
      /// Returns true if `createTime` has been explicitly set.
//      public var hasCreateTime: Bool {return self._createTime != nil}
      /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//      public mutating func clearCreateTime() {self._createTime = nil}
//
      /// 公钥
//      public var publicKey: Data {
//        get {return _publicKey ?? LarkHTTP.Internal.emptyData}
//        set {_publicKey = newValue}
//      }
      /// Returns true if `publicKey` has been explicitly set.
//      public var hasPublicKey: Bool {return self._publicKey != nil}
      /// Clears the value of `publicKey`. Subsequent reads from it will return its default value.
//      public mutating func clearPublicKey() {self._publicKey = nil}
//
//      public var unknownFields = LarkHTTP.UnknownStorage()
//
//      public init() {}
//
//      fileprivate var _deviceID: String? = nil
//      fileprivate var _createTime: Int64? = nil
//      fileprivate var _publicKey: Data? = nil
//    }
//
//    public init() {}
//  }
//
//  public init() {}
//
//  fileprivate var _messageID: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_CryptoMessageFallbackUserContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// DeviceID -> Content
//  public var contents: Dictionary<String,LarkNCExtensionPB_Entities_CryptoMessageFallbackUserContent.FallbackContent> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public struct FallbackContent {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 加密后内容
//    public var content: Data {
//      get {return _content ?? LarkHTTP.Internal.emptyData}
//      set {_content = newValue}
//    }
    /// Returns true if `content` has been explicitly set.
//    public var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
//    public mutating func clearContent() {self._content = nil}
//
    /// 加密随机数
//    public var nonce: Data {
//      get {return _nonce ?? LarkHTTP.Internal.emptyData}
//      set {_nonce = newValue}
//    }
    /// Returns true if `nonce` has been explicitly set.
//    public var hasNonce: Bool {return self._nonce != nil}
    /// Clears the value of `nonce`. Subsequent reads from it will return its default value.
//    public mutating func clearNonce() {self._nonce = nil}
//
    /// 额外补偿数据
//    public var additionalData: Data {
//      get {return _additionalData ?? LarkHTTP.Internal.emptyData}
//      set {_additionalData = newValue}
//    }
    /// Returns true if `additionalData` has been explicitly set.
//    public var hasAdditionalData: Bool {return self._additionalData != nil}
    /// Clears the value of `additionalData`. Subsequent reads from it will return its default value.
//    public mutating func clearAdditionalData() {self._additionalData = nil}
//
    /// 加密消息使用设备的公钥
//    public var publicKey: Data {
//      get {return _publicKey ?? LarkHTTP.Internal.emptyData}
//      set {_publicKey = newValue}
//    }
    /// Returns true if `publicKey` has been explicitly set.
//    public var hasPublicKey: Bool {return self._publicKey != nil}
    /// Clears the value of `publicKey`. Subsequent reads from it will return its default value.
//    public mutating func clearPublicKey() {self._publicKey = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _content: Data? = nil
//    fileprivate var _nonce: Data? = nil
//    fileprivate var _additionalData: Data? = nil
//    fileprivate var _publicKey: Data? = nil
//  }
//
//  public init() {}
//}

/// 团队实体
//public struct LarkNCExtensionPB_Entities_Team {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 团队ID
//  public var id: Int64 {
//    get {return _storage._id ?? 0}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
  /// 团队默认名称
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
  /// 团队状态
//  public var status: LarkNCExtensionPB_Entities_TeamStatus {
//    get {return _storage._status ?? .unknown}
//    set {_uniqueStorage()._status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
  /// 团队负责人
//  public var ownerID: Int64 {
//    get {return _storage._ownerID ?? 0}
//    set {_uniqueStorage()._ownerID = newValue}
//  }
  /// Returns true if `ownerID` has been explicitly set.
//  public var hasOwnerID: Bool {return _storage._ownerID != nil}
  /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
//  public mutating func clearOwnerID() {_uniqueStorage()._ownerID = nil}
//
  /// 团队成员数量
//  public var memberCount: Int32 {
//    get {return _storage._memberCount ?? 0}
//    set {_uniqueStorage()._memberCount = newValue}
//  }
  /// Returns true if `memberCount` has been explicitly set.
//  public var hasMemberCount: Bool {return _storage._memberCount != nil}
  /// Clears the value of `memberCount`. Subsequent reads from it will return its default value.
//  public mutating func clearMemberCount() {_uniqueStorage()._memberCount = nil}
//
  /// 团队默认群id
//  public var defaultChatID: Int64 {
//    get {return _storage._defaultChatID ?? 0}
//    set {_uniqueStorage()._defaultChatID = newValue}
//  }
  /// Returns true if `defaultChatID` has been explicitly set.
//  public var hasDefaultChatID: Bool {return _storage._defaultChatID != nil}
  /// Clears the value of `defaultChatID`. Subsequent reads from it will return its default value.
//  public mutating func clearDefaultChatID() {_uniqueStorage()._defaultChatID = nil}
//
  ///描述
//  public var description_p: String {
//    get {return _storage._description_p ?? String()}
//    set {_uniqueStorage()._description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}
//
  ///头像
//  public var avatar: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatar ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
  /// 团队创建时间
//  public var createTime: Int64 {
//    get {return _storage._createTime ?? 0}
//    set {_uniqueStorage()._createTime = newValue}
//  }
  /// Returns true if `createTime` has been explicitly set.
//  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}
//
  /// 版本
//  public var version: Int64 {
//    get {return _storage._version ?? 0}
//    set {_uniqueStorage()._version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {_uniqueStorage()._version = nil}
//
  /// 团队设置
//  public var setting: LarkNCExtensionPB_Entities_TeamSetting {
//    get {return _storage._setting ?? LarkNCExtensionPB_Entities_TeamSetting()}
//    set {_uniqueStorage()._setting = newValue}
//  }
  /// Returns true if `setting` has been explicitly set.
//  public var hasSetting: Bool {return _storage._setting != nil}
  /// Clears the value of `setting`. Subsequent reads from it will return its default value.
//  public mutating func clearSetting() {_uniqueStorage()._setting = nil}
//
  /// 团队用户属性（per user）
//  public var userEntity: LarkNCExtensionPB_Entities_TeamUserEntity {
//    get {return _storage._userEntity ?? LarkNCExtensionPB_Entities_TeamUserEntity()}
//    set {_uniqueStorage()._userEntity = newValue}
//  }
  /// Returns true if `userEntity` has been explicitly set.
//  public var hasUserEntity: Bool {return _storage._userEntity != nil}
  /// Clears the value of `userEntity`. Subsequent reads from it will return its default value.
//  public mutating func clearUserEntity() {_uniqueStorage()._userEntity = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

///团队基础信息
//public struct LarkNCExtensionPB_Entities_TeamBaseInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 团队默认名称
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
  /// 团队状态
//  public var status: LarkNCExtensionPB_Entities_TeamStatus {
//    get {return _storage._status ?? .unknown}
//    set {_uniqueStorage()._status = newValue}
//  }
  /// Returns true if `status` has been explicitly set.
//  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
//  public mutating func clearStatus() {_uniqueStorage()._status = nil}
//
  /// 团队负责人
//  public var ownerID: Int64 {
//    get {return _storage._ownerID ?? 0}
//    set {_uniqueStorage()._ownerID = newValue}
//  }
  /// Returns true if `ownerID` has been explicitly set.
//  public var hasOwnerID: Bool {return _storage._ownerID != nil}
  /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
//  public mutating func clearOwnerID() {_uniqueStorage()._ownerID = nil}
//
  /// 团队成员数量
//  public var memberCount: Int32 {
//    get {return _storage._memberCount ?? 0}
//    set {_uniqueStorage()._memberCount = newValue}
//  }
  /// Returns true if `memberCount` has been explicitly set.
//  public var hasMemberCount: Bool {return _storage._memberCount != nil}
  /// Clears the value of `memberCount`. Subsequent reads from it will return its default value.
//  public mutating func clearMemberCount() {_uniqueStorage()._memberCount = nil}
//
  /// 团队默认群id
//  public var defaultChatID: Int64 {
//    get {return _storage._defaultChatID ?? 0}
//    set {_uniqueStorage()._defaultChatID = newValue}
//  }
  /// Returns true if `defaultChatID` has been explicitly set.
//  public var hasDefaultChatID: Bool {return _storage._defaultChatID != nil}
  /// Clears the value of `defaultChatID`. Subsequent reads from it will return its default value.
//  public mutating func clearDefaultChatID() {_uniqueStorage()._defaultChatID = nil}
//
  ///描述
//  public var description_p: String {
//    get {return _storage._description_p ?? String()}
//    set {_uniqueStorage()._description_p = newValue}
//  }
  /// Returns true if `description_p` has been explicitly set.
//  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
//  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}
//
  ///头像
//  public var avatar: LarkNCExtensionPB_Entities_Image {
//    get {return _storage._avatar ?? LarkNCExtensionPB_Entities_Image()}
//    set {_uniqueStorage()._avatar = newValue}
//  }
  /// Returns true if `avatar` has been explicitly set.
//  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
//  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

///团队成员角色实体
//public struct LarkNCExtensionPB_Entities_TeamRole {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  ///角色类型
//  public var roleType: LarkNCExtensionPB_Entities_TeamRole.RoleType {
//    get {return _roleType ?? .unknown}
//    set {_roleType = newValue}
//  }
  /// Returns true if `roleType` has been explicitly set.
//  public var hasRoleType: Bool {return self._roleType != nil}
  /// Clears the value of `roleType`. Subsequent reads from it will return its default value.
//  public mutating func clearRoleType() {self._roleType = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum RoleType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//
    /// 团队所有者
//    case owner // = 1
//
    /// 团队管理员
//    case admin // = 2
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .owner
//      case 2: self = .admin
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .owner: return 1
//      case .admin: return 2
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _roleType: LarkNCExtensionPB_Entities_TeamRole.RoleType? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_TeamRole.RoleType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 用户在团队中的属性
//public struct LarkNCExtensionPB_Entities_TeamUserEntity {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 团队成员角色
//  public var userRole: LarkNCExtensionPB_Entities_TeamUserEntity.Role {
//    get {return _userRole ?? .unknown}
//    set {_userRole = newValue}
//  }
  /// Returns true if `userRole` has been explicitly set.
//  public var hasUserRole: Bool {return self._userRole != nil}
  /// Clears the value of `userRole`. Subsequent reads from it will return its default value.
//  public mutating func clearUserRole() {self._userRole = nil}
//
  /// 有序的
//  public var userRoles: [LarkNCExtensionPB_Entities_TeamRole] = []
//
  ///TeamUserEntity版本
//  public var version: Int64 {
//    get {return _version ?? 0}
//    set {_version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {self._version = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum Role: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//
    /// 团队成员
//    case member // = 1
//
    /// 团队负责人
//    case owner // = 2
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .member
//      case 2: self = .owner
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .member: return 1
//      case .owner: return 2
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _userRole: LarkNCExtensionPB_Entities_TeamUserEntity.Role? = nil
//  fileprivate var _version: Int64? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_TeamUserEntity.Role: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 团队设置
//public struct LarkNCExtensionPB_Entities_TeamSetting {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 团队添加成员设置   5.4版本废弃
//  public var addMemberPermission: LarkNCExtensionPB_Entities_TeamSetting.AddMemberPermissionEnum {
//    get {return _addMemberPermission ?? .addMemberPermissionUnknown}
//    set {_addMemberPermission = newValue}
//  }
  /// Returns true if `addMemberPermission` has been explicitly set.
//  public var hasAddMemberPermission: Bool {return self._addMemberPermission != nil}
  /// Clears the value of `addMemberPermission`. Subsequent reads from it will return its default value.
//  public mutating func clearAddMemberPermission() {self._addMemberPermission = nil}
//
  /// 团队创建群聊设置   5.4版本废弃
//  public var createTeamChatPermission: LarkNCExtensionPB_Entities_TeamSetting.CreateTeamChatPermissionEnum {
//    get {return _createTeamChatPermission ?? .createTeamChatPermissionUnknown}
//    set {_createTeamChatPermission = newValue}
//  }
  /// Returns true if `createTeamChatPermission` has been explicitly set.
//  public var hasCreateTeamChatPermission: Bool {return self._createTeamChatPermission != nil}
  /// Clears the value of `createTeamChatPermission`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTeamChatPermission() {self._createTeamChatPermission = nil}
//
  /// 团队绑定群聊设置   5.4版本废弃
//  public var bindTeamChatPermission: LarkNCExtensionPB_Entities_TeamSetting.BindTeamChatPermissionEnum {
//    get {return _bindTeamChatPermission ?? .bindTeamChatPermissionUnknown}
//    set {_bindTeamChatPermission = newValue}
//  }
  /// Returns true if `bindTeamChatPermission` has been explicitly set.
//  public var hasBindTeamChatPermission: Bool {return self._bindTeamChatPermission != nil}
  /// Clears the value of `bindTeamChatPermission`. Subsequent reads from it will return its default value.
//  public mutating func clearBindTeamChatPermission() {self._bindTeamChatPermission = nil}
//
  /// 团队添加群聊设置
//  public var addTeamChatPermission: LarkNCExtensionPB_Entities_TeamSetting.AddTeamChatPermissionEnum {
//    get {return _addTeamChatPermission ?? .addTeamChatPermissionUnknown}
//    set {_addTeamChatPermission = newValue}
//  }
  /// Returns true if `addTeamChatPermission` has been explicitly set.
//  public var hasAddTeamChatPermission: Bool {return self._addTeamChatPermission != nil}
  /// Clears the value of `addTeamChatPermission`. Subsequent reads from it will return its default value.
//  public mutating func clearAddTeamChatPermission() {self._addTeamChatPermission = nil}
//
  /// 团队添加私有群设置
//  public var addPrivateTeamChatPermission: LarkNCExtensionPB_Entities_TeamSetting.AddPrivateTeamChatPermissionEnum {
//    get {return _addPrivateTeamChatPermission ?? .addPrivateTeamChatUnknown}
//    set {_addPrivateTeamChatPermission = newValue}
//  }
  /// Returns true if `addPrivateTeamChatPermission` has been explicitly set.
//  public var hasAddPrivateTeamChatPermission: Bool {return self._addPrivateTeamChatPermission != nil}
  /// Clears the value of `addPrivateTeamChatPermission`. Subsequent reads from it will return its default value.
//  public mutating func clearAddPrivateTeamChatPermission() {self._addPrivateTeamChatPermission = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum AddMemberPermissionEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case addMemberPermissionUnknown // = 0
//
    /// 全部成员可添加团队成员
//    case addMemberPermissionAllMembers // = 1
//
    /// 仅团队负责人可添加团队成员
//    case addMemberPermissionOnlyOwner // = 2
//
//    public init() {
//      self = .addMemberPermissionUnknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .addMemberPermissionUnknown
//      case 1: self = .addMemberPermissionAllMembers
//      case 2: self = .addMemberPermissionOnlyOwner
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .addMemberPermissionUnknown: return 0
//      case .addMemberPermissionAllMembers: return 1
//      case .addMemberPermissionOnlyOwner: return 2
//      }
//    }
//
//  }
//
//  public enum CreateTeamChatPermissionEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case createTeamChatPermissionUnknown // = 0
//
    /// 全部成员可创建团队群聊
//    case createTeamChatPermissionAllMembers // = 1
//
    /// 仅团队负责人可添加团队群聊
//    case createTeamChatPermissionOnlyOwner // = 2
//
//    public init() {
//      self = .createTeamChatPermissionUnknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .createTeamChatPermissionUnknown
//      case 1: self = .createTeamChatPermissionAllMembers
//      case 2: self = .createTeamChatPermissionOnlyOwner
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .createTeamChatPermissionUnknown: return 0
//      case .createTeamChatPermissionAllMembers: return 1
//      case .createTeamChatPermissionOnlyOwner: return 2
//      }
//    }
//
//  }
//
//  public enum BindTeamChatPermissionEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case bindTeamChatPermissionUnknown // = 0
//
    /// 全部成员可绑定团队群聊
//    case bindTeamChatPermissionAllMembers // = 1
//
    /// 仅团队负责人绑定团队群聊
//    case bindTeamChatPermissionOnlyOwner // = 2
//
//    public init() {
//      self = .bindTeamChatPermissionUnknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .bindTeamChatPermissionUnknown
//      case 1: self = .bindTeamChatPermissionAllMembers
//      case 2: self = .bindTeamChatPermissionOnlyOwner
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .bindTeamChatPermissionUnknown: return 0
//      case .bindTeamChatPermissionAllMembers: return 1
//      case .bindTeamChatPermissionOnlyOwner: return 2
//      }
//    }
//
//  }
//
//  public enum AddTeamChatPermissionEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case addTeamChatPermissionUnknown // = 0
//
    /// 全部成员可添加团队群聊
//    case addTeamChatPermissionAllMembers // = 1
//
    /// 仅团队管理者可添加团队群聊
//    case addTeamChatPermissionOnlyManager // = 2
//
//    public init() {
//      self = .addTeamChatPermissionUnknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .addTeamChatPermissionUnknown
//      case 1: self = .addTeamChatPermissionAllMembers
//      case 2: self = .addTeamChatPermissionOnlyManager
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .addTeamChatPermissionUnknown: return 0
//      case .addTeamChatPermissionAllMembers: return 1
//      case .addTeamChatPermissionOnlyManager: return 2
//      }
//    }
//
//  }
//
//  public enum AddPrivateTeamChatPermissionEnum: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case addPrivateTeamChatUnknown // = 0
//
    /// 全部成员可添加私有群
//    case addPrivateTeamChatAllMembers // = 1
//
    /// 仅团队管理者可添加私有群
//    case addPrivateTeamChatOnlyManager // = 2
//
//    public init() {
//      self = .addPrivateTeamChatUnknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .addPrivateTeamChatUnknown
//      case 1: self = .addPrivateTeamChatAllMembers
//      case 2: self = .addPrivateTeamChatOnlyManager
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .addPrivateTeamChatUnknown: return 0
//      case .addPrivateTeamChatAllMembers: return 1
//      case .addPrivateTeamChatOnlyManager: return 2
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _addMemberPermission: LarkNCExtensionPB_Entities_TeamSetting.AddMemberPermissionEnum? = nil
//  fileprivate var _createTeamChatPermission: LarkNCExtensionPB_Entities_TeamSetting.CreateTeamChatPermissionEnum? = nil
//  fileprivate var _bindTeamChatPermission: LarkNCExtensionPB_Entities_TeamSetting.BindTeamChatPermissionEnum? = nil
//  fileprivate var _addTeamChatPermission: LarkNCExtensionPB_Entities_TeamSetting.AddTeamChatPermissionEnum? = nil
//  fileprivate var _addPrivateTeamChatPermission: LarkNCExtensionPB_Entities_TeamSetting.AddPrivateTeamChatPermissionEnum? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_TeamSetting.AddMemberPermissionEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_TeamSetting.CreateTeamChatPermissionEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_TeamSetting.BindTeamChatPermissionEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_TeamSetting.AddTeamChatPermissionEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

//extension LarkNCExtensionPB_Entities_TeamSetting.AddPrivateTeamChatPermissionEnum: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 团队成员meta信息
//public struct LarkNCExtensionPB_Entities_TeamMemberMeta {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 角色信息：有序的
//  public var userRoles: [LarkNCExtensionPB_Entities_TeamRole] = []
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

///Item实体
//public struct LarkNCExtensionPB_Entities_Item {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// ItemID
//  public var id: Int64 {
//    get {return _id ?? 0}
//    set {_id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}
//
  /// 对应实体ID
//  public var entityID: String {
//    get {return _entityID ?? String()}
//    set {_entityID = newValue}
//  }
  /// Returns true if `entityID` has been explicitly set.
//  public var hasEntityID: Bool {return self._entityID != nil}
  /// Clears the value of `entityID`. Subsequent reads from it will return its default value.
//  public mutating func clearEntityID() {self._entityID = nil}
//
  /// 对应实体类型
//  public var entityType: LarkNCExtensionPB_Entities_Item.EntityType {
//    get {return _entityType ?? .unknown}
//    set {_entityType = newValue}
//  }
  /// Returns true if `entityType` has been explicitly set.
//  public var hasEntityType: Bool {return self._entityType != nil}
  /// Clears the value of `entityType`. Subsequent reads from it will return its default value.
//  public mutating func clearEntityType() {self._entityType = nil}
//
  /// 父节点 ItemID
//  public var parentID: Int64 {
//    get {return _parentID ?? 0}
//    set {_parentID = newValue}
//  }
  /// Returns true if `parentID` has been explicitly set.
//  public var hasParentID: Bool {return self._parentID != nil}
  /// Clears the value of `parentID`. Subsequent reads from it will return its default value.
//  public mutating func clearParentID() {self._parentID = nil}
//
  /// 排序权值
//  public var orderWeight: Int64 {
//    get {return _orderWeight ?? 0}
//    set {_orderWeight = newValue}
//  }
  /// Returns true if `orderWeight` has been explicitly set.
//  public var hasOrderWeight: Bool {return self._orderWeight != nil}
  /// Clears the value of `orderWeight`. Subsequent reads from it will return its default value.
//  public mutating func clearOrderWeight() {self._orderWeight = nil}
//
  ///版本
//  public var version: Int64 {
//    get {return _version ?? 0}
//    set {_version = newValue}
//  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {self._version = nil}
//
  /// 是否隐藏
//  public var isHidden: Bool {
//    get {return _isHidden ?? false}
//    set {_isHidden = newValue}
//  }
  /// Returns true if `isHidden` has been explicitly set.
//  public var hasIsHidden: Bool {return self._isHidden != nil}
  /// Clears the value of `isHidden`. Subsequent reads from it will return its default value.
//  public mutating func clearIsHidden() {self._isHidden = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum EntityType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//
    /// Chat 类型实体
//    case chat // = 1
//
    /// Team 类型实体
//    case team // = 2
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .chat
//      case 2: self = .team
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .chat: return 1
//      case .team: return 2
//      }
//    }
//
//  }
//
//  public init() {}
//
//  fileprivate var _id: Int64? = nil
//  fileprivate var _entityID: String? = nil
//  fileprivate var _entityType: LarkNCExtensionPB_Entities_Item.EntityType? = nil
//  fileprivate var _parentID: Int64? = nil
//  fileprivate var _orderWeight: Int64? = nil
//  fileprivate var _version: Int64? = nil
//  fileprivate var _isHidden: Bool? = nil
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_Item.EntityType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

//public struct LarkNCExtensionPB_Entities_CalendarTenantInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var tenantID: String {
//    get {return _tenantID ?? String()}
//    set {_tenantID = newValue}
//  }
  /// Returns true if `tenantID` has been explicitly set.
//  public var hasTenantID: Bool {return self._tenantID != nil}
  /// Clears the value of `tenantID`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantID() {self._tenantID = nil}
//
//  public var tenantName: String {
//    get {return _tenantName ?? String()}
//    set {_tenantName = newValue}
//  }
  /// Returns true if `tenantName` has been explicitly set.
//  public var hasTenantName: Bool {return self._tenantName != nil}
  /// Clears the value of `tenantName`. Subsequent reads from it will return its default value.
//  public mutating func clearTenantName() {self._tenantName = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _tenantID: String? = nil
//  fileprivate var _tenantName: String? = nil
//}

/// 红包封面
//public struct LarkNCExtensionPB_Entities_HongbaoCover {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 封面ID
//  public var id: Int64 {
//    get {return _storage._id ?? 0}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
  /// 封面名称
//  public var name: String {
//    get {return _storage._name ?? String()}
//    set {_uniqueStorage()._name = newValue}
//  }
  /// Returns true if `name` has been explicitly set.
//  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
//  public mutating func clearName() {_uniqueStorage()._name = nil}
//
  /// 封面类型
//  public var coverType: LarkNCExtensionPB_Entities_HongbaoCover.CoverType {
//    get {return _storage._coverType ?? .unknown}
//    set {_uniqueStorage()._coverType = newValue}
//  }
  /// Returns true if `coverType` has been explicitly set.
//  public var hasCoverType: Bool {return _storage._coverType != nil}
  /// Clears the value of `coverType`. Subsequent reads from it will return its default value.
//  public mutating func clearCoverType() {_uniqueStorage()._coverType = nil}
//
  /// 拆红包页主图
//  public var mainCover: LarkNCExtensionPB_Entities_ImageSetPassThrough {
//    get {return _storage._mainCover ?? LarkNCExtensionPB_Entities_ImageSetPassThrough()}
//    set {_uniqueStorage()._mainCover = newValue}
//  }
  /// Returns true if `mainCover` has been explicitly set.
//  public var hasMainCover: Bool {return _storage._mainCover != nil}
  /// Clears the value of `mainCover`. Subsequent reads from it will return its default value.
//  public mutating func clearMainCover() {_uniqueStorage()._mainCover = nil}
//
  /// 红包气泡图
//  public var messageCover: LarkNCExtensionPB_Entities_ImageSetPassThrough {
//    get {return _storage._messageCover ?? LarkNCExtensionPB_Entities_ImageSetPassThrough()}
//    set {_uniqueStorage()._messageCover = newValue}
//  }
  /// Returns true if `messageCover` has been explicitly set.
//  public var hasMessageCover: Bool {return _storage._messageCover != nil}
  /// Clears the value of `messageCover`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageCover() {_uniqueStorage()._messageCover = nil}
//
  /// 红包详情页顶部图
//  public var headCover: LarkNCExtensionPB_Entities_ImageSetPassThrough {
//    get {return _storage._headCover ?? LarkNCExtensionPB_Entities_ImageSetPassThrough()}
//    set {_uniqueStorage()._headCover = newValue}
//  }
  /// Returns true if `headCover` has been explicitly set.
//  public var hasHeadCover: Bool {return _storage._headCover != nil}
  /// Clears the value of `headCover`. Subsequent reads from it will return its default value.
//  public mutating func clearHeadCover() {_uniqueStorage()._headCover = nil}
//
  /// 企业 Logo
//  public var companyLogo: LarkNCExtensionPB_Entities_ImageSetPassThrough {
//    get {return _storage._companyLogo ?? LarkNCExtensionPB_Entities_ImageSetPassThrough()}
//    set {_uniqueStorage()._companyLogo = newValue}
//  }
  /// Returns true if `companyLogo` has been explicitly set.
//  public var hasCompanyLogo: Bool {return _storage._companyLogo != nil}
  /// Clears the value of `companyLogo`. Subsequent reads from it will return its default value.
//  public mutating func clearCompanyLogo() {_uniqueStorage()._companyLogo = nil}
//
  /// 选择封面背景图
//  public var selectCover: LarkNCExtensionPB_Entities_ImageSetPassThrough {
//    get {return _storage._selectCover ?? LarkNCExtensionPB_Entities_ImageSetPassThrough()}
//    set {_uniqueStorage()._selectCover = newValue}
//  }
  /// Returns true if `selectCover` has been explicitly set.
//  public var hasSelectCover: Bool {return _storage._selectCover != nil}
  /// Clears the value of `selectCover`. Subsequent reads from it will return its default value.
//  public mutating func clearSelectCover() {_uniqueStorage()._selectCover = nil}
//
  /// 展示自定义名称
//  public var displayName: LarkNCExtensionPB_Entities_HongbaoCover.DisplayName {
//    get {return _storage._displayName ?? LarkNCExtensionPB_Entities_HongbaoCover.DisplayName()}
//    set {_uniqueStorage()._displayName = newValue}
//  }
  /// Returns true if `displayName` has been explicitly set.
//  public var hasDisplayName: Bool {return _storage._displayName != nil}
  /// Clears the value of `displayName`. Subsequent reads from it will return its default value.
//  public mutating func clearDisplayName() {_uniqueStorage()._displayName = nil}
//
  /// 企业红包，企业名称
//  public var companyName: String {
//    get {return _storage._companyName ?? String()}
//    set {_uniqueStorage()._companyName = newValue}
//  }
  /// Returns true if `companyName` has been explicitly set.
//  public var hasCompanyName: Bool {return _storage._companyName != nil}
  /// Clears the value of `companyName`. Subsequent reads from it will return its default value.
//  public mutating func clearCompanyName() {_uniqueStorage()._companyName = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public enum CoverType: LarkHTTP.Enum {
//    public typealias RawValue = Int
//    case unknown // = 0
//
    /// 模板封面
//    case template // = 1
//
    /// 自定义封面
//    case customize // = 2
//
//    public init() {
//      self = .unknown
//    }
//
//    public init?(rawValue: Int) {
//      switch rawValue {
//      case 0: self = .unknown
//      case 1: self = .template
//      case 2: self = .customize
//      default: return nil
//      }
//    }
//
//    public var rawValue: Int {
//      switch self {
//      case .unknown: return 0
//      case .template: return 1
//      case .customize: return 2
//      }
//    }
//
//  }
//
//  public struct DisplayName {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 自定义文字背景图
//    public var backgroundImg: LarkNCExtensionPB_Entities_ImageSetPassThrough {
//      get {return _storage._backgroundImg ?? LarkNCExtensionPB_Entities_ImageSetPassThrough()}
//      set {_uniqueStorage()._backgroundImg = newValue}
//    }
    /// Returns true if `backgroundImg` has been explicitly set.
//    public var hasBackgroundImg: Bool {return _storage._backgroundImg != nil}
    /// Clears the value of `backgroundImg`. Subsequent reads from it will return its default value.
//    public mutating func clearBackgroundImg() {_uniqueStorage()._backgroundImg = nil}
//
    /// 封面上展示文字
//    public var displayName: String {
//      get {return _storage._displayName ?? String()}
//      set {_uniqueStorage()._displayName = newValue}
//    }
    /// Returns true if `displayName` has been explicitly set.
//    public var hasDisplayName: Bool {return _storage._displayName != nil}
    /// Clears the value of `displayName`. Subsequent reads from it will return its default value.
//    public mutating func clearDisplayName() {_uniqueStorage()._displayName = nil}
//
    /// 背景图左右保护宽度 单位 pt
//    public var bgBorderWidth: Int32 {
//      get {return _storage._bgBorderWidth ?? 0}
//      set {_uniqueStorage()._bgBorderWidth = newValue}
//    }
    /// Returns true if `bgBorderWidth` has been explicitly set.
//    public var hasBgBorderWidth: Bool {return _storage._bgBorderWidth != nil}
    /// Clears the value of `bgBorderWidth`. Subsequent reads from it will return its default value.
//    public mutating func clearBgBorderWidth() {_uniqueStorage()._bgBorderWidth = nil}
//
    /// 自定义文字背景图, .9图
//    public var bgImgDot9: LarkNCExtensionPB_Entities_ImageSetPassThrough {
//      get {return _storage._bgImgDot9 ?? LarkNCExtensionPB_Entities_ImageSetPassThrough()}
//      set {_uniqueStorage()._bgImgDot9 = newValue}
//    }
    /// Returns true if `bgImgDot9` has been explicitly set.
//    public var hasBgImgDot9: Bool {return _storage._bgImgDot9 != nil}
    /// Clears the value of `bgImgDot9`. Subsequent reads from it will return its default value.
//    public mutating func clearBgImgDot9() {_uniqueStorage()._bgImgDot9 = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _storage = _StorageClass.defaultInstance
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

#if swift(>=4.2)

//extension LarkNCExtensionPB_Entities_HongbaoCover.CoverType: CaseIterable {
  // Support synthesized by the compiler.
//}

#endif  // swift(>=4.2)

/// 密钥2.0 发送密聊消息加密体
//public struct LarkNCExtensionPB_Entities_DeviceSecretContent {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// DeviceID -> Content
//  public var deviceContents: Dictionary<String,LarkNCExtensionPB_Entities_DeviceSecretContent.Content> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public struct Content {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
    /// 加密后内容,包含（普通消息、图片、文件资源信息）
//    public var content: Data {
//      get {return _content ?? LarkHTTP.Internal.emptyData}
//      set {_content = newValue}
//    }
    /// Returns true if `content` has been explicitly set.
//    public var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
//    public mutating func clearContent() {self._content = nil}
//
    /// 接收者（加密当前content时候）设备的公钥
//    public var receiverIpk: Data {
//      get {return _receiverIpk ?? LarkHTTP.Internal.emptyData}
//      set {_receiverIpk = newValue}
//    }
    /// Returns true if `receiverIpk` has been explicitly set.
//    public var hasReceiverIpk: Bool {return self._receiverIpk != nil}
    /// Clears the value of `receiverIpk`. Subsequent reads from it will return its default value.
//    public mutating func clearReceiverIpk() {self._receiverIpk = nil}
//
    /// 消息头
//    public var header: Data {
//      get {return _header ?? LarkHTTP.Internal.emptyData}
//      set {_header = newValue}
//    }
    /// Returns true if `header` has been explicitly set.
//    public var hasHeader: Bool {return self._header != nil}
    /// Clears the value of `header`. Subsequent reads from it will return its default value.
//    public mutating func clearHeader() {self._header = nil}
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _content: Data? = nil
//    fileprivate var _receiverIpk: Data? = nil
//    fileprivate var _header: Data? = nil
//  }
//
//  public init() {}
//}

/// 密钥2.0 身份公钥信息体
//public struct LarkNCExtensionPB_Entities_DeviceIpkInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// 变更ipk 用户 userID
//  public var userID: String {
//    get {return _userID ?? String()}
//    set {_userID = newValue}
//  }
  /// Returns true if `userID` has been explicitly set.
//  public var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
//  public mutating func clearUserID() {self._userID = nil}
//
  /// 变更ipk 用户deviceID
//  public var deviceID: String {
//    get {return _deviceID ?? String()}
//    set {_deviceID = newValue}
//  }
  /// Returns true if `deviceID` has been explicitly set.
//  public var hasDeviceID: Bool {return self._deviceID != nil}
  /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
//  public mutating func clearDeviceID() {self._deviceID = nil}
//
  /// 变更ipk， 用户注册ipk时间
//  public var createTime: Int64 {
//    get {return _createTime ?? 0}
//    set {_createTime = newValue}
//  }
  /// Returns true if `createTime` has been explicitly set.
//  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
//  public mutating func clearCreateTime() {self._createTime = nil}
//
  /// 变更ipk
//  public var ipk: Data {
//    get {return _ipk ?? LarkHTTP.Internal.emptyData}
//    set {_ipk = newValue}
//  }
  /// Returns true if `ipk` has been explicitly set.
//  public var hasIpk: Bool {return self._ipk != nil}
  /// Clears the value of `ipk`. Subsequent reads from it will return its default value.
//  public mutating func clearIpk() {self._ipk = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _userID: String? = nil
//  fileprivate var _deviceID: String? = nil
//  fileprivate var _createTime: Int64? = nil
//  fileprivate var _ipk: Data? = nil
//}

/// 用户设备公钥信息体，包含用户名下已经注册的密聊设备的公钥信息
//public struct LarkNCExtensionPB_Entities_UserIpkInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var userIpkInfo: Dictionary<Int64,LarkNCExtensionPB_Entities_DeviceIpkInfo> = [:]
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//}

/// URL中台inline翻译结果
//public struct LarkNCExtensionPB_Entities_TranslatedUrlPreviewEntity {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var previewID: String {
//    get {return _previewID ?? String()}
//    set {_previewID = newValue}
//  }
  /// Returns true if `previewID` has been explicitly set.
//  public var hasPreviewID: Bool {return self._previewID != nil}
  /// Clears the value of `previewID`. Subsequent reads from it will return its default value.
//  public mutating func clearPreviewID() {self._previewID = nil}
//
//  public var title: String {
//    get {return _title ?? String()}
//    set {_title = newValue}
//  }
  /// Returns true if `title` has been explicitly set.
//  public var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
//  public mutating func clearTitle() {self._title = nil}
//
//  public var tag: String {
//    get {return _tag ?? String()}
//    set {_tag = newValue}
//  }
  /// Returns true if `tag` has been explicitly set.
//  public var hasTag: Bool {return self._tag != nil}
  /// Clears the value of `tag`. Subsequent reads from it will return its default value.
//  public mutating func clearTag() {self._tag = nil}
//
  /// 翻译目标语言
//  public var targetLanguage: String {
//    get {return _targetLanguage ?? String()}
//    set {_targetLanguage = newValue}
//  }
  /// Returns true if `targetLanguage` has been explicitly set.
//  public var hasTargetLanguage: Bool {return self._targetLanguage != nil}
  /// Clears the value of `targetLanguage`. Subsequent reads from it will return its default value.
//  public mutating func clearTargetLanguage() {self._targetLanguage = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _previewID: String? = nil
//  fileprivate var _title: String? = nil
//  fileprivate var _tag: String? = nil
//  fileprivate var _targetLanguage: String? = nil
//}

//public struct LarkNCExtensionPB_Entities_TranslateUrlPreviewContext {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
//  public var previewID: String {
//    get {return _previewID ?? String()}
//    set {_previewID = newValue}
//  }
  /// Returns true if `previewID` has been explicitly set.
//  public var hasPreviewID: Bool {return self._previewID != nil}
  /// Clears the value of `previewID`. Subsequent reads from it will return its default value.
//  public mutating func clearPreviewID() {self._previewID = nil}
//
//  public var title: String {
//    get {return _title ?? String()}
//    set {_title = newValue}
//  }
  /// Returns true if `title` has been explicitly set.
//  public var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
//  public mutating func clearTitle() {self._title = nil}
//
//  public var tag: String {
//    get {return _tag ?? String()}
//    set {_tag = newValue}
//  }
  /// Returns true if `tag` has been explicitly set.
//  public var hasTag: Bool {return self._tag != nil}
  /// Clears the value of `tag`. Subsequent reads from it will return its default value.
//  public mutating func clearTag() {self._tag = nil}
//
  /// 翻译目标语言
//  public var targetLanguage: String {
//    get {return _targetLanguage ?? String()}
//    set {_targetLanguage = newValue}
//  }
  /// Returns true if `targetLanguage` has been explicitly set.
//  public var hasTargetLanguage: Bool {return self._targetLanguage != nil}
  /// Clears the value of `targetLanguage`. Subsequent reads from it will return its default value.
//  public mutating func clearTargetLanguage() {self._targetLanguage = nil}
//
  /// 是否sdk抓取，sdk 抓取的 preview url 中台肯定没有多语言配置
//  public var isSdkPreview: Bool {
//    get {return _isSdkPreview ?? false}
//    set {_isSdkPreview = newValue}
//  }
  /// Returns true if `isSdkPreview` has been explicitly set.
//  public var hasIsSdkPreview: Bool {return self._isSdkPreview != nil}
  /// Clears the value of `isSdkPreview`. Subsequent reads from it will return its default value.
//  public mutating func clearIsSdkPreview() {self._isSdkPreview = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _previewID: String? = nil
//  fileprivate var _title: String? = nil
//  fileprivate var _tag: String? = nil
//  fileprivate var _targetLanguage: String? = nil
//  fileprivate var _isSdkPreview: Bool? = nil
//}

//public struct LarkNCExtensionPB_Entities_DynamicEmojiResource {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// emoji展示的权重
//  public var showWeight: Int32 {
//    get {return _storage._showWeight ?? 0}
//    set {_uniqueStorage()._showWeight = newValue}
//  }
  /// Returns true if `showWeight` has been explicitly set.
//  public var hasShowWeight: Bool {return _storage._showWeight != nil}
  /// Clears the value of `showWeight`. Subsequent reads from it will return its default value.
//  public mutating func clearShowWeight() {_uniqueStorage()._showWeight = nil}
//
  /// emoji资源的key,（接入静态资源，服务端存储.webm文件，客户端下载）
//  public var resourceKey: String {
//    get {return _storage._resourceKey ?? String()}
//    set {_uniqueStorage()._resourceKey = newValue}
//  }
  /// Returns true if `resourceKey` has been explicitly set.
//  public var hasResourceKey: Bool {return _storage._resourceKey != nil}
  /// Clears the value of `resourceKey`. Subsequent reads from it will return its default value.
//  public mutating func clearResourceKey() {_uniqueStorage()._resourceKey = nil}
//
  /// emoji下对应的文案
//  public var text: LarkNCExtensionPB_Entities_DynamicEmojiResource.I18NName {
//    get {return _storage._text ?? LarkNCExtensionPB_Entities_DynamicEmojiResource.I18NName()}
//    set {_uniqueStorage()._text = newValue}
//  }
  /// Returns true if `text` has been explicitly set.
//  public var hasText: Bool {return _storage._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
//  public mutating func clearText() {_uniqueStorage()._text = nil}
//
  /// emoji资源所在的unit，用于下载文件
//  public var fsUnit: String {
//    get {return _storage._fsUnit ?? String()}
//    set {_uniqueStorage()._fsUnit = newValue}
//  }
  /// Returns true if `fsUnit` has been explicitly set.
//  public var hasFsUnit: Bool {return _storage._fsUnit != nil}
  /// Clears the value of `fsUnit`. Subsequent reads from it will return its default value.
//  public mutating func clearFsUnit() {_uniqueStorage()._fsUnit = nil}
//
  /// emoji资源的名称，若资源名变意味着资源有变化，resource_key也要变，resource_name不变而resource_key变化的情景无意义
//  public var resourceName: String {
//    get {return _storage._resourceName ?? String()}
//    set {_uniqueStorage()._resourceName = newValue}
//  }
  /// Returns true if `resourceName` has been explicitly set.
//  public var hasResourceName: Bool {return _storage._resourceName != nil}
  /// Clears the value of `resourceName`. Subsequent reads from it will return its default value.
//  public mutating func clearResourceName() {_uniqueStorage()._resourceName = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public struct I18NName {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.
//
//    public var defaultVal: String {
//      get {return _defaultVal ?? String()}
//      set {_defaultVal = newValue}
//    }
    /// Returns true if `defaultVal` has been explicitly set.
//    public var hasDefaultVal: Bool {return self._defaultVal != nil}
    /// Clears the value of `defaultVal`. Subsequent reads from it will return its default value.
//    public mutating func clearDefaultVal() {self._defaultVal = nil}
//
//    public var i18NVals: Dictionary<String,String> = [:]
//
//    public var unknownFields = LarkHTTP.UnknownStorage()
//
//    public init() {}
//
//    fileprivate var _defaultVal: String? = nil
//  }
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

//public struct LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// user_last_visible_message_id/user_last_visible_thread_id  用户最后一条可见的msgID/threadID(已经过滤掉删除/撤回的消息)
//  public var visibleID: Int64 {
//    get {return _visibleID ?? 0}
//    set {_visibleID = newValue}
//  }
  /// Returns true if `visibleID` has been explicitly set.
//  public var hasVisibleID: Bool {return self._visibleID != nil}
  /// Clears the value of `visibleID`. Subsequent reads from it will return its default value.
//  public mutating func clearVisibleID() {self._visibleID = nil}
//
  /// user_last_visible_position/user_last_visible_position 用户最后一条可见消息的位置(已经过滤掉删除/撤回的消息)
//  public var visiblePosition: Int32 {
//    get {return _visiblePosition ?? 0}
//    set {_visiblePosition = newValue}
//  }
  /// Returns true if `visiblePosition` has been explicitly set.
//  public var hasVisiblePosition: Bool {return self._visiblePosition != nil}
  /// Clears the value of `visiblePosition`. Subsequent reads from it will return its default value.
//  public mutating func clearVisiblePosition() {self._visiblePosition = nil}
//
  /// chat_last_message_id/thread_last_thread_id  chat/thread 最后一条消息msgID/threadID(消息对用户可见，但该消息可能被用户删除/撤回)
//  public var removedLastPosition: Int32 {
//    get {return _removedLastPosition ?? 0}
//    set {_removedLastPosition = newValue}
//  }
  /// Returns true if `removedLastPosition` has been explicitly set.
//  public var hasRemovedLastPosition: Bool {return self._removedLastPosition != nil}
  /// Clears the value of `removedLastPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearRemovedLastPosition() {self._removedLastPosition = nil}
//
  /// chat_last_position/thread_last_position chat/thread 最后一条消息位置(消息对用户可见，但该消息可能被用户删除/撤回) 用于端上判断是否应该执行 positon 回退
//  public var removedLastID: Int64 {
//    get {return _removedLastID ?? 0}
//    set {_removedLastID = newValue}
//  }
  /// Returns true if `removedLastID` has been explicitly set.
//  public var hasRemovedLastID: Bool {return self._removedLastID != nil}
  /// Clears the value of `removedLastID`. Subsequent reads from it will return its default value.
//  public mutating func clearRemovedLastID() {self._removedLastID = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _visibleID: Int64? = nil
//  fileprivate var _visiblePosition: Int32? = nil
//  fileprivate var _removedLastPosition: Int32? = nil
//  fileprivate var _removedLastID: Int64? = nil
//}

//public struct LarkNCExtensionPB_Entities_MessageLastVisibleInfo {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.
//
  /// message_id or thread_id
//  public var id: Int64 {
//    get {return _storage._id ?? 0}
//    set {_uniqueStorage()._id = newValue}
//  }
  /// Returns true if `id` has been explicitly set.
//  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {_uniqueStorage()._id = nil}
//
  /// 根据不同场景对应不同 position，普通群 -> chat_message_position，话题群 -> chat_thread_position，话题 -> thread_message_position
//  public var position: Int32 {
//    get {return _storage._position ?? 0}
//    set {_uniqueStorage()._position = newValue}
//  }
  /// Returns true if `position` has been explicitly set.
//  public var hasPosition: Bool {return _storage._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
//  public mutating func clearPosition() {_uniqueStorage()._position = nil}
//
//  public var patch: LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch {
//    get {return _storage._patch ?? LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch()}
//    set {_uniqueStorage()._patch = newValue}
//  }
  /// Returns true if `patch` has been explicitly set.
//  public var hasPatch: Bool {return _storage._patch != nil}
  /// Clears the value of `patch`. Subsequent reads from it will return its default value.
//  public mutating func clearPatch() {_uniqueStorage()._patch = nil}
//
//  public var unknownFields = LarkHTTP.UnknownStorage()
//
//  public init() {}
//
//  fileprivate var _storage = _StorageClass.defaultInstance
//}

// MARK: - Code below here is support for the LarkHTTP runtime.

fileprivate let _protobuf_package = "entities"

extension LarkNCExtensionPB_Entities_ImageCropType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "ORIGIN"),
    2: .same(proto: "MIDDLE"),
    3: .same(proto: "THUMB"),
    4: .same(proto: "MIDDLE_WEBP"),
    5: .same(proto: "THUMB_WEBP"),
    6: .same(proto: "MIDDLE_MP4"),
    7: .same(proto: "COVER"),
    8: .same(proto: "INTACT"),
  ]
}

// extension LarkNCExtensionPB_Entities_ChatterType: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN_CHATTER"),
//     1: .same(proto: "USER"),
//     2: .same(proto: "BOT"),
//   ]
// }

extension LarkNCExtensionPB_Entities_ChannelType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_CHANNEL_TYPE"),
    1: .same(proto: "CHAT_CHANNEL"),
    2: .same(proto: "EMAIL_CHANNEL"),
  ]
}

// extension LarkNCExtensionPB_Entities_LoadType: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     1: .same(proto: "UP"),
//     2: .same(proto: "DOWN"),
//     3: .same(proto: "LATEST"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_ComponentAttribute: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     1: .same(proto: "orientation"),
//     2: .same(proto: "spacing"),
//     3: .same(proto: "wrap_width"),
//     4: .same(proto: "padding"),
//     5: .same(proto: "main_axis_justify"),
//     6: .same(proto: "cross_axis_align"),
//     7: .same(proto: "side_padding"),
//     8: .same(proto: "icon"),
//     9: .same(proto: "title"),
//     10: .same(proto: "lark_tag"),
//     11: .same(proto: "child_component_id"),
//     12: .same(proto: "show_copy_Link_Btn"),
//     13: .same(proto: "show_close_Btn"),
//     14: .same(proto: "theme"),
//     15: .same(proto: "type"),
//     16: .same(proto: "theme_color"),
//     17: .same(proto: "header_tag"),
//     18: .same(proto: "favicon_url"),
//     19: .same(proto: "ud_icon_key"),
//     20: .same(proto: "ud_icon_theme_color"),
//     21: .same(proto: "image"),
//     22: .same(proto: "alt"),
//     23: .same(proto: "chatters_count"),
//     24: .same(proto: "chatters_infos"),
//     25: .same(proto: "max_show_count"),
//     26: .same(proto: "text"),
//     27: .same(proto: "direction"),
//     28: .same(proto: "action_id"),
//     29: .same(proto: "is_disable"),
//     30: .same(proto: "start_time_stamp"),
//     31: .same(proto: "is_countdown"),
//     32: .same(proto: "ntp_action_id"),
//     33: .same(proto: "is_end"),
//     34: .same(proto: "end_time_stamp"),
//     35: .same(proto: "number_of_lines"),
//     36: .same(proto: "tags"),
//     37: .same(proto: "items"),
//     38: .same(proto: "selected_index"),
//     39: .same(proto: "avatar_chatter_info"),
//     40: .same(proto: "site"),
//     41: .same(proto: "cover_image"),
//     42: .same(proto: "duration"),
//     43: .same(proto: "src_url"),
//     44: .same(proto: "vid"),
//     45: .same(proto: "iframe_url"),
//     46: .same(proto: "doc_type"),
//     47: .same(proto: "thumbnail_url"),
//     48: .same(proto: "secret_url"),
//     49: .same(proto: "secret_type"),
//     50: .same(proto: "secret_key"),
//     51: .same(proto: "secret_nonce"),
//     52: .same(proto: "tag_color"),
//     53: .same(proto: "tag_text_color"),
//     54: .same(proto: "icon_color"),
//     55: .same(proto: "chatters_mode"),
//     56: .same(proto: "cover_image_url"),
//     200: .same(proto: "size_level"),
//     201: .same(proto: "background_type"),
//     202: .same(proto: "background_linear_deg"),
//     203: .same(proto: "background_linear_theme_colors"),
//     204: .same(proto: "width"),
//     205: .same(proto: "height"),
//     206: .same(proto: "max_width"),
//     207: .same(proto: "max_height"),
//     208: .same(proto: "min_width"),
//     209: .same(proto: "min_height"),
//     210: .same(proto: "grow_weight"),
//     211: .same(proto: "shrink_weight"),
//     213: .same(proto: "font_level"),
//     214: .same(proto: "border_width"),
//     215: .same(proto: "border_corner_radius"),
//     216: .same(proto: "border_theme_color"),
//     217: .same(proto: "aspect_ratio"),
//   ]
// }

extension LarkNCExtensionPB_Entities_TranslateSource: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_TRANSLATE_SOURCE"),
    1: .same(proto: "MANUAL_TRANSLATE"),
    2: .same(proto: "AUTO_TRANSLATE"),
  ]
}

extension LarkNCExtensionPB_Entities_DisplayRule: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_RULE"),
    1: .same(proto: "NOT_DISPLAY"),
    2: .same(proto: "ONLY_TRANSLATION"),
    3: .same(proto: "WITH_ORIGINAL"),
  ]
}

// extension LarkNCExtensionPB_Entities_TransStatus: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "PENDING"),
//     1: .same(proto: "ACCEPT"),
//     2: .same(proto: "REFUSE"),
//     3: .same(proto: "CANCEL"),
//     4: .same(proto: "ABORT_BY_SENDER"),
//     5: .same(proto: "ABORT_BY_RECEIVER"),
//     6: .same(proto: "TRANS_DONE"),
//     7: .same(proto: "OFFLINE_MODE"),
//     8: .same(proto: "CANCEL_BY_RECEIVER"),
//   ]
// }

extension LarkNCExtensionPB_Entities_SpecialURL: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_URL"),
    1: .same(proto: "BEAR"),
  ]
}

// extension LarkNCExtensionPB_Entities_GroupSortRuleType: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     1: .same(proto: "GROUP_DEFAULT_SORT"),
//     2: .same(proto: "GROUP_UPDATE_TIME"),
//     3: .same(proto: "GROUP_CREATE_TIME"),
//     4: .same(proto: "GROUP_NUM_MEMBERS"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_ChatPostType: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN_POST_TYPE"),
//     1: .same(proto: "ANYONE"),
//     2: .same(proto: "ONLY_ADMIN"),
//     3: .same(proto: "WHITE_LIST"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_ThreadState: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN_STATE"),
//     1: .same(proto: "OPEN"),
//     2: .same(proto: "CLOSED"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_PredefinedThreadFilterID: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN_THREAD_FILTER_ID"),
//     1: .same(proto: "FOLLOW_THREAD_FILTER_ID"),
//     2: .same(proto: "CLOSED_THREAD_FILTER_ID"),
//     3: .same(proto: "OPEN_THREAD_FILTER_ID"),
//     4: .same(proto: "MY_OWN_THREADS_FILTER_ID"),
//     5: .same(proto: "MY_REPLY_THREADS_FILTER_ID"),
//     6: .same(proto: "MY_MENTIONED_THREADS_FILTER_ID"),
//     7: .same(proto: "MY_FOLLOW_FILTER_ID"),
//     8: .same(proto: "MY_THREADS_FILTER_ID"),
//     9: .same(proto: "MY_UNREAD_MENTIONED_THREADS_FILTER_ID"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_Gender: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "DEFAULT"),
//     1: .same(proto: "MAN"),
//     2: .same(proto: "WOMAN"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_TagColor: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "BLUE"),
//     1: .same(proto: "GRAY"),
//     2: .same(proto: "INDIGO"),
//     3: .same(proto: "WATHET"),
//     4: .same(proto: "GREEN"),
//     5: .same(proto: "TURQUOISE"),
//     6: .same(proto: "YELLOW"),
//     7: .same(proto: "LIME"),
//     8: .same(proto: "RED"),
//     9: .same(proto: "ORANGE"),
//     10: .same(proto: "PURPLE"),
//     11: .same(proto: "VIOLET"),
//     12: .same(proto: "CARMINE"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_TimeUnit: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "SECOND"),
//     1: .same(proto: "MINUTE"),
//     2: .same(proto: "HOUR"),
//     3: .same(proto: "DAY"),
//     4: .same(proto: "MONTH"),
//     5: .same(proto: "YEAR"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_EmailFields: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN"),
//     1: .same(proto: "SUBJECT"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_EmailRole: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN_EMAIL_ROLE"),
//     1: .same(proto: "TO"),
//     2: .same(proto: "CC"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_LanguageType: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN_LANGUAGE"),
//     1: .same(proto: "ZH_CN"),
//     2: .same(proto: "EN_US"),
//     3: .same(proto: "JA_JP"),
//     4: .same(proto: "FR_FR"),
//     5: .same(proto: "DE_DE"),
//     6: .same(proto: "ES_ES"),
//     7: .same(proto: "RU_RU"),
//     8: .same(proto: "AR_EG"),
//     9: .same(proto: "PT_PT"),
//   ]
// }

extension LarkNCExtensionPB_Entities_DocType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_DOC_TYPE"),
    1: .same(proto: "DOC"),
    2: .same(proto: "SHEET"),
    3: .same(proto: "BITABLE"),
    4: .same(proto: "MINDNOTE"),
    5: .same(proto: "FILE"),
    6: .same(proto: "SLIDE"),
    7: .same(proto: "WIKI"),
    8: .same(proto: "DOCX"),
    9: .same(proto: "FOLDER"),
    10: .same(proto: "CATALOG"),
  ]
}

extension LarkNCExtensionPB_Entities_DocSortRuleType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "DEFAULT_TYPE"),
    2: .same(proto: "OPEN_TIME"),
    4: .same(proto: "EDIT_TIME"),
    5: .same(proto: "EDIT_TIME_ASC"),
    8: .same(proto: "FILTER_OPEN"),
    16: .same(proto: "FILTER_EDIT"),
    32: .same(proto: "MSG_CREATE_TIME"),
    64: .same(proto: "ENTITY_CREATE_TIME_ASC"),
    65: .same(proto: "ENTITY_CREATE_TIME_DESC"),
    128: .same(proto: "TAG_TIME_ASC"),
    129: .same(proto: "TAG_TIME_DESC"),
    256: .same(proto: "CREATE_TIME"),
  ]
}

extension LarkNCExtensionPB_Entities_IconType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_ICON_TYPE"),
    1: .same(proto: "EMOJI"),
    2: .same(proto: "IMAGE"),
  ]
}

// extension LarkNCExtensionPB_Entities_ScrollType: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     1: .same(proto: "EVENT_INFO"),
//     2: .same(proto: "MEETING_TRANSFER_CHAT"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_UserEventVisibility: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "BUSY_READER"),
//     1: .same(proto: "FREE_READER"),
//     2: .same(proto: "READER"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_AlternateCalendar: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "NONE_CALENDAR"),
//     1: .same(proto: "CHINESE_LUNAR_CALENDAR"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_ResourceDisplayType: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNSPECIFIED"),
//     1: .same(proto: "BUILDING_LIKE"),
//     2: .same(proto: "HIERARCHICAL"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_DayOfWeek: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "SUNDAY"),
//     1: .same(proto: "MONDAY"),
//     2: .same(proto: "TUESDAY"),
//     3: .same(proto: "WEDNESDAY"),
//     4: .same(proto: "THURSDAY"),
//     5: .same(proto: "FRIDAY"),
//     6: .same(proto: "SATURDAY"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_MeetingRoomUnusableReasonType: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN_UNUSABLE_REASON"),
//     1: .same(proto: "OVER_MAX_DURATION"),
//     2: .same(proto: "OVER_MAX_UNTIL_TIME"),
//     3: .same(proto: "NOT_IN_USABLE_TIME"),
//     4: .same(proto: "DURING_REQUISITION"),
//     5: .same(proto: "PAST_TIME"),
//     7: .same(proto: "BEFORE_EARLIEST_BOOK_TIME"),
//     101: .same(proto: "CANT_RESERVE_OVER_TIME"),
//     102: .same(proto: "UPGRADE_FOR_APPROVAL"),
//     103: .same(proto: "OVER_RESERVE_TIME_APPROVE"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_ChatterMeetingStatus: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKOWN"),
//     1: .same(proto: "IDLE"),
//     2: .same(proto: "BUSY"),
//     3: .same(proto: "INMEETING"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_FeedType: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN_TYPE"),
//     1: .same(proto: "INBOX"),
//     2: .same(proto: "DONE"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_ChannelDataDirection: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN_DIRECTION"),
//     1: .same(proto: "CHANNEL_UP"),
//     2: .same(proto: "CHANNEL_DOWN"),
//     3: .same(proto: "CHANNEL_BIDIRECTIONAL"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_NavigationAppType: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     1: .same(proto: "APP_TYPE_LARK_NATIVE"),
//     2: .same(proto: "APP_TYPE_MINI"),
//     3: .same(proto: "APP_TYPE_WEB"),
//     4: .same(proto: "APP_TYPE_CUSTOM_NATIVE"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_NavigationPlatform: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     1: .same(proto: "NAV_PC"),
//     2: .same(proto: "NAV_MOBILE"),
//     3: .same(proto: "NAV_IPAD"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_TenantTag: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "STANDARD"),
//     1: .same(proto: "UNDEFINED"),
//     2: .same(proto: "SIMPLE"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_PlatformType: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "PlatformUnknown"),
//     1: .same(proto: "PlatformIPhone"),
//     2: .same(proto: "PlatformAndroid"),
//     3: .same(proto: "PlatformWebAdmin"),
//     4: .same(proto: "PlatformWebOther"),
//     5: .same(proto: "PlatformWindows"),
//     6: .same(proto: "PlatformMac"),
//     7: .same(proto: "PlatformPassport"),
//     8: .same(proto: "PlatformIpad"),
//     9: .same(proto: "PlatformLinux"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_TopicGroupRole: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN_ROLE"),
//     1: .same(proto: "UNAUTHORIZED_USER"),
//     2: .same(proto: "MEMBER"),
//     3: .same(proto: "PARTICIPANT"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_IncompatibleLevel: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     1: .same(proto: "SHOW_HINT"),
//     2: .same(proto: "DISABLE_EDIT"),
//     3: .same(proto: "DISABLE_READ"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_Tag: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN_TAG"),
//     1: .same(proto: "APPROVAL"),
//     2: .same(proto: "OFFICIAL"),
//     3: .same(proto: "ONCALL"),
//     4: .same(proto: "ONCALL_OFFLINE"),
//     5: .same(proto: "EXTERNAL"),
//     6: .same(proto: "EXTERNAL_WARN"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_ContactSource: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN_SOURCE"),
//     1: .same(proto: "LINK"),
//     2: .same(proto: "CHAT"),
//     3: .same(proto: "CALENDAR"),
//     4: .same(proto: "DOCS"),
//     5: .same(proto: "VC"),
//     6: .same(proto: "EMAIL"),
//     7: .same(proto: "NAME_CARD"),
//     8: .same(proto: "SEARCH_PHONE"),
//     9: .same(proto: "SEARCH_EMAIL"),
//     10: .same(proto: "SEARCH_CONTACT"),
//     11: .same(proto: "CCM_FOLDER"),
//     12: .same(proto: "CCM_SHEET"),
//     13: .same(proto: "CCM_SLIDE"),
//     14: .same(proto: "CCM_MIND_NOTE"),
//     15: .same(proto: "CCM_SMART_TABLE"),
//     16: .same(proto: "HOTLINE"),
//     19: .same(proto: "SPECIAL_FOCUS"),
//     20: .same(proto: "MINUTES"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_SidebarType: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN_SIDEBAR_TYPE"),
//     1: .same(proto: "ADMIN"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_ContactOperation: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "OPERATION_UNKNOWN"),
//     1: .same(proto: "OPERATION_ADD"),
//     2: .same(proto: "OPERATION_DELETE"),
//     3: .same(proto: "OPERATION_UPDATE"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_TeamStatus: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "TEAM_STATUS_UNKNOWN"),
//     1: .same(proto: "TEAM_STATUS_ACTIVE"),
//     2: .same(proto: "TEAM_STATUS_DISSOLVED"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_TeamChatType: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "TEAM_CHAT_TYPE_UNKNOWN"),
//     1: .same(proto: "TEAM_CHAT_TYPE_DEFAULT"),
//     2: .same(proto: "TEAM_CHAT_TYPE_PUBLIC"),
//     3: .same(proto: "TEAM_CHAT_TYPE_PRIVATE"),
//     4: .same(proto: "TEAM_CHAT_TYPE_OPEN"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_ChatterExtraStateType: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "UNKNOWN_EXTRA_STATE_TYPE"),
//     1: .same(proto: "HIDE_LARGE_CHAT_MUTE_TIPS"),
//   ]
// }

// extension LarkNCExtensionPB_Entities_HideLargeChatMuteTipsState: LarkHTTP._ProtoNameProviding {
//   public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//     0: .same(proto: "DISPLAY_TIPS"),
//     1: .same(proto: "HIDE_TIPS"),
//   ]
// }

extension LarkNCExtensionPB_Entities_Image: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Image"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "urls"),
    3: .same(proto: "width"),
    4: .same(proto: "height"),
    5: .standard(proto: "secure_key"),
    6: .standard(proto: "secure_urls"),
    7: .standard(proto: "secure_width"),
    8: .standard(proto: "secure_height"),
    9: .same(proto: "crypto"),
    10: .same(proto: "size"),
    11: .standard(proto: "fs_unit"),
    12: .same(proto: "params"),
    13: .same(proto: "etag"),
  ]

  fileprivate class _StorageClass {
    var _key: String? = nil
    var _urls: [String] = []
    var _width: Int32? = nil
    var _height: Int32? = nil
    var _secureKey: String? = nil
    var _secureUrls: [String] = []
    var _secureWidth: Int32? = nil
    var _secureHeight: Int32? = nil
    var _crypto: LarkNCExtensionPB_Entities_Crypto? = nil
    var _size: Int32? = nil
    var _fsUnit: String? = nil
    var _params: Dictionary<String,String> = [:]
    var _etag: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _urls = source._urls
      _width = source._width
      _height = source._height
      _secureKey = source._secureKey
      _secureUrls = source._secureUrls
      _secureWidth = source._secureWidth
      _secureHeight = source._secureHeight
      _crypto = source._crypto
      _size = source._size
      _fsUnit = source._fsUnit
      _params = source._params
      _etag = source._etag
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._key)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._urls)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._width)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._height)
        case 5: try decoder.decodeSingularStringField(value: &_storage._secureKey)
        case 6: try decoder.decodeRepeatedStringField(value: &_storage._secureUrls)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._secureWidth)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._secureHeight)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._crypto)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._size)
        case 11: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
        case 12: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._params)
        case 13: try decoder.decodeSingularStringField(value: &_storage._etag)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if !_storage._urls.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._urls, fieldNumber: 2)
      }
      if let v = _storage._width {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._height {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._secureKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if !_storage._secureUrls.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._secureUrls, fieldNumber: 6)
      }
      if let v = _storage._secureWidth {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._secureHeight {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._crypto {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._size {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._fsUnit {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      }
      if !_storage._params.isEmpty {
        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._params, fieldNumber: 12)
      }
      if let v = _storage._etag {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_Image, rhs: LarkNCExtensionPB_Entities_Image) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        if _storage._urls != rhs_storage._urls {return false}
        if _storage._width != rhs_storage._width {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._secureKey != rhs_storage._secureKey {return false}
        if _storage._secureUrls != rhs_storage._secureUrls {return false}
        if _storage._secureWidth != rhs_storage._secureWidth {return false}
        if _storage._secureHeight != rhs_storage._secureHeight {return false}
        if _storage._crypto != rhs_storage._crypto {return false}
        if _storage._size != rhs_storage._size {return false}
        if _storage._fsUnit != rhs_storage._fsUnit {return false}
        if _storage._params != rhs_storage._params {return false}
        if _storage._etag != rhs_storage._etag {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_Archive: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Archive"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "key"),
//    2: .standard(proto: "fs_unit"),
//    3: .same(proto: "size"),
//    4: .same(proto: "checksum"),
//    5: .same(proto: "mime"),
//    6: .same(proto: "params"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._key)
//      case 2: try decoder.decodeSingularStringField(value: &self._fsUnit)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._size)
//      case 4: try decoder.decodeSingularStringField(value: &self._checksum)
//      case 5: try decoder.decodeSingularStringField(value: &self._mime)
//      case 6: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.params)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._key {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._fsUnit {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._size {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._checksum {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._mime {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    if !self.params.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.params, fieldNumber: 6)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Archive, rhs: LarkNCExtensionPB_Entities_Archive) -> Bool {
//    if lhs._key != rhs._key {return false}
//    if lhs._fsUnit != rhs._fsUnit {return false}
//    if lhs._size != rhs._size {return false}
//    if lhs._checksum != rhs._checksum {return false}
//    if lhs._mime != rhs._mime {return false}
//    if lhs.params != rhs.params {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Urgent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Urgent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "message_id"),
//    2: .same(proto: "type"),
//    3: .standard(proto: "send_time"),
//    4: .standard(proto: "from_id"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._messageID == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._messageID)
//      case 2: try decoder.decodeSingularEnumField(value: &self._type)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._sendTime)
//      case 4: try decoder.decodeSingularStringField(value: &self._fromID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._messageID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    if let v = self._sendTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._fromID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Urgent, rhs: LarkNCExtensionPB_Entities_Urgent) -> Bool {
//    if lhs._messageID != rhs._messageID {return false}
//    if lhs._type != rhs._type {return false}
//    if lhs._sendTime != rhs._sendTime {return false}
//    if lhs._fromID != rhs._fromID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Urgent.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_URGENT"),
//    1: .same(proto: "APP"),
//    2: .same(proto: "SMS"),
//    3: .same(proto: "PHONE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_UrgentAck: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UrgentAck"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "ack_id"),
//    2: .standard(proto: "message_id"),
//    3: .standard(proto: "to_id"),
//    4: .standard(proto: "urgent_id"),
//    5: .standard(proto: "send_time"),
//    6: .same(proto: "type"),
//    7: .same(proto: "status"),
//    8: .standard(proto: "confirm_time"),
//    9: .standard(proto: "phone_status"),
//    10: .same(proto: "version"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._ackID)
//      case 2: try decoder.decodeSingularStringField(value: &self._messageID)
//      case 3: try decoder.decodeSingularStringField(value: &self._toID)
//      case 4: try decoder.decodeSingularStringField(value: &self._urgentID)
//      case 5: try decoder.decodeSingularInt64Field(value: &self._sendTime)
//      case 6: try decoder.decodeSingularEnumField(value: &self._type)
//      case 7: try decoder.decodeSingularInt64Field(value: &self._status)
//      case 8: try decoder.decodeSingularInt64Field(value: &self._confirmTime)
//      case 9: try decoder.decodeSingularInt64Field(value: &self._phoneStatus)
//      case 10: try decoder.decodeSingularInt64Field(value: &self._version)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._ackID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._messageID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._toID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._urgentID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._sendTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
//    }
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
//    }
//    if let v = self._status {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
//    }
//    if let v = self._confirmTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 8)
//    }
//    if let v = self._phoneStatus {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 9)
//    }
//    if let v = self._version {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UrgentAck, rhs: LarkNCExtensionPB_Entities_UrgentAck) -> Bool {
//    if lhs._ackID != rhs._ackID {return false}
//    if lhs._messageID != rhs._messageID {return false}
//    if lhs._toID != rhs._toID {return false}
//    if lhs._urgentID != rhs._urgentID {return false}
//    if lhs._sendTime != rhs._sendTime {return false}
//    if lhs._type != rhs._type {return false}
//    if lhs._status != rhs._status {return false}
//    if lhs._confirmTime != rhs._confirmTime {return false}
//    if lhs._phoneStatus != rhs._phoneStatus {return false}
//    if lhs._version != rhs._version {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_ImageSet: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageSet"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "origin"),
    3: .same(proto: "thumbnail"),
    4: .standard(proto: "image_key"),
    5: .same(proto: "middle"),
    6: .standard(proto: "thumbnail_webp"),
    7: .standard(proto: "middle_webp"),
    8: .standard(proto: "middle_mp4"),
    9: .same(proto: "cover"),
    10: .same(proto: "intact"),
  ]

  fileprivate class _StorageClass {
    var _key: String? = nil
    var _origin: LarkNCExtensionPB_Entities_Image? = nil
    var _thumbnail: LarkNCExtensionPB_Entities_Image? = nil
    var _imageKey: String? = nil
    var _middle: LarkNCExtensionPB_Entities_Image? = nil
    var _thumbnailWebp: LarkNCExtensionPB_Entities_Image? = nil
    var _middleWebp: LarkNCExtensionPB_Entities_Image? = nil
    var _middleMp4: LarkNCExtensionPB_Entities_Image? = nil
    var _cover: LarkNCExtensionPB_Entities_Image? = nil
    var _intact: LarkNCExtensionPB_Entities_Image? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _origin = source._origin
      _thumbnail = source._thumbnail
      _imageKey = source._imageKey
      _middle = source._middle
      _thumbnailWebp = source._thumbnailWebp
      _middleWebp = source._middleWebp
      _middleMp4 = source._middleMp4
      _cover = source._cover
      _intact = source._intact
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._key)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._origin)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._thumbnail)
        case 4: try decoder.decodeSingularStringField(value: &_storage._imageKey)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._middle)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._thumbnailWebp)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._middleWebp)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._middleMp4)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._cover)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._intact)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._origin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._thumbnail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._imageKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._middle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._thumbnailWebp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._middleWebp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._middleMp4 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._cover {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._intact {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_ImageSet, rhs: LarkNCExtensionPB_Entities_ImageSet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        if _storage._origin != rhs_storage._origin {return false}
        if _storage._thumbnail != rhs_storage._thumbnail {return false}
        if _storage._imageKey != rhs_storage._imageKey {return false}
        if _storage._middle != rhs_storage._middle {return false}
        if _storage._thumbnailWebp != rhs_storage._thumbnailWebp {return false}
        if _storage._middleWebp != rhs_storage._middleWebp {return false}
        if _storage._middleMp4 != rhs_storage._middleMp4 {return false}
        if _storage._cover != rhs_storage._cover {return false}
        if _storage._intact != rhs_storage._intact {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_ImageBaseAttribute: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageBaseAttribute"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
    3: .standard(proto: "exif_orientation"),
  ]

  public var isInitialized: Bool {
    if self._width == nil {return false}
    if self._height == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._width)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._height)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._exifOrientation)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._width {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._height {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._exifOrientation {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_ImageBaseAttribute, rhs: LarkNCExtensionPB_Entities_ImageBaseAttribute) -> Bool {
    if lhs._width != rhs._width {return false}
    if lhs._height != rhs._height {return false}
    if lhs._exifOrientation != rhs._exifOrientation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_ImageSetV2: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageSetV2"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "image_key"),
    2: .standard(proto: "fs_unit"),
    3: .same(proto: "crypto"),
    4: .same(proto: "images"),
    5: .standard(proto: "inline_preview"),
  ]

  fileprivate class _StorageClass {
    var _imageKey: String? = nil
    var _fsUnit: String? = nil
    var _crypto: LarkNCExtensionPB_Entities_Crypto? = nil
    var _images: [LarkNCExtensionPB_Entities_ImageSetV2.ImageAttribute] = []
    var _inlinePreview: Data? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _imageKey = source._imageKey
      _fsUnit = source._fsUnit
      _crypto = source._crypto
      _images = source._images
      _inlinePreview = source._inlinePreview
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !LarkHTTP.Internal.areAllInitialized(_storage._images) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._imageKey)
        case 2: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._crypto)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._images)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._inlinePreview)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._imageKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._fsUnit {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._crypto {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._images.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._images, fieldNumber: 4)
      }
      if let v = _storage._inlinePreview {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_ImageSetV2, rhs: LarkNCExtensionPB_Entities_ImageSetV2) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._imageKey != rhs_storage._imageKey {return false}
        if _storage._fsUnit != rhs_storage._fsUnit {return false}
        if _storage._crypto != rhs_storage._crypto {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._inlinePreview != rhs_storage._inlinePreview {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_ImageSetV2.ImageAttribute: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ImageSetV2.protoMessageName + ".ImageAttribute"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "attribute"),
  ]

  fileprivate class _StorageClass {
    var _type: LarkNCExtensionPB_Entities_ImageCropType? = nil
    var _attribute: LarkNCExtensionPB_Entities_ImageBaseAttribute? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _attribute = source._attribute
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type == nil {return false}
      if _storage._attribute == nil {return false}
      if let v = _storage._attribute, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._attribute)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._attribute {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_ImageSetV2.ImageAttribute, rhs: LarkNCExtensionPB_Entities_ImageSetV2.ImageAttribute) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_ImageSetPassThrough: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ImageSetPassThrough"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "key"),
//    2: .standard(proto: "fs_unit"),
//    3: .same(proto: "url"),
//    4: .same(proto: "crypto"),
//    5: .standard(proto: "file_type"),
//    6: .same(proto: "width"),
//    7: .same(proto: "height"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _key: String? = nil
//    var _fsUnit: String? = nil
//    var _url: String? = nil
//    var _crypto: LarkNCExtensionPB_Entities_Crypto? = nil
//    var _fileType: Int32? = nil
//    var _width: Int32? = nil
//    var _height: Int32? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _key = source._key
//      _fsUnit = source._fsUnit
//      _url = source._url
//      _crypto = source._crypto
//      _fileType = source._fileType
//      _width = source._width
//      _height = source._height
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._key == nil {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._key)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._url)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._crypto)
//        case 5: try decoder.decodeSingularInt32Field(value: &_storage._fileType)
//        case 6: try decoder.decodeSingularInt32Field(value: &_storage._width)
//        case 7: try decoder.decodeSingularInt32Field(value: &_storage._height)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._key {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._fsUnit {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._url {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._crypto {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._fileType {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._width {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._height {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ImageSetPassThrough, rhs: LarkNCExtensionPB_Entities_ImageSetPassThrough) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._key != rhs_storage._key {return false}
//        if _storage._fsUnit != rhs_storage._fsUnit {return false}
//        if _storage._url != rhs_storage._url {return false}
//        if _storage._crypto != rhs_storage._crypto {return false}
//        if _storage._fileType != rhs_storage._fileType {return false}
//        if _storage._width != rhs_storage._width {return false}
//        if _storage._height != rhs_storage._height {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_PreviewImageInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".PreviewImageInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "key"),
//    2: .standard(proto: "fs_unit"),
//    3: .same(proto: "crypto"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _key: String? = nil
//    var _fsUnit: String? = nil
//    var _crypto: LarkNCExtensionPB_Entities_Crypto? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _key = source._key
//      _fsUnit = source._fsUnit
//      _crypto = source._crypto
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._key)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._crypto)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._key {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._fsUnit {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._crypto {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_PreviewImageInfo, rhs: LarkNCExtensionPB_Entities_PreviewImageInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._key != rhs_storage._key {return false}
//        if _storage._fsUnit != rhs_storage._fsUnit {return false}
//        if _storage._crypto != rhs_storage._crypto {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_Crypto: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Crypto"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "cipher"),
  ]

  fileprivate class _StorageClass {
    var _type: LarkNCExtensionPB_Entities_Crypto.TypeEnum? = nil
    var _cipher: LarkNCExtensionPB_Entities_Cipher? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _cipher = source._cipher
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._cipher)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._cipher {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_Crypto, rhs: LarkNCExtensionPB_Entities_Crypto) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._cipher != rhs_storage._cipher {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_Crypto.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "AES_256_GCM"),
    2: .same(proto: "AES_CTR"),
    3: .same(proto: "CRYPTO_SDK_UNIFIED"),
    4: .same(proto: "CRYPTO_SDK_DOWNGRADE"),
    5: .same(proto: "CRYPTO_SDK_THIRDPARTY"),
    6: .same(proto: "SM4_128"),
  ]
}

extension LarkNCExtensionPB_Entities_Cipher: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Cipher"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "secret"),
    2: .same(proto: "nonce"),
    3: .standard(proto: "additional_data"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._secret)
      case 2: try decoder.decodeSingularBytesField(value: &self._nonce)
      case 3: try decoder.decodeSingularBytesField(value: &self._additionalData)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._secret {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._nonce {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._additionalData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_Cipher, rhs: LarkNCExtensionPB_Entities_Cipher) -> Bool {
    if lhs._secret != rhs._secret {return false}
    if lhs._nonce != rhs._nonce {return false}
    if lhs._additionalData != rhs._additionalData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_ImageTranslationAbility: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageTranslationAbility"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "can_translate"),
    2: .standard(proto: "src_language"),
  ]

  public var isInitialized: Bool {
    if self._canTranslate == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._canTranslate)
      case 2: try decoder.decodeRepeatedStringField(value: &self.srcLanguage)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._canTranslate {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if !self.srcLanguage.isEmpty {
      try visitor.visitRepeatedStringField(value: self.srcLanguage, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_ImageTranslationAbility, rhs: LarkNCExtensionPB_Entities_ImageTranslationAbility) -> Bool {
    if lhs._canTranslate != rhs._canTranslate {return false}
    if lhs.srcLanguage != rhs.srcLanguage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_ImageTranslationAbilityV2: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageTranslationAbilityV2"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "can_translate"),
    2: .standard(proto: "src_language"),
  ]

  public var isInitialized: Bool {
    if self._canTranslate == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._canTranslate)
      case 2: try decoder.decodeRepeatedStringField(value: &self.srcLanguage)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._canTranslate {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if !self.srcLanguage.isEmpty {
      try visitor.visitRepeatedStringField(value: self.srcLanguage, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_ImageTranslationAbilityV2, rhs: LarkNCExtensionPB_Entities_ImageTranslationAbilityV2) -> Bool {
    if lhs._canTranslate != rhs._canTranslate {return false}
    if lhs.srcLanguage != rhs.srcLanguage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_UrlPreviewHangPoint: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UrlPreviewHangPoint"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "url"),
    2: .standard(proto: "preview_id"),
    3: .standard(proto: "need_local_preview"),
    4: .standard(proto: "is_lazy_load"),
  ]

  public var isInitialized: Bool {
    if self._url == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._url)
      case 2: try decoder.decodeSingularStringField(value: &self._previewID)
      case 3: try decoder.decodeSingularBoolField(value: &self._needLocalPreview)
      case 4: try decoder.decodeSingularBoolField(value: &self._isLazyLoad)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._previewID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._needLocalPreview {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._isLazyLoad {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_UrlPreviewHangPoint, rhs: LarkNCExtensionPB_Entities_UrlPreviewHangPoint) -> Bool {
    if lhs._url != rhs._url {return false}
    if lhs._previewID != rhs._previewID {return false}
    if lhs._needLocalPreview != rhs._needLocalPreview {return false}
    if lhs._isLazyLoad != rhs._isLazyLoad {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_I18nTemplates: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".I18nTemplates"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "i18n_templates"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NTemplates)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.i18NTemplates.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NTemplates, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_I18nTemplates, rhs: LarkNCExtensionPB_Entities_I18nTemplates) -> Bool {
//    if lhs.i18NTemplates != rhs.i18NTemplates {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UrlPreviewEntity: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UrlPreviewEntity"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "source_id"),
//    2: .standard(proto: "preview_id"),
//    3: .same(proto: "locale"),
//    4: .standard(proto: "i18n_icon_key"),
//    5: .standard(proto: "fs_unit"),
//    6: .standard(proto: "i18n_title_key"),
//    7: .standard(proto: "i18n_tag_key"),
//    8: .standard(proto: "locale_i18n_templates"),
//    9: .same(proto: "url"),
//    10: .standard(proto: "need_pull"),
//    11: .same(proto: "version"),
//    12: .same(proto: "body"),
//    13: .same(proto: "actions"),
//    14: .standard(proto: "preview_body"),
//    15: .same(proto: "expires"),
//    16: .standard(proto: "i18n_icons"),
//    17: .standard(proto: "ud_icon"),
//    18: .standard(proto: "title_text_color"),
//    19: .standard(proto: "tag_text_color"),
//    20: .standard(proto: "tag_bg_color"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _sourceID: String? = nil
//    var _previewID: String? = nil
//    var _locale: String? = nil
//    var _i18NIconKey: String? = nil
//    var _fsUnit: String? = nil
//    var _i18NTitleKey: String? = nil
//    var _i18NTagKey: String? = nil
//    var _localeI18NTemplates: Dictionary<String,LarkNCExtensionPB_Entities_I18nTemplates> = [:]
//    var _url: LarkNCExtensionPB_Entities_URL? = nil
//    var _needPull: Bool? = nil
//    var _version: Int32? = nil
//    var _body: Data? = nil
//    var _actions: Dictionary<String,LarkNCExtensionPB_Entities_UrlPreviewAction> = [:]
//    var _previewBody: LarkNCExtensionPB_Entities_URLPreviewBody? = nil
//    var _expires: Int64? = nil
//    var _i18NIcons: Dictionary<String,LarkNCExtensionPB_Entities_ImageSetV2> = [:]
//    var _udIcon: LarkNCExtensionPB_Entities_UDIcon? = nil
//    var _titleTextColor: LarkNCExtensionPB_Entities_ThemeColor? = nil
//    var _tagTextColor: LarkNCExtensionPB_Entities_ThemeColor? = nil
//    var _tagBgColor: LarkNCExtensionPB_Entities_ThemeColor? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _sourceID = source._sourceID
//      _previewID = source._previewID
//      _locale = source._locale
//      _i18NIconKey = source._i18NIconKey
//      _fsUnit = source._fsUnit
//      _i18NTitleKey = source._i18NTitleKey
//      _i18NTagKey = source._i18NTagKey
//      _localeI18NTemplates = source._localeI18NTemplates
//      _url = source._url
//      _needPull = source._needPull
//      _version = source._version
//      _body = source._body
//      _actions = source._actions
//      _previewBody = source._previewBody
//      _expires = source._expires
//      _i18NIcons = source._i18NIcons
//      _udIcon = source._udIcon
//      _titleTextColor = source._titleTextColor
//      _tagTextColor = source._tagTextColor
//      _tagBgColor = source._tagBgColor
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._sourceID == nil {return false}
//      if _storage._previewID == nil {return false}
//      if _storage._locale == nil {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._actions) {return false}
//      if let v = _storage._previewBody, !v.isInitialized {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._i18NIcons) {return false}
//      if let v = _storage._udIcon, !v.isInitialized {return false}
//      if let v = _storage._titleTextColor, !v.isInitialized {return false}
//      if let v = _storage._tagTextColor, !v.isInitialized {return false}
//      if let v = _storage._tagBgColor, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._sourceID)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._previewID)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._locale)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._i18NIconKey)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._i18NTitleKey)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._i18NTagKey)
//        case 8: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_I18nTemplates>.self, value: &_storage._localeI18NTemplates)
//        case 9: try decoder.decodeSingularMessageField(value: &_storage._url)
//        case 10: try decoder.decodeSingularBoolField(value: &_storage._needPull)
//        case 11: try decoder.decodeSingularInt32Field(value: &_storage._version)
//        case 12: try decoder.decodeSingularBytesField(value: &_storage._body)
//        case 13: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_UrlPreviewAction>.self, value: &_storage._actions)
//        case 14: try decoder.decodeSingularMessageField(value: &_storage._previewBody)
//        case 15: try decoder.decodeSingularInt64Field(value: &_storage._expires)
//        case 16: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_ImageSetV2>.self, value: &_storage._i18NIcons)
//        case 17: try decoder.decodeSingularMessageField(value: &_storage._udIcon)
//        case 18: try decoder.decodeSingularMessageField(value: &_storage._titleTextColor)
//        case 19: try decoder.decodeSingularMessageField(value: &_storage._tagTextColor)
//        case 20: try decoder.decodeSingularMessageField(value: &_storage._tagBgColor)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._sourceID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._previewID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._locale {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._i18NIconKey {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._fsUnit {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._i18NTitleKey {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._i18NTagKey {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if !_storage._localeI18NTemplates.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_I18nTemplates>.self, value: _storage._localeI18NTemplates, fieldNumber: 8)
//      }
//      if let v = _storage._url {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._needPull {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._version {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._body {
//        try visitor.visitSingularBytesField(value: v, fieldNumber: 12)
//      }
//      if !_storage._actions.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_UrlPreviewAction>.self, value: _storage._actions, fieldNumber: 13)
//      }
//      if let v = _storage._previewBody {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._expires {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 15)
//      }
//      if !_storage._i18NIcons.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_ImageSetV2>.self, value: _storage._i18NIcons, fieldNumber: 16)
//      }
//      if let v = _storage._udIcon {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
//      }
//      if let v = _storage._titleTextColor {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
//      }
//      if let v = _storage._tagTextColor {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
//      }
//      if let v = _storage._tagBgColor {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UrlPreviewEntity, rhs: LarkNCExtensionPB_Entities_UrlPreviewEntity) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._sourceID != rhs_storage._sourceID {return false}
//        if _storage._previewID != rhs_storage._previewID {return false}
//        if _storage._locale != rhs_storage._locale {return false}
//        if _storage._i18NIconKey != rhs_storage._i18NIconKey {return false}
//        if _storage._fsUnit != rhs_storage._fsUnit {return false}
//        if _storage._i18NTitleKey != rhs_storage._i18NTitleKey {return false}
//        if _storage._i18NTagKey != rhs_storage._i18NTagKey {return false}
//        if _storage._localeI18NTemplates != rhs_storage._localeI18NTemplates {return false}
//        if _storage._url != rhs_storage._url {return false}
//        if _storage._needPull != rhs_storage._needPull {return false}
//        if _storage._version != rhs_storage._version {return false}
//        if _storage._body != rhs_storage._body {return false}
//        if _storage._actions != rhs_storage._actions {return false}
//        if _storage._previewBody != rhs_storage._previewBody {return false}
//        if _storage._expires != rhs_storage._expires {return false}
//        if _storage._i18NIcons != rhs_storage._i18NIcons {return false}
//        if _storage._udIcon != rhs_storage._udIcon {return false}
//        if _storage._titleTextColor != rhs_storage._titleTextColor {return false}
//        if _storage._tagTextColor != rhs_storage._tagTextColor {return false}
//        if _storage._tagBgColor != rhs_storage._tagBgColor {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UrlPreviewAction: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UrlPreviewAction"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "url"),
//    2: .same(proto: "method"),
//    3: .same(proto: "parameters"),
//    4: .same(proto: "cmd"),
//    5: .same(proto: "packet"),
//    6: .standard(proto: "open_url"),
//    7: .standard(proto: "fallback_action_id"),
//    1000: .same(proto: "get"),
//    1001: .same(proto: "post"),
//    1002: .same(proto: "command"),
//    1003: .standard(proto: "open_url_v2"),
//    1004: .standard(proto: "switch_state"),
//    1005: .standard(proto: "show_toast"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _url: String? = nil
//    var _method: LarkNCExtensionPB_Entities_UrlPreviewAction.Method? = nil
//    var _parameters: LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters? = nil
//    var _cmd: LarkNCExtensionPB_Improto_Command? = nil
//    var _packet: LarkNCExtensionPB_Entities_CardActionPacket? = nil
//    var _openURL: LarkNCExtensionPB_Entities_URL? = nil
//    var _fallbackActionID: String? = nil
//    var _action: LarkNCExtensionPB_Entities_UrlPreviewAction.OneOf_Action?
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _url = source._url
//      _method = source._method
//      _parameters = source._parameters
//      _cmd = source._cmd
//      _packet = source._packet
//      _openURL = source._openURL
//      _fallbackActionID = source._fallbackActionID
//      _action = source._action
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._url == nil {return false}
//      if _storage._method == nil {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._url)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._method)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._parameters)
//        case 4: try decoder.decodeSingularEnumField(value: &_storage._cmd)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._packet)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._openURL)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._fallbackActionID)
//        case 1000:
//          var v: LarkNCExtensionPB_Entities_UrlPreviewAction.GetAction?
//          if let current = _storage._action {
//            try decoder.handleConflictingOneOf()
//            if case .get(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._action = .get(v)}
//        case 1001:
//          var v: LarkNCExtensionPB_Entities_UrlPreviewAction.PostAction?
//          if let current = _storage._action {
//            try decoder.handleConflictingOneOf()
//            if case .post(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._action = .post(v)}
//        case 1002:
//          var v: LarkNCExtensionPB_Entities_UrlPreviewAction.LarkCommandAction?
//          if let current = _storage._action {
//            try decoder.handleConflictingOneOf()
//            if case .command(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._action = .command(v)}
//        case 1003:
//          var v: LarkNCExtensionPB_Entities_UrlPreviewAction.OpenURLAction?
//          if let current = _storage._action {
//            try decoder.handleConflictingOneOf()
//            if case .openURLV2(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._action = .openURLV2(v)}
//        case 1004:
//          var v: LarkNCExtensionPB_Entities_UrlPreviewAction.SwitchStateAction?
//          if let current = _storage._action {
//            try decoder.handleConflictingOneOf()
//            if case .switchState(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._action = .switchState(v)}
//        case 1005:
//          var v: LarkNCExtensionPB_Entities_UrlPreviewAction.ShowToastAction?
//          if let current = _storage._action {
//            try decoder.handleConflictingOneOf()
//            if case .showToast(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._action = .showToast(v)}
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._url {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._method {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._parameters {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._cmd {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._packet {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._openURL {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._fallbackActionID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      switch _storage._action {
//      case .get(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1000)
//      case .post(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
//      case .command(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1002)
//      case .openURLV2(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1003)
//      case .switchState(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1004)
//      case .showToast(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1005)
//      case nil: break
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UrlPreviewAction, rhs: LarkNCExtensionPB_Entities_UrlPreviewAction) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._url != rhs_storage._url {return false}
//        if _storage._method != rhs_storage._method {return false}
//        if _storage._parameters != rhs_storage._parameters {return false}
//        if _storage._cmd != rhs_storage._cmd {return false}
//        if _storage._packet != rhs_storage._packet {return false}
//        if _storage._openURL != rhs_storage._openURL {return false}
//        if _storage._fallbackActionID != rhs_storage._fallbackActionID {return false}
//        if _storage._action != rhs_storage._action {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UrlPreviewAction.Method: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "GET"),
//    2: .same(proto: "POST"),
//    3: .same(proto: "LARK_COMMAND"),
//    4: .same(proto: "OPEN_URL"),
//    5: .same(proto: "SWITCH_STATE"),
//    6: .same(proto: "SHOW_TOAST"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_UrlPreviewAction.protoMessageName + ".Parameters"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "parameters"),
//    2: .standard(proto: "user_id"),
//    3: .standard(proto: "source_id"),
//    4: .standard(proto: "preview_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.parameters)
//      case 2: try decoder.decodeSingularStringField(value: &self._userID)
//      case 3: try decoder.decodeSingularStringField(value: &self._sourceID)
//      case 4: try decoder.decodeSingularStringField(value: &self._previewID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.parameters.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.parameters, fieldNumber: 1)
//    }
//    if let v = self._userID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._sourceID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._previewID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters, rhs: LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters) -> Bool {
//    if lhs.parameters != rhs.parameters {return false}
//    if lhs._userID != rhs._userID {return false}
//    if lhs._sourceID != rhs._sourceID {return false}
//    if lhs._previewID != rhs._previewID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UrlPreviewAction.GetAction: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_UrlPreviewAction.protoMessageName + ".GetAction"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "parameters"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _parameters: LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _parameters = source._parameters
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._parameters)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._parameters {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UrlPreviewAction.GetAction, rhs: LarkNCExtensionPB_Entities_UrlPreviewAction.GetAction) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._parameters != rhs_storage._parameters {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UrlPreviewAction.PostAction: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_UrlPreviewAction.protoMessageName + ".PostAction"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "parameters"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _parameters: LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _parameters = source._parameters
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._parameters)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._parameters {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UrlPreviewAction.PostAction, rhs: LarkNCExtensionPB_Entities_UrlPreviewAction.PostAction) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._parameters != rhs_storage._parameters {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UrlPreviewAction.LarkCommandAction: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_UrlPreviewAction.protoMessageName + ".LarkCommandAction"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "cmd"),
//    2: .same(proto: "packet"),
//    3: .same(proto: "parameters"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _cmd: LarkNCExtensionPB_Improto_Command? = nil
//    var _packet: LarkNCExtensionPB_Entities_CardActionPacket? = nil
//    var _parameters: LarkNCExtensionPB_Entities_UrlPreviewAction.Parameters? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _cmd = source._cmd
//      _packet = source._packet
//      _parameters = source._parameters
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._cmd)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._packet)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._parameters)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._cmd {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._packet {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._parameters {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UrlPreviewAction.LarkCommandAction, rhs: LarkNCExtensionPB_Entities_UrlPreviewAction.LarkCommandAction) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._cmd != rhs_storage._cmd {return false}
//        if _storage._packet != rhs_storage._packet {return false}
//        if _storage._parameters != rhs_storage._parameters {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UrlPreviewAction.OpenURLAction: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_UrlPreviewAction.protoMessageName + ".OpenURLAction"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "open_url"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _openURL: LarkNCExtensionPB_Entities_URL? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _openURL = source._openURL
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._openURL)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._openURL {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UrlPreviewAction.OpenURLAction, rhs: LarkNCExtensionPB_Entities_UrlPreviewAction.OpenURLAction) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._openURL != rhs_storage._openURL {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UrlPreviewAction.SwitchStateAction: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_UrlPreviewAction.protoMessageName + ".SwitchStateAction"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "next_state_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._nextStateID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._nextStateID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UrlPreviewAction.SwitchStateAction, rhs: LarkNCExtensionPB_Entities_UrlPreviewAction.SwitchStateAction) -> Bool {
//    if lhs._nextStateID != rhs._nextStateID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UrlPreviewAction.ShowToastAction: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_UrlPreviewAction.protoMessageName + ".ShowToastAction"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .same(proto: "content"),
//    3: .same(proto: "duration"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._type)
//      case 2: try decoder.decodeSingularStringField(value: &self._content)
//      case 3: try decoder.decodeSingularInt32Field(value: &self._duration)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._content {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._duration {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UrlPreviewAction.ShowToastAction, rhs: LarkNCExtensionPB_Entities_UrlPreviewAction.ShowToastAction) -> Bool {
//    if lhs._type != rhs._type {return false}
//    if lhs._content != rhs._content {return false}
//    if lhs._duration != rhs._duration {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UrlPreviewAction.ShowToastAction.ToastType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "success"),
//    2: .same(proto: "error"),
//    3: .same(proto: "info"),
//    4: .same(proto: "warning"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponents: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".URLPreviewComponents"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "root_ids"),
//    2: .same(proto: "elements"),
//    3: .standard(proto: "image_ids"),
//    4: .standard(proto: "at_ids"),
//    5: .standard(proto: "button_ids"),
//    6: .standard(proto: "richtext_ids"),
//  ]
//
//  public var isInitialized: Bool {
//    if !LarkHTTP.Internal.areAllInitialized(self.elements) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedStringField(value: &self.rootIds)
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_URLPreviewComponent>.self, value: &self.elements)
//      case 3: try decoder.decodeRepeatedStringField(value: &self.imageIds)
//      case 4: try decoder.decodeRepeatedStringField(value: &self.atIds)
//      case 5: try decoder.decodeRepeatedStringField(value: &self.buttonIds)
//      case 6: try decoder.decodeRepeatedStringField(value: &self.richtextIds)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.rootIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.rootIds, fieldNumber: 1)
//    }
//    if !self.elements.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_URLPreviewComponent>.self, value: self.elements, fieldNumber: 2)
//    }
//    if !self.imageIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.imageIds, fieldNumber: 3)
//    }
//    if !self.atIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.atIds, fieldNumber: 4)
//    }
//    if !self.buttonIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.buttonIds, fieldNumber: 5)
//    }
//    if !self.richtextIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.richtextIds, fieldNumber: 6)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponents, rhs: LarkNCExtensionPB_Entities_URLPreviewComponents) -> Bool {
//    if lhs.rootIds != rhs.rootIds {return false}
//    if lhs.elements != rhs.elements {return false}
//    if lhs.imageIds != rhs.imageIds {return false}
//    if lhs.atIds != rhs.atIds {return false}
//    if lhs.buttonIds != rhs.buttonIds {return false}
//    if lhs.richtextIds != rhs.richtextIds {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewBody: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".URLPreviewBody"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "components"),
//    2: .same(proto: "actions"),
//    3: .standard(proto: "card_url"),
//    4: .standard(proto: "current_state_id"),
//    5: .same(proto: "states"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _components: LarkNCExtensionPB_Entities_URLPreviewComponents? = nil
//    var _actions: Dictionary<String,LarkNCExtensionPB_Entities_UrlPreviewAction> = [:]
//    var _cardURL: LarkNCExtensionPB_Entities_URL? = nil
//    var _currentStateID: String? = nil
//    var _states: Dictionary<String,LarkNCExtensionPB_Entities_URLPreviewState> = [:]
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _components = source._components
//      _actions = source._actions
//      _cardURL = source._cardURL
//      _currentStateID = source._currentStateID
//      _states = source._states
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._components, !v.isInitialized {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._actions) {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._states) {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._components)
//        case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_UrlPreviewAction>.self, value: &_storage._actions)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._cardURL)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._currentStateID)
//        case 5: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_URLPreviewState>.self, value: &_storage._states)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._components {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if !_storage._actions.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_UrlPreviewAction>.self, value: _storage._actions, fieldNumber: 2)
//      }
//      if let v = _storage._cardURL {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._currentStateID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if !_storage._states.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_URLPreviewState>.self, value: _storage._states, fieldNumber: 5)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewBody, rhs: LarkNCExtensionPB_Entities_URLPreviewBody) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._components != rhs_storage._components {return false}
//        if _storage._actions != rhs_storage._actions {return false}
//        if _storage._cardURL != rhs_storage._cardURL {return false}
//        if _storage._currentStateID != rhs_storage._currentStateID {return false}
//        if _storage._states != rhs_storage._states {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ThemeColor: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ThemeColor"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "token"),
//    2: .same(proto: "key"),
//    3: .same(proto: "value"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _token: String? = nil
//    var _key: LarkNCExtensionPB_Entities_ThemeColor.Key? = nil
//    var _value: UInt32? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _token = source._token
//      _key = source._key
//      _value = source._value
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._key, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._token)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._key)
//        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._value)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._token {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._key {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._value {
//        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ThemeColor, rhs: LarkNCExtensionPB_Entities_ThemeColor) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._token != rhs_storage._token {return false}
//        if _storage._key != rhs_storage._key {return false}
//        if _storage._value != rhs_storage._value {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ThemeColor.KeyType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "N"),
//    1: .same(proto: "B"),
//    2: .same(proto: "W"),
//    3: .same(proto: "T"),
//    4: .same(proto: "G"),
//    5: .same(proto: "L"),
//    6: .same(proto: "Y"),
//    7: .same(proto: "S"),
//    8: .same(proto: "O"),
//    9: .same(proto: "R"),
//    10: .same(proto: "C"),
//    11: .same(proto: "V"),
//    12: .same(proto: "P"),
//    13: .same(proto: "I"),
//    14: .same(proto: "STATIC_WHITE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ThemeColor.Key: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ThemeColor.protoMessageName + ".Key"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .same(proto: "value"),
//    3: .same(proto: "alpha"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._type == nil {return false}
//    if self._value == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._type)
//      case 2: try decoder.decodeSingularUInt32Field(value: &self._value)
//      case 3: try decoder.decodeSingularUInt32Field(value: &self._alpha)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._value {
//      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._alpha {
//      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ThemeColor.Key, rhs: LarkNCExtensionPB_Entities_ThemeColor.Key) -> Bool {
//    if lhs._type != rhs._type {return false}
//    if lhs._value != rhs._value {return false}
//    if lhs._alpha != rhs._alpha {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Gradient: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Gradient"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .same(proto: "linear"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _type: LarkNCExtensionPB_Entities_Gradient.TypeEnum? = nil
//    var _content: LarkNCExtensionPB_Entities_Gradient.OneOf_Content?
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _type = source._type
//      _content = source._content
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if case .linear(let v)? = _storage._content, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 2:
//          var v: LarkNCExtensionPB_Entities_Gradient.Linear?
//          if let current = _storage._content {
//            try decoder.handleConflictingOneOf()
//            if case .linear(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._content = .linear(v)}
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if case .linear(let v)? = _storage._content {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Gradient, rhs: LarkNCExtensionPB_Entities_Gradient) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._content != rhs_storage._content {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Gradient.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "LINEAR"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_Gradient.Linear: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_Gradient.protoMessageName + ".Linear"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "deg"),
//    2: .same(proto: "colors"),
//    3: .standard(proto: "colors_v2"),
//    4: .standard(proto: "colors_v3"),
//  ]
//
//  public var isInitialized: Bool {
//    if !LarkHTTP.Internal.areAllInitialized(self.colorsV3) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt32Field(value: &self._deg)
//      case 2: try decoder.decodeRepeatedInt32Field(value: &self.colors)
//      case 3: try decoder.decodeRepeatedUInt32Field(value: &self.colorsV2)
//      case 4: try decoder.decodeRepeatedMessageField(value: &self.colorsV3)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._deg {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//    }
//    if !self.colors.isEmpty {
//      try visitor.visitRepeatedInt32Field(value: self.colors, fieldNumber: 2)
//    }
//    if !self.colorsV2.isEmpty {
//      try visitor.visitRepeatedUInt32Field(value: self.colorsV2, fieldNumber: 3)
//    }
//    if !self.colorsV3.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.colorsV3, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Gradient.Linear, rhs: LarkNCExtensionPB_Entities_Gradient.Linear) -> Bool {
//    if lhs._deg != rhs._deg {return false}
//    if lhs.colors != rhs.colors {return false}
//    if lhs.colorsV2 != rhs.colorsV2 {return false}
//    if lhs.colorsV3 != rhs.colorsV3 {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Border: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Border"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "width"),
//    2: .same(proto: "color"),
//    3: .standard(proto: "corner_radius"),
//    4: .standard(proto: "color_v2"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _width: Float? = nil
//    var _color: UInt32? = nil
//    var _cornerRadius: Float? = nil
//    var _colorV2: LarkNCExtensionPB_Entities_ThemeColor? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _width = source._width
//      _color = source._color
//      _cornerRadius = source._cornerRadius
//      _colorV2 = source._colorV2
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._colorV2, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularFloatField(value: &_storage._width)
//        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._color)
//        case 3: try decoder.decodeSingularFloatField(value: &_storage._cornerRadius)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._colorV2)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._width {
//        try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._color {
//        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._cornerRadius {
//        try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._colorV2 {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Border, rhs: LarkNCExtensionPB_Entities_Border) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._width != rhs_storage._width {return false}
//        if _storage._color != rhs_storage._color {return false}
//        if _storage._cornerRadius != rhs_storage._cornerRadius {return false}
//        if _storage._colorV2 != rhs_storage._colorV2 {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UDIcon: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UDIcon"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "key"),
//    2: .same(proto: "color"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _key: String? = nil
//    var _color: LarkNCExtensionPB_Entities_ThemeColor? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _key = source._key
//      _color = source._color
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._color, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._key)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._color)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._key {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._color {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UDIcon, rhs: LarkNCExtensionPB_Entities_UDIcon) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._key != rhs_storage._key {return false}
//        if _storage._color != rhs_storage._color {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewTemplate: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".URLPreviewTemplate"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "template_id"),
//    2: .standard(proto: "root_component_id"),
//    3: .same(proto: "elements"),
//    4: .standard(proto: "image_ids"),
//    5: .standard(proto: "at_ids"),
//    6: .standard(proto: "button_ids"),
//    7: .standard(proto: "richtext_ids"),
//    8: .same(proto: "expires"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._templateID == nil {return false}
//    if !LarkHTTP.Internal.areAllInitialized(self.elements) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._templateID)
//      case 2: try decoder.decodeSingularStringField(value: &self._rootComponentID)
//      case 3: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_URLPreviewComponent>.self, value: &self.elements)
//      case 4: try decoder.decodeRepeatedStringField(value: &self.imageIds)
//      case 5: try decoder.decodeRepeatedStringField(value: &self.atIds)
//      case 6: try decoder.decodeRepeatedStringField(value: &self.buttonIds)
//      case 7: try decoder.decodeRepeatedStringField(value: &self.richtextIds)
//      case 8: try decoder.decodeSingularInt64Field(value: &self._expires)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._templateID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._rootComponentID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if !self.elements.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_URLPreviewComponent>.self, value: self.elements, fieldNumber: 3)
//    }
//    if !self.imageIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.imageIds, fieldNumber: 4)
//    }
//    if !self.atIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.atIds, fieldNumber: 5)
//    }
//    if !self.buttonIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.buttonIds, fieldNumber: 6)
//    }
//    if !self.richtextIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.richtextIds, fieldNumber: 7)
//    }
//    if let v = self._expires {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 8)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewTemplate, rhs: LarkNCExtensionPB_Entities_URLPreviewTemplate) -> Bool {
//    if lhs._templateID != rhs._templateID {return false}
//    if lhs._rootComponentID != rhs._rootComponentID {return false}
//    if lhs.elements != rhs.elements {return false}
//    if lhs.imageIds != rhs.imageIds {return false}
//    if lhs.atIds != rhs.atIds {return false}
//    if lhs.buttonIds != rhs.buttonIds {return false}
//    if lhs.richtextIds != rhs.richtextIds {return false}
//    if lhs._expires != rhs._expires {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_PreviewData: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".PreviewData"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "str"),
//    2: .same(proto: "i32"),
//    3: .same(proto: "i64"),
//    4: .same(proto: "b"),
//    5: .same(proto: "f"),
//    6: .standard(proto: "image_set_v2"),
//    7: .same(proto: "items"),
//    8: .standard(proto: "theme_color"),
//    9: .same(proto: "padding"),
//    10: .standard(proto: "theme_colors"),
//    11: .standard(proto: "layout_value"),
//    12: .standard(proto: "chatter_infos"),
//    13: .standard(proto: "string_list"),
//    14: .standard(proto: "chatter_info"),
//    15: .standard(proto: "font_level"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _value: LarkNCExtensionPB_Entities_PreviewData.OneOf_Value?
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _value = source._value
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      switch _storage._value {
//      case .imageSetV2(let v)?: if !v.isInitialized {return false}
//      case .themeColor(let v)?: if !v.isInitialized {return false}
//      case .themeColors(let v)?: if !v.isInitialized {return false}
//      default: break
//      }
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1:
//          if _storage._value != nil {try decoder.handleConflictingOneOf()}
//          var v: String?
//          try decoder.decodeSingularStringField(value: &v)
//          if let v = v {_storage._value = .str(v)}
//        case 2:
//          if _storage._value != nil {try decoder.handleConflictingOneOf()}
//          var v: Int32?
//          try decoder.decodeSingularInt32Field(value: &v)
//          if let v = v {_storage._value = .i32(v)}
//        case 3:
//          if _storage._value != nil {try decoder.handleConflictingOneOf()}
//          var v: Int64?
//          try decoder.decodeSingularInt64Field(value: &v)
//          if let v = v {_storage._value = .i64(v)}
//        case 4:
//          if _storage._value != nil {try decoder.handleConflictingOneOf()}
//          var v: Bool?
//          try decoder.decodeSingularBoolField(value: &v)
//          if let v = v {_storage._value = .b(v)}
//        case 5:
//          if _storage._value != nil {try decoder.handleConflictingOneOf()}
//          var v: Float?
//          try decoder.decodeSingularFloatField(value: &v)
//          if let v = v {_storage._value = .f(v)}
//        case 6:
//          var v: LarkNCExtensionPB_Entities_ImageSetV2?
//          if let current = _storage._value {
//            try decoder.handleConflictingOneOf()
//            if case .imageSetV2(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._value = .imageSetV2(v)}
//        case 7:
//          var v: LarkNCExtensionPB_Entities_PreviewData.Items?
//          if let current = _storage._value {
//            try decoder.handleConflictingOneOf()
//            if case .items(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._value = .items(v)}
//        case 8:
//          var v: LarkNCExtensionPB_Entities_ThemeColor?
//          if let current = _storage._value {
//            try decoder.handleConflictingOneOf()
//            if case .themeColor(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._value = .themeColor(v)}
//        case 9:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.Padding?
//          if let current = _storage._value {
//            try decoder.handleConflictingOneOf()
//            if case .padding(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._value = .padding(v)}
//        case 10:
//          var v: LarkNCExtensionPB_Entities_PreviewData.ThemeColors?
//          if let current = _storage._value {
//            try decoder.handleConflictingOneOf()
//            if case .themeColors(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._value = .themeColors(v)}
//        case 11:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.Value?
//          if let current = _storage._value {
//            try decoder.handleConflictingOneOf()
//            if case .layoutValue(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._value = .layoutValue(v)}
//        case 12:
//          var v: LarkNCExtensionPB_Entities_PreviewData.ChatterInfos?
//          if let current = _storage._value {
//            try decoder.handleConflictingOneOf()
//            if case .chatterInfos(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._value = .chatterInfos(v)}
//        case 13:
//          var v: LarkNCExtensionPB_Entities_PreviewData.StringList?
//          if let current = _storage._value {
//            try decoder.handleConflictingOneOf()
//            if case .stringList(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._value = .stringList(v)}
//        case 14:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty.ChatterInfo?
//          if let current = _storage._value {
//            try decoder.handleConflictingOneOf()
//            if case .chatterInfo(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._value = .chatterInfo(v)}
//        case 15:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.FontLevel?
//          if let current = _storage._value {
//            try decoder.handleConflictingOneOf()
//            if case .fontLevel(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._value = .fontLevel(v)}
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      switch _storage._value {
//      case .str(let v)?:
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      case .i32(let v)?:
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//      case .i64(let v)?:
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      case .b(let v)?:
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//      case .f(let v)?:
//        try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
//      case .imageSetV2(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      case .items(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      case .themeColor(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
//      case .padding(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
//      case .themeColors(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
//      case .layoutValue(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
//      case .chatterInfos(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
//      case .stringList(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
//      case .chatterInfo(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
//      case .fontLevel(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
//      case nil: break
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_PreviewData, rhs: LarkNCExtensionPB_Entities_PreviewData) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._value != rhs_storage._value {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_PreviewData.Items: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_PreviewData.protoMessageName + ".Items"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "items"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.items)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.items.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_PreviewData.Items, rhs: LarkNCExtensionPB_Entities_PreviewData.Items) -> Bool {
//    if lhs.items != rhs.items {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_PreviewData.ThemeColors: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_PreviewData.protoMessageName + ".ThemeColors"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "colors"),
//  ]
//
//  public var isInitialized: Bool {
//    if !LarkHTTP.Internal.areAllInitialized(self.colors) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.colors)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.colors.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.colors, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_PreviewData.ThemeColors, rhs: LarkNCExtensionPB_Entities_PreviewData.ThemeColors) -> Bool {
//    if lhs.colors != rhs.colors {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_PreviewData.ChatterInfos: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_PreviewData.protoMessageName + ".ChatterInfos"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "chatter_infos"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.chatterInfos)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.chatterInfos.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.chatterInfos, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_PreviewData.ChatterInfos, rhs: LarkNCExtensionPB_Entities_PreviewData.ChatterInfos) -> Bool {
//    if lhs.chatterInfos != rhs.chatterInfos {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_PreviewData.StringList: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_PreviewData.protoMessageName + ".StringList"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "string_list"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedStringField(value: &self.stringList)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.stringList.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.stringList, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_PreviewData.StringList, rhs: LarkNCExtensionPB_Entities_PreviewData.StringList) -> Bool {
//    if lhs.stringList != rhs.stringList {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewPropertyData: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".URLPreviewPropertyData"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .standard(proto: "preview_property_data"),
//    3: .standard(proto: "rich_text"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _type: LarkNCExtensionPB_Entities_URLPreviewComponent.TypeEnum? = nil
//    var _previewPropertyData: Dictionary<Int32,LarkNCExtensionPB_Entities_PreviewData> = [:]
//    var _richText: LarkNCExtensionPB_Entities_RichText? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _type = source._type
//      _previewPropertyData = source._previewPropertyData
//      _richText = source._richText
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._type == nil {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._previewPropertyData) {return false}
//      if let v = _storage._richText, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufInt32,LarkNCExtensionPB_Entities_PreviewData>.self, value: &_storage._previewPropertyData)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._richText)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if !_storage._previewPropertyData.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufInt32,LarkNCExtensionPB_Entities_PreviewData>.self, value: _storage._previewPropertyData, fieldNumber: 2)
//      }
//      if let v = _storage._richText {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewPropertyData, rhs: LarkNCExtensionPB_Entities_URLPreviewPropertyData) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._previewPropertyData != rhs_storage._previewPropertyData {return false}
//        if _storage._richText != rhs_storage._richText {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewStyleData: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".URLPreviewStyleData"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    2: .standard(proto: "preview_style_data"),
//  ]
//
//  public var isInitialized: Bool {
//    if !LarkHTTP.Internal.areAllInitialized(self.previewStyleData) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufInt32,LarkNCExtensionPB_Entities_PreviewData>.self, value: &self.previewStyleData)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.previewStyleData.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufInt32,LarkNCExtensionPB_Entities_PreviewData>.self, value: self.previewStyleData, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewStyleData, rhs: LarkNCExtensionPB_Entities_URLPreviewStyleData) -> Bool {
//    if lhs.previewStyleData != rhs.previewStyleData {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewState: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".URLPreviewState"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .standard(proto: "template_id"),
//    3: .standard(proto: "card_url"),
//    4: .same(proto: "actions"),
//    5: .same(proto: "styles"),
//    6: .same(proto: "properties"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _type: LarkNCExtensionPB_Entities_URLPreviewState.TypeEnum? = nil
//    var _templateID: String? = nil
//    var _cardURL: LarkNCExtensionPB_Entities_URL? = nil
//    var _actions: Dictionary<String,LarkNCExtensionPB_Entities_UrlPreviewAction> = [:]
//    var _styles: Dictionary<String,LarkNCExtensionPB_Entities_URLPreviewStyleData> = [:]
//    var _properties: Dictionary<String,LarkNCExtensionPB_Entities_URLPreviewPropertyData> = [:]
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _type = source._type
//      _templateID = source._templateID
//      _cardURL = source._cardURL
//      _actions = source._actions
//      _styles = source._styles
//      _properties = source._properties
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._type == nil {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._actions) {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._styles) {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._properties) {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._templateID)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._cardURL)
//        case 4: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_UrlPreviewAction>.self, value: &_storage._actions)
//        case 5: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_URLPreviewStyleData>.self, value: &_storage._styles)
//        case 6: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_URLPreviewPropertyData>.self, value: &_storage._properties)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._templateID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._cardURL {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if !_storage._actions.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_UrlPreviewAction>.self, value: _storage._actions, fieldNumber: 4)
//      }
//      if !_storage._styles.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_URLPreviewStyleData>.self, value: _storage._styles, fieldNumber: 5)
//      }
//      if !_storage._properties.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_URLPreviewPropertyData>.self, value: _storage._properties, fieldNumber: 6)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewState, rhs: LarkNCExtensionPB_Entities_URLPreviewState) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._templateID != rhs_storage._templateID {return false}
//        if _storage._cardURL != rhs_storage._cardURL {return false}
//        if _storage._actions != rhs_storage._actions {return false}
//        if _storage._styles != rhs_storage._styles {return false}
//        if _storage._properties != rhs_storage._properties {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewState.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "CARD"),
//    1: .same(proto: "ALERT"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_URLPreviewProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".URLPreviewProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1000: .same(proto: "empty"),
//    1501: .same(proto: "header"),
//    1502: .same(proto: "richtext"),
//    1503: .same(proto: "image"),
//    1504: .standard(proto: "chatters_preview"),
//    1505: .same(proto: "button"),
//    1506: .standard(proto: "icon_button"),
//    1507: .standard(proto: "text_button"),
//    1508: .same(proto: "time"),
//    1509: .same(proto: "text"),
//    1510: .standard(proto: "tag_list"),
//    1511: .standard(proto: "spin_button"),
//    1512: .same(proto: "avatar"),
//    1513: .same(proto: "video"),
//    1514: .standard(proto: "card_container"),
//    1515: .standard(proto: "doc_image"),
//    1516: .same(proto: "loading"),
//    1: .same(proto: "type"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _urlpreviewComponentProperty: LarkNCExtensionPB_Entities_URLPreviewProperty.OneOf_UrlpreviewComponentProperty?
//    var _type: LarkNCExtensionPB_Entities_URLPreviewComponent.TypeEnum? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _urlpreviewComponentProperty = source._urlpreviewComponentProperty
//      _type = source._type
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._type == nil {return false}
//      switch _storage._urlpreviewComponentProperty {
//      case .header(let v)?: if !v.isInitialized {return false}
//      case .richtext(let v)?: if !v.isInitialized {return false}
//      case .image(let v)?: if !v.isInitialized {return false}
//      case .button(let v)?: if !v.isInitialized {return false}
//      case .iconButton(let v)?: if !v.isInitialized {return false}
//      case .time(let v)?: if !v.isInitialized {return false}
//      case .spinButton(let v)?: if !v.isInitialized {return false}
//      case .video(let v)?: if !v.isInitialized {return false}
//      case .cardContainer(let v)?: if !v.isInitialized {return false}
//      default: break
//      }
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 1000:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.EmptyProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .empty(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .empty(v)}
//        case 1501:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.PreviewHeaderProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .header(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .header(v)}
//        case 1502:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.RichTextProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .richtext(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .richtext(v)}
//        case 1503:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.ImageProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .image(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .image(v)}
//        case 1504:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .chattersPreview(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .chattersPreview(v)}
//        case 1505:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.ButtonProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .button(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .button(v)}
//        case 1506:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.IconButtonProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .iconButton(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .iconButton(v)}
//        case 1507:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.TextButtonProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .textButton(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .textButton(v)}
//        case 1508:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.TimeProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .time(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .time(v)}
//        case 1509:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.TextProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .text(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .text(v)}
//        case 1510:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.TagListProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .tagList(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .tagList(v)}
//        case 1511:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.SpinButtonProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .spinButton(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .spinButton(v)}
//        case 1512:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .avatar(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .avatar(v)}
//        case 1513:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.VideoProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .video(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .video(v)}
//        case 1514:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.CardContainerProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .cardContainer(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .cardContainer(v)}
//        case 1515:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.DocImageProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .docImage(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .docImage(v)}
//        case 1516:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.LoadingProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .loading(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .loading(v)}
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      switch _storage._urlpreviewComponentProperty {
//      case .empty(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1000)
//      case .header(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1501)
//      case .richtext(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1502)
//      case .image(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1503)
//      case .chattersPreview(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1504)
//      case .button(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1505)
//      case .iconButton(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1506)
//      case .textButton(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1507)
//      case .time(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1508)
//      case .text(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1509)
//      case .tagList(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1510)
//      case .spinButton(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1511)
//      case .avatar(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1512)
//      case .video(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1513)
//      case .cardContainer(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1514)
//      case .docImage(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1515)
//      case .loading(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1516)
//      case nil: break
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewProperty) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._urlpreviewComponentProperty != rhs_storage._urlpreviewComponentProperty {return false}
//        if _storage._type != rhs_storage._type {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".URLPreviewComponent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .standard(proto: "can_skip_when_unknown"),
//    3: .same(proto: "style"),
//    4: .standard(proto: "child_ids"),
//    5: .standard(proto: "is_font_zoomable"),
//    1000: .same(proto: "empty"),
//    1001: .standard(proto: "linear_layout"),
//    1501: .same(proto: "header"),
//    1502: .same(proto: "richtext"),
//    1503: .same(proto: "image"),
//    1504: .standard(proto: "chatters_preview"),
//    1505: .same(proto: "button"),
//    1506: .standard(proto: "icon_button"),
//    1507: .standard(proto: "text_button"),
//    1508: .same(proto: "time"),
//    1509: .same(proto: "text"),
//    1510: .standard(proto: "tag_list"),
//    1511: .standard(proto: "spin_button"),
//    1512: .same(proto: "avatar"),
//    1513: .same(proto: "video"),
//    1514: .standard(proto: "card_container"),
//    1515: .standard(proto: "doc_image"),
//    1516: .same(proto: "loading"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _type: LarkNCExtensionPB_Entities_URLPreviewComponent.TypeEnum? = nil
//    var _canSkipWhenUnknown: Bool? = nil
//    var _style: LarkNCExtensionPB_Entities_URLPreviewComponent.Style? = nil
//    var _childIds: [String] = []
//    var _isFontZoomable: Bool? = nil
//    var _urlpreviewComponentProperty: LarkNCExtensionPB_Entities_URLPreviewComponent.OneOf_UrlpreviewComponentProperty?
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _type = source._type
//      _canSkipWhenUnknown = source._canSkipWhenUnknown
//      _style = source._style
//      _childIds = source._childIds
//      _isFontZoomable = source._isFontZoomable
//      _urlpreviewComponentProperty = source._urlpreviewComponentProperty
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._type == nil {return false}
//      if let v = _storage._style, !v.isInitialized {return false}
//      switch _storage._urlpreviewComponentProperty {
//      case .header(let v)?: if !v.isInitialized {return false}
//      case .richtext(let v)?: if !v.isInitialized {return false}
//      case .image(let v)?: if !v.isInitialized {return false}
//      case .button(let v)?: if !v.isInitialized {return false}
//      case .iconButton(let v)?: if !v.isInitialized {return false}
//      case .time(let v)?: if !v.isInitialized {return false}
//      case .spinButton(let v)?: if !v.isInitialized {return false}
//      case .video(let v)?: if !v.isInitialized {return false}
//      case .cardContainer(let v)?: if !v.isInitialized {return false}
//      default: break
//      }
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 2: try decoder.decodeSingularBoolField(value: &_storage._canSkipWhenUnknown)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._style)
//        case 4: try decoder.decodeRepeatedStringField(value: &_storage._childIds)
//        case 5: try decoder.decodeSingularBoolField(value: &_storage._isFontZoomable)
//        case 1000:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.EmptyProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .empty(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .empty(v)}
//        case 1001:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.LinearLayoutProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .linearLayout(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .linearLayout(v)}
//        case 1501:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.PreviewHeaderProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .header(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .header(v)}
//        case 1502:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.RichTextProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .richtext(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .richtext(v)}
//        case 1503:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.ImageProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .image(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .image(v)}
//        case 1504:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .chattersPreview(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .chattersPreview(v)}
//        case 1505:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.ButtonProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .button(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .button(v)}
//        case 1506:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.IconButtonProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .iconButton(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .iconButton(v)}
//        case 1507:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.TextButtonProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .textButton(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .textButton(v)}
//        case 1508:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.TimeProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .time(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .time(v)}
//        case 1509:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.TextProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .text(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .text(v)}
//        case 1510:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.TagListProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .tagList(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .tagList(v)}
//        case 1511:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.SpinButtonProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .spinButton(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .spinButton(v)}
//        case 1512:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .avatar(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .avatar(v)}
//        case 1513:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.VideoProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .video(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .video(v)}
//        case 1514:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.CardContainerProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .cardContainer(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .cardContainer(v)}
//        case 1515:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.DocImageProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .docImage(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .docImage(v)}
//        case 1516:
//          var v: LarkNCExtensionPB_Entities_URLPreviewComponent.LoadingProperty?
//          if let current = _storage._urlpreviewComponentProperty {
//            try decoder.handleConflictingOneOf()
//            if case .loading(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._urlpreviewComponentProperty = .loading(v)}
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._canSkipWhenUnknown {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._style {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if !_storage._childIds.isEmpty {
//        try visitor.visitRepeatedStringField(value: _storage._childIds, fieldNumber: 4)
//      }
//      if let v = _storage._isFontZoomable {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//      }
//      switch _storage._urlpreviewComponentProperty {
//      case .empty(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1000)
//      case .linearLayout(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
//      case .header(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1501)
//      case .richtext(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1502)
//      case .image(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1503)
//      case .chattersPreview(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1504)
//      case .button(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1505)
//      case .iconButton(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1506)
//      case .textButton(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1507)
//      case .time(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1508)
//      case .text(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1509)
//      case .tagList(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1510)
//      case .spinButton(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1511)
//      case .avatar(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1512)
//      case .video(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1513)
//      case .cardContainer(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1514)
//      case .docImage(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1515)
//      case .loading(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1516)
//      case nil: break
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._canSkipWhenUnknown != rhs_storage._canSkipWhenUnknown {return false}
//        if _storage._style != rhs_storage._style {return false}
//        if _storage._childIds != rhs_storage._childIds {return false}
//        if _storage._isFontZoomable != rhs_storage._isFontZoomable {return false}
//        if _storage._urlpreviewComponentProperty != rhs_storage._urlpreviewComponentProperty {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "EMPTY"),
//    1: .same(proto: "LINEAR_LAYOUT"),
//    501: .same(proto: "HEADER"),
//    502: .same(proto: "RICHTEXT"),
//    503: .same(proto: "IMAGE"),
//    504: .same(proto: "CHATTERS_PREVIEW"),
//    505: .same(proto: "BUTTON"),
//    506: .same(proto: "ICON_BUTTON"),
//    507: .same(proto: "TEXT_BUTTON"),
//    508: .same(proto: "TIME"),
//    509: .same(proto: "TEXT"),
//    510: .same(proto: "TAG_LIST"),
//    511: .same(proto: "SPIN_BUTTON"),
//    512: .same(proto: "AVATAR"),
//    513: .same(proto: "VIDEO"),
//    514: .same(proto: "CARD_CONTAINER"),
//    515: .same(proto: "DOC_IMAGE"),
//    516: .same(proto: "LOADING"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.SizeLevel: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "NORMAL"),
//    1: .same(proto: "SMALL"),
//    2: .same(proto: "LARGE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.ValueType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "AUTO"),
//    1: .same(proto: "POINT"),
//    2: .same(proto: "PERCENTAGE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.Direction: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "LTR"),
//    1: .same(proto: "RTL"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.Orientation: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "ROW"),
//    1: .same(proto: "COLUMN"),
//    2: .same(proto: "ROW_REVERSE"),
//    3: .same(proto: "COLUMN_REVERSE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.Justify: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "START"),
//    1: .same(proto: "CENTER"),
//    2: .same(proto: "END"),
//    3: .same(proto: "SPACE_BETWEEN"),
//    4: .same(proto: "SPACE_AROUND"),
//    5: .same(proto: "SPACE_EVENLY"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.Align: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "TOP"),
//    1: .same(proto: "MIDDLE"),
//    2: .same(proto: "BOTTOM"),
//    3: .same(proto: "STRETCH"),
//    4: .same(proto: "BASELINE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.Theme: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "LIGHT"),
//    1: .same(proto: "DARK"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.FontType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "TITLE"),
//    1: .same(proto: "HEADLINE"),
//    2: .same(proto: "BODY"),
//    3: .same(proto: "CAPTION"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.FontLevel: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".FontLevel"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .same(proto: "level"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._type)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._level)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._level {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.FontLevel, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.FontLevel) -> Bool {
//    if lhs._type != rhs._type {return false}
//    if lhs._level != rhs._level {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.Padding: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".Padding"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "top"),
//    2: .same(proto: "right"),
//    3: .same(proto: "bottom"),
//    4: .same(proto: "left"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularFloatField(value: &self._top)
//      case 2: try decoder.decodeSingularFloatField(value: &self._right)
//      case 3: try decoder.decodeSingularFloatField(value: &self._bottom)
//      case 4: try decoder.decodeSingularFloatField(value: &self._left)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._top {
//      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
//    }
//    if let v = self._right {
//      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
//    }
//    if let v = self._bottom {
//      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
//    }
//    if let v = self._left {
//      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.Padding, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.Padding) -> Bool {
//    if lhs._top != rhs._top {return false}
//    if lhs._right != rhs._right {return false}
//    if lhs._bottom != rhs._bottom {return false}
//    if lhs._left != rhs._left {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.Value: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".Value"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .same(proto: "value"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._type)
//      case 2: try decoder.decodeSingularFloatField(value: &self._value)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._value {
//      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.Value, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.Value) -> Bool {
//    if lhs._type != rhs._type {return false}
//    if lhs._value != rhs._value {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.Item: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".Item"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "action_id"),
//    2: .same(proto: "text"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._actionID)
//      case 2: try decoder.decodeSingularStringField(value: &self._text)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._actionID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._text {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.Item, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.Item) -> Bool {
//    if lhs._actionID != rhs._actionID {return false}
//    if lhs._text != rhs._text {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.Style: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".Style"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "size_level"),
//    2: .standard(proto: "text_color"),
//    3: .standard(proto: "background_color"),
//    4: .same(proto: "width"),
//    5: .same(proto: "height"),
//    6: .standard(proto: "max_width"),
//    7: .standard(proto: "max_height"),
//    8: .standard(proto: "min_width"),
//    9: .standard(proto: "min_height"),
//    10: .standard(proto: "grow_weight"),
//    11: .standard(proto: "shrink_weight"),
//    12: .standard(proto: "font_level"),
//    13: .same(proto: "border"),
//    14: .standard(proto: "text_color_v2"),
//    15: .standard(proto: "aspect_ratio"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _sizeLevel: LarkNCExtensionPB_Entities_URLPreviewComponent.SizeLevel? = nil
//    var _textColor: UInt32? = nil
//    var _backgroundColor: LarkNCExtensionPB_Entities_Gradient? = nil
//    var _width: LarkNCExtensionPB_Entities_URLPreviewComponent.Value? = nil
//    var _height: LarkNCExtensionPB_Entities_URLPreviewComponent.Value? = nil
//    var _maxWidth: LarkNCExtensionPB_Entities_URLPreviewComponent.Value? = nil
//    var _maxHeight: LarkNCExtensionPB_Entities_URLPreviewComponent.Value? = nil
//    var _minWidth: LarkNCExtensionPB_Entities_URLPreviewComponent.Value? = nil
//    var _minHeight: LarkNCExtensionPB_Entities_URLPreviewComponent.Value? = nil
//    var _growWeight: Int32? = nil
//    var _shrinkWeight: Int32? = nil
//    var _fontLevel: LarkNCExtensionPB_Entities_URLPreviewComponent.FontLevel? = nil
//    var _border: LarkNCExtensionPB_Entities_Border? = nil
//    var _textColorV2: LarkNCExtensionPB_Entities_ThemeColor? = nil
//    var _aspectRatio: Int32? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _sizeLevel = source._sizeLevel
//      _textColor = source._textColor
//      _backgroundColor = source._backgroundColor
//      _width = source._width
//      _height = source._height
//      _maxWidth = source._maxWidth
//      _maxHeight = source._maxHeight
//      _minWidth = source._minWidth
//      _minHeight = source._minHeight
//      _growWeight = source._growWeight
//      _shrinkWeight = source._shrinkWeight
//      _fontLevel = source._fontLevel
//      _border = source._border
//      _textColorV2 = source._textColorV2
//      _aspectRatio = source._aspectRatio
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._backgroundColor, !v.isInitialized {return false}
//      if let v = _storage._border, !v.isInitialized {return false}
//      if let v = _storage._textColorV2, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._sizeLevel)
//        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._textColor)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._backgroundColor)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._width)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._height)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._maxWidth)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._maxHeight)
//        case 8: try decoder.decodeSingularMessageField(value: &_storage._minWidth)
//        case 9: try decoder.decodeSingularMessageField(value: &_storage._minHeight)
//        case 10: try decoder.decodeSingularInt32Field(value: &_storage._growWeight)
//        case 11: try decoder.decodeSingularInt32Field(value: &_storage._shrinkWeight)
//        case 12: try decoder.decodeSingularMessageField(value: &_storage._fontLevel)
//        case 13: try decoder.decodeSingularMessageField(value: &_storage._border)
//        case 14: try decoder.decodeSingularMessageField(value: &_storage._textColorV2)
//        case 15: try decoder.decodeSingularInt32Field(value: &_storage._aspectRatio)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._sizeLevel {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._textColor {
//        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._backgroundColor {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._width {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._height {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._maxWidth {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._maxHeight {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._minWidth {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._minHeight {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._growWeight {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._shrinkWeight {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._fontLevel {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._border {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._textColorV2 {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._aspectRatio {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 15)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.Style, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.Style) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._sizeLevel != rhs_storage._sizeLevel {return false}
//        if _storage._textColor != rhs_storage._textColor {return false}
//        if _storage._backgroundColor != rhs_storage._backgroundColor {return false}
//        if _storage._width != rhs_storage._width {return false}
//        if _storage._height != rhs_storage._height {return false}
//        if _storage._maxWidth != rhs_storage._maxWidth {return false}
//        if _storage._maxHeight != rhs_storage._maxHeight {return false}
//        if _storage._minWidth != rhs_storage._minWidth {return false}
//        if _storage._minHeight != rhs_storage._minHeight {return false}
//        if _storage._growWeight != rhs_storage._growWeight {return false}
//        if _storage._shrinkWeight != rhs_storage._shrinkWeight {return false}
//        if _storage._fontLevel != rhs_storage._fontLevel {return false}
//        if _storage._border != rhs_storage._border {return false}
//        if _storage._textColorV2 != rhs_storage._textColorV2 {return false}
//        if _storage._aspectRatio != rhs_storage._aspectRatio {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.EmptyProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".EmptyProperty"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.EmptyProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.EmptyProperty) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.LinearLayoutProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".LinearLayoutProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "orientation"),
//    2: .same(proto: "spacing"),
//    3: .standard(proto: "wrap_width"),
//    4: .same(proto: "padding"),
//    5: .standard(proto: "main_axis_justify"),
//    6: .standard(proto: "cross_axis_align"),
//    7: .standard(proto: "side_padding"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _orientation: LarkNCExtensionPB_Entities_URLPreviewComponent.Orientation? = nil
//    var _spacing: Float? = nil
//    var _wrapWidth: Float? = nil
//    var _padding: Float? = nil
//    var _mainAxisJustify: LarkNCExtensionPB_Entities_URLPreviewComponent.Justify? = nil
//    var _crossAxisAlign: LarkNCExtensionPB_Entities_URLPreviewComponent.Align? = nil
//    var _sidePadding: LarkNCExtensionPB_Entities_URLPreviewComponent.Padding? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _orientation = source._orientation
//      _spacing = source._spacing
//      _wrapWidth = source._wrapWidth
//      _padding = source._padding
//      _mainAxisJustify = source._mainAxisJustify
//      _crossAxisAlign = source._crossAxisAlign
//      _sidePadding = source._sidePadding
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._orientation)
//        case 2: try decoder.decodeSingularFloatField(value: &_storage._spacing)
//        case 3: try decoder.decodeSingularFloatField(value: &_storage._wrapWidth)
//        case 4: try decoder.decodeSingularFloatField(value: &_storage._padding)
//        case 5: try decoder.decodeSingularEnumField(value: &_storage._mainAxisJustify)
//        case 6: try decoder.decodeSingularEnumField(value: &_storage._crossAxisAlign)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._sidePadding)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._orientation {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._spacing {
//        try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._wrapWidth {
//        try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._padding {
//        try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._mainAxisJustify {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._crossAxisAlign {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._sidePadding {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.LinearLayoutProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.LinearLayoutProperty) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._orientation != rhs_storage._orientation {return false}
//        if _storage._spacing != rhs_storage._spacing {return false}
//        if _storage._wrapWidth != rhs_storage._wrapWidth {return false}
//        if _storage._padding != rhs_storage._padding {return false}
//        if _storage._mainAxisJustify != rhs_storage._mainAxisJustify {return false}
//        if _storage._crossAxisAlign != rhs_storage._crossAxisAlign {return false}
//        if _storage._sidePadding != rhs_storage._sidePadding {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.PreviewHeaderProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".PreviewHeaderProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "icon"),
//    2: .same(proto: "title"),
//    3: .standard(proto: "lark_tag"),
//    4: .standard(proto: "child_component_id"),
//    5: .standard(proto: "is_need_copy_link"),
//    6: .standard(proto: "is_need_close"),
//    7: .same(proto: "theme"),
//    8: .same(proto: "type"),
//    9: .standard(proto: "tag_color"),
//    10: .standard(proto: "tag_text_color"),
//    11: .standard(proto: "header_tag"),
//    12: .standard(proto: "favicon_url"),
//    13: .standard(proto: "icon_color"),
//    14: .standard(proto: "ud_icon"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _icon: LarkNCExtensionPB_Entities_ImageSetV2? = nil
//    var _title: String? = nil
//    var _larkTag: LarkNCExtensionPB_Entities_Tag? = nil
//    var _childComponentID: String? = nil
//    var _isNeedCopyLink: Bool? = nil
//    var _isNeedClose: Bool? = nil
//    var _theme: LarkNCExtensionPB_Entities_URLPreviewComponent.Theme? = nil
//    var _type: LarkNCExtensionPB_Entities_URLPreviewComponent.PreviewHeaderProperty.TypeEnum? = nil
//    var _tagColor: LarkNCExtensionPB_Entities_ThemeColor? = nil
//    var _tagTextColor: LarkNCExtensionPB_Entities_ThemeColor? = nil
//    var _headerTag: String? = nil
//    var _faviconURL: String? = nil
//    var _iconColor: LarkNCExtensionPB_Entities_ThemeColor? = nil
//    var _udIcon: LarkNCExtensionPB_Entities_UDIcon? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _icon = source._icon
//      _title = source._title
//      _larkTag = source._larkTag
//      _childComponentID = source._childComponentID
//      _isNeedCopyLink = source._isNeedCopyLink
//      _isNeedClose = source._isNeedClose
//      _theme = source._theme
//      _type = source._type
//      _tagColor = source._tagColor
//      _tagTextColor = source._tagTextColor
//      _headerTag = source._headerTag
//      _faviconURL = source._faviconURL
//      _iconColor = source._iconColor
//      _udIcon = source._udIcon
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._icon, !v.isInitialized {return false}
//      if let v = _storage._tagColor, !v.isInitialized {return false}
//      if let v = _storage._tagTextColor, !v.isInitialized {return false}
//      if let v = _storage._iconColor, !v.isInitialized {return false}
//      if let v = _storage._udIcon, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._icon)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._larkTag)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._childComponentID)
//        case 5: try decoder.decodeSingularBoolField(value: &_storage._isNeedCopyLink)
//        case 6: try decoder.decodeSingularBoolField(value: &_storage._isNeedClose)
//        case 7: try decoder.decodeSingularEnumField(value: &_storage._theme)
//        case 8: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 9: try decoder.decodeSingularMessageField(value: &_storage._tagColor)
//        case 10: try decoder.decodeSingularMessageField(value: &_storage._tagTextColor)
//        case 11: try decoder.decodeSingularStringField(value: &_storage._headerTag)
//        case 12: try decoder.decodeSingularStringField(value: &_storage._faviconURL)
//        case 13: try decoder.decodeSingularMessageField(value: &_storage._iconColor)
//        case 14: try decoder.decodeSingularMessageField(value: &_storage._udIcon)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._icon {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._title {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._larkTag {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._childComponentID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._isNeedCopyLink {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._isNeedClose {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._theme {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._tagColor {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._tagTextColor {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._headerTag {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._faviconURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._iconColor {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._udIcon {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.PreviewHeaderProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.PreviewHeaderProperty) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._icon != rhs_storage._icon {return false}
//        if _storage._title != rhs_storage._title {return false}
//        if _storage._larkTag != rhs_storage._larkTag {return false}
//        if _storage._childComponentID != rhs_storage._childComponentID {return false}
//        if _storage._isNeedCopyLink != rhs_storage._isNeedCopyLink {return false}
//        if _storage._isNeedClose != rhs_storage._isNeedClose {return false}
//        if _storage._theme != rhs_storage._theme {return false}
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._tagColor != rhs_storage._tagColor {return false}
//        if _storage._tagTextColor != rhs_storage._tagTextColor {return false}
//        if _storage._headerTag != rhs_storage._headerTag {return false}
//        if _storage._faviconURL != rhs_storage._faviconURL {return false}
//        if _storage._iconColor != rhs_storage._iconColor {return false}
//        if _storage._udIcon != rhs_storage._udIcon {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.PreviewHeaderProperty.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "NORMAL"),
//    1: .same(proto: "HEADLINES"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.RichTextProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".RichTextProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "richtext"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _richtext: LarkNCExtensionPB_Entities_RichText? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _richtext = source._richtext
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._richtext, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._richtext)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._richtext {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.RichTextProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.RichTextProperty) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._richtext != rhs_storage._richtext {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.ImageProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".ImageProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "image"),
//    2: .same(proto: "alt"),
//    3: .standard(proto: "ud_icon"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _image: LarkNCExtensionPB_Entities_ImageSetV2? = nil
//    var _alt: String? = nil
//    var _udIcon: LarkNCExtensionPB_Entities_UDIcon? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _image = source._image
//      _alt = source._alt
//      _udIcon = source._udIcon
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._image, !v.isInitialized {return false}
//      if let v = _storage._udIcon, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._image)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._alt)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._udIcon)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._image {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._alt {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._udIcon {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.ImageProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.ImageProperty) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._image != rhs_storage._image {return false}
//        if _storage._alt != rhs_storage._alt {return false}
//        if _storage._udIcon != rhs_storage._udIcon {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".ChattersPreviewProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "theme"),
//    2: .standard(proto: "chatters_count"),
//    3: .standard(proto: "chatter_infos"),
//    4: .standard(proto: "max_show_count"),
//    5: .standard(proto: "chatters_mode"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._theme)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._chattersCount)
//      case 3: try decoder.decodeRepeatedMessageField(value: &self.chatterInfos)
//      case 4: try decoder.decodeSingularInt32Field(value: &self._maxShowCount)
//      case 5: try decoder.decodeSingularEnumField(value: &self._chattersMode)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._theme {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._chattersCount {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    if !self.chatterInfos.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.chatterInfos, fieldNumber: 3)
//    }
//    if let v = self._maxShowCount {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//    }
//    if let v = self._chattersMode {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty) -> Bool {
//    if lhs._theme != rhs._theme {return false}
//    if lhs._chattersCount != rhs._chattersCount {return false}
//    if lhs.chatterInfos != rhs.chatterInfos {return false}
//    if lhs._maxShowCount != rhs._maxShowCount {return false}
//    if lhs._chattersMode != rhs._chattersMode {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty.ChattersMode: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "STATIC"),
//    1: .same(proto: "DYNAMIC"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty.ChatterInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty.protoMessageName + ".ChatterInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "avatar"),
//    2: .standard(proto: "chatter_id"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _avatar: LarkNCExtensionPB_Entities_Image? = nil
//    var _chatterID: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _avatar = source._avatar
//      _chatterID = source._chatterID
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._chatterID)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._chatterID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty.ChatterInfo, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.ChattersPreviewProperty.ChatterInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._chatterID != rhs_storage._chatterID {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.ButtonProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".ButtonProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "icon"),
//    2: .same(proto: "text"),
//    3: .same(proto: "direction"),
//    4: .standard(proto: "action_id"),
//    5: .standard(proto: "is_disable"),
//    6: .standard(proto: "ud_icon"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _icon: LarkNCExtensionPB_Entities_ImageSetV2? = nil
//    var _text: String? = nil
//    var _direction: LarkNCExtensionPB_Entities_URLPreviewComponent.Direction? = nil
//    var _actionID: String? = nil
//    var _isDisable: Bool? = nil
//    var _udIcon: LarkNCExtensionPB_Entities_UDIcon? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _icon = source._icon
//      _text = source._text
//      _direction = source._direction
//      _actionID = source._actionID
//      _isDisable = source._isDisable
//      _udIcon = source._udIcon
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._icon, !v.isInitialized {return false}
//      if let v = _storage._udIcon, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._icon)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._text)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._direction)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._actionID)
//        case 5: try decoder.decodeSingularBoolField(value: &_storage._isDisable)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._udIcon)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._icon {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._text {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._direction {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._actionID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._isDisable {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._udIcon {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.ButtonProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.ButtonProperty) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._icon != rhs_storage._icon {return false}
//        if _storage._text != rhs_storage._text {return false}
//        if _storage._direction != rhs_storage._direction {return false}
//        if _storage._actionID != rhs_storage._actionID {return false}
//        if _storage._isDisable != rhs_storage._isDisable {return false}
//        if _storage._udIcon != rhs_storage._udIcon {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.IconButtonProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".IconButtonProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "icon"),
//    2: .standard(proto: "action_id"),
//    3: .standard(proto: "is_disable"),
//    4: .same(proto: "alt"),
//    5: .standard(proto: "ud_icon"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _icon: LarkNCExtensionPB_Entities_ImageSetV2? = nil
//    var _actionID: String? = nil
//    var _isDisable: Bool? = nil
//    var _alt: String? = nil
//    var _udIcon: LarkNCExtensionPB_Entities_UDIcon? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _icon = source._icon
//      _actionID = source._actionID
//      _isDisable = source._isDisable
//      _alt = source._alt
//      _udIcon = source._udIcon
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._icon, !v.isInitialized {return false}
//      if let v = _storage._udIcon, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._icon)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._actionID)
//        case 3: try decoder.decodeSingularBoolField(value: &_storage._isDisable)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._alt)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._udIcon)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._icon {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._actionID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._isDisable {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._alt {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._udIcon {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.IconButtonProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.IconButtonProperty) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._icon != rhs_storage._icon {return false}
//        if _storage._actionID != rhs_storage._actionID {return false}
//        if _storage._isDisable != rhs_storage._isDisable {return false}
//        if _storage._alt != rhs_storage._alt {return false}
//        if _storage._udIcon != rhs_storage._udIcon {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.TextButtonProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".TextButtonProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "text"),
//    2: .standard(proto: "action_id"),
//    3: .standard(proto: "is_disable"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._text)
//      case 2: try decoder.decodeSingularStringField(value: &self._actionID)
//      case 3: try decoder.decodeSingularBoolField(value: &self._isDisable)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._text {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._actionID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._isDisable {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.TextButtonProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.TextButtonProperty) -> Bool {
//    if lhs._text != rhs._text {return false}
//    if lhs._actionID != rhs._actionID {return false}
//    if lhs._isDisable != rhs._isDisable {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.TimeProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".TimeProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "start_time_stamp"),
//    2: .standard(proto: "is_countdown"),
//    3: .standard(proto: "ntp_action_id"),
//    4: .standard(proto: "is_end"),
//    5: .standard(proto: "end_time_stamp"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._startTimeStamp == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._startTimeStamp)
//      case 2: try decoder.decodeSingularBoolField(value: &self._isCountdown)
//      case 3: try decoder.decodeSingularStringField(value: &self._ntpActionID)
//      case 4: try decoder.decodeSingularBoolField(value: &self._isEnd)
//      case 5: try decoder.decodeSingularInt64Field(value: &self._endTimeStamp)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._startTimeStamp {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._isCountdown {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    if let v = self._ntpActionID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._isEnd {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//    }
//    if let v = self._endTimeStamp {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.TimeProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.TimeProperty) -> Bool {
//    if lhs._startTimeStamp != rhs._startTimeStamp {return false}
//    if lhs._isCountdown != rhs._isCountdown {return false}
//    if lhs._ntpActionID != rhs._ntpActionID {return false}
//    if lhs._isEnd != rhs._isEnd {return false}
//    if lhs._endTimeStamp != rhs._endTimeStamp {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.TextProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".TextProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "text"),
//    2: .standard(proto: "number_of_lines"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._text)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._numberOfLines)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._text {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._numberOfLines {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.TextProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.TextProperty) -> Bool {
//    if lhs._text != rhs._text {return false}
//    if lhs._numberOfLines != rhs._numberOfLines {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.TagListProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".TagListProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "tags"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedStringField(value: &self.tags)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.tags.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.TagListProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.TagListProperty) -> Bool {
//    if lhs.tags != rhs.tags {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.SpinButtonProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".SpinButtonProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "icon"),
//    2: .same(proto: "items"),
//    3: .standard(proto: "selected_index"),
//    4: .same(proto: "direction"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _icon: LarkNCExtensionPB_Entities_ImageSetV2? = nil
//    var _items: [LarkNCExtensionPB_Entities_URLPreviewComponent.Item] = []
//    var _selectedIndex: Int64? = nil
//    var _direction: LarkNCExtensionPB_Entities_URLPreviewComponent.Direction? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _icon = source._icon
//      _items = source._items
//      _selectedIndex = source._selectedIndex
//      _direction = source._direction
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._icon, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._icon)
//        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._items)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._selectedIndex)
//        case 4: try decoder.decodeSingularEnumField(value: &_storage._direction)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._icon {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if !_storage._items.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._items, fieldNumber: 2)
//      }
//      if let v = _storage._selectedIndex {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._direction {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.SpinButtonProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.SpinButtonProperty) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._icon != rhs_storage._icon {return false}
//        if _storage._items != rhs_storage._items {return false}
//        if _storage._selectedIndex != rhs_storage._selectedIndex {return false}
//        if _storage._direction != rhs_storage._direction {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".AvatarProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "chatter_info"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _chatterInfo: LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty.ChatterInfo? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _chatterInfo = source._chatterInfo
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._chatterInfo)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._chatterInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._chatterInfo != rhs_storage._chatterInfo {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty.ChatterInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty.protoMessageName + ".ChatterInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "avatar"),
//    2: .standard(proto: "chatter_id"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _avatar: LarkNCExtensionPB_Entities_Image? = nil
//    var _chatterID: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _avatar = source._avatar
//      _chatterID = source._chatterID
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._chatterID)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._chatterID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty.ChatterInfo, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.AvatarProperty.ChatterInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._chatterID != rhs_storage._chatterID {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.VideoProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".VideoProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "site"),
//    2: .standard(proto: "cover_image"),
//    3: .same(proto: "duration"),
//    4: .standard(proto: "src_url"),
//    5: .same(proto: "vid"),
//    6: .standard(proto: "iframe_url"),
//    7: .standard(proto: "cover_image_url"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _site: LarkNCExtensionPB_Entities_URLPreviewComponent.VideoProperty.Site? = nil
//    var _coverImage: LarkNCExtensionPB_Entities_ImageSetV2? = nil
//    var _duration: Int64? = nil
//    var _srcURL: String? = nil
//    var _vid: String? = nil
//    var _iframeURL: String? = nil
//    var _coverImageURL: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _site = source._site
//      _coverImage = source._coverImage
//      _duration = source._duration
//      _srcURL = source._srcURL
//      _vid = source._vid
//      _iframeURL = source._iframeURL
//      _coverImageURL = source._coverImageURL
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._coverImage, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._site)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._coverImage)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._duration)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._srcURL)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._vid)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._iframeURL)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._coverImageURL)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._site {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._coverImage {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._duration {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._srcURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._vid {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._iframeURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._coverImageURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.VideoProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.VideoProperty) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._site != rhs_storage._site {return false}
//        if _storage._coverImage != rhs_storage._coverImage {return false}
//        if _storage._duration != rhs_storage._duration {return false}
//        if _storage._srcURL != rhs_storage._srcURL {return false}
//        if _storage._vid != rhs_storage._vid {return false}
//        if _storage._iframeURL != rhs_storage._iframeURL {return false}
//        if _storage._coverImageURL != rhs_storage._coverImageURL {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.VideoProperty.Site: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "XIGUA"),
//    2: .same(proto: "DOUYIN"),
//    3: .same(proto: "HUOSHAN"),
//    4: .same(proto: "YOUTUBE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.CardContainerProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".CardContainerProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "mask_color"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _maskColor: LarkNCExtensionPB_Entities_ThemeColor? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _maskColor = source._maskColor
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._maskColor, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._maskColor)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._maskColor {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.CardContainerProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.CardContainerProperty) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._maskColor != rhs_storage._maskColor {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.DocImageProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".DocImageProperty"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "doc_type"),
//    2: .standard(proto: "thumbnail_url"),
//    3: .standard(proto: "secret_url"),
//    4: .standard(proto: "secret_type"),
//    5: .standard(proto: "secret_key"),
//    6: .standard(proto: "secret_nonce"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._docType)
//      case 2: try decoder.decodeSingularStringField(value: &self._thumbnailURL)
//      case 3: try decoder.decodeSingularStringField(value: &self._secretURL)
//      case 4: try decoder.decodeSingularInt32Field(value: &self._secretType)
//      case 5: try decoder.decodeSingularStringField(value: &self._secretKey)
//      case 6: try decoder.decodeSingularStringField(value: &self._secretNonce)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._docType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._thumbnailURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._secretURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._secretType {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//    }
//    if let v = self._secretKey {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    if let v = self._secretNonce {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.DocImageProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.DocImageProperty) -> Bool {
//    if lhs._docType != rhs._docType {return false}
//    if lhs._thumbnailURL != rhs._thumbnailURL {return false}
//    if lhs._secretURL != rhs._secretURL {return false}
//    if lhs._secretType != rhs._secretType {return false}
//    if lhs._secretKey != rhs._secretKey {return false}
//    if lhs._secretNonce != rhs._secretNonce {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URLPreviewComponent.LoadingProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_URLPreviewComponent.protoMessageName + ".LoadingProperty"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URLPreviewComponent.LoadingProperty, rhs: LarkNCExtensionPB_Entities_URLPreviewComponent.LoadingProperty) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_URL: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".URL"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "url"),
//    2: .same(proto: "ios"),
//    3: .same(proto: "android"),
//    4: .same(proto: "pc"),
//    5: .same(proto: "web"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._url)
//      case 2: try decoder.decodeSingularStringField(value: &self._ios)
//      case 3: try decoder.decodeSingularStringField(value: &self._android)
//      case 4: try decoder.decodeSingularStringField(value: &self._pc)
//      case 5: try decoder.decodeSingularStringField(value: &self._web)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._url {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._ios {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._android {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._pc {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._web {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_URL, rhs: LarkNCExtensionPB_Entities_URL) -> Bool {
//    if lhs._url != rhs._url {return false}
//    if lhs._ios != rhs._ios {return false}
//    if lhs._android != rhs._android {return false}
//    if lhs._pc != rhs._pc {return false}
//    if lhs._web != rhs._web {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_Message: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Message"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .standard(proto: "from_id"),
    4: .standard(proto: "create_time"),
    5: .same(proto: "content"),
    6: .same(proto: "status"),
    7: .standard(proto: "from_type"),
    8: .standard(proto: "root_id"),
    9: .standard(proto: "parent_id"),
    10: .standard(proto: "chat_id"),
    11: .standard(proto: "last_modify_time"),
    12: .same(proto: "cid"),
    13: .same(proto: "position"),
    14: .standard(proto: "update_time"),
    15: .standard(proto: "is_notified"),
    16: .standard(proto: "reply_count"),
    17: .standard(proto: "parent_source_message_id"),
    18: .standard(proto: "root_source_message_id"),
    19: .standard(proto: "is_ding"),
    20: .standard(proto: "thread_id"),
    21: .standard(proto: "send_to_chat"),
    22: .standard(proto: "is_truncated"),
    23: .standard(proto: "is_removed"),
    24: .standard(proto: "channel_id"),
    25: .standard(proto: "channel_type"),
    26: .standard(proto: "is_visible"),
    27: .standard(proto: "crypto_info"),
    28: .standard(proto: "thread_position"),
    29: .standard(proto: "remover_id"),
    30: .standard(proto: "translate_language"),
    31: .standard(proto: "remover_type"),
    32: .standard(proto: "i18n_info"),
    33: .standard(proto: "no_badged_count"),
    34: .standard(proto: "is_badged"),
    35: .standard(proto: "badge_count"),
    36: .standard(proto: "thread_badge_count"),
    37: .standard(proto: "thread_reply_count"),
    38: .standard(proto: "at_out_chatter_ids"),
    39: .standard(proto: "message_language"),
    40: .standard(proto: "translate_message_display_rule"),
    41: .standard(proto: "is_no_trace_removed"),
    42: .standard(proto: "is_auto_translated_by_receiver"),
    43: .same(proto: "sensitivity"),
    44: .standard(proto: "is_visible_v2"),
    45: .standard(proto: "translate_source"),
    46: .standard(proto: "chat_type"),
    47: .standard(proto: "original_sender_id"),
    48: .standard(proto: "is_static_resource_message_deleted"),
    49: .standard(proto: "images_translation_ability"),
    50: .same(proto: "version"),
    51: .standard(proto: "images_translation_ability_v2"),
    52: .standard(proto: "message_pipe_version"),
    53: .standard(proto: "is_batch_copy_messages"),
    54: .standard(proto: "anonymous_info"),
    55: .standard(proto: "url_preview_hang_point_map"),
    56: .standard(proto: "is_special_focus"),
    57: .standard(proto: "content_state"),
    58: .standard(proto: "is_include_doc_url"),
    59: .standard(proto: "cipher_id"),
    60: .standard(proto: "character_length"),
    61: .standard(proto: "thread_message_type"),
  ]

  fileprivate class _StorageClass {
    var _id: String? = nil
    var _type: LarkNCExtensionPB_Entities_Message.TypeEnum? = nil
    var _fromID: String? = nil
    var _createTime: Int64? = nil
    var _content: Data? = nil
    var _status: LarkNCExtensionPB_Entities_Message.Status? = nil
    var _fromType: LarkNCExtensionPB_Entities_Message.FromType? = nil
    var _rootID: String? = nil
    var _parentID: String? = nil
    var _chatID: String? = nil
    var _lastModifyTime: Int64? = nil
    var _cid: String? = nil
    var _position: Int32? = nil
    var _updateTime: Int64? = nil
    var _isNotified: Bool? = nil
    var _replyCount: String? = nil
    var _parentSourceMessageID: String? = nil
    var _rootSourceMessageID: String? = nil
    var _isDing: Bool? = nil
    var _threadID: String? = nil
    var _sendToChat: Bool? = nil
    var _isTruncated: Bool? = nil
    var _isRemoved: Bool? = nil
    var _channelID: String? = nil
    var _channelType: LarkNCExtensionPB_Entities_ChannelType? = nil
    var _isVisible: Bool? = nil
    var _cryptoInfo: LarkNCExtensionPB_Entities_CryptoInfo? = nil
    var _threadPosition: Int32? = nil
    var _removerID: Int64? = nil
    var _translateLanguage: String? = nil
    var _removerType: LarkNCExtensionPB_Entities_Message.RemoverType? = nil
    var _i18NInfo: LarkNCExtensionPB_Entities_I18nInfo? = nil
    var _noBadgedCount: Int32? = nil
    var _isBadged: Bool? = nil
    var _badgeCount: Int32? = nil
    var _threadBadgeCount: Int32? = nil
    var _threadReplyCount: Int32? = nil
    var _atOutChatterIds: [String] = []
    var _messageLanguage: String? = nil
    var _translateMessageDisplayRule: LarkNCExtensionPB_Entities_TranslateMessageDisplayRule? = nil
    var _isNoTraceRemoved: Bool? = nil
    var _isAutoTranslatedByReceiver: Bool? = nil
    var _sensitivity: LarkNCExtensionPB_Entities_Message.MessageSensitivity? = nil
    var _isVisibleV2: Bool? = nil
    var _translateSource: LarkNCExtensionPB_Entities_TranslateSource? = nil
    var _chatType: LarkNCExtensionPB_Entities_Message.ChatType? = nil
    var _originalSenderID: String? = nil
    var _isStaticResourceMessageDeleted: Bool? = nil
    var _imagesTranslationAbility: Dictionary<String,LarkNCExtensionPB_Entities_ImageTranslationAbility> = [:]
    var _version: LarkNCExtensionPB_Entities_Message.Version? = nil
    var _imagesTranslationAbilityV2: Dictionary<String,LarkNCExtensionPB_Entities_ImageTranslationAbilityV2> = [:]
    var _messagePipeVersion: Int64? = nil
    var _isBatchCopyMessages: Bool? = nil
    var _anonymousInfo: LarkNCExtensionPB_Entities_Message.AnonymousInfo? = nil
    var _urlPreviewHangPointMap: Dictionary<String,LarkNCExtensionPB_Entities_UrlPreviewHangPoint> = [:]
    var _isSpecialFocus: Bool? = nil
    var _contentState: LarkNCExtensionPB_Entities_Message.ContentState? = nil
    var _isIncludeDocURL: Bool? = nil
    var _cipherID: Int64? = nil
    var _characterLength: Int32? = nil
    var _threadMessageType: LarkNCExtensionPB_Entities_Message.ThreadMessageType? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _type = source._type
      _fromID = source._fromID
      _createTime = source._createTime
      _content = source._content
      _status = source._status
      _fromType = source._fromType
      _rootID = source._rootID
      _parentID = source._parentID
      _chatID = source._chatID
      _lastModifyTime = source._lastModifyTime
      _cid = source._cid
      _position = source._position
      _updateTime = source._updateTime
      _isNotified = source._isNotified
      _replyCount = source._replyCount
      _parentSourceMessageID = source._parentSourceMessageID
      _rootSourceMessageID = source._rootSourceMessageID
      _isDing = source._isDing
      _threadID = source._threadID
      _sendToChat = source._sendToChat
      _isTruncated = source._isTruncated
      _isRemoved = source._isRemoved
      _channelID = source._channelID
      _channelType = source._channelType
      _isVisible = source._isVisible
      _cryptoInfo = source._cryptoInfo
      _threadPosition = source._threadPosition
      _removerID = source._removerID
      _translateLanguage = source._translateLanguage
      _removerType = source._removerType
      _i18NInfo = source._i18NInfo
      _noBadgedCount = source._noBadgedCount
      _isBadged = source._isBadged
      _badgeCount = source._badgeCount
      _threadBadgeCount = source._threadBadgeCount
      _threadReplyCount = source._threadReplyCount
      _atOutChatterIds = source._atOutChatterIds
      _messageLanguage = source._messageLanguage
      _translateMessageDisplayRule = source._translateMessageDisplayRule
      _isNoTraceRemoved = source._isNoTraceRemoved
      _isAutoTranslatedByReceiver = source._isAutoTranslatedByReceiver
      _sensitivity = source._sensitivity
      _isVisibleV2 = source._isVisibleV2
      _translateSource = source._translateSource
      _chatType = source._chatType
      _originalSenderID = source._originalSenderID
      _isStaticResourceMessageDeleted = source._isStaticResourceMessageDeleted
      _imagesTranslationAbility = source._imagesTranslationAbility
      _version = source._version
      _imagesTranslationAbilityV2 = source._imagesTranslationAbilityV2
      _messagePipeVersion = source._messagePipeVersion
      _isBatchCopyMessages = source._isBatchCopyMessages
      _anonymousInfo = source._anonymousInfo
      _urlPreviewHangPointMap = source._urlPreviewHangPointMap
      _isSpecialFocus = source._isSpecialFocus
      _contentState = source._contentState
      _isIncludeDocURL = source._isIncludeDocURL
      _cipherID = source._cipherID
      _characterLength = source._characterLength
      _threadMessageType = source._threadMessageType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._translateMessageDisplayRule, !v.isInitialized {return false}
      if !LarkHTTP.Internal.areAllInitialized(_storage._imagesTranslationAbility) {return false}
      if !LarkHTTP.Internal.areAllInitialized(_storage._imagesTranslationAbilityV2) {return false}
      if let v = _storage._anonymousInfo, !v.isInitialized {return false}
      if !LarkHTTP.Internal.areAllInitialized(_storage._urlPreviewHangPointMap) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 3: try decoder.decodeSingularStringField(value: &_storage._fromID)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._content)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._fromType)
        case 8: try decoder.decodeSingularStringField(value: &_storage._rootID)
        case 9: try decoder.decodeSingularStringField(value: &_storage._parentID)
        case 10: try decoder.decodeSingularStringField(value: &_storage._chatID)
        case 11: try decoder.decodeSingularInt64Field(value: &_storage._lastModifyTime)
        case 12: try decoder.decodeSingularStringField(value: &_storage._cid)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._position)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._updateTime)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._isNotified)
        case 16: try decoder.decodeSingularStringField(value: &_storage._replyCount)
        case 17: try decoder.decodeSingularStringField(value: &_storage._parentSourceMessageID)
        case 18: try decoder.decodeSingularStringField(value: &_storage._rootSourceMessageID)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._isDing)
        case 20: try decoder.decodeSingularStringField(value: &_storage._threadID)
        case 21: try decoder.decodeSingularBoolField(value: &_storage._sendToChat)
        case 22: try decoder.decodeSingularBoolField(value: &_storage._isTruncated)
        case 23: try decoder.decodeSingularBoolField(value: &_storage._isRemoved)
        case 24: try decoder.decodeSingularStringField(value: &_storage._channelID)
        case 25: try decoder.decodeSingularEnumField(value: &_storage._channelType)
        case 26: try decoder.decodeSingularBoolField(value: &_storage._isVisible)
        case 27: try decoder.decodeSingularMessageField(value: &_storage._cryptoInfo)
        case 28: try decoder.decodeSingularInt32Field(value: &_storage._threadPosition)
        case 29: try decoder.decodeSingularInt64Field(value: &_storage._removerID)
        case 30: try decoder.decodeSingularStringField(value: &_storage._translateLanguage)
        case 31: try decoder.decodeSingularEnumField(value: &_storage._removerType)
        case 32: try decoder.decodeSingularMessageField(value: &_storage._i18NInfo)
        case 33: try decoder.decodeSingularInt32Field(value: &_storage._noBadgedCount)
        case 34: try decoder.decodeSingularBoolField(value: &_storage._isBadged)
        case 35: try decoder.decodeSingularInt32Field(value: &_storage._badgeCount)
        case 36: try decoder.decodeSingularInt32Field(value: &_storage._threadBadgeCount)
        case 37: try decoder.decodeSingularInt32Field(value: &_storage._threadReplyCount)
        case 38: try decoder.decodeRepeatedStringField(value: &_storage._atOutChatterIds)
        case 39: try decoder.decodeSingularStringField(value: &_storage._messageLanguage)
        case 40: try decoder.decodeSingularMessageField(value: &_storage._translateMessageDisplayRule)
        case 41: try decoder.decodeSingularBoolField(value: &_storage._isNoTraceRemoved)
        case 42: try decoder.decodeSingularBoolField(value: &_storage._isAutoTranslatedByReceiver)
        case 43: try decoder.decodeSingularEnumField(value: &_storage._sensitivity)
        case 44: try decoder.decodeSingularBoolField(value: &_storage._isVisibleV2)
        case 45: try decoder.decodeSingularEnumField(value: &_storage._translateSource)
        case 46: try decoder.decodeSingularEnumField(value: &_storage._chatType)
        case 47: try decoder.decodeSingularStringField(value: &_storage._originalSenderID)
        case 48: try decoder.decodeSingularBoolField(value: &_storage._isStaticResourceMessageDeleted)
        case 49: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_ImageTranslationAbility>.self, value: &_storage._imagesTranslationAbility)
        case 50: try decoder.decodeSingularMessageField(value: &_storage._version)
        case 51: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_ImageTranslationAbilityV2>.self, value: &_storage._imagesTranslationAbilityV2)
        case 52: try decoder.decodeSingularInt64Field(value: &_storage._messagePipeVersion)
        case 53: try decoder.decodeSingularBoolField(value: &_storage._isBatchCopyMessages)
        case 54: try decoder.decodeSingularMessageField(value: &_storage._anonymousInfo)
        case 55: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_UrlPreviewHangPoint>.self, value: &_storage._urlPreviewHangPointMap)
        case 56: try decoder.decodeSingularBoolField(value: &_storage._isSpecialFocus)
        case 57: try decoder.decodeSingularMessageField(value: &_storage._contentState)
        case 58: try decoder.decodeSingularBoolField(value: &_storage._isIncludeDocURL)
        case 59: try decoder.decodeSingularInt64Field(value: &_storage._cipherID)
        case 60: try decoder.decodeSingularInt32Field(value: &_storage._characterLength)
        case 61: try decoder.decodeSingularEnumField(value: &_storage._threadMessageType)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      }
      if let v = _storage._fromID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._content {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
      }
      if let v = _storage._status {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
      }
      if let v = _storage._fromType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
      }
      if let v = _storage._rootID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
      if let v = _storage._parentID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
      if let v = _storage._chatID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      }
      if let v = _storage._lastModifyTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 11)
      }
      if let v = _storage._cid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      }
      if let v = _storage._position {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._updateTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 14)
      }
      if let v = _storage._isNotified {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      }
      if let v = _storage._replyCount {
        try visitor.visitSingularStringField(value: v, fieldNumber: 16)
      }
      if let v = _storage._parentSourceMessageID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 17)
      }
      if let v = _storage._rootSourceMessageID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
      }
      if let v = _storage._isDing {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      }
      if let v = _storage._threadID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      }
      if let v = _storage._sendToChat {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 21)
      }
      if let v = _storage._isTruncated {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      }
      if let v = _storage._isRemoved {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      }
      if let v = _storage._channelID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      }
      if let v = _storage._channelType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 25)
      }
      if let v = _storage._isVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 26)
      }
      if let v = _storage._cryptoInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if let v = _storage._threadPosition {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 28)
      }
      if let v = _storage._removerID {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 29)
      }
      if let v = _storage._translateLanguage {
        try visitor.visitSingularStringField(value: v, fieldNumber: 30)
      }
      if let v = _storage._removerType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 31)
      }
      if let v = _storage._i18NInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      }
      if let v = _storage._noBadgedCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 33)
      }
      if let v = _storage._isBadged {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 34)
      }
      if let v = _storage._badgeCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 35)
      }
      if let v = _storage._threadBadgeCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 36)
      }
      if let v = _storage._threadReplyCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 37)
      }
      if !_storage._atOutChatterIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._atOutChatterIds, fieldNumber: 38)
      }
      if let v = _storage._messageLanguage {
        try visitor.visitSingularStringField(value: v, fieldNumber: 39)
      }
      if let v = _storage._translateMessageDisplayRule {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
      }
      if let v = _storage._isNoTraceRemoved {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 41)
      }
      if let v = _storage._isAutoTranslatedByReceiver {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 42)
      }
      if let v = _storage._sensitivity {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 43)
      }
      if let v = _storage._isVisibleV2 {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 44)
      }
      if let v = _storage._translateSource {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 45)
      }
      if let v = _storage._chatType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 46)
      }
      if let v = _storage._originalSenderID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 47)
      }
      if let v = _storage._isStaticResourceMessageDeleted {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 48)
      }
      if !_storage._imagesTranslationAbility.isEmpty {
        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_ImageTranslationAbility>.self, value: _storage._imagesTranslationAbility, fieldNumber: 49)
      }
      if let v = _storage._version {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
      }
      if !_storage._imagesTranslationAbilityV2.isEmpty {
        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_ImageTranslationAbilityV2>.self, value: _storage._imagesTranslationAbilityV2, fieldNumber: 51)
      }
      if let v = _storage._messagePipeVersion {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 52)
      }
      if let v = _storage._isBatchCopyMessages {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 53)
      }
      if let v = _storage._anonymousInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 54)
      }
      if !_storage._urlPreviewHangPointMap.isEmpty {
        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_UrlPreviewHangPoint>.self, value: _storage._urlPreviewHangPointMap, fieldNumber: 55)
      }
      if let v = _storage._isSpecialFocus {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 56)
      }
      if let v = _storage._contentState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
      }
      if let v = _storage._isIncludeDocURL {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 58)
      }
      if let v = _storage._cipherID {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 59)
      }
      if let v = _storage._characterLength {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 60)
      }
      if let v = _storage._threadMessageType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 61)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_Message, rhs: LarkNCExtensionPB_Entities_Message) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._fromID != rhs_storage._fromID {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._fromType != rhs_storage._fromType {return false}
        if _storage._rootID != rhs_storage._rootID {return false}
        if _storage._parentID != rhs_storage._parentID {return false}
        if _storage._chatID != rhs_storage._chatID {return false}
        if _storage._lastModifyTime != rhs_storage._lastModifyTime {return false}
        if _storage._cid != rhs_storage._cid {return false}
        if _storage._position != rhs_storage._position {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._isNotified != rhs_storage._isNotified {return false}
        if _storage._replyCount != rhs_storage._replyCount {return false}
        if _storage._parentSourceMessageID != rhs_storage._parentSourceMessageID {return false}
        if _storage._rootSourceMessageID != rhs_storage._rootSourceMessageID {return false}
        if _storage._isDing != rhs_storage._isDing {return false}
        if _storage._threadID != rhs_storage._threadID {return false}
        if _storage._sendToChat != rhs_storage._sendToChat {return false}
        if _storage._isTruncated != rhs_storage._isTruncated {return false}
        if _storage._isRemoved != rhs_storage._isRemoved {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._channelType != rhs_storage._channelType {return false}
        if _storage._isVisible != rhs_storage._isVisible {return false}
        if _storage._cryptoInfo != rhs_storage._cryptoInfo {return false}
        if _storage._threadPosition != rhs_storage._threadPosition {return false}
        if _storage._removerID != rhs_storage._removerID {return false}
        if _storage._translateLanguage != rhs_storage._translateLanguage {return false}
        if _storage._removerType != rhs_storage._removerType {return false}
        if _storage._i18NInfo != rhs_storage._i18NInfo {return false}
        if _storage._noBadgedCount != rhs_storage._noBadgedCount {return false}
        if _storage._isBadged != rhs_storage._isBadged {return false}
        if _storage._badgeCount != rhs_storage._badgeCount {return false}
        if _storage._threadBadgeCount != rhs_storage._threadBadgeCount {return false}
        if _storage._threadReplyCount != rhs_storage._threadReplyCount {return false}
        if _storage._atOutChatterIds != rhs_storage._atOutChatterIds {return false}
        if _storage._messageLanguage != rhs_storage._messageLanguage {return false}
        if _storage._translateMessageDisplayRule != rhs_storage._translateMessageDisplayRule {return false}
        if _storage._isNoTraceRemoved != rhs_storage._isNoTraceRemoved {return false}
        if _storage._isAutoTranslatedByReceiver != rhs_storage._isAutoTranslatedByReceiver {return false}
        if _storage._sensitivity != rhs_storage._sensitivity {return false}
        if _storage._isVisibleV2 != rhs_storage._isVisibleV2 {return false}
        if _storage._translateSource != rhs_storage._translateSource {return false}
        if _storage._chatType != rhs_storage._chatType {return false}
        if _storage._originalSenderID != rhs_storage._originalSenderID {return false}
        if _storage._isStaticResourceMessageDeleted != rhs_storage._isStaticResourceMessageDeleted {return false}
        if _storage._imagesTranslationAbility != rhs_storage._imagesTranslationAbility {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._imagesTranslationAbilityV2 != rhs_storage._imagesTranslationAbilityV2 {return false}
        if _storage._messagePipeVersion != rhs_storage._messagePipeVersion {return false}
        if _storage._isBatchCopyMessages != rhs_storage._isBatchCopyMessages {return false}
        if _storage._anonymousInfo != rhs_storage._anonymousInfo {return false}
        if _storage._urlPreviewHangPointMap != rhs_storage._urlPreviewHangPointMap {return false}
        if _storage._isSpecialFocus != rhs_storage._isSpecialFocus {return false}
        if _storage._contentState != rhs_storage._contentState {return false}
        if _storage._isIncludeDocURL != rhs_storage._isIncludeDocURL {return false}
        if _storage._cipherID != rhs_storage._cipherID {return false}
        if _storage._characterLength != rhs_storage._characterLength {return false}
        if _storage._threadMessageType != rhs_storage._threadMessageType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_Message.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    2: .same(proto: "POST"),
    3: .same(proto: "FILE"),
    4: .same(proto: "TEXT"),
    5: .same(proto: "IMAGE"),
    6: .same(proto: "SYSTEM"),
    7: .same(proto: "AUDIO"),
    8: .same(proto: "EMAIL"),
    9: .same(proto: "SHARE_GROUP_CHAT"),
    10: .same(proto: "STICKER"),
    11: .same(proto: "MERGE_FORWARD"),
    12: .same(proto: "CALENDAR"),
    13: .same(proto: "CLOUD_FILE"),
    14: .same(proto: "CARD"),
    15: .same(proto: "MEDIA"),
    16: .same(proto: "SHARE_CALENDAR_EVENT"),
    17: .same(proto: "HONGBAO"),
    18: .same(proto: "GENERAL_CALENDAR"),
    19: .same(proto: "VIDEO_CHAT"),
    20: .same(proto: "LOCATION"),
    22: .same(proto: "COMMERCIALIZED_HONGBAO"),
    23: .same(proto: "SHARE_USER_CARD"),
    24: .same(proto: "TODO"),
    25: .same(proto: "FOLDER"),
    26: .same(proto: "DIAGNOSE"),
    27: .same(proto: "VOTE"),
  ]
}

extension LarkNCExtensionPB_Entities_Message.FromType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "USER"),
    2: .same(proto: "BOT"),
  ]
}

extension LarkNCExtensionPB_Entities_Message.Status: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_STATUS"),
    1: .same(proto: "NORMAL"),
    2: .same(proto: "DELETED"),
    3: .same(proto: "MODIFIED"),
  ]
}

extension LarkNCExtensionPB_Entities_Message.RemoverType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_REMOVERTYPE"),
    1: .same(proto: "GROUPOWNER"),
    2: .same(proto: "SYSADMIN"),
    3: .same(proto: "GROUPADMIN"),
  ]
}

extension LarkNCExtensionPB_Entities_Message.MessageSensitivity: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_SENSITIVITY"),
    1: .same(proto: "SAFE"),
    2: .same(proto: "DANGEROUS"),
  ]
}

extension LarkNCExtensionPB_Entities_Message.ChatType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_CHAT_TYPE"),
    1: .same(proto: "P2P"),
    2: .same(proto: "GROUP"),
    3: .same(proto: "TOPIC_GROUP"),
  ]
}

extension LarkNCExtensionPB_Entities_Message.ContentDeleteType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_DELETE_TYPE"),
    1: .same(proto: "REMOVED"),
    2: .same(proto: "REPLACED"),
  ]
}

extension LarkNCExtensionPB_Entities_Message.ThreadMessageType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_THREAD_MESSAGE"),
    1: .same(proto: "THREAD_ROOT_MESSAGE"),
    2: .same(proto: "THREAD_REPLY_MESSAGE"),
  ]
}

extension LarkNCExtensionPB_Entities_Message.Version: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_Message.protoMessageName + ".Version"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "content_version"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._contentVersion)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._contentVersion {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_Message.Version, rhs: LarkNCExtensionPB_Entities_Message.Version) -> Bool {
    if lhs._contentVersion != rhs._contentVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_Message.AnonymousInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_Message.protoMessageName + ".AnonymousInfo"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "is_anonymous"),
    2: .standard(proto: "is_sender"),
    3: .standard(proto: "anonymous_chatter_id"),
  ]

  public var isInitialized: Bool {
    if self._isAnonymous == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._isAnonymous)
      case 2: try decoder.decodeSingularBoolField(value: &self._isSender)
      case 3: try decoder.decodeSingularStringField(value: &self._anonymousChatterID)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._isAnonymous {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._isSender {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._anonymousChatterID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_Message.AnonymousInfo, rhs: LarkNCExtensionPB_Entities_Message.AnonymousInfo) -> Bool {
    if lhs._isAnonymous != rhs._isAnonymous {return false}
    if lhs._isSender != rhs._isSender {return false}
    if lhs._anonymousChatterID != rhs._anonymousChatterID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_Message.ContentState: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_Message.protoMessageName + ".ContentState"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "content_delete_type"),
    2: .standard(proto: "is_decrypt_fail"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._contentDeleteType)
      case 2: try decoder.decodeSingularBoolField(value: &self._isDecryptFail)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._contentDeleteType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._isDecryptFail {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_Message.ContentState, rhs: LarkNCExtensionPB_Entities_Message.ContentState) -> Bool {
    if lhs._contentDeleteType != rhs._contentDeleteType {return false}
    if lhs._isDecryptFail != rhs._isDecryptFail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_MessageExtendInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MessageExtendInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "IsGroupDeletedBitMap"),
//    2: .same(proto: "IsNoTraceRemovedBitMap"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._isGroupDeletedBitMap)
//      case 2: try decoder.decodeSingularBoolField(value: &self._isNoTraceRemovedBitMap)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._isGroupDeletedBitMap {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._isNoTraceRemovedBitMap {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MessageExtendInfo, rhs: LarkNCExtensionPB_Entities_MessageExtendInfo) -> Bool {
//    if lhs._isGroupDeletedBitMap != rhs._isGroupDeletedBitMap {return false}
//    if lhs._isNoTraceRemovedBitMap != rhs._isNoTraceRemovedBitMap {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_TranslateMessageDisplayRule: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TranslateMessageDisplayRule"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "rule"),
  ]

  public var isInitialized: Bool {
    if self._rule == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._rule)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._rule {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_TranslateMessageDisplayRule, rhs: LarkNCExtensionPB_Entities_TranslateMessageDisplayRule) -> Bool {
    if lhs._rule != rhs._rule {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_MessageUrlPreview: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MessageUrlPreview"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "message_id"),
//    2: .standard(proto: "sequence_id"),
//    3: .same(proto: "url"),
//    4: .same(proto: "offset"),
//    5: .same(proto: "count"),
//    6: .same(proto: "title"),
//    7: .same(proto: "abstract"),
//    8: .same(proto: "icon"),
//    9: .standard(proto: "is_deleted"),
//    10: .standard(proto: "has_preview"),
//    11: .standard(proto: "cover_image"),
//    12: .standard(proto: "video_info"),
//    13: .standard(proto: "need_local_preview"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _messageID: String? = nil
//    var _sequenceID: Int32? = nil
//    var _url: String? = nil
//    var _offset: Int32? = nil
//    var _count: Int32? = nil
//    var _title: String? = nil
//    var _abstract: String? = nil
//    var _icon: LarkNCExtensionPB_Entities_ImageSet? = nil
//    var _isDeleted: Bool? = nil
//    var _hasPreview_p: Bool? = nil
//    var _coverImage: LarkNCExtensionPB_Entities_ImageSet? = nil
//    var _videoInfo: LarkNCExtensionPB_Entities_VideoInfo? = nil
//    var _needLocalPreview: Bool? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _messageID = source._messageID
//      _sequenceID = source._sequenceID
//      _url = source._url
//      _offset = source._offset
//      _count = source._count
//      _title = source._title
//      _abstract = source._abstract
//      _icon = source._icon
//      _isDeleted = source._isDeleted
//      _hasPreview_p = source._hasPreview_p
//      _coverImage = source._coverImage
//      _videoInfo = source._videoInfo
//      _needLocalPreview = source._needLocalPreview
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._messageID == nil {return false}
//      if _storage._sequenceID == nil {return false}
//      if _storage._url == nil {return false}
//      if _storage._offset == nil {return false}
//      if _storage._count == nil {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._messageID)
//        case 2: try decoder.decodeSingularInt32Field(value: &_storage._sequenceID)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._url)
//        case 4: try decoder.decodeSingularInt32Field(value: &_storage._offset)
//        case 5: try decoder.decodeSingularInt32Field(value: &_storage._count)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._title)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._abstract)
//        case 8: try decoder.decodeSingularMessageField(value: &_storage._icon)
//        case 9: try decoder.decodeSingularBoolField(value: &_storage._isDeleted)
//        case 10: try decoder.decodeSingularBoolField(value: &_storage._hasPreview_p)
//        case 11: try decoder.decodeSingularMessageField(value: &_storage._coverImage)
//        case 12: try decoder.decodeSingularMessageField(value: &_storage._videoInfo)
//        case 13: try decoder.decodeSingularBoolField(value: &_storage._needLocalPreview)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._messageID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._sequenceID {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._url {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._offset {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._count {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._title {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._abstract {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._icon {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._isDeleted {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._hasPreview_p {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._coverImage {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._videoInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._needLocalPreview {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MessageUrlPreview, rhs: LarkNCExtensionPB_Entities_MessageUrlPreview) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._messageID != rhs_storage._messageID {return false}
//        if _storage._sequenceID != rhs_storage._sequenceID {return false}
//        if _storage._url != rhs_storage._url {return false}
//        if _storage._offset != rhs_storage._offset {return false}
//        if _storage._count != rhs_storage._count {return false}
//        if _storage._title != rhs_storage._title {return false}
//        if _storage._abstract != rhs_storage._abstract {return false}
//        if _storage._icon != rhs_storage._icon {return false}
//        if _storage._isDeleted != rhs_storage._isDeleted {return false}
//        if _storage._hasPreview_p != rhs_storage._hasPreview_p {return false}
//        if _storage._coverImage != rhs_storage._coverImage {return false}
//        if _storage._videoInfo != rhs_storage._videoInfo {return false}
//        if _storage._needLocalPreview != rhs_storage._needLocalPreview {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_VideoInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".VideoInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "site"),
//    2: .standard(proto: "src_url"),
//    3: .same(proto: "vid"),
//    4: .standard(proto: "iframe_url"),
//    5: .standard(proto: "expire_time"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._site)
//      case 2: try decoder.decodeSingularStringField(value: &self._srcURL)
//      case 3: try decoder.decodeSingularStringField(value: &self._vid)
//      case 4: try decoder.decodeSingularStringField(value: &self._iframeURL)
//      case 5: try decoder.decodeSingularInt64Field(value: &self._expireTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._site {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._srcURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._vid {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._iframeURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._expireTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_VideoInfo, rhs: LarkNCExtensionPB_Entities_VideoInfo) -> Bool {
//    if lhs._site != rhs._site {return false}
//    if lhs._srcURL != rhs._srcURL {return false}
//    if lhs._vid != rhs._vid {return false}
//    if lhs._iframeURL != rhs._iframeURL {return false}
//    if lhs._expireTime != rhs._expireTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_VideoInfo.Site: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "XIGUA"),
//    2: .same(proto: "DOUYIN"),
//    3: .same(proto: "HUOSHAN"),
//    4: .same(proto: "YOUTUBE"),
//    5: .same(proto: "IQIYI"),
//    6: .same(proto: "YOUKU"),
//    7: .same(proto: "QQ"),
//  ]
//}

extension LarkNCExtensionPB_Entities_DocEntity: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DocEntity"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "element_entity_ref"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_DocEntity.ElementEntity>.self, value: &self.elementEntityRef)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if !self.elementEntityRef.isEmpty {
      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_DocEntity.ElementEntity>.self, value: self.elementEntityRef, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_DocEntity, rhs: LarkNCExtensionPB_Entities_DocEntity) -> Bool {
    if lhs.elementEntityRef != rhs.elementEntityRef {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_DocEntity.ElementEntity: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_DocEntity.protoMessageName + ".ElementEntity"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "doc_type"),
    3: .standard(proto: "str_doc_type"),
    4: .standard(proto: "doc_token"),
    5: .same(proto: "icon"),
    6: .standard(proto: "sort_type"),
  ]

  fileprivate class _StorageClass {
    var _title: String? = nil
    var _docType: LarkNCExtensionPB_Entities_DocType? = nil
    var _strDocType: String? = nil
    var _docToken: String? = nil
    var _icon: LarkNCExtensionPB_Entities_Icon? = nil
    var _sortType: LarkNCExtensionPB_Entities_DocSortRuleType? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _title = source._title
      _docType = source._docType
      _strDocType = source._strDocType
      _docToken = source._docToken
      _icon = source._icon
      _sortType = source._sortType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._title)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._docType)
        case 3: try decoder.decodeSingularStringField(value: &_storage._strDocType)
        case 4: try decoder.decodeSingularStringField(value: &_storage._docToken)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._icon)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._sortType)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._docType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      }
      if let v = _storage._strDocType {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._docToken {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._icon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._sortType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_DocEntity.ElementEntity, rhs: LarkNCExtensionPB_Entities_DocEntity.ElementEntity) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._title != rhs_storage._title {return false}
        if _storage._docType != rhs_storage._docType {return false}
        if _storage._strDocType != rhs_storage._strDocType {return false}
        if _storage._docToken != rhs_storage._docToken {return false}
        if _storage._icon != rhs_storage._icon {return false}
        if _storage._sortType != rhs_storage._sortType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_Abbreviation: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Abbreviation"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "abbr_element_ref"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_Abbreviation.Abbrs>.self, value: &self.abbrElementRef)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.abbrElementRef.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_Abbreviation.Abbrs>.self, value: self.abbrElementRef, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Abbreviation, rhs: LarkNCExtensionPB_Entities_Abbreviation) -> Bool {
//    if lhs.abbrElementRef != rhs.abbrElementRef {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Abbreviation.entity: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_Abbreviation.protoMessageName + ".entity"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "abbr_id"),
//    2: .standard(proto: "abbr_version"),
//    3: .standard(proto: "abbr_type"),
//    4: .same(proto: "datetime"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _abbrID: String? = nil
//    var _abbrVersion: Int32? = nil
//    var _abbrType: LarkNCExtensionPB_Entities_Abbreviation.entity.TypeEnum? = nil
//    var _datetime: LarkNCExtensionPB_Entities_Abbreviation.entity.DatetimeEntity? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _abbrID = source._abbrID
//      _abbrVersion = source._abbrVersion
//      _abbrType = source._abbrType
//      _datetime = source._datetime
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._abbrID)
//        case 2: try decoder.decodeSingularInt32Field(value: &_storage._abbrVersion)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._abbrType)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._datetime)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._abbrID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._abbrVersion {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._abbrType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._datetime {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Abbreviation.entity, rhs: LarkNCExtensionPB_Entities_Abbreviation.entity) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._abbrID != rhs_storage._abbrID {return false}
//        if _storage._abbrVersion != rhs_storage._abbrVersion {return false}
//        if _storage._abbrType != rhs_storage._abbrType {return false}
//        if _storage._datetime != rhs_storage._datetime {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Abbreviation.entity.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKOWN"),
//    1: .same(proto: "ACRONYM"),
//    2: .same(proto: "WIKI"),
//    3: .same(proto: "DATETIME"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_Abbreviation.entity.DatetimeEntity: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_Abbreviation.entity.protoMessageName + ".DatetimeEntity"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "start"),
//    2: .same(proto: "end"),
//    3: .same(proto: "duration"),
//    4: .same(proto: "grain"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._start)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._end)
//      case 3: try decoder.decodeSingularInt32Field(value: &self._duration)
//      case 4: try decoder.decodeSingularStringField(value: &self._grain)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._start {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._end {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._duration {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._grain {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Abbreviation.entity.DatetimeEntity, rhs: LarkNCExtensionPB_Entities_Abbreviation.entity.DatetimeEntity) -> Bool {
//    if lhs._start != rhs._start {return false}
//    if lhs._end != rhs._end {return false}
//    if lhs._duration != rhs._duration {return false}
//    if lhs._grain != rhs._grain {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Abbreviation.Abbrs: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_Abbreviation.protoMessageName + ".Abbrs"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "abbrs"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.abbrs)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.abbrs.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.abbrs, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Abbreviation.Abbrs, rhs: LarkNCExtensionPB_Entities_Abbreviation.Abbrs) -> Bool {
//    if lhs.abbrs != rhs.abbrs {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Span: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Span"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "start"),
//    2: .same(proto: "end"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._start == nil {return false}
//    if self._end == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt32Field(value: &self._start)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._end)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._start {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._end {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Span, rhs: LarkNCExtensionPB_Entities_Span) -> Bool {
//    if lhs._start != rhs._start {return false}
//    if lhs._end != rhs._end {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_BaikeEntityMeta: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".BaikeEntityMeta"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .standard(proto: "is_allow_all"),
//    3: .standard(proto: "allowed_typed_ids"),
//    4: .standard(proto: "platform_disable_option"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._id == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularBoolField(value: &self._isAllowAll)
//      case 3: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_BaikeEntityMeta.TypedIDs>.self, value: &self.allowedTypedIds)
//      case 4: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.platformDisableOption)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._isAllowAll {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    if !self.allowedTypedIds.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_BaikeEntityMeta.TypedIDs>.self, value: self.allowedTypedIds, fieldNumber: 3)
//    }
//    if !self.platformDisableOption.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.platformDisableOption, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_BaikeEntityMeta, rhs: LarkNCExtensionPB_Entities_BaikeEntityMeta) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._isAllowAll != rhs._isAllowAll {return false}
//    if lhs.allowedTypedIds != rhs.allowedTypedIds {return false}
//    if lhs.platformDisableOption != rhs.platformDisableOption {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_BaikeEntityMeta.TypedIDs: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_BaikeEntityMeta.protoMessageName + ".TypedIDs"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "ids"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedStringField(value: &self.ids)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.ids.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_BaikeEntityMeta.TypedIDs, rhs: LarkNCExtensionPB_Entities_BaikeEntityMeta.TypedIDs) -> Bool {
//    if lhs.ids != rhs.ids {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Ref: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Ref"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "span"),
//    2: .standard(proto: "matched_word"),
//    3: .standard(proto: "platform_disable_option"),
//    4: .standard(proto: "baike_entity_meta"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _span: LarkNCExtensionPB_Entities_Span? = nil
//    var _matchedWord: String? = nil
//    var _platformDisableOption: Dictionary<String,String> = [:]
//    var _baikeEntityMeta: LarkNCExtensionPB_Entities_BaikeEntityMeta? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _span = source._span
//      _matchedWord = source._matchedWord
//      _platformDisableOption = source._platformDisableOption
//      _baikeEntityMeta = source._baikeEntityMeta
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._span == nil {return false}
//      if let v = _storage._span, !v.isInitialized {return false}
//      if let v = _storage._baikeEntityMeta, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._span)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._matchedWord)
//        case 3: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._platformDisableOption)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._baikeEntityMeta)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._span {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._matchedWord {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if !_storage._platformDisableOption.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._platformDisableOption, fieldNumber: 3)
//      }
//      if let v = _storage._baikeEntityMeta {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Ref, rhs: LarkNCExtensionPB_Entities_Ref) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._span != rhs_storage._span {return false}
//        if _storage._matchedWord != rhs_storage._matchedWord {return false}
//        if _storage._platformDisableOption != rhs_storage._platformDisableOption {return false}
//        if _storage._baikeEntityMeta != rhs_storage._baikeEntityMeta {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Refs: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Refs"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "refs"),
//  ]
//
//  public var isInitialized: Bool {
//    if !LarkHTTP.Internal.areAllInitialized(self.refs) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.refs)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.refs.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.refs, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Refs, rhs: LarkNCExtensionPB_Entities_Refs) -> Bool {
//    if lhs.refs != rhs.refs {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ElementRefs: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ElementRefs"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "element_refs"),
//  ]
//
//  public var isInitialized: Bool {
//    if !LarkHTTP.Internal.areAllInitialized(self.elementRefs) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_Refs>.self, value: &self.elementRefs)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.elementRefs.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_Refs>.self, value: self.elementRefs, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ElementRefs, rhs: LarkNCExtensionPB_Entities_ElementRefs) -> Bool {
//    if lhs.elementRefs != rhs.elementRefs {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TextContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TextContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "text"),
//    2: .same(proto: "urls"),
//    3: .standard(proto: "rich_text"),
//    4: .standard(proto: "doc_entity"),
//    5: .same(proto: "abbreviation"),
//    6: .standard(proto: "typed_element_refs"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _text: String? = nil
//    var _urls: [LarkNCExtensionPB_Entities_MessageUrlPreview] = []
//    var _richText: LarkNCExtensionPB_Entities_RichText? = nil
//    var _docEntity: LarkNCExtensionPB_Entities_DocEntity? = nil
//    var _abbreviation: LarkNCExtensionPB_Entities_Abbreviation? = nil
//    var _typedElementRefs: Dictionary<String,LarkNCExtensionPB_Entities_ElementRefs> = [:]
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _text = source._text
//      _urls = source._urls
//      _richText = source._richText
//      _docEntity = source._docEntity
//      _abbreviation = source._abbreviation
//      _typedElementRefs = source._typedElementRefs
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if !LarkHTTP.Internal.areAllInitialized(_storage._urls) {return false}
//      if let v = _storage._richText, !v.isInitialized {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._typedElementRefs) {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._text)
//        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._urls)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._richText)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._docEntity)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._abbreviation)
//        case 6: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_ElementRefs>.self, value: &_storage._typedElementRefs)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._text {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if !_storage._urls.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._urls, fieldNumber: 2)
//      }
//      if let v = _storage._richText {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._docEntity {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._abbreviation {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//      if !_storage._typedElementRefs.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_ElementRefs>.self, value: _storage._typedElementRefs, fieldNumber: 6)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TextContent, rhs: LarkNCExtensionPB_Entities_TextContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._text != rhs_storage._text {return false}
//        if _storage._urls != rhs_storage._urls {return false}
//        if _storage._richText != rhs_storage._richText {return false}
//        if _storage._docEntity != rhs_storage._docEntity {return false}
//        if _storage._abbreviation != rhs_storage._abbreviation {return false}
//        if _storage._typedElementRefs != rhs_storage._typedElementRefs {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "calendar"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._calendar)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._calendar {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarContent, rhs: LarkNCExtensionPB_Entities_CalendarContent) -> Bool {
//    if lhs._calendar != rhs._calendar {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ShareCalendarEventContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ShareCalendarEventContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "calendar_event"),
//    2: .standard(proto: "attendees_count"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _calendarEvent: LarkNCExtensionPB_Entities_CalendarEvent? = nil
//    var _attendeesCount: Int32? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _calendarEvent = source._calendarEvent
//      _attendeesCount = source._attendeesCount
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._calendarEvent, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._calendarEvent)
//        case 2: try decoder.decodeSingularInt32Field(value: &_storage._attendeesCount)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._calendarEvent {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._attendeesCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ShareCalendarEventContent, rhs: LarkNCExtensionPB_Entities_ShareCalendarEventContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._calendarEvent != rhs_storage._calendarEvent {return false}
//        if _storage._attendeesCount != rhs_storage._attendeesCount {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ImageContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ImageContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "image"),
//    2: .standard(proto: "image_v2"),
//    3: .standard(proto: "is_origin_source"),
//    4: .standard(proto: "origin_size"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _image: LarkNCExtensionPB_Entities_ImageSet? = nil
//    var _imageV2: LarkNCExtensionPB_Entities_ImageSetV2? = nil
//    var _isOriginSource: Bool? = nil
//    var _originSize: UInt64? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _image = source._image
//      _imageV2 = source._imageV2
//      _isOriginSource = source._isOriginSource
//      _originSize = source._originSize
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._imageV2, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._image)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._imageV2)
//        case 3: try decoder.decodeSingularBoolField(value: &_storage._isOriginSource)
//        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._originSize)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._image {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._imageV2 {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._isOriginSource {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._originSize {
//        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ImageContent, rhs: LarkNCExtensionPB_Entities_ImageContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._image != rhs_storage._image {return false}
//        if _storage._imageV2 != rhs_storage._imageV2 {return false}
//        if _storage._isOriginSource != rhs_storage._isOriginSource {return false}
//        if _storage._originSize != rhs_storage._originSize {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_LocationContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LocationContent"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "location_description"),
    2: .same(proto: "longitude"),
    3: .same(proto: "latitude"),
    4: .standard(proto: "zoom_level"),
    5: .same(proto: "image"),
    6: .same(proto: "vendor"),
    7: .standard(proto: "is_iternal"),
  ]

  fileprivate class _StorageClass {
    var _locationDescription: LarkNCExtensionPB_Entities_LocationContent.LocationDescription? = nil
    var _longitude: String? = nil
    var _latitude: String? = nil
    var _zoomLevel: Int32? = nil
    var _image: LarkNCExtensionPB_Entities_ImageSet? = nil
    var _vendor: String? = nil
    var _isIternal: Bool? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _locationDescription = source._locationDescription
      _longitude = source._longitude
      _latitude = source._latitude
      _zoomLevel = source._zoomLevel
      _image = source._image
      _vendor = source._vendor
      _isIternal = source._isIternal
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._locationDescription)
        case 2: try decoder.decodeSingularStringField(value: &_storage._longitude)
        case 3: try decoder.decodeSingularStringField(value: &_storage._latitude)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._zoomLevel)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._image)
        case 6: try decoder.decodeSingularStringField(value: &_storage._vendor)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._isIternal)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._locationDescription {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._longitude {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._latitude {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._zoomLevel {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._vendor {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._isIternal {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_LocationContent, rhs: LarkNCExtensionPB_Entities_LocationContent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._locationDescription != rhs_storage._locationDescription {return false}
        if _storage._longitude != rhs_storage._longitude {return false}
        if _storage._latitude != rhs_storage._latitude {return false}
        if _storage._zoomLevel != rhs_storage._zoomLevel {return false}
        if _storage._image != rhs_storage._image {return false}
        if _storage._vendor != rhs_storage._vendor {return false}
        if _storage._isIternal != rhs_storage._isIternal {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_LocationContent.LocationDescription: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_LocationContent.protoMessageName + ".LocationDescription"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularStringField(value: &self._description_p)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_LocationContent.LocationDescription, rhs: LarkNCExtensionPB_Entities_LocationContent.LocationDescription) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_TransExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TransExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "status"),
//    2: .standard(proto: "sender_device_id"),
//    3: .standard(proto: "receiver_device_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._status)
//      case 2: try decoder.decodeSingularStringField(value: &self._senderDeviceID)
//      case 3: try decoder.decodeSingularStringField(value: &self._receiverDeviceID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._status {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._senderDeviceID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._receiverDeviceID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TransExtra, rhs: LarkNCExtensionPB_Entities_TransExtra) -> Bool {
//    if lhs._status != rhs._status {return false}
//    if lhs._senderDeviceID != rhs._senderDeviceID {return false}
//    if lhs._receiverDeviceID != rhs._receiverDeviceID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_FileContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".FileContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "key"),
//    2: .same(proto: "name"),
//    3: .same(proto: "size"),
//    4: .same(proto: "mime"),
//    5: .same(proto: "source"),
//    6: .standard(proto: "name_space"),
//    7: .standard(proto: "fs_unit"),
//    8: .standard(proto: "lan_trans_extra"),
//    9: .standard(proto: "trans_extra"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _key: String? = nil
//    var _name: String? = nil
//    var _size: Int64? = nil
//    var _mime: String? = nil
//    var _source: LarkNCExtensionPB_Entities_FileContent.Source? = nil
//    var _nameSpace: String? = nil
//    var _fsUnit: String? = nil
//    var _lanTransExtra: LarkNCExtensionPB_Entities_FileContent.LANTransExtra? = nil
//    var _transExtra: LarkNCExtensionPB_Entities_TransExtra? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _key = source._key
//      _name = source._name
//      _size = source._size
//      _mime = source._mime
//      _source = source._source
//      _nameSpace = source._nameSpace
//      _fsUnit = source._fsUnit
//      _lanTransExtra = source._lanTransExtra
//      _transExtra = source._transExtra
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._key)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._size)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._mime)
//        case 5: try decoder.decodeSingularEnumField(value: &_storage._source)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._nameSpace)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
//        case 8: try decoder.decodeSingularMessageField(value: &_storage._lanTransExtra)
//        case 9: try decoder.decodeSingularMessageField(value: &_storage._transExtra)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._key {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._size {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._mime {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._source {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._nameSpace {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._fsUnit {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._lanTransExtra {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._transExtra {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_FileContent, rhs: LarkNCExtensionPB_Entities_FileContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._key != rhs_storage._key {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._size != rhs_storage._size {return false}
//        if _storage._mime != rhs_storage._mime {return false}
//        if _storage._source != rhs_storage._source {return false}
//        if _storage._nameSpace != rhs_storage._nameSpace {return false}
//        if _storage._fsUnit != rhs_storage._fsUnit {return false}
//        if _storage._lanTransExtra != rhs_storage._lanTransExtra {return false}
//        if _storage._transExtra != rhs_storage._transExtra {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_FileContent.Source: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    2: .same(proto: "NUT_STORE"),
//    3: .same(proto: "LAN_TRANS"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_FileContent.LANTransExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_FileContent.protoMessageName + ".LANTransExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "status"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._status)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._status {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_FileContent.LANTransExtra, rhs: LarkNCExtensionPB_Entities_FileContent.LANTransExtra) -> Bool {
//    if lhs._status != rhs._status {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_FileContent.LANTransExtra.TransStatus: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "PENDING"),
//    1: .same(proto: "ACCEPT"),
//    2: .same(proto: "REFUSE"),
//    3: .same(proto: "CANCEL"),
//    4: .same(proto: "ABORT_BY_SENDER"),
//    5: .same(proto: "ABORT_BY_RECEIVER"),
//    6: .same(proto: "DONE"),
//    7: .same(proto: "OFFLINE_MODE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_MediaContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MediaContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "key"),
//    2: .same(proto: "name"),
//    3: .same(proto: "size"),
//    4: .same(proto: "mime"),
//    5: .same(proto: "source"),
//    6: .same(proto: "image"),
//    7: .same(proto: "duration"),
//    8: .standard(proto: "fs_unit"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _key: String? = nil
//    var _name: String? = nil
//    var _size: Int64? = nil
//    var _mime: String? = nil
//    var _source: LarkNCExtensionPB_Entities_MediaContent.Source? = nil
//    var _image: LarkNCExtensionPB_Entities_ImageSet? = nil
//    var _duration: Int32? = nil
//    var _fsUnit: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _key = source._key
//      _name = source._name
//      _size = source._size
//      _mime = source._mime
//      _source = source._source
//      _image = source._image
//      _duration = source._duration
//      _fsUnit = source._fsUnit
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._key)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._size)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._mime)
//        case 5: try decoder.decodeSingularEnumField(value: &_storage._source)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._image)
//        case 7: try decoder.decodeSingularInt32Field(value: &_storage._duration)
//        case 8: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._key {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._size {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._mime {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._source {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._image {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._duration {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._fsUnit {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MediaContent, rhs: LarkNCExtensionPB_Entities_MediaContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._key != rhs_storage._key {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._size != rhs_storage._size {return false}
//        if _storage._mime != rhs_storage._mime {return false}
//        if _storage._source != rhs_storage._source {return false}
//        if _storage._image != rhs_storage._image {return false}
//        if _storage._duration != rhs_storage._duration {return false}
//        if _storage._fsUnit != rhs_storage._fsUnit {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MediaContent.Source: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "LARK"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_AudioContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".AudioContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "key"),
//    2: .same(proto: "duration"),
//    3: .same(proto: "size"),
//    4: .standard(proto: "audio_recognition"),
//    5: .standard(proto: "fs_unit"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _key: String? = nil
//    var _duration: Int32? = nil
//    var _size: Int64? = nil
//    var _audioRecognition: LarkNCExtensionPB_Entities_AudioRecognition? = nil
//    var _fsUnit: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _key = source._key
//      _duration = source._duration
//      _size = source._size
//      _audioRecognition = source._audioRecognition
//      _fsUnit = source._fsUnit
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._key)
//        case 2: try decoder.decodeSingularInt32Field(value: &_storage._duration)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._size)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._audioRecognition)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._key {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._duration {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._size {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._audioRecognition {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._fsUnit {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AudioContent, rhs: LarkNCExtensionPB_Entities_AudioContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._key != rhs_storage._key {return false}
//        if _storage._duration != rhs_storage._duration {return false}
//        if _storage._size != rhs_storage._size {return false}
//        if _storage._audioRecognition != rhs_storage._audioRecognition {return false}
//        if _storage._fsUnit != rhs_storage._fsUnit {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_AudioRecognition: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AudioRecognition"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "recognition_result"),
    2: .standard(proto: "origin_sender_id"),
    3: .standard(proto: "is_hidden"),
    4: .standard(proto: "origin_tos_key"),
    5: .standard(proto: "is_finish"),
    6: .standard(proto: "is_audio_with_text"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._recognitionResult)
      case 2: try decoder.decodeSingularInt64Field(value: &self._originSenderID)
      case 3: try decoder.decodeSingularBoolField(value: &self._isHidden)
      case 4: try decoder.decodeSingularStringField(value: &self._originTosKey)
      case 5: try decoder.decodeSingularBoolField(value: &self._isFinish)
      case 6: try decoder.decodeSingularBoolField(value: &self._isAudioWithText)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._recognitionResult {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._originSenderID {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    }
    if let v = self._isHidden {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._originTosKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._isFinish {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._isAudioWithText {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_AudioRecognition, rhs: LarkNCExtensionPB_Entities_AudioRecognition) -> Bool {
    if lhs._recognitionResult != rhs._recognitionResult {return false}
    if lhs._originSenderID != rhs._originSenderID {return false}
    if lhs._isHidden != rhs._isHidden {return false}
    if lhs._originTosKey != rhs._originTosKey {return false}
    if lhs._isFinish != rhs._isFinish {return false}
    if lhs._isAudioWithText != rhs._isAudioWithText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_PostContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".PostContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "title"),
//    2: .same(proto: "text"),
//    3: .same(proto: "attachments"),
//    4: .standard(proto: "is_notified"),
//    5: .standard(proto: "comment_count"),
//    6: .standard(proto: "rich_text"),
//    7: .standard(proto: "i18n_title_key"),
//    8: .standard(proto: "is_group_announcement"),
//    9: .standard(proto: "doc_entity"),
//    10: .same(proto: "abbreviation"),
//    11: .same(proto: "urls"),
//    12: .standard(proto: "typed_element_refs"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _title: String? = nil
//    var _text: String? = nil
//    var _attachments: [String] = []
//    var _isNotified: Bool? = nil
//    var _commentCount: String? = nil
//    var _richText: LarkNCExtensionPB_Entities_RichText? = nil
//    var _i18NTitleKey: String? = nil
//    var _isGroupAnnouncement: Bool? = nil
//    var _docEntity: LarkNCExtensionPB_Entities_DocEntity? = nil
//    var _abbreviation: LarkNCExtensionPB_Entities_Abbreviation? = nil
//    var _urls: [LarkNCExtensionPB_Entities_MessageUrlPreview] = []
//    var _typedElementRefs: Dictionary<String,LarkNCExtensionPB_Entities_ElementRefs> = [:]
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _title = source._title
//      _text = source._text
//      _attachments = source._attachments
//      _isNotified = source._isNotified
//      _commentCount = source._commentCount
//      _richText = source._richText
//      _i18NTitleKey = source._i18NTitleKey
//      _isGroupAnnouncement = source._isGroupAnnouncement
//      _docEntity = source._docEntity
//      _abbreviation = source._abbreviation
//      _urls = source._urls
//      _typedElementRefs = source._typedElementRefs
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._richText, !v.isInitialized {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._urls) {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._typedElementRefs) {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._title)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._text)
//        case 3: try decoder.decodeRepeatedStringField(value: &_storage._attachments)
//        case 4: try decoder.decodeSingularBoolField(value: &_storage._isNotified)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._commentCount)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._richText)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._i18NTitleKey)
//        case 8: try decoder.decodeSingularBoolField(value: &_storage._isGroupAnnouncement)
//        case 9: try decoder.decodeSingularMessageField(value: &_storage._docEntity)
//        case 10: try decoder.decodeSingularMessageField(value: &_storage._abbreviation)
//        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._urls)
//        case 12: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_ElementRefs>.self, value: &_storage._typedElementRefs)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._title {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._text {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if !_storage._attachments.isEmpty {
//        try visitor.visitRepeatedStringField(value: _storage._attachments, fieldNumber: 3)
//      }
//      if let v = _storage._isNotified {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._commentCount {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._richText {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._i18NTitleKey {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._isGroupAnnouncement {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._docEntity {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._abbreviation {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
//      }
//      if !_storage._urls.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._urls, fieldNumber: 11)
//      }
//      if !_storage._typedElementRefs.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_ElementRefs>.self, value: _storage._typedElementRefs, fieldNumber: 12)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_PostContent, rhs: LarkNCExtensionPB_Entities_PostContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._title != rhs_storage._title {return false}
//        if _storage._text != rhs_storage._text {return false}
//        if _storage._attachments != rhs_storage._attachments {return false}
//        if _storage._isNotified != rhs_storage._isNotified {return false}
//        if _storage._commentCount != rhs_storage._commentCount {return false}
//        if _storage._richText != rhs_storage._richText {return false}
//        if _storage._i18NTitleKey != rhs_storage._i18NTitleKey {return false}
//        if _storage._isGroupAnnouncement != rhs_storage._isGroupAnnouncement {return false}
//        if _storage._docEntity != rhs_storage._docEntity {return false}
//        if _storage._abbreviation != rhs_storage._abbreviation {return false}
//        if _storage._urls != rhs_storage._urls {return false}
//        if _storage._typedElementRefs != rhs_storage._typedElementRefs {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_EmailContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".EmailContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "title"),
//    2: .same(proto: "text"),
//    3: .same(proto: "attachments"),
//    4: .standard(proto: "rich_text"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _title: String? = nil
//    var _text: String? = nil
//    var _attachments: [LarkNCExtensionPB_Entities_Attachment] = []
//    var _richText: LarkNCExtensionPB_Entities_RichText? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _title = source._title
//      _text = source._text
//      _attachments = source._attachments
//      _richText = source._richText
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._richText, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._title)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._text)
//        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._attachments)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._richText)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._title {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._text {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if !_storage._attachments.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._attachments, fieldNumber: 3)
//      }
//      if let v = _storage._richText {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_EmailContent, rhs: LarkNCExtensionPB_Entities_EmailContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._title != rhs_storage._title {return false}
//        if _storage._text != rhs_storage._text {return false}
//        if _storage._attachments != rhs_storage._attachments {return false}
//        if _storage._richText != rhs_storage._richText {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Attachment: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Attachment"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "key"),
//    2: .same(proto: "name"),
//    3: .same(proto: "size"),
//    4: .same(proto: "mime"),
//    5: .same(proto: "extra"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _key: String? = nil
//    var _name: String? = nil
//    var _size: Int64? = nil
//    var _mime: String? = nil
//    var _extra: LarkNCExtensionPB_Entities_Attachment.Extra? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _key = source._key
//      _name = source._name
//      _size = source._size
//      _mime = source._mime
//      _extra = source._extra
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._key)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._size)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._mime)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._extra)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._key {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._size {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._mime {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._extra {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Attachment, rhs: LarkNCExtensionPB_Entities_Attachment) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._key != rhs_storage._key {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._size != rhs_storage._size {return false}
//        if _storage._mime != rhs_storage._mime {return false}
//        if _storage._extra != rhs_storage._extra {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Attachment.Extra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_Attachment.protoMessageName + ".Extra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "thumbnail"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _thumbnail: LarkNCExtensionPB_Entities_Image? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _thumbnail = source._thumbnail
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._thumbnail)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._thumbnail {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Attachment.Extra, rhs: LarkNCExtensionPB_Entities_Attachment.Extra) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._thumbnail != rhs_storage._thumbnail {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CommercialHongbaoContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CommercialHongbaoContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "subject"),
//    3: .same(proto: "type"),
//    4: .same(proto: "clicked"),
//    5: .standard(proto: "is_expired"),
//    6: .same(proto: "grabbed"),
//    7: .standard(proto: "grabbed_finish"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._id == nil {return false}
//    if self._subject == nil {return false}
//    if self._type == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._id)
//      case 2: try decoder.decodeSingularStringField(value: &self._subject)
//      case 3: try decoder.decodeSingularEnumField(value: &self._type)
//      case 4: try decoder.decodeSingularBoolField(value: &self._clicked)
//      case 5: try decoder.decodeSingularBoolField(value: &self._isExpired)
//      case 6: try decoder.decodeSingularBoolField(value: &self._grabbed)
//      case 7: try decoder.decodeSingularBoolField(value: &self._grabbedFinish)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._subject {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//    }
//    if let v = self._clicked {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//    }
//    if let v = self._isExpired {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//    }
//    if let v = self._grabbed {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//    }
//    if let v = self._grabbedFinish {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CommercialHongbaoContent, rhs: LarkNCExtensionPB_Entities_CommercialHongbaoContent) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._subject != rhs._subject {return false}
//    if lhs._type != rhs._type {return false}
//    if lhs._clicked != rhs._clicked {return false}
//    if lhs._isExpired != rhs._isExpired {return false}
//    if lhs._grabbed != rhs._grabbed {return false}
//    if lhs._grabbedFinish != rhs._grabbedFinish {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CommercialHongbaoContent.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "COMMERCIAL"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_HongbaoContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".HongbaoContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "subject"),
//    3: .same(proto: "type"),
//    4: .same(proto: "clicked"),
//    5: .standard(proto: "is_expired"),
//    6: .same(proto: "grabbed"),
//    7: .standard(proto: "grabbed_finish"),
//    8: .standard(proto: "can_grab"),
//    9: .standard(proto: "preview_user_ids"),
//    10: .standard(proto: "total_num"),
//    21: .same(proto: "cover"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: Int64? = nil
//    var _subject: String? = nil
//    var _type: LarkNCExtensionPB_Entities_HongbaoContent.TypeEnum? = nil
//    var _clicked: Bool? = nil
//    var _isExpired: Bool? = nil
//    var _grabbed: Bool? = nil
//    var _grabbedFinish: Bool? = nil
//    var _canGrab: Bool? = nil
//    var _previewUserIds: [Int64] = []
//    var _totalNum: Int32? = nil
//    var _cover: LarkNCExtensionPB_Entities_HongbaoCover? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _subject = source._subject
//      _type = source._type
//      _clicked = source._clicked
//      _isExpired = source._isExpired
//      _grabbed = source._grabbed
//      _grabbedFinish = source._grabbedFinish
//      _canGrab = source._canGrab
//      _previewUserIds = source._previewUserIds
//      _totalNum = source._totalNum
//      _cover = source._cover
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._id == nil {return false}
//      if _storage._subject == nil {return false}
//      if _storage._type == nil {return false}
//      if let v = _storage._cover, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._subject)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 4: try decoder.decodeSingularBoolField(value: &_storage._clicked)
//        case 5: try decoder.decodeSingularBoolField(value: &_storage._isExpired)
//        case 6: try decoder.decodeSingularBoolField(value: &_storage._grabbed)
//        case 7: try decoder.decodeSingularBoolField(value: &_storage._grabbedFinish)
//        case 8: try decoder.decodeSingularBoolField(value: &_storage._canGrab)
//        case 9: try decoder.decodeRepeatedInt64Field(value: &_storage._previewUserIds)
//        case 10: try decoder.decodeSingularInt32Field(value: &_storage._totalNum)
//        case 21: try decoder.decodeSingularMessageField(value: &_storage._cover)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._subject {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._clicked {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._isExpired {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._grabbed {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._grabbedFinish {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._canGrab {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
//      }
//      if !_storage._previewUserIds.isEmpty {
//        try visitor.visitRepeatedInt64Field(value: _storage._previewUserIds, fieldNumber: 9)
//      }
//      if let v = _storage._totalNum {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._cover {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_HongbaoContent, rhs: LarkNCExtensionPB_Entities_HongbaoContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._subject != rhs_storage._subject {return false}
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._clicked != rhs_storage._clicked {return false}
//        if _storage._isExpired != rhs_storage._isExpired {return false}
//        if _storage._grabbed != rhs_storage._grabbed {return false}
//        if _storage._grabbedFinish != rhs_storage._grabbedFinish {return false}
//        if _storage._canGrab != rhs_storage._canGrab {return false}
//        if _storage._previewUserIds != rhs_storage._previewUserIds {return false}
//        if _storage._totalNum != rhs_storage._totalNum {return false}
//        if _storage._cover != rhs_storage._cover {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_HongbaoContent.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "P2P"),
//    2: .same(proto: "GROUP_FIX"),
//    3: .same(proto: "GROUP_RANDOM"),
//    5: .same(proto: "EXCLUSIVE"),
//    6: .same(proto: "B2C_FIX"),
//    7: .same(proto: "B2C_RANDOM"),
//  ]
//}

extension LarkNCExtensionPB_Entities_TodoOperationContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TodoOperationContent"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "operation_type"),
    2: .standard(proto: "operator_id"),
    3: .standard(proto: "todo_detail"),
    4: .standard(proto: "update_fields"),
    5: .standard(proto: "msg_status"),
    6: .standard(proto: "todo_comment_detail"),
    7: .standard(proto: "daily_remind"),
    8: .standard(proto: "target_user_ids"),
    9: .standard(proto: "complete_type"),
  ]

  fileprivate class _StorageClass {
    var _operationType: LarkNCExtensionPB_Entities_TodoOperationContent.TypeEnum? = nil
    var _operatorID: String? = nil
    var _todoDetail: LarkNCExtensionPB_Entities_TodoDetail? = nil
    var _updateFields: [LarkNCExtensionPB_Entities_TodoOperationContent.UpdateField] = []
    var _msgStatus: LarkNCExtensionPB_Entities_TodoOperationContent.MsgStatus? = nil
    var _todoCommentDetail: LarkNCExtensionPB_Entities_TodoCommentDetail? = nil
    var _dailyRemind: LarkNCExtensionPB_Entities_TodoDailyRemind? = nil
    var _targetUserIds: [String] = []
    var _completeType: LarkNCExtensionPB_Entities_TodoOperationContent.CompleteType? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _operationType = source._operationType
      _operatorID = source._operatorID
      _todoDetail = source._todoDetail
      _updateFields = source._updateFields
      _msgStatus = source._msgStatus
      _todoCommentDetail = source._todoCommentDetail
      _dailyRemind = source._dailyRemind
      _targetUserIds = source._targetUserIds
      _completeType = source._completeType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._todoDetail, !v.isInitialized {return false}
      if let v = _storage._todoCommentDetail, !v.isInitialized {return false}
      if let v = _storage._dailyRemind, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._operationType)
        case 2: try decoder.decodeSingularStringField(value: &_storage._operatorID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._todoDetail)
        case 4: try decoder.decodeRepeatedEnumField(value: &_storage._updateFields)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._msgStatus)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._todoCommentDetail)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._dailyRemind)
        case 8: try decoder.decodeRepeatedStringField(value: &_storage._targetUserIds)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._completeType)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._operationType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._operatorID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._todoDetail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._updateFields.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._updateFields, fieldNumber: 4)
      }
      if let v = _storage._msgStatus {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      }
      if let v = _storage._todoCommentDetail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._dailyRemind {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._targetUserIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._targetUserIds, fieldNumber: 8)
      }
      if let v = _storage._completeType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_TodoOperationContent, rhs: LarkNCExtensionPB_Entities_TodoOperationContent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._operationType != rhs_storage._operationType {return false}
        if _storage._operatorID != rhs_storage._operatorID {return false}
        if _storage._todoDetail != rhs_storage._todoDetail {return false}
        if _storage._updateFields != rhs_storage._updateFields {return false}
        if _storage._msgStatus != rhs_storage._msgStatus {return false}
        if _storage._todoCommentDetail != rhs_storage._todoCommentDetail {return false}
        if _storage._dailyRemind != rhs_storage._dailyRemind {return false}
        if _storage._targetUserIds != rhs_storage._targetUserIds {return false}
        if _storage._completeType != rhs_storage._completeType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_TodoOperationContent.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "UPDATE"),
    2: .same(proto: "ASSIGN"),
    3: .same(proto: "COMPLETE"),
    4: .same(proto: "CANCEL"),
    5: .same(proto: "DELETE"),
    6: .same(proto: "CREATE"),
    7: .same(proto: "INCOMPLETE"),
    8: .same(proto: "SHARE"),
    9: .same(proto: "CREATE_COMMENT"),
    10: .same(proto: "REPLY_COMMENT"),
    11: .same(proto: "DAILY_REMIND"),
    12: .same(proto: "FOLLOW"),
    13: .same(proto: "UNFOLLOW"),
    14: .same(proto: "REACT_COMMENT"),
    15: .same(proto: "COMPLETE_ASSIGNEE"),
    16: .same(proto: "COMPLETE_SELF"),
    17: .same(proto: "RESTORE_ASSIGNEE"),
    18: .same(proto: "RESTORE_SELF"),
  ]
}

extension LarkNCExtensionPB_Entities_TodoOperationContent.CompleteType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_COMPLETE_TYPE"),
    1: .same(proto: "COMPLETE_WHOLE_TODO"),
    2: .same(proto: "COMPLETE_WHOLE_TODO_AFTER_REMOVE_ASSIGNEE_SELF"),
    3: .same(proto: "COMPLETE_WHOLE_TODO_AFTER_REMOVE_ASSIGNEES"),
    4: .same(proto: "COMPLETE_WHOLE_TODO_AFTER_REMOVE_ASSIGNEE_YOURSELF"),
    5: .same(proto: "COMPLETE_WHOLE_TODO_AFTER_COMPLETE_ASSIGNEES"),
    6: .same(proto: "COMPLETE_WHOLE_TODO_AFTER_COMPLETE_ASSIGNEE_YOURSELF"),
    21: .same(proto: "RESTORE_WHOLE_TODO"),
    22: .same(proto: "RESTORE_WHOLE_TODO_AFTER_ADD_ASSIGNEE_SELF"),
    23: .same(proto: "RESTORE_WHOLE_TODO_AFTER_ADD_ASSIGNEES"),
    24: .same(proto: "RESTORE_WHOLE_TODO_AFTER_ADD_ASSIGNEES_YOURSELF"),
    25: .same(proto: "RESTORE_WHOLE_TODO_AFTER_RESTORE_SELF"),
    26: .same(proto: "RESTORE_WHOLE_TODO_AFTER_RESTORE_ASSIGNEE"),
    27: .same(proto: "RESTORE_WHOLE_TODO_AFTER_RESTORE_ASSIGNEE_YOURSELF"),
  ]
}

extension LarkNCExtensionPB_Entities_TodoOperationContent.UpdateField: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "SUMMARY"),
    1: .same(proto: "DUE_TIME"),
  ]
}

extension LarkNCExtensionPB_Entities_TodoOperationContent.MsgStatus: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "ACTIVE"),
    1: .same(proto: "DELETED"),
  ]
}

extension LarkNCExtensionPB_Entities_TodoDetail: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TodoDetail"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "guid"),
    2: .same(proto: "assignees"),
    3: .same(proto: "summary"),
    4: .standard(proto: "due_time"),
    5: .standard(proto: "due_time_zone"),
    6: .standard(proto: "is_all_day"),
    7: .standard(proto: "msg_belong_to"),
    8: .standard(proto: "rich_summary"),
    9: .same(proto: "followers"),
    10: .standard(proto: "creator_id"),
    11: .standard(proto: "completed_milli_time"),
    12: .standard(proto: "deleted_milli_time"),
    13: .same(proto: "source"),
    14: .standard(proto: "can_follow"),
    15: .standard(proto: "user_to_permission"),
    16: .standard(proto: "user_details"),
    17: .standard(proto: "custom_complete"),
    18: .same(proto: "rrule"),
    19: .same(proto: "reminders"),
  ]

  fileprivate class _StorageClass {
    var _guid: String? = nil
    var _assignees: [String] = []
    var _summary: String? = nil
    var _dueTime: Int64? = nil
    var _dueTimeZone: String? = nil
    var _isAllDay: Bool? = nil
    var _msgBelongTo: LarkNCExtensionPB_Entities_TodoDetail.MsgBelongTo? = nil
    var _richSummary: LarkNCExtensionPB_Entities_RichContent? = nil
    var _followers: [String] = []
    var _creatorID: String? = nil
    var _completedMilliTime: Int64? = nil
    var _deletedMilliTime: Int64? = nil
    var _source: Int32? = nil
    var _canFollow: Bool? = nil
    var _userToPermission: Dictionary<String,LarkNCExtensionPB_Entities_TodoDetail.Permission> = [:]
    var _userDetails: Dictionary<String,LarkNCExtensionPB_Entities_TodoDetail.UserDetail> = [:]
    var _customComplete: LarkNCExtensionPB_Entities_CustomComplete? = nil
    var _rrule: String? = nil
    var _reminders: [LarkNCExtensionPB_Entities_TodoDetailReminder] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _guid = source._guid
      _assignees = source._assignees
      _summary = source._summary
      _dueTime = source._dueTime
      _dueTimeZone = source._dueTimeZone
      _isAllDay = source._isAllDay
      _msgBelongTo = source._msgBelongTo
      _richSummary = source._richSummary
      _followers = source._followers
      _creatorID = source._creatorID
      _completedMilliTime = source._completedMilliTime
      _deletedMilliTime = source._deletedMilliTime
      _source = source._source
      _canFollow = source._canFollow
      _userToPermission = source._userToPermission
      _userDetails = source._userDetails
      _customComplete = source._customComplete
      _rrule = source._rrule
      _reminders = source._reminders
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._richSummary, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._guid)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._assignees)
        case 3: try decoder.decodeSingularStringField(value: &_storage._summary)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._dueTime)
        case 5: try decoder.decodeSingularStringField(value: &_storage._dueTimeZone)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._isAllDay)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._msgBelongTo)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._richSummary)
        case 9: try decoder.decodeRepeatedStringField(value: &_storage._followers)
        case 10: try decoder.decodeSingularStringField(value: &_storage._creatorID)
        case 11: try decoder.decodeSingularInt64Field(value: &_storage._completedMilliTime)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._deletedMilliTime)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._source)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._canFollow)
        case 15: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_TodoDetail.Permission>.self, value: &_storage._userToPermission)
        case 16: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_TodoDetail.UserDetail>.self, value: &_storage._userDetails)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._customComplete)
        case 18: try decoder.decodeSingularStringField(value: &_storage._rrule)
        case 19: try decoder.decodeRepeatedMessageField(value: &_storage._reminders)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._guid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if !_storage._assignees.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._assignees, fieldNumber: 2)
      }
      if let v = _storage._summary {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._dueTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._dueTimeZone {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._isAllDay {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      }
      if let v = _storage._msgBelongTo {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
      }
      if let v = _storage._richSummary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._followers.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._followers, fieldNumber: 9)
      }
      if let v = _storage._creatorID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      }
      if let v = _storage._completedMilliTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 11)
      }
      if let v = _storage._deletedMilliTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 12)
      }
      if let v = _storage._source {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._canFollow {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      }
      if !_storage._userToPermission.isEmpty {
        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_TodoDetail.Permission>.self, value: _storage._userToPermission, fieldNumber: 15)
      }
      if !_storage._userDetails.isEmpty {
        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_TodoDetail.UserDetail>.self, value: _storage._userDetails, fieldNumber: 16)
      }
      if let v = _storage._customComplete {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._rrule {
        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
      }
      if !_storage._reminders.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._reminders, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_TodoDetail, rhs: LarkNCExtensionPB_Entities_TodoDetail) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._guid != rhs_storage._guid {return false}
        if _storage._assignees != rhs_storage._assignees {return false}
        if _storage._summary != rhs_storage._summary {return false}
        if _storage._dueTime != rhs_storage._dueTime {return false}
        if _storage._dueTimeZone != rhs_storage._dueTimeZone {return false}
        if _storage._isAllDay != rhs_storage._isAllDay {return false}
        if _storage._msgBelongTo != rhs_storage._msgBelongTo {return false}
        if _storage._richSummary != rhs_storage._richSummary {return false}
        if _storage._followers != rhs_storage._followers {return false}
        if _storage._creatorID != rhs_storage._creatorID {return false}
        if _storage._completedMilliTime != rhs_storage._completedMilliTime {return false}
        if _storage._deletedMilliTime != rhs_storage._deletedMilliTime {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._canFollow != rhs_storage._canFollow {return false}
        if _storage._userToPermission != rhs_storage._userToPermission {return false}
        if _storage._userDetails != rhs_storage._userDetails {return false}
        if _storage._customComplete != rhs_storage._customComplete {return false}
        if _storage._rrule != rhs_storage._rrule {return false}
        if _storage._reminders != rhs_storage._reminders {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_TodoDetail.MsgBelongTo: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "Bot"),
    2: .same(proto: "Chat"),
  ]
}

extension LarkNCExtensionPB_Entities_TodoDetail.Permission: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_TodoDetail.protoMessageName + ".Permission"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "can_complete_self"),
    2: .standard(proto: "can_complete_todo"),
    3: .standard(proto: "can_follow"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._canCompleteSelf)
      case 2: try decoder.decodeSingularBoolField(value: &self._canCompleteTodo)
      case 3: try decoder.decodeSingularBoolField(value: &self._canFollow)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._canCompleteSelf {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._canCompleteTodo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._canFollow {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_TodoDetail.Permission, rhs: LarkNCExtensionPB_Entities_TodoDetail.Permission) -> Bool {
    if lhs._canCompleteSelf != rhs._canCompleteSelf {return false}
    if lhs._canCompleteTodo != rhs._canCompleteTodo {return false}
    if lhs._canFollow != rhs._canFollow {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_TodoDetail.UserDetail: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_TodoDetail.protoMessageName + ".UserDetail"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "is_completed"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._isCompleted)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._isCompleted {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_TodoDetail.UserDetail, rhs: LarkNCExtensionPB_Entities_TodoDetail.UserDetail) -> Bool {
    if lhs._isCompleted != rhs._isCompleted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_TodoDetailReminder: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TodoDetailReminder"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "time"),
    3: .standard(proto: "not_need_fire"),
    4: .standard(proto: "is_all_day"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularInt64Field(value: &self._time)
      case 3: try decoder.decodeSingularBoolField(value: &self._notNeedFire)
      case 4: try decoder.decodeSingularBoolField(value: &self._isAllDay)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._time {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    }
    if let v = self._notNeedFire {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._isAllDay {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_TodoDetailReminder, rhs: LarkNCExtensionPB_Entities_TodoDetailReminder) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._time != rhs._time {return false}
    if lhs._notNeedFire != rhs._notNeedFire {return false}
    if lhs._isAllDay != rhs._isAllDay {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_TodoDetailReminder.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "ABSOLUTE"),
    2: .same(proto: "RELATIVE"),
    3: .same(proto: "FLOATING"),
  ]
}

extension LarkNCExtensionPB_Entities_CustomComplete: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomComplete"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "android"),
    2: .same(proto: "ios"),
    3: .same(proto: "pc"),
  ]

  fileprivate class _StorageClass {
    var _android: LarkNCExtensionPB_Entities_CustomComplete.Action? = nil
    var _ios: LarkNCExtensionPB_Entities_CustomComplete.Action? = nil
    var _pc: LarkNCExtensionPB_Entities_CustomComplete.Action? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _android = source._android
      _ios = source._ios
      _pc = source._pc
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._android)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._ios)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._pc)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._android {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._ios {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._pc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CustomComplete, rhs: LarkNCExtensionPB_Entities_CustomComplete) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._android != rhs_storage._android {return false}
        if _storage._ios != rhs_storage._ios {return false}
        if _storage._pc != rhs_storage._pc {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CustomComplete.Action: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CustomComplete.protoMessageName + ".Action"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "href"),
    2: .same(proto: "tip"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._href)
      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.tip)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._href {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.tip.isEmpty {
      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.tip, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CustomComplete.Action, rhs: LarkNCExtensionPB_Entities_CustomComplete.Action) -> Bool {
    if lhs._href != rhs._href {return false}
    if lhs.tip != rhs.tip {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_TodoCommentDetail: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TodoCommentDetail"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "comment_id"),
    2: .standard(proto: "comment_type"),
    3: .standard(proto: "rich_content"),
    4: .same(proto: "position"),
    5: .same(proto: "attachments"),
    6: .standard(proto: "newly_added_reaction"),
  ]

  fileprivate class _StorageClass {
    var _commentID: Int64? = nil
    var _commentType: LarkNCExtensionPB_Entities_TodoCommentDetail.TodoCommentType? = nil
    var _richContent: LarkNCExtensionPB_Entities_RichContent? = nil
    var _position: Int32? = nil
    var _attachments: [LarkNCExtensionPB_Entities_TodoAttachmentInfo] = []
    var _newlyAddedReaction: LarkNCExtensionPB_Entities_TodoCommentDetail.Reaction? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _commentID = source._commentID
      _commentType = source._commentType
      _richContent = source._richContent
      _position = source._position
      _attachments = source._attachments
      _newlyAddedReaction = source._newlyAddedReaction
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._richContent, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._commentID)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._commentType)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._richContent)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._position)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._attachments)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._newlyAddedReaction)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._commentID {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._commentType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      }
      if let v = _storage._richContent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._position {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if !_storage._attachments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attachments, fieldNumber: 5)
      }
      if let v = _storage._newlyAddedReaction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_TodoCommentDetail, rhs: LarkNCExtensionPB_Entities_TodoCommentDetail) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._commentID != rhs_storage._commentID {return false}
        if _storage._commentType != rhs_storage._commentType {return false}
        if _storage._richContent != rhs_storage._richContent {return false}
        if _storage._position != rhs_storage._position {return false}
        if _storage._attachments != rhs_storage._attachments {return false}
        if _storage._newlyAddedReaction != rhs_storage._newlyAddedReaction {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_TodoCommentDetail.TodoCommentType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_TYPE"),
    1: .same(proto: "RICH_TEXT"),
  ]
}

extension LarkNCExtensionPB_Entities_TodoCommentDetail.Reaction: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_TodoCommentDetail.protoMessageName + ".Reaction"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "user_id"),
    2: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._userID)
      case 2: try decoder.decodeSingularStringField(value: &self._type)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_TodoCommentDetail.Reaction, rhs: LarkNCExtensionPB_Entities_TodoCommentDetail.Reaction) -> Bool {
    if lhs._userID != rhs._userID {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_TodoDailyRemind: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TodoDailyRemind"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "todos"),
  ]

  public var isInitialized: Bool {
    if !LarkHTTP.Internal.areAllInitialized(self.todos) {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.todos)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if !self.todos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.todos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_TodoDailyRemind, rhs: LarkNCExtensionPB_Entities_TodoDailyRemind) -> Bool {
    if lhs.todos != rhs.todos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_TodoAttachmentInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TodoAttachmentInfo"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_TodoAttachmentInfo, rhs: LarkNCExtensionPB_Entities_TodoAttachmentInfo) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_TodoAttachmentInfo.TodoAttachmentType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_ATTACHMENT_TYPE"),
    1: .same(proto: "IMAGE"),
  ]
}

extension LarkNCExtensionPB_Entities_RichContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RichContent"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "rich_text"),
    2: .standard(proto: "doc_entity"),
    3: .standard(proto: "url_preview_hang_points"),
  ]

  fileprivate class _StorageClass {
    var _richText: LarkNCExtensionPB_Entities_RichText? = nil
    var _docEntity: LarkNCExtensionPB_Entities_DocEntity? = nil
    var _urlPreviewHangPoints: Dictionary<String,LarkNCExtensionPB_Entities_UrlPreviewHangPoint> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _richText = source._richText
      _docEntity = source._docEntity
      _urlPreviewHangPoints = source._urlPreviewHangPoints
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._richText, !v.isInitialized {return false}
      if !LarkHTTP.Internal.areAllInitialized(_storage._urlPreviewHangPoints) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._richText)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._docEntity)
        case 3: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_UrlPreviewHangPoint>.self, value: &_storage._urlPreviewHangPoints)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._richText {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._docEntity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._urlPreviewHangPoints.isEmpty {
        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_UrlPreviewHangPoint>.self, value: _storage._urlPreviewHangPoints, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichContent, rhs: LarkNCExtensionPB_Entities_RichContent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._richText != rhs_storage._richText {return false}
        if _storage._docEntity != rhs_storage._docEntity {return false}
        if _storage._urlPreviewHangPoints != rhs_storage._urlPreviewHangPoints {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_GeneralCalendarContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".GeneralCalendarContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "calendar_type"),
//    2: .standard(proto: "event_card"),
//    3: .standard(proto: "rsvp_comment_info"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _calendarType: LarkNCExtensionPB_Entities_GeneralCalendarContent.TypeEnum? = nil
//    var _eventCard: LarkNCExtensionPB_Entities_EventCardTemplate? = nil
//    var _rsvpCommentInfo: LarkNCExtensionPB_Entities_RSVPCommentInfo? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _calendarType = source._calendarType
//      _eventCard = source._eventCard
//      _rsvpCommentInfo = source._rsvpCommentInfo
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._calendarType)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._eventCard)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._rsvpCommentInfo)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._calendarType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._eventCard {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._rsvpCommentInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_GeneralCalendarContent, rhs: LarkNCExtensionPB_Entities_GeneralCalendarContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._calendarType != rhs_storage._calendarType {return false}
//        if _storage._eventCard != rhs_storage._eventCard {return false}
//        if _storage._rsvpCommentInfo != rhs_storage._rsvpCommentInfo {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_GeneralCalendarContent.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "TRANSFER_CALENDAR_EVENT"),
//    2: .same(proto: "RSVP_COMMENT"),
//    3: .same(proto: "SWITCH_CALENDAR"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_RSVPCommentInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".RSVPCommentInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "reply_comment_id"),
//    2: .same(proto: "comment"),
//    3: .standard(proto: "invite_operator_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._replyCommentID)
//      case 2: try decoder.decodeSingularStringField(value: &self._comment)
//      case 3: try decoder.decodeSingularStringField(value: &self._inviteOperatorID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._replyCommentID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._comment {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._inviteOperatorID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_RSVPCommentInfo, rhs: LarkNCExtensionPB_Entities_RSVPCommentInfo) -> Bool {
//    if lhs._replyCommentID != rhs._replyCommentID {return false}
//    if lhs._comment != rhs._comment {return false}
//    if lhs._inviteOperatorID != rhs._inviteOperatorID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".VideoChatI18nDefaultTopic"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "i18n_key"),
//    2: .same(proto: "params"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._i18NKey == nil {return false}
//    if !LarkHTTP.Internal.areAllInitialized(self.params) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._i18NKey)
//      case 2: try decoder.decodeRepeatedMessageField(value: &self.params)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._i18NKey {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if !self.params.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.params, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic, rhs: LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic) -> Bool {
//    if lhs._i18NKey != rhs._i18NKey {return false}
//    if lhs.params != rhs.params {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic.Param: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic.protoMessageName + ".Param"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .standard(proto: "default_content"),
//    3: .standard(proto: "fixed_content"),
//    4: .standard(proto: "chat_id"),
//    5: .standard(proto: "user_id"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._type == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._type)
//      case 2: try decoder.decodeSingularStringField(value: &self._defaultContent)
//      case 3:
//        if self.content != nil {try decoder.handleConflictingOneOf()}
//        var v: String?
//        try decoder.decodeSingularStringField(value: &v)
//        if let v = v {self.content = .fixedContent(v)}
//      case 4:
//        if self.content != nil {try decoder.handleConflictingOneOf()}
//        var v: String?
//        try decoder.decodeSingularStringField(value: &v)
//        if let v = v {self.content = .chatID(v)}
//      case 5:
//        if self.content != nil {try decoder.handleConflictingOneOf()}
//        var v: String?
//        try decoder.decodeSingularStringField(value: &v)
//        if let v = v {self.content = .userID(v)}
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._defaultContent {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    switch self.content {
//    case .fixedContent(let v)?:
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    case .chatID(let v)?:
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    case .userID(let v)?:
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    case nil: break
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic.Param, rhs: LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic.Param) -> Bool {
//    if lhs._type != rhs._type {return false}
//    if lhs._defaultContent != rhs._defaultContent {return false}
//    if lhs.content != rhs.content {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic.Param.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "FIXED_CONTENT"),
//    2: .same(proto: "GROUP"),
//    3: .same(proto: "LARK_USER"),
//    4: .same(proto: "ROOM"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_VideoChatContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".VideoChatContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .standard(proto: "meeting_card"),
//    3: .standard(proto: "sequence_id"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _type: LarkNCExtensionPB_Entities_VideoChatContent.TypeEnum? = nil
//    var _meetingCard: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard? = nil
//    var _sequenceID: Int64? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _type = source._type
//      _meetingCard = source._meetingCard
//      _sequenceID = source._sequenceID
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._type == nil {return false}
//      if let v = _storage._meetingCard, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._meetingCard)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._sequenceID)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._meetingCard {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._sequenceID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_VideoChatContent, rhs: LarkNCExtensionPB_Entities_VideoChatContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._meetingCard != rhs_storage._meetingCard {return false}
//        if _storage._sequenceID != rhs_storage._sequenceID {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_VideoChatContent.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "MEETING_CARD"),
//    2: .same(proto: "CHAT_ROOM_CARD"),
//    3: .same(proto: "SAME_PAGE_MEETING"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_VideoChatContent.protoMessageName + ".MeetingCard"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "meeting_id"),
//    2: .same(proto: "status"),
//    3: .standard(proto: "start_time_ms"),
//    4: .standard(proto: "end_time_ms"),
//    5: .same(proto: "topic"),
//    6: .standard(proto: "sponsor_id"),
//    7: .standard(proto: "host_id"),
//    8: .standard(proto: "meet_number"),
//    9: .same(proto: "participants"),
//    10: .standard(proto: "max_participant_count"),
//    11: .standard(proto: "host_type"),
//    12: .standard(proto: "card_type"),
//    13: .standard(proto: "forwarder_id"),
//    14: .standard(proto: "meeting_source"),
//    15: .standard(proto: "calendar_uid"),
//    16: .standard(proto: "is_locked"),
//    17: .standard(proto: "is_locked_joinable"),
//    18: .standard(proto: "group_id"),
//    19: .standard(proto: "i18n_default_topic"),
//    20: .standard(proto: "is_open_lobby"),
//    21: .standard(proto: "owner_user_id"),
//    22: .standard(proto: "owner_type"),
//    23: .standard(proto: "total_participant_num"),
//    24: .standard(proto: "all_participant_tenant"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _meetingID: String? = nil
//    var _status: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.Status? = nil
//    var _startTimeMs: Int64? = nil
//    var _endTimeMs: Int64? = nil
//    var _topic: String? = nil
//    var _sponsorID: String? = nil
//    var _hostID: String? = nil
//    var _meetNumber: String? = nil
//    var _participants: [LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant] = []
//    var _maxParticipantCount: Int32? = nil
//    var _hostType: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.ParticipantType? = nil
//    var _cardType: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.CardType? = nil
//    var _forwarderID: String? = nil
//    var _meetingSource: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingSource? = nil
//    var _calendarUid: String? = nil
//    var _isLocked: Bool? = nil
//    var _isLockedJoinable: Bool? = nil
//    var _groupID: String? = nil
//    var _i18NDefaultTopic: LarkNCExtensionPB_Entities_VideoChatI18nDefaultTopic? = nil
//    var _isOpenLobby: Bool? = nil
//    var _ownerUserID: String? = nil
//    var _ownerType: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.ParticipantType? = nil
//    var _totalParticipantNum: Int64? = nil
//    var _allParticipantTenant: [Int64] = []
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _meetingID = source._meetingID
//      _status = source._status
//      _startTimeMs = source._startTimeMs
//      _endTimeMs = source._endTimeMs
//      _topic = source._topic
//      _sponsorID = source._sponsorID
//      _hostID = source._hostID
//      _meetNumber = source._meetNumber
//      _participants = source._participants
//      _maxParticipantCount = source._maxParticipantCount
//      _hostType = source._hostType
//      _cardType = source._cardType
//      _forwarderID = source._forwarderID
//      _meetingSource = source._meetingSource
//      _calendarUid = source._calendarUid
//      _isLocked = source._isLocked
//      _isLockedJoinable = source._isLockedJoinable
//      _groupID = source._groupID
//      _i18NDefaultTopic = source._i18NDefaultTopic
//      _isOpenLobby = source._isOpenLobby
//      _ownerUserID = source._ownerUserID
//      _ownerType = source._ownerType
//      _totalParticipantNum = source._totalParticipantNum
//      _allParticipantTenant = source._allParticipantTenant
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._meetingID == nil {return false}
//      if _storage._status == nil {return false}
//      if _storage._startTimeMs == nil {return false}
//      if _storage._topic == nil {return false}
//      if _storage._sponsorID == nil {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._participants) {return false}
//      if let v = _storage._i18NDefaultTopic, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._meetingID)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._status)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._startTimeMs)
//        case 4: try decoder.decodeSingularInt64Field(value: &_storage._endTimeMs)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._topic)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._sponsorID)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._hostID)
//        case 8: try decoder.decodeSingularStringField(value: &_storage._meetNumber)
//        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._participants)
//        case 10: try decoder.decodeSingularInt32Field(value: &_storage._maxParticipantCount)
//        case 11: try decoder.decodeSingularEnumField(value: &_storage._hostType)
//        case 12: try decoder.decodeSingularEnumField(value: &_storage._cardType)
//        case 13: try decoder.decodeSingularStringField(value: &_storage._forwarderID)
//        case 14: try decoder.decodeSingularEnumField(value: &_storage._meetingSource)
//        case 15: try decoder.decodeSingularStringField(value: &_storage._calendarUid)
//        case 16: try decoder.decodeSingularBoolField(value: &_storage._isLocked)
//        case 17: try decoder.decodeSingularBoolField(value: &_storage._isLockedJoinable)
//        case 18: try decoder.decodeSingularStringField(value: &_storage._groupID)
//        case 19: try decoder.decodeSingularMessageField(value: &_storage._i18NDefaultTopic)
//        case 20: try decoder.decodeSingularBoolField(value: &_storage._isOpenLobby)
//        case 21: try decoder.decodeSingularStringField(value: &_storage._ownerUserID)
//        case 22: try decoder.decodeSingularEnumField(value: &_storage._ownerType)
//        case 23: try decoder.decodeSingularInt64Field(value: &_storage._totalParticipantNum)
//        case 24: try decoder.decodeRepeatedInt64Field(value: &_storage._allParticipantTenant)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._meetingID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._startTimeMs {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._endTimeMs {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._topic {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._sponsorID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._hostID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._meetNumber {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//      }
//      if !_storage._participants.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._participants, fieldNumber: 9)
//      }
//      if let v = _storage._maxParticipantCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._hostType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._cardType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._forwarderID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._meetingSource {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._calendarUid {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
//      }
//      if let v = _storage._isLocked {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
//      }
//      if let v = _storage._isLockedJoinable {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
//      }
//      if let v = _storage._groupID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
//      }
//      if let v = _storage._i18NDefaultTopic {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
//      }
//      if let v = _storage._isOpenLobby {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
//      }
//      if let v = _storage._ownerUserID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
//      }
//      if let v = _storage._ownerType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 22)
//      }
//      if let v = _storage._totalParticipantNum {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 23)
//      }
//      if !_storage._allParticipantTenant.isEmpty {
//        try visitor.visitRepeatedInt64Field(value: _storage._allParticipantTenant, fieldNumber: 24)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard, rhs: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._meetingID != rhs_storage._meetingID {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._startTimeMs != rhs_storage._startTimeMs {return false}
//        if _storage._endTimeMs != rhs_storage._endTimeMs {return false}
//        if _storage._topic != rhs_storage._topic {return false}
//        if _storage._sponsorID != rhs_storage._sponsorID {return false}
//        if _storage._hostID != rhs_storage._hostID {return false}
//        if _storage._meetNumber != rhs_storage._meetNumber {return false}
//        if _storage._participants != rhs_storage._participants {return false}
//        if _storage._maxParticipantCount != rhs_storage._maxParticipantCount {return false}
//        if _storage._hostType != rhs_storage._hostType {return false}
//        if _storage._cardType != rhs_storage._cardType {return false}
//        if _storage._forwarderID != rhs_storage._forwarderID {return false}
//        if _storage._meetingSource != rhs_storage._meetingSource {return false}
//        if _storage._calendarUid != rhs_storage._calendarUid {return false}
//        if _storage._isLocked != rhs_storage._isLocked {return false}
//        if _storage._isLockedJoinable != rhs_storage._isLockedJoinable {return false}
//        if _storage._groupID != rhs_storage._groupID {return false}
//        if _storage._i18NDefaultTopic != rhs_storage._i18NDefaultTopic {return false}
//        if _storage._isOpenLobby != rhs_storage._isOpenLobby {return false}
//        if _storage._ownerUserID != rhs_storage._ownerUserID {return false}
//        if _storage._ownerType != rhs_storage._ownerType {return false}
//        if _storage._totalParticipantNum != rhs_storage._totalParticipantNum {return false}
//        if _storage._allParticipantTenant != rhs_storage._allParticipantTenant {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.Status: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "JOINABLE"),
//    2: .same(proto: "FULL"),
//    3: .same(proto: "END"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.ParticipantType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOW_TYPE"),
//    1: .same(proto: "LARK_USER"),
//    2: .same(proto: "ROOM"),
//    3: .same(proto: "DOC_USER"),
//    4: .same(proto: "NEO_USER"),
//    5: .same(proto: "NEO_GUEST_USER"),
//    6: .same(proto: "PSTN_USER"),
//    7: .same(proto: "SIP_USER"),
//    8: .same(proto: "RESERVED_USER_1"),
//    9: .same(proto: "RESERVED_USER_2"),
//    10: .same(proto: "RESERVED_USER_3"),
//    11: .same(proto: "RESERVED_USER_4"),
//    12: .same(proto: "RESERVED_USER_5"),
//    13: .same(proto: "RESERVED_USER_6"),
//    14: .same(proto: "RESERVED_USER_7"),
//    15: .same(proto: "RESERVED_USER_8"),
//    16: .same(proto: "RESERVED_USER_9"),
//    17: .same(proto: "RESERVED_USER_10"),
//    18: .same(proto: "RESERVED_USER_11"),
//    19: .same(proto: "RESERVED_USER_12"),
//    20: .same(proto: "RESERVED_USER_13"),
//    21: .same(proto: "RESERVED_USER_14"),
//    22: .same(proto: "RESERVED_USER_15"),
//    23: .same(proto: "RESERVED_USER_16"),
//    24: .same(proto: "RESERVED_USER_17"),
//    25: .same(proto: "RESERVED_USER_18"),
//    26: .same(proto: "RESERVED_USER_19"),
//    27: .same(proto: "RESERVED_USER_20"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.CardType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_CARD_TYPE"),
//    1: .same(proto: "SPONSOR"),
//    2: .same(proto: "FORWARD"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingSource: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "CARD_UNKNOWN_SOURCE_TYPE"),
//    1: .same(proto: "CARD_FROM_USER"),
//    2: .same(proto: "CARD_FROM_CALENDAR"),
//    3: .same(proto: "CARD_FROM_INTERVIEW"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.protoMessageName + ".MeetingParticipant"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "user_id"),
//    2: .standard(proto: "join_time_ms"),
//    3: .same(proto: "status"),
//    4: .standard(proto: "device_id"),
//    5: .standard(proto: "user_type"),
//    6: .standard(proto: "is_lark_guest"),
//    7: .standard(proto: "device_type"),
//    8: .standard(proto: "tenant_id"),
//    9: .standard(proto: "tenant_tag"),
//    10: .standard(proto: "bind_id"),
//    11: .standard(proto: "bind_type"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._userID == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._userID)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._joinTimeMs)
//      case 3: try decoder.decodeSingularEnumField(value: &self._status)
//      case 4: try decoder.decodeSingularStringField(value: &self._deviceID)
//      case 5: try decoder.decodeSingularEnumField(value: &self._userType)
//      case 6: try decoder.decodeSingularBoolField(value: &self._isLarkGuest)
//      case 7: try decoder.decodeSingularEnumField(value: &self._deviceType)
//      case 8: try decoder.decodeSingularStringField(value: &self._tenantID)
//      case 9: try decoder.decodeSingularEnumField(value: &self._tenantTag)
//      case 10: try decoder.decodeSingularStringField(value: &self._bindID)
//      case 11: try decoder.decodeSingularEnumField(value: &self._bindType)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._userID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._joinTimeMs {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._status {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//    }
//    if let v = self._deviceID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._userType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
//    }
//    if let v = self._isLarkGuest {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//    }
//    if let v = self._deviceType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
//    }
//    if let v = self._tenantID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//    }
//    if let v = self._tenantTag {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
//    }
//    if let v = self._bindID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
//    }
//    if let v = self._bindType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant, rhs: LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant) -> Bool {
//    if lhs._userID != rhs._userID {return false}
//    if lhs._joinTimeMs != rhs._joinTimeMs {return false}
//    if lhs._status != rhs._status {return false}
//    if lhs._deviceID != rhs._deviceID {return false}
//    if lhs._userType != rhs._userType {return false}
//    if lhs._isLarkGuest != rhs._isLarkGuest {return false}
//    if lhs._deviceType != rhs._deviceType {return false}
//    if lhs._tenantID != rhs._tenantID {return false}
//    if lhs._tenantTag != rhs._tenantTag {return false}
//    if lhs._bindID != rhs._bindID {return false}
//    if lhs._bindType != rhs._bindType {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant.Status: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "CALLING"),
//    2: .same(proto: "ON_THE_CALL"),
//    3: .same(proto: "RINGING"),
//    4: .same(proto: "IDLE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant.TenantTag: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "STANDARD"),
//    1: .same(proto: "UNDEFINED"),
//    2: .same(proto: "SIMPLE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant.DeviceType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_DEVICE_TYPE"),
//    1: .same(proto: "DESKTOP"),
//    2: .same(proto: "MOBILE"),
//    3: .same(proto: "WEB"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_VideoChatContent.MeetingCard.MeetingParticipant.BindType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKOWN"),
//    1: .same(proto: "LARK"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_SystemContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".SystemContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "message_template"),
//    2: .same(proto: "contents"),
//    3: .same(proto: "type"),
//    4: .same(proto: "event"),
//    5: .standard(proto: "content_values"),
//    6: .standard(proto: "type_num"),
//    7: .standard(proto: "new_content_values"),
//    8: .standard(proto: "sys_content_values"),
//    9: .standard(proto: "item_actions"),
//    10: .same(proto: "version"),
//    100: .standard(proto: "e2ee_content"),
//    200: .standard(proto: "vc_content"),
//    300: .standard(proto: "hongbao_content"),
//    400: .standard(proto: "doc_entity"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _messageTemplate: String? = nil
//    var _contents: Dictionary<String,String> = [:]
//    var _type: LarkNCExtensionPB_Entities_SystemContent.TypeEnum? = nil
//    var _event: Data? = nil
//    var _contentValues: Dictionary<String,LarkNCExtensionPB_Entities_SystemContent.ContentValue> = [:]
//    var _typeNum: Int32? = nil
//    var _newContentValues: Dictionary<String,LarkNCExtensionPB_Entities_SystemContent.ContentValue> = [:]
//    var _sysContentValues: Dictionary<String,LarkNCExtensionPB_Entities_SystemContent.ContentValue> = [:]
//    var _itemActions: Dictionary<Int32,LarkNCExtensionPB_Entities_SystemMessageItemAction> = [:]
//    var _version: Int32? = nil
//    var _e2EeContent: LarkNCExtensionPB_Entities_SystemContent.E2EEContent? = nil
//    var _vcContent: LarkNCExtensionPB_Entities_SystemContent.VideoConferenceContent? = nil
//    var _hongbaoContent: LarkNCExtensionPB_Entities_SystemContent.HongbaoContent? = nil
//    var _docEntity: LarkNCExtensionPB_Entities_SystemContent.DocEntity? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _messageTemplate = source._messageTemplate
//      _contents = source._contents
//      _type = source._type
//      _event = source._event
//      _contentValues = source._contentValues
//      _typeNum = source._typeNum
//      _newContentValues = source._newContentValues
//      _sysContentValues = source._sysContentValues
//      _itemActions = source._itemActions
//      _version = source._version
//      _e2EeContent = source._e2EeContent
//      _vcContent = source._vcContent
//      _hongbaoContent = source._hongbaoContent
//      _docEntity = source._docEntity
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._messageTemplate == nil {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._contentValues) {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._newContentValues) {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._sysContentValues) {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._messageTemplate)
//        case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._contents)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 4: try decoder.decodeSingularBytesField(value: &_storage._event)
//        case 5: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_SystemContent.ContentValue>.self, value: &_storage._contentValues)
//        case 6: try decoder.decodeSingularInt32Field(value: &_storage._typeNum)
//        case 7: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_SystemContent.ContentValue>.self, value: &_storage._newContentValues)
//        case 8: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_SystemContent.ContentValue>.self, value: &_storage._sysContentValues)
//        case 9: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufInt32,LarkNCExtensionPB_Entities_SystemMessageItemAction>.self, value: &_storage._itemActions)
//        case 10: try decoder.decodeSingularInt32Field(value: &_storage._version)
//        case 100: try decoder.decodeSingularMessageField(value: &_storage._e2EeContent)
//        case 200: try decoder.decodeSingularMessageField(value: &_storage._vcContent)
//        case 300: try decoder.decodeSingularMessageField(value: &_storage._hongbaoContent)
//        case 400: try decoder.decodeSingularMessageField(value: &_storage._docEntity)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._messageTemplate {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if !_storage._contents.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._contents, fieldNumber: 2)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._event {
//        try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
//      }
//      if !_storage._contentValues.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_SystemContent.ContentValue>.self, value: _storage._contentValues, fieldNumber: 5)
//      }
//      if let v = _storage._typeNum {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
//      }
//      if !_storage._newContentValues.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_SystemContent.ContentValue>.self, value: _storage._newContentValues, fieldNumber: 7)
//      }
//      if !_storage._sysContentValues.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_SystemContent.ContentValue>.self, value: _storage._sysContentValues, fieldNumber: 8)
//      }
//      if !_storage._itemActions.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufInt32,LarkNCExtensionPB_Entities_SystemMessageItemAction>.self, value: _storage._itemActions, fieldNumber: 9)
//      }
//      if let v = _storage._version {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._e2EeContent {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
//      }
//      if let v = _storage._vcContent {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
//      }
//      if let v = _storage._hongbaoContent {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 300)
//      }
//      if let v = _storage._docEntity {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 400)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemContent, rhs: LarkNCExtensionPB_Entities_SystemContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._messageTemplate != rhs_storage._messageTemplate {return false}
//        if _storage._contents != rhs_storage._contents {return false}
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._event != rhs_storage._event {return false}
//        if _storage._contentValues != rhs_storage._contentValues {return false}
//        if _storage._typeNum != rhs_storage._typeNum {return false}
//        if _storage._newContentValues != rhs_storage._newContentValues {return false}
//        if _storage._sysContentValues != rhs_storage._sysContentValues {return false}
//        if _storage._itemActions != rhs_storage._itemActions {return false}
//        if _storage._version != rhs_storage._version {return false}
//        if _storage._e2EeContent != rhs_storage._e2EeContent {return false}
//        if _storage._vcContent != rhs_storage._vcContent {return false}
//        if _storage._hongbaoContent != rhs_storage._hongbaoContent {return false}
//        if _storage._docEntity != rhs_storage._docEntity {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SystemContent.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "USER_MODIFY_GROUP_NAME"),
//    2: .same(proto: "USER_MODIFY_GROUP_AVATAR"),
//    3: .same(proto: "USER_MODIFY_GROUP_DESCRIPTION"),
//    4: .same(proto: "USER_MODIFY_GROUP_SETTINGS"),
//    5: .same(proto: "USER_START_GROUP_AND_INVITE"),
//    6: .same(proto: "SYSTEM_WELCOME_USER"),
//    7: .same(proto: "USER_INVITE_OTHERS_JOIN"),
//    8: .same(proto: "USER_QUIT_GROUP"),
//    9: .same(proto: "USER_REMOVE_OTHERS"),
//    10: .same(proto: "USER_REMOVE_GROUP_DESCRIPTION"),
//    11: .same(proto: "USER_CHECK_OTHERS_TELEPHONE"),
//    12: .same(proto: "DERIVE_FROM_P2P_CHAT"),
//    13: .same(proto: "USER_JOIN_VIA_SHARE"),
//    14: .same(proto: "TRANSFER_GROUP_CHAT_OWNER"),
//    15: .same(proto: "TRANSFER_GROUP_CHAT_OWNER_AND_QUIT"),
//    16: .same(proto: "WIPE_ANNOUNCEMENT"),
//    17: .same(proto: "ADD_EMAIL_MEMBERS"),
//    18: .same(proto: "REMOVE_EMAIL_MEMBERS"),
//    19: .same(proto: "MODIFY_EMAIL_MEMBERS"),
//    20: .same(proto: "USER_MODIFY_EMAIL_SUBJECT"),
//    21: .same(proto: "USER_SYNC_MESSAGE"),
//    22: .same(proto: "USER_MODIFY_THREAD_TOPIC"),
//    23: .same(proto: "USER_INVITE_OTHERS_JOIN_CRYPTO_CHAT"),
//    24: .same(proto: "USER_START_CRYPTO_GROUP_AND_INVITE"),
//    25: .same(proto: "USER_CALL_E2EE_VOICE_WHEN_CANCELLED"),
//    26: .same(proto: "USER_CALL_E2EE_VOICE_WHEN_MISSED"),
//    27: .same(proto: "USER_CALL_E2EE_VOICE_DURATION"),
//    28: .same(proto: "VC_CALL_HOST_CANCEL"),
//    29: .same(proto: "VC_CALL_PARTI_NO_ANSWER"),
//    30: .same(proto: "VC_CALL_PARTI_CANCEL"),
//    31: .same(proto: "VC_CALL_HOST_BUSY"),
//    32: .same(proto: "VC_CALL_PARTI_BUSY"),
//    33: .same(proto: "VC_CALL_FINISH_NOTICE"),
//    34: .same(proto: "VC_CALL_DURATION"),
//    35: .same(proto: "USER_START_MEETING_GROUP_AND_INVITE"),
//    36: .same(proto: "USER_INVITE_OTHERS_JOIN_MEETING"),
//    37: .same(proto: "USER_QUIT_MEETING_CHAT"),
//    38: .same(proto: "USER_DISMISSED_MEETING_CHAT"),
//    39: .same(proto: "USER_START_GROUP"),
//    40: .same(proto: "USER_REMOVE_OTHERS_FROM_MEETING"),
//    41: .same(proto: "USER_ADD_MEETING_CHAT"),
//    42: .same(proto: "JOIN_DEPARTMENT_GROUP"),
//    43: .same(proto: "BUILD_FRIENDSHIP"),
//    44: .same(proto: "NON_FRIENDS_NOTICE"),
//    45: .same(proto: "DECLINE_INVITATION"),
//    46: .same(proto: "DECLINE_SPEC_INVITATION"),
//    47: .same(proto: "USER_JOIN_VIA_QR_CODE"),
//    48: .same(proto: "VC_CALL_CONNECT_FAIL"),
//    49: .same(proto: "VC_CALL_DISCONNECT"),
//    50: .same(proto: "VC_CALL_HOST_LOW_VERSION"),
//    51: .same(proto: "VC_CALL_PARTI_LOW_VERSION"),
//    52: .same(proto: "USER_CALL_E2EE_VOICE_WHEN_REFUSED"),
//    53: .same(proto: "USER_CALL_E2EE_VOICE_WHEN_OCCUPY"),
//    54: .same(proto: "GRAB_OTHER_HONGBAO"),
//    55: .same(proto: "OTHER_GRAB_MY_HONGBAO"),
//    56: .same(proto: "LAST_HONGBAO_IS_GRABBED"),
//    57: .same(proto: "SEND_HONGBAO_MESSAGE_FAILED"),
//    58: .same(proto: "USER_SYNC_MESSAGE_V2"),
//    59: .same(proto: "USER_SHARE_DOC_PERMISSION"),
//    60: .same(proto: "USER_CHANGE_DOC_PERMISSION"),
//    61: .same(proto: "USER_SHARE_DOC_FOLDER"),
//    62: .same(proto: "USER_OPEN_ONLY_ADMIN_POST"),
//    63: .same(proto: "USER_SEPECIFY_MEMBERS_POST"),
//    64: .same(proto: "USER_LOW_VERSION_HINT"),
//    65: .same(proto: "USER_THREAD_CLEAR_TITLE"),
//    66: .same(proto: "USER_OPEN_ANYONE_POST"),
//    67: .same(proto: "CRYPTO_MESSAGE_NOTICE_NO_TRANSMIT"),
//    68: .same(proto: "CRYPTO_MESSAGE_NOTICE_SEVEN_DAYS"),
//    69: .same(proto: "CRYPTO_MESSAGE_NOTICE_BURN_AFTER_READING"),
//    70: .same(proto: "USER_SET_CRYPTO_MESSAGE_BURN_LIFE"),
//    71: .same(proto: "USER_TOOK_SCREENSHOT_IN_CRYPTO_CHAT"),
//    72: .same(proto: "CRYPTO_LOW_VERSION_HINT"),
//    73: .same(proto: "INVITE_CHAT_MEMBER_2_OUT_CHAT"),
//    74: .same(proto: "CREATE_CHAT_AND_INVITE_FROM_CHAT_MEMBER"),
//    75: .same(proto: "AUTO_TRANSLATE_GUIDANCE"),
//    76: .same(proto: "WITHDRAW_ADDED_USER"),
//    77: .same(proto: "SAIPAN_REMIND_ONCALL_REPLY"),
//    78: .same(proto: "SAIPAN_REMIND_ONCALL_DONE"),
//    79: .same(proto: "SAIPAN_REMIND_ONCALL_AUTO_DONE"),
//    80: .same(proto: "SAIPAN_ADD_ONCALL"),
//    81: .same(proto: "USER_START_CRYPTO_GROUP"),
//    82: .same(proto: "USER_INVITE_OTHERS_JOIN_ONCALL"),
//    83: .same(proto: "VC_MEETING_STARTED"),
//    84: .same(proto: "USER_OPEN_ONLY_ADMIN_POST_THREAD"),
//    85: .same(proto: "USER_SPECIFY_MEMBERS_POST_THREAD"),
//    86: .same(proto: "USER_OPEN_ANYONE_POST_THREAD"),
//    87: .same(proto: "VC_MEETING_ENDED_OVER_ONE_HOUR"),
//    88: .same(proto: "INVITE_AT_CHATTERS"),
//    89: .same(proto: "VC_MEETING_ENDED_LESS_ONE_HOUR"),
//    90: .same(proto: "VC_MEETING_ENDED_LESS_ONE_MIN"),
//    91: .same(proto: "VC_DEFAULT_MEETING_ENDED_OVER_ONE_HOUR"),
//    92: .same(proto: "VC_DEFAULT_MEETING_ENDED_LESS_ONE_HOUR"),
//    93: .same(proto: "VC_DEFAULT_MEETING_ENDED_LESS_ONE_MIN"),
//    94: .same(proto: "VC_VIDEO_CHAT_STARTED"),
//    95: .same(proto: "VC_CALL_ENDED_OVER_ONE_HOUR"),
//    96: .same(proto: "VC_CALL_ENDED_LESS_ONE_HOUR"),
//    97: .same(proto: "VC_CALL_ENDED_LESS_ONE_MIN"),
//    98: .same(proto: "VC_CALL_DISCONNECTED_ENDED_OVER_ONE_HOUR"),
//    99: .same(proto: "VC_CALL_DISCONNECTED_ENDED_LESS_ONE_HOUR"),
//    100: .same(proto: "VC_CALL_DISCONNECTED_ENDED_LESS_ONE_MIN"),
//    101: .same(proto: "VC_CALL_INTERVIEWEE_NO_ANSWER"),
//    102: .same(proto: "VC_CALL_INTERVIEWEE_REFUSE"),
//    103: .same(proto: "VC_CALL_INTERVIEWER_CANCEL"),
//    104: .same(proto: "VC_CALL_INTERVIEWEE_BUSY"),
//    105: .same(proto: "VOIP_ENDED_OVER_ONE_HOUR"),
//    106: .same(proto: "VOIP_ENDED_LESS_ONE_HOUR"),
//    107: .same(proto: "VOIP_ENDED_LESS_ONE_MIN"),
//    108: .same(proto: "VOIP_DISCONNECTED_ENDED_OVER_ONE_HOUR"),
//    109: .same(proto: "VOIP_DISCONNECTED_ENDED_LESS_ONE_HOUR"),
//    110: .same(proto: "VOIP_DISCONNECTED_ENDED_LESS_ONE_MIN"),
//    111: .same(proto: "VOIP_INTERVIEWEE_NO_ANSWER"),
//    112: .same(proto: "VOIP_INTERVIEWEE_REFUSE"),
//    113: .same(proto: "VOIP_INTERVIEWER_CANCEL"),
//    114: .same(proto: "VOIP_INTERVIEWEE_BUSY"),
//    115: .same(proto: "SAIPAN_SELECT_CARD_CONTENT"),
//    116: .same(proto: "SAIPAN_USER_QUEUEING"),
//    117: .same(proto: "SAIPAN_NOTIFY_AGENT_QUEUEING"),
//    118: .same(proto: "SAIPAN_AGENT_ENTER_CHAT"),
//    119: .same(proto: "SAIPAN_RESERVED_4"),
//    120: .same(proto: "SAIPAN_RESERVED_5"),
//    121: .same(proto: "CANCEL_EMERGENCY_CALL"),
//    122: .same(proto: "HANGUP_EMERGENCY_CALL"),
//    123: .same(proto: "START_EMERGENCY_CALL"),
//    124: .same(proto: "MEETING_TRANSFER_TO_CHAT"),
//    125: .same(proto: "MEETING_TRANSFER_TO_CHAT_WITH_DOC_URL"),
//    126: .same(proto: "EXTERNAL_DATA_MIGRATION_LARK_MESSAGE_NOTIFY_1"),
//    127: .same(proto: "EXTERNAL_DATA_MIGRATION_LARK_MESSAGE_NOTIFY_2"),
//    128: .same(proto: "EXTERNAL_DATA_MIGRATION_LARK_MESSAGE_NOTIFY_3"),
//    129: .same(proto: "EXTERNAL_DATA_MIGRATION_LARK_MESSAGE_NOTIFY_4"),
//    130: .same(proto: "EXTERNAL_DATA_MIGRATION_LARK_MESSAGE_NOTIFY_5"),
//    131: .same(proto: "VC_CALL_INTERVIEWEE_NOT_ONLINE"),
//    132: .same(proto: "VOIP_INTERVIEWEE_NOT_ONLINE"),
//    133: .same(proto: "FOLDER_ROLE_ADD_FOR_INVITEE"),
//    134: .same(proto: "FOLDER_OBJ_MOVE_OUT"),
//    135: .same(proto: "FOLDER_OBJ_REMOVE"),
//    136: .same(proto: "FILE_OWNER_REMOVE_FOLDER_PERMISSION"),
//    137: .same(proto: "MESSAGE_PAYMENT_FRAUD_ALERT"),
//    138: .same(proto: "USER_JOIN_CHAT_AUTO_MUTE"),
//    139: .same(proto: "EMERGENCY_CALL_NOTANSWER"),
//    140: .same(proto: "INVITE_CHATTERS_TO_CHAT_NO_PERMISSION_LESS_THRESHOLD"),
//    141: .same(proto: "INVITE_CHATTERS_TO_CHAT_NO_PERMISSION_OVER_THRESHOLD"),
//    142: .same(proto: "USERS_UNABLE_TO_USE_CRYPTO_CHAT"),
//    143: .same(proto: "CHAT_ROOM_START"),
//    144: .same(proto: "USER_START_TOPIC_GROUP_AND_INVITE"),
//    145: .same(proto: "USER_MODIFY_TOPIC_GROUP_NAME"),
//    146: .same(proto: "USER_MODIFY_TOPIC_GROUP_AVATAR"),
//    147: .same(proto: "USER_START_TOPIC_GROUP"),
//    148: .same(proto: "USER_TURN_ON_GROUP_MAIL"),
//    149: .same(proto: "USER_TURN_OFF_GROUP_MAIL"),
//    150: .same(proto: "USER_CHANGE_GROUP_MAIL_PERMISSION_OWNER"),
//    151: .same(proto: "USER_CHANGE_GROUP_MAIL_PERMISSION_MEMBERS"),
//    152: .same(proto: "USER_CHANGE_GROUP_MAIL_PERMISSION_TENANT"),
//    153: .same(proto: "USER_CHANGE_GROUP_MAIL_PERMISSION_EVERYONE"),
//    154: .same(proto: "USER_JOIN_VIA_GROUP_LINK"),
//    155: .same(proto: "CHAT_ROOM_END"),
//    156: .same(proto: "CHAT_ROOM_START_V2"),
//    157: .same(proto: "SYSTEM_EPHEMERAL_NOTIFY"),
//    158: .same(proto: "BUILD_ONEWAY_RELATION"),
//    159: .same(proto: "INVITE_FRIENDS_SUCCESS"),
//    160: .same(proto: "CREATE_P2P_SOURCE"),
//    161: .same(proto: "SEND_MESSAGE_COLLABORATION_AUTH_FAILED"),
//    162: .same(proto: "NOT_COLLABORATION_AUTH_SEND_MSG_LIMIT_NOTIFY"),
//    163: .same(proto: "NOT_COLLABORATION_AUTH_SEND_MSG_REACH_LIMIT"),
//    164: .same(proto: "LARK_SERVER_SYSTEMCONTENT_PERMISSIONREQUESTAPPROVEDTIP"),
//    165: .same(proto: "LARK_SERVER_SYSTEMCONTENT_PERMISSIONREQUESTREJECTEDTIP"),
//    166: .same(proto: "SEND_MESSAGE_BE_BLOCKED"),
//    167: .same(proto: "USER_MODIFY_GROUP_OWNER"),
//    168: .same(proto: "TEMPLATE_GROUP_SHARE"),
//    169: .same(proto: "USER_INVITE_BOT_JOIN"),
//    170: .same(proto: "DOC_TEMPLATE_GROUP_SHARE"),
//    171: .same(proto: "SHEET_TEMPLATE_GROUP_SHARE"),
//    172: .same(proto: "MIND_NOTE_TEMPLATE_GROUP_SHARE"),
//    173: .same(proto: "USERS_HAVE_NO_DEVICES_TO_USE_CRYPTO_CHAT"),
//    174: .same(proto: "BlockedTipInChat"),
//    175: .same(proto: "CantChatUserPrivacySettings"),
//    176: .same(proto: "CantChatYourPrivacySettings"),
//    177: .same(proto: "RECEIVED_CONTACT_REQUEST_SECURITY_TIP"),
//    178: .same(proto: "NOT_CONTACT_MESSAGE_LIMIT_RECEIVER"),
//    179: .same(proto: "Lark_NewContacts_CantAddToContactsBlockedTip"),
//    180: .same(proto: "Lark_NewContacts_CantAddToContactsBlockedOthersTip"),
//    181: .same(proto: "Lark_NewContacts_ContactRequestSentPleaseWait"),
//    182: .same(proto: "GROUP_MENTION_ALL_PERMISSION_SUGGESTION"),
//    183: .same(proto: "LARK_NEWGUIDE_SEND_TO_MYSELF"),
//    184: .same(proto: "CHAT_WITH_NO_CONTACTS_REACH_DAILY_LIMIT"),
//    185: .same(proto: "CREATE_CIRCLE_AND_INVITE_OTHERS_FROM_CHAT"),
//    186: .same(proto: "MENTIONED_PERSON_NOT_IN_CIRCLE"),
//    187: .same(proto: "INVITE_MEMBERS_TO_JOIN_EXTERNAL_CIRCLE"),
//    188: .same(proto: "CIRCLE_CANT_ADD_MEMBERS_DUE_TO_ADMIN_SETTINGS"),
//    189: .same(proto: "CIRCLE_CANT_ADD_MANY_MEMBERS_DUE_TO_ADMIN_SETTINGS"),
//    190: .same(proto: "JOIN_CIRCLE_VIA_HELP_DESK_MSG_CARD"),
//    191: .same(proto: "CIRCLE_WELCOME_NEW_MEMBERS"),
//    192: .same(proto: "TRANSFER_CIRCLE_OWNER"),
//    193: .same(proto: "TRANSFER_CIRCLE_OWNER_AND_LEAVE"),
//    194: .same(proto: "CIRCLE_USER_CHANGE_DOC_PERMISSION"),
//    195: .same(proto: "USER_INVITE_BOT_JOIN_CIRCLE"),
//    196: .same(proto: "USER_INVITE_OTHERS_JOIN_CIRCLE"),
//    197: .same(proto: "USER_INVITE_OTHERS_JOIN_CIRCLE_BY_LINK"),
//    198: .same(proto: "CIRCLE_TOO_MANY_MEMBERS_NOTIFICATION_MUTED"),
//    199: .same(proto: "USER_INVITE_OTHERS_JOIN_CIRCLE_BY_QR_CODE"),
//    200: .same(proto: "USER_INVITE_OTHERS_JOIN_CIRCLE_BY_INVITATION_CARD"),
//    201: .same(proto: "USER_MODIFY_CIRCLE_AVATAR"),
//    202: .same(proto: "USER_MODIFY_CIRCLE_DESCRIPTION"),
//    203: .same(proto: "USER_MODIFY_CIRCLE_NAME"),
//    204: .same(proto: "USER_MODIFY_CIRCLE_OWNER"),
//    205: .same(proto: "USER_MODIFY_CIRCLE_SETTINGS"),
//    206: .same(proto: "USER_SET_ONLY_CIRCLE_OWNER_CAN_POST"),
//    207: .same(proto: "USER_SET_ONLY_CIRCLE_OWNER_CAN_CREATE_NEW_TOPICS"),
//    208: .same(proto: "USER_LEAVE_CIRCLE"),
//    209: .same(proto: "USER_REMOVE_CIRCLE_DESCRIPTION"),
//    210: .same(proto: "USER_REMOVE_CIRCLE_MEMBERS"),
//    211: .same(proto: "USER_CREATE_CIRCLE"),
//    212: .same(proto: "USER_CREATE_CIRCLE_AND_INVITE"),
//    213: .same(proto: "USER_SYNC_MESSAGE_TO_CIRCLE"),
//    214: .same(proto: "USER_CLEAR_CIRCLE_ANNOUNCEMENT"),
//    215: .same(proto: "USER_WITHDRAW_CIRCLE_INVITATION"),
//    216: .same(proto: "CIRCLE_ANONYMOUS_ON"),
//    217: .same(proto: "CIRCLE_ANONYMOUS_OFF"),
//    218: .same(proto: "CREATE_CROSS_WITH_KA_CHAT_NOTIFICATION"),
//    219: .same(proto: "Lark_PrivacySettings_EnableSuccessfully_Toast"),
//    220: .same(proto: "CP_ViewDifference_FeishuLink"),
//    221: .same(proto: "CP_ViewDifference_LarkLink"),
//    222: .same(proto: "Lark_HelpDesk_BotTransferredNote"),
//    223: .same(proto: "NEED_UPDATE_VERSION_TO_SHOW_EXCLUSIVE_HONGBAO"),
//    224: .same(proto: "SAIPAN_FAQ_UNRESOLVED_CONTACT_AGENT"),
//    225: .same(proto: "Lark_IM_CreateGroup_UserAndGroup_OwnerInvite"),
//    226: .same(proto: "Lark_IM_CreateGroup_UserAndGroup_MemberInvite"),
//    227: .same(proto: "Lark_IM_CreateGroup_UserAndDepartment_OwnerInvite"),
//    228: .same(proto: "Lark_IM_CreateGroup_UserAndDepartment_MemberInivite"),
//    229: .same(proto: "Lark_IM_CreateGroup_GroupAndDepartment_OwnerInvite"),
//    230: .same(proto: "Lark_IM_CreateGroup_GroupAndDepartment_MemberInvite"),
//    231: .same(proto: "Lark_IM_CreateGroup_UserAndGroupAndDepartment_OwnerInvite"),
//    232: .same(proto: "Lark_IM_CreateGroup_UserAndGroupAndDepartment_MemberInvite"),
//    233: .same(proto: "Lark_IM_EnterGroup_UserAndGroup_ChatHistoryYes_Inviter"),
//    234: .same(proto: "Lark_IM_EnterGroup_UserAndGroup_ChatHistoryNo_Inviter"),
//    235: .same(proto: "Lark_IM_EnterGroup_UserAndGroup_ChatHistoryYes_Invitee"),
//    236: .same(proto: "Lark_IM_EnterGroup_UserAndGroup_ChatHistoryNo_Invitee"),
//    237: .same(proto: "Lark_IM_EnterGroup_UserAndGroup_ChatHistoryYes_OtherMembers"),
//    238: .same(proto: "Lark_IM_EnterGroup_UserAndGroup_ChatHistoryNo_OtherMembers"),
//    239: .same(proto: "Lark_IM_EnterGroup_UserAndDepartment_ChatHistoryYes_Inviter"),
//    240: .same(proto: "Lark_IM_EnterGroup_UserAndDepartment_ChatHistoryNo_Inviter"),
//    241: .same(proto: "Lark_IM_EnterGroup_UserAndDepartment_ChatHistoryYes_Invitee"),
//    242: .same(proto: "Lark_IM_EnterGroup_UserAndDepartment_ChatHistoryNo_Invitee"),
//    243: .same(proto: "Lark_IM_EnterGroup_UserAndDepartment_ChatHistoryYes_OtherMembers"),
//    244: .same(proto: "Lark_IM_EnterGroup_UserAndDepartment_ChatHistoryNo_OtherMembers"),
//    245: .same(proto: "Lark_IM_EnterGroup_GroupAndDepartment_ChatHistoryYes_Inviter"),
//    246: .same(proto: "Lark_IM_EnterGroup_GroupAndDepartment_ChatHistoryNo_Inviter"),
//    247: .same(proto: "Lark_IM_EnterGroup_GroupAndDepartment_ChatHistoryYes_Invitee"),
//    248: .same(proto: "Lark_IM_EnterGroup_GroupAndDepartment_ChatHistoryNo_Invitee"),
//    249: .same(proto: "Lark_IM_EnterGroup_GroupAndDepartment_ChatHistoryYes_OtherMembers"),
//    250: .same(proto: "Lark_IM_EnterGroup_GroupAndDepartment_ChatHistoryNo_OtherMembers"),
//    251: .same(proto: "Lark_IM_EnterGroup_UserAndGroupAndDepartment_ChatHistoryYes_Inviter"),
//    252: .same(proto: "Lark_IM_EnterGroup_Lark_IM_EnterGroup_UserAndGroupAndDepartment_ChatHistoryNo_Inviter"),
//    253: .same(proto: "Lark_IM_EnterGroup_UserAndGroupAndDepartment_ChatHistoryYes_Invitee"),
//    254: .same(proto: "Lark_IM_EnterGroup_UserAndGroupAndDepartment_ChatHistoryNo_Invitee"),
//    255: .same(proto: "Lark_IM_EnterGroup_UserAndGroupAndDepartment_ChatHistoryYes_OtherMembers"),
//    256: .same(proto: "Lark_IM_EnterGroup_UserAndGroupAndDepartment_ChatHistoryNo_OtherMembers"),
//    257: .same(proto: "Lark_IM_EnterGroup_User_ChatHistoryYes_FromTeam"),
//    300: .same(proto: "INVITE_CHAT_MEMBER_2_CHAT"),
//    301: .same(proto: "WILL_REACH_CHAT_CHATTER_COUNT_LIMIT"),
//    302: .same(proto: "ALREADY_REACH_CHAT_CHATTER_COUNT_LIMIT"),
//    303: .same(proto: "USER_CREATE_FACE_TO_FACE_CHAT"),
//    304: .same(proto: "USER_JOIN_FACE_TO_FACE_CHAT"),
//    305: .same(proto: "WELCOME_USER_JOIN_FACE_TO_FACE_CHAT"),
//    306: .same(proto: "USER_CREATED_GROUP_AND_INVITED_OTHER_CHATTER_CHAT_DEPARTMENT"),
//    307: .same(proto: "USER_INVITE_OTHERS_CHATTER_CHAT_DEPARTMENT_JOIN"),
//    308: .same(proto: "CREATE_CHAT_AND_INVITE_FROM_CHAT_DEPARTMENT_MEMBER"),
//    309: .same(proto: "USER_OPEN_ONLY_SEPECIFY_MEMBERS_POST"),
//    310: .same(proto: "USER_OPEN_ONLY_SEPECIFY_MEMBERS_POST_THREAD"),
//    311: .same(proto: "USER_REMOVE_SEPECIFY_MEMBERS_POST"),
//    312: .same(proto: "USER_REMOVE_SEPECIFY_MEMBERS_POST_THREAD"),
//    313: .same(proto: "ADD_MEMBER_TO_ADMIN_LIST"),
//    314: .same(proto: "REMOVE_MEMBER_FROM_ADMIN_LIST"),
//    315: .same(proto: "NEED_UPDATE_VERSION_TO_SUPPORT_ADMIN"),
//    316: .same(proto: "MENTION_ALL_PERMISSION_SUGGESTION_TO_ADMIN"),
//    317: .same(proto: "USER_OPEN_ONLY_OWNER_AND_ADMIN_POST"),
//    318: .same(proto: "USER_OPEN_ONLY_OWNER_AND_ADMIN_POST_THREAD"),
//    319: .same(proto: "ADMIN_OPEN_ANYONE_POST"),
//    320: .same(proto: "ADMIN_OPEN_ANYONE_POST_THREAD"),
//    321: .same(proto: "SAIPAN_BOT_ONLY_HELPDESK"),
//    322: .same(proto: "USER_CHANGE_GROUP_MAIL_PERMISSION_OWNER_OR_ADMIN"),
//    323: .same(proto: "GROUP_NEW_MEMBERS_VIEW_CHAT_HISTORY_ON"),
//    324: .same(proto: "GROUP_NEW_MEMBERS_VIEW_CHAT_HISTORY_OFF"),
//    325: .same(proto: "GROUP_NEW_MEMBERS_CAN_VIEW_HISTORY_MESSAGES"),
//    326: .same(proto: "CIRCLE_WELCOME_NEW_MEMBERS_NO_HISTORY"),
//    327: .same(proto: "JOIN_CIRCLE_VIA_HELP_DESK_MSG_CARD_NO_HISTORY"),
//    328: .same(proto: "USER_INVITE_OTHERS_JOIN_CIRCLE_NO_HISTORY"),
//    329: .same(proto: "USER_INVITE_OTHERS_JOIN_CIRCLE_BY_INVITATION_CARD_NO_HISTORY"),
//    330: .same(proto: "USER_INVITE_OTHERS_JOIN_CIRCLE_BY_LINK_NO_HISTORY"),
//    331: .same(proto: "USER_INVITE_OTHERS_JOIN_CIRCLE_BY_QR_CODE_NO_HISTORY"),
//    332: .same(proto: "USER_INVITE_OTHERS_CHATTER_CHAT_DEPARTMENT_JOIN_NO_HISTORY"),
//    333: .same(proto: "USER_JOIN_VIA_QR_CODE_NO_HISTORY"),
//    334: .same(proto: "USER_JOIN_CHAT_WELCOME_MESSAGE"),
//    335: .same(proto: "USER_JOIN_CHAT_WELCOME_MESSAGE_NO_HISTORY"),
//    336: .same(proto: "USER_INVITE_OTHERS_JOIN_CHAT_MESSAGE"),
//    337: .same(proto: "USER_INVITE_OTHERS_JOIN_CHAT_MESSAGE_NO_HISTORY"),
//    338: .same(proto: "USER_INVITE_OTHERS_CHATTER_CHAT_DEPARTMENT_JOIN_NEW"),
//    339: .same(proto: "USER_JOIN_VIA_QR_NEW"),
//    340: .same(proto: "USER_JOIN_VIA_SHARE_NEW"),
//    341: .same(proto: "USER_JOIN_VIA_SHARE_NO_HISTORY"),
//    342: .same(proto: "USER_JOIN_CHAT_BY_LINK"),
//    343: .same(proto: "USER_JOIN_CHAT_BY_LINK_NO_HISTORY"),
//    344: .same(proto: "HELP_DESK_USER_JOIN_CHAT"),
//    345: .same(proto: "HELP_DESK_USER_JOIN_CHAT_NO_HISTORY"),
//    346: .same(proto: "CREATE_URGENT_ONLY_OWNER_AND_ADMIN_ON"),
//    347: .same(proto: "CREATE_URGENT_ONLY_OWNER_AND_ADMIN_OFF"),
//    348: .same(proto: "UPGRADE_SUPER_CHAT"),
//    349: .same(proto: "ADD_CHAT_TAB"),
//    350: .same(proto: "DEL_CHAT_TAB"),
//    351: .same(proto: "ONLY_ADMINS_CAN_PIN"),
//    352: .same(proto: "ALL_MEMBERS_CAN_PIN"),
//    353: .same(proto: "ONLY_ADMINS_CAN_CREATE_VIDEO_CONFERENCE"),
//    354: .same(proto: "ALL_MEMBERS_CAN_CREATE_VIDEO_CONFERENCE"),
//    355: .same(proto: "ONLY_ADMINS_CAN_EDIT_CHAT_INFO"),
//    356: .same(proto: "ALL_MEMBERS_CAN_EDIT_CHAT_INFO"),
//    357: .same(proto: "ONLY_ADMINS_CAN_AT_ALL_MEMBERS"),
//    358: .same(proto: "ALL_MEMBERS_CAN_AT_ALL_MEMBERS"),
//    359: .same(proto: "ONLY_ADMINS_CAN_ADD_MEMBERS_AND_SHARE"),
//    360: .same(proto: "ALL_MEMBERS_CAN_ADD_MEMBERS_AND_SHARE"),
//    361: .same(proto: "CHAT_MEMBER_REACH_MANAGE_LIMIT"),
//    362: .same(proto: "USER_RECOVER_DEFAULT_GROUP_NAME"),
//    363: .same(proto: "AUTO_OPEN_TYPING_TRANSLATE"),
//    401: .same(proto: "EXTERNAL_COORDINATE_CTL"),
//    402: .same(proto: "TARGET_EXTERNAL_COORDINATE_CTL"),
//    403: .same(proto: "CHAT_OPEN_CAN_SEARCH_SYSTEM_MESSAGE"),
//    404: .same(proto: "CHAT_CLOSED_CAN_SEARCH_SYSTEM_MESSAGE"),
//    405: .same(proto: "BITABLE_TEMPLATE_GROUP_SHARE_SYSTEM_MESSAGE"),
//    406: .same(proto: "MOMENTS_START_SECRET_CHAT_ABOUT_MESSAGE"),
//    501: .same(proto: "CREATE_TEAM_AND_INVITE_MEMBERS"),
//    502: .same(proto: "UPDATE_CHAT_TO_TEAM"),
//    503: .same(proto: "INVITE_MEMBERS_JOIN_TEAM"),
//    504: .same(proto: "MEMBERS_JOIN_TEAM_FAIL"),
//    505: .same(proto: "KICK_MEMBERS_OUT_TEAM"),
//    506: .same(proto: "MEMBER_LEAVE_TEAM"),
//    507: .same(proto: "TRANSFER_TEAM_OWNER"),
//    508: .same(proto: "MODIFY_TEAM_NAME"),
//    509: .same(proto: "ENABLE_TEAM_CREATE_CHAT_PERMISSION"),
//    510: .same(proto: "CLOSE_TEAM_CREATE_CHAT_PERMISSION"),
//    511: .same(proto: "ENABLE_TEAM_ADD_MEMBERS_PERMISSION"),
//    512: .same(proto: "CLOSE_TEAM_ADD_MEMBERS_PERMISSION"),
//    513: .same(proto: "DISSOLVE_TEAM_AND_UNBIND_CHAT"),
//    514: .same(proto: "CREATE_TEAM_CHAT"),
//    515: .same(proto: "BIND_CHAT_INTO_TEAM"),
//    516: .same(proto: "UNBIND_CHAT_WITH_TEAM"),
//    517: .same(proto: "MEMBERS_JOIN_TEAM_CHAT_SEE_HISTORICAL"),
//    518: .same(proto: "MEMBERS_JOIN_TEAM_CHAT_SEE_NEW_MESSAGES"),
//    519: .same(proto: "MEMBERS_JOIN_TEAM_CHAT_FAIL"),
//    520: .same(proto: "MEMBERS_LEAVE_AND_TRANSFER"),
//    521: .same(proto: "USER_CREATE_TEAM"),
//    522: .same(proto: "CHECK_USER_PHONE_NUMBER"),
//    523: .same(proto: "CHECK_USER_PHONE_USER_IN_WHITELIST"),
//    524: .same(proto: "CantBuzzEmptyPhoneNumber"),
//    525: .same(proto: "CantBuzzEmptyName"),
//    526: .same(proto: "BuzzLimit"),
//    527: .same(proto: "BuzzSystemError"),
//    528: .same(proto: "BuzzTimeOut"),
//    529: .same(proto: "CantBuzzMembers"),
//    530: .same(proto: "BuzzNotAnswer"),
//    531: .same(proto: "MultiItemSystemContent"),
//    532: .same(proto: "VC_ENTERPRISE_PHONE_CREATE"),
//    533: .same(proto: "MODIFY_TEAM_AVATAR"),
//    534: .same(proto: "MODIFY_TEAM_DESCRIPTION"),
//    535: .same(proto: "DELETE_TEAM_DESCRIPTION"),
//    536: .same(proto: "ENABLE_ADD_TEAM_MEMBERS_PERMISSION"),
//    537: .same(proto: "CLOSE_ADD_TEAM_MEMBERS_PERMISSION"),
//    538: .same(proto: "ENABLE_BIND_TEAM_CHAT_PERMISSION"),
//    539: .same(proto: "CLOSE_BIND_TEAM_CHAT_PERMISSION"),
//    540: .same(proto: "CREATE_TEAM_CHAT_V2"),
//    541: .same(proto: "CREATE_TEAM_CHAT_V2_MANAGER"),
//    542: .same(proto: "BIND_CHAT_INTO_TEAM_MANAGER"),
//    543: .same(proto: "USER_JOIN_CHAT_FROM_TEAM"),
//    544: .same(proto: "TEAM_CHAT_TURN_OPEN_MESSAGE_TO_TEAM"),
//    545: .same(proto: "TEAM_CHAT_TURN_OPEN_MESSAGE"),
//    601: .same(proto: "CHAT_TOP_NOTICE_TOP_MESSAGE"),
//    602: .same(proto: "CHAT_TOP_NOTICE_TOP_ANNOUNCEMENT"),
//    603: .same(proto: "CHAT_TOP_NOTICE_TOP_THREAD"),
//    604: .same(proto: "CHAT_TOP_NOTICE_REMOVE"),
//    605: .same(proto: "ONLY_ADMINS_CAN_OPERATE_TOP_NOTICE"),
//    606: .same(proto: "ALL_MEMBERS_CAN_OPERATE_TOP_NOTICE"),
//    607: .same(proto: "ONLY_ADMINS_CAN_OPERATE_TOP_NOTICE_THREAD"),
//    608: .same(proto: "ALL_MEMBERS_CAN_OPERATE_TOP_NOTICE_THREAD"),
//    609: .same(proto: "BuzzMemberBuzzFailedLimit"),
//    610: .same(proto: "BuzzMemberBuzzFailedSystemError"),
//    611: .same(proto: "BuzzMemberBuzzFailedTimeOut"),
//    612: .same(proto: "BuzzBuzzFailPushFailList"),
//    613: .same(proto: "BuzzNamesDidntPickUpBuzzCall"),
//    614: .same(proto: "BuzzSomeDidntPickUpSomeCantCall"),
//    701: .same(proto: "NOTICE_USER_DEVICE_UPDATE_LARK_VERSION"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_SystemContent.ContentValueType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_VALUE_TYPE"),
//    1: .same(proto: "USER"),
//    2: .same(proto: "BOT"),
//    3: .same(proto: "TEXT"),
//    4: .same(proto: "CHAT"),
//    5: .same(proto: "CHATTER"),
//    6: .same(proto: "URL"),
//    7: .same(proto: "ACTION"),
//    8: .same(proto: "DEPARTMENT"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_SystemContent.DocsPermissionType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_PERMISSION_TYPE"),
//    1: .same(proto: "READABLE"),
//    2: .same(proto: "WRITABLE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_SystemContent.ContentValue: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_SystemContent.protoMessageName + ".ContentValue"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "type"),
//    3: .same(proto: "ids"),
//    4: .same(proto: "text"),
//    5: .same(proto: "items"),
//    6: .same(proto: "link"),
//    7: .same(proto: "action"),
//    8: .standard(proto: "is_clickable"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _type: LarkNCExtensionPB_Entities_SystemContent.ContentValueType? = nil
//    var _ids: [String] = []
//    var _text: String? = nil
//    var _items: [LarkNCExtensionPB_Entities_SystemContent.ContentValue.Item] = []
//    var _link: String? = nil
//    var _action: LarkNCExtensionPB_Entities_SystemMessageAction? = nil
//    var _isClickable: Bool? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _type = source._type
//      _ids = source._ids
//      _text = source._text
//      _items = source._items
//      _link = source._link
//      _action = source._action
//      _isClickable = source._isClickable
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if !LarkHTTP.Internal.areAllInitialized(_storage._items) {return false}
//      if let v = _storage._action, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 3: try decoder.decodeRepeatedStringField(value: &_storage._ids)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._text)
//        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._items)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._link)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._action)
//        case 8: try decoder.decodeSingularBoolField(value: &_storage._isClickable)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if !_storage._ids.isEmpty {
//        try visitor.visitRepeatedStringField(value: _storage._ids, fieldNumber: 3)
//      }
//      if let v = _storage._text {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if !_storage._items.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._items, fieldNumber: 5)
//      }
//      if let v = _storage._link {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._action {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._isClickable {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemContent.ContentValue, rhs: LarkNCExtensionPB_Entities_SystemContent.ContentValue) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._ids != rhs_storage._ids {return false}
//        if _storage._text != rhs_storage._text {return false}
//        if _storage._items != rhs_storage._items {return false}
//        if _storage._link != rhs_storage._link {return false}
//        if _storage._action != rhs_storage._action {return false}
//        if _storage._isClickable != rhs_storage._isClickable {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SystemContent.ContentValue.Item: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_SystemContent.ContentValue.protoMessageName + ".Item"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .same(proto: "id"),
//    3: .same(proto: "text"),
//    4: .same(proto: "link"),
//    5: .standard(proto: "i18n_text"),
//    6: .same(proto: "action"),
//    7: .standard(proto: "action_id"),
//    8: .standard(proto: "is_clickable"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _type: LarkNCExtensionPB_Entities_SystemContent.ContentValueType? = nil
//    var _id: String? = nil
//    var _text: String? = nil
//    var _link: String? = nil
//    var _i18NText: Dictionary<String,String> = [:]
//    var _action: LarkNCExtensionPB_Entities_SystemMessageAction? = nil
//    var _actionID: Int32? = nil
//    var _isClickable: Bool? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _type = source._type
//      _id = source._id
//      _text = source._text
//      _link = source._link
//      _i18NText = source._i18NText
//      _action = source._action
//      _actionID = source._actionID
//      _isClickable = source._isClickable
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._action, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._text)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._link)
//        case 5: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._i18NText)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._action)
//        case 7: try decoder.decodeSingularInt32Field(value: &_storage._actionID)
//        case 8: try decoder.decodeSingularBoolField(value: &_storage._isClickable)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._text {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._link {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if !_storage._i18NText.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._i18NText, fieldNumber: 5)
//      }
//      if let v = _storage._action {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._actionID {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._isClickable {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemContent.ContentValue.Item, rhs: LarkNCExtensionPB_Entities_SystemContent.ContentValue.Item) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._text != rhs_storage._text {return false}
//        if _storage._link != rhs_storage._link {return false}
//        if _storage._i18NText != rhs_storage._i18NText {return false}
//        if _storage._action != rhs_storage._action {return false}
//        if _storage._actionID != rhs_storage._actionID {return false}
//        if _storage._isClickable != rhs_storage._isClickable {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SystemContent.E2EEContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_SystemContent.protoMessageName + ".E2EEContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "from_id"),
//    2: .standard(proto: "to_id"),
//    3: .standard(proto: "trigger_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._fromID)
//      case 2: try decoder.decodeSingularStringField(value: &self._toID)
//      case 3: try decoder.decodeSingularStringField(value: &self._triggerID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._fromID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._toID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._triggerID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemContent.E2EEContent, rhs: LarkNCExtensionPB_Entities_SystemContent.E2EEContent) -> Bool {
//    if lhs._fromID != rhs._fromID {return false}
//    if lhs._toID != rhs._toID {return false}
//    if lhs._triggerID != rhs._triggerID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SystemContent.VideoConferenceContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_SystemContent.protoMessageName + ".VideoConferenceContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "from_id"),
//    2: .standard(proto: "to_id"),
//    3: .standard(proto: "duration_time"),
//    4: .standard(proto: "meeting_id"),
//    5: .same(proto: "passcode"),
//    6: .standard(proto: "feedback_status"),
//    7: .standard(proto: "from_feedback_status"),
//    8: .standard(proto: "to_feedback_status"),
//    9: .standard(proto: "is_voice_call"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._fromID)
//      case 2: try decoder.decodeSingularStringField(value: &self._toID)
//      case 3: try decoder.decodeSingularStringField(value: &self._durationTime)
//      case 4: try decoder.decodeSingularStringField(value: &self._meetingID)
//      case 5: try decoder.decodeSingularStringField(value: &self._passcode)
//      case 6: try decoder.decodeSingularStringField(value: &self._feedbackStatus)
//      case 7: try decoder.decodeSingularStringField(value: &self._fromFeedbackStatus)
//      case 8: try decoder.decodeSingularStringField(value: &self._toFeedbackStatus)
//      case 9: try decoder.decodeSingularBoolField(value: &self._isVoiceCall)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._fromID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._toID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._durationTime {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._meetingID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._passcode {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    if let v = self._feedbackStatus {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//    }
//    if let v = self._fromFeedbackStatus {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//    }
//    if let v = self._toFeedbackStatus {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//    }
//    if let v = self._isVoiceCall {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemContent.VideoConferenceContent, rhs: LarkNCExtensionPB_Entities_SystemContent.VideoConferenceContent) -> Bool {
//    if lhs._fromID != rhs._fromID {return false}
//    if lhs._toID != rhs._toID {return false}
//    if lhs._durationTime != rhs._durationTime {return false}
//    if lhs._meetingID != rhs._meetingID {return false}
//    if lhs._passcode != rhs._passcode {return false}
//    if lhs._feedbackStatus != rhs._feedbackStatus {return false}
//    if lhs._fromFeedbackStatus != rhs._fromFeedbackStatus {return false}
//    if lhs._toFeedbackStatus != rhs._toFeedbackStatus {return false}
//    if lhs._isVoiceCall != rhs._isVoiceCall {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SystemContent.HongbaoContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_SystemContent.protoMessageName + ".HongbaoContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "i18n_name"),
//    2: .standard(proto: "hongbao_id"),
//    3: .standard(proto: "message_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NName)
//      case 2: try decoder.decodeSingularStringField(value: &self._hongbaoID)
//      case 3: try decoder.decodeSingularStringField(value: &self._messageID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.i18NName.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NName, fieldNumber: 1)
//    }
//    if let v = self._hongbaoID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._messageID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemContent.HongbaoContent, rhs: LarkNCExtensionPB_Entities_SystemContent.HongbaoContent) -> Bool {
//    if lhs.i18NName != rhs.i18NName {return false}
//    if lhs._hongbaoID != rhs._hongbaoID {return false}
//    if lhs._messageID != rhs._messageID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SystemContent.DocEntity: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_SystemContent.protoMessageName + ".DocEntity"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "element_entity_ref"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_SystemContent.DocEntity.ElementEntity>.self, value: &self.elementEntityRef)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.elementEntityRef.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_SystemContent.DocEntity.ElementEntity>.self, value: self.elementEntityRef, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemContent.DocEntity, rhs: LarkNCExtensionPB_Entities_SystemContent.DocEntity) -> Bool {
//    if lhs.elementEntityRef != rhs.elementEntityRef {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SystemContent.DocEntity.ElementEntity: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_SystemContent.DocEntity.protoMessageName + ".ElementEntity"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "title"),
//    2: .standard(proto: "doc_type"),
//    3: .standard(proto: "str_doc_type"),
//    4: .standard(proto: "doc_token"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._title)
//      case 2: try decoder.decodeSingularEnumField(value: &self._docType)
//      case 3: try decoder.decodeSingularStringField(value: &self._strDocType)
//      case 4: try decoder.decodeSingularStringField(value: &self._docToken)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._title {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._docType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    if let v = self._strDocType {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._docToken {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemContent.DocEntity.ElementEntity, rhs: LarkNCExtensionPB_Entities_SystemContent.DocEntity.ElementEntity) -> Bool {
//    if lhs._title != rhs._title {return false}
//    if lhs._docType != rhs._docType {return false}
//    if lhs._strDocType != rhs._strDocType {return false}
//    if lhs._docToken != rhs._docToken {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_MinVersion: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MinVersion"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "min_version"),
    2: .standard(proto: "android_min_version"),
    3: .standard(proto: "ios_min_version"),
    4: .standard(proto: "pc_min_version"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._minVersion)
      case 2: try decoder.decodeSingularStringField(value: &self._androidMinVersion)
      case 3: try decoder.decodeSingularStringField(value: &self._iosMinVersion)
      case 4: try decoder.decodeSingularStringField(value: &self._pcMinVersion)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._minVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._androidMinVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._iosMinVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._pcMinVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_MinVersion, rhs: LarkNCExtensionPB_Entities_MinVersion) -> Bool {
    if lhs._minVersion != rhs._minVersion {return false}
    if lhs._androidMinVersion != rhs._androidMinVersion {return false}
    if lhs._iosMinVersion != rhs._iosMinVersion {return false}
    if lhs._pcMinVersion != rhs._pcMinVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CardContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CardContent"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "richtext"),
    3: .same(proto: "actions"),
    4: .same(proto: "extra"),
    5: .standard(proto: "min_version"),
    6: .standard(proto: "card_desc"),
    7: .standard(proto: "card_version"),
    8: .standard(proto: "card_header"),
    9: .standard(proto: "wide_screen_mode"),
    10: .standard(proto: "bot_id"),
    11: .standard(proto: "extra_info"),
    12: .standard(proto: "app_id"),
    13: .standard(proto: "tenant_id"),
    14: .standard(proto: "enable_forward"),
    15: .same(proto: "source"),
    16: .standard(proto: "compact_width"),
    17: .standard(proto: "open_card_content"),
    18: .same(proto: "attachment"),
    19: .standard(proto: "card_desc_i18n"),
  ]

  fileprivate class _StorageClass {
    var _type: LarkNCExtensionPB_Entities_CardContent.TypeEnum? = nil
    var _richtext: LarkNCExtensionPB_Entities_RichText? = nil
    var _actions: Dictionary<String,LarkNCExtensionPB_Entities_CardAction> = [:]
    var _extra: LarkNCExtensionPB_Entities_CardContent.ExtraType? = nil
    var _minVersion: LarkNCExtensionPB_Entities_MinVersion? = nil
    var _cardDesc: String? = nil
    var _cardVersion: Int32? = nil
    var _cardHeader: LarkNCExtensionPB_Entities_CardContent.CardHeader? = nil
    var _wideScreenMode: Bool? = nil
    var _botID: Int64? = nil
    var _extraInfo: LarkNCExtensionPB_Entities_CardContent.ExtraInfo? = nil
    var _appID: Int64? = nil
    var _tenantID: Int64? = nil
    var _enableForward: Bool? = nil
    var _source: LarkNCExtensionPB_Entities_CardContent.SourceType? = nil
    var _compactWidth: Bool? = nil
    var _openCardContent: Data? = nil
    var _attachment: LarkNCExtensionPB_Entities_OpenCardAttachment? = nil
    var _cardDescI18N: Dictionary<String,String> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _richtext = source._richtext
      _actions = source._actions
      _extra = source._extra
      _minVersion = source._minVersion
      _cardDesc = source._cardDesc
      _cardVersion = source._cardVersion
      _cardHeader = source._cardHeader
      _wideScreenMode = source._wideScreenMode
      _botID = source._botID
      _extraInfo = source._extraInfo
      _appID = source._appID
      _tenantID = source._tenantID
      _enableForward = source._enableForward
      _source = source._source
      _compactWidth = source._compactWidth
      _openCardContent = source._openCardContent
      _attachment = source._attachment
      _cardDescI18N = source._cardDescI18N
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type == nil {return false}
      if _storage._richtext == nil {return false}
      if let v = _storage._richtext, !v.isInitialized {return false}
      if !LarkHTTP.Internal.areAllInitialized(_storage._actions) {return false}
      if let v = _storage._attachment, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._richtext)
        case 3: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_CardAction>.self, value: &_storage._actions)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._extra)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._minVersion)
        case 6: try decoder.decodeSingularStringField(value: &_storage._cardDesc)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._cardVersion)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._cardHeader)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._wideScreenMode)
        case 10: try decoder.decodeSingularInt64Field(value: &_storage._botID)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._extraInfo)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._appID)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._tenantID)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._enableForward)
        case 15: try decoder.decodeSingularEnumField(value: &_storage._source)
        case 16: try decoder.decodeSingularBoolField(value: &_storage._compactWidth)
        case 17: try decoder.decodeSingularBytesField(value: &_storage._openCardContent)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._attachment)
        case 19: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._cardDescI18N)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._richtext {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._actions.isEmpty {
        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_CardAction>.self, value: _storage._actions, fieldNumber: 3)
      }
      if let v = _storage._extra {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
      }
      if let v = _storage._minVersion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._cardDesc {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._cardVersion {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._cardHeader {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._wideScreenMode {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      }
      if let v = _storage._botID {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._extraInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._appID {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 12)
      }
      if let v = _storage._tenantID {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._enableForward {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      }
      if let v = _storage._source {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 15)
      }
      if let v = _storage._compactWidth {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      }
      if let v = _storage._openCardContent {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 17)
      }
      if let v = _storage._attachment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if !_storage._cardDescI18N.isEmpty {
        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._cardDescI18N, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CardContent, rhs: LarkNCExtensionPB_Entities_CardContent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._richtext != rhs_storage._richtext {return false}
        if _storage._actions != rhs_storage._actions {return false}
        if _storage._extra != rhs_storage._extra {return false}
        if _storage._minVersion != rhs_storage._minVersion {return false}
        if _storage._cardDesc != rhs_storage._cardDesc {return false}
        if _storage._cardVersion != rhs_storage._cardVersion {return false}
        if _storage._cardHeader != rhs_storage._cardHeader {return false}
        if _storage._wideScreenMode != rhs_storage._wideScreenMode {return false}
        if _storage._botID != rhs_storage._botID {return false}
        if _storage._extraInfo != rhs_storage._extraInfo {return false}
        if _storage._appID != rhs_storage._appID {return false}
        if _storage._tenantID != rhs_storage._tenantID {return false}
        if _storage._enableForward != rhs_storage._enableForward {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._compactWidth != rhs_storage._compactWidth {return false}
        if _storage._openCardContent != rhs_storage._openCardContent {return false}
        if _storage._attachment != rhs_storage._attachment {return false}
        if _storage._cardDescI18N != rhs_storage._cardDescI18N {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CardContent.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_TYPE"),
    1: .same(proto: "VOTE"),
    2: .same(proto: "TEXT"),
    3: .same(proto: "VCHAT"),
    4: .same(proto: "OPEN_CARD"),
  ]
}

extension LarkNCExtensionPB_Entities_CardContent.ExtraType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "SENDER_CANNOT_CLICK"),
  ]
}

extension LarkNCExtensionPB_Entities_CardContent.SourceType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_Source"),
    1: .same(proto: "APP_BOT"),
    2: .same(proto: "SUITE_BOT"),
    3: .same(proto: "USER"),
  ]
}

extension LarkNCExtensionPB_Entities_CardContent.CardHeader: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CardContent.protoMessageName + ".CardHeader"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "title_i18n_key"),
    3: .same(proto: "style"),
    4: .standard(proto: "title_i18n"),
    5: .same(proto: "theme"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._title)
      case 2: try decoder.decodeSingularStringField(value: &self._titleI18NKey)
      case 3: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.style)
      case 4: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.titleI18N)
      case 5: try decoder.decodeSingularStringField(value: &self._theme)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._titleI18NKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if !self.style.isEmpty {
      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.style, fieldNumber: 3)
    }
    if !self.titleI18N.isEmpty {
      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.titleI18N, fieldNumber: 4)
    }
    if let v = self._theme {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CardContent.CardHeader, rhs: LarkNCExtensionPB_Entities_CardContent.CardHeader) -> Bool {
    if lhs._title != rhs._title {return false}
    if lhs._titleI18NKey != rhs._titleI18NKey {return false}
    if lhs.style != rhs.style {return false}
    if lhs.titleI18N != rhs.titleI18N {return false}
    if lhs._theme != rhs._theme {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CardContent.ExtraInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CardContent.protoMessageName + ".ExtraInfo"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "gadget_config"),
    2: .standard(proto: "custom_config"),
  ]

  fileprivate class _StorageClass {
    var _gadgetConfig: LarkNCExtensionPB_Entities_CardContent.GadgetConfig? = nil
    var _customConfig: LarkNCExtensionPB_Entities_CardContent.CustomConfig? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gadgetConfig = source._gadgetConfig
      _customConfig = source._customConfig
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._gadgetConfig)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._customConfig)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._gadgetConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._customConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CardContent.ExtraInfo, rhs: LarkNCExtensionPB_Entities_CardContent.ExtraInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._gadgetConfig != rhs_storage._gadgetConfig {return false}
        if _storage._customConfig != rhs_storage._customConfig {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CardContent.GadgetConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CardContent.protoMessageName + ".GadgetConfig"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "is_preload"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._isPreload)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._isPreload {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CardContent.GadgetConfig, rhs: LarkNCExtensionPB_Entities_CardContent.GadgetConfig) -> Bool {
    if lhs._isPreload != rhs._isPreload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CardContent.CustomConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CardContent.protoMessageName + ".CustomConfig"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "analytics_data"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._analyticsData)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._analyticsData {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CardContent.CustomConfig, rhs: LarkNCExtensionPB_Entities_CardContent.CustomConfig) -> Bool {
    if lhs._analyticsData != rhs._analyticsData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_OpenCardAttachment: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenCardAttachment"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "images"),
    2: .standard(proto: "at_users"),
    3: .standard(proto: "option_users"),
    4: .standard(proto: "digest_hash_tags"),
    5: .standard(proto: "image_keys"),
    6: .standard(proto: "card_content_hash"),
  ]

  public var isInitialized: Bool {
    if self._cardContentHash == nil {return false}
    if !LarkHTTP.Internal.areAllInitialized(self.images) {return false}
    if !LarkHTTP.Internal.areAllInitialized(self.atUsers) {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_RichTextElement.ImageProperty>.self, value: &self.images)
      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_RichTextElement.AtProperty>.self, value: &self.atUsers)
      case 3: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_OpenCardAttachment.OptionUser>.self, value: &self.optionUsers)
      case 4: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.digestHashTags)
      case 5: try decoder.decodeRepeatedStringField(value: &self.imageKeys)
      case 6: try decoder.decodeSingularStringField(value: &self._cardContentHash)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if !self.images.isEmpty {
      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_RichTextElement.ImageProperty>.self, value: self.images, fieldNumber: 1)
    }
    if !self.atUsers.isEmpty {
      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_RichTextElement.AtProperty>.self, value: self.atUsers, fieldNumber: 2)
    }
    if !self.optionUsers.isEmpty {
      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_OpenCardAttachment.OptionUser>.self, value: self.optionUsers, fieldNumber: 3)
    }
    if !self.digestHashTags.isEmpty {
      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.digestHashTags, fieldNumber: 4)
    }
    if !self.imageKeys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.imageKeys, fieldNumber: 5)
    }
    if let v = self._cardContentHash {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_OpenCardAttachment, rhs: LarkNCExtensionPB_Entities_OpenCardAttachment) -> Bool {
    if lhs.images != rhs.images {return false}
    if lhs.atUsers != rhs.atUsers {return false}
    if lhs.optionUsers != rhs.optionUsers {return false}
    if lhs.digestHashTags != rhs.digestHashTags {return false}
    if lhs.imageKeys != rhs.imageKeys {return false}
    if lhs._cardContentHash != rhs._cardContentHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_OpenCardAttachment.OptionUser: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_OpenCardAttachment.protoMessageName + ".OptionUser"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "user_id"),
    2: .same(proto: "content"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._userID)
      case 2: try decoder.decodeSingularStringField(value: &self._content)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._content {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_OpenCardAttachment.OptionUser, rhs: LarkNCExtensionPB_Entities_OpenCardAttachment.OptionUser) -> Bool {
    if lhs._userID != rhs._userID {return false}
    if lhs._content != rhs._content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CardActionPacket: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CardActionPacket"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "cid"),
    2: .same(proto: "parameters"),
    3: .same(proto: "payload"),
  ]

  fileprivate class _StorageClass {
    var _cid: String? = nil
    var _parameters: LarkNCExtensionPB_Entities_CardAction.Parameters? = nil
    var _payload: Data? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cid = source._cid
      _parameters = source._parameters
      _payload = source._payload
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._cid)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._parameters)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._payload)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._parameters {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._payload {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CardActionPacket, rhs: LarkNCExtensionPB_Entities_CardActionPacket) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cid != rhs_storage._cid {return false}
        if _storage._parameters != rhs_storage._parameters {return false}
        if _storage._payload != rhs_storage._payload {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CardAction: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CardAction"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "method"),
    3: .standard(proto: "required_parameters"),
    4: .same(proto: "parameters"),
    5: .same(proto: "cmd"),
    6: .same(proto: "packet"),
    7: .standard(proto: "open_url"),
  ]

  fileprivate class _StorageClass {
    var _url: String? = nil
    var _method: LarkNCExtensionPB_Entities_CardAction.Method? = nil
    var _requiredParameters: LarkNCExtensionPB_Entities_CardAction.RequiredParameters? = nil
    var _parameters: LarkNCExtensionPB_Entities_CardAction.Parameters? = nil
    var _cmd: LarkNCExtensionPB_Improto_Command? = nil
    var _packet: LarkNCExtensionPB_Entities_CardActionPacket? = nil
    var _openURL: LarkNCExtensionPB_Entities_CardAction.Url? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _url = source._url
      _method = source._method
      _requiredParameters = source._requiredParameters
      _parameters = source._parameters
      _cmd = source._cmd
      _packet = source._packet
      _openURL = source._openURL
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._url == nil {return false}
      if _storage._method == nil {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._url)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._method)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._requiredParameters)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._parameters)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._cmd)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._packet)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._openURL)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._url {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._method {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      }
      if let v = _storage._requiredParameters {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._parameters {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._cmd {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      }
      if let v = _storage._packet {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._openURL {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CardAction, rhs: LarkNCExtensionPB_Entities_CardAction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._url != rhs_storage._url {return false}
        if _storage._method != rhs_storage._method {return false}
        if _storage._requiredParameters != rhs_storage._requiredParameters {return false}
        if _storage._parameters != rhs_storage._parameters {return false}
        if _storage._cmd != rhs_storage._cmd {return false}
        if _storage._packet != rhs_storage._packet {return false}
        if _storage._openURL != rhs_storage._openURL {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CardAction.Method: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_METHOD"),
    1: .same(proto: "GET"),
    2: .same(proto: "POST"),
    3: .same(proto: "LARK_COMMAND"),
    4: .same(proto: "OPEN_URL"),
  ]
}

extension LarkNCExtensionPB_Entities_CardAction.Url: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CardAction.protoMessageName + ".Url"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "url"),
    2: .standard(proto: "ios_url"),
    3: .standard(proto: "android_url"),
    4: .standard(proto: "pc_url"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._url)
      case 2: try decoder.decodeSingularStringField(value: &self._iosURL)
      case 3: try decoder.decodeSingularStringField(value: &self._androidURL)
      case 4: try decoder.decodeSingularStringField(value: &self._pcURL)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._iosURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._androidURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._pcURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CardAction.Url, rhs: LarkNCExtensionPB_Entities_CardAction.Url) -> Bool {
    if lhs._url != rhs._url {return false}
    if lhs._iosURL != rhs._iosURL {return false}
    if lhs._androidURL != rhs._androidURL {return false}
    if lhs._pcURL != rhs._pcURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CardAction.RequiredParameters: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CardAction.protoMessageName + ".RequiredParameters"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "need_user_info"),
    2: .standard(proto: "need_message_info"),
    3: .standard(proto: "need_user_id"),
    4: .standard(proto: "need_message_id"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._needUserInfo)
      case 2: try decoder.decodeSingularBoolField(value: &self._needMessageInfo)
      case 3: try decoder.decodeSingularBoolField(value: &self._needUserID)
      case 4: try decoder.decodeSingularBoolField(value: &self._needMessageID)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._needUserInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._needMessageInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._needUserID {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._needMessageID {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CardAction.RequiredParameters, rhs: LarkNCExtensionPB_Entities_CardAction.RequiredParameters) -> Bool {
    if lhs._needUserInfo != rhs._needUserInfo {return false}
    if lhs._needMessageInfo != rhs._needMessageInfo {return false}
    if lhs._needUserID != rhs._needUserID {return false}
    if lhs._needMessageID != rhs._needMessageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CardAction.UserInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CardAction.protoMessageName + ".UserInfo"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "user_open_id"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._userOpenID)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._userOpenID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CardAction.UserInfo, rhs: LarkNCExtensionPB_Entities_CardAction.UserInfo) -> Bool {
    if lhs._userOpenID != rhs._userOpenID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CardAction.MessageInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CardAction.protoMessageName + ".MessageInfo"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    2: .standard(proto: "message_open_id"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self._messageOpenID)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._messageOpenID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CardAction.MessageInfo, rhs: LarkNCExtensionPB_Entities_CardAction.MessageInfo) -> Bool {
    if lhs._messageOpenID != rhs._messageOpenID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CardAction.Parameters: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CardAction.protoMessageName + ".Parameters"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "parameters"),
    2: .standard(proto: "user_info"),
    3: .standard(proto: "message_info"),
    4: .standard(proto: "user_id"),
    5: .standard(proto: "message_id"),
  ]

  fileprivate class _StorageClass {
    var _parameters: Dictionary<String,String> = [:]
    var _userInfo: LarkNCExtensionPB_Entities_CardAction.UserInfo? = nil
    var _messageInfo: LarkNCExtensionPB_Entities_CardAction.MessageInfo? = nil
    var _userID: String? = nil
    var _messageID: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _parameters = source._parameters
      _userInfo = source._userInfo
      _messageInfo = source._messageInfo
      _userID = source._userID
      _messageID = source._messageID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._parameters)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._userInfo)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._messageInfo)
        case 4: try decoder.decodeSingularStringField(value: &_storage._userID)
        case 5: try decoder.decodeSingularStringField(value: &_storage._messageID)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._parameters.isEmpty {
        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._parameters, fieldNumber: 1)
      }
      if let v = _storage._userInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._messageInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._userID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._messageID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CardAction.Parameters, rhs: LarkNCExtensionPB_Entities_CardAction.Parameters) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._parameters != rhs_storage._parameters {return false}
        if _storage._userInfo != rhs_storage._userInfo {return false}
        if _storage._messageInfo != rhs_storage._messageInfo {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._messageID != rhs_storage._messageID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RichTextElement"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "style"),
    3: .same(proto: "property"),
    4: .standard(proto: "child_ids"),
    5: .standard(proto: "style_keys"),
  ]

  public var isInitialized: Bool {
    if self._tag == nil {return false}
    if self._property == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._tag)
      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.style)
      case 3: try decoder.decodeSingularBytesField(value: &self._property)
      case 4: try decoder.decodeRepeatedStringField(value: &self.childIds)
      case 5: try decoder.decodeRepeatedStringField(value: &self.styleKeys)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._tag {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.style.isEmpty {
      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.style, fieldNumber: 2)
    }
    if let v = self._property {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    if !self.childIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.childIds, fieldNumber: 4)
    }
    if !self.styleKeys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.styleKeys, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement, rhs: LarkNCExtensionPB_Entities_RichTextElement) -> Bool {
    if lhs._tag != rhs._tag {return false}
    if lhs.style != rhs.style {return false}
    if lhs._property != rhs._property {return false}
    if lhs.childIds != rhs.childIds {return false}
    if lhs.styleKeys != rhs.styleKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.Tag: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_TAG"),
    1: .same(proto: "TEXT"),
    2: .same(proto: "IMG"),
    3: .same(proto: "P"),
    4: .same(proto: "FIGURE"),
    5: .same(proto: "AT"),
    6: .same(proto: "A"),
    7: .same(proto: "B"),
    8: .same(proto: "I"),
    9: .same(proto: "U"),
    10: .same(proto: "EMOTION"),
    11: .same(proto: "BUTTON"),
    12: .same(proto: "SELECT"),
    13: .same(proto: "PROGRESS_SELECT_OPTION"),
    14: .same(proto: "DIV"),
    15: .same(proto: "TEXTABLE_AREA"),
    16: .same(proto: "TIME"),
    17: .same(proto: "LINK"),
    18: .same(proto: "MEDIA"),
    19: .same(proto: "SELECTMENU"),
    20: .same(proto: "OVERFLOWMENU"),
    21: .same(proto: "DATEPICKER"),
    22: .same(proto: "DOCS"),
    23: .same(proto: "H1"),
    24: .same(proto: "H2"),
    25: .same(proto: "H3"),
    26: .same(proto: "UL"),
    27: .same(proto: "OL"),
    28: .same(proto: "LI"),
    29: .same(proto: "QUOTE"),
    30: .same(proto: "CODE"),
    31: .same(proto: "CODE_BLOCK"),
    32: .same(proto: "HR"),
    33: .same(proto: "TIMEPICKER"),
    34: .same(proto: "DATETIMEPICKER"),
    35: .same(proto: "REACTION"),
    36: .same(proto: "MENTION"),
  ]
}

extension LarkNCExtensionPB_Entities_RichTextElement.ParagraphProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".ParagraphProperty"
  public static let _protobuf_nameMap = LarkHTTP._NameMap()

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.ParagraphProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.ParagraphProperty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.FigureProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".FigureProperty"
  public static let _protobuf_nameMap = LarkHTTP._NameMap()

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.FigureProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.FigureProperty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.TextProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".TextProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "content"),
    2: .standard(proto: "i18n_key"),
    3: .same(proto: "numberOfLines"),
  ]

  public var isInitialized: Bool {
    if self._content == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._content)
      case 2: try decoder.decodeSingularStringField(value: &self._i18NKey)
      case 3: try decoder.decodeSingularInt32Field(value: &self._numberOfLines)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._content {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._i18NKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._numberOfLines {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.TextProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.TextProperty) -> Bool {
    if lhs._content != rhs._content {return false}
    if lhs._i18NKey != rhs._i18NKey {return false}
    if lhs._numberOfLines != rhs._numberOfLines {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.ItalicProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".ItalicProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "content"),
    2: .standard(proto: "i18n_key"),
  ]

  public var isInitialized: Bool {
    if self._content == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._content)
      case 2: try decoder.decodeSingularStringField(value: &self._i18NKey)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._content {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._i18NKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.ItalicProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.ItalicProperty) -> Bool {
    if lhs._content != rhs._content {return false}
    if lhs._i18NKey != rhs._i18NKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.BoldProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".BoldProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "content"),
    2: .standard(proto: "i18n_key"),
  ]

  public var isInitialized: Bool {
    if self._content == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._content)
      case 2: try decoder.decodeSingularStringField(value: &self._i18NKey)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._content {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._i18NKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.BoldProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.BoldProperty) -> Bool {
    if lhs._content != rhs._content {return false}
    if lhs._i18NKey != rhs._i18NKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.UnderlineProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".UnderlineProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "content"),
    2: .standard(proto: "i18n_key"),
  ]

  public var isInitialized: Bool {
    if self._content == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._content)
      case 2: try decoder.decodeSingularStringField(value: &self._i18NKey)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._content {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._i18NKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.UnderlineProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.UnderlineProperty) -> Bool {
    if lhs._content != rhs._content {return false}
    if lhs._i18NKey != rhs._i18NKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.AnchorProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".AnchorProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "href"),
    2: .same(proto: "content"),
    3: .standard(proto: "text_content"),
    4: .standard(proto: "special_url"),
    5: .standard(proto: "i18n_key"),
    6: .standard(proto: "ios_href"),
    7: .standard(proto: "android_href"),
    8: .standard(proto: "pc_href"),
  ]

  public var isInitialized: Bool {
    if self._href == nil {return false}
    if self._content == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._href)
      case 2: try decoder.decodeSingularStringField(value: &self._content)
      case 3: try decoder.decodeSingularStringField(value: &self._textContent)
      case 4: try decoder.decodeSingularEnumField(value: &self._specialURL)
      case 5: try decoder.decodeSingularStringField(value: &self._i18NKey)
      case 6: try decoder.decodeSingularStringField(value: &self._iosHref)
      case 7: try decoder.decodeSingularStringField(value: &self._androidHref)
      case 8: try decoder.decodeSingularStringField(value: &self._pcHref)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._href {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._content {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._textContent {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._specialURL {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if let v = self._i18NKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._iosHref {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._androidHref {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    if let v = self._pcHref {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.AnchorProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.AnchorProperty) -> Bool {
    if lhs._href != rhs._href {return false}
    if lhs._content != rhs._content {return false}
    if lhs._textContent != rhs._textContent {return false}
    if lhs._specialURL != rhs._specialURL {return false}
    if lhs._i18NKey != rhs._i18NKey {return false}
    if lhs._iosHref != rhs._iosHref {return false}
    if lhs._androidHref != rhs._androidHref {return false}
    if lhs._pcHref != rhs._pcHref {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.AtProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".AtProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "user_id"),
    2: .same(proto: "content"),
  ]

  public var isInitialized: Bool {
    if self._userID == nil {return false}
    if self._content == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._userID)
      case 2: try decoder.decodeSingularStringField(value: &self._content)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._content {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.AtProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.AtProperty) -> Bool {
    if lhs._userID != rhs._userID {return false}
    if lhs._content != rhs._content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.MentionProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".MentionProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "item"),
    2: .same(proto: "content"),
  ]

  fileprivate class _StorageClass {
    var _item: LarkNCExtensionPB_Entities_RichTextElement.MentionItem? = nil
    var _content: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _item = source._item
      _content = source._content
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._item == nil {return false}
      if _storage._content == nil {return false}
      if let v = _storage._item, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._item)
        case 2: try decoder.decodeSingularStringField(value: &_storage._content)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._item {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._content {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.MentionProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.MentionProperty) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._item != rhs_storage._item {return false}
        if _storage._content != rhs_storage._content {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.MentionItem: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".MentionItem"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._type == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._id)
      case 2: try decoder.decodeSingularEnumField(value: &self._type)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.MentionItem, rhs: LarkNCExtensionPB_Entities_RichTextElement.MentionItem) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.MentionItem.MentionType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_MENTION_TYPE"),
    1: .same(proto: "HASH_TAG"),
    2: .same(proto: "MOMENTS_HASHTAG"),
  ]
}

extension LarkNCExtensionPB_Entities_RichTextElement.ImageProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".ImageProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    2: .same(proto: "token"),
    10: .same(proto: "alt"),
    11: .standard(proto: "alt_i18n_key"),
    12: .standard(proto: "img_can_preview"),
    3: .same(proto: "cipher"),
    19: .standard(proto: "cipher_type"),
    4: .standard(proto: "origin_key"),
    9: .standard(proto: "fs_unit"),
    1: .same(proto: "urls"),
    5: .standard(proto: "middle_key"),
    6: .standard(proto: "thumb_key"),
    7: .standard(proto: "origin_width"),
    8: .standard(proto: "origin_height"),
    13: .standard(proto: "thumbnail_webp"),
    14: .standard(proto: "middle_webp"),
    15: .standard(proto: "middle_mp4"),
    16: .same(proto: "cover"),
    17: .same(proto: "image"),
    18: .standard(proto: "custom_width"),
    20: .standard(proto: "is_origin_source"),
    21: .standard(proto: "origin_size"),
  ]

  fileprivate class _StorageClass {
    var _token: String? = nil
    var _alt: String? = nil
    var _altI18NKey: String? = nil
    var _imgCanPreview: Bool? = nil
    var _cipher: LarkNCExtensionPB_Entities_Cipher? = nil
    var _cipherType: LarkNCExtensionPB_Entities_Crypto.TypeEnum? = nil
    var _originKey: String? = nil
    var _fsUnit: String? = nil
    var _urls: [String] = []
    var _middleKey: String? = nil
    var _thumbKey: String? = nil
    var _originWidth: Int32? = nil
    var _originHeight: Int32? = nil
    var _thumbnailWebp: LarkNCExtensionPB_Entities_Image? = nil
    var _middleWebp: LarkNCExtensionPB_Entities_Image? = nil
    var _middleMp4: LarkNCExtensionPB_Entities_Image? = nil
    var _cover: LarkNCExtensionPB_Entities_Image? = nil
    var _image: LarkNCExtensionPB_Entities_ImageSetV2? = nil
    var _customWidth: Int32? = nil
    var _isOriginSource: Bool? = nil
    var _originSize: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _token = source._token
      _alt = source._alt
      _altI18NKey = source._altI18NKey
      _imgCanPreview = source._imgCanPreview
      _cipher = source._cipher
      _cipherType = source._cipherType
      _originKey = source._originKey
      _fsUnit = source._fsUnit
      _urls = source._urls
      _middleKey = source._middleKey
      _thumbKey = source._thumbKey
      _originWidth = source._originWidth
      _originHeight = source._originHeight
      _thumbnailWebp = source._thumbnailWebp
      _middleWebp = source._middleWebp
      _middleMp4 = source._middleMp4
      _cover = source._cover
      _image = source._image
      _customWidth = source._customWidth
      _isOriginSource = source._isOriginSource
      _originSize = source._originSize
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._image, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedStringField(value: &_storage._urls)
        case 2: try decoder.decodeSingularStringField(value: &_storage._token)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._cipher)
        case 4: try decoder.decodeSingularStringField(value: &_storage._originKey)
        case 5: try decoder.decodeSingularStringField(value: &_storage._middleKey)
        case 6: try decoder.decodeSingularStringField(value: &_storage._thumbKey)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._originWidth)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._originHeight)
        case 9: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
        case 10: try decoder.decodeSingularStringField(value: &_storage._alt)
        case 11: try decoder.decodeSingularStringField(value: &_storage._altI18NKey)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._imgCanPreview)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._thumbnailWebp)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._middleWebp)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._middleMp4)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._cover)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._image)
        case 18: try decoder.decodeSingularInt32Field(value: &_storage._customWidth)
        case 19: try decoder.decodeSingularEnumField(value: &_storage._cipherType)
        case 20: try decoder.decodeSingularBoolField(value: &_storage._isOriginSource)
        case 21: try decoder.decodeSingularUInt64Field(value: &_storage._originSize)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._urls.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._urls, fieldNumber: 1)
      }
      if let v = _storage._token {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._cipher {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._originKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._middleKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._thumbKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._originWidth {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._originHeight {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._fsUnit {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
      if let v = _storage._alt {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      }
      if let v = _storage._altI18NKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      }
      if let v = _storage._imgCanPreview {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      }
      if let v = _storage._thumbnailWebp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._middleWebp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._middleMp4 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._cover {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._customWidth {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 18)
      }
      if let v = _storage._cipherType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 19)
      }
      if let v = _storage._isOriginSource {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      }
      if let v = _storage._originSize {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 21)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.ImageProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.ImageProperty) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._token != rhs_storage._token {return false}
        if _storage._alt != rhs_storage._alt {return false}
        if _storage._altI18NKey != rhs_storage._altI18NKey {return false}
        if _storage._imgCanPreview != rhs_storage._imgCanPreview {return false}
        if _storage._cipher != rhs_storage._cipher {return false}
        if _storage._cipherType != rhs_storage._cipherType {return false}
        if _storage._originKey != rhs_storage._originKey {return false}
        if _storage._fsUnit != rhs_storage._fsUnit {return false}
        if _storage._urls != rhs_storage._urls {return false}
        if _storage._middleKey != rhs_storage._middleKey {return false}
        if _storage._thumbKey != rhs_storage._thumbKey {return false}
        if _storage._originWidth != rhs_storage._originWidth {return false}
        if _storage._originHeight != rhs_storage._originHeight {return false}
        if _storage._thumbnailWebp != rhs_storage._thumbnailWebp {return false}
        if _storage._middleWebp != rhs_storage._middleWebp {return false}
        if _storage._middleMp4 != rhs_storage._middleMp4 {return false}
        if _storage._cover != rhs_storage._cover {return false}
        if _storage._image != rhs_storage._image {return false}
        if _storage._customWidth != rhs_storage._customWidth {return false}
        if _storage._isOriginSource != rhs_storage._isOriginSource {return false}
        if _storage._originSize != rhs_storage._originSize {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.ReactionProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".ReactionProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "key"),
  ]

  public var isInitialized: Bool {
    if self._key == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._key)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._key {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.ReactionProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.ReactionProperty) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.EmotionProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".EmotionProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "key"),
  ]

  public var isInitialized: Bool {
    if self._key == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._key)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._key {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.EmotionProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.EmotionProperty) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.ButtonProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".ButtonProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "action_id"),
    2: .same(proto: "disable"),
    3: .same(proto: "active"),
    4: .same(proto: "confirm"),
    5: .same(proto: "loading"),
    6: .same(proto: "mode"),
  ]

  fileprivate class _StorageClass {
    var _actionID: String? = nil
    var _disable: Bool? = nil
    var _active: Bool? = nil
    var _confirm: LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty? = nil
    var _loading: LarkNCExtensionPB_Entities_RichTextElement.ButtonLoadingProperty? = nil
    var _mode: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _actionID = source._actionID
      _disable = source._disable
      _active = source._active
      _confirm = source._confirm
      _loading = source._loading
      _mode = source._mode
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._confirm, !v.isInitialized {return false}
      if let v = _storage._loading, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._actionID)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._disable)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._active)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._confirm)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._loading)
        case 6: try decoder.decodeSingularStringField(value: &_storage._mode)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._actionID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._disable {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      }
      if let v = _storage._active {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      }
      if let v = _storage._confirm {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._loading {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._mode {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.ButtonProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.ButtonProperty) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._actionID != rhs_storage._actionID {return false}
        if _storage._disable != rhs_storage._disable {return false}
        if _storage._active != rhs_storage._active {return false}
        if _storage._confirm != rhs_storage._confirm {return false}
        if _storage._loading != rhs_storage._loading {return false}
        if _storage._mode != rhs_storage._mode {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".ButtonConfirmProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "text"),
    3: .same(proto: "confirm"),
    4: .same(proto: "dismiss"),
    5: .standard(proto: "title_i18n_key"),
    6: .standard(proto: "text_i18n_key"),
    7: .standard(proto: "confirm_i18n_key"),
    8: .standard(proto: "dismiss_i18n_key"),
  ]

  public var isInitialized: Bool {
    if self._title == nil {return false}
    if self._text == nil {return false}
    if self._confirm == nil {return false}
    if self._dismiss == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._title)
      case 2: try decoder.decodeSingularStringField(value: &self._text)
      case 3: try decoder.decodeSingularStringField(value: &self._confirm)
      case 4: try decoder.decodeSingularStringField(value: &self._dismiss)
      case 5: try decoder.decodeSingularStringField(value: &self._titleI18NKey)
      case 6: try decoder.decodeSingularStringField(value: &self._textI18NKey)
      case 7: try decoder.decodeSingularStringField(value: &self._confirmI18NKey)
      case 8: try decoder.decodeSingularStringField(value: &self._dismissI18NKey)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._text {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._confirm {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._dismiss {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._titleI18NKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._textI18NKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._confirmI18NKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    if let v = self._dismissI18NKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty) -> Bool {
    if lhs._title != rhs._title {return false}
    if lhs._text != rhs._text {return false}
    if lhs._confirm != rhs._confirm {return false}
    if lhs._dismiss != rhs._dismiss {return false}
    if lhs._titleI18NKey != rhs._titleI18NKey {return false}
    if lhs._textI18NKey != rhs._textI18NKey {return false}
    if lhs._confirmI18NKey != rhs._confirmI18NKey {return false}
    if lhs._dismissI18NKey != rhs._dismissI18NKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.ButtonLoadingProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".ButtonLoadingProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "begin"),
    2: .same(proto: "success"),
    3: .same(proto: "fail"),
    4: .standard(proto: "begin_i18n_key"),
    5: .standard(proto: "success_i18n_key"),
    6: .standard(proto: "fail_i18n_key"),
  ]

  public var isInitialized: Bool {
    if self._begin == nil {return false}
    if self._success == nil {return false}
    if self._fail == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._begin)
      case 2: try decoder.decodeSingularStringField(value: &self._success)
      case 3: try decoder.decodeSingularStringField(value: &self._fail)
      case 4: try decoder.decodeSingularStringField(value: &self._beginI18NKey)
      case 5: try decoder.decodeSingularStringField(value: &self._successI18NKey)
      case 6: try decoder.decodeSingularStringField(value: &self._failI18NKey)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._begin {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._success {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._fail {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._beginI18NKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._successI18NKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._failI18NKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.ButtonLoadingProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.ButtonLoadingProperty) -> Bool {
    if lhs._begin != rhs._begin {return false}
    if lhs._success != rhs._success {return false}
    if lhs._fail != rhs._fail {return false}
    if lhs._beginI18NKey != rhs._beginI18NKey {return false}
    if lhs._successI18NKey != rhs._successI18NKey {return false}
    if lhs._failI18NKey != rhs._failI18NKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.SelectProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".SelectProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    4: .standard(proto: "min_pick_num"),
    5: .standard(proto: "max_pick_num"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 4: try decoder.decodeSingularInt32Field(value: &self._minPickNum)
      case 5: try decoder.decodeSingularInt32Field(value: &self._maxPickNum)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._minPickNum {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._maxPickNum {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.SelectProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.SelectProperty) -> Bool {
    if lhs._minPickNum != rhs._minPickNum {return false}
    if lhs._maxPickNum != rhs._maxPickNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.SelectMenuProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".SelectMenuProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "action_id"),
    3: .standard(proto: "place_holder"),
    4: .standard(proto: "place_holder_i18n_key"),
    5: .standard(proto: "initial_option"),
    6: .same(proto: "options"),
    7: .same(proto: "confirm"),
  ]

  fileprivate class _StorageClass {
    var _type: LarkNCExtensionPB_Entities_RichTextElement.SelectMenuProperty.TypeEnum? = nil
    var _actionID: String? = nil
    var _placeHolder: String? = nil
    var _placeHolderI18NKey: String? = nil
    var _initialOption: String? = nil
    var _options: [LarkNCExtensionPB_Entities_RichTextElement.MenuOption] = []
    var _confirm: LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _actionID = source._actionID
      _placeHolder = source._placeHolder
      _placeHolderI18NKey = source._placeHolderI18NKey
      _initialOption = source._initialOption
      _options = source._options
      _confirm = source._confirm
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._confirm, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularStringField(value: &_storage._actionID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._placeHolder)
        case 4: try decoder.decodeSingularStringField(value: &_storage._placeHolderI18NKey)
        case 5: try decoder.decodeSingularStringField(value: &_storage._initialOption)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._options)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._confirm)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._actionID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._placeHolder {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._placeHolderI18NKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._initialOption {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if !_storage._options.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._options, fieldNumber: 6)
      }
      if let v = _storage._confirm {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.SelectMenuProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.SelectMenuProperty) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._actionID != rhs_storage._actionID {return false}
        if _storage._placeHolder != rhs_storage._placeHolder {return false}
        if _storage._placeHolderI18NKey != rhs_storage._placeHolderI18NKey {return false}
        if _storage._initialOption != rhs_storage._initialOption {return false}
        if _storage._options != rhs_storage._options {return false}
        if _storage._confirm != rhs_storage._confirm {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.SelectMenuProperty.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "STATIC"),
    2: .same(proto: "PERSON"),
  ]
}

extension LarkNCExtensionPB_Entities_RichTextElement.MenuOption: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".MenuOption"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "text_i18n_key"),
    3: .same(proto: "value"),
    4: .same(proto: "url"),
    5: .standard(proto: "option_action_id"),
  ]

  fileprivate class _StorageClass {
    var _text: String? = nil
    var _textI18NKey: String? = nil
    var _value: String? = nil
    var _url: LarkNCExtensionPB_Entities_CardAction.Url? = nil
    var _optionActionID: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _text = source._text
      _textI18NKey = source._textI18NKey
      _value = source._value
      _url = source._url
      _optionActionID = source._optionActionID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._text)
        case 2: try decoder.decodeSingularStringField(value: &_storage._textI18NKey)
        case 3: try decoder.decodeSingularStringField(value: &_storage._value)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._url)
        case 5: try decoder.decodeSingularStringField(value: &_storage._optionActionID)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._text {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._textI18NKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._value {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._url {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._optionActionID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.MenuOption, rhs: LarkNCExtensionPB_Entities_RichTextElement.MenuOption) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._text != rhs_storage._text {return false}
        if _storage._textI18NKey != rhs_storage._textI18NKey {return false}
        if _storage._value != rhs_storage._value {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._optionActionID != rhs_storage._optionActionID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.OverflowMenuProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".OverflowMenuProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "action_id"),
    2: .same(proto: "options"),
    3: .same(proto: "confirm"),
  ]

  fileprivate class _StorageClass {
    var _actionID: String? = nil
    var _options: [LarkNCExtensionPB_Entities_RichTextElement.MenuOption] = []
    var _confirm: LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _actionID = source._actionID
      _options = source._options
      _confirm = source._confirm
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._confirm, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._actionID)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._options)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._confirm)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._actionID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if !_storage._options.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._options, fieldNumber: 2)
      }
      if let v = _storage._confirm {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.OverflowMenuProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.OverflowMenuProperty) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._actionID != rhs_storage._actionID {return false}
        if _storage._options != rhs_storage._options {return false}
        if _storage._confirm != rhs_storage._confirm {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.DatePickerProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".DatePickerProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "action_id"),
    2: .standard(proto: "place_holder"),
    3: .standard(proto: "place_holder_i18n_key"),
    4: .standard(proto: "initial_date"),
    5: .same(proto: "confirm"),
  ]

  fileprivate class _StorageClass {
    var _actionID: String? = nil
    var _placeHolder: String? = nil
    var _placeHolderI18NKey: String? = nil
    var _initialDate: String? = nil
    var _confirm: LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _actionID = source._actionID
      _placeHolder = source._placeHolder
      _placeHolderI18NKey = source._placeHolderI18NKey
      _initialDate = source._initialDate
      _confirm = source._confirm
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._confirm, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._actionID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._placeHolder)
        case 3: try decoder.decodeSingularStringField(value: &_storage._placeHolderI18NKey)
        case 4: try decoder.decodeSingularStringField(value: &_storage._initialDate)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._confirm)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._actionID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._placeHolder {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._placeHolderI18NKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._initialDate {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._confirm {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.DatePickerProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.DatePickerProperty) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._actionID != rhs_storage._actionID {return false}
        if _storage._placeHolder != rhs_storage._placeHolder {return false}
        if _storage._placeHolderI18NKey != rhs_storage._placeHolderI18NKey {return false}
        if _storage._initialDate != rhs_storage._initialDate {return false}
        if _storage._confirm != rhs_storage._confirm {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.TimePickerProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".TimePickerProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "action_id"),
    2: .standard(proto: "place_holder"),
    3: .standard(proto: "place_holder_i18n_key"),
    4: .standard(proto: "initial_time"),
    5: .same(proto: "confirm"),
  ]

  fileprivate class _StorageClass {
    var _actionID: String? = nil
    var _placeHolder: String? = nil
    var _placeHolderI18NKey: String? = nil
    var _initialTime: String? = nil
    var _confirm: LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _actionID = source._actionID
      _placeHolder = source._placeHolder
      _placeHolderI18NKey = source._placeHolderI18NKey
      _initialTime = source._initialTime
      _confirm = source._confirm
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._confirm, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._actionID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._placeHolder)
        case 3: try decoder.decodeSingularStringField(value: &_storage._placeHolderI18NKey)
        case 4: try decoder.decodeSingularStringField(value: &_storage._initialTime)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._confirm)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._actionID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._placeHolder {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._placeHolderI18NKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._initialTime {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._confirm {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.TimePickerProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.TimePickerProperty) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._actionID != rhs_storage._actionID {return false}
        if _storage._placeHolder != rhs_storage._placeHolder {return false}
        if _storage._placeHolderI18NKey != rhs_storage._placeHolderI18NKey {return false}
        if _storage._initialTime != rhs_storage._initialTime {return false}
        if _storage._confirm != rhs_storage._confirm {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.DatetimePickerProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".DatetimePickerProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "action_id"),
    2: .standard(proto: "place_holder"),
    3: .standard(proto: "place_holder_i18n_key"),
    4: .standard(proto: "initial_datetime"),
    5: .same(proto: "confirm"),
  ]

  fileprivate class _StorageClass {
    var _actionID: String? = nil
    var _placeHolder: String? = nil
    var _placeHolderI18NKey: String? = nil
    var _initialDatetime: String? = nil
    var _confirm: LarkNCExtensionPB_Entities_RichTextElement.ButtonConfirmProperty? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _actionID = source._actionID
      _placeHolder = source._placeHolder
      _placeHolderI18NKey = source._placeHolderI18NKey
      _initialDatetime = source._initialDatetime
      _confirm = source._confirm
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._confirm, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._actionID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._placeHolder)
        case 3: try decoder.decodeSingularStringField(value: &_storage._placeHolderI18NKey)
        case 4: try decoder.decodeSingularStringField(value: &_storage._initialDatetime)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._confirm)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._actionID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._placeHolder {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._placeHolderI18NKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._initialDatetime {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._confirm {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.DatetimePickerProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.DatetimePickerProperty) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._actionID != rhs_storage._actionID {return false}
        if _storage._placeHolder != rhs_storage._placeHolder {return false}
        if _storage._placeHolderI18NKey != rhs_storage._placeHolderI18NKey {return false}
        if _storage._initialDatetime != rhs_storage._initialDatetime {return false}
        if _storage._confirm != rhs_storage._confirm {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.ProgressSelectOptionProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".ProgressSelectOptionProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "action_id"),
    2: .standard(proto: "action_param_name"),
    3: .standard(proto: "action_param_value"),
    4: .same(proto: "disable"),
    5: .same(proto: "selected"),
    6: .standard(proto: "option_case"),
    7: .same(proto: "content"),
    8: .standard(proto: "number_of_selected"),
    9: .standard(proto: "number_of_total"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._actionID)
      case 2: try decoder.decodeSingularStringField(value: &self._actionParamName)
      case 3: try decoder.decodeSingularStringField(value: &self._actionParamValue)
      case 4: try decoder.decodeSingularBoolField(value: &self._disable)
      case 5: try decoder.decodeSingularBoolField(value: &self._selected)
      case 6: try decoder.decodeSingularStringField(value: &self._optionCase)
      case 7: try decoder.decodeSingularStringField(value: &self._content)
      case 8: try decoder.decodeSingularInt32Field(value: &self._numberOfSelected)
      case 9: try decoder.decodeSingularInt32Field(value: &self._numberOfTotal)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._actionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._actionParamName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._actionParamValue {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._disable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._selected {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._optionCase {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._content {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    if let v = self._numberOfSelected {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._numberOfTotal {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.ProgressSelectOptionProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.ProgressSelectOptionProperty) -> Bool {
    if lhs._actionID != rhs._actionID {return false}
    if lhs._actionParamName != rhs._actionParamName {return false}
    if lhs._actionParamValue != rhs._actionParamValue {return false}
    if lhs._disable != rhs._disable {return false}
    if lhs._selected != rhs._selected {return false}
    if lhs._optionCase != rhs._optionCase {return false}
    if lhs._content != rhs._content {return false}
    if lhs._numberOfSelected != rhs._numberOfSelected {return false}
    if lhs._numberOfTotal != rhs._numberOfTotal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.DivProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".DivProperty"
  public static let _protobuf_nameMap = LarkHTTP._NameMap()

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.DivProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.DivProperty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.TextableAreaProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".TextableAreaProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "numberOfLines"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._numberOfLines)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._numberOfLines {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.TextableAreaProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.TextableAreaProperty) -> Bool {
    if lhs._numberOfLines != rhs._numberOfLines {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.TimeProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".TimeProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "millisecond_since1970"),
    2: .same(proto: "format"),
  ]

  public var isInitialized: Bool {
    if self._millisecondSince1970 == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._millisecondSince1970)
      case 2: try decoder.decodeSingularStringField(value: &self._format)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._millisecondSince1970 {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._format {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.TimeProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.TimeProperty) -> Bool {
    if lhs._millisecondSince1970 != rhs._millisecondSince1970 {return false}
    if lhs._format != rhs._format {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.LinkProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".LinkProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "url"),
    2: .standard(proto: "ios_url"),
    3: .standard(proto: "android_url"),
    4: .standard(proto: "pc_url"),
    5: .standard(proto: "special_url"),
    6: .same(proto: "scene"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._url)
      case 2: try decoder.decodeSingularStringField(value: &self._iosURL)
      case 3: try decoder.decodeSingularStringField(value: &self._androidURL)
      case 4: try decoder.decodeSingularStringField(value: &self._pcURL)
      case 5: try decoder.decodeSingularEnumField(value: &self._specialURL)
      case 6: try decoder.decodeSingularEnumField(value: &self._scene)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._iosURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._androidURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._pcURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._specialURL {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }
    if let v = self._scene {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.LinkProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.LinkProperty) -> Bool {
    if lhs._url != rhs._url {return false}
    if lhs._iosURL != rhs._iosURL {return false}
    if lhs._androidURL != rhs._androidURL {return false}
    if lhs._pcURL != rhs._pcURL {return false}
    if lhs._specialURL != rhs._specialURL {return false}
    if lhs._scene != rhs._scene {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.LinkProperty.LinkScene: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "CardLink"),
    2: .same(proto: "ContentLink"),
    3: .same(proto: "FooterLink"),
  ]
}

extension LarkNCExtensionPB_Entities_RichTextElement.MediaProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".MediaProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "name"),
    3: .same(proto: "size"),
    4: .same(proto: "mime"),
    5: .same(proto: "source"),
    6: .same(proto: "image"),
    7: .same(proto: "duration"),
    8: .standard(proto: "fs_unit"),
    9: .standard(proto: "crypto_token"),
  ]

  fileprivate class _StorageClass {
    var _key: String? = nil
    var _name: String? = nil
    var _size: Int64? = nil
    var _mime: String? = nil
    var _source: LarkNCExtensionPB_Entities_RichTextElement.MediaProperty.Source? = nil
    var _image: LarkNCExtensionPB_Entities_ImageSet? = nil
    var _duration: Int32? = nil
    var _fsUnit: String? = nil
    var _cryptoToken: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _name = source._name
      _size = source._size
      _mime = source._mime
      _source = source._source
      _image = source._image
      _duration = source._duration
      _fsUnit = source._fsUnit
      _cryptoToken = source._cryptoToken
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._key)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._size)
        case 4: try decoder.decodeSingularStringField(value: &_storage._mime)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._source)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._image)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._duration)
        case 8: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
        case 9: try decoder.decodeSingularStringField(value: &_storage._cryptoToken)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._size {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._mime {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._source {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      }
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._duration {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._fsUnit {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
      if let v = _storage._cryptoToken {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.MediaProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.MediaProperty) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._size != rhs_storage._size {return false}
        if _storage._mime != rhs_storage._mime {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._image != rhs_storage._image {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._fsUnit != rhs_storage._fsUnit {return false}
        if _storage._cryptoToken != rhs_storage._cryptoToken {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.MediaProperty.Source: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "LARK"),
  ]
}

extension LarkNCExtensionPB_Entities_RichTextElement.DocsProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".DocsProperty"
  public static let _protobuf_nameMap = LarkHTTP._NameMap()

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.DocsProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.DocsProperty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.H1Property: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".H1Property"
  public static let _protobuf_nameMap = LarkHTTP._NameMap()

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.H1Property, rhs: LarkNCExtensionPB_Entities_RichTextElement.H1Property) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.H2Property: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".H2Property"
  public static let _protobuf_nameMap = LarkHTTP._NameMap()

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.H2Property, rhs: LarkNCExtensionPB_Entities_RichTextElement.H2Property) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.H3Property: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".H3Property"
  public static let _protobuf_nameMap = LarkHTTP._NameMap()

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.H3Property, rhs: LarkNCExtensionPB_Entities_RichTextElement.H3Property) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.ULProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".ULProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.ULProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.ULProperty) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.ULProperty.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "DISC"),
    1: .same(proto: "CIRCLE"),
    2: .same(proto: "SQUARE"),
    3: .same(proto: "NONE"),
  ]
}

extension LarkNCExtensionPB_Entities_RichTextElement.OLProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".OLProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "start"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularInt32Field(value: &self._start)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._start {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.OLProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.OLProperty) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._start != rhs._start {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.OLProperty.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "NUMBER"),
    1: .same(proto: "LOWERCASE_A"),
    2: .same(proto: "UPPERCASE_A"),
    3: .same(proto: "LOWERCASE_ROMAN"),
    4: .same(proto: "UPPERCASE_ROMAN"),
    5: .same(proto: "NONE"),
  ]
}

extension LarkNCExtensionPB_Entities_RichTextElement.LIProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".LIProperty"
  public static let _protobuf_nameMap = LarkHTTP._NameMap()

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.LIProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.LIProperty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.QuoteProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".QuoteProperty"
  public static let _protobuf_nameMap = LarkHTTP._NameMap()

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.QuoteProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.QuoteProperty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.CodeProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".CodeProperty"
  public static let _protobuf_nameMap = LarkHTTP._NameMap()

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.CodeProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.CodeProperty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".CodeBlockProperty"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "language"),
    2: .same(proto: "content"),
    3: .standard(proto: "style_refs"),
    4: .same(proto: "styles"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._language)
      case 2: try decoder.decodeSingularStringField(value: &self._content)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.styleRefs)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.styles)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._language {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._content {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if !self.styleRefs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.styleRefs, fieldNumber: 3)
    }
    if !self.styles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.styles, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty) -> Bool {
    if lhs._language != rhs._language {return false}
    if lhs._content != rhs._content {return false}
    if lhs.styleRefs != rhs.styleRefs {return false}
    if lhs.styles != rhs.styles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.Language: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "JS"),
    1: .same(proto: "APACHE"),
    2: .same(proto: "BASH"),
    3: .same(proto: "CS"),
    4: .same(proto: "CPLUSPLUS"),
    5: .same(proto: "COFFE_SCRIPT"),
    6: .same(proto: "HTML"),
    7: .same(proto: "XML"),
    8: .same(proto: "HTTP"),
    9: .same(proto: "JSON"),
    10: .same(proto: "JAVA"),
    11: .same(proto: "MAKEFILE"),
    12: .same(proto: "MARKDOWN"),
    13: .same(proto: "NGINX"),
    14: .same(proto: "OBJC"),
    15: .same(proto: "PHP"),
    16: .same(proto: "PERL"),
    17: .same(proto: "PYTHON"),
    18: .same(proto: "RUBY"),
    19: .same(proto: "SQL"),
    20: .same(proto: "SHELL"),
    21: .same(proto: "GO"),
    22: .same(proto: "SCSS"),
    23: .same(proto: "LUA"),
    24: .same(proto: "DJANGO"),
    25: .same(proto: "KOTLIN"),
  ]
}

extension LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.StyleType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "CUSTOMIZE"),
    1: .same(proto: "GRAMMAR"),
  ]
}

extension LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.Style: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.protoMessageName + ".Style"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "name"),
    3: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularStringField(value: &self._name)
      case 3: try decoder.decodeSingularStringField(value: &self._value)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._value {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.Style, rhs: LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.Style) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._name != rhs._name {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.StyleRef: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.protoMessageName + ".StyleRef"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "location"),
    2: .same(proto: "length"),
    3: .standard(proto: "style_ids"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._location)
      case 2: try decoder.decodeSingularInt32Field(value: &self._length)
      case 3: try decoder.decodeRepeatedInt32Field(value: &self.styleIds)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._location {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._length {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if !self.styleIds.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.styleIds, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.StyleRef, rhs: LarkNCExtensionPB_Entities_RichTextElement.CodeBlockProperty.StyleRef) -> Bool {
    if lhs._location != rhs._location {return false}
    if lhs._length != rhs._length {return false}
    if lhs.styleIds != rhs.styleIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElement.HRProperty: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElement.protoMessageName + ".HRProperty"
  public static let _protobuf_nameMap = LarkHTTP._NameMap()

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElement.HRProperty, rhs: LarkNCExtensionPB_Entities_RichTextElement.HRProperty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElements: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RichTextElements"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "dictionary"),
    2: .standard(proto: "style_refs"),
    3: .same(proto: "styles"),
  ]

  public var isInitialized: Bool {
    if !LarkHTTP.Internal.areAllInitialized(self.dictionary) {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_RichTextElement>.self, value: &self.dictionary)
      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_RichTextElements.RichTextElementStyleRefs>.self, value: &self.styleRefs)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.styles)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if !self.dictionary.isEmpty {
      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_RichTextElement>.self, value: self.dictionary, fieldNumber: 1)
    }
    if !self.styleRefs.isEmpty {
      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_RichTextElements.RichTextElementStyleRefs>.self, value: self.styleRefs, fieldNumber: 2)
    }
    if !self.styles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.styles, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElements, rhs: LarkNCExtensionPB_Entities_RichTextElements) -> Bool {
    if lhs.dictionary != rhs.dictionary {return false}
    if lhs.styleRefs != rhs.styleRefs {return false}
    if lhs.styles != rhs.styles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElements.RichTextStyle: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElements.protoMessageName + ".RichTextStyle"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularStringField(value: &self._value)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElements.RichTextStyle, rhs: LarkNCExtensionPB_Entities_RichTextElements.RichTextStyle) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichTextElements.RichTextElementStyleRefs: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_RichTextElements.protoMessageName + ".RichTextElementStyleRefs"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "style_ids"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt32Field(value: &self.styleIds)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if !self.styleIds.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.styleIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichTextElements.RichTextElementStyleRefs, rhs: LarkNCExtensionPB_Entities_RichTextElements.RichTextElementStyleRefs) -> Bool {
    if lhs.styleIds != rhs.styleIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_RichText: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RichText"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "element_ids"),
    2: .standard(proto: "inner_text"),
    3: .same(proto: "elements"),
    5: .standard(proto: "image_ids"),
    6: .standard(proto: "at_ids"),
    7: .standard(proto: "anchor_ids"),
    8: .standard(proto: "i18n_ids"),
    9: .standard(proto: "media_ids"),
    10: .standard(proto: "docs_ids"),
    11: .standard(proto: "interactive_ids"),
    12: .standard(proto: "mention_ids"),
    13: .same(proto: "version"),
  ]

  fileprivate class _StorageClass {
    var _elementIds: [String] = []
    var _innerText: String? = nil
    var _elements: LarkNCExtensionPB_Entities_RichTextElements? = nil
    var _imageIds: [String] = []
    var _atIds: [String] = []
    var _anchorIds: [String] = []
    var _i18NIds: [String] = []
    var _mediaIds: [String] = []
    var _docsIds: [String] = []
    var _interactiveIds: [String] = []
    var _mentionIds: [String] = []
    var _version: Int32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _elementIds = source._elementIds
      _innerText = source._innerText
      _elements = source._elements
      _imageIds = source._imageIds
      _atIds = source._atIds
      _anchorIds = source._anchorIds
      _i18NIds = source._i18NIds
      _mediaIds = source._mediaIds
      _docsIds = source._docsIds
      _interactiveIds = source._interactiveIds
      _mentionIds = source._mentionIds
      _version = source._version
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._innerText == nil {return false}
      if _storage._elements == nil {return false}
      if let v = _storage._elements, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedStringField(value: &_storage._elementIds)
        case 2: try decoder.decodeSingularStringField(value: &_storage._innerText)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._elements)
        case 5: try decoder.decodeRepeatedStringField(value: &_storage._imageIds)
        case 6: try decoder.decodeRepeatedStringField(value: &_storage._atIds)
        case 7: try decoder.decodeRepeatedStringField(value: &_storage._anchorIds)
        case 8: try decoder.decodeRepeatedStringField(value: &_storage._i18NIds)
        case 9: try decoder.decodeRepeatedStringField(value: &_storage._mediaIds)
        case 10: try decoder.decodeRepeatedStringField(value: &_storage._docsIds)
        case 11: try decoder.decodeRepeatedStringField(value: &_storage._interactiveIds)
        case 12: try decoder.decodeRepeatedStringField(value: &_storage._mentionIds)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._version)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._elementIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._elementIds, fieldNumber: 1)
      }
      if let v = _storage._innerText {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._elements {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._imageIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._imageIds, fieldNumber: 5)
      }
      if !_storage._atIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._atIds, fieldNumber: 6)
      }
      if !_storage._anchorIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._anchorIds, fieldNumber: 7)
      }
      if !_storage._i18NIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._i18NIds, fieldNumber: 8)
      }
      if !_storage._mediaIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._mediaIds, fieldNumber: 9)
      }
      if !_storage._docsIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._docsIds, fieldNumber: 10)
      }
      if !_storage._interactiveIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._interactiveIds, fieldNumber: 11)
      }
      if !_storage._mentionIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._mentionIds, fieldNumber: 12)
      }
      if let v = _storage._version {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_RichText, rhs: LarkNCExtensionPB_Entities_RichText) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._elementIds != rhs_storage._elementIds {return false}
        if _storage._innerText != rhs_storage._innerText {return false}
        if _storage._elements != rhs_storage._elements {return false}
        if _storage._imageIds != rhs_storage._imageIds {return false}
        if _storage._atIds != rhs_storage._atIds {return false}
        if _storage._anchorIds != rhs_storage._anchorIds {return false}
        if _storage._i18NIds != rhs_storage._i18NIds {return false}
        if _storage._mediaIds != rhs_storage._mediaIds {return false}
        if _storage._docsIds != rhs_storage._docsIds {return false}
        if _storage._interactiveIds != rhs_storage._interactiveIds {return false}
        if _storage._mentionIds != rhs_storage._mentionIds {return false}
        if _storage._version != rhs_storage._version {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_EmailSystemEvent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".EmailSystemEvent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "chatter_id"),
//    2: .same(proto: "to"),
//    3: .same(proto: "cc"),
//  ]
//
//  public var isInitialized: Bool {
//    if !LarkHTTP.Internal.areAllInitialized(self.to) {return false}
//    if !LarkHTTP.Internal.areAllInitialized(self.cc) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._chatterID)
//      case 2: try decoder.decodeRepeatedMessageField(value: &self.to)
//      case 3: try decoder.decodeRepeatedMessageField(value: &self.cc)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._chatterID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if !self.to.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.to, fieldNumber: 2)
//    }
//    if !self.cc.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.cc, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_EmailSystemEvent, rhs: LarkNCExtensionPB_Entities_EmailSystemEvent) -> Bool {
//    if lhs._chatterID != rhs._chatterID {return false}
//    if lhs.to != rhs.to {return false}
//    if lhs.cc != rhs.cc {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ShareGroupChatContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ShareGroupChatContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "chat"),
//    2: .standard(proto: "join_token"),
//    3: .standard(proto: "expire_time"),
//    4: .standard(proto: "chat_id"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _chat: LarkNCExtensionPB_Entities_Chat? = nil
//    var _joinToken: String? = nil
//    var _expireTime: Int64? = nil
//    var _chatID: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _chat = source._chat
//      _joinToken = source._joinToken
//      _expireTime = source._expireTime
//      _chatID = source._chatID
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._chat)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._joinToken)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._expireTime)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._chatID)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._chat {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._joinToken {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._expireTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._chatID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ShareGroupChatContent, rhs: LarkNCExtensionPB_Entities_ShareGroupChatContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._chat != rhs_storage._chat {return false}
//        if _storage._joinToken != rhs_storage._joinToken {return false}
//        if _storage._expireTime != rhs_storage._expireTime {return false}
//        if _storage._chatID != rhs_storage._chatID {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ShareUserCardContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ShareUserCardContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "user_id"),
//    2: .standard(proto: "avatar_image"),
//    3: .same(proto: "name"),
//    4: .standard(proto: "en_us_name"),
//    5: .standard(proto: "international_name"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _userID: String? = nil
//    var _avatarImage: LarkNCExtensionPB_Entities_Image? = nil
//    var _name: String? = nil
//    var _enUsName: String? = nil
//    var _internationalName: Dictionary<String,String> = [:]
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _userID = source._userID
//      _avatarImage = source._avatarImage
//      _name = source._name
//      _enUsName = source._enUsName
//      _internationalName = source._internationalName
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._userID)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._avatarImage)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._enUsName)
//        case 5: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._internationalName)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._userID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._avatarImage {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._enUsName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if !_storage._internationalName.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._internationalName, fieldNumber: 5)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ShareUserCardContent, rhs: LarkNCExtensionPB_Entities_ShareUserCardContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._userID != rhs_storage._userID {return false}
//        if _storage._avatarImage != rhs_storage._avatarImage {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._enUsName != rhs_storage._enUsName {return false}
//        if _storage._internationalName != rhs_storage._internationalName {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_StickerContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".StickerContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    4: .same(proto: "key"),
//    5: .same(proto: "width"),
//    6: .same(proto: "height"),
//    7: .same(proto: "image"),
//    8: .standard(proto: "fs_unit"),
//    9: .standard(proto: "sticker_set_id"),
//    10: .standard(proto: "sticker_id"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _key: String? = nil
//    var _width: Int32? = nil
//    var _height: Int32? = nil
//    var _image: LarkNCExtensionPB_Entities_Image? = nil
//    var _fsUnit: String? = nil
//    var _stickerSetID: String? = nil
//    var _stickerID: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _key = source._key
//      _width = source._width
//      _height = source._height
//      _image = source._image
//      _fsUnit = source._fsUnit
//      _stickerSetID = source._stickerSetID
//      _stickerID = source._stickerID
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 4: try decoder.decodeSingularStringField(value: &_storage._key)
//        case 5: try decoder.decodeSingularInt32Field(value: &_storage._width)
//        case 6: try decoder.decodeSingularInt32Field(value: &_storage._height)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._image)
//        case 8: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
//        case 9: try decoder.decodeSingularStringField(value: &_storage._stickerSetID)
//        case 10: try decoder.decodeSingularStringField(value: &_storage._stickerID)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._key {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._width {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._height {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._image {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._fsUnit {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._stickerSetID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._stickerID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_StickerContent, rhs: LarkNCExtensionPB_Entities_StickerContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._key != rhs_storage._key {return false}
//        if _storage._width != rhs_storage._width {return false}
//        if _storage._height != rhs_storage._height {return false}
//        if _storage._image != rhs_storage._image {return false}
//        if _storage._fsUnit != rhs_storage._fsUnit {return false}
//        if _storage._stickerSetID != rhs_storage._stickerSetID {return false}
//        if _storage._stickerID != rhs_storage._stickerID {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MergeForwardContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MergeForwardContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "messages"),
//    2: .standard(proto: "chat_type"),
//    3: .standard(proto: "group_chat_name"),
//    4: .standard(proto: "p2p_creator_name"),
//    5: .standard(proto: "p2p_partner_name"),
//    14: .standard(proto: "p2p_creator_user_id"),
//    15: .standard(proto: "p2p_partner_user_id"),
//    9: .standard(proto: "creator_i18n_names"),
//    10: .standard(proto: "partner_i18n_names"),
//    6: .same(proto: "chatters"),
//    11: .standard(proto: "reaction_snapshots"),
//    12: .same(proto: "thread"),
//    13: .standard(proto: "i18n_thread_title"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _messages: [LarkNCExtensionPB_Entities_Message] = []
//    var _chatType: LarkNCExtensionPB_Entities_Chat.TypeEnum? = nil
//    var _groupChatName: String? = nil
//    var _p2PCreatorName: String? = nil
//    var _p2PPartnerName: String? = nil
//    var _p2PCreatorUserID: Int64? = nil
//    var _p2PPartnerUserID: Int64? = nil
//    var _creatorI18NNames: Dictionary<String,String> = [:]
//    var _partnerI18NNames: Dictionary<String,String> = [:]
//    var _chatters: Dictionary<String,LarkNCExtensionPB_Entities_MergeForwardContent.ChatterInfo> = [:]
//    var _reactionSnapshots: Dictionary<String,LarkNCExtensionPB_Entities_MessageReaction> = [:]
//    var _thread: LarkNCExtensionPB_Entities_Thread? = nil
//    var _i18NThreadTitle: Dictionary<String,String> = [:]
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _messages = source._messages
//      _chatType = source._chatType
//      _groupChatName = source._groupChatName
//      _p2PCreatorName = source._p2PCreatorName
//      _p2PPartnerName = source._p2PPartnerName
//      _p2PCreatorUserID = source._p2PCreatorUserID
//      _p2PPartnerUserID = source._p2PPartnerUserID
//      _creatorI18NNames = source._creatorI18NNames
//      _partnerI18NNames = source._partnerI18NNames
//      _chatters = source._chatters
//      _reactionSnapshots = source._reactionSnapshots
//      _thread = source._thread
//      _i18NThreadTitle = source._i18NThreadTitle
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if !LarkHTTP.Internal.areAllInitialized(_storage._messages) {return false}
//      if let v = _storage._thread, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._messages)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._chatType)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._groupChatName)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._p2PCreatorName)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._p2PPartnerName)
//        case 6: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_MergeForwardContent.ChatterInfo>.self, value: &_storage._chatters)
//        case 9: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._creatorI18NNames)
//        case 10: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._partnerI18NNames)
//        case 11: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_MessageReaction>.self, value: &_storage._reactionSnapshots)
//        case 12: try decoder.decodeSingularMessageField(value: &_storage._thread)
//        case 13: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._i18NThreadTitle)
//        case 14: try decoder.decodeSingularInt64Field(value: &_storage._p2PCreatorUserID)
//        case 15: try decoder.decodeSingularInt64Field(value: &_storage._p2PPartnerUserID)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if !_storage._messages.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._messages, fieldNumber: 1)
//      }
//      if let v = _storage._chatType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._groupChatName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._p2PCreatorName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._p2PPartnerName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if !_storage._chatters.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_MergeForwardContent.ChatterInfo>.self, value: _storage._chatters, fieldNumber: 6)
//      }
//      if !_storage._creatorI18NNames.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._creatorI18NNames, fieldNumber: 9)
//      }
//      if !_storage._partnerI18NNames.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._partnerI18NNames, fieldNumber: 10)
//      }
//      if !_storage._reactionSnapshots.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_MessageReaction>.self, value: _storage._reactionSnapshots, fieldNumber: 11)
//      }
//      if let v = _storage._thread {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
//      }
//      if !_storage._i18NThreadTitle.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._i18NThreadTitle, fieldNumber: 13)
//      }
//      if let v = _storage._p2PCreatorUserID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._p2PPartnerUserID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 15)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MergeForwardContent, rhs: LarkNCExtensionPB_Entities_MergeForwardContent) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._messages != rhs_storage._messages {return false}
//        if _storage._chatType != rhs_storage._chatType {return false}
//        if _storage._groupChatName != rhs_storage._groupChatName {return false}
//        if _storage._p2PCreatorName != rhs_storage._p2PCreatorName {return false}
//        if _storage._p2PPartnerName != rhs_storage._p2PPartnerName {return false}
//        if _storage._p2PCreatorUserID != rhs_storage._p2PCreatorUserID {return false}
//        if _storage._p2PPartnerUserID != rhs_storage._p2PPartnerUserID {return false}
//        if _storage._creatorI18NNames != rhs_storage._creatorI18NNames {return false}
//        if _storage._partnerI18NNames != rhs_storage._partnerI18NNames {return false}
//        if _storage._chatters != rhs_storage._chatters {return false}
//        if _storage._reactionSnapshots != rhs_storage._reactionSnapshots {return false}
//        if _storage._thread != rhs_storage._thread {return false}
//        if _storage._i18NThreadTitle != rhs_storage._i18NThreadTitle {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MergeForwardContent.ChatterInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_MergeForwardContent.protoMessageName + ".ChatterInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "name"),
//    3: .same(proto: "avatar"),
//    4: .same(proto: "type"),
//    5: .standard(proto: "avatar_entity"),
//    6: .standard(proto: "is_anonymous"),
//    7: .same(proto: "i18nName"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _name: String? = nil
//    var _avatar: LarkNCExtensionPB_Entities_ImageSet? = nil
//    var _type: LarkNCExtensionPB_Entities_ChatterType? = nil
//    var _avatarEntity: LarkNCExtensionPB_Entities_Image? = nil
//    var _isAnonymous: Bool? = nil
//    var _i18NName: Dictionary<String,String> = [:]
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _name = source._name
//      _avatar = source._avatar
//      _type = source._type
//      _avatarEntity = source._avatarEntity
//      _isAnonymous = source._isAnonymous
//      _i18NName = source._i18NName
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 4: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._avatarEntity)
//        case 6: try decoder.decodeSingularBoolField(value: &_storage._isAnonymous)
//        case 7: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._i18NName)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._avatarEntity {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._isAnonymous {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//      }
//      if !_storage._i18NName.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._i18NName, fieldNumber: 7)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MergeForwardContent.ChatterInfo, rhs: LarkNCExtensionPB_Entities_MergeForwardContent.ChatterInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._avatarEntity != rhs_storage._avatarEntity {return false}
//        if _storage._isAnonymous != rhs_storage._isAnonymous {return false}
//        if _storage._i18NName != rhs_storage._i18NName {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_I18nInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".I18nInfo"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "is_i18n_message"),
    2: .same(proto: "locale"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._isI18NMessage)
      case 2: try decoder.decodeSingularStringField(value: &self._locale)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._isI18NMessage {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._locale {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_I18nInfo, rhs: LarkNCExtensionPB_Entities_I18nInfo) -> Bool {
    if lhs._isI18NMessage != rhs._isI18NMessage {return false}
    if lhs._locale != rhs._locale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_ExternalSearch: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ExternalSearch"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "title"),
//    3: .standard(proto: "icon_url"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._id == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularStringField(value: &self._title)
//      case 3: try decoder.decodeSingularStringField(value: &self._iconURL)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._title {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._iconURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ExternalSearch, rhs: LarkNCExtensionPB_Entities_ExternalSearch) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._title != rhs._title {return false}
//    if lhs._iconURL != rhs._iconURL {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".AppConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "message_config"),
//    2: .standard(proto: "chat_config"),
//    3: .standard(proto: "voice_call_config"),
//    4: .standard(proto: "url_config"),
//    5: .same(proto: "resource"),
//    6: .standard(proto: "billing_package"),
//    7: .standard(proto: "url_regex"),
//    8: .same(proto: "zendesk"),
//    9: .standard(proto: "android_app_stores"),
//    10: .standard(proto: "guide_to_rate_delay_hours"),
//    11: .standard(proto: "search_config"),
//    12: .standard(proto: "banner_config"),
//    13: .standard(proto: "crypto_chat_state"),
//    14: .standard(proto: "lan_trans"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _messageConfig: LarkNCExtensionPB_Entities_AppConfig.MessageConfig? = nil
//    var _chatConfig: LarkNCExtensionPB_Entities_AppConfig.ChatConfig? = nil
//    var _voiceCallConfig: LarkNCExtensionPB_Entities_AppConfig.VoiceCallConfig? = nil
//    var _urlConfig: LarkNCExtensionPB_Entities_AppConfig.URLConfig? = nil
//    var _resource: LarkNCExtensionPB_Entities_AppConfig.Resource? = nil
//    var _billingPackage: LarkNCExtensionPB_Entities_AppConfig.BillingPackageConfig? = nil
//    var _urlRegex: LarkNCExtensionPB_Entities_AppConfig.URLRegex? = nil
//    var _zendesk: LarkNCExtensionPB_Entities_AppConfig.Zendesk? = nil
//    var _androidAppStores: [String] = []
//    var _guideToRateDelayHours: Int32? = nil
//    var _searchConfig: LarkNCExtensionPB_Entities_AppConfig.SearchConfig? = nil
//    var _bannerConfig: LarkNCExtensionPB_Entities_AppConfig.BannerConfig? = nil
//    var _cryptoChatState: LarkNCExtensionPB_Entities_AppConfig.CryptoChatState? = nil
//    var _lanTrans: LarkNCExtensionPB_Entities_AppConfig.LANTrans? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _messageConfig = source._messageConfig
//      _chatConfig = source._chatConfig
//      _voiceCallConfig = source._voiceCallConfig
//      _urlConfig = source._urlConfig
//      _resource = source._resource
//      _billingPackage = source._billingPackage
//      _urlRegex = source._urlRegex
//      _zendesk = source._zendesk
//      _androidAppStores = source._androidAppStores
//      _guideToRateDelayHours = source._guideToRateDelayHours
//      _searchConfig = source._searchConfig
//      _bannerConfig = source._bannerConfig
//      _cryptoChatState = source._cryptoChatState
//      _lanTrans = source._lanTrans
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._searchConfig, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._messageConfig)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._chatConfig)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._voiceCallConfig)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._urlConfig)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._resource)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._billingPackage)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._urlRegex)
//        case 8: try decoder.decodeSingularMessageField(value: &_storage._zendesk)
//        case 9: try decoder.decodeRepeatedStringField(value: &_storage._androidAppStores)
//        case 10: try decoder.decodeSingularInt32Field(value: &_storage._guideToRateDelayHours)
//        case 11: try decoder.decodeSingularMessageField(value: &_storage._searchConfig)
//        case 12: try decoder.decodeSingularMessageField(value: &_storage._bannerConfig)
//        case 13: try decoder.decodeSingularEnumField(value: &_storage._cryptoChatState)
//        case 14: try decoder.decodeSingularMessageField(value: &_storage._lanTrans)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._messageConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._chatConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._voiceCallConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._urlConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._resource {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._billingPackage {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._urlRegex {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._zendesk {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
//      }
//      if !_storage._androidAppStores.isEmpty {
//        try visitor.visitRepeatedStringField(value: _storage._androidAppStores, fieldNumber: 9)
//      }
//      if let v = _storage._guideToRateDelayHours {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._searchConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._bannerConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._cryptoChatState {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._lanTrans {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig, rhs: LarkNCExtensionPB_Entities_AppConfig) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._messageConfig != rhs_storage._messageConfig {return false}
//        if _storage._chatConfig != rhs_storage._chatConfig {return false}
//        if _storage._voiceCallConfig != rhs_storage._voiceCallConfig {return false}
//        if _storage._urlConfig != rhs_storage._urlConfig {return false}
//        if _storage._resource != rhs_storage._resource {return false}
//        if _storage._billingPackage != rhs_storage._billingPackage {return false}
//        if _storage._urlRegex != rhs_storage._urlRegex {return false}
//        if _storage._zendesk != rhs_storage._zendesk {return false}
//        if _storage._androidAppStores != rhs_storage._androidAppStores {return false}
//        if _storage._guideToRateDelayHours != rhs_storage._guideToRateDelayHours {return false}
//        if _storage._searchConfig != rhs_storage._searchConfig {return false}
//        if _storage._bannerConfig != rhs_storage._bannerConfig {return false}
//        if _storage._cryptoChatState != rhs_storage._cryptoChatState {return false}
//        if _storage._lanTrans != rhs_storage._lanTrans {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfig.CryptoChatState: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "ALLOW"),
//    2: .same(proto: "BLOCK"),
//    3: .same(proto: "DEFAULT"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_AppConfig.MessageConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfig.protoMessageName + ".MessageConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "max_recall_time_limit"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._maxRecallTimeLimit)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._maxRecallTimeLimit {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig.MessageConfig, rhs: LarkNCExtensionPB_Entities_AppConfig.MessageConfig) -> Bool {
//    if lhs._maxRecallTimeLimit != rhs._maxRecallTimeLimit {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfig.ChatConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfig.protoMessageName + ".ChatConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "max_member_count"),
//    2: .standard(proto: "post_permission"),
//    3: .standard(proto: "withdraw_chatter_expiration_by_hour"),
//    4: .standard(proto: "max_origin_group_chat_user_count_4_create_external_chat"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _maxMemberCount: Int32? = nil
//    var _postPermission: LarkNCExtensionPB_Entities_AppConfig.ChatConfig.ChatPostPermission? = nil
//    var _withdrawChatterExpirationByHour: Int32? = nil
//    var _maxOriginGroupChatUserCount4CreateExternalChat: Int32? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _maxMemberCount = source._maxMemberCount
//      _postPermission = source._postPermission
//      _withdrawChatterExpirationByHour = source._withdrawChatterExpirationByHour
//      _maxOriginGroupChatUserCount4CreateExternalChat = source._maxOriginGroupChatUserCount4CreateExternalChat
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt32Field(value: &_storage._maxMemberCount)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._postPermission)
//        case 3: try decoder.decodeSingularInt32Field(value: &_storage._withdrawChatterExpirationByHour)
//        case 4: try decoder.decodeSingularInt32Field(value: &_storage._maxOriginGroupChatUserCount4CreateExternalChat)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._maxMemberCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._postPermission {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._withdrawChatterExpirationByHour {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._maxOriginGroupChatUserCount4CreateExternalChat {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig.ChatConfig, rhs: LarkNCExtensionPB_Entities_AppConfig.ChatConfig) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._maxMemberCount != rhs_storage._maxMemberCount {return false}
//        if _storage._postPermission != rhs_storage._postPermission {return false}
//        if _storage._withdrawChatterExpirationByHour != rhs_storage._withdrawChatterExpirationByHour {return false}
//        if _storage._maxOriginGroupChatUserCount4CreateExternalChat != rhs_storage._maxOriginGroupChatUserCount4CreateExternalChat {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfig.ChatConfig.ChatPostPermission: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfig.ChatConfig.protoMessageName + ".ChatPostPermission"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "open_to_thread"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._openToThread)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._openToThread {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig.ChatConfig.ChatPostPermission, rhs: LarkNCExtensionPB_Entities_AppConfig.ChatConfig.ChatPostPermission) -> Bool {
//    if lhs._openToThread != rhs._openToThread {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfig.VoiceCallConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfig.protoMessageName + ".VoiceCallConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    2: .standard(proto: "heartbeat_cycle"),
//    3: .standard(proto: "heartbeat_expired_time"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 2: try decoder.decodeSingularInt32Field(value: &self._heartbeatCycle)
//      case 3: try decoder.decodeSingularInt32Field(value: &self._heartbeatExpiredTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._heartbeatCycle {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._heartbeatExpiredTime {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig.VoiceCallConfig, rhs: LarkNCExtensionPB_Entities_AppConfig.VoiceCallConfig) -> Bool {
//    if lhs._heartbeatCycle != rhs._heartbeatCycle {return false}
//    if lhs._heartbeatExpiredTime != rhs._heartbeatExpiredTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfig.BillingPackageConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfig.protoMessageName + ".BillingPackageConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "chat_number_limit"),
//    2: .standard(proto: "chat_bot_limit"),
//    3: .standard(proto: "app_number_limit"),
//    20: .standard(proto: "buzz_limit"),
//    30: .standard(proto: "has_secret_chat"),
//    100: .standard(proto: "doc_number_limit"),
//    200: .standard(proto: "videochat_participant_limit"),
//    201: .standard(proto: "videochat_duration_limit"),
//    300: .standard(proto: "is_open_auto_translation"),
//    400: .standard(proto: "is_lark_hongbao_enable"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._chatNumberLimit)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._chatBotLimit)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._appNumberLimit)
//      case 20: try decoder.decodeSingularInt64Field(value: &self._buzzLimit)
//      case 30: try decoder.decodeSingularBoolField(value: &self._hasSecretChat_p)
//      case 100: try decoder.decodeSingularInt64Field(value: &self._docNumberLimit)
//      case 200: try decoder.decodeSingularInt64Field(value: &self._videochatParticipantLimit)
//      case 201: try decoder.decodeSingularInt64Field(value: &self._videochatDurationLimit)
//      case 300: try decoder.decodeSingularBoolField(value: &self._isOpenAutoTranslation)
//      case 400: try decoder.decodeSingularBoolField(value: &self._isLarkHongbaoEnable)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._chatNumberLimit {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._chatBotLimit {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._appNumberLimit {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._buzzLimit {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 20)
//    }
//    if let v = self._hasSecretChat_p {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 30)
//    }
//    if let v = self._docNumberLimit {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 100)
//    }
//    if let v = self._videochatParticipantLimit {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 200)
//    }
//    if let v = self._videochatDurationLimit {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 201)
//    }
//    if let v = self._isOpenAutoTranslation {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 300)
//    }
//    if let v = self._isLarkHongbaoEnable {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 400)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig.BillingPackageConfig, rhs: LarkNCExtensionPB_Entities_AppConfig.BillingPackageConfig) -> Bool {
//    if lhs._chatNumberLimit != rhs._chatNumberLimit {return false}
//    if lhs._chatBotLimit != rhs._chatBotLimit {return false}
//    if lhs._appNumberLimit != rhs._appNumberLimit {return false}
//    if lhs._buzzLimit != rhs._buzzLimit {return false}
//    if lhs._hasSecretChat_p != rhs._hasSecretChat_p {return false}
//    if lhs._docNumberLimit != rhs._docNumberLimit {return false}
//    if lhs._videochatParticipantLimit != rhs._videochatParticipantLimit {return false}
//    if lhs._videochatDurationLimit != rhs._videochatDurationLimit {return false}
//    if lhs._isOpenAutoTranslation != rhs._isOpenAutoTranslation {return false}
//    if lhs._isLarkHongbaoEnable != rhs._isLarkHongbaoEnable {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfig.URLConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfig.protoMessageName + ".URLConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "domain"),
//    2: .standard(proto: "doc_domains"),
//    3: .standard(proto: "create_doc_addr"),
//    4: .standard(proto: "url_preview_time_wait"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _domain: LarkNCExtensionPB_Entities_AppConfig.URLConfig.Domain? = nil
//    var _docDomains: [LarkNCExtensionPB_Entities_AppConfig.URLConfig.Domain] = []
//    var _createDocAddr: String? = nil
//    var _urlPreviewTimeWait: Int32? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _domain = source._domain
//      _docDomains = source._docDomains
//      _createDocAddr = source._createDocAddr
//      _urlPreviewTimeWait = source._urlPreviewTimeWait
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._domain)
//        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._docDomains)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._createDocAddr)
//        case 4: try decoder.decodeSingularInt32Field(value: &_storage._urlPreviewTimeWait)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._domain {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if !_storage._docDomains.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._docDomains, fieldNumber: 2)
//      }
//      if let v = _storage._createDocAddr {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._urlPreviewTimeWait {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig.URLConfig, rhs: LarkNCExtensionPB_Entities_AppConfig.URLConfig) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._domain != rhs_storage._domain {return false}
//        if _storage._docDomains != rhs_storage._docDomains {return false}
//        if _storage._createDocAddr != rhs_storage._createDocAddr {return false}
//        if _storage._urlPreviewTimeWait != rhs_storage._urlPreviewTimeWait {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfig.URLConfig.Domain: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfig.URLConfig.protoMessageName + ".Domain"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "domain"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._domain)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._domain {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig.URLConfig.Domain, rhs: LarkNCExtensionPB_Entities_AppConfig.URLConfig.Domain) -> Bool {
//    if lhs._domain != rhs._domain {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfig.Resource: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfig.protoMessageName + ".Resource"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "addrs"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.addrs)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.addrs.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.addrs, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig.Resource, rhs: LarkNCExtensionPB_Entities_AppConfig.Resource) -> Bool {
//    if lhs.addrs != rhs.addrs {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfig.URLRegex: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfig.protoMessageName + ".URLRegex"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "regexes"),
//    2: .standard(proto: "time_out"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufInt32,LarkHTTP.ProtobufString>.self, value: &self.regexes)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._timeOut)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.regexes.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufInt32,LarkHTTP.ProtobufString>.self, value: self.regexes, fieldNumber: 1)
//    }
//    if let v = self._timeOut {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig.URLRegex, rhs: LarkNCExtensionPB_Entities_AppConfig.URLRegex) -> Bool {
//    if lhs.regexes != rhs.regexes {return false}
//    if lhs._timeOut != rhs._timeOut {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfig.SearchConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfig.protoMessageName + ".SearchConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    3: .standard(proto: "external_searches"),
//  ]
//
//  public var isInitialized: Bool {
//    if !LarkHTTP.Internal.areAllInitialized(self.externalSearches) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 3: try decoder.decodeRepeatedMessageField(value: &self.externalSearches)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.externalSearches.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.externalSearches, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig.SearchConfig, rhs: LarkNCExtensionPB_Entities_AppConfig.SearchConfig) -> Bool {
//    if lhs.externalSearches != rhs.externalSearches {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfig.Zendesk: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfig.protoMessageName + ".Zendesk"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "web_form_url"),
//    2: .standard(proto: "oncall_chat"),
//    100: .same(proto: "pattern"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1:
//        if self.entry != nil {try decoder.handleConflictingOneOf()}
//        var v: String?
//        try decoder.decodeSingularStringField(value: &v)
//        if let v = v {self.entry = .webFormURL(v)}
//      case 2:
//        if self.entry != nil {try decoder.handleConflictingOneOf()}
//        var v: Bool?
//        try decoder.decodeSingularBoolField(value: &v)
//        if let v = v {self.entry = .oncallChat(v)}
//      case 100: try decoder.decodeSingularStringField(value: &self._pattern)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    switch self.entry {
//    case .webFormURL(let v)?:
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    case .oncallChat(let v)?:
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    case nil: break
//    }
//    if let v = self._pattern {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 100)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig.Zendesk, rhs: LarkNCExtensionPB_Entities_AppConfig.Zendesk) -> Bool {
//    if lhs.entry != rhs.entry {return false}
//    if lhs._pattern != rhs._pattern {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfig.BannerConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfig.protoMessageName + ".BannerConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "notification_refresh_time"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt32Field(value: &self._notificationRefreshTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._notificationRefreshTime {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig.BannerConfig, rhs: LarkNCExtensionPB_Entities_AppConfig.BannerConfig) -> Bool {
//    if lhs._notificationRefreshTime != rhs._notificationRefreshTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfig.LANTrans: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfig.protoMessageName + ".LANTrans"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "lan_trans_min_size_mb"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt32Field(value: &self._lanTransMinSizeMb)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._lanTransMinSizeMb {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfig.LANTrans, rhs: LarkNCExtensionPB_Entities_AppConfig.LANTrans) -> Bool {
//    if lhs._lanTransMinSizeMb != rhs._lanTransMinSizeMb {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfigV2: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".AppConfigV2"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "version"),
//    2: .standard(proto: "update_time"),
//    100: .same(proto: "section"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _version: Int64? = nil
//    var _updateTime: Int64? = nil
//    var _section: LarkNCExtensionPB_Entities_AppConfigV2.Section? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _version = source._version
//      _updateTime = source._updateTime
//      _section = source._section
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._version == nil {return false}
//      if let v = _storage._section, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt64Field(value: &_storage._version)
//        case 2: try decoder.decodeSingularInt64Field(value: &_storage._updateTime)
//        case 100: try decoder.decodeSingularMessageField(value: &_storage._section)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._version {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._updateTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._section {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfigV2, rhs: LarkNCExtensionPB_Entities_AppConfigV2) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._version != rhs_storage._version {return false}
//        if _storage._updateTime != rhs_storage._updateTime {return false}
//        if _storage._section != rhs_storage._section {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfigV2.Source: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "DEFAULT"),
//    2: .same(proto: "LEAN_MODE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_AppConfigV2.FeatureConf: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfigV2.protoMessageName + ".FeatureConf"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "isOn"),
//    2: .same(proto: "traits"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._isOn == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._isOn)
//      case 2: try decoder.decodeSingularStringField(value: &self._traits)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._isOn {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._traits {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfigV2.FeatureConf, rhs: LarkNCExtensionPB_Entities_AppConfigV2.FeatureConf) -> Bool {
//    if lhs._isOn != rhs._isOn {return false}
//    if lhs._traits != rhs._traits {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppConfigV2.Section: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AppConfigV2.protoMessageName + ".Section"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    2: .same(proto: "features"),
//  ]
//
//  public var isInitialized: Bool {
//    if !LarkHTTP.Internal.areAllInitialized(self.features) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_AppConfigV2.FeatureConf>.self, value: &self.features)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.features.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_AppConfigV2.FeatureConf>.self, value: self.features, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppConfigV2.Section, rhs: LarkNCExtensionPB_Entities_AppConfigV2.Section) -> Bool {
//    if lhs.features != rhs.features {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_NotificationSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".NotificationSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "all"),
//    2: .standard(proto: "specific_messages"),
//    3: .standard(proto: "no_notificaion"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _method: LarkNCExtensionPB_Entities_NotificationSetting.OneOf_Method?
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _method = source._method
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1:
//          if _storage._method != nil {try decoder.handleConflictingOneOf()}
//          var v: Bool?
//          try decoder.decodeSingularBoolField(value: &v)
//          if let v = v {_storage._method = .all(v)}
//        case 2:
//          var v: LarkNCExtensionPB_Entities_NotificationSetting.SpecificNotification?
//          if let current = _storage._method {
//            try decoder.handleConflictingOneOf()
//            if case .specificMessages(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._method = .specificMessages(v)}
//        case 3:
//          if _storage._method != nil {try decoder.handleConflictingOneOf()}
//          var v: Bool?
//          try decoder.decodeSingularBoolField(value: &v)
//          if let v = v {_storage._method = .noNotificaion(v)}
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      switch _storage._method {
//      case .all(let v)?:
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//      case .specificMessages(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      case .noNotificaion(let v)?:
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//      case nil: break
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_NotificationSetting, rhs: LarkNCExtensionPB_Entities_NotificationSetting) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._method != rhs_storage._method {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_NotificationSetting.SpecificNotification: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_NotificationSetting.protoMessageName + ".SpecificNotification"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "mention"),
//    2: .same(proto: "buzz"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._mention)
//      case 2: try decoder.decodeSingularBoolField(value: &self._buzz)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._mention {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._buzz {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_NotificationSetting.SpecificNotification, rhs: LarkNCExtensionPB_Entities_NotificationSetting.SpecificNotification) -> Bool {
//    if lhs._mention != rhs._mention {return false}
//    if lhs._buzz != rhs._buzz {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MessengerNotificationSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MessengerNotificationSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "switch_state"),
//    2: .standard(proto: "buzz_open"),
//    3: .standard(proto: "reaction_open"),
//    4: .standard(proto: "mention_open"),
//    5: .standard(proto: "p2p_chat_open"),
//    6: .standard(proto: "group_chat_open"),
//    7: .standard(proto: "user_p2p_chat_open"),
//    8: .standard(proto: "mention_all_open"),
//    9: .standard(proto: "special_focus_open"),
//    10: .standard(proto: "special_focus_setting"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _switchState: LarkNCExtensionPB_Entities_MessengerNotificationSetting.SwithState? = nil
//    var _buzzOpen: Bool? = nil
//    var _reactionOpen: Bool? = nil
//    var _mentionOpen: Bool? = nil
//    var _p2PChatOpen: Bool? = nil
//    var _groupChatOpen: Bool? = nil
//    var _userP2PChatOpen: Bool? = nil
//    var _mentionAllOpen: Bool? = nil
//    var _specialFocusOpen: Bool? = nil
//    var _specialFocusSetting: LarkNCExtensionPB_Entities_MessengerNotificationSetting.SpecialFocus? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _switchState = source._switchState
//      _buzzOpen = source._buzzOpen
//      _reactionOpen = source._reactionOpen
//      _mentionOpen = source._mentionOpen
//      _p2PChatOpen = source._p2PChatOpen
//      _groupChatOpen = source._groupChatOpen
//      _userP2PChatOpen = source._userP2PChatOpen
//      _mentionAllOpen = source._mentionAllOpen
//      _specialFocusOpen = source._specialFocusOpen
//      _specialFocusSetting = source._specialFocusSetting
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._switchState == nil {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._switchState)
//        case 2: try decoder.decodeSingularBoolField(value: &_storage._buzzOpen)
//        case 3: try decoder.decodeSingularBoolField(value: &_storage._reactionOpen)
//        case 4: try decoder.decodeSingularBoolField(value: &_storage._mentionOpen)
//        case 5: try decoder.decodeSingularBoolField(value: &_storage._p2PChatOpen)
//        case 6: try decoder.decodeSingularBoolField(value: &_storage._groupChatOpen)
//        case 7: try decoder.decodeSingularBoolField(value: &_storage._userP2PChatOpen)
//        case 8: try decoder.decodeSingularBoolField(value: &_storage._mentionAllOpen)
//        case 9: try decoder.decodeSingularBoolField(value: &_storage._specialFocusOpen)
//        case 10: try decoder.decodeSingularMessageField(value: &_storage._specialFocusSetting)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._switchState {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._buzzOpen {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._reactionOpen {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._mentionOpen {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._p2PChatOpen {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._groupChatOpen {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._userP2PChatOpen {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._mentionAllOpen {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._specialFocusOpen {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._specialFocusSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MessengerNotificationSetting, rhs: LarkNCExtensionPB_Entities_MessengerNotificationSetting) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._switchState != rhs_storage._switchState {return false}
//        if _storage._buzzOpen != rhs_storage._buzzOpen {return false}
//        if _storage._reactionOpen != rhs_storage._reactionOpen {return false}
//        if _storage._mentionOpen != rhs_storage._mentionOpen {return false}
//        if _storage._p2PChatOpen != rhs_storage._p2PChatOpen {return false}
//        if _storage._groupChatOpen != rhs_storage._groupChatOpen {return false}
//        if _storage._userP2PChatOpen != rhs_storage._userP2PChatOpen {return false}
//        if _storage._mentionAllOpen != rhs_storage._mentionAllOpen {return false}
//        if _storage._specialFocusOpen != rhs_storage._specialFocusOpen {return false}
//        if _storage._specialFocusSetting != rhs_storage._specialFocusSetting {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MessengerNotificationSetting.SwithState: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_STATE"),
//    1: .same(proto: "CLOSED"),
//    2: .same(proto: "HALF_OPEN"),
//    3: .same(proto: "OPEN"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_MessengerNotificationSetting.SpecialFocus: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_MessengerNotificationSetting.protoMessageName + ".SpecialFocus"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "notice_in_mute_chat"),
//    2: .standard(proto: "notice_in_mute_mode"),
//    3: .standard(proto: "notice_in_chat_box"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._noticeInMuteChat)
//      case 2: try decoder.decodeSingularBoolField(value: &self._noticeInMuteMode)
//      case 3: try decoder.decodeSingularBoolField(value: &self._noticeInChatBox)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._noticeInMuteChat {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._noticeInMuteMode {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    if let v = self._noticeInChatBox {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MessengerNotificationSetting.SpecialFocus, rhs: LarkNCExtensionPB_Entities_MessengerNotificationSetting.SpecialFocus) -> Bool {
//    if lhs._noticeInMuteChat != rhs._noticeInMuteChat {return false}
//    if lhs._noticeInMuteMode != rhs._noticeInMuteMode {return false}
//    if lhs._noticeInChatBox != rhs._noticeInChatBox {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UserNotificationSettingV3: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UserNotificationSettingV3"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "common_notification_setting"),
//    2: .standard(proto: "special_focus_setting"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _commonNotificationSetting: LarkNCExtensionPB_Entities_UserNotificationSettingV3.CommonNotificationSetting? = nil
//    var _specialFocusSetting: LarkNCExtensionPB_Entities_MessengerNotificationSetting.SpecialFocus? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _commonNotificationSetting = source._commonNotificationSetting
//      _specialFocusSetting = source._specialFocusSetting
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._commonNotificationSetting)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._specialFocusSetting)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._commonNotificationSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._specialFocusSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserNotificationSettingV3, rhs: LarkNCExtensionPB_Entities_UserNotificationSettingV3) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._commonNotificationSetting != rhs_storage._commonNotificationSetting {return false}
//        if _storage._specialFocusSetting != rhs_storage._specialFocusSetting {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UserNotificationSettingV3.CommonNotificationSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_UserNotificationSettingV3.protoMessageName + ".CommonNotificationSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    9: .standard(proto: "special_focus_open"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 9: try decoder.decodeSingularBoolField(value: &self._specialFocusOpen)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._specialFocusOpen {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserNotificationSettingV3.CommonNotificationSetting, rhs: LarkNCExtensionPB_Entities_UserNotificationSettingV3.CommonNotificationSetting) -> Bool {
//    if lhs._specialFocusOpen != rhs._specialFocusOpen {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DriveNotificationSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".DriveNotificationSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "notify_open"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._notifyOpen)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._notifyOpen {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DriveNotificationSetting, rhs: LarkNCExtensionPB_Entities_DriveNotificationSetting) -> Bool {
//    if lhs._notifyOpen != rhs._notifyOpen {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_NotificationSettingV2: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".NotificationSettingV2"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "messenger_setting"),
//    2: .standard(proto: "drive_setting"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBytesField(value: &self._messengerSetting)
//      case 2: try decoder.decodeSingularBytesField(value: &self._driveSetting)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._messengerSetting {
//      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
//    }
//    if let v = self._driveSetting {
//      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_NotificationSettingV2, rhs: LarkNCExtensionPB_Entities_NotificationSettingV2) -> Bool {
//    if lhs._messengerSetting != rhs._messengerSetting {return false}
//    if lhs._driveSetting != rhs._driveSetting {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UserSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UserSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "work_status_setting"),
//    2: .standard(proto: "badge_setting"),
//    3: .standard(proto: "notification_setting"),
//    4: .standard(proto: "time_format_setting"),
//    5: .standard(proto: "auto_audio_to_text"),
//    6: .standard(proto: "sms_phone_urgent_setting"),
//    20: .standard(proto: "update_time_ms"),
//    21: .standard(proto: "donot_disturb_before_ms"),
//    22: .standard(proto: "feed_setting"),
//    23: .standard(proto: "notification_setting_v2"),
//    24: .standard(proto: "message_notifications_off_during_calls"),
//    25: .standard(proto: "navigation_show_mute_badge"),
//    26: .standard(proto: "external_display_timezone_setting"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _workStatusSetting: LarkNCExtensionPB_Entities_UserSetting.WorkStatusSetting? = nil
//    var _badgeSetting: LarkNCExtensionPB_Entities_UserSetting.BadgeSetting? = nil
//    var _notificationSetting: LarkNCExtensionPB_Entities_NotificationSetting? = nil
//    var _timeFormatSetting: LarkNCExtensionPB_Entities_UserSetting.TimeFormatSetting? = nil
//    var _autoAudioToText: Bool? = nil
//    var _smsPhoneUrgentSetting: LarkNCExtensionPB_Entities_UserSetting.SmsPhoneUrgentSetting? = nil
//    var _updateTimeMs: Int64? = nil
//    var _donotDisturbBeforeMs: Int64? = nil
//    var _feedSetting: LarkNCExtensionPB_Entities_UserSetting.FeedSetting? = nil
//    var _notificationSettingV2: LarkNCExtensionPB_Entities_NotificationSettingV2? = nil
//    var _messageNotificationsOffDuringCalls: Bool? = nil
//    var _navigationShowMuteBadge: Bool? = nil
//    var _externalDisplayTimezoneSetting: LarkNCExtensionPB_Entities_UserSetting.ExternalDisplayTimezoneSetting? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _workStatusSetting = source._workStatusSetting
//      _badgeSetting = source._badgeSetting
//      _notificationSetting = source._notificationSetting
//      _timeFormatSetting = source._timeFormatSetting
//      _autoAudioToText = source._autoAudioToText
//      _smsPhoneUrgentSetting = source._smsPhoneUrgentSetting
//      _updateTimeMs = source._updateTimeMs
//      _donotDisturbBeforeMs = source._donotDisturbBeforeMs
//      _feedSetting = source._feedSetting
//      _notificationSettingV2 = source._notificationSettingV2
//      _messageNotificationsOffDuringCalls = source._messageNotificationsOffDuringCalls
//      _navigationShowMuteBadge = source._navigationShowMuteBadge
//      _externalDisplayTimezoneSetting = source._externalDisplayTimezoneSetting
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._workStatusSetting)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._badgeSetting)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._notificationSetting)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._timeFormatSetting)
//        case 5: try decoder.decodeSingularBoolField(value: &_storage._autoAudioToText)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._smsPhoneUrgentSetting)
//        case 20: try decoder.decodeSingularInt64Field(value: &_storage._updateTimeMs)
//        case 21: try decoder.decodeSingularInt64Field(value: &_storage._donotDisturbBeforeMs)
//        case 22: try decoder.decodeSingularMessageField(value: &_storage._feedSetting)
//        case 23: try decoder.decodeSingularMessageField(value: &_storage._notificationSettingV2)
//        case 24: try decoder.decodeSingularBoolField(value: &_storage._messageNotificationsOffDuringCalls)
//        case 25: try decoder.decodeSingularBoolField(value: &_storage._navigationShowMuteBadge)
//        case 26: try decoder.decodeSingularMessageField(value: &_storage._externalDisplayTimezoneSetting)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._workStatusSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._badgeSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._notificationSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._timeFormatSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._autoAudioToText {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._smsPhoneUrgentSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._updateTimeMs {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 20)
//      }
//      if let v = _storage._donotDisturbBeforeMs {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 21)
//      }
//      if let v = _storage._feedSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
//      }
//      if let v = _storage._notificationSettingV2 {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
//      }
//      if let v = _storage._messageNotificationsOffDuringCalls {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 24)
//      }
//      if let v = _storage._navigationShowMuteBadge {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 25)
//      }
//      if let v = _storage._externalDisplayTimezoneSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserSetting, rhs: LarkNCExtensionPB_Entities_UserSetting) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._workStatusSetting != rhs_storage._workStatusSetting {return false}
//        if _storage._badgeSetting != rhs_storage._badgeSetting {return false}
//        if _storage._notificationSetting != rhs_storage._notificationSetting {return false}
//        if _storage._timeFormatSetting != rhs_storage._timeFormatSetting {return false}
//        if _storage._autoAudioToText != rhs_storage._autoAudioToText {return false}
//        if _storage._smsPhoneUrgentSetting != rhs_storage._smsPhoneUrgentSetting {return false}
//        if _storage._updateTimeMs != rhs_storage._updateTimeMs {return false}
//        if _storage._donotDisturbBeforeMs != rhs_storage._donotDisturbBeforeMs {return false}
//        if _storage._feedSetting != rhs_storage._feedSetting {return false}
//        if _storage._notificationSettingV2 != rhs_storage._notificationSettingV2 {return false}
//        if _storage._messageNotificationsOffDuringCalls != rhs_storage._messageNotificationsOffDuringCalls {return false}
//        if _storage._navigationShowMuteBadge != rhs_storage._navigationShowMuteBadge {return false}
//        if _storage._externalDisplayTimezoneSetting != rhs_storage._externalDisplayTimezoneSetting {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UserSetting.WorkStatusSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_UserSetting.protoMessageName + ".WorkStatusSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "should_notify_work_status"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._shouldNotifyWorkStatus)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._shouldNotifyWorkStatus {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserSetting.WorkStatusSetting, rhs: LarkNCExtensionPB_Entities_UserSetting.WorkStatusSetting) -> Bool {
//    if lhs._shouldNotifyWorkStatus != rhs._shouldNotifyWorkStatus {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UserSetting.BadgeSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_UserSetting.protoMessageName + ".BadgeSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "style"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._style)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._style {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserSetting.BadgeSetting, rhs: LarkNCExtensionPB_Entities_UserSetting.BadgeSetting) -> Bool {
//    if lhs._style != rhs._style {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UserSetting.BadgeSetting.Style: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "DEFAULT"),
//    2: .same(proto: "RED_POINT"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_UserSetting.ExternalDisplayTimezoneSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_UserSetting.protoMessageName + ".ExternalDisplayTimezoneSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "follow_system"),
//    2: .same(proto: "timezone"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._followSystem)
//      case 2: try decoder.decodeSingularStringField(value: &self._timezone)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._followSystem {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._timezone {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserSetting.ExternalDisplayTimezoneSetting, rhs: LarkNCExtensionPB_Entities_UserSetting.ExternalDisplayTimezoneSetting) -> Bool {
//    if lhs._followSystem != rhs._followSystem {return false}
//    if lhs._timezone != rhs._timezone {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UserSetting.TimeFormatSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_UserSetting.protoMessageName + ".TimeFormatSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "time_format"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._timeFormat)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._timeFormat {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserSetting.TimeFormatSetting, rhs: LarkNCExtensionPB_Entities_UserSetting.TimeFormatSetting) -> Bool {
//    if lhs._timeFormat != rhs._timeFormat {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UserSetting.TimeFormatSetting.TimeFormat: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "TWELVE_HOUR"),
//    2: .same(proto: "TWENTY_FOUR_HOUR"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_UserSetting.SmsPhoneUrgentSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_UserSetting.protoMessageName + ".SmsPhoneUrgentSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "accept"),
//    2: .standard(proto: "can_modify"),
//    3: .standard(proto: "need_confirm"),
//    4: .standard(proto: "can_send"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._accept)
//      case 2: try decoder.decodeSingularBoolField(value: &self._canModify)
//      case 3: try decoder.decodeSingularBoolField(value: &self._needConfirm)
//      case 4: try decoder.decodeSingularBoolField(value: &self._canSend)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._accept {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._canModify {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    if let v = self._needConfirm {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//    }
//    if let v = self._canSend {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserSetting.SmsPhoneUrgentSetting, rhs: LarkNCExtensionPB_Entities_UserSetting.SmsPhoneUrgentSetting) -> Bool {
//    if lhs._accept != rhs._accept {return false}
//    if lhs._canModify != rhs._canModify {return false}
//    if lhs._needConfirm != rhs._needConfirm {return false}
//    if lhs._canSend != rhs._canSend {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UserSetting.FeedSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_UserSetting.protoMessageName + ".FeedSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "is_open_auto_box"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._isOpenAutoBox)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._isOpenAutoBox {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserSetting.FeedSetting, rhs: LarkNCExtensionPB_Entities_UserSetting.FeedSetting) -> Bool {
//    if lhs._isOpenAutoBox != rhs._isOpenAutoBox {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SecurityConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".SecurityConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "data_cache_expiration_config"),
//    2: .standard(proto: "enable_watermark"),
//    3: .standard(proto: "offline_data_expiration"),
//    20: .same(proto: "version"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _dataCacheExpirationConfig: LarkNCExtensionPB_Entities_SecurityConfig.DataCacheExpirationConfig? = nil
//    var _enableWatermark: Bool? = nil
//    var _offlineDataExpiration: Int64? = nil
//    var _version: Int64? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _dataCacheExpirationConfig = source._dataCacheExpirationConfig
//      _enableWatermark = source._enableWatermark
//      _offlineDataExpiration = source._offlineDataExpiration
//      _version = source._version
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._dataCacheExpirationConfig)
//        case 2: try decoder.decodeSingularBoolField(value: &_storage._enableWatermark)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._offlineDataExpiration)
//        case 20: try decoder.decodeSingularInt64Field(value: &_storage._version)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._dataCacheExpirationConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._enableWatermark {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._offlineDataExpiration {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._version {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 20)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SecurityConfig, rhs: LarkNCExtensionPB_Entities_SecurityConfig) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._dataCacheExpirationConfig != rhs_storage._dataCacheExpirationConfig {return false}
//        if _storage._enableWatermark != rhs_storage._enableWatermark {return false}
//        if _storage._offlineDataExpiration != rhs_storage._offlineDataExpiration {return false}
//        if _storage._version != rhs_storage._version {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SecurityConfig.DataCacheExpirationConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_SecurityConfig.protoMessageName + ".DataCacheExpirationConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "enable"),
//    2: .standard(proto: "delay_second"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._enable)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._delaySecond)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._enable {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._delaySecond {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SecurityConfig.DataCacheExpirationConfig, rhs: LarkNCExtensionPB_Entities_SecurityConfig.DataCacheExpirationConfig) -> Bool {
//    if lhs._enable != rhs._enable {return false}
//    if lhs._delaySecond != rhs._delaySecond {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ChatEntitySetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "add_member_permission_setting"),
//    2: .standard(proto: "at_all_permission_setting"),
//    3: .standard(proto: "join_message_visible_setting"),
//    4: .standard(proto: "quit_message_visible_setting"),
//    5: .standard(proto: "share_card_permission_setting"),
//    6: .standard(proto: "add_member_apply_setting"),
//    7: .standard(proto: "thread_anonymous_setting"),
//    8: .standard(proto: "message_visibility_setting"),
//    9: .standard(proto: "anonymous_setting"),
//    10: .standard(proto: "create_urgent_setting"),
//    11: .standard(proto: "create_video_conference_setting"),
//    12: .standard(proto: "pin_permission_setting"),
//    13: .standard(proto: "top_notice_permission_setting"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _addMemberPermissionSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.AddMemberPermissionSetting.Enum? = nil
//    var _atAllPermissionSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.AtAllPermissionSetting.Enum? = nil
//    var _joinMessageVisibleSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.SystemMessageVisibleSetting.Enum? = nil
//    var _quitMessageVisibleSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.SystemMessageVisibleSetting.Enum? = nil
//    var _shareCardPermissionSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.ShareCardPermissionSetting.Enum? = nil
//    var _addMemberApplySetting: LarkNCExtensionPB_Entities_ChatEntitySetting.AddMemberApplySetting.Enum? = nil
//    var _threadAnonymousSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.ThreadAnonymousSetting.Enum? = nil
//    var _messageVisibilitySetting: LarkNCExtensionPB_Entities_ChatEntitySetting.MessageVisibilitySetting.Enum? = nil
//    var _anonymousSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.AnonymousSetting? = nil
//    var _createUrgentSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.CreateUrgentSetting.Enum? = nil
//    var _createVideoConferenceSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.CreateVideoConferenceSetting.Enum? = nil
//    var _pinPermissionSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.PinPermissionSetting.Enum? = nil
//    var _topNoticePermissionSetting: LarkNCExtensionPB_Entities_ChatEntitySetting.TopNoticePermissionSetting.Enum? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _addMemberPermissionSetting = source._addMemberPermissionSetting
//      _atAllPermissionSetting = source._atAllPermissionSetting
//      _joinMessageVisibleSetting = source._joinMessageVisibleSetting
//      _quitMessageVisibleSetting = source._quitMessageVisibleSetting
//      _shareCardPermissionSetting = source._shareCardPermissionSetting
//      _addMemberApplySetting = source._addMemberApplySetting
//      _threadAnonymousSetting = source._threadAnonymousSetting
//      _messageVisibilitySetting = source._messageVisibilitySetting
//      _anonymousSetting = source._anonymousSetting
//      _createUrgentSetting = source._createUrgentSetting
//      _createVideoConferenceSetting = source._createVideoConferenceSetting
//      _pinPermissionSetting = source._pinPermissionSetting
//      _topNoticePermissionSetting = source._topNoticePermissionSetting
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._addMemberPermissionSetting)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._atAllPermissionSetting)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._joinMessageVisibleSetting)
//        case 4: try decoder.decodeSingularEnumField(value: &_storage._quitMessageVisibleSetting)
//        case 5: try decoder.decodeSingularEnumField(value: &_storage._shareCardPermissionSetting)
//        case 6: try decoder.decodeSingularEnumField(value: &_storage._addMemberApplySetting)
//        case 7: try decoder.decodeSingularEnumField(value: &_storage._threadAnonymousSetting)
//        case 8: try decoder.decodeSingularEnumField(value: &_storage._messageVisibilitySetting)
//        case 9: try decoder.decodeSingularMessageField(value: &_storage._anonymousSetting)
//        case 10: try decoder.decodeSingularEnumField(value: &_storage._createUrgentSetting)
//        case 11: try decoder.decodeSingularEnumField(value: &_storage._createVideoConferenceSetting)
//        case 12: try decoder.decodeSingularEnumField(value: &_storage._pinPermissionSetting)
//        case 13: try decoder.decodeSingularEnumField(value: &_storage._topNoticePermissionSetting)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._addMemberPermissionSetting {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._atAllPermissionSetting {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._joinMessageVisibleSetting {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._quitMessageVisibleSetting {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._shareCardPermissionSetting {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._addMemberApplySetting {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._threadAnonymousSetting {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._messageVisibilitySetting {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._anonymousSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._createUrgentSetting {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._createVideoConferenceSetting {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._pinPermissionSetting {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._topNoticePermissionSetting {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatEntitySetting, rhs: LarkNCExtensionPB_Entities_ChatEntitySetting) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._addMemberPermissionSetting != rhs_storage._addMemberPermissionSetting {return false}
//        if _storage._atAllPermissionSetting != rhs_storage._atAllPermissionSetting {return false}
//        if _storage._joinMessageVisibleSetting != rhs_storage._joinMessageVisibleSetting {return false}
//        if _storage._quitMessageVisibleSetting != rhs_storage._quitMessageVisibleSetting {return false}
//        if _storage._shareCardPermissionSetting != rhs_storage._shareCardPermissionSetting {return false}
//        if _storage._addMemberApplySetting != rhs_storage._addMemberApplySetting {return false}
//        if _storage._threadAnonymousSetting != rhs_storage._threadAnonymousSetting {return false}
//        if _storage._messageVisibilitySetting != rhs_storage._messageVisibilitySetting {return false}
//        if _storage._anonymousSetting != rhs_storage._anonymousSetting {return false}
//        if _storage._createUrgentSetting != rhs_storage._createUrgentSetting {return false}
//        if _storage._createVideoConferenceSetting != rhs_storage._createVideoConferenceSetting {return false}
//        if _storage._pinPermissionSetting != rhs_storage._pinPermissionSetting {return false}
//        if _storage._topNoticePermissionSetting != rhs_storage._topNoticePermissionSetting {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.Field: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "ADD_MEMBER_PERMISSION_SETTING"),
//    2: .same(proto: "AT_ALL_PERMISSION_SETTING"),
//    3: .same(proto: "JOIN_MESSAGE_VISIBLE_SETTING"),
//    4: .same(proto: "QUIT_MESSAGE_VISIBLE_SETTING"),
//    5: .same(proto: "SHARE_CARD_PERMISSION_SETTING"),
//    6: .same(proto: "ADD_MEMBER_APPLY_SETTING"),
//    7: .same(proto: "THREAD_ANONYMOUS_SETTING"),
//    8: .same(proto: "MESSAGE_VISIBILITY_SETTING"),
//    9: .same(proto: "ALLOW_ANONYMOUS_SETTING"),
//    10: .same(proto: "CREATE_URGENT_SETTING"),
//    11: .same(proto: "CREATE_VIDEO_CONFERENCE_SETTING"),
//    12: .same(proto: "PIN_PERMISSION_SETTING"),
//    14: .same(proto: "TOP_NOTICE_PERMISSION_SETTING"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.AddMemberPermissionSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatEntitySetting.protoMessageName + ".AddMemberPermissionSetting"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatEntitySetting.AddMemberPermissionSetting, rhs: LarkNCExtensionPB_Entities_ChatEntitySetting.AddMemberPermissionSetting) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.AddMemberPermissionSetting.Enum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "ALL_MEMBERS"),
//    2: .same(proto: "ONLY_OWNER"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.AddMemberApplySetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatEntitySetting.protoMessageName + ".AddMemberApplySetting"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatEntitySetting.AddMemberApplySetting, rhs: LarkNCExtensionPB_Entities_ChatEntitySetting.AddMemberApplySetting) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.AddMemberApplySetting.Enum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "NO_APPLY"),
//    2: .same(proto: "NEED_APPLY"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.SystemMessageVisibleSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatEntitySetting.protoMessageName + ".SystemMessageVisibleSetting"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatEntitySetting.SystemMessageVisibleSetting, rhs: LarkNCExtensionPB_Entities_ChatEntitySetting.SystemMessageVisibleSetting) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.SystemMessageVisibleSetting.Enum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "ONLY_OWNER"),
//    2: .same(proto: "ALL_MEMBERS"),
//    3: .same(proto: "NOT_ANYONE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.ShareCardPermissionSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatEntitySetting.protoMessageName + ".ShareCardPermissionSetting"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatEntitySetting.ShareCardPermissionSetting, rhs: LarkNCExtensionPB_Entities_ChatEntitySetting.ShareCardPermissionSetting) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.ShareCardPermissionSetting.Enum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "ALLOWED"),
//    2: .same(proto: "NOT_ALLOWED"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.AtAllPermissionSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatEntitySetting.protoMessageName + ".AtAllPermissionSetting"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatEntitySetting.AtAllPermissionSetting, rhs: LarkNCExtensionPB_Entities_ChatEntitySetting.AtAllPermissionSetting) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.AtAllPermissionSetting.Enum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "ALL_MEMBERS"),
//    2: .same(proto: "ONLY_OWNER"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.ThreadAnonymousSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatEntitySetting.protoMessageName + ".ThreadAnonymousSetting"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatEntitySetting.ThreadAnonymousSetting, rhs: LarkNCExtensionPB_Entities_ChatEntitySetting.ThreadAnonymousSetting) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.ThreadAnonymousSetting.Enum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "INVISIBLE"),
//    2: .same(proto: "NOT_ALLOWED"),
//    3: .same(proto: "ALLOWED"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.MessageVisibilitySetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatEntitySetting.protoMessageName + ".MessageVisibilitySetting"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatEntitySetting.MessageVisibilitySetting, rhs: LarkNCExtensionPB_Entities_ChatEntitySetting.MessageVisibilitySetting) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.MessageVisibilitySetting.Enum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "ALL_MESSAGES"),
//    2: .same(proto: "ONLY_NEW_MESSAGES"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.AnonymousSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatEntitySetting.protoMessageName + ".AnonymousSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "is_allow_anonymous"),
//    2: .standard(proto: "is_visible"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._isAllowAnonymous)
//      case 2: try decoder.decodeSingularBoolField(value: &self._isVisible)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._isAllowAnonymous {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._isVisible {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatEntitySetting.AnonymousSetting, rhs: LarkNCExtensionPB_Entities_ChatEntitySetting.AnonymousSetting) -> Bool {
//    if lhs._isAllowAnonymous != rhs._isAllowAnonymous {return false}
//    if lhs._isVisible != rhs._isVisible {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.CreateUrgentSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatEntitySetting.protoMessageName + ".CreateUrgentSetting"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatEntitySetting.CreateUrgentSetting, rhs: LarkNCExtensionPB_Entities_ChatEntitySetting.CreateUrgentSetting) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.CreateUrgentSetting.Enum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "ALL_MEMBERS"),
//    2: .same(proto: "ONLY_MANAGER"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.CreateVideoConferenceSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatEntitySetting.protoMessageName + ".CreateVideoConferenceSetting"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatEntitySetting.CreateVideoConferenceSetting, rhs: LarkNCExtensionPB_Entities_ChatEntitySetting.CreateVideoConferenceSetting) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.CreateVideoConferenceSetting.Enum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "ALL_MEMBERS"),
//    2: .same(proto: "ONLY_MANAGER"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.PinPermissionSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatEntitySetting.protoMessageName + ".PinPermissionSetting"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatEntitySetting.PinPermissionSetting, rhs: LarkNCExtensionPB_Entities_ChatEntitySetting.PinPermissionSetting) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.PinPermissionSetting.Enum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "ALL_MEMBERS"),
//    2: .same(proto: "ONLY_MANAGER"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.TopNoticePermissionSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatEntitySetting.protoMessageName + ".TopNoticePermissionSetting"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatEntitySetting.TopNoticePermissionSetting, rhs: LarkNCExtensionPB_Entities_ChatEntitySetting.TopNoticePermissionSetting) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatEntitySetting.TopNoticePermissionSetting.Enum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "ALL_MEMBERS"),
//    2: .same(proto: "ONLY_MANAGER"),
//  ]
//}

extension LarkNCExtensionPB_Entities_CryptoMessageDetail: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CryptoMessageDetail"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "content"),
    2: .standard(proto: "from_device_id"),
    3: .standard(proto: "sender_public_key"),
    4: .same(proto: "nonce"),
    5: .standard(proto: "additional_data"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._content)
      case 2: try decoder.decodeSingularStringField(value: &self._fromDeviceID)
      case 3: try decoder.decodeSingularBytesField(value: &self._senderPublicKey)
      case 4: try decoder.decodeSingularBytesField(value: &self._nonce)
      case 5: try decoder.decodeSingularBytesField(value: &self._additionalData)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._content {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._fromDeviceID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._senderPublicKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    if let v = self._nonce {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    }
    if let v = self._additionalData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CryptoMessageDetail, rhs: LarkNCExtensionPB_Entities_CryptoMessageDetail) -> Bool {
    if lhs._content != rhs._content {return false}
    if lhs._fromDeviceID != rhs._fromDeviceID {return false}
    if lhs._senderPublicKey != rhs._senderPublicKey {return false}
    if lhs._nonce != rhs._nonce {return false}
    if lhs._additionalData != rhs._additionalData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_SecretMessageDetail: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SecretMessageDetail"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "content"),
    2: .standard(proto: "sender_public_key"),
    3: .same(proto: "header"),
    4: .standard(proto: "from_device_id"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._content)
      case 2: try decoder.decodeSingularBytesField(value: &self._senderPublicKey)
      case 3: try decoder.decodeSingularBytesField(value: &self._header)
      case 4: try decoder.decodeSingularStringField(value: &self._fromDeviceID)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._content {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._senderPublicKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._header {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    if let v = self._fromDeviceID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_SecretMessageDetail, rhs: LarkNCExtensionPB_Entities_SecretMessageDetail) -> Bool {
    if lhs._content != rhs._content {return false}
    if lhs._senderPublicKey != rhs._senderPublicKey {return false}
    if lhs._header != rhs._header {return false}
    if lhs._fromDeviceID != rhs._fromDeviceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CryptoInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CryptoInfo"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "crypto_type"),
    2: .standard(proto: "secret_version"),
    3: .standard(proto: "burned_seconds"),
    4: .standard(proto: "fallback_detail"),
    5: .standard(proto: "secret_message_detail"),
  ]

  fileprivate class _StorageClass {
    var _cryptoType: LarkNCExtensionPB_Entities_CryptoInfo.CryptoType? = nil
    var _secretVersion: String? = nil
    var _burnedSeconds: Int32? = nil
    var _fallbackDetail: LarkNCExtensionPB_Entities_CryptoMessageDetail? = nil
    var _secretMessageDetail: LarkNCExtensionPB_Entities_SecretMessageDetail? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cryptoType = source._cryptoType
      _secretVersion = source._secretVersion
      _burnedSeconds = source._burnedSeconds
      _fallbackDetail = source._fallbackDetail
      _secretMessageDetail = source._secretMessageDetail
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._cryptoType)
        case 2: try decoder.decodeSingularStringField(value: &_storage._secretVersion)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._burnedSeconds)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._fallbackDetail)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._secretMessageDetail)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cryptoType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._secretVersion {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._burnedSeconds {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._fallbackDetail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._secretMessageDetail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CryptoInfo, rhs: LarkNCExtensionPB_Entities_CryptoInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cryptoType != rhs_storage._cryptoType {return false}
        if _storage._secretVersion != rhs_storage._secretVersion {return false}
        if _storage._burnedSeconds != rhs_storage._burnedSeconds {return false}
        if _storage._fallbackDetail != rhs_storage._fallbackDetail {return false}
        if _storage._secretMessageDetail != rhs_storage._secretMessageDetail {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CryptoInfo.CryptoType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "PLAIN_TEXT"),
    2: .same(proto: "E2EE"),
    3: .same(proto: "THIRD_PARTY"),
  ]
}

//extension LarkNCExtensionPB_Entities_ChatConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ChatConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "chatable"),
//    2: .same(proto: "muteable"),
//    3: .standard(proto: "in_total_badge"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._chatable)
//      case 2: try decoder.decodeSingularBoolField(value: &self._muteable)
//      case 3: try decoder.decodeSingularBoolField(value: &self._inTotalBadge)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._chatable {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._muteable {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    if let v = self._inTotalBadge {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatConfig, rhs: LarkNCExtensionPB_Entities_ChatConfig) -> Bool {
//    if lhs._chatable != rhs._chatable {return false}
//    if lhs._muteable != rhs._muteable {return false}
//    if lhs._inTotalBadge != rhs._inTotalBadge {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Chat: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Chat"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "type"),
//    3: .standard(proto: "last_message_id"),
//    4: .same(proto: "name"),
//    5: .same(proto: "avatar"),
//    6: .standard(proto: "owner_id"),
//    7: .standard(proto: "new_message_count"),
//    8: .same(proto: "status"),
//    9: .standard(proto: "update_time"),
//    10: .same(proto: "key"),
//    11: .same(proto: "description"),
//    12: .standard(proto: "member_count"),
//    13: .standard(proto: "is_department"),
//    14: .standard(proto: "is_public"),
//    15: .standard(proto: "last_message_position"),
//    16: .standard(proto: "user_count"),
//    17: .standard(proto: "name_pinyin"),
//    18: .standard(proto: "create_time"),
//    19: .standard(proto: "is_customer_service"),
//    20: .same(proto: "role"),
//    21: .standard(proto: "is_custom_icon"),
//    22: .standard(proto: "no_badged_new_message_count"),
//    23: .standard(proto: "off_edit_group_chat_info"),
//    24: .same(proto: "announcement"),
//    25: .standard(proto: "tenant_id"),
//    26: .standard(proto: "update_time_ms"),
//    27: .standard(proto: "is_remind"),
//    28: .standard(proto: "chat_entity_setting"),
//    29: .standard(proto: "user_setting"),
//    30: .standard(proto: "is_dissolved"),
//    31: .standard(proto: "is_meeting"),
//    32: .standard(proto: "last_visible_message_id"),
//    131: .standard(proto: "message_last_visible_patch"),
//    33: .standard(proto: "last_thread_id"),
//    34: .standard(proto: "new_thread_count"),
//    35: .standard(proto: "last_thread_position"),
//    36: .standard(proto: "is_crypto"),
//    37: .standard(proto: "no_badged_new_thread_count"),
//    38: .standard(proto: "thread_start_position"),
//    39: .standard(proto: "chat_mode"),
//    40: .standard(proto: "chat_config"),
//    41: .standard(proto: "is_cross_tenant"),
//    42: .standard(proto: "is_tenant"),
//    43: .standard(proto: "support_view"),
//    44: .standard(proto: "join_time_ms"),
//    45: .standard(proto: "oncall_id"),
//    46: .standard(proto: "last_visible_message_position"),
//    47: .standard(proto: "last_visible_message_no_badged_count"),
//    48: .standard(proto: "read_position"),
//    49: .standard(proto: "read_position_badge_count"),
//    50: .standard(proto: "last_message_position_badge_count"),
//    51: .standard(proto: "enable_watermark"),
//    52: .standard(proto: "mini_avatar"),
//    53: .standard(proto: "sidebar_id"),
//    100: .standard(proto: "name_py"),
//    101: .standard(proto: "i18n_names"),
//    102: .standard(proto: "i18n_inf"),
//    103: .standard(proto: "read_thread_position"),
//    104: .standard(proto: "read_thread_position_badge_count"),
//    105: .standard(proto: "last_thread_position_badge_count"),
//    106: .standard(proto: "last_visible_thread_position"),
//    107: .standard(proto: "last_visible_thread_id"),
//    132: .standard(proto: "thread_last_visible_patch"),
//    108: .standard(proto: "chat_security_config"),
//    109: .standard(proto: "is_public_v2"),
//    110: .standard(proto: "post_type"),
//    111: .standard(proto: "allow_post"),
//    112: .standard(proto: "burned_time"),
//    113: .standard(proto: "put_chatter_apply_count"),
//    114: .standard(proto: "show_banner"),
//    115: .standard(proto: "is_large_group"),
//    116: .standard(proto: "first_chat_message_position"),
//    117: .same(proto: "tags"),
//    118: .same(proto: "extra"),
//    119: .standard(proto: "is_same_page_meeting"),
//    120: .standard(proto: "my_threads_read_timestamp"),
//    121: .standard(proto: "my_threads_last_timestamp"),
//    122: .standard(proto: "is_edu"),
//    123: .standard(proto: "my_threads_last_display_message_id"),
//    124: .standard(proto: "my_threads_unread_count"),
//    125: .standard(proto: "is_cross_with_ka"),
//    126: .standard(proto: "is_admin"),
//    127: .standard(proto: "is_super"),
//    128: .standard(proto: "is_team"),
//    129: .standard(proto: "biz_content"),
//    130: .standard(proto: "chatter_extra_states"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _type: LarkNCExtensionPB_Entities_Chat.TypeEnum? = nil
//    var _lastMessageID: String? = nil
//    var _name: String? = nil
//    var _avatar: LarkNCExtensionPB_Entities_Image? = nil
//    var _ownerID: String? = nil
//    var _newMessageCount: Int32? = nil
//    var _status: LarkNCExtensionPB_Entities_Chat.Status? = nil
//    var _updateTime: Int64? = nil
//    var _key: String? = nil
//    var _description_p: String? = nil
//    var _memberCount: Int32? = nil
//    var _isDepartment: Bool? = nil
//    var _isPublic: Bool? = nil
//    var _lastMessagePosition: Int32? = nil
//    var _userCount: Int32? = nil
//    var _namePinyin: String? = nil
//    var _createTime: Int64? = nil
//    var _isCustomerService: Bool? = nil
//    var _role: LarkNCExtensionPB_Entities_Chat.Role? = nil
//    var _isCustomIcon: Bool? = nil
//    var _noBadgedNewMessageCount: Int32? = nil
//    var _offEditGroupChatInfo: Bool? = nil
//    var _announcement: LarkNCExtensionPB_Entities_Chat.Announcement? = nil
//    var _tenantID: String? = nil
//    var _updateTimeMs: Int64? = nil
//    var _isRemind: Bool? = nil
//    var _chatEntitySetting: LarkNCExtensionPB_Entities_ChatEntitySetting? = nil
//    var _userSetting: LarkNCExtensionPB_Entities_ChatSetting? = nil
//    var _isDissolved: Bool? = nil
//    var _isMeeting: Bool? = nil
//    var _lastVisibleMessageID: String? = nil
//    var _messageLastVisiblePatch: LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch? = nil
//    var _lastThreadID: String? = nil
//    var _newThreadCount: Int32? = nil
//    var _lastThreadPosition: Int32? = nil
//    var _isCrypto: Bool? = nil
//    var _noBadgedNewThreadCount: Int32? = nil
//    var _threadStartPosition: Int32? = nil
//    var _chatMode: LarkNCExtensionPB_Entities_Chat.ChatMode? = nil
//    var _chatConfig: LarkNCExtensionPB_Entities_ChatConfig? = nil
//    var _isCrossTenant: Bool? = nil
//    var _isTenant: Bool? = nil
//    var _supportView: LarkNCExtensionPB_Entities_Chat.SupportView? = nil
//    var _joinTimeMs: Int64? = nil
//    var _oncallID: Int64? = nil
//    var _lastVisibleMessagePosition: Int32? = nil
//    var _lastVisibleMessageNoBadgedCount: Int32? = nil
//    var _readPosition: Int32? = nil
//    var _readPositionBadgeCount: Int32? = nil
//    var _lastMessagePositionBadgeCount: Int32? = nil
//    var _enableWatermark: Bool? = nil
//    var _miniAvatar: LarkNCExtensionPB_Entities_Image? = nil
//    var _sidebarID: String? = nil
//    var _namePy: String? = nil
//    var _i18NNames: Dictionary<String,String> = [:]
//    var _i18NInf: LarkNCExtensionPB_Entities_Chat.I18nInf? = nil
//    var _readThreadPosition: Int32? = nil
//    var _readThreadPositionBadgeCount: Int32? = nil
//    var _lastThreadPositionBadgeCount: Int32? = nil
//    var _lastVisibleThreadPosition: Int32? = nil
//    var _lastVisibleThreadID: String? = nil
//    var _threadLastVisiblePatch: LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch? = nil
//    var _chatSecurityConfig: LarkNCExtensionPB_Entities_ChatSecurityConfig? = nil
//    var _isPublicV2: Bool? = nil
//    var _postType: LarkNCExtensionPB_Entities_ChatPostType? = nil
//    var _allowPost: Bool? = nil
//    var _burnedTime: Int64? = nil
//    var _putChatterApplyCount: Int32? = nil
//    var _showBanner: Bool? = nil
//    var _isLargeGroup: Bool? = nil
//    var _firstChatMessagePosition: Int32? = nil
//    var _tags: [Int32] = []
//    var _extra: Dictionary<String,String> = [:]
//    var _isSamePageMeeting: Bool? = nil
//    var _myThreadsReadTimestamp: Int64? = nil
//    var _myThreadsLastTimestamp: Int64? = nil
//    var _isEdu: Bool? = nil
//    var _myThreadsLastDisplayMessageID: Int64? = nil
//    var _myThreadsUnreadCount: Int32? = nil
//    var _isCrossWithKa: Bool? = nil
//    var _isAdmin: Bool? = nil
//    var _isSuper: Bool? = nil
//    var _isTeam: Bool? = nil
//    var _bizContent: LarkNCExtensionPB_Entities_ChatBizContent? = nil
//    var _chatterExtraStates: Dictionary<Int32,Int32> = [:]
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _type = source._type
//      _lastMessageID = source._lastMessageID
//      _name = source._name
//      _avatar = source._avatar
//      _ownerID = source._ownerID
//      _newMessageCount = source._newMessageCount
//      _status = source._status
//      _updateTime = source._updateTime
//      _key = source._key
//      _description_p = source._description_p
//      _memberCount = source._memberCount
//      _isDepartment = source._isDepartment
//      _isPublic = source._isPublic
//      _lastMessagePosition = source._lastMessagePosition
//      _userCount = source._userCount
//      _namePinyin = source._namePinyin
//      _createTime = source._createTime
//      _isCustomerService = source._isCustomerService
//      _role = source._role
//      _isCustomIcon = source._isCustomIcon
//      _noBadgedNewMessageCount = source._noBadgedNewMessageCount
//      _offEditGroupChatInfo = source._offEditGroupChatInfo
//      _announcement = source._announcement
//      _tenantID = source._tenantID
//      _updateTimeMs = source._updateTimeMs
//      _isRemind = source._isRemind
//      _chatEntitySetting = source._chatEntitySetting
//      _userSetting = source._userSetting
//      _isDissolved = source._isDissolved
//      _isMeeting = source._isMeeting
//      _lastVisibleMessageID = source._lastVisibleMessageID
//      _messageLastVisiblePatch = source._messageLastVisiblePatch
//      _lastThreadID = source._lastThreadID
//      _newThreadCount = source._newThreadCount
//      _lastThreadPosition = source._lastThreadPosition
//      _isCrypto = source._isCrypto
//      _noBadgedNewThreadCount = source._noBadgedNewThreadCount
//      _threadStartPosition = source._threadStartPosition
//      _chatMode = source._chatMode
//      _chatConfig = source._chatConfig
//      _isCrossTenant = source._isCrossTenant
//      _isTenant = source._isTenant
//      _supportView = source._supportView
//      _joinTimeMs = source._joinTimeMs
//      _oncallID = source._oncallID
//      _lastVisibleMessagePosition = source._lastVisibleMessagePosition
//      _lastVisibleMessageNoBadgedCount = source._lastVisibleMessageNoBadgedCount
//      _readPosition = source._readPosition
//      _readPositionBadgeCount = source._readPositionBadgeCount
//      _lastMessagePositionBadgeCount = source._lastMessagePositionBadgeCount
//      _enableWatermark = source._enableWatermark
//      _miniAvatar = source._miniAvatar
//      _sidebarID = source._sidebarID
//      _namePy = source._namePy
//      _i18NNames = source._i18NNames
//      _i18NInf = source._i18NInf
//      _readThreadPosition = source._readThreadPosition
//      _readThreadPositionBadgeCount = source._readThreadPositionBadgeCount
//      _lastThreadPositionBadgeCount = source._lastThreadPositionBadgeCount
//      _lastVisibleThreadPosition = source._lastVisibleThreadPosition
//      _lastVisibleThreadID = source._lastVisibleThreadID
//      _threadLastVisiblePatch = source._threadLastVisiblePatch
//      _chatSecurityConfig = source._chatSecurityConfig
//      _isPublicV2 = source._isPublicV2
//      _postType = source._postType
//      _allowPost = source._allowPost
//      _burnedTime = source._burnedTime
//      _putChatterApplyCount = source._putChatterApplyCount
//      _showBanner = source._showBanner
//      _isLargeGroup = source._isLargeGroup
//      _firstChatMessagePosition = source._firstChatMessagePosition
//      _tags = source._tags
//      _extra = source._extra
//      _isSamePageMeeting = source._isSamePageMeeting
//      _myThreadsReadTimestamp = source._myThreadsReadTimestamp
//      _myThreadsLastTimestamp = source._myThreadsLastTimestamp
//      _isEdu = source._isEdu
//      _myThreadsLastDisplayMessageID = source._myThreadsLastDisplayMessageID
//      _myThreadsUnreadCount = source._myThreadsUnreadCount
//      _isCrossWithKa = source._isCrossWithKa
//      _isAdmin = source._isAdmin
//      _isSuper = source._isSuper
//      _isTeam = source._isTeam
//      _bizContent = source._bizContent
//      _chatterExtraStates = source._chatterExtraStates
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._lastMessageID)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._ownerID)
//        case 7: try decoder.decodeSingularInt32Field(value: &_storage._newMessageCount)
//        case 8: try decoder.decodeSingularEnumField(value: &_storage._status)
//        case 9: try decoder.decodeSingularInt64Field(value: &_storage._updateTime)
//        case 10: try decoder.decodeSingularStringField(value: &_storage._key)
//        case 11: try decoder.decodeSingularStringField(value: &_storage._description_p)
//        case 12: try decoder.decodeSingularInt32Field(value: &_storage._memberCount)
//        case 13: try decoder.decodeSingularBoolField(value: &_storage._isDepartment)
//        case 14: try decoder.decodeSingularBoolField(value: &_storage._isPublic)
//        case 15: try decoder.decodeSingularInt32Field(value: &_storage._lastMessagePosition)
//        case 16: try decoder.decodeSingularInt32Field(value: &_storage._userCount)
//        case 17: try decoder.decodeSingularStringField(value: &_storage._namePinyin)
//        case 18: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
//        case 19: try decoder.decodeSingularBoolField(value: &_storage._isCustomerService)
//        case 20: try decoder.decodeSingularEnumField(value: &_storage._role)
//        case 21: try decoder.decodeSingularBoolField(value: &_storage._isCustomIcon)
//        case 22: try decoder.decodeSingularInt32Field(value: &_storage._noBadgedNewMessageCount)
//        case 23: try decoder.decodeSingularBoolField(value: &_storage._offEditGroupChatInfo)
//        case 24: try decoder.decodeSingularMessageField(value: &_storage._announcement)
//        case 25: try decoder.decodeSingularStringField(value: &_storage._tenantID)
//        case 26: try decoder.decodeSingularInt64Field(value: &_storage._updateTimeMs)
//        case 27: try decoder.decodeSingularBoolField(value: &_storage._isRemind)
//        case 28: try decoder.decodeSingularMessageField(value: &_storage._chatEntitySetting)
//        case 29: try decoder.decodeSingularMessageField(value: &_storage._userSetting)
//        case 30: try decoder.decodeSingularBoolField(value: &_storage._isDissolved)
//        case 31: try decoder.decodeSingularBoolField(value: &_storage._isMeeting)
//        case 32: try decoder.decodeSingularStringField(value: &_storage._lastVisibleMessageID)
//        case 33: try decoder.decodeSingularStringField(value: &_storage._lastThreadID)
//        case 34: try decoder.decodeSingularInt32Field(value: &_storage._newThreadCount)
//        case 35: try decoder.decodeSingularInt32Field(value: &_storage._lastThreadPosition)
//        case 36: try decoder.decodeSingularBoolField(value: &_storage._isCrypto)
//        case 37: try decoder.decodeSingularInt32Field(value: &_storage._noBadgedNewThreadCount)
//        case 38: try decoder.decodeSingularInt32Field(value: &_storage._threadStartPosition)
//        case 39: try decoder.decodeSingularEnumField(value: &_storage._chatMode)
//        case 40: try decoder.decodeSingularMessageField(value: &_storage._chatConfig)
//        case 41: try decoder.decodeSingularBoolField(value: &_storage._isCrossTenant)
//        case 42: try decoder.decodeSingularBoolField(value: &_storage._isTenant)
//        case 43: try decoder.decodeSingularEnumField(value: &_storage._supportView)
//        case 44: try decoder.decodeSingularInt64Field(value: &_storage._joinTimeMs)
//        case 45: try decoder.decodeSingularInt64Field(value: &_storage._oncallID)
//        case 46: try decoder.decodeSingularInt32Field(value: &_storage._lastVisibleMessagePosition)
//        case 47: try decoder.decodeSingularInt32Field(value: &_storage._lastVisibleMessageNoBadgedCount)
//        case 48: try decoder.decodeSingularInt32Field(value: &_storage._readPosition)
//        case 49: try decoder.decodeSingularInt32Field(value: &_storage._readPositionBadgeCount)
//        case 50: try decoder.decodeSingularInt32Field(value: &_storage._lastMessagePositionBadgeCount)
//        case 51: try decoder.decodeSingularBoolField(value: &_storage._enableWatermark)
//        case 52: try decoder.decodeSingularMessageField(value: &_storage._miniAvatar)
//        case 53: try decoder.decodeSingularStringField(value: &_storage._sidebarID)
//        case 100: try decoder.decodeSingularStringField(value: &_storage._namePy)
//        case 101: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._i18NNames)
//        case 102: try decoder.decodeSingularMessageField(value: &_storage._i18NInf)
//        case 103: try decoder.decodeSingularInt32Field(value: &_storage._readThreadPosition)
//        case 104: try decoder.decodeSingularInt32Field(value: &_storage._readThreadPositionBadgeCount)
//        case 105: try decoder.decodeSingularInt32Field(value: &_storage._lastThreadPositionBadgeCount)
//        case 106: try decoder.decodeSingularInt32Field(value: &_storage._lastVisibleThreadPosition)
//        case 107: try decoder.decodeSingularStringField(value: &_storage._lastVisibleThreadID)
//        case 108: try decoder.decodeSingularMessageField(value: &_storage._chatSecurityConfig)
//        case 109: try decoder.decodeSingularBoolField(value: &_storage._isPublicV2)
//        case 110: try decoder.decodeSingularEnumField(value: &_storage._postType)
//        case 111: try decoder.decodeSingularBoolField(value: &_storage._allowPost)
//        case 112: try decoder.decodeSingularInt64Field(value: &_storage._burnedTime)
//        case 113: try decoder.decodeSingularInt32Field(value: &_storage._putChatterApplyCount)
//        case 114: try decoder.decodeSingularBoolField(value: &_storage._showBanner)
//        case 115: try decoder.decodeSingularBoolField(value: &_storage._isLargeGroup)
//        case 116: try decoder.decodeSingularInt32Field(value: &_storage._firstChatMessagePosition)
//        case 117: try decoder.decodeRepeatedInt32Field(value: &_storage._tags)
//        case 118: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._extra)
//        case 119: try decoder.decodeSingularBoolField(value: &_storage._isSamePageMeeting)
//        case 120: try decoder.decodeSingularInt64Field(value: &_storage._myThreadsReadTimestamp)
//        case 121: try decoder.decodeSingularInt64Field(value: &_storage._myThreadsLastTimestamp)
//        case 122: try decoder.decodeSingularBoolField(value: &_storage._isEdu)
//        case 123: try decoder.decodeSingularInt64Field(value: &_storage._myThreadsLastDisplayMessageID)
//        case 124: try decoder.decodeSingularInt32Field(value: &_storage._myThreadsUnreadCount)
//        case 125: try decoder.decodeSingularBoolField(value: &_storage._isCrossWithKa)
//        case 126: try decoder.decodeSingularBoolField(value: &_storage._isAdmin)
//        case 127: try decoder.decodeSingularBoolField(value: &_storage._isSuper)
//        case 128: try decoder.decodeSingularBoolField(value: &_storage._isTeam)
//        case 129: try decoder.decodeSingularMessageField(value: &_storage._bizContent)
//        case 130: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufInt32,LarkHTTP.ProtobufInt32>.self, value: &_storage._chatterExtraStates)
//        case 131: try decoder.decodeSingularMessageField(value: &_storage._messageLastVisiblePatch)
//        case 132: try decoder.decodeSingularMessageField(value: &_storage._threadLastVisiblePatch)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._lastMessageID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._ownerID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._newMessageCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._updateTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._key {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._description_p {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._memberCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._isDepartment {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._isPublic {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._lastMessagePosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 15)
//      }
//      if let v = _storage._userCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 16)
//      }
//      if let v = _storage._namePinyin {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 17)
//      }
//      if let v = _storage._createTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 18)
//      }
//      if let v = _storage._isCustomerService {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
//      }
//      if let v = _storage._role {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 20)
//      }
//      if let v = _storage._isCustomIcon {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 21)
//      }
//      if let v = _storage._noBadgedNewMessageCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 22)
//      }
//      if let v = _storage._offEditGroupChatInfo {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
//      }
//      if let v = _storage._announcement {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
//      }
//      if let v = _storage._tenantID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
//      }
//      if let v = _storage._updateTimeMs {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 26)
//      }
//      if let v = _storage._isRemind {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 27)
//      }
//      if let v = _storage._chatEntitySetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
//      }
//      if let v = _storage._userSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
//      }
//      if let v = _storage._isDissolved {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 30)
//      }
//      if let v = _storage._isMeeting {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 31)
//      }
//      if let v = _storage._lastVisibleMessageID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 32)
//      }
//      if let v = _storage._lastThreadID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 33)
//      }
//      if let v = _storage._newThreadCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 34)
//      }
//      if let v = _storage._lastThreadPosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 35)
//      }
//      if let v = _storage._isCrypto {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 36)
//      }
//      if let v = _storage._noBadgedNewThreadCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 37)
//      }
//      if let v = _storage._threadStartPosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 38)
//      }
//      if let v = _storage._chatMode {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 39)
//      }
//      if let v = _storage._chatConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
//      }
//      if let v = _storage._isCrossTenant {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 41)
//      }
//      if let v = _storage._isTenant {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 42)
//      }
//      if let v = _storage._supportView {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 43)
//      }
//      if let v = _storage._joinTimeMs {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 44)
//      }
//      if let v = _storage._oncallID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 45)
//      }
//      if let v = _storage._lastVisibleMessagePosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 46)
//      }
//      if let v = _storage._lastVisibleMessageNoBadgedCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 47)
//      }
//      if let v = _storage._readPosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 48)
//      }
//      if let v = _storage._readPositionBadgeCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 49)
//      }
//      if let v = _storage._lastMessagePositionBadgeCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 50)
//      }
//      if let v = _storage._enableWatermark {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 51)
//      }
//      if let v = _storage._miniAvatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 52)
//      }
//      if let v = _storage._sidebarID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 53)
//      }
//      if let v = _storage._namePy {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 100)
//      }
//      if !_storage._i18NNames.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._i18NNames, fieldNumber: 101)
//      }
//      if let v = _storage._i18NInf {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
//      }
//      if let v = _storage._readThreadPosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 103)
//      }
//      if let v = _storage._readThreadPositionBadgeCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 104)
//      }
//      if let v = _storage._lastThreadPositionBadgeCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 105)
//      }
//      if let v = _storage._lastVisibleThreadPosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 106)
//      }
//      if let v = _storage._lastVisibleThreadID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 107)
//      }
//      if let v = _storage._chatSecurityConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 108)
//      }
//      if let v = _storage._isPublicV2 {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 109)
//      }
//      if let v = _storage._postType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 110)
//      }
//      if let v = _storage._allowPost {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 111)
//      }
//      if let v = _storage._burnedTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 112)
//      }
//      if let v = _storage._putChatterApplyCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 113)
//      }
//      if let v = _storage._showBanner {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 114)
//      }
//      if let v = _storage._isLargeGroup {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 115)
//      }
//      if let v = _storage._firstChatMessagePosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 116)
//      }
//      if !_storage._tags.isEmpty {
//        try visitor.visitRepeatedInt32Field(value: _storage._tags, fieldNumber: 117)
//      }
//      if !_storage._extra.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._extra, fieldNumber: 118)
//      }
//      if let v = _storage._isSamePageMeeting {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 119)
//      }
//      if let v = _storage._myThreadsReadTimestamp {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 120)
//      }
//      if let v = _storage._myThreadsLastTimestamp {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 121)
//      }
//      if let v = _storage._isEdu {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 122)
//      }
//      if let v = _storage._myThreadsLastDisplayMessageID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 123)
//      }
//      if let v = _storage._myThreadsUnreadCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 124)
//      }
//      if let v = _storage._isCrossWithKa {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 125)
//      }
//      if let v = _storage._isAdmin {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 126)
//      }
//      if let v = _storage._isSuper {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 127)
//      }
//      if let v = _storage._isTeam {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 128)
//      }
//      if let v = _storage._bizContent {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 129)
//      }
//      if !_storage._chatterExtraStates.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufInt32,LarkHTTP.ProtobufInt32>.self, value: _storage._chatterExtraStates, fieldNumber: 130)
//      }
//      if let v = _storage._messageLastVisiblePatch {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 131)
//      }
//      if let v = _storage._threadLastVisiblePatch {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 132)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Chat, rhs: LarkNCExtensionPB_Entities_Chat) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._lastMessageID != rhs_storage._lastMessageID {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._ownerID != rhs_storage._ownerID {return false}
//        if _storage._newMessageCount != rhs_storage._newMessageCount {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._updateTime != rhs_storage._updateTime {return false}
//        if _storage._key != rhs_storage._key {return false}
//        if _storage._description_p != rhs_storage._description_p {return false}
//        if _storage._memberCount != rhs_storage._memberCount {return false}
//        if _storage._isDepartment != rhs_storage._isDepartment {return false}
//        if _storage._isPublic != rhs_storage._isPublic {return false}
//        if _storage._lastMessagePosition != rhs_storage._lastMessagePosition {return false}
//        if _storage._userCount != rhs_storage._userCount {return false}
//        if _storage._namePinyin != rhs_storage._namePinyin {return false}
//        if _storage._createTime != rhs_storage._createTime {return false}
//        if _storage._isCustomerService != rhs_storage._isCustomerService {return false}
//        if _storage._role != rhs_storage._role {return false}
//        if _storage._isCustomIcon != rhs_storage._isCustomIcon {return false}
//        if _storage._noBadgedNewMessageCount != rhs_storage._noBadgedNewMessageCount {return false}
//        if _storage._offEditGroupChatInfo != rhs_storage._offEditGroupChatInfo {return false}
//        if _storage._announcement != rhs_storage._announcement {return false}
//        if _storage._tenantID != rhs_storage._tenantID {return false}
//        if _storage._updateTimeMs != rhs_storage._updateTimeMs {return false}
//        if _storage._isRemind != rhs_storage._isRemind {return false}
//        if _storage._chatEntitySetting != rhs_storage._chatEntitySetting {return false}
//        if _storage._userSetting != rhs_storage._userSetting {return false}
//        if _storage._isDissolved != rhs_storage._isDissolved {return false}
//        if _storage._isMeeting != rhs_storage._isMeeting {return false}
//        if _storage._lastVisibleMessageID != rhs_storage._lastVisibleMessageID {return false}
//        if _storage._messageLastVisiblePatch != rhs_storage._messageLastVisiblePatch {return false}
//        if _storage._lastThreadID != rhs_storage._lastThreadID {return false}
//        if _storage._newThreadCount != rhs_storage._newThreadCount {return false}
//        if _storage._lastThreadPosition != rhs_storage._lastThreadPosition {return false}
//        if _storage._isCrypto != rhs_storage._isCrypto {return false}
//        if _storage._noBadgedNewThreadCount != rhs_storage._noBadgedNewThreadCount {return false}
//        if _storage._threadStartPosition != rhs_storage._threadStartPosition {return false}
//        if _storage._chatMode != rhs_storage._chatMode {return false}
//        if _storage._chatConfig != rhs_storage._chatConfig {return false}
//        if _storage._isCrossTenant != rhs_storage._isCrossTenant {return false}
//        if _storage._isTenant != rhs_storage._isTenant {return false}
//        if _storage._supportView != rhs_storage._supportView {return false}
//        if _storage._joinTimeMs != rhs_storage._joinTimeMs {return false}
//        if _storage._oncallID != rhs_storage._oncallID {return false}
//        if _storage._lastVisibleMessagePosition != rhs_storage._lastVisibleMessagePosition {return false}
//        if _storage._lastVisibleMessageNoBadgedCount != rhs_storage._lastVisibleMessageNoBadgedCount {return false}
//        if _storage._readPosition != rhs_storage._readPosition {return false}
//        if _storage._readPositionBadgeCount != rhs_storage._readPositionBadgeCount {return false}
//        if _storage._lastMessagePositionBadgeCount != rhs_storage._lastMessagePositionBadgeCount {return false}
//        if _storage._enableWatermark != rhs_storage._enableWatermark {return false}
//        if _storage._miniAvatar != rhs_storage._miniAvatar {return false}
//        if _storage._sidebarID != rhs_storage._sidebarID {return false}
//        if _storage._namePy != rhs_storage._namePy {return false}
//        if _storage._i18NNames != rhs_storage._i18NNames {return false}
//        if _storage._i18NInf != rhs_storage._i18NInf {return false}
//        if _storage._readThreadPosition != rhs_storage._readThreadPosition {return false}
//        if _storage._readThreadPositionBadgeCount != rhs_storage._readThreadPositionBadgeCount {return false}
//        if _storage._lastThreadPositionBadgeCount != rhs_storage._lastThreadPositionBadgeCount {return false}
//        if _storage._lastVisibleThreadPosition != rhs_storage._lastVisibleThreadPosition {return false}
//        if _storage._lastVisibleThreadID != rhs_storage._lastVisibleThreadID {return false}
//        if _storage._threadLastVisiblePatch != rhs_storage._threadLastVisiblePatch {return false}
//        if _storage._chatSecurityConfig != rhs_storage._chatSecurityConfig {return false}
//        if _storage._isPublicV2 != rhs_storage._isPublicV2 {return false}
//        if _storage._postType != rhs_storage._postType {return false}
//        if _storage._allowPost != rhs_storage._allowPost {return false}
//        if _storage._burnedTime != rhs_storage._burnedTime {return false}
//        if _storage._putChatterApplyCount != rhs_storage._putChatterApplyCount {return false}
//        if _storage._showBanner != rhs_storage._showBanner {return false}
//        if _storage._isLargeGroup != rhs_storage._isLargeGroup {return false}
//        if _storage._firstChatMessagePosition != rhs_storage._firstChatMessagePosition {return false}
//        if _storage._tags != rhs_storage._tags {return false}
//        if _storage._extra != rhs_storage._extra {return false}
//        if _storage._isSamePageMeeting != rhs_storage._isSamePageMeeting {return false}
//        if _storage._myThreadsReadTimestamp != rhs_storage._myThreadsReadTimestamp {return false}
//        if _storage._myThreadsLastTimestamp != rhs_storage._myThreadsLastTimestamp {return false}
//        if _storage._isEdu != rhs_storage._isEdu {return false}
//        if _storage._myThreadsLastDisplayMessageID != rhs_storage._myThreadsLastDisplayMessageID {return false}
//        if _storage._myThreadsUnreadCount != rhs_storage._myThreadsUnreadCount {return false}
//        if _storage._isCrossWithKa != rhs_storage._isCrossWithKa {return false}
//        if _storage._isAdmin != rhs_storage._isAdmin {return false}
//        if _storage._isSuper != rhs_storage._isSuper {return false}
//        if _storage._isTeam != rhs_storage._isTeam {return false}
//        if _storage._bizContent != rhs_storage._bizContent {return false}
//        if _storage._chatterExtraStates != rhs_storage._chatterExtraStates {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Chat.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "P2P"),
//    2: .same(proto: "GROUP"),
//    3: .same(proto: "TOPIC_GROUP"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_Chat.Status: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "NORMAL"),
//    1: .same(proto: "ARCHIVE"),
//    2: .same(proto: "DELETED"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_Chat.ChatMode: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_CHAT_MODE"),
//    1: .same(proto: "DEFAULT"),
//    2: .same(proto: "THREAD"),
//    3: .same(proto: "THREAD_V2"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_Chat.SupportView: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "VIEW_UNKNOWN"),
//    1: .same(proto: "VIEW_P2PGROUP"),
//    2: .same(proto: "VIEW_MEETING"),
//    3: .same(proto: "VIEW_THREAD"),
//    4: .same(proto: "VIEW_CRYPTO"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_Chat.Role: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "IGNORE"),
//    1: .same(proto: "MEMBER"),
//    2: .same(proto: "VISITOR"),
//    3: .same(proto: "THREAD_FOLLOWER"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_Chat.Announcement: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_Chat.protoMessageName + ".Announcement"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "content"),
//    2: .standard(proto: "update_time"),
//    3: .standard(proto: "last_editor_id"),
//    4: .standard(proto: "doc_url"),
//    5: .standard(proto: "enable_opendoc"),
//    6: .standard(proto: "use_opendoc"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._content)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._updateTime)
//      case 3: try decoder.decodeSingularStringField(value: &self._lastEditorID)
//      case 4: try decoder.decodeSingularStringField(value: &self._docURL)
//      case 5: try decoder.decodeSingularBoolField(value: &self._enableOpendoc)
//      case 6: try decoder.decodeSingularBoolField(value: &self._useOpendoc)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._content {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._updateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._lastEditorID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._docURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._enableOpendoc {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//    }
//    if let v = self._useOpendoc {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Chat.Announcement, rhs: LarkNCExtensionPB_Entities_Chat.Announcement) -> Bool {
//    if lhs._content != rhs._content {return false}
//    if lhs._updateTime != rhs._updateTime {return false}
//    if lhs._lastEditorID != rhs._lastEditorID {return false}
//    if lhs._docURL != rhs._docURL {return false}
//    if lhs._enableOpendoc != rhs._enableOpendoc {return false}
//    if lhs._useOpendoc != rhs._useOpendoc {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Chat.I18nInf: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_Chat.protoMessageName + ".I18nInf"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "i18n_names"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NNames)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.i18NNames.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NNames, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Chat.I18nInf, rhs: LarkNCExtensionPB_Entities_Chat.I18nInf) -> Bool {
//    if lhs.i18NNames != rhs.i18NNames {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatBizContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ChatBizContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "team_id"),
//    2: .standard(proto: "team_chat_type"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._teamID)
//      case 2: try decoder.decodeSingularEnumField(value: &self._teamChatType)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._teamID {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._teamChatType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatBizContent, rhs: LarkNCExtensionPB_Entities_ChatBizContent) -> Bool {
//    if lhs._teamID != rhs._teamID {return false}
//    if lhs._teamChatType != rhs._teamChatType {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatSecurityConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ChatSecurityConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "open_security"),
//    2: .same(proto: "limit"),
//    3: .same(proto: "read"),
//    4: .standard(proto: "urgent_limit"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _openSecurity: Bool? = nil
//    var _limit: Int32? = nil
//    var _read: LarkNCExtensionPB_Entities_ChatSecurityConfig.Read? = nil
//    var _urgentLimit: Int32? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _openSecurity = source._openSecurity
//      _limit = source._limit
//      _read = source._read
//      _urgentLimit = source._urgentLimit
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularBoolField(value: &_storage._openSecurity)
//        case 2: try decoder.decodeSingularInt32Field(value: &_storage._limit)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._read)
//        case 4: try decoder.decodeSingularInt32Field(value: &_storage._urgentLimit)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._openSecurity {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._limit {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._read {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._urgentLimit {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatSecurityConfig, rhs: LarkNCExtensionPB_Entities_ChatSecurityConfig) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._openSecurity != rhs_storage._openSecurity {return false}
//        if _storage._limit != rhs_storage._limit {return false}
//        if _storage._read != rhs_storage._read {return false}
//        if _storage._urgentLimit != rhs_storage._urgentLimit {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatSecurityConfig.Read: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatSecurityConfig.protoMessageName + ".Read"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "read_show_type"),
//    2: .same(proto: "limit"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._readShowType)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._limit)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._readShowType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._limit {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatSecurityConfig.Read, rhs: LarkNCExtensionPB_Entities_ChatSecurityConfig.Read) -> Bool {
//    if lhs._readShowType != rhs._readShowType {return false}
//    if lhs._limit != rhs._limit {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatSecurityConfig.Read.ReadShowType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "NO_LIMIT"),
//    2: .same(proto: "TWO_COLUMN_WITH_LIMIT"),
//    3: .same(proto: "ONE_COLUMN_WITH_LIMIT"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatMutableInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ChatMutableInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "name"),
//    3: .same(proto: "avatar"),
//    4: .standard(proto: "owner_id"),
//    5: .same(proto: "description"),
//    6: .standard(proto: "member_count"),
//    7: .standard(proto: "user_count"),
//    8: .standard(proto: "name_py"),
//    9: .standard(proto: "is_custom_icon"),
//    10: .standard(proto: "off_edit_group_chat_info"),
//    11: .same(proto: "announcement"),
//    12: .standard(proto: "chat_entity_setting"),
//    13: .standard(proto: "is_department"),
//    14: .standard(proto: "is_dissolved"),
//    15: .standard(proto: "is_public"),
//    16: .same(proto: "status"),
//    17: .standard(proto: "i18n_inf"),
//    18: .standard(proto: "is_public_v2"),
//    19: .standard(proto: "post_type"),
//    20: .standard(proto: "allow_post"),
//    21: .standard(proto: "security_config"),
//    22: .standard(proto: "burned_time"),
//    23: .standard(proto: "put_chatter_apply_count"),
//    24: .standard(proto: "show_banner"),
//    25: .standard(proto: "is_meeting"),
//    26: .standard(proto: "is_large_group"),
//    27: .standard(proto: "first_chat_message_position"),
//    28: .standard(proto: "chat_config"),
//    29: .standard(proto: "mini_avatar"),
//    30: .standard(proto: "sidebar_id"),
//    31: .same(proto: "tags"),
//    32: .same(proto: "extra"),
//    33: .standard(proto: "is_same_page_meeting"),
//    34: .standard(proto: "read_position"),
//    35: .standard(proto: "read_position_badge_count"),
//    36: .standard(proto: "last_message_position_badge_count"),
//    37: .standard(proto: "last_thread_position"),
//    38: .standard(proto: "read_thread_position"),
//    39: .standard(proto: "read_thread_position_badge_count"),
//    40: .standard(proto: "last_thread_position_badge_count"),
//    41: .standard(proto: "last_visible_message_position"),
//    42: .standard(proto: "last_visible_message_id"),
//    43: .standard(proto: "last_visible_thread_position"),
//    44: .standard(proto: "last_visible_thread_id"),
//    46: .standard(proto: "is_remind"),
//    47: .standard(proto: "is_tenant"),
//    48: .standard(proto: "last_message_position"),
//    49: .standard(proto: "my_threads_read_timestamp"),
//    50: .standard(proto: "my_threads_last_timestamp"),
//    51: .standard(proto: "is_edu"),
//    52: .standard(proto: "my_threads_last_display_message_id"),
//    53: .standard(proto: "my_threads_unread_count"),
//    54: .standard(proto: "is_admin"),
//    55: .standard(proto: "is_super"),
//    56: .standard(proto: "is_team"),
//    57: .standard(proto: "biz_content"),
//    58: .standard(proto: "chatter_extra_states"),
//    59: .standard(proto: "user_setting"),
//    60: .standard(proto: "message_visible_patch"),
//    61: .standard(proto: "thread_visible_patch"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _name: String? = nil
//    var _avatar: LarkNCExtensionPB_Entities_Image? = nil
//    var _ownerID: String? = nil
//    var _description_p: String? = nil
//    var _memberCount: Int32? = nil
//    var _userCount: Int32? = nil
//    var _namePy: String? = nil
//    var _isCustomIcon: Bool? = nil
//    var _offEditGroupChatInfo: Bool? = nil
//    var _announcement: LarkNCExtensionPB_Entities_Chat.Announcement? = nil
//    var _chatEntitySetting: LarkNCExtensionPB_Entities_ChatEntitySetting? = nil
//    var _isDepartment: Bool? = nil
//    var _isDissolved: Bool? = nil
//    var _isPublic: Bool? = nil
//    var _status: LarkNCExtensionPB_Entities_Chat.Status? = nil
//    var _i18NInf: LarkNCExtensionPB_Entities_Chat.I18nInf? = nil
//    var _isPublicV2: Bool? = nil
//    var _postType: LarkNCExtensionPB_Entities_ChatPostType? = nil
//    var _allowPost: Bool? = nil
//    var _securityConfig: LarkNCExtensionPB_Entities_ChatSecurityConfig? = nil
//    var _burnedTime: Int64? = nil
//    var _putChatterApplyCount: Int32? = nil
//    var _showBanner: Bool? = nil
//    var _isMeeting: Bool? = nil
//    var _isLargeGroup: Bool? = nil
//    var _firstChatMessagePosition: Int32? = nil
//    var _chatConfig: LarkNCExtensionPB_Entities_ChatConfig? = nil
//    var _miniAvatar: LarkNCExtensionPB_Entities_Image? = nil
//    var _sidebarID: String? = nil
//    var _tags: [Int32] = []
//    var _extra: Dictionary<String,String> = [:]
//    var _isSamePageMeeting: Bool? = nil
//    var _readPosition: Int32? = nil
//    var _readPositionBadgeCount: Int32? = nil
//    var _lastMessagePositionBadgeCount: Int32? = nil
//    var _lastThreadPosition: Int32? = nil
//    var _readThreadPosition: Int32? = nil
//    var _readThreadPositionBadgeCount: Int32? = nil
//    var _lastThreadPositionBadgeCount: Int32? = nil
//    var _lastVisibleMessagePosition: Int32? = nil
//    var _lastVisibleMessageID: String? = nil
//    var _lastVisibleThreadPosition: Int32? = nil
//    var _lastVisibleThreadID: String? = nil
//    var _isRemind: Bool? = nil
//    var _isTenant: Bool? = nil
//    var _lastMessagePosition: Int32? = nil
//    var _myThreadsReadTimestamp: Int64? = nil
//    var _myThreadsLastTimestamp: Int64? = nil
//    var _isEdu: Bool? = nil
//    var _myThreadsLastDisplayMessageID: Int64? = nil
//    var _myThreadsUnreadCount: Int32? = nil
//    var _isAdmin: Bool? = nil
//    var _isSuper: Bool? = nil
//    var _isTeam: Bool? = nil
//    var _bizContent: LarkNCExtensionPB_Entities_ChatBizContent? = nil
//    var _chatterExtraStates: Dictionary<Int32,Int32> = [:]
//    var _userSetting: LarkNCExtensionPB_Entities_ChatSetting? = nil
//    var _messageVisiblePatch: LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch? = nil
//    var _threadVisiblePatch: LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _name = source._name
//      _avatar = source._avatar
//      _ownerID = source._ownerID
//      _description_p = source._description_p
//      _memberCount = source._memberCount
//      _userCount = source._userCount
//      _namePy = source._namePy
//      _isCustomIcon = source._isCustomIcon
//      _offEditGroupChatInfo = source._offEditGroupChatInfo
//      _announcement = source._announcement
//      _chatEntitySetting = source._chatEntitySetting
//      _isDepartment = source._isDepartment
//      _isDissolved = source._isDissolved
//      _isPublic = source._isPublic
//      _status = source._status
//      _i18NInf = source._i18NInf
//      _isPublicV2 = source._isPublicV2
//      _postType = source._postType
//      _allowPost = source._allowPost
//      _securityConfig = source._securityConfig
//      _burnedTime = source._burnedTime
//      _putChatterApplyCount = source._putChatterApplyCount
//      _showBanner = source._showBanner
//      _isMeeting = source._isMeeting
//      _isLargeGroup = source._isLargeGroup
//      _firstChatMessagePosition = source._firstChatMessagePosition
//      _chatConfig = source._chatConfig
//      _miniAvatar = source._miniAvatar
//      _sidebarID = source._sidebarID
//      _tags = source._tags
//      _extra = source._extra
//      _isSamePageMeeting = source._isSamePageMeeting
//      _readPosition = source._readPosition
//      _readPositionBadgeCount = source._readPositionBadgeCount
//      _lastMessagePositionBadgeCount = source._lastMessagePositionBadgeCount
//      _lastThreadPosition = source._lastThreadPosition
//      _readThreadPosition = source._readThreadPosition
//      _readThreadPositionBadgeCount = source._readThreadPositionBadgeCount
//      _lastThreadPositionBadgeCount = source._lastThreadPositionBadgeCount
//      _lastVisibleMessagePosition = source._lastVisibleMessagePosition
//      _lastVisibleMessageID = source._lastVisibleMessageID
//      _lastVisibleThreadPosition = source._lastVisibleThreadPosition
//      _lastVisibleThreadID = source._lastVisibleThreadID
//      _isRemind = source._isRemind
//      _isTenant = source._isTenant
//      _lastMessagePosition = source._lastMessagePosition
//      _myThreadsReadTimestamp = source._myThreadsReadTimestamp
//      _myThreadsLastTimestamp = source._myThreadsLastTimestamp
//      _isEdu = source._isEdu
//      _myThreadsLastDisplayMessageID = source._myThreadsLastDisplayMessageID
//      _myThreadsUnreadCount = source._myThreadsUnreadCount
//      _isAdmin = source._isAdmin
//      _isSuper = source._isSuper
//      _isTeam = source._isTeam
//      _bizContent = source._bizContent
//      _chatterExtraStates = source._chatterExtraStates
//      _userSetting = source._userSetting
//      _messageVisiblePatch = source._messageVisiblePatch
//      _threadVisiblePatch = source._threadVisiblePatch
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._id == nil {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._ownerID)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._description_p)
//        case 6: try decoder.decodeSingularInt32Field(value: &_storage._memberCount)
//        case 7: try decoder.decodeSingularInt32Field(value: &_storage._userCount)
//        case 8: try decoder.decodeSingularStringField(value: &_storage._namePy)
//        case 9: try decoder.decodeSingularBoolField(value: &_storage._isCustomIcon)
//        case 10: try decoder.decodeSingularBoolField(value: &_storage._offEditGroupChatInfo)
//        case 11: try decoder.decodeSingularMessageField(value: &_storage._announcement)
//        case 12: try decoder.decodeSingularMessageField(value: &_storage._chatEntitySetting)
//        case 13: try decoder.decodeSingularBoolField(value: &_storage._isDepartment)
//        case 14: try decoder.decodeSingularBoolField(value: &_storage._isDissolved)
//        case 15: try decoder.decodeSingularBoolField(value: &_storage._isPublic)
//        case 16: try decoder.decodeSingularEnumField(value: &_storage._status)
//        case 17: try decoder.decodeSingularMessageField(value: &_storage._i18NInf)
//        case 18: try decoder.decodeSingularBoolField(value: &_storage._isPublicV2)
//        case 19: try decoder.decodeSingularEnumField(value: &_storage._postType)
//        case 20: try decoder.decodeSingularBoolField(value: &_storage._allowPost)
//        case 21: try decoder.decodeSingularMessageField(value: &_storage._securityConfig)
//        case 22: try decoder.decodeSingularInt64Field(value: &_storage._burnedTime)
//        case 23: try decoder.decodeSingularInt32Field(value: &_storage._putChatterApplyCount)
//        case 24: try decoder.decodeSingularBoolField(value: &_storage._showBanner)
//        case 25: try decoder.decodeSingularBoolField(value: &_storage._isMeeting)
//        case 26: try decoder.decodeSingularBoolField(value: &_storage._isLargeGroup)
//        case 27: try decoder.decodeSingularInt32Field(value: &_storage._firstChatMessagePosition)
//        case 28: try decoder.decodeSingularMessageField(value: &_storage._chatConfig)
//        case 29: try decoder.decodeSingularMessageField(value: &_storage._miniAvatar)
//        case 30: try decoder.decodeSingularStringField(value: &_storage._sidebarID)
//        case 31: try decoder.decodeRepeatedInt32Field(value: &_storage._tags)
//        case 32: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._extra)
//        case 33: try decoder.decodeSingularBoolField(value: &_storage._isSamePageMeeting)
//        case 34: try decoder.decodeSingularInt32Field(value: &_storage._readPosition)
//        case 35: try decoder.decodeSingularInt32Field(value: &_storage._readPositionBadgeCount)
//        case 36: try decoder.decodeSingularInt32Field(value: &_storage._lastMessagePositionBadgeCount)
//        case 37: try decoder.decodeSingularInt32Field(value: &_storage._lastThreadPosition)
//        case 38: try decoder.decodeSingularInt32Field(value: &_storage._readThreadPosition)
//        case 39: try decoder.decodeSingularInt32Field(value: &_storage._readThreadPositionBadgeCount)
//        case 40: try decoder.decodeSingularInt32Field(value: &_storage._lastThreadPositionBadgeCount)
//        case 41: try decoder.decodeSingularInt32Field(value: &_storage._lastVisibleMessagePosition)
//        case 42: try decoder.decodeSingularStringField(value: &_storage._lastVisibleMessageID)
//        case 43: try decoder.decodeSingularInt32Field(value: &_storage._lastVisibleThreadPosition)
//        case 44: try decoder.decodeSingularStringField(value: &_storage._lastVisibleThreadID)
//        case 46: try decoder.decodeSingularBoolField(value: &_storage._isRemind)
//        case 47: try decoder.decodeSingularBoolField(value: &_storage._isTenant)
//        case 48: try decoder.decodeSingularInt32Field(value: &_storage._lastMessagePosition)
//        case 49: try decoder.decodeSingularInt64Field(value: &_storage._myThreadsReadTimestamp)
//        case 50: try decoder.decodeSingularInt64Field(value: &_storage._myThreadsLastTimestamp)
//        case 51: try decoder.decodeSingularBoolField(value: &_storage._isEdu)
//        case 52: try decoder.decodeSingularInt64Field(value: &_storage._myThreadsLastDisplayMessageID)
//        case 53: try decoder.decodeSingularInt32Field(value: &_storage._myThreadsUnreadCount)
//        case 54: try decoder.decodeSingularBoolField(value: &_storage._isAdmin)
//        case 55: try decoder.decodeSingularBoolField(value: &_storage._isSuper)
//        case 56: try decoder.decodeSingularBoolField(value: &_storage._isTeam)
//        case 57: try decoder.decodeSingularMessageField(value: &_storage._bizContent)
//        case 58: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufInt32,LarkHTTP.ProtobufInt32>.self, value: &_storage._chatterExtraStates)
//        case 59: try decoder.decodeSingularMessageField(value: &_storage._userSetting)
//        case 60: try decoder.decodeSingularMessageField(value: &_storage._messageVisiblePatch)
//        case 61: try decoder.decodeSingularMessageField(value: &_storage._threadVisiblePatch)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._ownerID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._description_p {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._memberCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._userCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._namePy {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._isCustomIcon {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._offEditGroupChatInfo {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._announcement {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._chatEntitySetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._isDepartment {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._isDissolved {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._isPublic {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 16)
//      }
//      if let v = _storage._i18NInf {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
//      }
//      if let v = _storage._isPublicV2 {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
//      }
//      if let v = _storage._postType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 19)
//      }
//      if let v = _storage._allowPost {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
//      }
//      if let v = _storage._securityConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
//      }
//      if let v = _storage._burnedTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 22)
//      }
//      if let v = _storage._putChatterApplyCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 23)
//      }
//      if let v = _storage._showBanner {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 24)
//      }
//      if let v = _storage._isMeeting {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 25)
//      }
//      if let v = _storage._isLargeGroup {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 26)
//      }
//      if let v = _storage._firstChatMessagePosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 27)
//      }
//      if let v = _storage._chatConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
//      }
//      if let v = _storage._miniAvatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
//      }
//      if let v = _storage._sidebarID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 30)
//      }
//      if !_storage._tags.isEmpty {
//        try visitor.visitRepeatedInt32Field(value: _storage._tags, fieldNumber: 31)
//      }
//      if !_storage._extra.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._extra, fieldNumber: 32)
//      }
//      if let v = _storage._isSamePageMeeting {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 33)
//      }
//      if let v = _storage._readPosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 34)
//      }
//      if let v = _storage._readPositionBadgeCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 35)
//      }
//      if let v = _storage._lastMessagePositionBadgeCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 36)
//      }
//      if let v = _storage._lastThreadPosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 37)
//      }
//      if let v = _storage._readThreadPosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 38)
//      }
//      if let v = _storage._readThreadPositionBadgeCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 39)
//      }
//      if let v = _storage._lastThreadPositionBadgeCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 40)
//      }
//      if let v = _storage._lastVisibleMessagePosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 41)
//      }
//      if let v = _storage._lastVisibleMessageID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 42)
//      }
//      if let v = _storage._lastVisibleThreadPosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 43)
//      }
//      if let v = _storage._lastVisibleThreadID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 44)
//      }
//      if let v = _storage._isRemind {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 46)
//      }
//      if let v = _storage._isTenant {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 47)
//      }
//      if let v = _storage._lastMessagePosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 48)
//      }
//      if let v = _storage._myThreadsReadTimestamp {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 49)
//      }
//      if let v = _storage._myThreadsLastTimestamp {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 50)
//      }
//      if let v = _storage._isEdu {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 51)
//      }
//      if let v = _storage._myThreadsLastDisplayMessageID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 52)
//      }
//      if let v = _storage._myThreadsUnreadCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 53)
//      }
//      if let v = _storage._isAdmin {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 54)
//      }
//      if let v = _storage._isSuper {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 55)
//      }
//      if let v = _storage._isTeam {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 56)
//      }
//      if let v = _storage._bizContent {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
//      }
//      if !_storage._chatterExtraStates.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufInt32,LarkHTTP.ProtobufInt32>.self, value: _storage._chatterExtraStates, fieldNumber: 58)
//      }
//      if let v = _storage._userSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 59)
//      }
//      if let v = _storage._messageVisiblePatch {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 60)
//      }
//      if let v = _storage._threadVisiblePatch {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 61)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatMutableInfo, rhs: LarkNCExtensionPB_Entities_ChatMutableInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._ownerID != rhs_storage._ownerID {return false}
//        if _storage._description_p != rhs_storage._description_p {return false}
//        if _storage._memberCount != rhs_storage._memberCount {return false}
//        if _storage._userCount != rhs_storage._userCount {return false}
//        if _storage._namePy != rhs_storage._namePy {return false}
//        if _storage._isCustomIcon != rhs_storage._isCustomIcon {return false}
//        if _storage._offEditGroupChatInfo != rhs_storage._offEditGroupChatInfo {return false}
//        if _storage._announcement != rhs_storage._announcement {return false}
//        if _storage._chatEntitySetting != rhs_storage._chatEntitySetting {return false}
//        if _storage._isDepartment != rhs_storage._isDepartment {return false}
//        if _storage._isDissolved != rhs_storage._isDissolved {return false}
//        if _storage._isPublic != rhs_storage._isPublic {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._i18NInf != rhs_storage._i18NInf {return false}
//        if _storage._isPublicV2 != rhs_storage._isPublicV2 {return false}
//        if _storage._postType != rhs_storage._postType {return false}
//        if _storage._allowPost != rhs_storage._allowPost {return false}
//        if _storage._securityConfig != rhs_storage._securityConfig {return false}
//        if _storage._burnedTime != rhs_storage._burnedTime {return false}
//        if _storage._putChatterApplyCount != rhs_storage._putChatterApplyCount {return false}
//        if _storage._showBanner != rhs_storage._showBanner {return false}
//        if _storage._isMeeting != rhs_storage._isMeeting {return false}
//        if _storage._isLargeGroup != rhs_storage._isLargeGroup {return false}
//        if _storage._firstChatMessagePosition != rhs_storage._firstChatMessagePosition {return false}
//        if _storage._chatConfig != rhs_storage._chatConfig {return false}
//        if _storage._miniAvatar != rhs_storage._miniAvatar {return false}
//        if _storage._sidebarID != rhs_storage._sidebarID {return false}
//        if _storage._tags != rhs_storage._tags {return false}
//        if _storage._extra != rhs_storage._extra {return false}
//        if _storage._isSamePageMeeting != rhs_storage._isSamePageMeeting {return false}
//        if _storage._readPosition != rhs_storage._readPosition {return false}
//        if _storage._readPositionBadgeCount != rhs_storage._readPositionBadgeCount {return false}
//        if _storage._lastMessagePositionBadgeCount != rhs_storage._lastMessagePositionBadgeCount {return false}
//        if _storage._lastThreadPosition != rhs_storage._lastThreadPosition {return false}
//        if _storage._readThreadPosition != rhs_storage._readThreadPosition {return false}
//        if _storage._readThreadPositionBadgeCount != rhs_storage._readThreadPositionBadgeCount {return false}
//        if _storage._lastThreadPositionBadgeCount != rhs_storage._lastThreadPositionBadgeCount {return false}
//        if _storage._lastVisibleMessagePosition != rhs_storage._lastVisibleMessagePosition {return false}
//        if _storage._lastVisibleMessageID != rhs_storage._lastVisibleMessageID {return false}
//        if _storage._lastVisibleThreadPosition != rhs_storage._lastVisibleThreadPosition {return false}
//        if _storage._lastVisibleThreadID != rhs_storage._lastVisibleThreadID {return false}
//        if _storage._isRemind != rhs_storage._isRemind {return false}
//        if _storage._isTenant != rhs_storage._isTenant {return false}
//        if _storage._lastMessagePosition != rhs_storage._lastMessagePosition {return false}
//        if _storage._myThreadsReadTimestamp != rhs_storage._myThreadsReadTimestamp {return false}
//        if _storage._myThreadsLastTimestamp != rhs_storage._myThreadsLastTimestamp {return false}
//        if _storage._isEdu != rhs_storage._isEdu {return false}
//        if _storage._myThreadsLastDisplayMessageID != rhs_storage._myThreadsLastDisplayMessageID {return false}
//        if _storage._myThreadsUnreadCount != rhs_storage._myThreadsUnreadCount {return false}
//        if _storage._isAdmin != rhs_storage._isAdmin {return false}
//        if _storage._isSuper != rhs_storage._isSuper {return false}
//        if _storage._isTeam != rhs_storage._isTeam {return false}
//        if _storage._bizContent != rhs_storage._bizContent {return false}
//        if _storage._chatterExtraStates != rhs_storage._chatterExtraStates {return false}
//        if _storage._userSetting != rhs_storage._userSetting {return false}
//        if _storage._messageVisiblePatch != rhs_storage._messageVisiblePatch {return false}
//        if _storage._threadVisiblePatch != rhs_storage._threadVisiblePatch {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ContactSummary: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ContactSummary"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "user_id"),
//    2: .standard(proto: "user_name"),
//    3: .standard(proto: "user_en_name"),
//    4: .standard(proto: "department_name"),
//    5: .standard(proto: "avatar_key"),
//    6: .standard(proto: "tenant_name"),
//    7: .standard(proto: "avatar_fs_unit"),
//    8: .same(proto: "avatar"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _userID: String? = nil
//    var _userName: String? = nil
//    var _userEnName: String? = nil
//    var _departmentName: String? = nil
//    var _avatarKey: String? = nil
//    var _tenantName: String? = nil
//    var _avatarFsUnit: String? = nil
//    var _avatar: LarkNCExtensionPB_Entities_Image? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _userID = source._userID
//      _userName = source._userName
//      _userEnName = source._userEnName
//      _departmentName = source._departmentName
//      _avatarKey = source._avatarKey
//      _tenantName = source._tenantName
//      _avatarFsUnit = source._avatarFsUnit
//      _avatar = source._avatar
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._userID)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._userName)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._userEnName)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._departmentName)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._avatarKey)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._tenantName)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._avatarFsUnit)
//        case 8: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._userID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._userName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._userEnName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._departmentName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._avatarKey {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._tenantName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._avatarFsUnit {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ContactSummary, rhs: LarkNCExtensionPB_Entities_ContactSummary) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._userID != rhs_storage._userID {return false}
//        if _storage._userName != rhs_storage._userName {return false}
//        if _storage._userEnName != rhs_storage._userEnName {return false}
//        if _storage._departmentName != rhs_storage._departmentName {return false}
//        if _storage._avatarKey != rhs_storage._avatarKey {return false}
//        if _storage._tenantName != rhs_storage._tenantName {return false}
//        if _storage._avatarFsUnit != rhs_storage._avatarFsUnit {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatApplication: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ChatApplication"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "type"),
//    3: .standard(proto: "chat_id"),
//    4: .standard(proto: "contact_summary"),
//    5: .standard(proto: "apply_time"),
//    6: .standard(proto: "processed_time"),
//    7: .same(proto: "status"),
//    8: .standard(proto: "is_read"),
//    9: .standard(proto: "extra_message"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: Int64? = nil
//    var _type: LarkNCExtensionPB_Entities_ChatApplication.ChatApplicationType? = nil
//    var _chatID: String? = nil
//    var _contactSummary: LarkNCExtensionPB_Entities_ContactSummary? = nil
//    var _applyTime: Int64? = nil
//    var _processedTime: Int64? = nil
//    var _status: LarkNCExtensionPB_Entities_ChatApplication.ApplicationStatus? = nil
//    var _isRead: Bool? = nil
//    var _extraMessage: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _type = source._type
//      _chatID = source._chatID
//      _contactSummary = source._contactSummary
//      _applyTime = source._applyTime
//      _processedTime = source._processedTime
//      _status = source._status
//      _isRead = source._isRead
//      _extraMessage = source._extraMessage
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._chatID)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._contactSummary)
//        case 5: try decoder.decodeSingularInt64Field(value: &_storage._applyTime)
//        case 6: try decoder.decodeSingularInt64Field(value: &_storage._processedTime)
//        case 7: try decoder.decodeSingularEnumField(value: &_storage._status)
//        case 8: try decoder.decodeSingularBoolField(value: &_storage._isRead)
//        case 9: try decoder.decodeSingularStringField(value: &_storage._extraMessage)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._chatID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._contactSummary {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._applyTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._processedTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._isRead {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._extraMessage {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatApplication, rhs: LarkNCExtensionPB_Entities_ChatApplication) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._chatID != rhs_storage._chatID {return false}
//        if _storage._contactSummary != rhs_storage._contactSummary {return false}
//        if _storage._applyTime != rhs_storage._applyTime {return false}
//        if _storage._processedTime != rhs_storage._processedTime {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._isRead != rhs_storage._isRead {return false}
//        if _storage._extraMessage != rhs_storage._extraMessage {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatApplication.ApplicationStatus: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_STATUS"),
//    1: .same(proto: "PENDING"),
//    2: .same(proto: "AGREED"),
//    3: .same(proto: "REFUSED"),
//    4: .same(proto: "DELETED"),
//    5: .same(proto: "EXPIRED"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatApplication.ChatApplicationType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_TYPE"),
//    1: .same(proto: "FRIEND"),
//    2: .same(proto: "JOIN_CHAT"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_Contact: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Contact"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "chatter"),
//    3: .standard(proto: "is_deleted"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: Int64? = nil
//    var _chatter: LarkNCExtensionPB_Entities_Chatter? = nil
//    var _isDeleted: Bool? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _chatter = source._chatter
//      _isDeleted = source._isDeleted
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._chatter, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._chatter)
//        case 3: try decoder.decodeSingularBoolField(value: &_storage._isDeleted)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._chatter {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._isDeleted {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Contact, rhs: LarkNCExtensionPB_Entities_Contact) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._chatter != rhs_storage._chatter {return false}
//        if _storage._isDeleted != rhs_storage._isDeleted {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatShareInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ChatShareInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "type"),
//    3: .same(proto: "status"),
//    4: .standard(proto: "target_type"),
//    5: .standard(proto: "share_chat_id"),
//    6: .standard(proto: "chatter_id"),
//    7: .same(proto: "token"),
//    8: .standard(proto: "create_time"),
//    9: .standard(proto: "expire_time"),
//    10: .same(proto: "extra"),
//    11: .standard(proto: "chatter_type"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _type: LarkNCExtensionPB_Entities_ChatShareInfo.ShareType? = nil
//    var _status: LarkNCExtensionPB_Entities_ChatShareInfo.ShareStatus? = nil
//    var _targetType: LarkNCExtensionPB_Entities_ChatShareInfo.ShareTargetType? = nil
//    var _shareChatID: String? = nil
//    var _chatterID: String? = nil
//    var _token: String? = nil
//    var _createTime: Int64? = nil
//    var _expireTime: Int64? = nil
//    var _extra: LarkNCExtensionPB_Entities_ChatShareInfo.ShareExtra? = nil
//    var _chatterType: LarkNCExtensionPB_Entities_ChatterType? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _type = source._type
//      _status = source._status
//      _targetType = source._targetType
//      _shareChatID = source._shareChatID
//      _chatterID = source._chatterID
//      _token = source._token
//      _createTime = source._createTime
//      _expireTime = source._expireTime
//      _extra = source._extra
//      _chatterType = source._chatterType
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._status)
//        case 4: try decoder.decodeSingularEnumField(value: &_storage._targetType)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._shareChatID)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._chatterID)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._token)
//        case 8: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
//        case 9: try decoder.decodeSingularInt64Field(value: &_storage._expireTime)
//        case 10: try decoder.decodeSingularMessageField(value: &_storage._extra)
//        case 11: try decoder.decodeSingularEnumField(value: &_storage._chatterType)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._targetType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._shareChatID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._chatterID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._token {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._createTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._expireTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._extra {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._chatterType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatShareInfo, rhs: LarkNCExtensionPB_Entities_ChatShareInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._targetType != rhs_storage._targetType {return false}
//        if _storage._shareChatID != rhs_storage._shareChatID {return false}
//        if _storage._chatterID != rhs_storage._chatterID {return false}
//        if _storage._token != rhs_storage._token {return false}
//        if _storage._createTime != rhs_storage._createTime {return false}
//        if _storage._expireTime != rhs_storage._expireTime {return false}
//        if _storage._extra != rhs_storage._extra {return false}
//        if _storage._chatterType != rhs_storage._chatterType {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatShareInfo.ShareType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_TYPE"),
//    1: .same(proto: "CARD_MESSAGE"),
//    2: .same(proto: "QRCODE"),
//    3: .same(proto: "CARD_DOC"),
//    4: .same(proto: "LINK"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatShareInfo.ShareTargetType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_TARGET_TYPE"),
//    1: .same(proto: "TARGET_CHAT"),
//    2: .same(proto: "TARGET_CHATTER"),
//    3: .same(proto: "TARGET_QRCODE"),
//    4: .same(proto: "TARGET_DOC"),
//    5: .same(proto: "TARGET_LINK"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatShareInfo.ShareStatus: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_STATE"),
//    1: .same(proto: "ACTIVE"),
//    2: .same(proto: "EXPIRED"),
//    3: .same(proto: "DEACTIVED"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatShareInfo.ShareExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatShareInfo.protoMessageName + ".ShareExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "chat_id"),
//    2: .standard(proto: "chat_name"),
//    3: .standard(proto: "shared_url"),
//    4: .standard(proto: "user_id"),
//    5: .standard(proto: "user_name"),
//    6: .standard(proto: "doc_url"),
//    7: .standard(proto: "doc_name"),
//    8: .standard(proto: "doc_type"),
//    9: .standard(proto: "unauthorized_doc"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._chatID)
//      case 2: try decoder.decodeSingularStringField(value: &self._chatName)
//      case 3: try decoder.decodeSingularStringField(value: &self._sharedURL)
//      case 4: try decoder.decodeSingularStringField(value: &self._userID)
//      case 5: try decoder.decodeSingularStringField(value: &self._userName)
//      case 6: try decoder.decodeSingularStringField(value: &self._docURL)
//      case 7: try decoder.decodeSingularStringField(value: &self._docName)
//      case 8: try decoder.decodeSingularEnumField(value: &self._docType)
//      case 9: try decoder.decodeSingularBoolField(value: &self._unauthorizedDoc)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._chatID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._chatName {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._sharedURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._userID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._userName {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    if let v = self._docURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//    }
//    if let v = self._docName {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//    }
//    if let v = self._docType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
//    }
//    if let v = self._unauthorizedDoc {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatShareInfo.ShareExtra, rhs: LarkNCExtensionPB_Entities_ChatShareInfo.ShareExtra) -> Bool {
//    if lhs._chatID != rhs._chatID {return false}
//    if lhs._chatName != rhs._chatName {return false}
//    if lhs._sharedURL != rhs._sharedURL {return false}
//    if lhs._userID != rhs._userID {return false}
//    if lhs._userName != rhs._userName {return false}
//    if lhs._docURL != rhs._docURL {return false}
//    if lhs._docName != rhs._docName {return false}
//    if lhs._docType != rhs._docType {return false}
//    if lhs._unauthorizedDoc != rhs._unauthorizedDoc {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatJoinLeaveHistory: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ChatJoinLeaveHistory"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "action"),
//    3: .same(proto: "event"),
//    4: .standard(proto: "chatter_id"),
//    5: .standard(proto: "chat_id"),
//    6: .standard(proto: "create_time"),
//    7: .same(proto: "extra"),
//    8: .standard(proto: "chatter_type"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _action: LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.Action? = nil
//    var _event: LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.EventType? = nil
//    var _chatterID: String? = nil
//    var _chatID: String? = nil
//    var _createTime: Int64? = nil
//    var _extra: LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.HistoryExtra? = nil
//    var _chatterType: LarkNCExtensionPB_Entities_ChatterType? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _action = source._action
//      _event = source._event
//      _chatterID = source._chatterID
//      _chatID = source._chatID
//      _createTime = source._createTime
//      _extra = source._extra
//      _chatterType = source._chatterType
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._action)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._event)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._chatterID)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._chatID)
//        case 6: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._extra)
//        case 8: try decoder.decodeSingularEnumField(value: &_storage._chatterType)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._action {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._event {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._chatterID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._chatID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._createTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._extra {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._chatterType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatJoinLeaveHistory, rhs: LarkNCExtensionPB_Entities_ChatJoinLeaveHistory) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._action != rhs_storage._action {return false}
//        if _storage._event != rhs_storage._event {return false}
//        if _storage._chatterID != rhs_storage._chatterID {return false}
//        if _storage._chatID != rhs_storage._chatID {return false}
//        if _storage._createTime != rhs_storage._createTime {return false}
//        if _storage._extra != rhs_storage._extra {return false}
//        if _storage._chatterType != rhs_storage._chatterType {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.Action: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_ACTION"),
//    1: .same(proto: "JOIN"),
//    2: .same(proto: "LEAVE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.EventType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_TYPE"),
//    1: .same(proto: "DEL_SELF"),
//    2: .same(proto: "DEL_ADMIN"),
//    10: .same(proto: "INV_MESSAGE_CARD"),
//    11: .same(proto: "INV_QR_CODE"),
//    12: .same(proto: "INV_CHATTER"),
//    13: .same(proto: "INV_DOC"),
//    14: .same(proto: "INV_SEARCH"),
//    15: .same(proto: "INV_SELF"),
//    16: .same(proto: "INV_P2P_CHAT"),
//    17: .same(proto: "INV_GROUP_CHAT"),
//    18: .same(proto: "INV_LINK"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.ContentValue: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.protoMessageName + ".ContentValue"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "type"),
//    3: .standard(proto: "doc_url"),
//    4: .standard(proto: "doc_name"),
//    5: .standard(proto: "unauthorized_doc"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularEnumField(value: &self._type)
//      case 3: try decoder.decodeSingularStringField(value: &self._docURL)
//      case 4: try decoder.decodeSingularStringField(value: &self._docName)
//      case 5: try decoder.decodeSingularBoolField(value: &self._unauthorizedDoc)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    if let v = self._docURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._docName {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._unauthorizedDoc {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.ContentValue, rhs: LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.ContentValue) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._type != rhs._type {return false}
//    if lhs._docURL != rhs._docURL {return false}
//    if lhs._docName != rhs._docName {return false}
//    if lhs._unauthorizedDoc != rhs._unauthorizedDoc {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.ContentValue.ValueType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_VALUE_TYPE"),
//    1: .same(proto: "USER"),
//    2: .same(proto: "BOT"),
//    3: .same(proto: "CHAT"),
//    4: .same(proto: "DOC"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.HistoryExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.protoMessageName + ".HistoryExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "template"),
//    2: .standard(proto: "content_values"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._template)
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.ContentValue>.self, value: &self.contentValues)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._template {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if !self.contentValues.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.ContentValue>.self, value: self.contentValues, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.HistoryExtra, rhs: LarkNCExtensionPB_Entities_ChatJoinLeaveHistory.HistoryExtra) -> Bool {
//    if lhs._template != rhs._template {return false}
//    if lhs.contentValues != rhs.contentValues {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ThreadStateInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ThreadStateInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "state"),
//    2: .standard(proto: "operator_id"),
//    3: .standard(proto: "update_time_ms"),
//    4: .standard(proto: "state_num"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._state)
//      case 2: try decoder.decodeSingularStringField(value: &self._operatorID)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._updateTimeMs)
//      case 4: try decoder.decodeSingularInt32Field(value: &self._stateNum)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._state {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._operatorID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._updateTimeMs {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._stateNum {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ThreadStateInfo, rhs: LarkNCExtensionPB_Entities_ThreadStateInfo) -> Bool {
//    if lhs._state != rhs._state {return false}
//    if lhs._operatorID != rhs._operatorID {return false}
//    if lhs._updateTimeMs != rhs._updateTimeMs {return false}
//    if lhs._stateNum != rhs._stateNum {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Thread: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Thread"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .standard(proto: "channel_id"),
//    3: .standard(proto: "channel_type"),
//    4: .same(proto: "topic"),
//    5: .same(proto: "position"),
//    6: .standard(proto: "update_time"),
//    7: .standard(proto: "root_message_id"),
//    8: .standard(proto: "last_message_id"),
//    9: .standard(proto: "last_message_position"),
//    10: .standard(proto: "new_message_count"),
//    11: .standard(proto: "reply_count"),
//    12: .standard(proto: "no_badged_new_message_count"),
//    13: .standard(proto: "message_start_position"),
//    14: .standard(proto: "owner_id"),
//    15: .standard(proto: "is_visible"),
//    16: .standard(proto: "is_badged"),
//    17: .standard(proto: "badge_count"),
//    18: .standard(proto: "last_visible_message_position"),
//    19: .standard(proto: "last_visible_message_id"),
//    20: .standard(proto: "read_position"),
//    21: .standard(proto: "read_position_badge_count"),
//    22: .standard(proto: "last_message_position_badge_count"),
//    23: .standard(proto: "create_time"),
//    24: .same(proto: "subtitle"),
//    25: .standard(proto: "is_no_trace_removed"),
//    26: .standard(proto: "no_reply_count"),
//    27: .standard(proto: "state_info"),
//    28: .standard(proto: "rank_time"),
//    29: .standard(proto: "can_anonymous_reply"),
//    30: .standard(proto: "top_repliers"),
//    31: .standard(proto: "latest_reply_time"),
//    32: .standard(proto: "is_reply_in_thread"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _channelID: String? = nil
//    var _channelType: LarkNCExtensionPB_Entities_ChannelType? = nil
//    var _topic: String? = nil
//    var _position: Int32? = nil
//    var _updateTime: Int64? = nil
//    var _rootMessageID: String? = nil
//    var _lastMessageID: String? = nil
//    var _lastMessagePosition: Int32? = nil
//    var _newMessageCount: Int32? = nil
//    var _replyCount: Int32? = nil
//    var _noBadgedNewMessageCount: Int32? = nil
//    var _messageStartPosition: Int32? = nil
//    var _ownerID: String? = nil
//    var _isVisible: Bool? = nil
//    var _isBadged: Bool? = nil
//    var _badgeCount: Int32? = nil
//    var _lastVisibleMessagePosition: Int32? = nil
//    var _lastVisibleMessageID: String? = nil
//    var _readPosition: Int32? = nil
//    var _readPositionBadgeCount: Int32? = nil
//    var _lastMessagePositionBadgeCount: Int32? = nil
//    var _createTime: Int64? = nil
//    var _subtitle: String? = nil
//    var _isNoTraceRemoved: Bool? = nil
//    var _noReplyCount: Int32? = nil
//    var _stateInfo: LarkNCExtensionPB_Entities_ThreadStateInfo? = nil
//    var _rankTime: Int64? = nil
//    var _canAnonymousReply: Bool? = nil
//    var _topRepliers: [Int64] = []
//    var _latestReplyTime: Int64? = nil
//    var _isReplyInThread: Bool? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _channelID = source._channelID
//      _channelType = source._channelType
//      _topic = source._topic
//      _position = source._position
//      _updateTime = source._updateTime
//      _rootMessageID = source._rootMessageID
//      _lastMessageID = source._lastMessageID
//      _lastMessagePosition = source._lastMessagePosition
//      _newMessageCount = source._newMessageCount
//      _replyCount = source._replyCount
//      _noBadgedNewMessageCount = source._noBadgedNewMessageCount
//      _messageStartPosition = source._messageStartPosition
//      _ownerID = source._ownerID
//      _isVisible = source._isVisible
//      _isBadged = source._isBadged
//      _badgeCount = source._badgeCount
//      _lastVisibleMessagePosition = source._lastVisibleMessagePosition
//      _lastVisibleMessageID = source._lastVisibleMessageID
//      _readPosition = source._readPosition
//      _readPositionBadgeCount = source._readPositionBadgeCount
//      _lastMessagePositionBadgeCount = source._lastMessagePositionBadgeCount
//      _createTime = source._createTime
//      _subtitle = source._subtitle
//      _isNoTraceRemoved = source._isNoTraceRemoved
//      _noReplyCount = source._noReplyCount
//      _stateInfo = source._stateInfo
//      _rankTime = source._rankTime
//      _canAnonymousReply = source._canAnonymousReply
//      _topRepliers = source._topRepliers
//      _latestReplyTime = source._latestReplyTime
//      _isReplyInThread = source._isReplyInThread
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._id == nil {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._channelID)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._channelType)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._topic)
//        case 5: try decoder.decodeSingularInt32Field(value: &_storage._position)
//        case 6: try decoder.decodeSingularInt64Field(value: &_storage._updateTime)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._rootMessageID)
//        case 8: try decoder.decodeSingularStringField(value: &_storage._lastMessageID)
//        case 9: try decoder.decodeSingularInt32Field(value: &_storage._lastMessagePosition)
//        case 10: try decoder.decodeSingularInt32Field(value: &_storage._newMessageCount)
//        case 11: try decoder.decodeSingularInt32Field(value: &_storage._replyCount)
//        case 12: try decoder.decodeSingularInt32Field(value: &_storage._noBadgedNewMessageCount)
//        case 13: try decoder.decodeSingularInt32Field(value: &_storage._messageStartPosition)
//        case 14: try decoder.decodeSingularStringField(value: &_storage._ownerID)
//        case 15: try decoder.decodeSingularBoolField(value: &_storage._isVisible)
//        case 16: try decoder.decodeSingularBoolField(value: &_storage._isBadged)
//        case 17: try decoder.decodeSingularInt32Field(value: &_storage._badgeCount)
//        case 18: try decoder.decodeSingularInt32Field(value: &_storage._lastVisibleMessagePosition)
//        case 19: try decoder.decodeSingularStringField(value: &_storage._lastVisibleMessageID)
//        case 20: try decoder.decodeSingularInt32Field(value: &_storage._readPosition)
//        case 21: try decoder.decodeSingularInt32Field(value: &_storage._readPositionBadgeCount)
//        case 22: try decoder.decodeSingularInt32Field(value: &_storage._lastMessagePositionBadgeCount)
//        case 23: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
//        case 24: try decoder.decodeSingularStringField(value: &_storage._subtitle)
//        case 25: try decoder.decodeSingularBoolField(value: &_storage._isNoTraceRemoved)
//        case 26: try decoder.decodeSingularInt32Field(value: &_storage._noReplyCount)
//        case 27: try decoder.decodeSingularMessageField(value: &_storage._stateInfo)
//        case 28: try decoder.decodeSingularInt64Field(value: &_storage._rankTime)
//        case 29: try decoder.decodeSingularBoolField(value: &_storage._canAnonymousReply)
//        case 30: try decoder.decodeRepeatedInt64Field(value: &_storage._topRepliers)
//        case 31: try decoder.decodeSingularInt64Field(value: &_storage._latestReplyTime)
//        case 32: try decoder.decodeSingularBoolField(value: &_storage._isReplyInThread)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._channelID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._channelType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._topic {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._position {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._updateTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._rootMessageID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._lastMessageID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._lastMessagePosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._newMessageCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._replyCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._noBadgedNewMessageCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._messageStartPosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._ownerID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._isVisible {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
//      }
//      if let v = _storage._isBadged {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
//      }
//      if let v = _storage._badgeCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
//      }
//      if let v = _storage._lastVisibleMessagePosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 18)
//      }
//      if let v = _storage._lastVisibleMessageID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 19)
//      }
//      if let v = _storage._readPosition {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 20)
//      }
//      if let v = _storage._readPositionBadgeCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
//      }
//      if let v = _storage._lastMessagePositionBadgeCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 22)
//      }
//      if let v = _storage._createTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 23)
//      }
//      if let v = _storage._subtitle {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
//      }
//      if let v = _storage._isNoTraceRemoved {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 25)
//      }
//      if let v = _storage._noReplyCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 26)
//      }
//      if let v = _storage._stateInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
//      }
//      if let v = _storage._rankTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 28)
//      }
//      if let v = _storage._canAnonymousReply {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 29)
//      }
//      if !_storage._topRepliers.isEmpty {
//        try visitor.visitRepeatedInt64Field(value: _storage._topRepliers, fieldNumber: 30)
//      }
//      if let v = _storage._latestReplyTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 31)
//      }
//      if let v = _storage._isReplyInThread {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 32)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Thread, rhs: LarkNCExtensionPB_Entities_Thread) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._channelID != rhs_storage._channelID {return false}
//        if _storage._channelType != rhs_storage._channelType {return false}
//        if _storage._topic != rhs_storage._topic {return false}
//        if _storage._position != rhs_storage._position {return false}
//        if _storage._updateTime != rhs_storage._updateTime {return false}
//        if _storage._rootMessageID != rhs_storage._rootMessageID {return false}
//        if _storage._lastMessageID != rhs_storage._lastMessageID {return false}
//        if _storage._lastMessagePosition != rhs_storage._lastMessagePosition {return false}
//        if _storage._newMessageCount != rhs_storage._newMessageCount {return false}
//        if _storage._replyCount != rhs_storage._replyCount {return false}
//        if _storage._noBadgedNewMessageCount != rhs_storage._noBadgedNewMessageCount {return false}
//        if _storage._messageStartPosition != rhs_storage._messageStartPosition {return false}
//        if _storage._ownerID != rhs_storage._ownerID {return false}
//        if _storage._isVisible != rhs_storage._isVisible {return false}
//        if _storage._isBadged != rhs_storage._isBadged {return false}
//        if _storage._badgeCount != rhs_storage._badgeCount {return false}
//        if _storage._lastVisibleMessagePosition != rhs_storage._lastVisibleMessagePosition {return false}
//        if _storage._lastVisibleMessageID != rhs_storage._lastVisibleMessageID {return false}
//        if _storage._readPosition != rhs_storage._readPosition {return false}
//        if _storage._readPositionBadgeCount != rhs_storage._readPositionBadgeCount {return false}
//        if _storage._lastMessagePositionBadgeCount != rhs_storage._lastMessagePositionBadgeCount {return false}
//        if _storage._createTime != rhs_storage._createTime {return false}
//        if _storage._subtitle != rhs_storage._subtitle {return false}
//        if _storage._isNoTraceRemoved != rhs_storage._isNoTraceRemoved {return false}
//        if _storage._noReplyCount != rhs_storage._noReplyCount {return false}
//        if _storage._stateInfo != rhs_storage._stateInfo {return false}
//        if _storage._rankTime != rhs_storage._rankTime {return false}
//        if _storage._canAnonymousReply != rhs_storage._canAnonymousReply {return false}
//        if _storage._topRepliers != rhs_storage._topRepliers {return false}
//        if _storage._latestReplyTime != rhs_storage._latestReplyTime {return false}
//        if _storage._isReplyInThread != rhs_storage._isReplyInThread {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MessageWithThread: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MessageWithThread"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "root_message"),
//    2: .standard(proto: "last_messages"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _rootMessage: LarkNCExtensionPB_Entities_Message? = nil
//    var _lastMessages: [LarkNCExtensionPB_Entities_Message] = []
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _rootMessage = source._rootMessage
//      _lastMessages = source._lastMessages
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._rootMessage == nil {return false}
//      if let v = _storage._rootMessage, !v.isInitialized {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._lastMessages) {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._rootMessage)
//        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._lastMessages)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._rootMessage {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if !_storage._lastMessages.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._lastMessages, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MessageWithThread, rhs: LarkNCExtensionPB_Entities_MessageWithThread) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._rootMessage != rhs_storage._rootMessage {return false}
//        if _storage._lastMessages != rhs_storage._lastMessages {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ThreadSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ThreadSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "thread_id"),
//    2: .standard(proto: "is_follow"),
//    3: .standard(proto: "is_follow_v2"),
//    4: .standard(proto: "anonymous_id"),
//    5: .standard(proto: "is_remind"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._threadID == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._threadID)
//      case 2: try decoder.decodeSingularBoolField(value: &self._isFollow)
//      case 3: try decoder.decodeSingularBoolField(value: &self._isFollowV2)
//      case 4: try decoder.decodeSingularStringField(value: &self._anonymousID)
//      case 5: try decoder.decodeSingularBoolField(value: &self._isRemind)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._threadID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._isFollow {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    if let v = self._isFollowV2 {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//    }
//    if let v = self._anonymousID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._isRemind {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ThreadSetting, rhs: LarkNCExtensionPB_Entities_ThreadSetting) -> Bool {
//    if lhs._threadID != rhs._threadID {return false}
//    if lhs._isFollow != rhs._isFollow {return false}
//    if lhs._isFollowV2 != rhs._isFollowV2 {return false}
//    if lhs._anonymousID != rhs._anonymousID {return false}
//    if lhs._isRemind != rhs._isRemind {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ThreadFilter: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ThreadFilter"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "filter_id"),
//    2: .standard(proto: "i18n_names"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._filterID == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._filterID)
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NNames)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._filterID {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if !self.i18NNames.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NNames, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ThreadFilter, rhs: LarkNCExtensionPB_Entities_ThreadFilter) -> Bool {
//    if lhs._filterID != rhs._filterID {return false}
//    if lhs.i18NNames != rhs.i18NNames {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AccessibleInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".AccessibleInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "is_accessible"),
//    2: .standard(proto: "inaccessible_code"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._isAccessible)
//      case 2: try decoder.decodeSingularEnumField(value: &self._inaccessibleCode)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._isAccessible {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._inaccessibleCode {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AccessibleInfo, rhs: LarkNCExtensionPB_Entities_AccessibleInfo) -> Bool {
//    if lhs._isAccessible != rhs._isAccessible {return false}
//    if lhs._inaccessibleCode != rhs._inaccessibleCode {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AccessibleInfo.InaccessibleCode: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "DEFAULT"),
//    1: .same(proto: "EXECUTIVES"),
//    2: .same(proto: "EMPTY_NAME"),
//    3: .same(proto: "EMPTY_PHONE"),
//    4: .same(proto: "CROSS_TENANT"),
//    5: .same(proto: "NOT_FRIEND"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_UserConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UserConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "phone_call_accessible"),
//    2: .standard(proto: "voice_call_accessible"),
//    3: .standard(proto: "video_call_accessible"),
//    4: .standard(proto: "access_phone_call"),
//    5: .standard(proto: "access_voice_call"),
//    6: .standard(proto: "access_video_call"),
//    7: .standard(proto: "access_urgent"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _phoneCallAccessible: Bool? = nil
//    var _voiceCallAccessible: Bool? = nil
//    var _videoCallAccessible: Bool? = nil
//    var _accessPhoneCall: LarkNCExtensionPB_Entities_AccessibleInfo? = nil
//    var _accessVoiceCall: LarkNCExtensionPB_Entities_AccessibleInfo? = nil
//    var _accessVideoCall: LarkNCExtensionPB_Entities_AccessibleInfo? = nil
//    var _accessUrgent: LarkNCExtensionPB_Entities_AccessibleInfo? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _phoneCallAccessible = source._phoneCallAccessible
//      _voiceCallAccessible = source._voiceCallAccessible
//      _videoCallAccessible = source._videoCallAccessible
//      _accessPhoneCall = source._accessPhoneCall
//      _accessVoiceCall = source._accessVoiceCall
//      _accessVideoCall = source._accessVideoCall
//      _accessUrgent = source._accessUrgent
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularBoolField(value: &_storage._phoneCallAccessible)
//        case 2: try decoder.decodeSingularBoolField(value: &_storage._voiceCallAccessible)
//        case 3: try decoder.decodeSingularBoolField(value: &_storage._videoCallAccessible)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._accessPhoneCall)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._accessVoiceCall)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._accessVideoCall)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._accessUrgent)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._phoneCallAccessible {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._voiceCallAccessible {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._videoCallAccessible {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._accessPhoneCall {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._accessVoiceCall {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._accessVideoCall {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._accessUrgent {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserConfig, rhs: LarkNCExtensionPB_Entities_UserConfig) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._phoneCallAccessible != rhs_storage._phoneCallAccessible {return false}
//        if _storage._voiceCallAccessible != rhs_storage._voiceCallAccessible {return false}
//        if _storage._videoCallAccessible != rhs_storage._videoCallAccessible {return false}
//        if _storage._accessPhoneCall != rhs_storage._accessPhoneCall {return false}
//        if _storage._accessVoiceCall != rhs_storage._accessVoiceCall {return false}
//        if _storage._accessVideoCall != rhs_storage._accessVideoCall {return false}
//        if _storage._accessUrgent != rhs_storage._accessUrgent {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_User: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".User"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "name"),
//    3: .same(proto: "avatar"),
//    4: .same(proto: "status"),
//    5: .standard(proto: "avatar_url"),
//    6: .standard(proto: "name_pinyin"),
//    7: .standard(proto: "update_time"),
//    9: .standard(proto: "is_registered"),
//    10: .standard(proto: "name_py"),
//    11: .standard(proto: "tenant_id"),
//    12: .same(proto: "description"),
//    13: .standard(proto: "description_flag"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _name: String? = nil
//    var _avatar: LarkNCExtensionPB_Entities_ImageSet? = nil
//    var _status: Int32? = nil
//    var _avatarURL: String? = nil
//    var _namePinyin: String? = nil
//    var _updateTime: Int64? = nil
//    var _isRegistered: Bool? = nil
//    var _namePy: String? = nil
//    var _tenantID: String? = nil
//    var _description_p: String? = nil
//    var _descriptionFlag: LarkNCExtensionPB_Entities_User.DescriptionFlag? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _name = source._name
//      _avatar = source._avatar
//      _status = source._status
//      _avatarURL = source._avatarURL
//      _namePinyin = source._namePinyin
//      _updateTime = source._updateTime
//      _isRegistered = source._isRegistered
//      _namePy = source._namePy
//      _tenantID = source._tenantID
//      _description_p = source._description_p
//      _descriptionFlag = source._descriptionFlag
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 4: try decoder.decodeSingularInt32Field(value: &_storage._status)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._avatarURL)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._namePinyin)
//        case 7: try decoder.decodeSingularInt64Field(value: &_storage._updateTime)
//        case 9: try decoder.decodeSingularBoolField(value: &_storage._isRegistered)
//        case 10: try decoder.decodeSingularStringField(value: &_storage._namePy)
//        case 11: try decoder.decodeSingularStringField(value: &_storage._tenantID)
//        case 12: try decoder.decodeSingularStringField(value: &_storage._description_p)
//        case 13: try decoder.decodeSingularEnumField(value: &_storage._descriptionFlag)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._avatarURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._namePinyin {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._updateTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._isRegistered {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._namePy {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._tenantID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._description_p {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._descriptionFlag {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_User, rhs: LarkNCExtensionPB_Entities_User) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._avatarURL != rhs_storage._avatarURL {return false}
//        if _storage._namePinyin != rhs_storage._namePinyin {return false}
//        if _storage._updateTime != rhs_storage._updateTime {return false}
//        if _storage._isRegistered != rhs_storage._isRegistered {return false}
//        if _storage._namePy != rhs_storage._namePy {return false}
//        if _storage._tenantID != rhs_storage._tenantID {return false}
//        if _storage._description_p != rhs_storage._description_p {return false}
//        if _storage._descriptionFlag != rhs_storage._descriptionFlag {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_User.DescriptionFlag: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "DEFAULT"),
//    1: .same(proto: "ON_BUSINESS"),
//    2: .same(proto: "ON_LEAVE"),
//    3: .same(proto: "ON_MEETING"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_BotConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".BotConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "with_bot_tag"),
//    2: .standard(proto: "in_contacts"),
//    3: .standard(proto: "can_join_group"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._withBotTag)
//      case 2: try decoder.decodeSingularBoolField(value: &self._inContacts)
//      case 3: try decoder.decodeSingularBoolField(value: &self._canJoinGroup)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._withBotTag {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._inContacts {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    if let v = self._canJoinGroup {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_BotConfig, rhs: LarkNCExtensionPB_Entities_BotConfig) -> Bool {
//    if lhs._withBotTag != rhs._withBotTag {return false}
//    if lhs._inContacts != rhs._inContacts {return false}
//    if lhs._canJoinGroup != rhs._canJoinGroup {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ActionExtraInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ActionExtraInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "admin_id"),
//    2: .same(proto: "url"),
//    3: .same(proto: "params"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._adminID)
//      case 2: try decoder.decodeSingularStringField(value: &self._url)
//      case 3: try decoder.decodeSingularStringField(value: &self._params)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._adminID {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._url {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._params {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ActionExtraInfo, rhs: LarkNCExtensionPB_Entities_ActionExtraInfo) -> Bool {
//    if lhs._adminID != rhs._adminID {return false}
//    if lhs._url != rhs._url {return false}
//    if lhs._params != rhs._params {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ActionInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ActionInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "i18n_text"),
//    2: .standard(proto: "operator_code"),
//    3: .standard(proto: "action_code"),
//    4: .same(proto: "extra"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _i18NText: Dictionary<String,String> = [:]
//    var _operatorCode: LarkNCExtensionPB_Entities_ActionInfo.ActionOperateCode? = nil
//    var _actionCode: LarkNCExtensionPB_Entities_ActionInfo.ActionCode? = nil
//    var _extra: LarkNCExtensionPB_Entities_ActionExtraInfo? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _i18NText = source._i18NText
//      _operatorCode = source._operatorCode
//      _actionCode = source._actionCode
//      _extra = source._extra
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._i18NText)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._operatorCode)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._actionCode)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._extra)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if !_storage._i18NText.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._i18NText, fieldNumber: 1)
//      }
//      if let v = _storage._operatorCode {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._actionCode {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._extra {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ActionInfo, rhs: LarkNCExtensionPB_Entities_ActionInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._i18NText != rhs_storage._i18NText {return false}
//        if _storage._operatorCode != rhs_storage._operatorCode {return false}
//        if _storage._actionCode != rhs_storage._actionCode {return false}
//        if _storage._extra != rhs_storage._extra {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ActionInfo.ActionOperateCode: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "CLOSE_WINDOW"),
//    2: .same(proto: "CLOSE_APP"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ActionInfo.ActionCode: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "ACTION_NONE"),
//    1: .same(proto: "ACTION_CONTACT_ADMIN"),
//    2: .same(proto: "ACTION_APPLY_USE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_TipsContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TipsContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "version"),
//    2: .standard(proto: "i18n_title"),
//    3: .standard(proto: "i18n_msg"),
//    4: .same(proto: "actions"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._version)
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NTitle)
//      case 3: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NMsg)
//      case 4: try decoder.decodeRepeatedMessageField(value: &self.actions)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._version {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if !self.i18NTitle.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NTitle, fieldNumber: 2)
//    }
//    if !self.i18NMsg.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NMsg, fieldNumber: 3)
//    }
//    if !self.actions.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.actions, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TipsContent, rhs: LarkNCExtensionPB_Entities_TipsContent) -> Bool {
//    if lhs._version != rhs._version {return false}
//    if lhs.i18NTitle != rhs.i18NTitle {return false}
//    if lhs.i18NMsg != rhs.i18NMsg {return false}
//    if lhs.actions != rhs.actions {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_BotTipsContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".BotTipsContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "version"),
//    2: .standard(proto: "i18n_msg"),
//    3: .standard(proto: "admin_id"),
//    4: .standard(proto: "admin_name"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._version)
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NMsg)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._adminID)
//      case 4: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.adminName)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._version {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if !self.i18NMsg.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NMsg, fieldNumber: 2)
//    }
//    if let v = self._adminID {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if !self.adminName.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.adminName, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_BotTipsContent, rhs: LarkNCExtensionPB_Entities_BotTipsContent) -> Bool {
//    if lhs._version != rhs._version {return false}
//    if lhs.i18NMsg != rhs.i18NMsg {return false}
//    if lhs._adminID != rhs._adminID {return false}
//    if lhs.adminName != rhs.adminName {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_BotCheckStatus: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".BotCheckStatus"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "bot_id"),
//    2: .same(proto: "status"),
//    3: .same(proto: "tips"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _botID: Int64? = nil
//    var _status: LarkNCExtensionPB_Entities_BotCheckStatus.BotUsageStatus? = nil
//    var _tips: LarkNCExtensionPB_Entities_BotTipsContent? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _botID = source._botID
//      _status = source._status
//      _tips = source._tips
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt64Field(value: &_storage._botID)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._status)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._tips)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._botID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._tips {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_BotCheckStatus, rhs: LarkNCExtensionPB_Entities_BotCheckStatus) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._botID != rhs_storage._botID {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._tips != rhs_storage._tips {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_BotCheckStatus.BotUsageStatus: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "BOT_USABLE"),
//    2: .same(proto: "BOT_TENANT_FORBIDDEN"),
//    3: .same(proto: "BOT_PLATFORM_FORBIDDEN"),
//    4: .same(proto: "BOT_DEVELOPER_FORBIDDEN"),
//    5: .same(proto: "BOT_OFFLINE"),
//    6: .same(proto: "BOT_USER_UNVISIBLE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_AppStatusInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".AppStatusInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "cli_id"),
//    2: .same(proto: "status"),
//    3: .same(proto: "tips"),
//    4: .standard(proto: "bot_list"),
//    5: .standard(proto: "app_ability"),
//    6: .standard(proto: "app_url"),
//    7: .standard(proto: "i18n_names"),
//    8: .standard(proto: "i18n_descriptions"),
//    9: .standard(proto: "avatar_key"),
//    10: .standard(proto: "app_id"),
//    11: .same(proto: "chatable"),
//    12: .standard(proto: "extra_config"),
//    13: .same(proto: "avatar"),
//    14: .standard(proto: "app_store_url"),
//    15: .standard(proto: "is_isv"),
//    16: .standard(proto: "is_available"),
//    17: .same(proto: "extraHitFields"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _cliID: String? = nil
//    var _status: LarkNCExtensionPB_Entities_AppStatusInfo.AppUsageStatus? = nil
//    var _tips: LarkNCExtensionPB_Entities_TipsContent? = nil
//    var _botList: [LarkNCExtensionPB_Entities_BotCheckStatus] = []
//    var _appAbility: [LarkNCExtensionPB_Entities_AppStatusInfo.FeatureAbility] = []
//    var _appURL: String? = nil
//    var _i18NNames: Dictionary<String,String> = [:]
//    var _i18NDescriptions: Dictionary<String,String> = [:]
//    var _avatarKey: String? = nil
//    var _appID: Int64? = nil
//    var _chatable: Bool? = nil
//    var _extraConfig: String? = nil
//    var _avatar: LarkNCExtensionPB_Entities_Image? = nil
//    var _appStoreURL: String? = nil
//    var _isIsv: Bool? = nil
//    var _isAvailable: Bool? = nil
//    var _extraHitFields: [LarkNCExtensionPB_Entities_ExtraHitField] = []
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _cliID = source._cliID
//      _status = source._status
//      _tips = source._tips
//      _botList = source._botList
//      _appAbility = source._appAbility
//      _appURL = source._appURL
//      _i18NNames = source._i18NNames
//      _i18NDescriptions = source._i18NDescriptions
//      _avatarKey = source._avatarKey
//      _appID = source._appID
//      _chatable = source._chatable
//      _extraConfig = source._extraConfig
//      _avatar = source._avatar
//      _appStoreURL = source._appStoreURL
//      _isIsv = source._isIsv
//      _isAvailable = source._isAvailable
//      _extraHitFields = source._extraHitFields
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._cliID)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._status)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._tips)
//        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._botList)
//        case 5: try decoder.decodeRepeatedEnumField(value: &_storage._appAbility)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._appURL)
//        case 7: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._i18NNames)
//        case 8: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._i18NDescriptions)
//        case 9: try decoder.decodeSingularStringField(value: &_storage._avatarKey)
//        case 10: try decoder.decodeSingularInt64Field(value: &_storage._appID)
//        case 11: try decoder.decodeSingularBoolField(value: &_storage._chatable)
//        case 12: try decoder.decodeSingularStringField(value: &_storage._extraConfig)
//        case 13: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 14: try decoder.decodeSingularStringField(value: &_storage._appStoreURL)
//        case 15: try decoder.decodeSingularBoolField(value: &_storage._isIsv)
//        case 16: try decoder.decodeSingularBoolField(value: &_storage._isAvailable)
//        case 17: try decoder.decodeRepeatedMessageField(value: &_storage._extraHitFields)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._cliID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._tips {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if !_storage._botList.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._botList, fieldNumber: 4)
//      }
//      if !_storage._appAbility.isEmpty {
//        try visitor.visitRepeatedEnumField(value: _storage._appAbility, fieldNumber: 5)
//      }
//      if let v = _storage._appURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if !_storage._i18NNames.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._i18NNames, fieldNumber: 7)
//      }
//      if !_storage._i18NDescriptions.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._i18NDescriptions, fieldNumber: 8)
//      }
//      if let v = _storage._avatarKey {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._appID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._chatable {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._extraConfig {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._appStoreURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._isIsv {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
//      }
//      if let v = _storage._isAvailable {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
//      }
//      if !_storage._extraHitFields.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._extraHitFields, fieldNumber: 17)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppStatusInfo, rhs: LarkNCExtensionPB_Entities_AppStatusInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._cliID != rhs_storage._cliID {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._tips != rhs_storage._tips {return false}
//        if _storage._botList != rhs_storage._botList {return false}
//        if _storage._appAbility != rhs_storage._appAbility {return false}
//        if _storage._appURL != rhs_storage._appURL {return false}
//        if _storage._i18NNames != rhs_storage._i18NNames {return false}
//        if _storage._i18NDescriptions != rhs_storage._i18NDescriptions {return false}
//        if _storage._avatarKey != rhs_storage._avatarKey {return false}
//        if _storage._appID != rhs_storage._appID {return false}
//        if _storage._chatable != rhs_storage._chatable {return false}
//        if _storage._extraConfig != rhs_storage._extraConfig {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._appStoreURL != rhs_storage._appStoreURL {return false}
//        if _storage._isIsv != rhs_storage._isIsv {return false}
//        if _storage._isAvailable != rhs_storage._isAvailable {return false}
//        if _storage._extraHitFields != rhs_storage._extraHitFields {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppStatusInfo.AppUsageStatus: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "APP_USABLE"),
//    2: .same(proto: "APP_TENANT_FORBIDDEN"),
//    3: .same(proto: "APP_PLATFORM_FORBIDDEN"),
//    4: .same(proto: "APP_DEVELOPER_FORBIDDEN"),
//    5: .same(proto: "APP_OFFLINE"),
//    6: .same(proto: "APP_USER_UNVISIBLE"),
//    7: .same(proto: "APP_NEED_PAY_USE"),
//    8: .same(proto: "APP_DELETED"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_AppStatusInfo.FeatureAbility: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "SMALL"),
//    2: .same(proto: "H5"),
//    3: .same(proto: "BOT"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_UnavailableIsvStatusInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UnavailableIsvStatusInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "cli_id"),
//    2: .standard(proto: "i18n_names"),
//    3: .standard(proto: "i18n_descriptions"),
//    4: .standard(proto: "app_store_url"),
//    5: .standard(proto: "app_id"),
//    6: .same(proto: "avatar"),
//    7: .same(proto: "extraHitFields"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _cliID: String? = nil
//    var _i18NNames: Dictionary<String,String> = [:]
//    var _i18NDescriptions: Dictionary<String,String> = [:]
//    var _appStoreURL: String? = nil
//    var _appID: Int64? = nil
//    var _avatar: LarkNCExtensionPB_Entities_Image? = nil
//    var _extraHitFields: [LarkNCExtensionPB_Entities_ExtraHitField] = []
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _cliID = source._cliID
//      _i18NNames = source._i18NNames
//      _i18NDescriptions = source._i18NDescriptions
//      _appStoreURL = source._appStoreURL
//      _appID = source._appID
//      _avatar = source._avatar
//      _extraHitFields = source._extraHitFields
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._cliID)
//        case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._i18NNames)
//        case 3: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._i18NDescriptions)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._appStoreURL)
//        case 5: try decoder.decodeSingularInt64Field(value: &_storage._appID)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._extraHitFields)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._cliID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if !_storage._i18NNames.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._i18NNames, fieldNumber: 2)
//      }
//      if !_storage._i18NDescriptions.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._i18NDescriptions, fieldNumber: 3)
//      }
//      if let v = _storage._appStoreURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._appID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//      if !_storage._extraHitFields.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._extraHitFields, fieldNumber: 7)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UnavailableIsvStatusInfo, rhs: LarkNCExtensionPB_Entities_UnavailableIsvStatusInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._cliID != rhs_storage._cliID {return false}
//        if _storage._i18NNames != rhs_storage._i18NNames {return false}
//        if _storage._i18NDescriptions != rhs_storage._i18NDescriptions {return false}
//        if _storage._appStoreURL != rhs_storage._appStoreURL {return false}
//        if _storage._appID != rhs_storage._appID {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._extraHitFields != rhs_storage._extraHitFields {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ExtraHitField: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ExtraHitField"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "field_name"),
//    2: .same(proto: "title"),
//    3: .standard(proto: "title_hit_terms"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._fieldName)
//      case 2: try decoder.decodeSingularStringField(value: &self._title)
//      case 3: try decoder.decodeRepeatedStringField(value: &self.titleHitTerms)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._fieldName {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._title {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if !self.titleHitTerms.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.titleHitTerms, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ExtraHitField, rhs: LarkNCExtensionPB_Entities_ExtraHitField) -> Bool {
//    if lhs._fieldName != rhs._fieldName {return false}
//    if lhs._title != rhs._title {return false}
//    if lhs.titleHitTerms != rhs.titleHitTerms {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_BotInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".BotInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "bot_id"),
//    2: .standard(proto: "app_status"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _botID: Int64? = nil
//    var _appStatus: LarkNCExtensionPB_Entities_AppStatusInfo? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _botID = source._botID
//      _appStatus = source._appStatus
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._botID == nil {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt64Field(value: &_storage._botID)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._appStatus)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._botID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._appStatus {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_BotInfo, rhs: LarkNCExtensionPB_Entities_BotInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._botID != rhs_storage._botID {return false}
//        if _storage._appStatus != rhs_storage._appStatus {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Bot: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Bot"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "name"),
//    3: .same(proto: "avatar"),
//    4: .same(proto: "status"),
//    5: .standard(proto: "avatar_url"),
//    6: .standard(proto: "update_time"),
//    7: .standard(proto: "creator_id"),
//    8: .same(proto: "description"),
//    10: .standard(proto: "name_py"),
//    11: .standard(proto: "tenant_id"),
//    12: .standard(proto: "bot_config"),
//    13: .standard(proto: "en_name"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _name: String? = nil
//    var _avatar: LarkNCExtensionPB_Entities_ImageSet? = nil
//    var _status: Int32? = nil
//    var _avatarURL: String? = nil
//    var _updateTime: Int64? = nil
//    var _creatorID: String? = nil
//    var _description_p: String? = nil
//    var _namePy: String? = nil
//    var _tenantID: String? = nil
//    var _botConfig: LarkNCExtensionPB_Entities_BotConfig? = nil
//    var _enName: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _name = source._name
//      _avatar = source._avatar
//      _status = source._status
//      _avatarURL = source._avatarURL
//      _updateTime = source._updateTime
//      _creatorID = source._creatorID
//      _description_p = source._description_p
//      _namePy = source._namePy
//      _tenantID = source._tenantID
//      _botConfig = source._botConfig
//      _enName = source._enName
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 4: try decoder.decodeSingularInt32Field(value: &_storage._status)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._avatarURL)
//        case 6: try decoder.decodeSingularInt64Field(value: &_storage._updateTime)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._creatorID)
//        case 8: try decoder.decodeSingularStringField(value: &_storage._description_p)
//        case 10: try decoder.decodeSingularStringField(value: &_storage._namePy)
//        case 11: try decoder.decodeSingularStringField(value: &_storage._tenantID)
//        case 12: try decoder.decodeSingularMessageField(value: &_storage._botConfig)
//        case 13: try decoder.decodeSingularStringField(value: &_storage._enName)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._avatarURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._updateTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._creatorID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._description_p {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._namePy {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._tenantID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._botConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._enName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Bot, rhs: LarkNCExtensionPB_Entities_Bot) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._avatarURL != rhs_storage._avatarURL {return false}
//        if _storage._updateTime != rhs_storage._updateTime {return false}
//        if _storage._creatorID != rhs_storage._creatorID {return false}
//        if _storage._description_p != rhs_storage._description_p {return false}
//        if _storage._namePy != rhs_storage._namePy {return false}
//        if _storage._tenantID != rhs_storage._tenantID {return false}
//        if _storage._botConfig != rhs_storage._botConfig {return false}
//        if _storage._enName != rhs_storage._enName {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TimeZone: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TimeZone"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "name"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._name == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._name)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._name {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TimeZone, rhs: LarkNCExtensionPB_Entities_TimeZone) -> Bool {
//    if lhs._name != rhs._name {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TagInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TagInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "is_show_tag"),
//    2: .standard(proto: "tag_color"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._isShowTag)
//      case 2: try decoder.decodeSingularEnumField(value: &self._tagColor)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._isShowTag {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._tagColor {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TagInfo, rhs: LarkNCExtensionPB_Entities_TagInfo) -> Bool {
//    if lhs._isShowTag != rhs._isShowTag {return false}
//    if lhs._tagColor != rhs._tagColor {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_EffectiveInterval: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".EffectiveInterval"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "start_time"),
//    2: .standard(proto: "end_time"),
//    3: .standard(proto: "is_show_end_time"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._startTime)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._endTime)
//      case 3: try decoder.decodeSingularBoolField(value: &self._isShowEndTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._startTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._endTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._isShowEndTime {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_EffectiveInterval, rhs: LarkNCExtensionPB_Entities_EffectiveInterval) -> Bool {
//    if lhs._startTime != rhs._startTime {return false}
//    if lhs._endTime != rhs._endTime {return false}
//    if lhs._isShowEndTime != rhs._isShowEndTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TimeFormat: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TimeFormat"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "time_unit"),
//    2: .standard(proto: "start_end_layout"),
//    3: .standard(proto: "is_show_to_others"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._timeUnit)
//      case 2: try decoder.decodeSingularEnumField(value: &self._startEndLayout)
//      case 3: try decoder.decodeSingularBoolField(value: &self._isShowToOthers)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._timeUnit {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._startEndLayout {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    if let v = self._isShowToOthers {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TimeFormat, rhs: LarkNCExtensionPB_Entities_TimeFormat) -> Bool {
//    if lhs._timeUnit != rhs._timeUnit {return false}
//    if lhs._startEndLayout != rhs._startEndLayout {return false}
//    if lhs._isShowToOthers != rhs._isShowToOthers {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TimeFormat.StartEndLayout: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "HIDE"),
//    1: .same(proto: "NORMAL"),
//    2: .same(proto: "START_ONLY"),
//    3: .same(proto: "END_ONLY"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatterCustomStatus: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ChatterCustomStatus"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "title"),
//    2: .standard(proto: "i18n_title"),
//    3: .standard(proto: "icon_key"),
//    4: .standard(proto: "fs_unit"),
//    5: .standard(proto: "effective_interval"),
//    6: .standard(proto: "is_not_disturb_mode"),
//    7: .standard(proto: "tag_info"),
//    8: .standard(proto: "time_format"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _title: String? = nil
//    var _i18NTitle: Dictionary<String,String> = [:]
//    var _iconKey: String? = nil
//    var _fsUnit: String? = nil
//    var _effectiveInterval: LarkNCExtensionPB_Entities_EffectiveInterval? = nil
//    var _isNotDisturbMode: Bool? = nil
//    var _tagInfo: LarkNCExtensionPB_Entities_TagInfo? = nil
//    var _timeFormat: LarkNCExtensionPB_Entities_TimeFormat? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _title = source._title
//      _i18NTitle = source._i18NTitle
//      _iconKey = source._iconKey
//      _fsUnit = source._fsUnit
//      _effectiveInterval = source._effectiveInterval
//      _isNotDisturbMode = source._isNotDisturbMode
//      _tagInfo = source._tagInfo
//      _timeFormat = source._timeFormat
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._title)
//        case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._i18NTitle)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._iconKey)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._effectiveInterval)
//        case 6: try decoder.decodeSingularBoolField(value: &_storage._isNotDisturbMode)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._tagInfo)
//        case 8: try decoder.decodeSingularMessageField(value: &_storage._timeFormat)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._title {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if !_storage._i18NTitle.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._i18NTitle, fieldNumber: 2)
//      }
//      if let v = _storage._iconKey {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._fsUnit {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._effectiveInterval {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._isNotDisturbMode {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._tagInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._timeFormat {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatterCustomStatus, rhs: LarkNCExtensionPB_Entities_ChatterCustomStatus) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._title != rhs_storage._title {return false}
//        if _storage._i18NTitle != rhs_storage._i18NTitle {return false}
//        if _storage._iconKey != rhs_storage._iconKey {return false}
//        if _storage._fsUnit != rhs_storage._fsUnit {return false}
//        if _storage._effectiveInterval != rhs_storage._effectiveInterval {return false}
//        if _storage._isNotDisturbMode != rhs_storage._isNotDisturbMode {return false}
//        if _storage._tagInfo != rhs_storage._tagInfo {return false}
//        if _storage._timeFormat != rhs_storage._timeFormat {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_I18nVal: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".I18nVal"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "default_val"),
//    2: .standard(proto: "i18n_vals"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._defaultVal == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._defaultVal)
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NVals)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._defaultVal {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if !self.i18NVals.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NVals, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_I18nVal, rhs: LarkNCExtensionPB_Entities_I18nVal) -> Bool {
//    if lhs._defaultVal != rhs._defaultVal {return false}
//    if lhs.i18NVals != rhs.i18NVals {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AvatarMedal: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".AvatarMedal"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "key"),
//    2: .standard(proto: "fs_unit"),
//    3: .standard(proto: "i18n_name"),
//    4: .standard(proto: "show_switch"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _key: String? = nil
//    var _fsUnit: String? = nil
//    var _i18NName: LarkNCExtensionPB_Entities_I18nVal? = nil
//    var _showSwitch: Bool? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _key = source._key
//      _fsUnit = source._fsUnit
//      _i18NName = source._i18NName
//      _showSwitch = source._showSwitch
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._i18NName, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._key)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._i18NName)
//        case 4: try decoder.decodeSingularBoolField(value: &_storage._showSwitch)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._key {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._fsUnit {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._i18NName {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._showSwitch {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AvatarMedal, rhs: LarkNCExtensionPB_Entities_AvatarMedal) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._key != rhs_storage._key {return false}
//        if _storage._fsUnit != rhs_storage._fsUnit {return false}
//        if _storage._i18NName != rhs_storage._i18NName {return false}
//        if _storage._showSwitch != rhs_storage._showSwitch {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Chatter: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Chatter"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "name"),
//    3: .same(proto: "avatar"),
//    4: .same(proto: "status"),
//    5: .standard(proto: "avatar_url"),
//    6: .standard(proto: "update_time"),
//    7: .standard(proto: "name_pinyin"),
//    8: .standard(proto: "creator_id"),
//    9: .same(proto: "type"),
//    11: .same(proto: "description"),
//    12: .standard(proto: "is_registered"),
//    13: .standard(proto: "name_py"),
//    14: .standard(proto: "en_us_name"),
//    15: .standard(proto: "tenant_id"),
//    16: .standard(proto: "description_flag"),
//    17: .standard(proto: "bot_config"),
//    18: .standard(proto: "international_name"),
//    19: .same(proto: "alias"),
//    20: .standard(proto: "work_status"),
//    21: .standard(proto: "i18n_descriptions"),
//    22: .standard(proto: "account_id"),
//    23: .standard(proto: "i18n_inf"),
//    24: .standard(proto: "user_config"),
//    25: .same(proto: "email"),
//    26: .standard(proto: "donot_disturb_before_ms"),
//    27: .standard(proto: "accept_sms_phone_urgent"),
//    28: .standard(proto: "last_login_time"),
//    29: .standard(proto: "avatar_image"),
//    30: .standard(proto: "time_zone"),
//    31: .standard(proto: "is_guest"),
//    32: .standard(proto: "is_frozen"),
//    33: .standard(proto: "is_anonymous"),
//    34: .same(proto: "department"),
//    35: .standard(proto: "enterprise_email"),
//    36: .standard(proto: "custom_statuses"),
//    37: .standard(proto: "avatar_medal"),
//    38: .standard(proto: "another_name"),
//    39: .standard(proto: "active_status"),
//    40: .standard(proto: "is_special_focus"),
//    41: .standard(proto: "major_language"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _name: String? = nil
//    var _avatar: LarkNCExtensionPB_Entities_ImageSet? = nil
//    var _status: Int32? = nil
//    var _avatarURL: String? = nil
//    var _updateTime: Int64? = nil
//    var _namePinyin: String? = nil
//    var _creatorID: String? = nil
//    var _type: LarkNCExtensionPB_Entities_ChatterType? = nil
//    var _description_p: String? = nil
//    var _isRegistered: Bool? = nil
//    var _namePy: String? = nil
//    var _enUsName: String? = nil
//    var _tenantID: String? = nil
//    var _descriptionFlag: LarkNCExtensionPB_Entities_Chatter.DescriptionFlag? = nil
//    var _botConfig: LarkNCExtensionPB_Entities_BotConfig? = nil
//    var _internationalName: Dictionary<String,String> = [:]
//    var _alias: String? = nil
//    var _workStatus: LarkNCExtensionPB_Entities_WorkStatus? = nil
//    var _i18NDescriptions: Dictionary<String,String> = [:]
//    var _accountID: String? = nil
//    var _i18NInf: LarkNCExtensionPB_Entities_Chatter.I18nInf? = nil
//    var _userConfig: LarkNCExtensionPB_Entities_UserConfig? = nil
//    var _email: String? = nil
//    var _donotDisturbBeforeMs: Int64? = nil
//    var _acceptSmsPhoneUrgent: Bool? = nil
//    var _lastLoginTime: Int64? = nil
//    var _avatarImage: LarkNCExtensionPB_Entities_Image? = nil
//    var _timeZone: LarkNCExtensionPB_Entities_TimeZone? = nil
//    var _isGuest: Bool? = nil
//    var _isFrozen: Bool? = nil
//    var _isAnonymous: Bool? = nil
//    var _department: [LarkNCExtensionPB_Entities_Department] = []
//    var _enterpriseEmail: String? = nil
//    var _customStatuses: [LarkNCExtensionPB_Entities_ChatterCustomStatus] = []
//    var _avatarMedal: LarkNCExtensionPB_Entities_AvatarMedal? = nil
//    var _anotherName: String? = nil
//    var _activeStatus: Int32? = nil
//    var _isSpecialFocus: Bool? = nil
//    var _majorLanguage: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _name = source._name
//      _avatar = source._avatar
//      _status = source._status
//      _avatarURL = source._avatarURL
//      _updateTime = source._updateTime
//      _namePinyin = source._namePinyin
//      _creatorID = source._creatorID
//      _type = source._type
//      _description_p = source._description_p
//      _isRegistered = source._isRegistered
//      _namePy = source._namePy
//      _enUsName = source._enUsName
//      _tenantID = source._tenantID
//      _descriptionFlag = source._descriptionFlag
//      _botConfig = source._botConfig
//      _internationalName = source._internationalName
//      _alias = source._alias
//      _workStatus = source._workStatus
//      _i18NDescriptions = source._i18NDescriptions
//      _accountID = source._accountID
//      _i18NInf = source._i18NInf
//      _userConfig = source._userConfig
//      _email = source._email
//      _donotDisturbBeforeMs = source._donotDisturbBeforeMs
//      _acceptSmsPhoneUrgent = source._acceptSmsPhoneUrgent
//      _lastLoginTime = source._lastLoginTime
//      _avatarImage = source._avatarImage
//      _timeZone = source._timeZone
//      _isGuest = source._isGuest
//      _isFrozen = source._isFrozen
//      _isAnonymous = source._isAnonymous
//      _department = source._department
//      _enterpriseEmail = source._enterpriseEmail
//      _customStatuses = source._customStatuses
//      _avatarMedal = source._avatarMedal
//      _anotherName = source._anotherName
//      _activeStatus = source._activeStatus
//      _isSpecialFocus = source._isSpecialFocus
//      _majorLanguage = source._majorLanguage
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._timeZone, !v.isInitialized {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._department) {return false}
//      if let v = _storage._avatarMedal, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 4: try decoder.decodeSingularInt32Field(value: &_storage._status)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._avatarURL)
//        case 6: try decoder.decodeSingularInt64Field(value: &_storage._updateTime)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._namePinyin)
//        case 8: try decoder.decodeSingularStringField(value: &_storage._creatorID)
//        case 9: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 11: try decoder.decodeSingularStringField(value: &_storage._description_p)
//        case 12: try decoder.decodeSingularBoolField(value: &_storage._isRegistered)
//        case 13: try decoder.decodeSingularStringField(value: &_storage._namePy)
//        case 14: try decoder.decodeSingularStringField(value: &_storage._enUsName)
//        case 15: try decoder.decodeSingularStringField(value: &_storage._tenantID)
//        case 16: try decoder.decodeSingularEnumField(value: &_storage._descriptionFlag)
//        case 17: try decoder.decodeSingularMessageField(value: &_storage._botConfig)
//        case 18: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._internationalName)
//        case 19: try decoder.decodeSingularStringField(value: &_storage._alias)
//        case 20: try decoder.decodeSingularMessageField(value: &_storage._workStatus)
//        case 21: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._i18NDescriptions)
//        case 22: try decoder.decodeSingularStringField(value: &_storage._accountID)
//        case 23: try decoder.decodeSingularMessageField(value: &_storage._i18NInf)
//        case 24: try decoder.decodeSingularMessageField(value: &_storage._userConfig)
//        case 25: try decoder.decodeSingularStringField(value: &_storage._email)
//        case 26: try decoder.decodeSingularInt64Field(value: &_storage._donotDisturbBeforeMs)
//        case 27: try decoder.decodeSingularBoolField(value: &_storage._acceptSmsPhoneUrgent)
//        case 28: try decoder.decodeSingularInt64Field(value: &_storage._lastLoginTime)
//        case 29: try decoder.decodeSingularMessageField(value: &_storage._avatarImage)
//        case 30: try decoder.decodeSingularMessageField(value: &_storage._timeZone)
//        case 31: try decoder.decodeSingularBoolField(value: &_storage._isGuest)
//        case 32: try decoder.decodeSingularBoolField(value: &_storage._isFrozen)
//        case 33: try decoder.decodeSingularBoolField(value: &_storage._isAnonymous)
//        case 34: try decoder.decodeRepeatedMessageField(value: &_storage._department)
//        case 35: try decoder.decodeSingularStringField(value: &_storage._enterpriseEmail)
//        case 36: try decoder.decodeRepeatedMessageField(value: &_storage._customStatuses)
//        case 37: try decoder.decodeSingularMessageField(value: &_storage._avatarMedal)
//        case 38: try decoder.decodeSingularStringField(value: &_storage._anotherName)
//        case 39: try decoder.decodeSingularInt32Field(value: &_storage._activeStatus)
//        case 40: try decoder.decodeSingularBoolField(value: &_storage._isSpecialFocus)
//        case 41: try decoder.decodeSingularStringField(value: &_storage._majorLanguage)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._avatarURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._updateTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._namePinyin {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._creatorID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._description_p {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._isRegistered {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._namePy {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._enUsName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._tenantID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
//      }
//      if let v = _storage._descriptionFlag {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 16)
//      }
//      if let v = _storage._botConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
//      }
//      if !_storage._internationalName.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._internationalName, fieldNumber: 18)
//      }
//      if let v = _storage._alias {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 19)
//      }
//      if let v = _storage._workStatus {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
//      }
//      if !_storage._i18NDescriptions.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._i18NDescriptions, fieldNumber: 21)
//      }
//      if let v = _storage._accountID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 22)
//      }
//      if let v = _storage._i18NInf {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
//      }
//      if let v = _storage._userConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
//      }
//      if let v = _storage._email {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
//      }
//      if let v = _storage._donotDisturbBeforeMs {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 26)
//      }
//      if let v = _storage._acceptSmsPhoneUrgent {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 27)
//      }
//      if let v = _storage._lastLoginTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 28)
//      }
//      if let v = _storage._avatarImage {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
//      }
//      if let v = _storage._timeZone {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
//      }
//      if let v = _storage._isGuest {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 31)
//      }
//      if let v = _storage._isFrozen {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 32)
//      }
//      if let v = _storage._isAnonymous {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 33)
//      }
//      if !_storage._department.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._department, fieldNumber: 34)
//      }
//      if let v = _storage._enterpriseEmail {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 35)
//      }
//      if !_storage._customStatuses.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._customStatuses, fieldNumber: 36)
//      }
//      if let v = _storage._avatarMedal {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
//      }
//      if let v = _storage._anotherName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 38)
//      }
//      if let v = _storage._activeStatus {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 39)
//      }
//      if let v = _storage._isSpecialFocus {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 40)
//      }
//      if let v = _storage._majorLanguage {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 41)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Chatter, rhs: LarkNCExtensionPB_Entities_Chatter) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._avatarURL != rhs_storage._avatarURL {return false}
//        if _storage._updateTime != rhs_storage._updateTime {return false}
//        if _storage._namePinyin != rhs_storage._namePinyin {return false}
//        if _storage._creatorID != rhs_storage._creatorID {return false}
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._description_p != rhs_storage._description_p {return false}
//        if _storage._isRegistered != rhs_storage._isRegistered {return false}
//        if _storage._namePy != rhs_storage._namePy {return false}
//        if _storage._enUsName != rhs_storage._enUsName {return false}
//        if _storage._tenantID != rhs_storage._tenantID {return false}
//        if _storage._descriptionFlag != rhs_storage._descriptionFlag {return false}
//        if _storage._botConfig != rhs_storage._botConfig {return false}
//        if _storage._internationalName != rhs_storage._internationalName {return false}
//        if _storage._alias != rhs_storage._alias {return false}
//        if _storage._workStatus != rhs_storage._workStatus {return false}
//        if _storage._i18NDescriptions != rhs_storage._i18NDescriptions {return false}
//        if _storage._accountID != rhs_storage._accountID {return false}
//        if _storage._i18NInf != rhs_storage._i18NInf {return false}
//        if _storage._userConfig != rhs_storage._userConfig {return false}
//        if _storage._email != rhs_storage._email {return false}
//        if _storage._donotDisturbBeforeMs != rhs_storage._donotDisturbBeforeMs {return false}
//        if _storage._acceptSmsPhoneUrgent != rhs_storage._acceptSmsPhoneUrgent {return false}
//        if _storage._lastLoginTime != rhs_storage._lastLoginTime {return false}
//        if _storage._avatarImage != rhs_storage._avatarImage {return false}
//        if _storage._timeZone != rhs_storage._timeZone {return false}
//        if _storage._isGuest != rhs_storage._isGuest {return false}
//        if _storage._isFrozen != rhs_storage._isFrozen {return false}
//        if _storage._isAnonymous != rhs_storage._isAnonymous {return false}
//        if _storage._department != rhs_storage._department {return false}
//        if _storage._enterpriseEmail != rhs_storage._enterpriseEmail {return false}
//        if _storage._customStatuses != rhs_storage._customStatuses {return false}
//        if _storage._avatarMedal != rhs_storage._avatarMedal {return false}
//        if _storage._anotherName != rhs_storage._anotherName {return false}
//        if _storage._activeStatus != rhs_storage._activeStatus {return false}
//        if _storage._isSpecialFocus != rhs_storage._isSpecialFocus {return false}
//        if _storage._majorLanguage != rhs_storage._majorLanguage {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Chatter.DescriptionFlag: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "DEFAULT"),
//    1: .same(proto: "ON_BUSINESS"),
//    2: .same(proto: "ON_LEAVE"),
//    3: .same(proto: "ON_MEETING"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_Chatter.I18nInf: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_Chatter.protoMessageName + ".I18nInf"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "i18n_descriptions"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NDescriptions)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.i18NDescriptions.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NDescriptions, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Chatter.I18nInf, rhs: LarkNCExtensionPB_Entities_Chatter.I18nInf) -> Bool {
//    if lhs.i18NDescriptions != rhs.i18NDescriptions {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MessageReaction: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MessageReaction"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "message_id"),
//    2: .same(proto: "reactions"),
//    3: .standard(proto: "update_time"),
//    4: .standard(proto: "nano_update_time"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._messageID)
//      case 2: try decoder.decodeRepeatedMessageField(value: &self.reactions)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._updateTime)
//      case 4: try decoder.decodeSingularInt64Field(value: &self._nanoUpdateTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._messageID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if !self.reactions.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.reactions, fieldNumber: 2)
//    }
//    if let v = self._updateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._nanoUpdateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MessageReaction, rhs: LarkNCExtensionPB_Entities_MessageReaction) -> Bool {
//    if lhs._messageID != rhs._messageID {return false}
//    if lhs.reactions != rhs.reactions {return false}
//    if lhs._updateTime != rhs._updateTime {return false}
//    if lhs._nanoUpdateTime != rhs._nanoUpdateTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MessageReaction.Reaction: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_MessageReaction.protoMessageName + ".Reaction"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .same(proto: "count"),
//    3: .standard(proto: "user_ids"),
//    4: .standard(proto: "chatter_ids"),
//    5: .standard(proto: "udpate_times"),
//    6: .standard(proto: "nano_update_times"),
//    7: .standard(proto: "nano_update_time"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._type)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._count)
//      case 3: try decoder.decodeRepeatedStringField(value: &self.userIds)
//      case 4: try decoder.decodeRepeatedStringField(value: &self.chatterIds)
//      case 5: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufInt64>.self, value: &self.udpateTimes)
//      case 6: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufInt64>.self, value: &self.nanoUpdateTimes)
//      case 7: try decoder.decodeSingularInt64Field(value: &self._nanoUpdateTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._type {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._count {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    if !self.userIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.userIds, fieldNumber: 3)
//    }
//    if !self.chatterIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.chatterIds, fieldNumber: 4)
//    }
//    if !self.udpateTimes.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufInt64>.self, value: self.udpateTimes, fieldNumber: 5)
//    }
//    if !self.nanoUpdateTimes.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufInt64>.self, value: self.nanoUpdateTimes, fieldNumber: 6)
//    }
//    if let v = self._nanoUpdateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MessageReaction.Reaction, rhs: LarkNCExtensionPB_Entities_MessageReaction.Reaction) -> Bool {
//    if lhs._type != rhs._type {return false}
//    if lhs._count != rhs._count {return false}
//    if lhs.userIds != rhs.userIds {return false}
//    if lhs.chatterIds != rhs.chatterIds {return false}
//    if lhs.udpateTimes != rhs.udpateTimes {return false}
//    if lhs.nanoUpdateTimes != rhs.nanoUpdateTimes {return false}
//    if lhs._nanoUpdateTime != rhs._nanoUpdateTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MessageReminder: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MessageReminder"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .standard(proto: "message_id"),
//    3: .standard(proto: "reminder_time"),
//    4: .standard(proto: "chat_id"),
//    5: .standard(proto: "reminder_position"),
//    6: .same(proto: "canceled"),
//    7: .standard(proto: "confirmed_time"),
//    8: .standard(proto: "message_position"),
//    9: .standard(proto: "update_time"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._id == nil {return false}
//    if self._messageID == nil {return false}
//    if self._reminderTime == nil {return false}
//    if self._chatID == nil {return false}
//    if self._reminderPosition == nil {return false}
//    if self._canceled == nil {return false}
//    if self._confirmedTime == nil {return false}
//    if self._messagePosition == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularStringField(value: &self._messageID)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._reminderTime)
//      case 4: try decoder.decodeSingularStringField(value: &self._chatID)
//      case 5: try decoder.decodeSingularInt32Field(value: &self._reminderPosition)
//      case 6: try decoder.decodeSingularBoolField(value: &self._canceled)
//      case 7: try decoder.decodeSingularInt64Field(value: &self._confirmedTime)
//      case 8: try decoder.decodeSingularInt32Field(value: &self._messagePosition)
//      case 9: try decoder.decodeSingularInt64Field(value: &self._updateTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._messageID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._reminderTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._chatID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._reminderPosition {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
//    }
//    if let v = self._canceled {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//    }
//    if let v = self._confirmedTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
//    }
//    if let v = self._messagePosition {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
//    }
//    if let v = self._updateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 9)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MessageReminder, rhs: LarkNCExtensionPB_Entities_MessageReminder) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._messageID != rhs._messageID {return false}
//    if lhs._reminderTime != rhs._reminderTime {return false}
//    if lhs._chatID != rhs._chatID {return false}
//    if lhs._reminderPosition != rhs._reminderPosition {return false}
//    if lhs._canceled != rhs._canceled {return false}
//    if lhs._confirmedTime != rhs._confirmedTime {return false}
//    if lhs._messagePosition != rhs._messagePosition {return false}
//    if lhs._updateTime != rhs._updateTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ChatSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "is_remind"),
//    2: .standard(proto: "update_time"),
//    3: .standard(proto: "check_message_position"),
//    4: .standard(proto: "is_auto_translate"),
//    5: .standard(proto: "is_hidden_nickname"),
//    6: .standard(proto: "is_auto_translate_version"),
//    7: .standard(proto: "anonymous_user_id"),
//    8: .standard(proto: "is_mute_at_all"),
//    9: .standard(proto: "typing_translate"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _isRemind: Bool? = nil
//    var _updateTime: Int64? = nil
//    var _checkMessagePosition: LarkNCExtensionPB_Entities_ChatSetting.CheckMessagePositionSetting.Enum? = nil
//    var _isAutoTranslate: Bool? = nil
//    var _isHiddenNickname: Bool? = nil
//    var _isAutoTranslateVersion: Int64? = nil
//    var _anonymousUserID: Int64? = nil
//    var _isMuteAtAll: Bool? = nil
//    var _typingTranslate: LarkNCExtensionPB_Entities_ChatSetting.TypingTranslateEntity? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _isRemind = source._isRemind
//      _updateTime = source._updateTime
//      _checkMessagePosition = source._checkMessagePosition
//      _isAutoTranslate = source._isAutoTranslate
//      _isHiddenNickname = source._isHiddenNickname
//      _isAutoTranslateVersion = source._isAutoTranslateVersion
//      _anonymousUserID = source._anonymousUserID
//      _isMuteAtAll = source._isMuteAtAll
//      _typingTranslate = source._typingTranslate
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularBoolField(value: &_storage._isRemind)
//        case 2: try decoder.decodeSingularInt64Field(value: &_storage._updateTime)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._checkMessagePosition)
//        case 4: try decoder.decodeSingularBoolField(value: &_storage._isAutoTranslate)
//        case 5: try decoder.decodeSingularBoolField(value: &_storage._isHiddenNickname)
//        case 6: try decoder.decodeSingularInt64Field(value: &_storage._isAutoTranslateVersion)
//        case 7: try decoder.decodeSingularInt64Field(value: &_storage._anonymousUserID)
//        case 8: try decoder.decodeSingularBoolField(value: &_storage._isMuteAtAll)
//        case 9: try decoder.decodeSingularMessageField(value: &_storage._typingTranslate)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._isRemind {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._updateTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._checkMessagePosition {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._isAutoTranslate {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._isHiddenNickname {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._isAutoTranslateVersion {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._anonymousUserID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._isMuteAtAll {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._typingTranslate {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatSetting, rhs: LarkNCExtensionPB_Entities_ChatSetting) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._isRemind != rhs_storage._isRemind {return false}
//        if _storage._updateTime != rhs_storage._updateTime {return false}
//        if _storage._checkMessagePosition != rhs_storage._checkMessagePosition {return false}
//        if _storage._isAutoTranslate != rhs_storage._isAutoTranslate {return false}
//        if _storage._isHiddenNickname != rhs_storage._isHiddenNickname {return false}
//        if _storage._isAutoTranslateVersion != rhs_storage._isAutoTranslateVersion {return false}
//        if _storage._anonymousUserID != rhs_storage._anonymousUserID {return false}
//        if _storage._isMuteAtAll != rhs_storage._isMuteAtAll {return false}
//        if _storage._typingTranslate != rhs_storage._typingTranslate {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatSetting.Field: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "IS_REMIND"),
//    2: .same(proto: "UPDATE_TIME"),
//    3: .same(proto: "CHECK_MESSAGE_POSITION"),
//    4: .same(proto: "IS_AUTO_TRANSLATE"),
//    5: .same(proto: "IS_HIDDEN_NICKNAME"),
//    6: .same(proto: "IS_MUTE_AT_ALL"),
//    7: .same(proto: "TYPING_TRANSLATE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatSetting.CheckMessagePositionSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatSetting.protoMessageName + ".CheckMessagePositionSetting"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatSetting.CheckMessagePositionSetting, rhs: LarkNCExtensionPB_Entities_ChatSetting.CheckMessagePositionSetting) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatSetting.CheckMessagePositionSetting.Enum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "RECENT_LEFT"),
//    2: .same(proto: "NEWEST_UNREAD"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_ChatSetting.TypingTranslateEntity: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ChatSetting.protoMessageName + ".TypingTranslateEntity"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "is_open"),
//    2: .standard(proto: "open_mode"),
//    3: .same(proto: "locale"),
//    4: .standard(proto: "can_auto_open"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._isOpen)
//      case 2: try decoder.decodeSingularEnumField(value: &self._openMode)
//      case 3: try decoder.decodeSingularStringField(value: &self._locale)
//      case 4: try decoder.decodeSingularBoolField(value: &self._canAutoOpen)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._isOpen {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._openMode {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    if let v = self._locale {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._canAutoOpen {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ChatSetting.TypingTranslateEntity, rhs: LarkNCExtensionPB_Entities_ChatSetting.TypingTranslateEntity) -> Bool {
//    if lhs._isOpen != rhs._isOpen {return false}
//    if lhs._openMode != rhs._openMode {return false}
//    if lhs._locale != rhs._locale {return false}
//    if lhs._canAutoOpen != rhs._canAutoOpen {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ChatSetting.TypingTranslateEntity.OpenMode: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "MANUAL"),
//    2: .same(proto: "AUTO"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_Department: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Department"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "name"),
//    3: .standard(proto: "parent_id"),
//    4: .standard(proto: "leader_id"),
//    5: .standard(proto: "member_count"),
//    6: .same(proto: "status"),
//    7: .standard(proto: "name_pinyin"),
//    8: .standard(proto: "chat_id"),
//    9: .standard(proto: "has_child"),
//    10: .standard(proto: "i18n_name"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._id == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularStringField(value: &self._name)
//      case 3: try decoder.decodeSingularStringField(value: &self._parentID)
//      case 4: try decoder.decodeSingularStringField(value: &self._leaderID)
//      case 5: try decoder.decodeSingularInt32Field(value: &self._memberCount)
//      case 6: try decoder.decodeSingularInt32Field(value: &self._status)
//      case 7: try decoder.decodeSingularStringField(value: &self._namePinyin)
//      case 8: try decoder.decodeSingularStringField(value: &self._chatID)
//      case 9: try decoder.decodeSingularBoolField(value: &self._hasChild_p)
//      case 10: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NName)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._name {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._parentID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._leaderID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._memberCount {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
//    }
//    if let v = self._status {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
//    }
//    if let v = self._namePinyin {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//    }
//    if let v = self._chatID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//    }
//    if let v = self._hasChild_p {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
//    }
//    if !self.i18NName.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NName, fieldNumber: 10)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Department, rhs: LarkNCExtensionPB_Entities_Department) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._name != rhs._name {return false}
//    if lhs._parentID != rhs._parentID {return false}
//    if lhs._leaderID != rhs._leaderID {return false}
//    if lhs._memberCount != rhs._memberCount {return false}
//    if lhs._status != rhs._status {return false}
//    if lhs._namePinyin != rhs._namePinyin {return false}
//    if lhs._chatID != rhs._chatID {return false}
//    if lhs._hasChild_p != rhs._hasChild_p {return false}
//    if lhs.i18NName != rhs.i18NName {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Notice: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Notice"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "should_notify"),
//    2: .same(proto: "title"),
//    3: .same(proto: "content"),
//    4: .same(proto: "summary"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._shouldNotify)
//      case 2: try decoder.decodeSingularStringField(value: &self._title)
//      case 3: try decoder.decodeSingularStringField(value: &self._content)
//      case 4: try decoder.decodeSingularStringField(value: &self._summary)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._shouldNotify {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._title {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._content {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._summary {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Notice, rhs: LarkNCExtensionPB_Entities_Notice) -> Bool {
//    if lhs._shouldNotify != rhs._shouldNotify {return false}
//    if lhs._title != rhs._title {return false}
//    if lhs._content != rhs._content {return false}
//    if lhs._summary != rhs._summary {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_EmailThread: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".EmailThread"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .standard(proto: "owner_id"),
//    3: .standard(proto: "last_message_id"),
//    4: .standard(proto: "new_message_count"),
//    5: .standard(proto: "last_message_position"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularStringField(value: &self._ownerID)
//      case 3: try decoder.decodeSingularStringField(value: &self._lastMessageID)
//      case 4: try decoder.decodeSingularInt32Field(value: &self._newMessageCount)
//      case 5: try decoder.decodeSingularInt32Field(value: &self._lastMessagePosition)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._ownerID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._lastMessageID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._newMessageCount {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//    }
//    if let v = self._lastMessagePosition {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_EmailThread, rhs: LarkNCExtensionPB_Entities_EmailThread) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._ownerID != rhs._ownerID {return false}
//    if lhs._lastMessageID != rhs._lastMessageID {return false}
//    if lhs._newMessageCount != rhs._newMessageCount {return false}
//    if lhs._lastMessagePosition != rhs._lastMessagePosition {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_EmailMember: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".EmailMember"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "type"),
//    3: .standard(proto: "inviter_id"),
//    4: .standard(proto: "join_time"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._id == nil {return false}
//    if self._type == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularEnumField(value: &self._type)
//      case 3: try decoder.decodeSingularStringField(value: &self._inviterID)
//      case 4: try decoder.decodeSingularInt64Field(value: &self._joinTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    if let v = self._inviterID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._joinTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_EmailMember, rhs: LarkNCExtensionPB_Entities_EmailMember) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._type != rhs._type {return false}
//    if lhs._inviterID != rhs._inviterID {return false}
//    if lhs._joinTime != rhs._joinTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_EmailMember.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "CHATTER"),
//    2: .same(proto: "CHAT"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_Email: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Email"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .standard(proto: "owner_id"),
//    3: .standard(proto: "last_message_id"),
//    4: .standard(proto: "new_message_count"),
//    5: .standard(proto: "last_message_position"),
//    6: .standard(proto: "update_time"),
//    7: .same(proto: "subject"),
//    8: .same(proto: "status"),
//    999: .standard(proto: "update_fields"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularStringField(value: &self._ownerID)
//      case 3: try decoder.decodeSingularStringField(value: &self._lastMessageID)
//      case 4: try decoder.decodeSingularInt32Field(value: &self._newMessageCount)
//      case 5: try decoder.decodeSingularInt32Field(value: &self._lastMessagePosition)
//      case 6: try decoder.decodeSingularInt64Field(value: &self._updateTime)
//      case 7: try decoder.decodeSingularStringField(value: &self._subject)
//      case 8: try decoder.decodeSingularEnumField(value: &self._status)
//      case 999: try decoder.decodeRepeatedEnumField(value: &self.updateFields)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._ownerID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._lastMessageID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._newMessageCount {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//    }
//    if let v = self._lastMessagePosition {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
//    }
//    if let v = self._updateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
//    }
//    if let v = self._subject {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//    }
//    if let v = self._status {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
//    }
//    if !self.updateFields.isEmpty {
//      try visitor.visitRepeatedEnumField(value: self.updateFields, fieldNumber: 999)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Email, rhs: LarkNCExtensionPB_Entities_Email) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._ownerID != rhs._ownerID {return false}
//    if lhs._lastMessageID != rhs._lastMessageID {return false}
//    if lhs._newMessageCount != rhs._newMessageCount {return false}
//    if lhs._lastMessagePosition != rhs._lastMessagePosition {return false}
//    if lhs._updateTime != rhs._updateTime {return false}
//    if lhs._subject != rhs._subject {return false}
//    if lhs._status != rhs._status {return false}
//    if lhs.updateFields != rhs.updateFields {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Email.Status: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "NORMAL"),
//    2: .same(proto: "MODIFIED"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_Oncall: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Oncall"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "name"),
//    3: .same(proto: "description"),
//    4: .standard(proto: "name_pinyin"),
//    5: .same(proto: "avatar"),
//    6: .standard(proto: "avatar_url"),
//    7: .standard(proto: "chat_id"),
//    8: .standard(proto: "tag_ids"),
//    9: .standard(proto: "en_name"),
//    10: .standard(proto: "en_description"),
//    11: .standard(proto: "i18n_inf"),
//    12: .standard(proto: "phone_number"),
//    13: .standard(proto: "report_location"),
//    14: .standard(proto: "avatar_image"),
//    15: .standard(proto: "icon_tags"),
//    16: .standard(proto: "business_hours_periods_ms"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _name: String? = nil
//    var _description_p: String? = nil
//    var _namePinyin: String? = nil
//    var _avatar: LarkNCExtensionPB_Entities_ImageSet? = nil
//    var _avatarURL: String? = nil
//    var _chatID: String? = nil
//    var _tagIds: [Int64] = []
//    var _enName: String? = nil
//    var _enDescription: String? = nil
//    var _i18NInf: LarkNCExtensionPB_Entities_Oncall.I18nInf? = nil
//    var _phoneNumber: String? = nil
//    var _reportLocation: Bool? = nil
//    var _avatarImage: LarkNCExtensionPB_Entities_Image? = nil
//    var _iconTags: [Int32] = []
//    var _businessHoursPeriodsMs: [Int64] = []
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _name = source._name
//      _description_p = source._description_p
//      _namePinyin = source._namePinyin
//      _avatar = source._avatar
//      _avatarURL = source._avatarURL
//      _chatID = source._chatID
//      _tagIds = source._tagIds
//      _enName = source._enName
//      _enDescription = source._enDescription
//      _i18NInf = source._i18NInf
//      _phoneNumber = source._phoneNumber
//      _reportLocation = source._reportLocation
//      _avatarImage = source._avatarImage
//      _iconTags = source._iconTags
//      _businessHoursPeriodsMs = source._businessHoursPeriodsMs
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._namePinyin)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._avatarURL)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._chatID)
//        case 8: try decoder.decodeRepeatedInt64Field(value: &_storage._tagIds)
//        case 9: try decoder.decodeSingularStringField(value: &_storage._enName)
//        case 10: try decoder.decodeSingularStringField(value: &_storage._enDescription)
//        case 11: try decoder.decodeSingularMessageField(value: &_storage._i18NInf)
//        case 12: try decoder.decodeSingularStringField(value: &_storage._phoneNumber)
//        case 13: try decoder.decodeSingularBoolField(value: &_storage._reportLocation)
//        case 14: try decoder.decodeSingularMessageField(value: &_storage._avatarImage)
//        case 15: try decoder.decodeRepeatedInt32Field(value: &_storage._iconTags)
//        case 16: try decoder.decodeRepeatedInt64Field(value: &_storage._businessHoursPeriodsMs)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._description_p {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._namePinyin {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._avatarURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._chatID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if !_storage._tagIds.isEmpty {
//        try visitor.visitRepeatedInt64Field(value: _storage._tagIds, fieldNumber: 8)
//      }
//      if let v = _storage._enName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._enDescription {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._i18NInf {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._phoneNumber {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._reportLocation {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._avatarImage {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
//      }
//      if !_storage._iconTags.isEmpty {
//        try visitor.visitRepeatedInt32Field(value: _storage._iconTags, fieldNumber: 15)
//      }
//      if !_storage._businessHoursPeriodsMs.isEmpty {
//        try visitor.visitRepeatedInt64Field(value: _storage._businessHoursPeriodsMs, fieldNumber: 16)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Oncall, rhs: LarkNCExtensionPB_Entities_Oncall) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._description_p != rhs_storage._description_p {return false}
//        if _storage._namePinyin != rhs_storage._namePinyin {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._avatarURL != rhs_storage._avatarURL {return false}
//        if _storage._chatID != rhs_storage._chatID {return false}
//        if _storage._tagIds != rhs_storage._tagIds {return false}
//        if _storage._enName != rhs_storage._enName {return false}
//        if _storage._enDescription != rhs_storage._enDescription {return false}
//        if _storage._i18NInf != rhs_storage._i18NInf {return false}
//        if _storage._phoneNumber != rhs_storage._phoneNumber {return false}
//        if _storage._reportLocation != rhs_storage._reportLocation {return false}
//        if _storage._avatarImage != rhs_storage._avatarImage {return false}
//        if _storage._iconTags != rhs_storage._iconTags {return false}
//        if _storage._businessHoursPeriodsMs != rhs_storage._businessHoursPeriodsMs {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Oncall.I18nInf: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_Oncall.protoMessageName + ".I18nInf"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "i18n_names"),
//    2: .standard(proto: "i18n_descriptions"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NNames)
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NDescriptions)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.i18NNames.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NNames, fieldNumber: 1)
//    }
//    if !self.i18NDescriptions.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NDescriptions, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Oncall.I18nInf, rhs: LarkNCExtensionPB_Entities_Oncall.I18nInf) -> Bool {
//    if lhs.i18NNames != rhs.i18NNames {return false}
//    if lhs.i18NDescriptions != rhs.i18NDescriptions {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_OncallTag: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".OncallTag"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "name"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._id)
//      case 2: try decoder.decodeSingularStringField(value: &self._name)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._name {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_OncallTag, rhs: LarkNCExtensionPB_Entities_OncallTag) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._name != rhs._name {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Coordinate: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Coordinate"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "longitude"),
//    2: .same(proto: "latitude"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularFloatField(value: &self._longitude)
//      case 2: try decoder.decodeSingularFloatField(value: &self._latitude)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._longitude {
//      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
//    }
//    if let v = self._latitude {
//      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Coordinate, rhs: LarkNCExtensionPB_Entities_Coordinate) -> Bool {
//    if lhs._longitude != rhs._longitude {return false}
//    if lhs._latitude != rhs._latitude {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CircleArea: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CircleArea"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "center"),
//    2: .same(proto: "radius"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _center: LarkNCExtensionPB_Entities_Coordinate? = nil
//    var _radius: Float? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _center = source._center
//      _radius = source._radius
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._center)
//        case 2: try decoder.decodeSingularFloatField(value: &_storage._radius)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._center {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._radius {
//        try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CircleArea, rhs: LarkNCExtensionPB_Entities_CircleArea) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._center != rhs_storage._center {return false}
//        if _storage._radius != rhs_storage._radius {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_RectangleArea: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".RectangleArea"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "north_east"),
//    2: .standard(proto: "south_west"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _northEast: LarkNCExtensionPB_Entities_Coordinate? = nil
//    var _southWest: LarkNCExtensionPB_Entities_Coordinate? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _northEast = source._northEast
//      _southWest = source._southWest
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._northEast)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._southWest)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._northEast {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._southWest {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_RectangleArea, rhs: LarkNCExtensionPB_Entities_RectangleArea) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._northEast != rhs_storage._northEast {return false}
//        if _storage._southWest != rhs_storage._southWest {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_PolygonArea: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".PolygonArea"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "points"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.points)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.points.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.points, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_PolygonArea, rhs: LarkNCExtensionPB_Entities_PolygonArea) -> Bool {
//    if lhs.points != rhs.points {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Location: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Location"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "point"),
//    2: .standard(proto: "circle_area"),
//    3: .standard(proto: "rectangle_area"),
//    4: .standard(proto: "polygon_area"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _location: LarkNCExtensionPB_Entities_Location.OneOf_Location?
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _location = source._location
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1:
//          var v: LarkNCExtensionPB_Entities_Coordinate?
//          if let current = _storage._location {
//            try decoder.handleConflictingOneOf()
//            if case .point(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._location = .point(v)}
//        case 2:
//          var v: LarkNCExtensionPB_Entities_CircleArea?
//          if let current = _storage._location {
//            try decoder.handleConflictingOneOf()
//            if case .circleArea(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._location = .circleArea(v)}
//        case 3:
//          var v: LarkNCExtensionPB_Entities_RectangleArea?
//          if let current = _storage._location {
//            try decoder.handleConflictingOneOf()
//            if case .rectangleArea(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._location = .rectangleArea(v)}
//        case 4:
//          var v: LarkNCExtensionPB_Entities_PolygonArea?
//          if let current = _storage._location {
//            try decoder.handleConflictingOneOf()
//            if case .polygonArea(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._location = .polygonArea(v)}
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      switch _storage._location {
//      case .point(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      case .circleArea(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      case .rectangleArea(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      case .polygonArea(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      case nil: break
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Location, rhs: LarkNCExtensionPB_Entities_Location) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._location != rhs_storage._location {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DeviceSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".DeviceSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "device_id"),
//    2: .same(proto: "locale"),
//    3: .standard(proto: "locale_identifier"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._deviceID)
//      case 2: try decoder.decodeSingularEnumField(value: &self._locale)
//      case 3: try decoder.decodeSingularStringField(value: &self._localeIdentifier)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._deviceID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._locale {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    if let v = self._localeIdentifier {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DeviceSetting, rhs: LarkNCExtensionPB_Entities_DeviceSetting) -> Bool {
//    if lhs._deviceID != rhs._deviceID {return false}
//    if lhs._locale != rhs._locale {return false}
//    if lhs._localeIdentifier != rhs._localeIdentifier {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DocPermission: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".DocPermission"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "perm_code"),
//    2: .standard(proto: "perm_name"),
//    3: .standard(proto: "is_set"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt32Field(value: &self._permCode)
//      case 2: try decoder.decodeSingularStringField(value: &self._permName)
//      case 3: try decoder.decodeSingularBoolField(value: &self._isSet)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._permCode {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._permName {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._isSet {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DocPermission, rhs: LarkNCExtensionPB_Entities_DocPermission) -> Bool {
//    if lhs._permCode != rhs._permCode {return false}
//    if lhs._permName != rhs._permName {return false}
//    if lhs._isSet != rhs._isSet {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_Icon: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Icon"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "Key"),
    3: .standard(proto: "fs_unit"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularStringField(value: &self._key)
      case 3: try decoder.decodeSingularStringField(value: &self._fsUnit)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._key {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._fsUnit {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_Icon, rhs: LarkNCExtensionPB_Entities_Icon) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._key != rhs._key {return false}
    if lhs._fsUnit != rhs._fsUnit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_Doc: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Doc"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "token"),
//    2: .same(proto: "url"),
//    3: .standard(proto: "doc_type"),
//    4: .same(proto: "name"),
//    5: .standard(proto: "icon_key"),
//    6: .same(proto: "abstract"),
//    7: .standard(proto: "create_time"),
//    8: .standard(proto: "update_time"),
//    9: .standard(proto: "owner_name"),
//    10: .standard(proto: "owner_id"),
//    11: .standard(proto: "is_cross_tenant"),
//    14: .standard(proto: "is_untitled"),
//    15: .standard(proto: "str_doc_type"),
//    16: .same(proto: "expires"),
//    17: .standard(proto: "user_perm"),
//    18: .same(proto: "icon"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _token: String? = nil
//    var _url: String? = nil
//    var _docType: LarkNCExtensionPB_Entities_DocType? = nil
//    var _name: String? = nil
//    var _iconKey: String? = nil
//    var _abstract: String? = nil
//    var _createTime: Int64? = nil
//    var _updateTime: Int64? = nil
//    var _ownerName: String? = nil
//    var _ownerID: Int64? = nil
//    var _isCrossTenant: Bool? = nil
//    var _isUntitled: Bool? = nil
//    var _strDocType: String? = nil
//    var _expires: Int64? = nil
//    var _userPerm: Int32? = nil
//    var _icon: LarkNCExtensionPB_Entities_Icon? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _token = source._token
//      _url = source._url
//      _docType = source._docType
//      _name = source._name
//      _iconKey = source._iconKey
//      _abstract = source._abstract
//      _createTime = source._createTime
//      _updateTime = source._updateTime
//      _ownerName = source._ownerName
//      _ownerID = source._ownerID
//      _isCrossTenant = source._isCrossTenant
//      _isUntitled = source._isUntitled
//      _strDocType = source._strDocType
//      _expires = source._expires
//      _userPerm = source._userPerm
//      _icon = source._icon
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._token)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._url)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._docType)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._iconKey)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._abstract)
//        case 7: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
//        case 8: try decoder.decodeSingularInt64Field(value: &_storage._updateTime)
//        case 9: try decoder.decodeSingularStringField(value: &_storage._ownerName)
//        case 10: try decoder.decodeSingularInt64Field(value: &_storage._ownerID)
//        case 11: try decoder.decodeSingularBoolField(value: &_storage._isCrossTenant)
//        case 14: try decoder.decodeSingularBoolField(value: &_storage._isUntitled)
//        case 15: try decoder.decodeSingularStringField(value: &_storage._strDocType)
//        case 16: try decoder.decodeSingularInt64Field(value: &_storage._expires)
//        case 17: try decoder.decodeSingularInt32Field(value: &_storage._userPerm)
//        case 18: try decoder.decodeSingularMessageField(value: &_storage._icon)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._token {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._url {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._docType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._iconKey {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._abstract {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._createTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._updateTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._ownerName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._ownerID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._isCrossTenant {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._isUntitled {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._strDocType {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
//      }
//      if let v = _storage._expires {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 16)
//      }
//      if let v = _storage._userPerm {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
//      }
//      if let v = _storage._icon {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Doc, rhs: LarkNCExtensionPB_Entities_Doc) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._token != rhs_storage._token {return false}
//        if _storage._url != rhs_storage._url {return false}
//        if _storage._docType != rhs_storage._docType {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._iconKey != rhs_storage._iconKey {return false}
//        if _storage._abstract != rhs_storage._abstract {return false}
//        if _storage._createTime != rhs_storage._createTime {return false}
//        if _storage._updateTime != rhs_storage._updateTime {return false}
//        if _storage._ownerName != rhs_storage._ownerName {return false}
//        if _storage._ownerID != rhs_storage._ownerID {return false}
//        if _storage._isCrossTenant != rhs_storage._isCrossTenant {return false}
//        if _storage._isUntitled != rhs_storage._isUntitled {return false}
//        if _storage._strDocType != rhs_storage._strDocType {return false}
//        if _storage._expires != rhs_storage._expires {return false}
//        if _storage._userPerm != rhs_storage._userPerm {return false}
//        if _storage._icon != rhs_storage._icon {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DocCard: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".DocCard"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "token"),
//    2: .standard(proto: "message_id"),
//    3: .standard(proto: "group_id"),
//    4: .standard(proto: "permissions_could_put"),
//    5: .standard(proto: "share_info"),
//    6: .standard(proto: "authed_by_user_id"),
//    7: .standard(proto: "authed_perm"),
//    8: .standard(proto: "message_existed"),
//    9: .same(proto: "title"),
//    10: .same(proto: "expires"),
//    11: .standard(proto: "user_perm"),
//    12: .standard(proto: "doc_url"),
//    13: .standard(proto: "should_render"),
//    14: .standard(proto: "share_status"),
//    15: .standard(proto: "thumbnail_detail"),
//    16: .standard(proto: "receiver_perm"),
//    17: .standard(proto: "sender_is_external"),
//    18: .same(proto: "extra"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _token: String? = nil
//    var _messageID: String? = nil
//    var _groupID: String? = nil
//    var _permissionsCouldPut: [LarkNCExtensionPB_Entities_DocPermission] = []
//    var _shareInfo: String? = nil
//    var _authedByUserID: Int64? = nil
//    var _authedPerm: Int32? = nil
//    var _messageExisted: Bool? = nil
//    var _title: String? = nil
//    var _expires: Int64? = nil
//    var _userPerm: Int32? = nil
//    var _docURL: String? = nil
//    var _shouldRender: Bool? = nil
//    var _shareStatus: Int64? = nil
//    var _thumbnailDetail: String? = nil
//    var _receiverPerm: Int32? = nil
//    var _senderIsExternal: Bool? = nil
//    var _extra: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _token = source._token
//      _messageID = source._messageID
//      _groupID = source._groupID
//      _permissionsCouldPut = source._permissionsCouldPut
//      _shareInfo = source._shareInfo
//      _authedByUserID = source._authedByUserID
//      _authedPerm = source._authedPerm
//      _messageExisted = source._messageExisted
//      _title = source._title
//      _expires = source._expires
//      _userPerm = source._userPerm
//      _docURL = source._docURL
//      _shouldRender = source._shouldRender
//      _shareStatus = source._shareStatus
//      _thumbnailDetail = source._thumbnailDetail
//      _receiverPerm = source._receiverPerm
//      _senderIsExternal = source._senderIsExternal
//      _extra = source._extra
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._token)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._messageID)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._groupID)
//        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._permissionsCouldPut)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._shareInfo)
//        case 6: try decoder.decodeSingularInt64Field(value: &_storage._authedByUserID)
//        case 7: try decoder.decodeSingularInt32Field(value: &_storage._authedPerm)
//        case 8: try decoder.decodeSingularBoolField(value: &_storage._messageExisted)
//        case 9: try decoder.decodeSingularStringField(value: &_storage._title)
//        case 10: try decoder.decodeSingularInt64Field(value: &_storage._expires)
//        case 11: try decoder.decodeSingularInt32Field(value: &_storage._userPerm)
//        case 12: try decoder.decodeSingularStringField(value: &_storage._docURL)
//        case 13: try decoder.decodeSingularBoolField(value: &_storage._shouldRender)
//        case 14: try decoder.decodeSingularInt64Field(value: &_storage._shareStatus)
//        case 15: try decoder.decodeSingularStringField(value: &_storage._thumbnailDetail)
//        case 16: try decoder.decodeSingularInt32Field(value: &_storage._receiverPerm)
//        case 17: try decoder.decodeSingularBoolField(value: &_storage._senderIsExternal)
//        case 18: try decoder.decodeSingularStringField(value: &_storage._extra)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._token {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._messageID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._groupID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if !_storage._permissionsCouldPut.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._permissionsCouldPut, fieldNumber: 4)
//      }
//      if let v = _storage._shareInfo {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._authedByUserID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._authedPerm {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._messageExisted {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._title {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._expires {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._userPerm {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._docURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._shouldRender {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._shareStatus {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._thumbnailDetail {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
//      }
//      if let v = _storage._receiverPerm {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 16)
//      }
//      if let v = _storage._senderIsExternal {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
//      }
//      if let v = _storage._extra {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DocCard, rhs: LarkNCExtensionPB_Entities_DocCard) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._token != rhs_storage._token {return false}
//        if _storage._messageID != rhs_storage._messageID {return false}
//        if _storage._groupID != rhs_storage._groupID {return false}
//        if _storage._permissionsCouldPut != rhs_storage._permissionsCouldPut {return false}
//        if _storage._shareInfo != rhs_storage._shareInfo {return false}
//        if _storage._authedByUserID != rhs_storage._authedByUserID {return false}
//        if _storage._authedPerm != rhs_storage._authedPerm {return false}
//        if _storage._messageExisted != rhs_storage._messageExisted {return false}
//        if _storage._title != rhs_storage._title {return false}
//        if _storage._expires != rhs_storage._expires {return false}
//        if _storage._userPerm != rhs_storage._userPerm {return false}
//        if _storage._docURL != rhs_storage._docURL {return false}
//        if _storage._shouldRender != rhs_storage._shouldRender {return false}
//        if _storage._shareStatus != rhs_storage._shareStatus {return false}
//        if _storage._thumbnailDetail != rhs_storage._thumbnailDetail {return false}
//        if _storage._receiverPerm != rhs_storage._receiverPerm {return false}
//        if _storage._senderIsExternal != rhs_storage._senderIsExternal {return false}
//        if _storage._extra != rhs_storage._extra {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DocMessage: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".DocMessage"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "type"),
//    3: .standard(proto: "create_time"),
//    4: .standard(proto: "update_time"),
//    5: .same(proto: "content"),
//    6: .standard(proto: "doc_feed_id"),
//    7: .standard(proto: "from_id"),
//    8: .standard(proto: "rich_text"),
//    9: .standard(proto: "doc_reactions"),
//    10: .standard(proto: "reaction_notice"),
//    11: .standard(proto: "is_i18n_message"),
//    12: .standard(proto: "i18n_info"),
//    13: .same(proto: "extra"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _type: LarkNCExtensionPB_Entities_DocMessage.TypeEnum? = nil
//    var _createTime: Int64? = nil
//    var _updateTime: Int64? = nil
//    var _content: String? = nil
//    var _docFeedID: String? = nil
//    var _fromID: String? = nil
//    var _richText: LarkNCExtensionPB_Entities_RichText? = nil
//    var _docReactions: [LarkNCExtensionPB_Entities_DocMessage.Reaction] = []
//    var _reactionNotice: LarkNCExtensionPB_Entities_DocMessage.ReactionNotice? = nil
//    var _isI18NMessage: Bool? = nil
//    var _i18NInfo: LarkNCExtensionPB_Entities_DocMessage.I18nInfo? = nil
//    var _extra: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _type = source._type
//      _createTime = source._createTime
//      _updateTime = source._updateTime
//      _content = source._content
//      _docFeedID = source._docFeedID
//      _fromID = source._fromID
//      _richText = source._richText
//      _docReactions = source._docReactions
//      _reactionNotice = source._reactionNotice
//      _isI18NMessage = source._isI18NMessage
//      _i18NInfo = source._i18NInfo
//      _extra = source._extra
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._richText, !v.isInitialized {return false}
//      if let v = _storage._i18NInfo, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
//        case 4: try decoder.decodeSingularInt64Field(value: &_storage._updateTime)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._content)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._docFeedID)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._fromID)
//        case 8: try decoder.decodeSingularMessageField(value: &_storage._richText)
//        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._docReactions)
//        case 10: try decoder.decodeSingularMessageField(value: &_storage._reactionNotice)
//        case 11: try decoder.decodeSingularBoolField(value: &_storage._isI18NMessage)
//        case 12: try decoder.decodeSingularMessageField(value: &_storage._i18NInfo)
//        case 13: try decoder.decodeSingularStringField(value: &_storage._extra)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._createTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._updateTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._content {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._docFeedID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._fromID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._richText {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
//      }
//      if !_storage._docReactions.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._docReactions, fieldNumber: 9)
//      }
//      if let v = _storage._reactionNotice {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._isI18NMessage {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._i18NInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._extra {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DocMessage, rhs: LarkNCExtensionPB_Entities_DocMessage) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._createTime != rhs_storage._createTime {return false}
//        if _storage._updateTime != rhs_storage._updateTime {return false}
//        if _storage._content != rhs_storage._content {return false}
//        if _storage._docFeedID != rhs_storage._docFeedID {return false}
//        if _storage._fromID != rhs_storage._fromID {return false}
//        if _storage._richText != rhs_storage._richText {return false}
//        if _storage._docReactions != rhs_storage._docReactions {return false}
//        if _storage._reactionNotice != rhs_storage._reactionNotice {return false}
//        if _storage._isI18NMessage != rhs_storage._isI18NMessage {return false}
//        if _storage._i18NInfo != rhs_storage._i18NInfo {return false}
//        if _storage._extra != rhs_storage._extra {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DocMessage.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_TYPE"),
//    1: .same(proto: "MENTION"),
//    2: .same(proto: "COMMENT"),
//    3: .same(proto: "REPLY"),
//    4: .same(proto: "SOLVE"),
//    5: .same(proto: "SHARE"),
//    6: .same(proto: "REOPEN"),
//    7: .same(proto: "COMMENT_REACTION"),
//    8: .same(proto: "TEMPLATE_CARD"),
//    9: .same(proto: "WITHDRAW"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_DocMessage.TmplParamElemType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "USER_ID"),
//    2: .same(proto: "TEXT"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_DocMessage.Reaction: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_DocMessage.protoMessageName + ".Reaction"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .standard(proto: "chatter_ids"),
//    3: .standard(proto: "update_times"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._type)
//      case 2: try decoder.decodeRepeatedStringField(value: &self.chatterIds)
//      case 3: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufInt64>.self, value: &self.updateTimes)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._type {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if !self.chatterIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.chatterIds, fieldNumber: 2)
//    }
//    if !self.updateTimes.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufInt64>.self, value: self.updateTimes, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DocMessage.Reaction, rhs: LarkNCExtensionPB_Entities_DocMessage.Reaction) -> Bool {
//    if lhs._type != rhs._type {return false}
//    if lhs.chatterIds != rhs.chatterIds {return false}
//    if lhs.updateTimes != rhs.updateTimes {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DocMessage.ReactionNotice: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_DocMessage.protoMessageName + ".ReactionNotice"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .standard(proto: "is_cancelled"),
//    3: .standard(proto: "chatter_id"),
//    4: .standard(proto: "should_notify"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._type)
//      case 2: try decoder.decodeSingularBoolField(value: &self._isCancelled)
//      case 3: try decoder.decodeSingularStringField(value: &self._chatterID)
//      case 4: try decoder.decodeSingularBoolField(value: &self._shouldNotify)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._type {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._isCancelled {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    if let v = self._chatterID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._shouldNotify {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DocMessage.ReactionNotice, rhs: LarkNCExtensionPB_Entities_DocMessage.ReactionNotice) -> Bool {
//    if lhs._type != rhs._type {return false}
//    if lhs._isCancelled != rhs._isCancelled {return false}
//    if lhs._chatterID != rhs._chatterID {return false}
//    if lhs._shouldNotify != rhs._shouldNotify {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DocMessage.I18nInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_DocMessage.protoMessageName + ".I18nInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "i18n_titles"),
//    2: .standard(proto: "i18n_richtexts"),
//    3: .standard(proto: "title_tmpl_code"),
//    4: .standard(proto: "text_tmpl_code"),
//    5: .standard(proto: "title_tmpl_params"),
//    6: .standard(proto: "text_tmpl_params"),
//    7: .standard(proto: "title_tmpl_key"),
//    8: .standard(proto: "text_tmpl_key"),
//    9: .standard(proto: "text_tmpl_params_v2"),
//  ]
//
//  public var isInitialized: Bool {
//    if !LarkHTTP.Internal.areAllInitialized(self.i18NRichtexts) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NTitles)
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_RichText>.self, value: &self.i18NRichtexts)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._titleTmplCode)
//      case 4: try decoder.decodeSingularInt64Field(value: &self._textTmplCode)
//      case 5: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_DocMessage.TmplParamElement>.self, value: &self.titleTmplParams)
//      case 6: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_DocMessage.TmplParamElement>.self, value: &self.textTmplParams)
//      case 7: try decoder.decodeSingularStringField(value: &self._titleTmplKey)
//      case 8: try decoder.decodeSingularStringField(value: &self._textTmplKey)
//      case 9: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_DocMessage.TmplParamElement>.self, value: &self.textTmplParamsV2)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.i18NTitles.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NTitles, fieldNumber: 1)
//    }
//    if !self.i18NRichtexts.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_RichText>.self, value: self.i18NRichtexts, fieldNumber: 2)
//    }
//    if let v = self._titleTmplCode {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._textTmplCode {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//    }
//    if !self.titleTmplParams.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_DocMessage.TmplParamElement>.self, value: self.titleTmplParams, fieldNumber: 5)
//    }
//    if !self.textTmplParams.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_DocMessage.TmplParamElement>.self, value: self.textTmplParams, fieldNumber: 6)
//    }
//    if let v = self._titleTmplKey {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//    }
//    if let v = self._textTmplKey {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//    }
//    if !self.textTmplParamsV2.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_DocMessage.TmplParamElement>.self, value: self.textTmplParamsV2, fieldNumber: 9)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DocMessage.I18nInfo, rhs: LarkNCExtensionPB_Entities_DocMessage.I18nInfo) -> Bool {
//    if lhs.i18NTitles != rhs.i18NTitles {return false}
//    if lhs.i18NRichtexts != rhs.i18NRichtexts {return false}
//    if lhs._titleTmplCode != rhs._titleTmplCode {return false}
//    if lhs._textTmplCode != rhs._textTmplCode {return false}
//    if lhs.titleTmplParams != rhs.titleTmplParams {return false}
//    if lhs.textTmplParams != rhs.textTmplParams {return false}
//    if lhs._titleTmplKey != rhs._titleTmplKey {return false}
//    if lhs._textTmplKey != rhs._textTmplKey {return false}
//    if lhs.textTmplParamsV2 != rhs.textTmplParamsV2 {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DocMessage.TmplParamElement: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_DocMessage.protoMessageName + ".TmplParamElement"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .same(proto: "content"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._type)
//      case 2: try decoder.decodeSingularStringField(value: &self._content)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._content {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DocMessage.TmplParamElement, rhs: LarkNCExtensionPB_Entities_DocMessage.TmplParamElement) -> Bool {
//    if lhs._type != rhs._type {return false}
//    if lhs._content != rhs._content {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_OpenAppFeed: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".OpenAppFeed"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "app_id"),
//    2: .standard(proto: "avatar_key"),
//    3: .standard(proto: "avatar_url"),
//    4: .standard(proto: "app_name"),
//    5: .standard(proto: "bot_ids"),
//    6: .standard(proto: "pc_schema"),
//    7: .standard(proto: "ios_schema"),
//    8: .standard(proto: "android_schema"),
//    9: .standard(proto: "latest_open_sequence"),
//    10: .standard(proto: "latest_read_sequence"),
//    11: .same(proto: "tag"),
//    12: .same(proto: "summary"),
//    13: .standard(proto: "notify_open"),
//    14: .standard(proto: "app_name_i18n"),
//    15: .standard(proto: "push_time"),
//    16: .same(proto: "avatar"),
//    17: .standard(proto: "app_type"),
//    18: .standard(proto: "chat_id"),
//    19: .standard(proto: "push_time_ms"),
//    20: .standard(proto: "app_client_id"),
//    21: .standard(proto: "summary_i18n"),
//    22: .standard(proto: "increment_index"),
//    23: .standard(proto: "read_index"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _appID: Int64? = nil
//    var _avatarKey: String? = nil
//    var _avatarURL: String? = nil
//    var _appName: String? = nil
//    var _botIds: [Int64] = []
//    var _pcSchema: String? = nil
//    var _iosSchema: String? = nil
//    var _androidSchema: String? = nil
//    var _latestOpenSequence: Int64? = nil
//    var _latestReadSequence: Int64? = nil
//    var _tag: String? = nil
//    var _summary: String? = nil
//    var _notifyOpen: Bool? = nil
//    var _appNameI18N: Dictionary<String,String> = [:]
//    var _pushTime: Int64? = nil
//    var _avatar: LarkNCExtensionPB_Entities_Image? = nil
//    var _appType: Int64? = nil
//    var _chatID: String? = nil
//    var _pushTimeMs: Int64? = nil
//    var _appClientID: String? = nil
//    var _summaryI18N: Dictionary<String,String> = [:]
//    var _incrementIndex: Int64? = nil
//    var _readIndex: Int64? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _appID = source._appID
//      _avatarKey = source._avatarKey
//      _avatarURL = source._avatarURL
//      _appName = source._appName
//      _botIds = source._botIds
//      _pcSchema = source._pcSchema
//      _iosSchema = source._iosSchema
//      _androidSchema = source._androidSchema
//      _latestOpenSequence = source._latestOpenSequence
//      _latestReadSequence = source._latestReadSequence
//      _tag = source._tag
//      _summary = source._summary
//      _notifyOpen = source._notifyOpen
//      _appNameI18N = source._appNameI18N
//      _pushTime = source._pushTime
//      _avatar = source._avatar
//      _appType = source._appType
//      _chatID = source._chatID
//      _pushTimeMs = source._pushTimeMs
//      _appClientID = source._appClientID
//      _summaryI18N = source._summaryI18N
//      _incrementIndex = source._incrementIndex
//      _readIndex = source._readIndex
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._appID == nil {return false}
//      if _storage._appName == nil {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt64Field(value: &_storage._appID)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._avatarKey)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._avatarURL)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._appName)
//        case 5: try decoder.decodeRepeatedInt64Field(value: &_storage._botIds)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._pcSchema)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._iosSchema)
//        case 8: try decoder.decodeSingularStringField(value: &_storage._androidSchema)
//        case 9: try decoder.decodeSingularInt64Field(value: &_storage._latestOpenSequence)
//        case 10: try decoder.decodeSingularInt64Field(value: &_storage._latestReadSequence)
//        case 11: try decoder.decodeSingularStringField(value: &_storage._tag)
//        case 12: try decoder.decodeSingularStringField(value: &_storage._summary)
//        case 13: try decoder.decodeSingularBoolField(value: &_storage._notifyOpen)
//        case 14: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._appNameI18N)
//        case 15: try decoder.decodeSingularInt64Field(value: &_storage._pushTime)
//        case 16: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 17: try decoder.decodeSingularInt64Field(value: &_storage._appType)
//        case 18: try decoder.decodeSingularStringField(value: &_storage._chatID)
//        case 19: try decoder.decodeSingularInt64Field(value: &_storage._pushTimeMs)
//        case 20: try decoder.decodeSingularStringField(value: &_storage._appClientID)
//        case 21: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._summaryI18N)
//        case 22: try decoder.decodeSingularInt64Field(value: &_storage._incrementIndex)
//        case 23: try decoder.decodeSingularInt64Field(value: &_storage._readIndex)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._appID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._avatarKey {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._avatarURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._appName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if !_storage._botIds.isEmpty {
//        try visitor.visitRepeatedInt64Field(value: _storage._botIds, fieldNumber: 5)
//      }
//      if let v = _storage._pcSchema {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._iosSchema {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._androidSchema {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._latestOpenSequence {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._latestReadSequence {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._tag {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._summary {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._notifyOpen {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
//      }
//      if !_storage._appNameI18N.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._appNameI18N, fieldNumber: 14)
//      }
//      if let v = _storage._pushTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 15)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
//      }
//      if let v = _storage._appType {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 17)
//      }
//      if let v = _storage._chatID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
//      }
//      if let v = _storage._pushTimeMs {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 19)
//      }
//      if let v = _storage._appClientID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
//      }
//      if !_storage._summaryI18N.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._summaryI18N, fieldNumber: 21)
//      }
//      if let v = _storage._incrementIndex {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 22)
//      }
//      if let v = _storage._readIndex {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 23)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_OpenAppFeed, rhs: LarkNCExtensionPB_Entities_OpenAppFeed) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._appID != rhs_storage._appID {return false}
//        if _storage._avatarKey != rhs_storage._avatarKey {return false}
//        if _storage._avatarURL != rhs_storage._avatarURL {return false}
//        if _storage._appName != rhs_storage._appName {return false}
//        if _storage._botIds != rhs_storage._botIds {return false}
//        if _storage._pcSchema != rhs_storage._pcSchema {return false}
//        if _storage._iosSchema != rhs_storage._iosSchema {return false}
//        if _storage._androidSchema != rhs_storage._androidSchema {return false}
//        if _storage._latestOpenSequence != rhs_storage._latestOpenSequence {return false}
//        if _storage._latestReadSequence != rhs_storage._latestReadSequence {return false}
//        if _storage._tag != rhs_storage._tag {return false}
//        if _storage._summary != rhs_storage._summary {return false}
//        if _storage._notifyOpen != rhs_storage._notifyOpen {return false}
//        if _storage._appNameI18N != rhs_storage._appNameI18N {return false}
//        if _storage._pushTime != rhs_storage._pushTime {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._appType != rhs_storage._appType {return false}
//        if _storage._chatID != rhs_storage._chatID {return false}
//        if _storage._pushTimeMs != rhs_storage._pushTimeMs {return false}
//        if _storage._appClientID != rhs_storage._appClientID {return false}
//        if _storage._summaryI18N != rhs_storage._summaryI18N {return false}
//        if _storage._incrementIndex != rhs_storage._incrementIndex {return false}
//        if _storage._readIndex != rhs_storage._readIndex {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DocFeed: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".DocFeed"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "title"),
//    3: .same(proto: "type"),
//    4: .standard(proto: "icon_key"),
//    5: .same(proto: "url"),
//    6: .standard(proto: "create_time"),
//    7: .standard(proto: "update_time"),
//    8: .standard(proto: "owner_id"),
//    9: .standard(proto: "last_message_id"),
//    10: .standard(proto: "new_message_count"),
//    11: .standard(proto: "doc_message_ids"),
//    12: .standard(proto: "is_cross_tenant"),
//    13: .standard(proto: "is_remind"),
//    14: .standard(proto: "unread_message_ids"),
//    15: .same(proto: "token"),
//    16: .standard(proto: "str_type"),
//    17: .same(proto: "icon"),
//    18: .standard(proto: "new_message_count_ver"),
//    19: .standard(proto: "is_not_remind"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _title: String? = nil
//    var _type: LarkNCExtensionPB_Entities_DocFeed.TypeEnum? = nil
//    var _iconKey: String? = nil
//    var _url: String? = nil
//    var _createTime: Int64? = nil
//    var _updateTime: Int64? = nil
//    var _ownerID: String? = nil
//    var _lastMessageID: String? = nil
//    var _newMessageCount: Int32? = nil
//    var _docMessageIds: [String] = []
//    var _isCrossTenant: Bool? = nil
//    var _isRemind: Bool? = nil
//    var _unreadMessageIds: [Int64] = []
//    var _token: String? = nil
//    var _strType: String? = nil
//    var _icon: LarkNCExtensionPB_Entities_Icon? = nil
//    var _newMessageCountVer: Int32? = nil
//    var _isNotRemind: Bool? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _title = source._title
//      _type = source._type
//      _iconKey = source._iconKey
//      _url = source._url
//      _createTime = source._createTime
//      _updateTime = source._updateTime
//      _ownerID = source._ownerID
//      _lastMessageID = source._lastMessageID
//      _newMessageCount = source._newMessageCount
//      _docMessageIds = source._docMessageIds
//      _isCrossTenant = source._isCrossTenant
//      _isRemind = source._isRemind
//      _unreadMessageIds = source._unreadMessageIds
//      _token = source._token
//      _strType = source._strType
//      _icon = source._icon
//      _newMessageCountVer = source._newMessageCountVer
//      _isNotRemind = source._isNotRemind
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._iconKey)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._url)
//        case 6: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
//        case 7: try decoder.decodeSingularInt64Field(value: &_storage._updateTime)
//        case 8: try decoder.decodeSingularStringField(value: &_storage._ownerID)
//        case 9: try decoder.decodeSingularStringField(value: &_storage._lastMessageID)
//        case 10: try decoder.decodeSingularInt32Field(value: &_storage._newMessageCount)
//        case 11: try decoder.decodeRepeatedStringField(value: &_storage._docMessageIds)
//        case 12: try decoder.decodeSingularBoolField(value: &_storage._isCrossTenant)
//        case 13: try decoder.decodeSingularBoolField(value: &_storage._isRemind)
//        case 14: try decoder.decodeRepeatedInt64Field(value: &_storage._unreadMessageIds)
//        case 15: try decoder.decodeSingularStringField(value: &_storage._token)
//        case 16: try decoder.decodeSingularStringField(value: &_storage._strType)
//        case 17: try decoder.decodeSingularMessageField(value: &_storage._icon)
//        case 18: try decoder.decodeSingularInt32Field(value: &_storage._newMessageCountVer)
//        case 19: try decoder.decodeSingularBoolField(value: &_storage._isNotRemind)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._title {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._iconKey {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._url {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._createTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._updateTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._ownerID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._lastMessageID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._newMessageCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
//      }
//      if !_storage._docMessageIds.isEmpty {
//        try visitor.visitRepeatedStringField(value: _storage._docMessageIds, fieldNumber: 11)
//      }
//      if let v = _storage._isCrossTenant {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._isRemind {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
//      }
//      if !_storage._unreadMessageIds.isEmpty {
//        try visitor.visitRepeatedInt64Field(value: _storage._unreadMessageIds, fieldNumber: 14)
//      }
//      if let v = _storage._token {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
//      }
//      if let v = _storage._strType {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 16)
//      }
//      if let v = _storage._icon {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
//      }
//      if let v = _storage._newMessageCountVer {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 18)
//      }
//      if let v = _storage._isNotRemind {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DocFeed, rhs: LarkNCExtensionPB_Entities_DocFeed) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._title != rhs_storage._title {return false}
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._iconKey != rhs_storage._iconKey {return false}
//        if _storage._url != rhs_storage._url {return false}
//        if _storage._createTime != rhs_storage._createTime {return false}
//        if _storage._updateTime != rhs_storage._updateTime {return false}
//        if _storage._ownerID != rhs_storage._ownerID {return false}
//        if _storage._lastMessageID != rhs_storage._lastMessageID {return false}
//        if _storage._newMessageCount != rhs_storage._newMessageCount {return false}
//        if _storage._docMessageIds != rhs_storage._docMessageIds {return false}
//        if _storage._isCrossTenant != rhs_storage._isCrossTenant {return false}
//        if _storage._isRemind != rhs_storage._isRemind {return false}
//        if _storage._unreadMessageIds != rhs_storage._unreadMessageIds {return false}
//        if _storage._token != rhs_storage._token {return false}
//        if _storage._strType != rhs_storage._strType {return false}
//        if _storage._icon != rhs_storage._icon {return false}
//        if _storage._newMessageCountVer != rhs_storage._newMessageCountVer {return false}
//        if _storage._isNotRemind != rhs_storage._isNotRemind {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DocFeed.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_TYPE"),
//    1: .same(proto: "DOC"),
//    2: .same(proto: "SHEET"),
//    3: .same(proto: "BITABLE"),
//    4: .same(proto: "MINDNOTE"),
//    5: .same(proto: "FILE"),
//    6: .same(proto: "SLIDE"),
//    7: .same(proto: "WIKI"),
//    8: .same(proto: "DOCX"),
//    9: .same(proto: "FOLDER"),
//    10: .same(proto: "CATALOG"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_DocFeedSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".DocFeedSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "is_remind"),
//    2: .standard(proto: "update_time"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._isRemind)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._updateTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._isRemind {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._updateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DocFeedSetting, rhs: LarkNCExtensionPB_Entities_DocFeedSetting) -> Bool {
//    if lhs._isRemind != rhs._isRemind {return false}
//    if lhs._updateTime != rhs._updateTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DocFeedSetting.Field: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "IS_REMIND"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_CaldavUserExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CaldavUserExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "caldav_user_extra_items"),
//  ]
//
//  public var isInitialized: Bool {
//    if !LarkHTTP.Internal.areAllInitialized(self.caldavUserExtraItems) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.caldavUserExtraItems)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.caldavUserExtraItems.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.caldavUserExtraItems, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CaldavUserExtra, rhs: LarkNCExtensionPB_Entities_CaldavUserExtra) -> Bool {
//    if lhs.caldavUserExtraItems != rhs.caldavUserExtraItems {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CaldavUserExtraItem: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CaldavUserExtraItem"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "password_id"),
//    2: .standard(proto: "password_name"),
//    3: .same(proto: "password"),
//    4: .standard(proto: "password_create_time"),
//    5: .standard(proto: "password_last_update_time"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._passwordID == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._passwordID)
//      case 2: try decoder.decodeSingularStringField(value: &self._passwordName)
//      case 3: try decoder.decodeSingularStringField(value: &self._password)
//      case 4: try decoder.decodeSingularInt64Field(value: &self._passwordCreateTime)
//      case 5: try decoder.decodeSingularInt64Field(value: &self._passwordLastUpdateTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._passwordID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._passwordName {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._password {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._passwordCreateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//    }
//    if let v = self._passwordLastUpdateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CaldavUserExtraItem, rhs: LarkNCExtensionPB_Entities_CaldavUserExtraItem) -> Bool {
//    if lhs._passwordID != rhs._passwordID {return false}
//    if lhs._passwordName != rhs._passwordName {return false}
//    if lhs._password != rhs._password {return false}
//    if lhs._passwordCreateTime != rhs._passwordCreateTime {return false}
//    if lhs._passwordLastUpdateTime != rhs._passwordLastUpdateTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CaldavPasswordItem: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CaldavPasswordItem"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "password_id"),
//    2: .standard(proto: "password_name"),
//    3: .standard(proto: "password_create_time"),
//    4: .standard(proto: "password_last_update_time"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._passwordID == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._passwordID)
//      case 2: try decoder.decodeSingularStringField(value: &self._passwordName)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._passwordCreateTime)
//      case 4: try decoder.decodeSingularInt64Field(value: &self._passwordLastUpdateTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._passwordID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._passwordName {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._passwordCreateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._passwordLastUpdateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CaldavPasswordItem, rhs: LarkNCExtensionPB_Entities_CaldavPasswordItem) -> Bool {
//    if lhs._passwordID != rhs._passwordID {return false}
//    if lhs._passwordName != rhs._passwordName {return false}
//    if lhs._passwordCreateTime != rhs._passwordCreateTime {return false}
//    if lhs._passwordLastUpdateTime != rhs._passwordLastUpdateTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_Reminder: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Reminder"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "calendar_event_id"),
    2: .same(proto: "minutes"),
    3: .same(proto: "method"),
  ]

  public var isInitialized: Bool {
    if self._minutes == nil {return false}
    if self._method == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._calendarEventID)
      case 2: try decoder.decodeSingularInt32Field(value: &self._minutes)
      case 3: try decoder.decodeSingularEnumField(value: &self._method)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._calendarEventID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._minutes {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._method {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_Reminder, rhs: LarkNCExtensionPB_Entities_Reminder) -> Bool {
    if lhs._calendarEventID != rhs._calendarEventID {return false}
    if lhs._minutes != rhs._minutes {return false}
    if lhs._method != rhs._method {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_Reminder.Method: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "DEFAULT"),
    2: .same(proto: "EMAIL"),
    3: .same(proto: "POPUP"),
    4: .same(proto: "SMS"),
  ]
}

extension LarkNCExtensionPB_Entities_CalendarResourceInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CalendarResourceInfo"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "capacity"),
    2: .standard(proto: "city_name"),
    3: .standard(proto: "building_name"),
    4: .standard(proto: "resource_name"),
    5: .standard(proto: "floor_name"),
    6: .standard(proto: "is_disabled"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._capacity)
      case 2: try decoder.decodeSingularStringField(value: &self._cityName)
      case 3: try decoder.decodeSingularStringField(value: &self._buildingName)
      case 4: try decoder.decodeSingularStringField(value: &self._resourceName)
      case 5: try decoder.decodeSingularStringField(value: &self._floorName)
      case 6: try decoder.decodeSingularBoolField(value: &self._isDisabled)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._capacity {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._cityName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._buildingName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._resourceName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._floorName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._isDisabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarResourceInfo, rhs: LarkNCExtensionPB_Entities_CalendarResourceInfo) -> Bool {
    if lhs._capacity != rhs._capacity {return false}
    if lhs._cityName != rhs._cityName {return false}
    if lhs._buildingName != rhs._buildingName {return false}
    if lhs._resourceName != rhs._resourceName {return false}
    if lhs._floorName != rhs._floorName {return false}
    if lhs._isDisabled != rhs._isDisabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_Calendar: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Calendar"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "summary"),
    3: .same(proto: "description"),
    4: .standard(proto: "default_timezone"),
    5: .standard(proto: "creator_user_id"),
    6: .standard(proto: "create_time"),
    7: .standard(proto: "update_time"),
    8: .standard(proto: "default_role"),
    9: .same(proto: "type"),
    10: .standard(proto: "access_role"),
    11: .same(proto: "status"),
    12: .standard(proto: "foreground_color"),
    13: .standard(proto: "background_color"),
    14: .same(proto: "weight"),
    15: .standard(proto: "is_default"),
    16: .standard(proto: "is_visible"),
    17: .standard(proto: "is_primary"),
    18: .standard(proto: "is_deleted"),
    19: .standard(proto: "default_reminders"),
    20: .same(proto: "members"),
    21: .same(proto: "email"),
    23: .standard(proto: "is_synced"),
    24: .standard(proto: "is_accept"),
    25: .standard(proto: "is_subscriber"),
    26: .standard(proto: "is_public"),
    27: .same(proto: "note"),
    28: .standard(proto: "calendar_resource_info"),
    29: .standard(proto: "is_all_staff"),
    30: .standard(proto: "external_account"),
    31: .standard(proto: "work_hour_setting"),
    32: .standard(proto: "visibility_property"),
    33: .same(proto: "timezone"),
    34: .standard(proto: "calendar_event_schema"),
    35: .standard(proto: "calendar_schema"),
    36: .standard(proto: "schema_extra_data"),
    37: .standard(proto: "calendar_event_schema_v2"),
    38: .standard(proto: "successor_user_id"),
    39: .standard(proto: "share_options"),
    40: .standard(proto: "share_info"),
    41: .standard(proto: "is_cross_tenant"),
    42: .standard(proto: "calendar_owner_id"),
    43: .standard(proto: "cover_image"),
    44: .standard(proto: "calendar_tenant_id"),
    45: .standard(proto: "official_type"),
  ]

  fileprivate class _StorageClass {
    var _id: String? = nil
    var _summary: String? = nil
    var _description_p: String? = nil
    var _defaultTimezone: String? = nil
    var _creatorUserID: String? = nil
    var _createTime: Int64? = nil
    var _updateTime: Int64? = nil
    var _defaultRole: LarkNCExtensionPB_Entities_Calendar.AccessRole? = nil
    var _type: LarkNCExtensionPB_Entities_Calendar.TypeEnum? = nil
    var _accessRole: LarkNCExtensionPB_Entities_Calendar.AccessRole? = nil
    var _status: LarkNCExtensionPB_Entities_Calendar.Status? = nil
    var _foregroundColor: Int32? = nil
    var _backgroundColor: Int32? = nil
    var _weight: Int32? = nil
    var _isDefault: Bool? = nil
    var _isVisible: Bool? = nil
    var _isPrimary: Bool? = nil
    var _isDeleted: Bool? = nil
    var _defaultReminders: String? = nil
    var _members: [LarkNCExtensionPB_Entities_CalendarMember] = []
    var _email: String? = nil
    var _isSynced: Bool? = nil
    var _isAccept: Bool? = nil
    var _isSubscriber: Bool? = nil
    var _isPublic: Bool? = nil
    var _note: String? = nil
    var _calendarResourceInfo: LarkNCExtensionPB_Entities_CalendarResourceInfo? = nil
    var _isAllStaff: Bool? = nil
    var _externalAccount: LarkNCExtensionPB_Entities_ExternalAccount? = nil
    var _workHourSetting: LarkNCExtensionPB_Entities_WorkHourSetting? = nil
    var _visibilityProperty: Int32? = nil
    var _timezone: String? = nil
    var _calendarEventSchema: Data? = nil
    var _calendarSchema: Data? = nil
    var _schemaExtraData: Data? = nil
    var _calendarEventSchemaV2: Data? = nil
    var _successorUserID: String? = nil
    var _shareOptions: LarkNCExtensionPB_Entities_Calendar.CalendarShareOptions? = nil
    var _shareInfo: LarkNCExtensionPB_Entities_Calendar.CalendarShareInfo? = nil
    var _isCrossTenant: Bool? = nil
    var _calendarOwnerID: String? = nil
    var _coverImage: LarkNCExtensionPB_Entities_ImImage? = nil
    var _calendarTenantID: String? = nil
    var _officialType: LarkNCExtensionPB_Entities_Calendar.OfficialType? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _summary = source._summary
      _description_p = source._description_p
      _defaultTimezone = source._defaultTimezone
      _creatorUserID = source._creatorUserID
      _createTime = source._createTime
      _updateTime = source._updateTime
      _defaultRole = source._defaultRole
      _type = source._type
      _accessRole = source._accessRole
      _status = source._status
      _foregroundColor = source._foregroundColor
      _backgroundColor = source._backgroundColor
      _weight = source._weight
      _isDefault = source._isDefault
      _isVisible = source._isVisible
      _isPrimary = source._isPrimary
      _isDeleted = source._isDeleted
      _defaultReminders = source._defaultReminders
      _members = source._members
      _email = source._email
      _isSynced = source._isSynced
      _isAccept = source._isAccept
      _isSubscriber = source._isSubscriber
      _isPublic = source._isPublic
      _note = source._note
      _calendarResourceInfo = source._calendarResourceInfo
      _isAllStaff = source._isAllStaff
      _externalAccount = source._externalAccount
      _workHourSetting = source._workHourSetting
      _visibilityProperty = source._visibilityProperty
      _timezone = source._timezone
      _calendarEventSchema = source._calendarEventSchema
      _calendarSchema = source._calendarSchema
      _schemaExtraData = source._schemaExtraData
      _calendarEventSchemaV2 = source._calendarEventSchemaV2
      _successorUserID = source._successorUserID
      _shareOptions = source._shareOptions
      _shareInfo = source._shareInfo
      _isCrossTenant = source._isCrossTenant
      _calendarOwnerID = source._calendarOwnerID
      _coverImage = source._coverImage
      _calendarTenantID = source._calendarTenantID
      _officialType = source._officialType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !LarkHTTP.Internal.areAllInitialized(_storage._members) {return false}
      if let v = _storage._workHourSetting, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._summary)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularStringField(value: &_storage._defaultTimezone)
        case 5: try decoder.decodeSingularStringField(value: &_storage._creatorUserID)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._updateTime)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._defaultRole)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 10: try decoder.decodeSingularEnumField(value: &_storage._accessRole)
        case 11: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._foregroundColor)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._backgroundColor)
        case 14: try decoder.decodeSingularInt32Field(value: &_storage._weight)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._isDefault)
        case 16: try decoder.decodeSingularBoolField(value: &_storage._isVisible)
        case 17: try decoder.decodeSingularBoolField(value: &_storage._isPrimary)
        case 18: try decoder.decodeSingularBoolField(value: &_storage._isDeleted)
        case 19: try decoder.decodeSingularStringField(value: &_storage._defaultReminders)
        case 20: try decoder.decodeRepeatedMessageField(value: &_storage._members)
        case 21: try decoder.decodeSingularStringField(value: &_storage._email)
        case 23: try decoder.decodeSingularBoolField(value: &_storage._isSynced)
        case 24: try decoder.decodeSingularBoolField(value: &_storage._isAccept)
        case 25: try decoder.decodeSingularBoolField(value: &_storage._isSubscriber)
        case 26: try decoder.decodeSingularBoolField(value: &_storage._isPublic)
        case 27: try decoder.decodeSingularStringField(value: &_storage._note)
        case 28: try decoder.decodeSingularMessageField(value: &_storage._calendarResourceInfo)
        case 29: try decoder.decodeSingularBoolField(value: &_storage._isAllStaff)
        case 30: try decoder.decodeSingularMessageField(value: &_storage._externalAccount)
        case 31: try decoder.decodeSingularMessageField(value: &_storage._workHourSetting)
        case 32: try decoder.decodeSingularInt32Field(value: &_storage._visibilityProperty)
        case 33: try decoder.decodeSingularStringField(value: &_storage._timezone)
        case 34: try decoder.decodeSingularBytesField(value: &_storage._calendarEventSchema)
        case 35: try decoder.decodeSingularBytesField(value: &_storage._calendarSchema)
        case 36: try decoder.decodeSingularBytesField(value: &_storage._schemaExtraData)
        case 37: try decoder.decodeSingularBytesField(value: &_storage._calendarEventSchemaV2)
        case 38: try decoder.decodeSingularStringField(value: &_storage._successorUserID)
        case 39: try decoder.decodeSingularMessageField(value: &_storage._shareOptions)
        case 40: try decoder.decodeSingularMessageField(value: &_storage._shareInfo)
        case 41: try decoder.decodeSingularBoolField(value: &_storage._isCrossTenant)
        case 42: try decoder.decodeSingularStringField(value: &_storage._calendarOwnerID)
        case 43: try decoder.decodeSingularMessageField(value: &_storage._coverImage)
        case 44: try decoder.decodeSingularStringField(value: &_storage._calendarTenantID)
        case 45: try decoder.decodeSingularEnumField(value: &_storage._officialType)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._summary {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._defaultTimezone {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._creatorUserID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._updateTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._defaultRole {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
      }
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
      }
      if let v = _storage._accessRole {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 10)
      }
      if let v = _storage._status {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
      }
      if let v = _storage._foregroundColor {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      }
      if let v = _storage._backgroundColor {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._weight {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
      }
      if let v = _storage._isDefault {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      }
      if let v = _storage._isVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      }
      if let v = _storage._isPrimary {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      }
      if let v = _storage._isDeleted {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      }
      if let v = _storage._defaultReminders {
        try visitor.visitSingularStringField(value: v, fieldNumber: 19)
      }
      if !_storage._members.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._members, fieldNumber: 20)
      }
      if let v = _storage._email {
        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
      }
      if let v = _storage._isSynced {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      }
      if let v = _storage._isAccept {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 24)
      }
      if let v = _storage._isSubscriber {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 25)
      }
      if let v = _storage._isPublic {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 26)
      }
      if let v = _storage._note {
        try visitor.visitSingularStringField(value: v, fieldNumber: 27)
      }
      if let v = _storage._calendarResourceInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      }
      if let v = _storage._isAllStaff {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 29)
      }
      if let v = _storage._externalAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
      if let v = _storage._workHourSetting {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      }
      if let v = _storage._visibilityProperty {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 32)
      }
      if let v = _storage._timezone {
        try visitor.visitSingularStringField(value: v, fieldNumber: 33)
      }
      if let v = _storage._calendarEventSchema {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 34)
      }
      if let v = _storage._calendarSchema {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 35)
      }
      if let v = _storage._schemaExtraData {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 36)
      }
      if let v = _storage._calendarEventSchemaV2 {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 37)
      }
      if let v = _storage._successorUserID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 38)
      }
      if let v = _storage._shareOptions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 39)
      }
      if let v = _storage._shareInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
      }
      if let v = _storage._isCrossTenant {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 41)
      }
      if let v = _storage._calendarOwnerID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 42)
      }
      if let v = _storage._coverImage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 43)
      }
      if let v = _storage._calendarTenantID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 44)
      }
      if let v = _storage._officialType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 45)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_Calendar, rhs: LarkNCExtensionPB_Entities_Calendar) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._summary != rhs_storage._summary {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._defaultTimezone != rhs_storage._defaultTimezone {return false}
        if _storage._creatorUserID != rhs_storage._creatorUserID {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._defaultRole != rhs_storage._defaultRole {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._accessRole != rhs_storage._accessRole {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._foregroundColor != rhs_storage._foregroundColor {return false}
        if _storage._backgroundColor != rhs_storage._backgroundColor {return false}
        if _storage._weight != rhs_storage._weight {return false}
        if _storage._isDefault != rhs_storage._isDefault {return false}
        if _storage._isVisible != rhs_storage._isVisible {return false}
        if _storage._isPrimary != rhs_storage._isPrimary {return false}
        if _storage._isDeleted != rhs_storage._isDeleted {return false}
        if _storage._defaultReminders != rhs_storage._defaultReminders {return false}
        if _storage._members != rhs_storage._members {return false}
        if _storage._email != rhs_storage._email {return false}
        if _storage._isSynced != rhs_storage._isSynced {return false}
        if _storage._isAccept != rhs_storage._isAccept {return false}
        if _storage._isSubscriber != rhs_storage._isSubscriber {return false}
        if _storage._isPublic != rhs_storage._isPublic {return false}
        if _storage._note != rhs_storage._note {return false}
        if _storage._calendarResourceInfo != rhs_storage._calendarResourceInfo {return false}
        if _storage._isAllStaff != rhs_storage._isAllStaff {return false}
        if _storage._externalAccount != rhs_storage._externalAccount {return false}
        if _storage._workHourSetting != rhs_storage._workHourSetting {return false}
        if _storage._visibilityProperty != rhs_storage._visibilityProperty {return false}
        if _storage._timezone != rhs_storage._timezone {return false}
        if _storage._calendarEventSchema != rhs_storage._calendarEventSchema {return false}
        if _storage._calendarSchema != rhs_storage._calendarSchema {return false}
        if _storage._schemaExtraData != rhs_storage._schemaExtraData {return false}
        if _storage._calendarEventSchemaV2 != rhs_storage._calendarEventSchemaV2 {return false}
        if _storage._successorUserID != rhs_storage._successorUserID {return false}
        if _storage._shareOptions != rhs_storage._shareOptions {return false}
        if _storage._shareInfo != rhs_storage._shareInfo {return false}
        if _storage._isCrossTenant != rhs_storage._isCrossTenant {return false}
        if _storage._calendarOwnerID != rhs_storage._calendarOwnerID {return false}
        if _storage._coverImage != rhs_storage._coverImage {return false}
        if _storage._calendarTenantID != rhs_storage._calendarTenantID {return false}
        if _storage._officialType != rhs_storage._officialType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_Calendar.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_TYPE"),
    1: .same(proto: "PRIMARY"),
    2: .same(proto: "OTHER"),
    3: .same(proto: "GOOGLE"),
    4: .same(proto: "RESOURCES"),
    5: .same(proto: "GOOGLE_RESOURCES"),
    6: .same(proto: "DISMISSED"),
    7: .same(proto: "EMAIL"),
    8: .same(proto: "EXCHANGE"),
    9: .same(proto: "ACTIVITY"),
  ]
}

extension LarkNCExtensionPB_Entities_Calendar.AccessRole: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "FREE_BUSY_READER"),
    2: .same(proto: "READER"),
    3: .same(proto: "WRITER"),
    4: .same(proto: "OWNER"),
  ]
}

extension LarkNCExtensionPB_Entities_Calendar.Status: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "DEFAULT"),
    2: .same(proto: "ACCEPTED"),
    3: .same(proto: "DECLINED"),
    4: .same(proto: "INVITED"),
    5: .same(proto: "REMOVED"),
  ]
}

extension LarkNCExtensionPB_Entities_Calendar.VisibilityProperty: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "NORMAL_VIEW"),
    2: .same(proto: "MEETING_VIEW"),
    4: .same(proto: "TODAY_FEED_VIEW"),
    8: .same(proto: "MOBILE_NORMAL_VIEW"),
    16: .same(proto: "MOBILE_MEETING_VIEW"),
    32: .same(proto: "WEB_NORMAL_VIEW"),
    64: .same(proto: "WEB_MEETING_VIEW"),
  ]
}

extension LarkNCExtensionPB_Entities_Calendar.SubscriptionType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "SUB_NORMAL_VIEW"),
    2: .same(proto: "SUB_MEETING_VIEW"),
  ]
}

extension LarkNCExtensionPB_Entities_Calendar.ShareOption: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN_SHARE_OPT"),
    5: .same(proto: "SHARE_OPT_PRIVATE"),
    10: .same(proto: "SHARE_OPT_FREE_BUSY_READER"),
    15: .same(proto: "SHARE_OPT_READER"),
    20: .same(proto: "SHARE_OPT_WRITER"),
    25: .same(proto: "SHARE_OPT_OWNER"),
  ]
}

extension LarkNCExtensionPB_Entities_Calendar.OfficialType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "NOT_OFFICIAL"),
    1: .same(proto: "BYTEDANCE"),
  ]
}

extension LarkNCExtensionPB_Entities_Calendar.CalendarShareOptions: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_Calendar.protoMessageName + ".CalendarShareOptions"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "default_share_option"),
    2: .standard(proto: "cross_default_share_option"),
    3: .standard(proto: "cross_top_share_option"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._defaultShareOption)
      case 2: try decoder.decodeSingularEnumField(value: &self._crossDefaultShareOption)
      case 3: try decoder.decodeSingularEnumField(value: &self._crossTopShareOption)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._defaultShareOption {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._crossDefaultShareOption {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._crossTopShareOption {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_Calendar.CalendarShareOptions, rhs: LarkNCExtensionPB_Entities_Calendar.CalendarShareOptions) -> Bool {
    if lhs._defaultShareOption != rhs._defaultShareOption {return false}
    if lhs._crossDefaultShareOption != rhs._crossDefaultShareOption {return false}
    if lhs._crossTopShareOption != rhs._crossTopShareOption {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_Calendar.CalendarShareInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_Calendar.protoMessageName + ".CalendarShareInfo"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "share_url"),
    2: .standard(proto: "subscriber_num"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._shareURL)
      case 2: try decoder.decodeSingularInt32Field(value: &self._subscriberNum)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._shareURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._subscriberNum {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_Calendar.CalendarShareInfo, rhs: LarkNCExtensionPB_Entities_Calendar.CalendarShareInfo) -> Bool {
    if lhs._shareURL != rhs._shareURL {return false}
    if lhs._subscriberNum != rhs._subscriberNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_ImImage: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImImage"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "image_key"),
    2: .standard(proto: "fs_unit"),
    3: .same(proto: "crypto"),
    4: .same(proto: "Attrs"),
  ]

  fileprivate class _StorageClass {
    var _imageKey: String? = nil
    var _fsUnit: String? = nil
    var _crypto: LarkNCExtensionPB_Entities_Crypto? = nil
    var _attrs: [LarkNCExtensionPB_Entities_ImImage.ImageAttribute] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _imageKey = source._imageKey
      _fsUnit = source._fsUnit
      _crypto = source._crypto
      _attrs = source._attrs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._imageKey)
        case 2: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._crypto)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._attrs)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._imageKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._fsUnit {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._crypto {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._attrs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attrs, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_ImImage, rhs: LarkNCExtensionPB_Entities_ImImage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._imageKey != rhs_storage._imageKey {return false}
        if _storage._fsUnit != rhs_storage._fsUnit {return false}
        if _storage._crypto != rhs_storage._crypto {return false}
        if _storage._attrs != rhs_storage._attrs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_ImImage.ImageAttribute: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_ImImage.protoMessageName + ".ImageAttribute"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "CropType"),
    2: .same(proto: "Width"),
    3: .same(proto: "Height"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._cropType)
      case 2: try decoder.decodeSingularInt64Field(value: &self._width)
      case 3: try decoder.decodeSingularInt64Field(value: &self._height)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._cropType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._width {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    }
    if let v = self._height {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_ImImage.ImageAttribute, rhs: LarkNCExtensionPB_Entities_ImImage.ImageAttribute) -> Bool {
    if lhs._cropType != rhs._cropType {return false}
    if lhs._width != rhs._width {return false}
    if lhs._height != rhs._height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_UserCalendarInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UserCalendarInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "note"),
//    2: .standard(proto: "background_color"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._note)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._backgroundColor)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._note {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._backgroundColor {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserCalendarInfo, rhs: LarkNCExtensionPB_Entities_UserCalendarInfo) -> Bool {
//    if lhs._note != rhs._note {return false}
//    if lhs._backgroundColor != rhs._backgroundColor {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarMemberCommit: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarMemberCommit"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "member_type"),
//    2: .standard(proto: "access_role"),
//    100: .same(proto: "user"),
//    101: .same(proto: "group"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _memberType: LarkNCExtensionPB_Entities_CalendarMemberCommit.CalendarMemberType? = nil
//    var _accessRole: LarkNCExtensionPB_Entities_Calendar.AccessRole? = nil
//    var _dependency: LarkNCExtensionPB_Entities_CalendarMemberCommit.OneOf_Dependency?
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _memberType = source._memberType
//      _accessRole = source._accessRole
//      _dependency = source._dependency
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._memberType)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._accessRole)
//        case 100:
//          var v: LarkNCExtensionPB_Entities_CalendarMemberCommit.User?
//          if let current = _storage._dependency {
//            try decoder.handleConflictingOneOf()
//            if case .user(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._dependency = .user(v)}
//        case 101:
//          var v: LarkNCExtensionPB_Entities_CalendarMemberCommit.Group?
//          if let current = _storage._dependency {
//            try decoder.handleConflictingOneOf()
//            if case .group(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._dependency = .group(v)}
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._memberType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._accessRole {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      switch _storage._dependency {
//      case .user(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
//      case .group(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
//      case nil: break
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarMemberCommit, rhs: LarkNCExtensionPB_Entities_CalendarMemberCommit) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._memberType != rhs_storage._memberType {return false}
//        if _storage._accessRole != rhs_storage._accessRole {return false}
//        if _storage._dependency != rhs_storage._dependency {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarMemberCommit.CalendarMemberType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "INDIVIDUAL"),
//    2: .same(proto: "GROUP"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_CalendarMemberCommit.User: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CalendarMemberCommit.protoMessageName + ".User"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "user_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._userID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._userID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarMemberCommit.User, rhs: LarkNCExtensionPB_Entities_CalendarMemberCommit.User) -> Bool {
//    if lhs._userID != rhs._userID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarMemberCommit.Group: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CalendarMemberCommit.protoMessageName + ".Group"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "group_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._groupID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._groupID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarMemberCommit.Group, rhs: LarkNCExtensionPB_Entities_CalendarMemberCommit.Group) -> Bool {
//    if lhs._groupID != rhs._groupID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarMemberCommits: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarMemberCommits"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "add_members"),
//    2: .standard(proto: "update_members"),
//    3: .standard(proto: "remove_user_ids"),
//    4: .standard(proto: "remove_group_ids"),
//    5: .same(proto: "comment"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.addMembers)
//      case 2: try decoder.decodeRepeatedMessageField(value: &self.updateMembers)
//      case 3: try decoder.decodeRepeatedStringField(value: &self.removeUserIds)
//      case 4: try decoder.decodeRepeatedStringField(value: &self.removeGroupIds)
//      case 5: try decoder.decodeSingularStringField(value: &self._comment)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.addMembers.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.addMembers, fieldNumber: 1)
//    }
//    if !self.updateMembers.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.updateMembers, fieldNumber: 2)
//    }
//    if !self.removeUserIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.removeUserIds, fieldNumber: 3)
//    }
//    if !self.removeGroupIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.removeGroupIds, fieldNumber: 4)
//    }
//    if let v = self._comment {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarMemberCommits, rhs: LarkNCExtensionPB_Entities_CalendarMemberCommits) -> Bool {
//    if lhs.addMembers != rhs.addMembers {return false}
//    if lhs.updateMembers != rhs.updateMembers {return false}
//    if lhs.removeUserIds != rhs.removeUserIds {return false}
//    if lhs.removeGroupIds != rhs.removeGroupIds {return false}
//    if lhs._comment != rhs._comment {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarSaveInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarSaveInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "summary"),
//    3: .same(proto: "description"),
//    4: .standard(proto: "default_timezone"),
//    5: .standard(proto: "cover_image_key"),
//    6: .standard(proto: "share_options"),
//    7: .standard(proto: "member_commits"),
//    8: .standard(proto: "individual_calendar_info"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _summary: String? = nil
//    var _description_p: String? = nil
//    var _defaultTimezone: String? = nil
//    var _coverImageKey: String? = nil
//    var _shareOptions: LarkNCExtensionPB_Entities_Calendar.CalendarShareOptions? = nil
//    var _memberCommits: LarkNCExtensionPB_Entities_CalendarMemberCommits? = nil
//    var _individualCalendarInfo: LarkNCExtensionPB_Entities_UserCalendarInfo? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _summary = source._summary
//      _description_p = source._description_p
//      _defaultTimezone = source._defaultTimezone
//      _coverImageKey = source._coverImageKey
//      _shareOptions = source._shareOptions
//      _memberCommits = source._memberCommits
//      _individualCalendarInfo = source._individualCalendarInfo
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._summary)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._defaultTimezone)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._coverImageKey)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._shareOptions)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._memberCommits)
//        case 8: try decoder.decodeSingularMessageField(value: &_storage._individualCalendarInfo)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._summary {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._description_p {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._defaultTimezone {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._coverImageKey {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._shareOptions {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._memberCommits {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._individualCalendarInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarSaveInfo, rhs: LarkNCExtensionPB_Entities_CalendarSaveInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._summary != rhs_storage._summary {return false}
//        if _storage._description_p != rhs_storage._description_p {return false}
//        if _storage._defaultTimezone != rhs_storage._defaultTimezone {return false}
//        if _storage._coverImageKey != rhs_storage._coverImageKey {return false}
//        if _storage._shareOptions != rhs_storage._shareOptions {return false}
//        if _storage._memberCommits != rhs_storage._memberCommits {return false}
//        if _storage._individualCalendarInfo != rhs_storage._individualCalendarInfo {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_ExternalAccount: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExternalAccount"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "email"),
    2: .standard(proto: "password_invalid"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._email)
      case 2: try decoder.decodeSingularBoolField(value: &self._passwordInvalid)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._email {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._passwordInvalid {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_ExternalAccount, rhs: LarkNCExtensionPB_Entities_ExternalAccount) -> Bool {
    if lhs._email != rhs._email {return false}
    if lhs._passwordInvalid != rhs._passwordInvalid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_ExternalMailAccountSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ExternalMailAccountSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "enable_calendar"),
//    2: .standard(proto: "enable_email_attendee_invitation"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._enableCalendar)
//      case 2: try decoder.decodeSingularBoolField(value: &self._enableEmailAttendeeInvitation)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._enableCalendar {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._enableEmailAttendeeInvitation {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ExternalMailAccountSetting, rhs: LarkNCExtensionPB_Entities_ExternalMailAccountSetting) -> Bool {
//    if lhs._enableCalendar != rhs._enableCalendar {return false}
//    if lhs._enableEmailAttendeeInvitation != rhs._enableEmailAttendeeInvitation {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ExternalMailAccount: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ExternalMailAccount"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "mail_address"),
//    2: .same(proto: "type"),
//    3: .standard(proto: "has_gmail_scope"),
//    4: .same(proto: "setting"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _mailAddress: String? = nil
//    var _type: LarkNCExtensionPB_Entities_ExternalMailAccount.AccountType? = nil
//    var _hasGmailScope_p: Bool? = nil
//    var _setting: LarkNCExtensionPB_Entities_ExternalMailAccountSetting? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _mailAddress = source._mailAddress
//      _type = source._type
//      _hasGmailScope_p = source._hasGmailScope_p
//      _setting = source._setting
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._mailAddress)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 3: try decoder.decodeSingularBoolField(value: &_storage._hasGmailScope_p)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._setting)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._mailAddress {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._hasGmailScope_p {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._setting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ExternalMailAccount, rhs: LarkNCExtensionPB_Entities_ExternalMailAccount) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._mailAddress != rhs_storage._mailAddress {return false}
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._hasGmailScope_p != rhs_storage._hasGmailScope_p {return false}
//        if _storage._setting != rhs_storage._setting {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ExternalMailAccount.AccountType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "Google"),
//    2: .same(proto: "Exchange"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_CalendarBriefInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarBriefInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "type"),
//    3: .standard(proto: "successor_user_id"),
//    4: .standard(proto: "is_all_staff"),
//    5: .standard(proto: "calendar_summary"),
//    6: .standard(proto: "creator_user_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularEnumField(value: &self._type)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._successorUserID)
//      case 4: try decoder.decodeSingularBoolField(value: &self._isAllStaff)
//      case 5: try decoder.decodeSingularStringField(value: &self._calendarSummary)
//      case 6: try decoder.decodeSingularInt64Field(value: &self._creatorUserID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    if let v = self._successorUserID {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._isAllStaff {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//    }
//    if let v = self._calendarSummary {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    if let v = self._creatorUserID {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarBriefInfo, rhs: LarkNCExtensionPB_Entities_CalendarBriefInfo) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._type != rhs._type {return false}
//    if lhs._successorUserID != rhs._successorUserID {return false}
//    if lhs._isAllStaff != rhs._isAllStaff {return false}
//    if lhs._calendarSummary != rhs._calendarSummary {return false}
//    if lhs._creatorUserID != rhs._creatorUserID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "max_version"),
//    3: .standard(proto: "folder_obj_token"),
//    4: .standard(proto: "successor_user_id"),
//    5: .standard(proto: "calendar_schema"),
//    6: .standard(proto: "calendar_event_schema"),
//    7: .same(proto: "CoverImgInfo"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _maxVersion: Int64? = nil
//    var _folderObjToken: String? = nil
//    var _successorUserID: Int64? = nil
//    var _calendarSchema: LarkNCExtensionPB_Entities_CalendarSchemaCollection? = nil
//    var _calendarEventSchema: LarkNCExtensionPB_Entities_CalendarSchemaCollection? = nil
//    var _coverImgInfo: LarkNCExtensionPB_Entities_ImImage? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _maxVersion = source._maxVersion
//      _folderObjToken = source._folderObjToken
//      _successorUserID = source._successorUserID
//      _calendarSchema = source._calendarSchema
//      _calendarEventSchema = source._calendarEventSchema
//      _coverImgInfo = source._coverImgInfo
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt64Field(value: &_storage._maxVersion)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._folderObjToken)
//        case 4: try decoder.decodeSingularInt64Field(value: &_storage._successorUserID)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._calendarSchema)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._calendarEventSchema)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._coverImgInfo)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._maxVersion {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._folderObjToken {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._successorUserID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._calendarSchema {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._calendarEventSchema {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._coverImgInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarExtra, rhs: LarkNCExtensionPB_Entities_CalendarExtra) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._maxVersion != rhs_storage._maxVersion {return false}
//        if _storage._folderObjToken != rhs_storage._folderObjToken {return false}
//        if _storage._successorUserID != rhs_storage._successorUserID {return false}
//        if _storage._calendarSchema != rhs_storage._calendarSchema {return false}
//        if _storage._calendarEventSchema != rhs_storage._calendarEventSchema {return false}
//        if _storage._coverImgInfo != rhs_storage._coverImgInfo {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_CalendarMember: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CalendarMember"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "chatter_id"),
    2: .standard(proto: "access_role"),
    3: .same(proto: "status"),
    4: .same(proto: "tags"),
    5: .standard(proto: "member_type"),
    6: .standard(proto: "chat_id"),
  ]

  public var isInitialized: Bool {
    if self._chatterID == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._chatterID)
      case 2: try decoder.decodeSingularEnumField(value: &self._accessRole)
      case 3: try decoder.decodeSingularEnumField(value: &self._status)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.tags)
      case 5: try decoder.decodeSingularEnumField(value: &self._memberType)
      case 6: try decoder.decodeSingularStringField(value: &self._chatID)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._chatterID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._accessRole {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 4)
    }
    if let v = self._memberType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }
    if let v = self._chatID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarMember, rhs: LarkNCExtensionPB_Entities_CalendarMember) -> Bool {
    if lhs._chatterID != rhs._chatterID {return false}
    if lhs._accessRole != rhs._accessRole {return false}
    if lhs._status != rhs._status {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs._memberType != rhs._memberType {return false}
    if lhs._chatID != rhs._chatID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CalendarMember.CalendarMemberType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "INDIVIDUAL"),
    2: .same(proto: "GROUP"),
  ]
}

extension LarkNCExtensionPB_Entities_CalendarMember.CalendarMemberSupportType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "SUPPORT_INDIVIDUAL"),
    2: .same(proto: "SUPPORT_INDIVIDUAL_GROUP"),
  ]
}

extension LarkNCExtensionPB_Entities_UserCalendarRefTag: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserCalendarRefTag"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "content"),
    3: .standard(proto: "access_role"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularStringField(value: &self._content)
      case 3: try decoder.decodeSingularInt32Field(value: &self._accessRole)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._content {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._accessRole {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_UserCalendarRefTag, rhs: LarkNCExtensionPB_Entities_UserCalendarRefTag) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._content != rhs._content {return false}
    if lhs._accessRole != rhs._accessRole {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_UserCalendarRefTag.UserCalendarRefTagType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "INDIVIDUAL"),
    2: .same(proto: "GROUP"),
  ]
}

//extension LarkNCExtensionPB_Entities_UserCalendarExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UserCalendarExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "tags"),
//    2: .same(proto: "CalendarCreatorUserID"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.tags)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._calendarCreatorUserID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.tags.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 1)
//    }
//    if let v = self._calendarCreatorUserID {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserCalendarExtra, rhs: LarkNCExtensionPB_Entities_UserCalendarExtra) -> Bool {
//    if lhs.tags != rhs.tags {return false}
//    if lhs._calendarCreatorUserID != rhs._calendarCreatorUserID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarContact: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarContact"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "calendar_id"),
//    2: .same(proto: "summary"),
//    3: .standard(proto: "avatar_url"),
//    4: .standard(proto: "is_resource"),
//    5: .standard(proto: "department_ids"),
//    6: .standard(proto: "chatter_id"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._calendarID == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._calendarID)
//      case 2: try decoder.decodeSingularStringField(value: &self._summary)
//      case 3: try decoder.decodeSingularStringField(value: &self._avatarURL)
//      case 4: try decoder.decodeSingularBoolField(value: &self._isResource)
//      case 5: try decoder.decodeRepeatedStringField(value: &self.departmentIds)
//      case 6: try decoder.decodeSingularStringField(value: &self._chatterID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._calendarID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._summary {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._avatarURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._isResource {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//    }
//    if !self.departmentIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.departmentIds, fieldNumber: 5)
//    }
//    if let v = self._chatterID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarContact, rhs: LarkNCExtensionPB_Entities_CalendarContact) -> Bool {
//    if lhs._calendarID != rhs._calendarID {return false}
//    if lhs._summary != rhs._summary {return false}
//    if lhs._avatarURL != rhs._avatarURL {return false}
//    if lhs._isResource != rhs._isResource {return false}
//    if lhs.departmentIds != rhs.departmentIds {return false}
//    if lhs._chatterID != rhs._chatterID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_EventCardTemplate: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".EventCardTemplate"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "summary"),
//    2: .standard(proto: "sender_id"),
//    3: .standard(proto: "is_optional"),
//    4: .standard(proto: "start_time"),
//    5: .standard(proto: "end_time"),
//    6: .same(proto: "rrule"),
//    7: .standard(proto: "is_all_day"),
//    8: .same(proto: "version"),
//    9: .standard(proto: "start_timezone"),
//    10: .standard(proto: "end_timezone"),
//    11: .same(proto: "id"),
//    12: .same(proto: "type"),
//    13: .same(proto: "uid"),
//    14: .standard(proto: "original_time"),
//    15: .standard(proto: "calendar_id"),
//    16: .standard(proto: "meeting_rooms"),
//    17: .standard(proto: "attendee_chatter_ids"),
//    18: .standard(proto: "chat_ids"),
//    19: .standard(proto: "self_attendee_status"),
//    20: .standard(proto: "attendee_count"),
//    21: .same(proto: "location"),
//    22: .same(proto: "description"),
//    23: .standard(proto: "event_type"),
//    24: .standard(proto: "is_cross_tenant"),
//    25: .standard(proto: "individual_chatter_ids"),
//    26: .standard(proto: "calendar_resource_infos"),
//    27: .standard(proto: "rsvp_user_id"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _summary: String? = nil
//    var _senderID: String? = nil
//    var _isOptional: Bool? = nil
//    var _startTime: Int64? = nil
//    var _endTime: Int64? = nil
//    var _rrule: String? = nil
//    var _isAllDay: Bool? = nil
//    var _version: Int64? = nil
//    var _startTimezone: String? = nil
//    var _endTimezone: String? = nil
//    var _id: String? = nil
//    var _type: Int32? = nil
//    var _uid: String? = nil
//    var _originalTime: Int64? = nil
//    var _calendarID: String? = nil
//    var _meetingRooms: [String] = []
//    var _attendeeChatterIds: [String] = []
//    var _chatIds: [String] = []
//    var _selfAttendeeStatus: Int32? = nil
//    var _attendeeCount: Int32? = nil
//    var _location: String? = nil
//    var _description_p: String? = nil
//    var _eventType: Int32? = nil
//    var _isCrossTenant: Bool? = nil
//    var _individualChatterIds: [String] = []
//    var _calendarResourceInfos: [LarkNCExtensionPB_Entities_CalendarResourceInfo] = []
//    var _rsvpUserID: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _summary = source._summary
//      _senderID = source._senderID
//      _isOptional = source._isOptional
//      _startTime = source._startTime
//      _endTime = source._endTime
//      _rrule = source._rrule
//      _isAllDay = source._isAllDay
//      _version = source._version
//      _startTimezone = source._startTimezone
//      _endTimezone = source._endTimezone
//      _id = source._id
//      _type = source._type
//      _uid = source._uid
//      _originalTime = source._originalTime
//      _calendarID = source._calendarID
//      _meetingRooms = source._meetingRooms
//      _attendeeChatterIds = source._attendeeChatterIds
//      _chatIds = source._chatIds
//      _selfAttendeeStatus = source._selfAttendeeStatus
//      _attendeeCount = source._attendeeCount
//      _location = source._location
//      _description_p = source._description_p
//      _eventType = source._eventType
//      _isCrossTenant = source._isCrossTenant
//      _individualChatterIds = source._individualChatterIds
//      _calendarResourceInfos = source._calendarResourceInfos
//      _rsvpUserID = source._rsvpUserID
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._summary)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._senderID)
//        case 3: try decoder.decodeSingularBoolField(value: &_storage._isOptional)
//        case 4: try decoder.decodeSingularInt64Field(value: &_storage._startTime)
//        case 5: try decoder.decodeSingularInt64Field(value: &_storage._endTime)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._rrule)
//        case 7: try decoder.decodeSingularBoolField(value: &_storage._isAllDay)
//        case 8: try decoder.decodeSingularInt64Field(value: &_storage._version)
//        case 9: try decoder.decodeSingularStringField(value: &_storage._startTimezone)
//        case 10: try decoder.decodeSingularStringField(value: &_storage._endTimezone)
//        case 11: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 12: try decoder.decodeSingularInt32Field(value: &_storage._type)
//        case 13: try decoder.decodeSingularStringField(value: &_storage._uid)
//        case 14: try decoder.decodeSingularInt64Field(value: &_storage._originalTime)
//        case 15: try decoder.decodeSingularStringField(value: &_storage._calendarID)
//        case 16: try decoder.decodeRepeatedStringField(value: &_storage._meetingRooms)
//        case 17: try decoder.decodeRepeatedStringField(value: &_storage._attendeeChatterIds)
//        case 18: try decoder.decodeRepeatedStringField(value: &_storage._chatIds)
//        case 19: try decoder.decodeSingularInt32Field(value: &_storage._selfAttendeeStatus)
//        case 20: try decoder.decodeSingularInt32Field(value: &_storage._attendeeCount)
//        case 21: try decoder.decodeSingularStringField(value: &_storage._location)
//        case 22: try decoder.decodeSingularStringField(value: &_storage._description_p)
//        case 23: try decoder.decodeSingularInt32Field(value: &_storage._eventType)
//        case 24: try decoder.decodeSingularBoolField(value: &_storage._isCrossTenant)
//        case 25: try decoder.decodeRepeatedStringField(value: &_storage._individualChatterIds)
//        case 26: try decoder.decodeRepeatedMessageField(value: &_storage._calendarResourceInfos)
//        case 27: try decoder.decodeSingularStringField(value: &_storage._rsvpUserID)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._summary {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._senderID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._isOptional {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._startTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._endTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._rrule {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._isAllDay {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._version {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._startTimezone {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._endTimezone {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._uid {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._originalTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._calendarID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
//      }
//      if !_storage._meetingRooms.isEmpty {
//        try visitor.visitRepeatedStringField(value: _storage._meetingRooms, fieldNumber: 16)
//      }
//      if !_storage._attendeeChatterIds.isEmpty {
//        try visitor.visitRepeatedStringField(value: _storage._attendeeChatterIds, fieldNumber: 17)
//      }
//      if !_storage._chatIds.isEmpty {
//        try visitor.visitRepeatedStringField(value: _storage._chatIds, fieldNumber: 18)
//      }
//      if let v = _storage._selfAttendeeStatus {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 19)
//      }
//      if let v = _storage._attendeeCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 20)
//      }
//      if let v = _storage._location {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
//      }
//      if let v = _storage._description_p {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 22)
//      }
//      if let v = _storage._eventType {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 23)
//      }
//      if let v = _storage._isCrossTenant {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 24)
//      }
//      if !_storage._individualChatterIds.isEmpty {
//        try visitor.visitRepeatedStringField(value: _storage._individualChatterIds, fieldNumber: 25)
//      }
//      if !_storage._calendarResourceInfos.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._calendarResourceInfos, fieldNumber: 26)
//      }
//      if let v = _storage._rsvpUserID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 27)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_EventCardTemplate, rhs: LarkNCExtensionPB_Entities_EventCardTemplate) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._summary != rhs_storage._summary {return false}
//        if _storage._senderID != rhs_storage._senderID {return false}
//        if _storage._isOptional != rhs_storage._isOptional {return false}
//        if _storage._startTime != rhs_storage._startTime {return false}
//        if _storage._endTime != rhs_storage._endTime {return false}
//        if _storage._rrule != rhs_storage._rrule {return false}
//        if _storage._isAllDay != rhs_storage._isAllDay {return false}
//        if _storage._version != rhs_storage._version {return false}
//        if _storage._startTimezone != rhs_storage._startTimezone {return false}
//        if _storage._endTimezone != rhs_storage._endTimezone {return false}
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._uid != rhs_storage._uid {return false}
//        if _storage._originalTime != rhs_storage._originalTime {return false}
//        if _storage._calendarID != rhs_storage._calendarID {return false}
//        if _storage._meetingRooms != rhs_storage._meetingRooms {return false}
//        if _storage._attendeeChatterIds != rhs_storage._attendeeChatterIds {return false}
//        if _storage._chatIds != rhs_storage._chatIds {return false}
//        if _storage._selfAttendeeStatus != rhs_storage._selfAttendeeStatus {return false}
//        if _storage._attendeeCount != rhs_storage._attendeeCount {return false}
//        if _storage._location != rhs_storage._location {return false}
//        if _storage._description_p != rhs_storage._description_p {return false}
//        if _storage._eventType != rhs_storage._eventType {return false}
//        if _storage._isCrossTenant != rhs_storage._isCrossTenant {return false}
//        if _storage._individualChatterIds != rhs_storage._individualChatterIds {return false}
//        if _storage._calendarResourceInfos != rhs_storage._calendarResourceInfos {return false}
//        if _storage._rsvpUserID != rhs_storage._rsvpUserID {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_CalendarEvent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CalendarEvent"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "unique_key"),
    3: .standard(proto: "calendar_id"),
    4: .standard(proto: "original_time"),
    5: .standard(proto: "creator_calendar_id"),
    6: .standard(proto: "organizer_calendar_id"),
    7: .standard(proto: "self_attendee_status"),
    8: .same(proto: "start"),
    9: .standard(proto: "start_timezone"),
    10: .same(proto: "end"),
    11: .standard(proto: "end_timezone"),
    12: .same(proto: "status"),
    13: .same(proto: "locations"),
    14: .same(proto: "rrule"),
    15: .standard(proto: "guests_can_invite_others"),
    16: .standard(proto: "guests_can_see_other_guests"),
    17: .standard(proto: "guests_can_modify"),
    18: .standard(proto: "create_time"),
    19: .standard(proto: "update_time"),
    20: .standard(proto: "is_deleted"),
    21: .same(proto: "color"),
    22: .same(proto: "source"),
    23: .same(proto: "visibility"),
    24: .same(proto: "importance"),
    25: .standard(proto: "is_all_day"),
    26: .same(proto: "attendees"),
    27: .same(proto: "reminders"),
    28: .standard(proto: "is_free"),
    29: .same(proto: "summary"),
    30: .same(proto: "description"),
    31: .standard(proto: "original_event"),
    32: .standard(proto: "original_is_all_day"),
    33: .standard(proto: "audio_url"),
    34: .same(proto: "url"),
    35: .standard(proto: "has_alarm"),
    36: .standard(proto: "has_attendee"),
    37: .standard(proto: "has_location"),
    38: .same(proto: "version"),
    39: .same(proto: "sequence"),
    40: .same(proto: "type"),
    41: .standard(proto: "meeting_id"),
    42: .standard(proto: "docs_obj_token"),
    43: .standard(proto: "docs_description"),
    44: .standard(proto: "successor_calendar_id"),
    45: .standard(proto: "notification_type"),
    46: .standard(proto: "is_cross_tenant"),
    47: .standard(proto: "dissolve_meeting"),
    48: .standard(proto: "calendar_event_group_attendees"),
    49: .standard(proto: "calendar_resources"),
    50: .standard(proto: "calendar_buildings"),
    51: .standard(proto: "meeting_minute_url"),
    52: .standard(proto: "is_meeting_minute_update"),
    53: .standard(proto: "vchat_unique_id"),
    54: .standard(proto: "google_event_extra"),
    55: .standard(proto: "invite_operator_id"),
    56: .same(proto: "attachments"),
    57: .standard(proto: "attendee_source"),
    58: .same(proto: "schema"),
    59: .same(proto: "category"),
    60: .standard(proto: "same_page_meeting"),
    61: .standard(proto: "schema_v2"),
    62: .standard(proto: "attendee_info"),
    63: .standard(proto: "video_config"),
    64: .standard(proto: "last_date"),
  ]

  fileprivate class _StorageClass {
    var _id: String? = nil
    var _uniqueKey: String? = nil
    var _calendarID: String? = nil
    var _originalTime: Int64? = nil
    var _creatorCalendarID: String? = nil
    var _organizerCalendarID: String? = nil
    var _selfAttendeeStatus: LarkNCExtensionPB_Entities_CalendarEvent.SelfAttendeeStatus? = nil
    var _start: Int64? = nil
    var _startTimezone: String? = nil
    var _end: Int64? = nil
    var _endTimezone: String? = nil
    var _status: LarkNCExtensionPB_Entities_CalendarEvent.Status? = nil
    var _locations: [LarkNCExtensionPB_Entities_CalendarEventLocation] = []
    var _rrule: String? = nil
    var _guestsCanInviteOthers: Bool? = nil
    var _guestsCanSeeOtherGuests: Bool? = nil
    var _guestsCanModify: Bool? = nil
    var _createTime: Int64? = nil
    var _updateTime: Int64? = nil
    var _isDeleted: Bool? = nil
    var _color: Int32? = nil
    var _source: LarkNCExtensionPB_Entities_CalendarEvent.Source? = nil
    var _visibility: LarkNCExtensionPB_Entities_CalendarEvent.Visibility? = nil
    var _importance: Int32? = nil
    var _isAllDay: Bool? = nil
    var _attendees: [LarkNCExtensionPB_Entities_CalendarEventAttendee] = []
    var _reminders: [LarkNCExtensionPB_Entities_Reminder] = []
    var _isFree: Bool? = nil
    var _summary: String? = nil
    var _description_p: String? = nil
    var _originalEvent: String? = nil
    var _originalIsAllDay: Bool? = nil
    var _audioURL: String? = nil
    var _url: String? = nil
    var _hasAlarm_p: Bool? = nil
    var _hasAttendee_p: Bool? = nil
    var _hasLocation_p: Bool? = nil
    var _version: Int64? = nil
    var _sequence: Int32? = nil
    var _type: LarkNCExtensionPB_Entities_CalendarEvent.TypeEnum? = nil
    var _meetingID: String? = nil
    var _docsObjToken: String? = nil
    var _docsDescription: String? = nil
    var _successorCalendarID: String? = nil
    var _notificationType: LarkNCExtensionPB_Entities_CalendarEvent.NotificationType? = nil
    var _isCrossTenant: Bool? = nil
    var _dissolveMeeting: Bool? = nil
    var _calendarEventGroupAttendees: [LarkNCExtensionPB_Entities_CalendarEventGroupAttendee] = []
    var _calendarResources: [LarkNCExtensionPB_Entities_CalendarResource] = []
    var _calendarBuildings: [LarkNCExtensionPB_Entities_CalendarBuilding] = []
    var _meetingMinuteURL: String? = nil
    var _isMeetingMinuteUpdate: Bool? = nil
    var _vchatUniqueID: String? = nil
    var _googleEventExtra: LarkNCExtensionPB_Entities_GoogleEventExtra? = nil
    var _inviteOperatorID: String? = nil
    var _attachments: [LarkNCExtensionPB_Entities_CalendarEventAttachment] = []
    var _attendeeSource: Int32? = nil
    var _schema: Data? = nil
    var _category: LarkNCExtensionPB_Entities_CalendarEvent.Category? = nil
    var _samePageMeeting: LarkNCExtensionPB_Entities_SamePageMeetingInfo? = nil
    var _schemaV2: Data? = nil
    var _attendeeInfo: LarkNCExtensionPB_Entities_EventAttendeeInfo? = nil
    var _videoConfig: LarkNCExtensionPB_Entities_EventVChatConfig? = nil
    var _lastDate: Int64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _uniqueKey = source._uniqueKey
      _calendarID = source._calendarID
      _originalTime = source._originalTime
      _creatorCalendarID = source._creatorCalendarID
      _organizerCalendarID = source._organizerCalendarID
      _selfAttendeeStatus = source._selfAttendeeStatus
      _start = source._start
      _startTimezone = source._startTimezone
      _end = source._end
      _endTimezone = source._endTimezone
      _status = source._status
      _locations = source._locations
      _rrule = source._rrule
      _guestsCanInviteOthers = source._guestsCanInviteOthers
      _guestsCanSeeOtherGuests = source._guestsCanSeeOtherGuests
      _guestsCanModify = source._guestsCanModify
      _createTime = source._createTime
      _updateTime = source._updateTime
      _isDeleted = source._isDeleted
      _color = source._color
      _source = source._source
      _visibility = source._visibility
      _importance = source._importance
      _isAllDay = source._isAllDay
      _attendees = source._attendees
      _reminders = source._reminders
      _isFree = source._isFree
      _summary = source._summary
      _description_p = source._description_p
      _originalEvent = source._originalEvent
      _originalIsAllDay = source._originalIsAllDay
      _audioURL = source._audioURL
      _url = source._url
      _hasAlarm_p = source._hasAlarm_p
      _hasAttendee_p = source._hasAttendee_p
      _hasLocation_p = source._hasLocation_p
      _version = source._version
      _sequence = source._sequence
      _type = source._type
      _meetingID = source._meetingID
      _docsObjToken = source._docsObjToken
      _docsDescription = source._docsDescription
      _successorCalendarID = source._successorCalendarID
      _notificationType = source._notificationType
      _isCrossTenant = source._isCrossTenant
      _dissolveMeeting = source._dissolveMeeting
      _calendarEventGroupAttendees = source._calendarEventGroupAttendees
      _calendarResources = source._calendarResources
      _calendarBuildings = source._calendarBuildings
      _meetingMinuteURL = source._meetingMinuteURL
      _isMeetingMinuteUpdate = source._isMeetingMinuteUpdate
      _vchatUniqueID = source._vchatUniqueID
      _googleEventExtra = source._googleEventExtra
      _inviteOperatorID = source._inviteOperatorID
      _attachments = source._attachments
      _attendeeSource = source._attendeeSource
      _schema = source._schema
      _category = source._category
      _samePageMeeting = source._samePageMeeting
      _schemaV2 = source._schemaV2
      _attendeeInfo = source._attendeeInfo
      _videoConfig = source._videoConfig
      _lastDate = source._lastDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._uniqueKey == nil {return false}
      if _storage._calendarID == nil {return false}
      if _storage._originalTime == nil {return false}
      if _storage._start == nil {return false}
      if _storage._startTimezone == nil {return false}
      if _storage._end == nil {return false}
      if !LarkHTTP.Internal.areAllInitialized(_storage._attendees) {return false}
      if !LarkHTTP.Internal.areAllInitialized(_storage._reminders) {return false}
      if !LarkHTTP.Internal.areAllInitialized(_storage._calendarResources) {return false}
      if !LarkHTTP.Internal.areAllInitialized(_storage._calendarBuildings) {return false}
      if let v = _storage._attendeeInfo, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._uniqueKey)
        case 3: try decoder.decodeSingularStringField(value: &_storage._calendarID)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._originalTime)
        case 5: try decoder.decodeSingularStringField(value: &_storage._creatorCalendarID)
        case 6: try decoder.decodeSingularStringField(value: &_storage._organizerCalendarID)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._selfAttendeeStatus)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._start)
        case 9: try decoder.decodeSingularStringField(value: &_storage._startTimezone)
        case 10: try decoder.decodeSingularInt64Field(value: &_storage._end)
        case 11: try decoder.decodeSingularStringField(value: &_storage._endTimezone)
        case 12: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 13: try decoder.decodeRepeatedMessageField(value: &_storage._locations)
        case 14: try decoder.decodeSingularStringField(value: &_storage._rrule)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._guestsCanInviteOthers)
        case 16: try decoder.decodeSingularBoolField(value: &_storage._guestsCanSeeOtherGuests)
        case 17: try decoder.decodeSingularBoolField(value: &_storage._guestsCanModify)
        case 18: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
        case 19: try decoder.decodeSingularInt64Field(value: &_storage._updateTime)
        case 20: try decoder.decodeSingularBoolField(value: &_storage._isDeleted)
        case 21: try decoder.decodeSingularInt32Field(value: &_storage._color)
        case 22: try decoder.decodeSingularEnumField(value: &_storage._source)
        case 23: try decoder.decodeSingularEnumField(value: &_storage._visibility)
        case 24: try decoder.decodeSingularInt32Field(value: &_storage._importance)
        case 25: try decoder.decodeSingularBoolField(value: &_storage._isAllDay)
        case 26: try decoder.decodeRepeatedMessageField(value: &_storage._attendees)
        case 27: try decoder.decodeRepeatedMessageField(value: &_storage._reminders)
        case 28: try decoder.decodeSingularBoolField(value: &_storage._isFree)
        case 29: try decoder.decodeSingularStringField(value: &_storage._summary)
        case 30: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 31: try decoder.decodeSingularStringField(value: &_storage._originalEvent)
        case 32: try decoder.decodeSingularBoolField(value: &_storage._originalIsAllDay)
        case 33: try decoder.decodeSingularStringField(value: &_storage._audioURL)
        case 34: try decoder.decodeSingularStringField(value: &_storage._url)
        case 35: try decoder.decodeSingularBoolField(value: &_storage._hasAlarm_p)
        case 36: try decoder.decodeSingularBoolField(value: &_storage._hasAttendee_p)
        case 37: try decoder.decodeSingularBoolField(value: &_storage._hasLocation_p)
        case 38: try decoder.decodeSingularInt64Field(value: &_storage._version)
        case 39: try decoder.decodeSingularInt32Field(value: &_storage._sequence)
        case 40: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 41: try decoder.decodeSingularStringField(value: &_storage._meetingID)
        case 42: try decoder.decodeSingularStringField(value: &_storage._docsObjToken)
        case 43: try decoder.decodeSingularStringField(value: &_storage._docsDescription)
        case 44: try decoder.decodeSingularStringField(value: &_storage._successorCalendarID)
        case 45: try decoder.decodeSingularEnumField(value: &_storage._notificationType)
        case 46: try decoder.decodeSingularBoolField(value: &_storage._isCrossTenant)
        case 47: try decoder.decodeSingularBoolField(value: &_storage._dissolveMeeting)
        case 48: try decoder.decodeRepeatedMessageField(value: &_storage._calendarEventGroupAttendees)
        case 49: try decoder.decodeRepeatedMessageField(value: &_storage._calendarResources)
        case 50: try decoder.decodeRepeatedMessageField(value: &_storage._calendarBuildings)
        case 51: try decoder.decodeSingularStringField(value: &_storage._meetingMinuteURL)
        case 52: try decoder.decodeSingularBoolField(value: &_storage._isMeetingMinuteUpdate)
        case 53: try decoder.decodeSingularStringField(value: &_storage._vchatUniqueID)
        case 54: try decoder.decodeSingularMessageField(value: &_storage._googleEventExtra)
        case 55: try decoder.decodeSingularStringField(value: &_storage._inviteOperatorID)
        case 56: try decoder.decodeRepeatedMessageField(value: &_storage._attachments)
        case 57: try decoder.decodeSingularInt32Field(value: &_storage._attendeeSource)
        case 58: try decoder.decodeSingularBytesField(value: &_storage._schema)
        case 59: try decoder.decodeSingularEnumField(value: &_storage._category)
        case 60: try decoder.decodeSingularMessageField(value: &_storage._samePageMeeting)
        case 61: try decoder.decodeSingularBytesField(value: &_storage._schemaV2)
        case 62: try decoder.decodeSingularMessageField(value: &_storage._attendeeInfo)
        case 63: try decoder.decodeSingularMessageField(value: &_storage._videoConfig)
        case 64: try decoder.decodeSingularInt64Field(value: &_storage._lastDate)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._uniqueKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._calendarID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._originalTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._creatorCalendarID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._organizerCalendarID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._selfAttendeeStatus {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
      }
      if let v = _storage._start {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._startTimezone {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
      if let v = _storage._end {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._endTimezone {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      }
      if let v = _storage._status {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 12)
      }
      if !_storage._locations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._locations, fieldNumber: 13)
      }
      if let v = _storage._rrule {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      }
      if let v = _storage._guestsCanInviteOthers {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      }
      if let v = _storage._guestsCanSeeOtherGuests {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      }
      if let v = _storage._guestsCanModify {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 18)
      }
      if let v = _storage._updateTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 19)
      }
      if let v = _storage._isDeleted {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      }
      if let v = _storage._color {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      }
      if let v = _storage._source {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 22)
      }
      if let v = _storage._visibility {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 23)
      }
      if let v = _storage._importance {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 24)
      }
      if let v = _storage._isAllDay {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 25)
      }
      if !_storage._attendees.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attendees, fieldNumber: 26)
      }
      if !_storage._reminders.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._reminders, fieldNumber: 27)
      }
      if let v = _storage._isFree {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 28)
      }
      if let v = _storage._summary {
        try visitor.visitSingularStringField(value: v, fieldNumber: 29)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 30)
      }
      if let v = _storage._originalEvent {
        try visitor.visitSingularStringField(value: v, fieldNumber: 31)
      }
      if let v = _storage._originalIsAllDay {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 32)
      }
      if let v = _storage._audioURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 33)
      }
      if let v = _storage._url {
        try visitor.visitSingularStringField(value: v, fieldNumber: 34)
      }
      if let v = _storage._hasAlarm_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 35)
      }
      if let v = _storage._hasAttendee_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 36)
      }
      if let v = _storage._hasLocation_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 37)
      }
      if let v = _storage._version {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 38)
      }
      if let v = _storage._sequence {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 39)
      }
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 40)
      }
      if let v = _storage._meetingID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 41)
      }
      if let v = _storage._docsObjToken {
        try visitor.visitSingularStringField(value: v, fieldNumber: 42)
      }
      if let v = _storage._docsDescription {
        try visitor.visitSingularStringField(value: v, fieldNumber: 43)
      }
      if let v = _storage._successorCalendarID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 44)
      }
      if let v = _storage._notificationType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 45)
      }
      if let v = _storage._isCrossTenant {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 46)
      }
      if let v = _storage._dissolveMeeting {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 47)
      }
      if !_storage._calendarEventGroupAttendees.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._calendarEventGroupAttendees, fieldNumber: 48)
      }
      if !_storage._calendarResources.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._calendarResources, fieldNumber: 49)
      }
      if !_storage._calendarBuildings.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._calendarBuildings, fieldNumber: 50)
      }
      if let v = _storage._meetingMinuteURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 51)
      }
      if let v = _storage._isMeetingMinuteUpdate {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 52)
      }
      if let v = _storage._vchatUniqueID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 53)
      }
      if let v = _storage._googleEventExtra {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 54)
      }
      if let v = _storage._inviteOperatorID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 55)
      }
      if !_storage._attachments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attachments, fieldNumber: 56)
      }
      if let v = _storage._attendeeSource {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 57)
      }
      if let v = _storage._schema {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 58)
      }
      if let v = _storage._category {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 59)
      }
      if let v = _storage._samePageMeeting {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 60)
      }
      if let v = _storage._schemaV2 {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 61)
      }
      if let v = _storage._attendeeInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 62)
      }
      if let v = _storage._videoConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 63)
      }
      if let v = _storage._lastDate {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 64)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEvent, rhs: LarkNCExtensionPB_Entities_CalendarEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._uniqueKey != rhs_storage._uniqueKey {return false}
        if _storage._calendarID != rhs_storage._calendarID {return false}
        if _storage._originalTime != rhs_storage._originalTime {return false}
        if _storage._creatorCalendarID != rhs_storage._creatorCalendarID {return false}
        if _storage._organizerCalendarID != rhs_storage._organizerCalendarID {return false}
        if _storage._selfAttendeeStatus != rhs_storage._selfAttendeeStatus {return false}
        if _storage._start != rhs_storage._start {return false}
        if _storage._startTimezone != rhs_storage._startTimezone {return false}
        if _storage._end != rhs_storage._end {return false}
        if _storage._endTimezone != rhs_storage._endTimezone {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._locations != rhs_storage._locations {return false}
        if _storage._rrule != rhs_storage._rrule {return false}
        if _storage._guestsCanInviteOthers != rhs_storage._guestsCanInviteOthers {return false}
        if _storage._guestsCanSeeOtherGuests != rhs_storage._guestsCanSeeOtherGuests {return false}
        if _storage._guestsCanModify != rhs_storage._guestsCanModify {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._isDeleted != rhs_storage._isDeleted {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._visibility != rhs_storage._visibility {return false}
        if _storage._importance != rhs_storage._importance {return false}
        if _storage._isAllDay != rhs_storage._isAllDay {return false}
        if _storage._attendees != rhs_storage._attendees {return false}
        if _storage._reminders != rhs_storage._reminders {return false}
        if _storage._isFree != rhs_storage._isFree {return false}
        if _storage._summary != rhs_storage._summary {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._originalEvent != rhs_storage._originalEvent {return false}
        if _storage._originalIsAllDay != rhs_storage._originalIsAllDay {return false}
        if _storage._audioURL != rhs_storage._audioURL {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._hasAlarm_p != rhs_storage._hasAlarm_p {return false}
        if _storage._hasAttendee_p != rhs_storage._hasAttendee_p {return false}
        if _storage._hasLocation_p != rhs_storage._hasLocation_p {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._sequence != rhs_storage._sequence {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._meetingID != rhs_storage._meetingID {return false}
        if _storage._docsObjToken != rhs_storage._docsObjToken {return false}
        if _storage._docsDescription != rhs_storage._docsDescription {return false}
        if _storage._successorCalendarID != rhs_storage._successorCalendarID {return false}
        if _storage._notificationType != rhs_storage._notificationType {return false}
        if _storage._isCrossTenant != rhs_storage._isCrossTenant {return false}
        if _storage._dissolveMeeting != rhs_storage._dissolveMeeting {return false}
        if _storage._calendarEventGroupAttendees != rhs_storage._calendarEventGroupAttendees {return false}
        if _storage._calendarResources != rhs_storage._calendarResources {return false}
        if _storage._calendarBuildings != rhs_storage._calendarBuildings {return false}
        if _storage._meetingMinuteURL != rhs_storage._meetingMinuteURL {return false}
        if _storage._isMeetingMinuteUpdate != rhs_storage._isMeetingMinuteUpdate {return false}
        if _storage._vchatUniqueID != rhs_storage._vchatUniqueID {return false}
        if _storage._googleEventExtra != rhs_storage._googleEventExtra {return false}
        if _storage._inviteOperatorID != rhs_storage._inviteOperatorID {return false}
        if _storage._attachments != rhs_storage._attachments {return false}
        if _storage._attendeeSource != rhs_storage._attendeeSource {return false}
        if _storage._schema != rhs_storage._schema {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._samePageMeeting != rhs_storage._samePageMeeting {return false}
        if _storage._schemaV2 != rhs_storage._schemaV2 {return false}
        if _storage._attendeeInfo != rhs_storage._attendeeInfo {return false}
        if _storage._videoConfig != rhs_storage._videoConfig {return false}
        if _storage._lastDate != rhs_storage._lastDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CalendarEvent.Source: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "WEB"),
    2: .same(proto: "IOS"),
    3: .same(proto: "IOS_APP"),
    4: .same(proto: "ANDROID"),
    5: .same(proto: "ANDROID_APP"),
    6: .same(proto: "PC_CLIENT"),
    7: .same(proto: "GOOGLE"),
    8: .same(proto: "PEOPLE"),
    9: .same(proto: "PLACE_HOLDER"),
    10: .same(proto: "OPEN_API"),
    11: .same(proto: "CALDAV"),
    12: .same(proto: "TIMEOFF"),
    13: .same(proto: "EMAIL"),
    14: .same(proto: "EXCHANGE"),
  ]
}

extension LarkNCExtensionPB_Entities_CalendarEvent.Visibility: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "DEFAULT"),
    2: .same(proto: "PUBLIC"),
    3: .same(proto: "PRIVATE"),
  ]
}

extension LarkNCExtensionPB_Entities_CalendarEvent.Status: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "TENTATIVE"),
    2: .same(proto: "CONFIRMED"),
    3: .same(proto: "CANCELLED"),
  ]
}

extension LarkNCExtensionPB_Entities_CalendarEvent.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "DEFAULT_TYPE"),
    2: .same(proto: "MEETING"),
  ]
}

extension LarkNCExtensionPB_Entities_CalendarEvent.NotificationType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "DEFAULT_NOTIFICATION_TYPE"),
    2: .same(proto: "NO_NOTIFICATION"),
    3: .same(proto: "SEND_NOTIFICATION"),
  ]
}

extension LarkNCExtensionPB_Entities_CalendarEvent.SelfAttendeeStatus: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "ATTENDEE_STATUS_NEEDS_ACTION"),
    2: .same(proto: "ATTENDEE_STATUS_ACCEPT"),
    3: .same(proto: "ATTENDEE_STATUS_TENTATIVE"),
    4: .same(proto: "ATTENDEE_STATUS_DECLINE"),
    5: .same(proto: "ATTENDEE_STATUS_REMOVED"),
  ]
}

extension LarkNCExtensionPB_Entities_CalendarEvent.AttendeeSource: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "LARK"),
    2: .same(proto: "MAIL"),
    3: .same(proto: "EXCHANGE_SYNC"),
  ]
}

extension LarkNCExtensionPB_Entities_CalendarEvent.Category: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "DEFAULT_CATEGORY"),
    2: .same(proto: "SAME_PAGE_MEETING"),
    3: .same(proto: "RESOURCE_STRATEGY"),
    4: .same(proto: "RESOURCE_REQUISITION"),
  ]
}

//extension LarkNCExtensionPB_Entities_CalendarEventExtraInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarEventExtraInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "chatter_id"),
//    2: .same(proto: "meeting"),
//    3: .standard(proto: "v_chat"),
//    4: .standard(proto: "brief_info"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _chatterID: String? = nil
//    var _meeting: LarkNCExtensionPB_Entities_Meeting? = nil
//    var _vChat: LarkNCExtensionPB_Entities_Vchat? = nil
//    var _briefInfo: LarkNCExtensionPB_Entities_CalendarBriefInfo? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _chatterID = source._chatterID
//      _meeting = source._meeting
//      _vChat = source._vChat
//      _briefInfo = source._briefInfo
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._meeting, !v.isInitialized {return false}
//      if let v = _storage._vChat, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._chatterID)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._meeting)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._vChat)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._briefInfo)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._chatterID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._meeting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._vChat {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._briefInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventExtraInfo, rhs: LarkNCExtensionPB_Entities_CalendarEventExtraInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._chatterID != rhs_storage._chatterID {return false}
//        if _storage._meeting != rhs_storage._meeting {return false}
//        if _storage._vChat != rhs_storage._vChat {return false}
//        if _storage._briefInfo != rhs_storage._briefInfo {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarEventInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarEventInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "calendar_event_core"),
//    2: .standard(proto: "extra_info"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _calendarEventCore: LarkNCExtensionPB_Entities_CalendarEventCore? = nil
//    var _extraInfo: LarkNCExtensionPB_Entities_CalendarEventExtraInfo? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _calendarEventCore = source._calendarEventCore
//      _extraInfo = source._extraInfo
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._calendarEventCore, !v.isInitialized {return false}
//      if let v = _storage._extraInfo, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._calendarEventCore)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._extraInfo)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._calendarEventCore {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._extraInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventInfo, rhs: LarkNCExtensionPB_Entities_CalendarEventInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._calendarEventCore != rhs_storage._calendarEventCore {return false}
//        if _storage._extraInfo != rhs_storage._extraInfo {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_GoogleEventExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GoogleEventExtra"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "data_source"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._dataSource)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._dataSource {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_GoogleEventExtra, rhs: LarkNCExtensionPB_Entities_GoogleEventExtra) -> Bool {
    if lhs._dataSource != rhs._dataSource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_GoogleEventExtra.DataSource: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "GOOGLE"),
    2: .same(proto: "CACHE"),
  ]
}

//extension LarkNCExtensionPB_Entities_EventExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".EventExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .standard(proto: "calendar_schema_collection"),
//    3: .same(proto: "ExceptionCreating"),
//    4: .standard(proto: "vchat_config"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _type: LarkNCExtensionPB_Entities_CalendarEvent.TypeEnum? = nil
//    var _calendarSchemaCollection: LarkNCExtensionPB_Entities_CalendarSchemaCollection? = nil
//    var _exceptionCreating: Bool? = nil
//    var _vchatConfig: LarkNCExtensionPB_Entities_EventVChatConfig? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _type = source._type
//      _calendarSchemaCollection = source._calendarSchemaCollection
//      _exceptionCreating = source._exceptionCreating
//      _vchatConfig = source._vchatConfig
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._calendarSchemaCollection)
//        case 3: try decoder.decodeSingularBoolField(value: &_storage._exceptionCreating)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._vchatConfig)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._calendarSchemaCollection {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._exceptionCreating {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._vchatConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_EventExtra, rhs: LarkNCExtensionPB_Entities_EventExtra) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._calendarSchemaCollection != rhs_storage._calendarSchemaCollection {return false}
//        if _storage._exceptionCreating != rhs_storage._exceptionCreating {return false}
//        if _storage._vchatConfig != rhs_storage._vchatConfig {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_EventVChatConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventVChatConfig"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "vchat_type"),
    2: .standard(proto: "meeting_url"),
    101: .standard(proto: "other_configs"),
    102: .standard(proto: "google_configs"),
    3: .standard(proto: "lark_vc_binding_data"),
  ]

  fileprivate class _StorageClass {
    var _vchatType: LarkNCExtensionPB_Entities_Vchat.VChatType? = nil
    var _meetingURL: String? = nil
    var _customizedConfigs: LarkNCExtensionPB_Entities_EventVChatConfig.OneOf_CustomizedConfigs?
    var _larkVcBindingData: LarkNCExtensionPB_Entities_EventVChatConfig.LarkVCBindingData? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _vchatType = source._vchatType
      _meetingURL = source._meetingURL
      _customizedConfigs = source._customizedConfigs
      _larkVcBindingData = source._larkVcBindingData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._vchatType)
        case 2: try decoder.decodeSingularStringField(value: &_storage._meetingURL)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._larkVcBindingData)
        case 101:
          var v: LarkNCExtensionPB_Entities_EventVChatConfig.OtherVideoMeetingConfigs?
          if let current = _storage._customizedConfigs {
            try decoder.handleConflictingOneOf()
            if case .otherConfigs(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._customizedConfigs = .otherConfigs(v)}
        case 102:
          var v: LarkNCExtensionPB_Entities_EventVChatConfig.GoogleVideoConferenceConfig?
          if let current = _storage._customizedConfigs {
            try decoder.handleConflictingOneOf()
            if case .googleConfigs(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._customizedConfigs = .googleConfigs(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._vchatType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._meetingURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._larkVcBindingData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      switch _storage._customizedConfigs {
      case .otherConfigs(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      case .googleConfigs(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_EventVChatConfig, rhs: LarkNCExtensionPB_Entities_EventVChatConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._vchatType != rhs_storage._vchatType {return false}
        if _storage._meetingURL != rhs_storage._meetingURL {return false}
        if _storage._customizedConfigs != rhs_storage._customizedConfigs {return false}
        if _storage._larkVcBindingData != rhs_storage._larkVcBindingData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_EventVChatConfig.OtherVideoMeetingConfigs: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_EventVChatConfig.protoMessageName + ".OtherVideoMeetingConfigs"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "icon"),
    2: .standard(proto: "customized_description"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._icon)
      case 2: try decoder.decodeSingularStringField(value: &self._customizedDescription)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._icon {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._customizedDescription {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_EventVChatConfig.OtherVideoMeetingConfigs, rhs: LarkNCExtensionPB_Entities_EventVChatConfig.OtherVideoMeetingConfigs) -> Bool {
    if lhs._icon != rhs._icon {return false}
    if lhs._customizedDescription != rhs._customizedDescription {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_EventVChatConfig.OtherVideoMeetingConfigs.IconType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "DEFAULT"),
    1: .same(proto: "VIDEO_MEETING"),
    2: .same(proto: "LIVE"),
  ]
}

extension LarkNCExtensionPB_Entities_EventVChatConfig.GoogleVideoConferenceConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_EventVChatConfig.protoMessageName + ".GoogleVideoConferenceConfig"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "phone_number"),
    2: .standard(proto: "more_phone_number_url"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._phoneNumber)
      case 2: try decoder.decodeSingularStringField(value: &self._morePhoneNumberURL)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._phoneNumber {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._morePhoneNumberURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_EventVChatConfig.GoogleVideoConferenceConfig, rhs: LarkNCExtensionPB_Entities_EventVChatConfig.GoogleVideoConferenceConfig) -> Bool {
    if lhs._phoneNumber != rhs._phoneNumber {return false}
    if lhs._morePhoneNumberURL != rhs._morePhoneNumberURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_EventVChatConfig.LarkVCBindingData: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Entities_EventVChatConfig.protoMessageName + ".LarkVCBindingData"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "vc_setting_id"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._vcSettingID)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._vcSettingID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_EventVChatConfig.LarkVCBindingData, rhs: LarkNCExtensionPB_Entities_EventVChatConfig.LarkVCBindingData) -> Bool {
    if lhs._vcSettingID != rhs._vcSettingID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_CalendarEventRefExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarEventRefExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "attendee_calendar_ids"),
//    2: .standard(proto: "is_attendee_list_setted"),
//    3: .standard(proto: "dav_extra"),
//    4: .standard(proto: "max_version"),
//    5: .standard(proto: "event_change_version"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedInt64Field(value: &self.attendeeCalendarIds)
//      case 2: try decoder.decodeSingularBoolField(value: &self._isAttendeeListSetted)
//      case 3: try decoder.decodeSingularStringField(value: &self._davExtra)
//      case 4: try decoder.decodeSingularInt64Field(value: &self._maxVersion)
//      case 5: try decoder.decodeSingularInt64Field(value: &self._eventChangeVersion)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.attendeeCalendarIds.isEmpty {
//      try visitor.visitRepeatedInt64Field(value: self.attendeeCalendarIds, fieldNumber: 1)
//    }
//    if let v = self._isAttendeeListSetted {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    if let v = self._davExtra {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._maxVersion {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//    }
//    if let v = self._eventChangeVersion {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventRefExtra, rhs: LarkNCExtensionPB_Entities_CalendarEventRefExtra) -> Bool {
//    if lhs.attendeeCalendarIds != rhs.attendeeCalendarIds {return false}
//    if lhs._isAttendeeListSetted != rhs._isAttendeeListSetted {return false}
//    if lhs._davExtra != rhs._davExtra {return false}
//    if lhs._maxVersion != rhs._maxVersion {return false}
//    if lhs._eventChangeVersion != rhs._eventChangeVersion {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarEventCore: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarEventCore"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .standard(proto: "unique_key"),
//    3: .standard(proto: "original_time"),
//    4: .standard(proto: "calendar_id"),
//    5: .standard(proto: "creator_calendar_id"),
//    6: .standard(proto: "organizer_calendar_id"),
//    7: .same(proto: "version"),
//    8: .same(proto: "rrule"),
//    9: .same(proto: "start"),
//    10: .same(proto: "end"),
//    11: .same(proto: "status"),
//    12: .standard(proto: "is_all_day"),
//    13: .standard(proto: "is_deleted"),
//    14: .standard(proto: "is_free"),
//    15: .same(proto: "ack"),
//    16: .standard(proto: "need_update"),
//    17: .standard(proto: "self_attendee_status"),
//    18: .same(proto: "summary"),
//    19: .same(proto: "color"),
//    20: .same(proto: "reminders"),
//    21: .same(proto: "visibility"),
//    22: .same(proto: "locations"),
//    23: .same(proto: "attendees"),
//    24: .standard(proto: "start_timezone"),
//    25: .standard(proto: "end_timezone"),
//    26: .same(proto: "source"),
//    27: .same(proto: "type"),
//    28: .standard(proto: "guests_can_invite_others"),
//    29: .standard(proto: "guests_can_see_other_guests"),
//    30: .standard(proto: "guests_can_modify"),
//    41: .standard(proto: "meeting_id"),
//    42: .standard(proto: "docs_obj_token"),
//    43: .standard(proto: "successor_calendar_id"),
//    44: .standard(proto: "is_cross_tenant"),
//    45: .standard(proto: "calendar_event_group_attendees"),
//    46: .standard(proto: "original_event"),
//    47: .standard(proto: "meeting_minute_url"),
//    48: .standard(proto: "vchat_unique_id"),
//    49: .standard(proto: "google_event_extra"),
//    50: .standard(proto: "force_update"),
//    51: .standard(proto: "attendee_source"),
//    52: .same(proto: "category"),
//    53: .standard(proto: "attendee_info"),
//    54: .standard(proto: "video_config"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _uniqueKey: String? = nil
//    var _originalTime: Int64? = nil
//    var _calendarID: String? = nil
//    var _creatorCalendarID: String? = nil
//    var _organizerCalendarID: String? = nil
//    var _version: Int64? = nil
//    var _rrule: String? = nil
//    var _start: Int64? = nil
//    var _end: Int64? = nil
//    var _status: LarkNCExtensionPB_Entities_CalendarEventCore.Status? = nil
//    var _isAllDay: Bool? = nil
//    var _isDeleted: Bool? = nil
//    var _isFree: Bool? = nil
//    var _ack: Bool? = nil
//    var _needUpdate: Bool? = nil
//    var _selfAttendeeStatus: LarkNCExtensionPB_Entities_CalendarEventCore.SelfAttendeeStatus? = nil
//    var _summary: String? = nil
//    var _color: Int32? = nil
//    var _reminders: [LarkNCExtensionPB_Entities_Reminder] = []
//    var _visibility: LarkNCExtensionPB_Entities_CalendarEvent.Visibility? = nil
//    var _locations: [LarkNCExtensionPB_Entities_CalendarEventLocation] = []
//    var _attendees: [LarkNCExtensionPB_Entities_CalendarEventAttendee] = []
//    var _startTimezone: String? = nil
//    var _endTimezone: String? = nil
//    var _source: LarkNCExtensionPB_Entities_CalendarEvent.Source? = nil
//    var _type: LarkNCExtensionPB_Entities_CalendarEvent.TypeEnum? = nil
//    var _guestsCanInviteOthers: Bool? = nil
//    var _guestsCanSeeOtherGuests: Bool? = nil
//    var _guestsCanModify: Bool? = nil
//    var _meetingID: String? = nil
//    var _docsObjToken: String? = nil
//    var _successorCalendarID: String? = nil
//    var _isCrossTenant: Bool? = nil
//    var _calendarEventGroupAttendees: [LarkNCExtensionPB_Entities_CalendarEventGroupAttendee] = []
//    var _originalEvent: String? = nil
//    var _meetingMinuteURL: String? = nil
//    var _vchatUniqueID: String? = nil
//    var _googleEventExtra: LarkNCExtensionPB_Entities_GoogleEventExtra? = nil
//    var _forceUpdate: Bool? = nil
//    var _attendeeSource: Int32? = nil
//    var _category: LarkNCExtensionPB_Entities_CalendarEventCore.Category? = nil
//    var _attendeeInfo: LarkNCExtensionPB_Entities_EventAttendeeInfo? = nil
//    var _videoConfig: LarkNCExtensionPB_Entities_EventVChatConfig? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _uniqueKey = source._uniqueKey
//      _originalTime = source._originalTime
//      _calendarID = source._calendarID
//      _creatorCalendarID = source._creatorCalendarID
//      _organizerCalendarID = source._organizerCalendarID
//      _version = source._version
//      _rrule = source._rrule
//      _start = source._start
//      _end = source._end
//      _status = source._status
//      _isAllDay = source._isAllDay
//      _isDeleted = source._isDeleted
//      _isFree = source._isFree
//      _ack = source._ack
//      _needUpdate = source._needUpdate
//      _selfAttendeeStatus = source._selfAttendeeStatus
//      _summary = source._summary
//      _color = source._color
//      _reminders = source._reminders
//      _visibility = source._visibility
//      _locations = source._locations
//      _attendees = source._attendees
//      _startTimezone = source._startTimezone
//      _endTimezone = source._endTimezone
//      _source = source._source
//      _type = source._type
//      _guestsCanInviteOthers = source._guestsCanInviteOthers
//      _guestsCanSeeOtherGuests = source._guestsCanSeeOtherGuests
//      _guestsCanModify = source._guestsCanModify
//      _meetingID = source._meetingID
//      _docsObjToken = source._docsObjToken
//      _successorCalendarID = source._successorCalendarID
//      _isCrossTenant = source._isCrossTenant
//      _calendarEventGroupAttendees = source._calendarEventGroupAttendees
//      _originalEvent = source._originalEvent
//      _meetingMinuteURL = source._meetingMinuteURL
//      _vchatUniqueID = source._vchatUniqueID
//      _googleEventExtra = source._googleEventExtra
//      _forceUpdate = source._forceUpdate
//      _attendeeSource = source._attendeeSource
//      _category = source._category
//      _attendeeInfo = source._attendeeInfo
//      _videoConfig = source._videoConfig
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._uniqueKey == nil {return false}
//      if _storage._originalTime == nil {return false}
//      if _storage._calendarID == nil {return false}
//      if _storage._creatorCalendarID == nil {return false}
//      if _storage._organizerCalendarID == nil {return false}
//      if _storage._start == nil {return false}
//      if _storage._end == nil {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._reminders) {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._attendees) {return false}
//      if let v = _storage._attendeeInfo, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._uniqueKey)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._originalTime)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._calendarID)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._creatorCalendarID)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._organizerCalendarID)
//        case 7: try decoder.decodeSingularInt64Field(value: &_storage._version)
//        case 8: try decoder.decodeSingularStringField(value: &_storage._rrule)
//        case 9: try decoder.decodeSingularInt64Field(value: &_storage._start)
//        case 10: try decoder.decodeSingularInt64Field(value: &_storage._end)
//        case 11: try decoder.decodeSingularEnumField(value: &_storage._status)
//        case 12: try decoder.decodeSingularBoolField(value: &_storage._isAllDay)
//        case 13: try decoder.decodeSingularBoolField(value: &_storage._isDeleted)
//        case 14: try decoder.decodeSingularBoolField(value: &_storage._isFree)
//        case 15: try decoder.decodeSingularBoolField(value: &_storage._ack)
//        case 16: try decoder.decodeSingularBoolField(value: &_storage._needUpdate)
//        case 17: try decoder.decodeSingularEnumField(value: &_storage._selfAttendeeStatus)
//        case 18: try decoder.decodeSingularStringField(value: &_storage._summary)
//        case 19: try decoder.decodeSingularInt32Field(value: &_storage._color)
//        case 20: try decoder.decodeRepeatedMessageField(value: &_storage._reminders)
//        case 21: try decoder.decodeSingularEnumField(value: &_storage._visibility)
//        case 22: try decoder.decodeRepeatedMessageField(value: &_storage._locations)
//        case 23: try decoder.decodeRepeatedMessageField(value: &_storage._attendees)
//        case 24: try decoder.decodeSingularStringField(value: &_storage._startTimezone)
//        case 25: try decoder.decodeSingularStringField(value: &_storage._endTimezone)
//        case 26: try decoder.decodeSingularEnumField(value: &_storage._source)
//        case 27: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 28: try decoder.decodeSingularBoolField(value: &_storage._guestsCanInviteOthers)
//        case 29: try decoder.decodeSingularBoolField(value: &_storage._guestsCanSeeOtherGuests)
//        case 30: try decoder.decodeSingularBoolField(value: &_storage._guestsCanModify)
//        case 41: try decoder.decodeSingularStringField(value: &_storage._meetingID)
//        case 42: try decoder.decodeSingularStringField(value: &_storage._docsObjToken)
//        case 43: try decoder.decodeSingularStringField(value: &_storage._successorCalendarID)
//        case 44: try decoder.decodeSingularBoolField(value: &_storage._isCrossTenant)
//        case 45: try decoder.decodeRepeatedMessageField(value: &_storage._calendarEventGroupAttendees)
//        case 46: try decoder.decodeSingularStringField(value: &_storage._originalEvent)
//        case 47: try decoder.decodeSingularStringField(value: &_storage._meetingMinuteURL)
//        case 48: try decoder.decodeSingularStringField(value: &_storage._vchatUniqueID)
//        case 49: try decoder.decodeSingularMessageField(value: &_storage._googleEventExtra)
//        case 50: try decoder.decodeSingularBoolField(value: &_storage._forceUpdate)
//        case 51: try decoder.decodeSingularInt32Field(value: &_storage._attendeeSource)
//        case 52: try decoder.decodeSingularEnumField(value: &_storage._category)
//        case 53: try decoder.decodeSingularMessageField(value: &_storage._attendeeInfo)
//        case 54: try decoder.decodeSingularMessageField(value: &_storage._videoConfig)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._uniqueKey {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._originalTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._calendarID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._creatorCalendarID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._organizerCalendarID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._version {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._rrule {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._start {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._end {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._isAllDay {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._isDeleted {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._isFree {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._ack {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
//      }
//      if let v = _storage._needUpdate {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
//      }
//      if let v = _storage._selfAttendeeStatus {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 17)
//      }
//      if let v = _storage._summary {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
//      }
//      if let v = _storage._color {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 19)
//      }
//      if !_storage._reminders.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._reminders, fieldNumber: 20)
//      }
//      if let v = _storage._visibility {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 21)
//      }
//      if !_storage._locations.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._locations, fieldNumber: 22)
//      }
//      if !_storage._attendees.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._attendees, fieldNumber: 23)
//      }
//      if let v = _storage._startTimezone {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
//      }
//      if let v = _storage._endTimezone {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
//      }
//      if let v = _storage._source {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 26)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 27)
//      }
//      if let v = _storage._guestsCanInviteOthers {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 28)
//      }
//      if let v = _storage._guestsCanSeeOtherGuests {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 29)
//      }
//      if let v = _storage._guestsCanModify {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 30)
//      }
//      if let v = _storage._meetingID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 41)
//      }
//      if let v = _storage._docsObjToken {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 42)
//      }
//      if let v = _storage._successorCalendarID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 43)
//      }
//      if let v = _storage._isCrossTenant {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 44)
//      }
//      if !_storage._calendarEventGroupAttendees.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._calendarEventGroupAttendees, fieldNumber: 45)
//      }
//      if let v = _storage._originalEvent {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 46)
//      }
//      if let v = _storage._meetingMinuteURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 47)
//      }
//      if let v = _storage._vchatUniqueID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 48)
//      }
//      if let v = _storage._googleEventExtra {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 49)
//      }
//      if let v = _storage._forceUpdate {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 50)
//      }
//      if let v = _storage._attendeeSource {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 51)
//      }
//      if let v = _storage._category {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 52)
//      }
//      if let v = _storage._attendeeInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 53)
//      }
//      if let v = _storage._videoConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 54)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventCore, rhs: LarkNCExtensionPB_Entities_CalendarEventCore) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._uniqueKey != rhs_storage._uniqueKey {return false}
//        if _storage._originalTime != rhs_storage._originalTime {return false}
//        if _storage._calendarID != rhs_storage._calendarID {return false}
//        if _storage._creatorCalendarID != rhs_storage._creatorCalendarID {return false}
//        if _storage._organizerCalendarID != rhs_storage._organizerCalendarID {return false}
//        if _storage._version != rhs_storage._version {return false}
//        if _storage._rrule != rhs_storage._rrule {return false}
//        if _storage._start != rhs_storage._start {return false}
//        if _storage._end != rhs_storage._end {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._isAllDay != rhs_storage._isAllDay {return false}
//        if _storage._isDeleted != rhs_storage._isDeleted {return false}
//        if _storage._isFree != rhs_storage._isFree {return false}
//        if _storage._ack != rhs_storage._ack {return false}
//        if _storage._needUpdate != rhs_storage._needUpdate {return false}
//        if _storage._selfAttendeeStatus != rhs_storage._selfAttendeeStatus {return false}
//        if _storage._summary != rhs_storage._summary {return false}
//        if _storage._color != rhs_storage._color {return false}
//        if _storage._reminders != rhs_storage._reminders {return false}
//        if _storage._visibility != rhs_storage._visibility {return false}
//        if _storage._locations != rhs_storage._locations {return false}
//        if _storage._attendees != rhs_storage._attendees {return false}
//        if _storage._startTimezone != rhs_storage._startTimezone {return false}
//        if _storage._endTimezone != rhs_storage._endTimezone {return false}
//        if _storage._source != rhs_storage._source {return false}
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._guestsCanInviteOthers != rhs_storage._guestsCanInviteOthers {return false}
//        if _storage._guestsCanSeeOtherGuests != rhs_storage._guestsCanSeeOtherGuests {return false}
//        if _storage._guestsCanModify != rhs_storage._guestsCanModify {return false}
//        if _storage._meetingID != rhs_storage._meetingID {return false}
//        if _storage._docsObjToken != rhs_storage._docsObjToken {return false}
//        if _storage._successorCalendarID != rhs_storage._successorCalendarID {return false}
//        if _storage._isCrossTenant != rhs_storage._isCrossTenant {return false}
//        if _storage._calendarEventGroupAttendees != rhs_storage._calendarEventGroupAttendees {return false}
//        if _storage._originalEvent != rhs_storage._originalEvent {return false}
//        if _storage._meetingMinuteURL != rhs_storage._meetingMinuteURL {return false}
//        if _storage._vchatUniqueID != rhs_storage._vchatUniqueID {return false}
//        if _storage._googleEventExtra != rhs_storage._googleEventExtra {return false}
//        if _storage._forceUpdate != rhs_storage._forceUpdate {return false}
//        if _storage._attendeeSource != rhs_storage._attendeeSource {return false}
//        if _storage._category != rhs_storage._category {return false}
//        if _storage._attendeeInfo != rhs_storage._attendeeInfo {return false}
//        if _storage._videoConfig != rhs_storage._videoConfig {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarEventCore.Status: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "TENTATIVE"),
//    2: .same(proto: "CONFIRMED"),
//    3: .same(proto: "CANCELLED"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_CalendarEventCore.SelfAttendeeStatus: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "ATTENDEE_STATUS_NEEDS_ACTION"),
//    2: .same(proto: "ATTENDEE_STATUS_ACCEPT"),
//    3: .same(proto: "ATTENDEE_STATUS_TENTATIVE"),
//    4: .same(proto: "ATTENDEE_STATUS_DECLINE"),
//    5: .same(proto: "ATTENDEE_STATUS_REMOVED"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_CalendarEventCore.Category: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "DEFAULT_CATEGORY"),
//    2: .same(proto: "SAME_PAGE_MEETING"),
//    3: .same(proto: "RESOURCE_STRATEGY"),
//    4: .same(proto: "RESOURCE_REQUISITION"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_Meeting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Meeting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .standard(proto: "chat_id"),
//    3: .standard(proto: "is_first_entrance"),
//    4: .standard(proto: "calendar_event_ref_ids"),
//    5: .standard(proto: "docs_url"),
//    6: .standard(proto: "should_show_scroll"),
//    7: .standard(proto: "scroll_type"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._id == nil {return false}
//    if self._chatID == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularStringField(value: &self._chatID)
//      case 3: try decoder.decodeSingularBoolField(value: &self._isFirstEntrance)
//      case 4: try decoder.decodeRepeatedStringField(value: &self.calendarEventRefIds)
//      case 5: try decoder.decodeSingularStringField(value: &self._docsURL)
//      case 6: try decoder.decodeSingularBoolField(value: &self._shouldShowScroll)
//      case 7: try decoder.decodeSingularEnumField(value: &self._scrollType)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._chatID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._isFirstEntrance {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//    }
//    if !self.calendarEventRefIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.calendarEventRefIds, fieldNumber: 4)
//    }
//    if let v = self._docsURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    if let v = self._shouldShowScroll {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//    }
//    if let v = self._scrollType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Meeting, rhs: LarkNCExtensionPB_Entities_Meeting) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._chatID != rhs._chatID {return false}
//    if lhs._isFirstEntrance != rhs._isFirstEntrance {return false}
//    if lhs.calendarEventRefIds != rhs.calendarEventRefIds {return false}
//    if lhs._docsURL != rhs._docsURL {return false}
//    if lhs._shouldShowScroll != rhs._shouldShowScroll {return false}
//    if lhs._scrollType != rhs._scrollType {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MeetingExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MeetingExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "docs_obj_type"),
//    2: .standard(proto: "docs_obj_token"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._docsObjType)
//      case 2: try decoder.decodeSingularStringField(value: &self._docsObjToken)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._docsObjType {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._docsObjToken {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MeetingExtra, rhs: LarkNCExtensionPB_Entities_MeetingExtra) -> Bool {
//    if lhs._docsObjType != rhs._docsObjType {return false}
//    if lhs._docsObjToken != rhs._docsObjToken {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MeetingChatterActionsExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MeetingChatterActionsExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "first_entrance_time"),
//    2: .standard(proto: "should_show_scroll"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._firstEntranceTime)
//      case 2: try decoder.decodeSingularBoolField(value: &self._shouldShowScroll)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._firstEntranceTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._shouldShowScroll {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MeetingChatterActionsExtra, rhs: LarkNCExtensionPB_Entities_MeetingChatterActionsExtra) -> Bool {
//    if lhs._firstEntranceTime != rhs._firstEntranceTime {return false}
//    if lhs._shouldShowScroll != rhs._shouldShowScroll {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_Vchat: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Vchat"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "unique_id"),
    2: .standard(proto: "meeting_no"),
    3: .standard(proto: "is_expired"),
    4: .standard(proto: "meeting_url"),
    5: .same(proto: "type"),
    6: .standard(proto: "vchat_type"),
  ]

  public var isInitialized: Bool {
    if self._uniqueID == nil {return false}
    if self._meetingNo == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._uniqueID)
      case 2: try decoder.decodeSingularStringField(value: &self._meetingNo)
      case 3: try decoder.decodeSingularBoolField(value: &self._isExpired)
      case 4: try decoder.decodeSingularStringField(value: &self._meetingURL)
      case 5: try decoder.decodeSingularEnumField(value: &self._type)
      case 6: try decoder.decodeSingularEnumField(value: &self._vchatType)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._uniqueID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._meetingNo {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._isExpired {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._meetingURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }
    if let v = self._vchatType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_Vchat, rhs: LarkNCExtensionPB_Entities_Vchat) -> Bool {
    if lhs._uniqueID != rhs._uniqueID {return false}
    if lhs._meetingNo != rhs._meetingNo {return false}
    if lhs._isExpired != rhs._isExpired {return false}
    if lhs._meetingURL != rhs._meetingURL {return false}
    if lhs._type != rhs._type {return false}
    if lhs._vchatType != rhs._vchatType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_Vchat.Status: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "LIVE"),
  ]
}

extension LarkNCExtensionPB_Entities_Vchat.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "VIDEO_CONFERENCE"),
    2: .same(proto: "THIRD_PARTY"),
  ]
}

extension LarkNCExtensionPB_Entities_Vchat.VChatType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UN_KNOWN"),
    1: .same(proto: "LARK_VIDEO_CONFERENCE"),
    2: .same(proto: "THIRD_PARTY_URL"),
    3: .same(proto: "LARK_LIVE_HOST"),
    4: .same(proto: "NO_VIDEO_MEETING"),
    5: .same(proto: "GOOGLE_VIDEO_CONFERENCE"),
  ]
}

//extension LarkNCExtensionPB_Entities_CalendarEventVChatChange: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarEventVChatChange"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "calendar_id"),
//    2: .same(proto: "uid"),
//    3: .standard(proto: "original_time"),
//    4: .same(proto: "vchat"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _calendarID: String? = nil
//    var _uid: String? = nil
//    var _originalTime: String? = nil
//    var _vchat: LarkNCExtensionPB_Entities_Vchat? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _calendarID = source._calendarID
//      _uid = source._uid
//      _originalTime = source._originalTime
//      _vchat = source._vchat
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._vchat, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._calendarID)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._uid)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._originalTime)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._vchat)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._calendarID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._uid {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._originalTime {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._vchat {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventVChatChange, rhs: LarkNCExtensionPB_Entities_CalendarEventVChatChange) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._calendarID != rhs_storage._calendarID {return false}
//        if _storage._uid != rhs_storage._uid {return false}
//        if _storage._originalTime != rhs_storage._originalTime {return false}
//        if _storage._vchat != rhs_storage._vchat {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_VchatLiveStatus: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".VchatLiveStatus"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "status"),
//    2: .standard(proto: "start_time"),
//    3: .standard(proto: "live_duration"),
//    4: .standard(proto: "meeting_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._status)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._startTime)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._liveDuration)
//      case 4: try decoder.decodeSingularStringField(value: &self._meetingID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._status {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._startTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._liveDuration {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._meetingID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_VchatLiveStatus, rhs: LarkNCExtensionPB_Entities_VchatLiveStatus) -> Bool {
//    if lhs._status != rhs._status {return false}
//    if lhs._startTime != rhs._startTime {return false}
//    if lhs._liveDuration != rhs._liveDuration {return false}
//    if lhs._meetingID != rhs._meetingID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarEventKey: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarEventKey"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "unique_key"),
//    2: .standard(proto: "calendar_id"),
//    3: .standard(proto: "original_time"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._uniqueKey == nil {return false}
//    if self._calendarID == nil {return false}
//    if self._originalTime == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._uniqueKey)
//      case 2: try decoder.decodeSingularStringField(value: &self._calendarID)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._originalTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._uniqueKey {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._calendarID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._originalTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventKey, rhs: LarkNCExtensionPB_Entities_CalendarEventKey) -> Bool {
//    if lhs._uniqueKey != rhs._uniqueKey {return false}
//    if lhs._calendarID != rhs._calendarID {return false}
//    if lhs._originalTime != rhs._originalTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MeetingEventRef: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MeetingEventRef"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "unique_key"),
//    2: .standard(proto: "original_time"),
//    3: .standard(proto: "meeting_id"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._uniqueKey == nil {return false}
//    if self._originalTime == nil {return false}
//    if self._meetingID == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._uniqueKey)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._originalTime)
//      case 3: try decoder.decodeSingularStringField(value: &self._meetingID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._uniqueKey {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._originalTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._meetingID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MeetingEventRef, rhs: LarkNCExtensionPB_Entities_MeetingEventRef) -> Bool {
//    if lhs._uniqueKey != rhs._uniqueKey {return false}
//    if lhs._originalTime != rhs._originalTime {return false}
//    if lhs._meetingID != rhs._meetingID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_CalendarEventAttendeeTag: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CalendarEventAttendeeTag"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "content"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularStringField(value: &self._content)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._content {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventAttendeeTag, rhs: LarkNCExtensionPB_Entities_CalendarEventAttendeeTag) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._content != rhs._content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CalendarEventAttendeeTag.CalendarEventAttendeeTagType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "INDIVIDUAL"),
    2: .same(proto: "GROUP"),
  ]
}

extension LarkNCExtensionPB_Entities_CalendarEventAttendee: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CalendarEventAttendee"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "display_name"),
    2: .standard(proto: "attendee_calendar_id"),
    3: .standard(proto: "is_organizer"),
    4: .standard(proto: "is_resource"),
    5: .standard(proto: "is_optional"),
    6: .same(proto: "status"),
    7: .standard(proto: "additional_guests"),
    8: .standard(proto: "create_time"),
    9: .standard(proto: "update_time"),
    10: .same(proto: "type"),
    11: .same(proto: "tags"),
    12: .standard(proto: "tenant_id"),
    13: .standard(proto: "invite_info"),
    14: .standard(proto: "is_disabled"),
    15: .same(proto: "email"),
    16: .standard(proto: "is_third_party"),
    17: .standard(proto: "attendee_schema"),
    18: .standard(proto: "schema_extra_data"),
    19: .standard(proto: "resource_status"),
  ]

  fileprivate class _StorageClass {
    var _displayName: String? = nil
    var _attendeeCalendarID: String? = nil
    var _isOrganizer: Bool? = nil
    var _isResource: Bool? = nil
    var _isOptional: Bool? = nil
    var _status: LarkNCExtensionPB_Entities_CalendarEventAttendee.Status? = nil
    var _additionalGuests: Int32? = nil
    var _createTime: Int64? = nil
    var _updateTime: Int64? = nil
    var _type: LarkNCExtensionPB_Entities_Calendar.TypeEnum? = nil
    var _tags: [LarkNCExtensionPB_Entities_CalendarEventAttendeeTag] = []
    var _tenantID: String? = nil
    var _inviteInfo: LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation? = nil
    var _isDisabled: Bool? = nil
    var _email: String? = nil
    var _isThirdParty: Bool? = nil
    var _attendeeSchema: Data? = nil
    var _schemaExtraData: Data? = nil
    var _resourceStatus: LarkNCExtensionPB_Entities_CalendarEventAttendee.ResourceStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _displayName = source._displayName
      _attendeeCalendarID = source._attendeeCalendarID
      _isOrganizer = source._isOrganizer
      _isResource = source._isResource
      _isOptional = source._isOptional
      _status = source._status
      _additionalGuests = source._additionalGuests
      _createTime = source._createTime
      _updateTime = source._updateTime
      _type = source._type
      _tags = source._tags
      _tenantID = source._tenantID
      _inviteInfo = source._inviteInfo
      _isDisabled = source._isDisabled
      _email = source._email
      _isThirdParty = source._isThirdParty
      _attendeeSchema = source._attendeeSchema
      _schemaExtraData = source._schemaExtraData
      _resourceStatus = source._resourceStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._attendeeCalendarID == nil {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._displayName)
        case 2: try decoder.decodeSingularStringField(value: &_storage._attendeeCalendarID)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._isOrganizer)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._isResource)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._isOptional)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._additionalGuests)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._updateTime)
        case 10: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._tags)
        case 12: try decoder.decodeSingularStringField(value: &_storage._tenantID)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._inviteInfo)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._isDisabled)
        case 15: try decoder.decodeSingularStringField(value: &_storage._email)
        case 16: try decoder.decodeSingularBoolField(value: &_storage._isThirdParty)
        case 17: try decoder.decodeSingularBytesField(value: &_storage._attendeeSchema)
        case 18: try decoder.decodeSingularBytesField(value: &_storage._schemaExtraData)
        case 19: try decoder.decodeSingularEnumField(value: &_storage._resourceStatus)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._displayName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._attendeeCalendarID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._isOrganizer {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      }
      if let v = _storage._isResource {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      }
      if let v = _storage._isOptional {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      }
      if let v = _storage._status {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
      }
      if let v = _storage._additionalGuests {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._updateTime {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 10)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tags, fieldNumber: 11)
      }
      if let v = _storage._tenantID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      }
      if let v = _storage._inviteInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._isDisabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      }
      if let v = _storage._email {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      }
      if let v = _storage._isThirdParty {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      }
      if let v = _storage._attendeeSchema {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 17)
      }
      if let v = _storage._schemaExtraData {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 18)
      }
      if let v = _storage._resourceStatus {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventAttendee, rhs: LarkNCExtensionPB_Entities_CalendarEventAttendee) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._attendeeCalendarID != rhs_storage._attendeeCalendarID {return false}
        if _storage._isOrganizer != rhs_storage._isOrganizer {return false}
        if _storage._isResource != rhs_storage._isResource {return false}
        if _storage._isOptional != rhs_storage._isOptional {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._additionalGuests != rhs_storage._additionalGuests {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._tenantID != rhs_storage._tenantID {return false}
        if _storage._inviteInfo != rhs_storage._inviteInfo {return false}
        if _storage._isDisabled != rhs_storage._isDisabled {return false}
        if _storage._email != rhs_storage._email {return false}
        if _storage._isThirdParty != rhs_storage._isThirdParty {return false}
        if _storage._attendeeSchema != rhs_storage._attendeeSchema {return false}
        if _storage._schemaExtraData != rhs_storage._schemaExtraData {return false}
        if _storage._resourceStatus != rhs_storage._resourceStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CalendarEventAttendee.Status: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "NEEDS_ACTION"),
    2: .same(proto: "ACCEPT"),
    3: .same(proto: "TENTATIVE"),
    4: .same(proto: "DECLINE"),
    5: .same(proto: "REMOVED"),
  ]
}

extension LarkNCExtensionPB_Entities_CalendarEventAttendee.ResourceStatus: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "NORMAL"),
    1: .same(proto: "RELEASED_EARLY"),
  ]
}

extension LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CalendarEventAttendeeInviteInformation"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "invite_operator_id"),
    2: .standard(proto: "invite_operator_calendar_id"),
    3: .standard(proto: "inviter_calendar_id"),
    4: .standard(proto: "first_invite_operator_id"),
    5: .standard(proto: "invite_time"),
    6: .standard(proto: "removed_chatter_id"),
    7: .standard(proto: "removed_request_id"),
    8: .standard(proto: "remove_time"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._inviteOperatorID)
      case 2: try decoder.decodeSingularStringField(value: &self._inviteOperatorCalendarID)
      case 3: try decoder.decodeSingularStringField(value: &self._inviterCalendarID)
      case 4: try decoder.decodeSingularStringField(value: &self._firstInviteOperatorID)
      case 5: try decoder.decodeSingularInt64Field(value: &self._inviteTime)
      case 6: try decoder.decodeSingularStringField(value: &self._removedChatterID)
      case 7: try decoder.decodeSingularStringField(value: &self._removedRequestID)
      case 8: try decoder.decodeSingularInt64Field(value: &self._removeTime)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._inviteOperatorID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._inviteOperatorCalendarID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._inviterCalendarID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._firstInviteOperatorID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._inviteTime {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
    }
    if let v = self._removedChatterID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._removedRequestID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    if let v = self._removeTime {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation, rhs: LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation) -> Bool {
    if lhs._inviteOperatorID != rhs._inviteOperatorID {return false}
    if lhs._inviteOperatorCalendarID != rhs._inviteOperatorCalendarID {return false}
    if lhs._inviterCalendarID != rhs._inviterCalendarID {return false}
    if lhs._firstInviteOperatorID != rhs._firstInviteOperatorID {return false}
    if lhs._inviteTime != rhs._inviteTime {return false}
    if lhs._removedChatterID != rhs._removedChatterID {return false}
    if lhs._removedRequestID != rhs._removedRequestID {return false}
    if lhs._removeTime != rhs._removeTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CalendarEventGroupAttendee: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CalendarEventGroupAttendee"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .standard(proto: "is_removed"),
    3: .standard(proto: "invite_info"),
    4: .standard(proto: "valid_member_count"),
    5: .standard(proto: "is_self_in_group_member"),
  ]

  fileprivate class _StorageClass {
    var _chatID: String? = nil
    var _isRemoved: Bool? = nil
    var _inviteInfo: LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation? = nil
    var _validMemberCount: Int32? = nil
    var _isSelfInGroupMember: Bool? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chatID = source._chatID
      _isRemoved = source._isRemoved
      _inviteInfo = source._inviteInfo
      _validMemberCount = source._validMemberCount
      _isSelfInGroupMember = source._isSelfInGroupMember
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._chatID)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._isRemoved)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._inviteInfo)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._validMemberCount)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._isSelfInGroupMember)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._chatID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._isRemoved {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      }
      if let v = _storage._inviteInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._validMemberCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._isSelfInGroupMember {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventGroupAttendee, rhs: LarkNCExtensionPB_Entities_CalendarEventGroupAttendee) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chatID != rhs_storage._chatID {return false}
        if _storage._isRemoved != rhs_storage._isRemoved {return false}
        if _storage._inviteInfo != rhs_storage._inviteInfo {return false}
        if _storage._validMemberCount != rhs_storage._validMemberCount {return false}
        if _storage._isSelfInGroupMember != rhs_storage._isSelfInGroupMember {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_EventChatRefExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".EventChatRefExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "invite_info"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _inviteInfo: LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _inviteInfo = source._inviteInfo
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._inviteInfo)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._inviteInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_EventChatRefExtra, rhs: LarkNCExtensionPB_Entities_EventChatRefExtra) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._inviteInfo != rhs_storage._inviteInfo {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ResourceCustomization: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ResourceCustomization"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "customization_data"),
//    2: .standard(proto: "contact_ids"),
//    3: .standard(proto: "preparation_time"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.customizationData)
//      case 2: try decoder.decodeRepeatedInt64Field(value: &self.contactIds)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._preparationTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.customizationData.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.customizationData, fieldNumber: 1)
//    }
//    if !self.contactIds.isEmpty {
//      try visitor.visitRepeatedInt64Field(value: self.contactIds, fieldNumber: 2)
//    }
//    if let v = self._preparationTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ResourceCustomization, rhs: LarkNCExtensionPB_Entities_ResourceCustomization) -> Bool {
//    if lhs.customizationData != rhs.customizationData {return false}
//    if lhs.contactIds != rhs.contactIds {return false}
//    if lhs._preparationTime != rhs._preparationTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CustomizationData: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CustomizationData"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "customization_type"),
//    2: .standard(proto: "is_required"),
//    3: .same(proto: "label"),
//    4: .standard(proto: "index_key"),
//    5: .same(proto: "options"),
//    6: .same(proto: "conditions"),
//    7: .standard(proto: "input_content"),
//    8: .standard(proto: "place_holder"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._customizationType)
//      case 2: try decoder.decodeSingularBoolField(value: &self._isRequired)
//      case 3: try decoder.decodeSingularStringField(value: &self._label)
//      case 4: try decoder.decodeSingularStringField(value: &self._indexKey)
//      case 5: try decoder.decodeRepeatedMessageField(value: &self.options)
//      case 6: try decoder.decodeRepeatedMessageField(value: &self.conditions)
//      case 7: try decoder.decodeSingularStringField(value: &self._inputContent)
//      case 8: try decoder.decodeSingularStringField(value: &self._placeHolder)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._customizationType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._isRequired {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    if let v = self._label {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._indexKey {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if !self.options.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.options, fieldNumber: 5)
//    }
//    if !self.conditions.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.conditions, fieldNumber: 6)
//    }
//    if let v = self._inputContent {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//    }
//    if let v = self._placeHolder {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CustomizationData, rhs: LarkNCExtensionPB_Entities_CustomizationData) -> Bool {
//    if lhs._customizationType != rhs._customizationType {return false}
//    if lhs._isRequired != rhs._isRequired {return false}
//    if lhs._label != rhs._label {return false}
//    if lhs._indexKey != rhs._indexKey {return false}
//    if lhs.options != rhs.options {return false}
//    if lhs.conditions != rhs.conditions {return false}
//    if lhs._inputContent != rhs._inputContent {return false}
//    if lhs._placeHolder != rhs._placeHolder {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CustomizationData.CustomizationType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "SingleSelect"),
//    2: .same(proto: "MultipleSelect"),
//    3: .same(proto: "Input"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_CustomizationOption: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CustomizationOption"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "is_others"),
//    2: .standard(proto: "others_content"),
//    3: .standard(proto: "option_label"),
//    4: .standard(proto: "option_image_url"),
//    5: .standard(proto: "option_key"),
//    6: .standard(proto: "is_selected"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._isOthers)
//      case 2: try decoder.decodeSingularStringField(value: &self._othersContent)
//      case 3: try decoder.decodeSingularStringField(value: &self._optionLabel)
//      case 4: try decoder.decodeSingularStringField(value: &self._optionImageURL)
//      case 5: try decoder.decodeSingularStringField(value: &self._optionKey)
//      case 6: try decoder.decodeSingularBoolField(value: &self._isSelected)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._isOthers {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._othersContent {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._optionLabel {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._optionImageURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._optionKey {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    if let v = self._isSelected {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CustomizationOption, rhs: LarkNCExtensionPB_Entities_CustomizationOption) -> Bool {
//    if lhs._isOthers != rhs._isOthers {return false}
//    if lhs._othersContent != rhs._othersContent {return false}
//    if lhs._optionLabel != rhs._optionLabel {return false}
//    if lhs._optionImageURL != rhs._optionImageURL {return false}
//    if lhs._optionKey != rhs._optionKey {return false}
//    if lhs._isSelected != rhs._isSelected {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_OptionCondition: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".OptionCondition"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "custom_key"),
//    2: .standard(proto: "option_keys"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._customKey)
//      case 2: try decoder.decodeRepeatedStringField(value: &self.optionKeys)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._customKey {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if !self.optionKeys.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.optionKeys, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_OptionCondition, rhs: LarkNCExtensionPB_Entities_OptionCondition) -> Bool {
//    if lhs._customKey != rhs._customKey {return false}
//    if lhs.optionKeys != rhs.optionKeys {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ResourceApprovalRequest: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ResourceApprovalRequest"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "CreateChatterId"),
//    2: .same(proto: "ApprovalCode"),
//    3: .same(proto: "InstanceCode"),
//    4: .same(proto: "Reason"),
//    5: .same(proto: "ApproverUserIDs"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._createChatterID)
//      case 2: try decoder.decodeSingularStringField(value: &self._approvalCode)
//      case 3: try decoder.decodeSingularStringField(value: &self._instanceCode)
//      case 4: try decoder.decodeSingularStringField(value: &self._reason)
//      case 5: try decoder.decodeRepeatedInt64Field(value: &self.approverUserIds)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._createChatterID {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._approvalCode {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._instanceCode {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._reason {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if !self.approverUserIds.isEmpty {
//      try visitor.visitRepeatedInt64Field(value: self.approverUserIds, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ResourceApprovalRequest, rhs: LarkNCExtensionPB_Entities_ResourceApprovalRequest) -> Bool {
//    if lhs._createChatterID != rhs._createChatterID {return false}
//    if lhs._approvalCode != rhs._approvalCode {return false}
//    if lhs._instanceCode != rhs._instanceCode {return false}
//    if lhs._reason != rhs._reason {return false}
//    if lhs.approverUserIds != rhs.approverUserIds {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarEventAttendeeExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarEventAttendeeExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .same(proto: "tags"),
//    3: .standard(proto: "tenant_id"),
//    4: .standard(proto: "invite_info"),
//    5: .standard(proto: "rsvp_comment"),
//    6: .same(proto: "email"),
//    7: .standard(proto: "receiver_email"),
//    8: .standard(proto: "resource_status"),
//    9: .standard(proto: "resource_approval_request"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _type: LarkNCExtensionPB_Entities_Calendar.TypeEnum? = nil
//    var _tags: [LarkNCExtensionPB_Entities_CalendarEventAttendeeTag] = []
//    var _tenantID: Int64? = nil
//    var _inviteInfo: LarkNCExtensionPB_Entities_CalendarEventAttendeeInviteInformation? = nil
//    var _rsvpComment: String? = nil
//    var _email: String? = nil
//    var _receiverEmail: String? = nil
//    var _resourceStatus: LarkNCExtensionPB_Entities_CalendarEventAttendee.ResourceStatus? = nil
//    var _resourceApprovalRequest: LarkNCExtensionPB_Entities_ResourceApprovalRequest? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _type = source._type
//      _tags = source._tags
//      _tenantID = source._tenantID
//      _inviteInfo = source._inviteInfo
//      _rsvpComment = source._rsvpComment
//      _email = source._email
//      _receiverEmail = source._receiverEmail
//      _resourceStatus = source._resourceStatus
//      _resourceApprovalRequest = source._resourceApprovalRequest
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
//        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._tags)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._tenantID)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._inviteInfo)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._rsvpComment)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._email)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._receiverEmail)
//        case 8: try decoder.decodeSingularEnumField(value: &_storage._resourceStatus)
//        case 9: try decoder.decodeSingularMessageField(value: &_storage._resourceApprovalRequest)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._type {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if !_storage._tags.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._tags, fieldNumber: 2)
//      }
//      if let v = _storage._tenantID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._inviteInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._rsvpComment {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._email {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._receiverEmail {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._resourceStatus {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._resourceApprovalRequest {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventAttendeeExtra, rhs: LarkNCExtensionPB_Entities_CalendarEventAttendeeExtra) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._tags != rhs_storage._tags {return false}
//        if _storage._tenantID != rhs_storage._tenantID {return false}
//        if _storage._inviteInfo != rhs_storage._inviteInfo {return false}
//        if _storage._rsvpComment != rhs_storage._rsvpComment {return false}
//        if _storage._email != rhs_storage._email {return false}
//        if _storage._receiverEmail != rhs_storage._receiverEmail {return false}
//        if _storage._resourceStatus != rhs_storage._resourceStatus {return false}
//        if _storage._resourceApprovalRequest != rhs_storage._resourceApprovalRequest {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_CalendarEventLocation: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CalendarEventLocation"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "address"),
    3: .same(proto: "type"),
    4: .same(proto: "latitude"),
    5: .same(proto: "longitude"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularStringField(value: &self._address)
      case 3: try decoder.decodeSingularEnumField(value: &self._type)
      case 4: try decoder.decodeSingularFloatField(value: &self._latitude)
      case 5: try decoder.decodeSingularFloatField(value: &self._longitude)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._address {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._latitude {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    if let v = self._longitude {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventLocation, rhs: LarkNCExtensionPB_Entities_CalendarEventLocation) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._address != rhs._address {return false}
    if lhs._type != rhs._type {return false}
    if lhs._latitude != rhs._latitude {return false}
    if lhs._longitude != rhs._longitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CalendarEventLocation.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "MEETING_ROOM"),
    2: .same(proto: "ORDINARY"),
  ]
}

//extension LarkNCExtensionPB_Entities_CalendarEventInstance: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarEventInstance"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .standard(proto: "event_ref_id"),
//    3: .standard(proto: "calendar_id"),
//    4: .standard(proto: "begin_time"),
//    5: .standard(proto: "end_time"),
//    6: .same(proto: "score"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._id == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularStringField(value: &self._eventRefID)
//      case 3: try decoder.decodeSingularStringField(value: &self._calendarID)
//      case 4: try decoder.decodeSingularInt64Field(value: &self._beginTime)
//      case 5: try decoder.decodeSingularInt64Field(value: &self._endTime)
//      case 6: try decoder.decodeSingularDoubleField(value: &self._score)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._eventRefID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._calendarID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._beginTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//    }
//    if let v = self._endTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
//    }
//    if let v = self._score {
//      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventInstance, rhs: LarkNCExtensionPB_Entities_CalendarEventInstance) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._eventRefID != rhs._eventRefID {return false}
//    if lhs._calendarID != rhs._calendarID {return false}
//    if lhs._beginTime != rhs._beginTime {return false}
//    if lhs._endTime != rhs._endTime {return false}
//    if lhs._score != rhs._score {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_EventInfoInstances: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".EventInfoInstances"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "event_id"),
//    2: .same(proto: "summary"),
//    3: .same(proto: "uid"),
//    4: .standard(proto: "original_time"),
//    5: .standard(proto: "start_time"),
//    6: .same(proto: "color"),
//    7: .standard(proto: "is_all_day"),
//    8: .standard(proto: "event_visibility"),
//    9: .standard(proto: "self_attendee_status"),
//    20: .standard(proto: "resource_calendar_ids"),
//    21: .same(proto: "locations"),
//    22: .standard(proto: "instance_spans"),
//  ]
//
//  public var isInitialized: Bool {
//    if !LarkHTTP.Internal.areAllInitialized(self.instanceSpans) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._eventID)
//      case 2: try decoder.decodeSingularStringField(value: &self._summary)
//      case 3: try decoder.decodeSingularStringField(value: &self._uid)
//      case 4: try decoder.decodeSingularInt64Field(value: &self._originalTime)
//      case 5: try decoder.decodeSingularInt64Field(value: &self._startTime)
//      case 6: try decoder.decodeSingularInt32Field(value: &self._color)
//      case 7: try decoder.decodeSingularBoolField(value: &self._isAllDay)
//      case 8: try decoder.decodeSingularEnumField(value: &self._eventVisibility)
//      case 9: try decoder.decodeSingularEnumField(value: &self._selfAttendeeStatus)
//      case 20: try decoder.decodeRepeatedStringField(value: &self.resourceCalendarIds)
//      case 21: try decoder.decodeRepeatedMessageField(value: &self.locations)
//      case 22: try decoder.decodeRepeatedMessageField(value: &self.instanceSpans)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._eventID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._summary {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._uid {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._originalTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//    }
//    if let v = self._startTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
//    }
//    if let v = self._color {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
//    }
//    if let v = self._isAllDay {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
//    }
//    if let v = self._eventVisibility {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
//    }
//    if let v = self._selfAttendeeStatus {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
//    }
//    if !self.resourceCalendarIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.resourceCalendarIds, fieldNumber: 20)
//    }
//    if !self.locations.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.locations, fieldNumber: 21)
//    }
//    if !self.instanceSpans.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.instanceSpans, fieldNumber: 22)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_EventInfoInstances, rhs: LarkNCExtensionPB_Entities_EventInfoInstances) -> Bool {
//    if lhs._eventID != rhs._eventID {return false}
//    if lhs._summary != rhs._summary {return false}
//    if lhs._uid != rhs._uid {return false}
//    if lhs._originalTime != rhs._originalTime {return false}
//    if lhs._startTime != rhs._startTime {return false}
//    if lhs._color != rhs._color {return false}
//    if lhs._isAllDay != rhs._isAllDay {return false}
//    if lhs._eventVisibility != rhs._eventVisibility {return false}
//    if lhs._selfAttendeeStatus != rhs._selfAttendeeStatus {return false}
//    if lhs.resourceCalendarIds != rhs.resourceCalendarIds {return false}
//    if lhs.locations != rhs.locations {return false}
//    if lhs.instanceSpans != rhs.instanceSpans {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_CalendarEventAttachment: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CalendarEventAttachment"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "file_token"),
    2: .standard(proto: "file_size"),
    3: .same(proto: "name"),
    4: .same(proto: "type"),
    5: .standard(proto: "uploader_user_id"),
    6: .standard(proto: "is_deleted"),
    7: .same(proto: "position"),
    8: .standard(proto: "doc_urls"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._fileToken)
      case 2: try decoder.decodeSingularStringField(value: &self._fileSize)
      case 3: try decoder.decodeSingularStringField(value: &self._name)
      case 4: try decoder.decodeSingularEnumField(value: &self._type)
      case 5: try decoder.decodeSingularStringField(value: &self._uploaderUserID)
      case 6: try decoder.decodeSingularBoolField(value: &self._isDeleted)
      case 7: try decoder.decodeSingularInt32Field(value: &self._position)
      case 8: try decoder.decodeRepeatedStringField(value: &self.docUrls)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._fileToken {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._fileSize {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if let v = self._uploaderUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._isDeleted {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._position {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    }
    if !self.docUrls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.docUrls, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventAttachment, rhs: LarkNCExtensionPB_Entities_CalendarEventAttachment) -> Bool {
    if lhs._fileToken != rhs._fileToken {return false}
    if lhs._fileSize != rhs._fileSize {return false}
    if lhs._name != rhs._name {return false}
    if lhs._type != rhs._type {return false}
    if lhs._uploaderUserID != rhs._uploaderUserID {return false}
    if lhs._isDeleted != rhs._isDeleted {return false}
    if lhs._position != rhs._position {return false}
    if lhs.docUrls != rhs.docUrls {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CalendarEventAttachment.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "LOCAL"),
    2: .same(proto: "SAMEPAGEMEETING"),
  ]
}

extension LarkNCExtensionPB_Entities_SamePageMeetingInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SamePageMeetingInfo"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.url)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitRepeatedStringField(value: self.url, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_SamePageMeetingInfo, rhs: LarkNCExtensionPB_Entities_SamePageMeetingInfo) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_ApprovalTrigger: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ApprovalTrigger"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "duration_trigger"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._durationTrigger)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._durationTrigger {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ApprovalTrigger, rhs: LarkNCExtensionPB_Entities_ApprovalTrigger) -> Bool {
//    if lhs._durationTrigger != rhs._durationTrigger {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ResourceApprovalInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ResourceApprovalInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "approver_user_ids"),
//    2: .same(proto: "trigger"),
//    3: .standard(proto: "admin_on_off"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _approverUserIds: [Int64] = []
//    var _trigger: LarkNCExtensionPB_Entities_ApprovalTrigger? = nil
//    var _adminOnOff: Bool? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _approverUserIds = source._approverUserIds
//      _trigger = source._trigger
//      _adminOnOff = source._adminOnOff
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeRepeatedInt64Field(value: &_storage._approverUserIds)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._trigger)
//        case 3: try decoder.decodeSingularBoolField(value: &_storage._adminOnOff)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if !_storage._approverUserIds.isEmpty {
//        try visitor.visitRepeatedInt64Field(value: _storage._approverUserIds, fieldNumber: 1)
//      }
//      if let v = _storage._trigger {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._adminOnOff {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ResourceApprovalInfo, rhs: LarkNCExtensionPB_Entities_ResourceApprovalInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._approverUserIds != rhs_storage._approverUserIds {return false}
//        if _storage._trigger != rhs_storage._trigger {return false}
//        if _storage._adminOnOff != rhs_storage._adminOnOff {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ResourceStrategy: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ResourceStrategy"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "single_max_duration"),
//    2: .standard(proto: "until_max_duration"),
//    3: .standard(proto: "daily_start_time"),
//    4: .standard(proto: "daily_end_time"),
//    5: .same(proto: "timezone"),
//    6: .standard(proto: "is_enable"),
//    7: .standard(proto: "earliest_book_time"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._singleMaxDuration)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._untilMaxDuration)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._dailyStartTime)
//      case 4: try decoder.decodeSingularInt64Field(value: &self._dailyEndTime)
//      case 5: try decoder.decodeSingularStringField(value: &self._timezone)
//      case 6: try decoder.decodeSingularBoolField(value: &self._isEnable)
//      case 7: try decoder.decodeSingularInt32Field(value: &self._earliestBookTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._singleMaxDuration {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._untilMaxDuration {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._dailyStartTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._dailyEndTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//    }
//    if let v = self._timezone {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    if let v = self._isEnable {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//    }
//    if let v = self._earliestBookTime {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ResourceStrategy, rhs: LarkNCExtensionPB_Entities_ResourceStrategy) -> Bool {
//    if lhs._singleMaxDuration != rhs._singleMaxDuration {return false}
//    if lhs._untilMaxDuration != rhs._untilMaxDuration {return false}
//    if lhs._dailyStartTime != rhs._dailyStartTime {return false}
//    if lhs._dailyEndTime != rhs._dailyEndTime {return false}
//    if lhs._timezone != rhs._timezone {return false}
//    if lhs._isEnable != rhs._isEnable {return false}
//    if lhs._earliestBookTime != rhs._earliestBookTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ResourceRelatedInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ResourceRelatedInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "resource_strategy"),
//    2: .standard(proto: "resource_customization"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _resourceStrategy: LarkNCExtensionPB_Entities_ResourceStrategy? = nil
//    var _resourceCustomization: LarkNCExtensionPB_Entities_ResourceCustomization? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _resourceStrategy = source._resourceStrategy
//      _resourceCustomization = source._resourceCustomization
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._resourceStrategy)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._resourceCustomization)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._resourceStrategy {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._resourceCustomization {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ResourceRelatedInfo, rhs: LarkNCExtensionPB_Entities_ResourceRelatedInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._resourceStrategy != rhs_storage._resourceStrategy {return false}
//        if _storage._resourceCustomization != rhs_storage._resourceCustomization {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_CalendarResource: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CalendarResource"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "calendar_id"),
    3: .same(proto: "name"),
    4: .same(proto: "type"),
    5: .same(proto: "status"),
    6: .standard(proto: "building_id"),
    7: .same(proto: "description"),
    8: .same(proto: "capacity"),
    9: .standard(proto: "floor_name"),
    10: .same(proto: "category"),
    11: .standard(proto: "is_deleted"),
    12: .standard(proto: "is_external"),
    13: .same(proto: "weight"),
    14: .standard(proto: "tenant_id"),
    15: .standard(proto: "is_disabled"),
    16: .standard(proto: "resource_schema"),
    17: .standard(proto: "schema_extra_data"),
    18: .standard(proto: "equipment_names"),
    19: .standard(proto: "equipment_name_map"),
  ]

  fileprivate class _StorageClass {
    var _id: String? = nil
    var _calendarID: String? = nil
    var _name: String? = nil
    var _type: LarkNCExtensionPB_Entities_CalendarResource.TypeEnum? = nil
    var _status: LarkNCExtensionPB_Entities_CalendarResource.Status? = nil
    var _buildingID: String? = nil
    var _description_p: String? = nil
    var _capacity: Int32? = nil
    var _floorName: String? = nil
    var _category: String? = nil
    var _isDeleted: Bool? = nil
    var _isExternal: Bool? = nil
    var _weight: Int32? = nil
    var _tenantID: String? = nil
    var _isDisabled: Bool? = nil
    var _resourceSchema: Data? = nil
    var _schemaExtraData: Data? = nil
    var _equipmentNames: [String] = []
    var _equipmentNameMap: Dictionary<String,String> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _calendarID = source._calendarID
      _name = source._name
      _type = source._type
      _status = source._status
      _buildingID = source._buildingID
      _description_p = source._description_p
      _capacity = source._capacity
      _floorName = source._floorName
      _category = source._category
      _isDeleted = source._isDeleted
      _isExternal = source._isExternal
      _weight = source._weight
      _tenantID = source._tenantID
      _isDisabled = source._isDisabled
      _resourceSchema = source._resourceSchema
      _schemaExtraData = source._schemaExtraData
      _equipmentNames = source._equipmentNames
      _equipmentNameMap = source._equipmentNameMap
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._calendarID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 6: try decoder.decodeSingularStringField(value: &_storage._buildingID)
        case 7: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._capacity)
        case 9: try decoder.decodeSingularStringField(value: &_storage._floorName)
        case 10: try decoder.decodeSingularStringField(value: &_storage._category)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._isDeleted)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._isExternal)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._weight)
        case 14: try decoder.decodeSingularStringField(value: &_storage._tenantID)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._isDisabled)
        case 16: try decoder.decodeSingularBytesField(value: &_storage._resourceSchema)
        case 17: try decoder.decodeSingularBytesField(value: &_storage._schemaExtraData)
        case 18: try decoder.decodeRepeatedStringField(value: &_storage._equipmentNames)
        case 19: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._equipmentNameMap)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._calendarID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
      }
      if let v = _storage._status {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      }
      if let v = _storage._buildingID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
      if let v = _storage._capacity {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._floorName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
      if let v = _storage._category {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      }
      if let v = _storage._isDeleted {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      }
      if let v = _storage._isExternal {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      }
      if let v = _storage._weight {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._tenantID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      }
      if let v = _storage._isDisabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      }
      if let v = _storage._resourceSchema {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 16)
      }
      if let v = _storage._schemaExtraData {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 17)
      }
      if !_storage._equipmentNames.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._equipmentNames, fieldNumber: 18)
      }
      if !_storage._equipmentNameMap.isEmpty {
        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._equipmentNameMap, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarResource, rhs: LarkNCExtensionPB_Entities_CalendarResource) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._calendarID != rhs_storage._calendarID {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._buildingID != rhs_storage._buildingID {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._capacity != rhs_storage._capacity {return false}
        if _storage._floorName != rhs_storage._floorName {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._isDeleted != rhs_storage._isDeleted {return false}
        if _storage._isExternal != rhs_storage._isExternal {return false}
        if _storage._weight != rhs_storage._weight {return false}
        if _storage._tenantID != rhs_storage._tenantID {return false}
        if _storage._isDisabled != rhs_storage._isDisabled {return false}
        if _storage._resourceSchema != rhs_storage._resourceSchema {return false}
        if _storage._schemaExtraData != rhs_storage._schemaExtraData {return false}
        if _storage._equipmentNames != rhs_storage._equipmentNames {return false}
        if _storage._equipmentNameMap != rhs_storage._equipmentNameMap {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_CalendarResource.TypeEnum: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "MEETING_ROOM"),
    2: .same(proto: "OTHER"),
  ]
}

extension LarkNCExtensionPB_Entities_CalendarResource.Status: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "FREE"),
    2: .same(proto: "BUSY"),
  ]
}

extension LarkNCExtensionPB_Entities_CalendarResource.ExternalResourceType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "GOOGLE"),
  ]
}

//extension LarkNCExtensionPB_Entities_CalendarResourceExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarResourceExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "description"),
//    2: .same(proto: "capacity"),
//    3: .same(proto: "category"),
//    4: .standard(proto: "floor_name"),
//    5: .standard(proto: "image_key_map"),
//    6: .same(proto: "comment"),
//    7: .standard(proto: "image_url"),
//    8: .standard(proto: "approval_info"),
//    9: .standard(proto: "requisition_info"),
//    10: .standard(proto: "check_in_image_key_map"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _description_p: String? = nil
//    var _capacity: Int32? = nil
//    var _category: String? = nil
//    var _floorName: String? = nil
//    var _imageKeyMap: Dictionary<String,String> = [:]
//    var _comment: String? = nil
//    var _imageURL: String? = nil
//    var _approvalInfo: LarkNCExtensionPB_Entities_ResourceApprovalInfo? = nil
//    var _requisitionInfo: LarkNCExtensionPB_Entities_ResourceRequisition? = nil
//    var _checkInImageKeyMap: Dictionary<String,String> = [:]
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _description_p = source._description_p
//      _capacity = source._capacity
//      _category = source._category
//      _floorName = source._floorName
//      _imageKeyMap = source._imageKeyMap
//      _comment = source._comment
//      _imageURL = source._imageURL
//      _approvalInfo = source._approvalInfo
//      _requisitionInfo = source._requisitionInfo
//      _checkInImageKeyMap = source._checkInImageKeyMap
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._description_p)
//        case 2: try decoder.decodeSingularInt32Field(value: &_storage._capacity)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._category)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._floorName)
//        case 5: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._imageKeyMap)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._comment)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._imageURL)
//        case 8: try decoder.decodeSingularMessageField(value: &_storage._approvalInfo)
//        case 9: try decoder.decodeSingularMessageField(value: &_storage._requisitionInfo)
//        case 10: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._checkInImageKeyMap)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._description_p {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._capacity {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._category {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._floorName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if !_storage._imageKeyMap.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._imageKeyMap, fieldNumber: 5)
//      }
//      if let v = _storage._comment {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._imageURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._approvalInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._requisitionInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
//      }
//      if !_storage._checkInImageKeyMap.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._checkInImageKeyMap, fieldNumber: 10)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarResourceExtra, rhs: LarkNCExtensionPB_Entities_CalendarResourceExtra) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._description_p != rhs_storage._description_p {return false}
//        if _storage._capacity != rhs_storage._capacity {return false}
//        if _storage._category != rhs_storage._category {return false}
//        if _storage._floorName != rhs_storage._floorName {return false}
//        if _storage._imageKeyMap != rhs_storage._imageKeyMap {return false}
//        if _storage._comment != rhs_storage._comment {return false}
//        if _storage._imageURL != rhs_storage._imageURL {return false}
//        if _storage._approvalInfo != rhs_storage._approvalInfo {return false}
//        if _storage._requisitionInfo != rhs_storage._requisitionInfo {return false}
//        if _storage._checkInImageKeyMap != rhs_storage._checkInImageKeyMap {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ResourceRequisition: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ResourceRequisition"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "start_time"),
//    2: .standard(proto: "end_time"),
//    3: .standard(proto: "contact_ids"),
//    4: .same(proto: "reason"),
//    5: .standard(proto: "need_notification"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._startTime)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._endTime)
//      case 3: try decoder.decodeRepeatedInt64Field(value: &self.contactIds)
//      case 4: try decoder.decodeSingularStringField(value: &self._reason)
//      case 5: try decoder.decodeSingularBoolField(value: &self._needNotification)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._startTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._endTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    if !self.contactIds.isEmpty {
//      try visitor.visitRepeatedInt64Field(value: self.contactIds, fieldNumber: 3)
//    }
//    if let v = self._reason {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._needNotification {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ResourceRequisition, rhs: LarkNCExtensionPB_Entities_ResourceRequisition) -> Bool {
//    if lhs._startTime != rhs._startTime {return false}
//    if lhs._endTime != rhs._endTime {return false}
//    if lhs.contactIds != rhs.contactIds {return false}
//    if lhs._reason != rhs._reason {return false}
//    if lhs._needNotification != rhs._needNotification {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarSettingConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarSettingConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "lang_alternate_calendar_map"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufEnumMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_AlternateCalendar>.self, value: &self.langAlternateCalendarMap)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.langAlternateCalendarMap.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufEnumMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_AlternateCalendar>.self, value: self.langAlternateCalendarMap, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarSettingConfig, rhs: LarkNCExtensionPB_Entities_CalendarSettingConfig) -> Bool {
//    if lhs.langAlternateCalendarMap != rhs.langAlternateCalendarMap {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "default_event_duration_v2"),
//    2: .standard(proto: "show_rejected_schedule"),
//    3: .standard(proto: "default_all_day_reminder"),
//    4: .standard(proto: "default_none_all_day_reminder"),
//    5: .standard(proto: "bind_google_calendar"),
//    6: .standard(proto: "remind_accept_only"),
//    7: .standard(proto: "notify_when_guests_decline"),
//    8: .standard(proto: "show_past_events_mask"),
//    9: .standard(proto: "skin_type"),
//    10: .same(proto: "timezone"),
//    11: .standard(proto: "show_past_events_mask_pc"),
//    12: .standard(proto: "skin_type_pc"),
//    13: .standard(proto: "show_past_events_mask_android"),
//    14: .standard(proto: "skin_type_android"),
//    15: .standard(proto: "show_past_events_mask_ios"),
//    16: .standard(proto: "skin_type_ios"),
//    17: .standard(proto: "week_start_day"),
//    18: .standard(proto: "google_calendar_email"),
//    19: .standard(proto: "show_other_timezone"),
//    20: .standard(proto: "other_timezones"),
//    21: .standard(proto: "hide_binding_google_calendar"),
//    22: .standard(proto: "summer_time_alert"),
//    23: .standard(proto: "enable_system_timezone"),
//    24: .standard(proto: "work_hour_setting"),
//    25: .standard(proto: "show_today_view"),
//    26: .standard(proto: "show_past_events_mask_web"),
//    27: .standard(proto: "skin_type_web"),
//    28: .standard(proto: "alternate_calendar"),
//    29: .standard(proto: "calendar_setting_config"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _defaultEventDurationV2: Int32? = nil
//    var _showRejectedSchedule: Bool? = nil
//    var _defaultAllDayReminder: Int32? = nil
//    var _defaultNoneAllDayReminder: Int32? = nil
//    var _bindGoogleCalendar: Bool? = nil
//    var _remindAcceptOnly: Bool? = nil
//    var _notifyWhenGuestsDecline: Bool? = nil
//    var _showPastEventsMask: Bool? = nil
//    var _skinType: Int32? = nil
//    var _timezone: String? = nil
//    var _showPastEventsMaskPc: Bool? = nil
//    var _skinTypePc: Int32? = nil
//    var _showPastEventsMaskAndroid: Bool? = nil
//    var _skinTypeAndroid: Int32? = nil
//    var _showPastEventsMaskIos: Bool? = nil
//    var _skinTypeIos: Int32? = nil
//    var _weekStartDay: Int32? = nil
//    var _googleCalendarEmail: String? = nil
//    var _showOtherTimezone: Bool? = nil
//    var _otherTimezones: [String] = []
//    var _hideBindingGoogleCalendar: Bool? = nil
//    var _summerTimeAlert: Bool? = nil
//    var _enableSystemTimezone: Bool? = nil
//    var _workHourSetting: LarkNCExtensionPB_Entities_WorkHourSetting? = nil
//    var _showTodayView: Bool? = nil
//    var _showPastEventsMaskWeb: Bool? = nil
//    var _skinTypeWeb: Int32? = nil
//    var _alternateCalendar: LarkNCExtensionPB_Entities_AlternateCalendar? = nil
//    var _calendarSettingConfig: LarkNCExtensionPB_Entities_CalendarSettingConfig? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _defaultEventDurationV2 = source._defaultEventDurationV2
//      _showRejectedSchedule = source._showRejectedSchedule
//      _defaultAllDayReminder = source._defaultAllDayReminder
//      _defaultNoneAllDayReminder = source._defaultNoneAllDayReminder
//      _bindGoogleCalendar = source._bindGoogleCalendar
//      _remindAcceptOnly = source._remindAcceptOnly
//      _notifyWhenGuestsDecline = source._notifyWhenGuestsDecline
//      _showPastEventsMask = source._showPastEventsMask
//      _skinType = source._skinType
//      _timezone = source._timezone
//      _showPastEventsMaskPc = source._showPastEventsMaskPc
//      _skinTypePc = source._skinTypePc
//      _showPastEventsMaskAndroid = source._showPastEventsMaskAndroid
//      _skinTypeAndroid = source._skinTypeAndroid
//      _showPastEventsMaskIos = source._showPastEventsMaskIos
//      _skinTypeIos = source._skinTypeIos
//      _weekStartDay = source._weekStartDay
//      _googleCalendarEmail = source._googleCalendarEmail
//      _showOtherTimezone = source._showOtherTimezone
//      _otherTimezones = source._otherTimezones
//      _hideBindingGoogleCalendar = source._hideBindingGoogleCalendar
//      _summerTimeAlert = source._summerTimeAlert
//      _enableSystemTimezone = source._enableSystemTimezone
//      _workHourSetting = source._workHourSetting
//      _showTodayView = source._showTodayView
//      _showPastEventsMaskWeb = source._showPastEventsMaskWeb
//      _skinTypeWeb = source._skinTypeWeb
//      _alternateCalendar = source._alternateCalendar
//      _calendarSettingConfig = source._calendarSettingConfig
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._workHourSetting, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt32Field(value: &_storage._defaultEventDurationV2)
//        case 2: try decoder.decodeSingularBoolField(value: &_storage._showRejectedSchedule)
//        case 3: try decoder.decodeSingularInt32Field(value: &_storage._defaultAllDayReminder)
//        case 4: try decoder.decodeSingularInt32Field(value: &_storage._defaultNoneAllDayReminder)
//        case 5: try decoder.decodeSingularBoolField(value: &_storage._bindGoogleCalendar)
//        case 6: try decoder.decodeSingularBoolField(value: &_storage._remindAcceptOnly)
//        case 7: try decoder.decodeSingularBoolField(value: &_storage._notifyWhenGuestsDecline)
//        case 8: try decoder.decodeSingularBoolField(value: &_storage._showPastEventsMask)
//        case 9: try decoder.decodeSingularInt32Field(value: &_storage._skinType)
//        case 10: try decoder.decodeSingularStringField(value: &_storage._timezone)
//        case 11: try decoder.decodeSingularBoolField(value: &_storage._showPastEventsMaskPc)
//        case 12: try decoder.decodeSingularInt32Field(value: &_storage._skinTypePc)
//        case 13: try decoder.decodeSingularBoolField(value: &_storage._showPastEventsMaskAndroid)
//        case 14: try decoder.decodeSingularInt32Field(value: &_storage._skinTypeAndroid)
//        case 15: try decoder.decodeSingularBoolField(value: &_storage._showPastEventsMaskIos)
//        case 16: try decoder.decodeSingularInt32Field(value: &_storage._skinTypeIos)
//        case 17: try decoder.decodeSingularInt32Field(value: &_storage._weekStartDay)
//        case 18: try decoder.decodeSingularStringField(value: &_storage._googleCalendarEmail)
//        case 19: try decoder.decodeSingularBoolField(value: &_storage._showOtherTimezone)
//        case 20: try decoder.decodeRepeatedStringField(value: &_storage._otherTimezones)
//        case 21: try decoder.decodeSingularBoolField(value: &_storage._hideBindingGoogleCalendar)
//        case 22: try decoder.decodeSingularBoolField(value: &_storage._summerTimeAlert)
//        case 23: try decoder.decodeSingularBoolField(value: &_storage._enableSystemTimezone)
//        case 24: try decoder.decodeSingularMessageField(value: &_storage._workHourSetting)
//        case 25: try decoder.decodeSingularBoolField(value: &_storage._showTodayView)
//        case 26: try decoder.decodeSingularBoolField(value: &_storage._showPastEventsMaskWeb)
//        case 27: try decoder.decodeSingularInt32Field(value: &_storage._skinTypeWeb)
//        case 28: try decoder.decodeSingularEnumField(value: &_storage._alternateCalendar)
//        case 29: try decoder.decodeSingularMessageField(value: &_storage._calendarSettingConfig)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._defaultEventDurationV2 {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._showRejectedSchedule {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._defaultAllDayReminder {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._defaultNoneAllDayReminder {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._bindGoogleCalendar {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._remindAcceptOnly {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._notifyWhenGuestsDecline {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._showPastEventsMask {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._skinType {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._timezone {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._showPastEventsMaskPc {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._skinTypePc {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._showPastEventsMaskAndroid {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._skinTypeAndroid {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._showPastEventsMaskIos {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
//      }
//      if let v = _storage._skinTypeIos {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 16)
//      }
//      if let v = _storage._weekStartDay {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
//      }
//      if let v = _storage._googleCalendarEmail {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
//      }
//      if let v = _storage._showOtherTimezone {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
//      }
//      if !_storage._otherTimezones.isEmpty {
//        try visitor.visitRepeatedStringField(value: _storage._otherTimezones, fieldNumber: 20)
//      }
//      if let v = _storage._hideBindingGoogleCalendar {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 21)
//      }
//      if let v = _storage._summerTimeAlert {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
//      }
//      if let v = _storage._enableSystemTimezone {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
//      }
//      if let v = _storage._workHourSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
//      }
//      if let v = _storage._showTodayView {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 25)
//      }
//      if let v = _storage._showPastEventsMaskWeb {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 26)
//      }
//      if let v = _storage._skinTypeWeb {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 27)
//      }
//      if let v = _storage._alternateCalendar {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 28)
//      }
//      if let v = _storage._calendarSettingConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarSetting, rhs: LarkNCExtensionPB_Entities_CalendarSetting) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._defaultEventDurationV2 != rhs_storage._defaultEventDurationV2 {return false}
//        if _storage._showRejectedSchedule != rhs_storage._showRejectedSchedule {return false}
//        if _storage._defaultAllDayReminder != rhs_storage._defaultAllDayReminder {return false}
//        if _storage._defaultNoneAllDayReminder != rhs_storage._defaultNoneAllDayReminder {return false}
//        if _storage._bindGoogleCalendar != rhs_storage._bindGoogleCalendar {return false}
//        if _storage._remindAcceptOnly != rhs_storage._remindAcceptOnly {return false}
//        if _storage._notifyWhenGuestsDecline != rhs_storage._notifyWhenGuestsDecline {return false}
//        if _storage._showPastEventsMask != rhs_storage._showPastEventsMask {return false}
//        if _storage._skinType != rhs_storage._skinType {return false}
//        if _storage._timezone != rhs_storage._timezone {return false}
//        if _storage._showPastEventsMaskPc != rhs_storage._showPastEventsMaskPc {return false}
//        if _storage._skinTypePc != rhs_storage._skinTypePc {return false}
//        if _storage._showPastEventsMaskAndroid != rhs_storage._showPastEventsMaskAndroid {return false}
//        if _storage._skinTypeAndroid != rhs_storage._skinTypeAndroid {return false}
//        if _storage._showPastEventsMaskIos != rhs_storage._showPastEventsMaskIos {return false}
//        if _storage._skinTypeIos != rhs_storage._skinTypeIos {return false}
//        if _storage._weekStartDay != rhs_storage._weekStartDay {return false}
//        if _storage._googleCalendarEmail != rhs_storage._googleCalendarEmail {return false}
//        if _storage._showOtherTimezone != rhs_storage._showOtherTimezone {return false}
//        if _storage._otherTimezones != rhs_storage._otherTimezones {return false}
//        if _storage._hideBindingGoogleCalendar != rhs_storage._hideBindingGoogleCalendar {return false}
//        if _storage._summerTimeAlert != rhs_storage._summerTimeAlert {return false}
//        if _storage._enableSystemTimezone != rhs_storage._enableSystemTimezone {return false}
//        if _storage._workHourSetting != rhs_storage._workHourSetting {return false}
//        if _storage._showTodayView != rhs_storage._showTodayView {return false}
//        if _storage._showPastEventsMaskWeb != rhs_storage._showPastEventsMaskWeb {return false}
//        if _storage._skinTypeWeb != rhs_storage._skinTypeWeb {return false}
//        if _storage._alternateCalendar != rhs_storage._alternateCalendar {return false}
//        if _storage._calendarSettingConfig != rhs_storage._calendarSettingConfig {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarTenantSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarTenantSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "enable_multi_selection"),
//    2: .standard(proto: "display_type"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._enableMultiSelection)
//      case 2: try decoder.decodeSingularEnumField(value: &self._displayType)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._enableMultiSelection {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._displayType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarTenantSetting, rhs: LarkNCExtensionPB_Entities_CalendarTenantSetting) -> Bool {
//    if lhs._enableMultiSelection != rhs._enableMultiSelection {return false}
//    if lhs._displayType != rhs._displayType {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_WorkHourSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkHourSetting"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "enable_work_hour"),
    2: .standard(proto: "work_hour_items"),
    3: .standard(proto: "is_first_set"),
  ]

  public var isInitialized: Bool {
    if !LarkHTTP.Internal.areAllInitialized(self.workHourItems) {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._enableWorkHour)
      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_WorkHourItem>.self, value: &self.workHourItems)
      case 3: try decoder.decodeSingularBoolField(value: &self._isFirstSet)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._enableWorkHour {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if !self.workHourItems.isEmpty {
      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_WorkHourItem>.self, value: self.workHourItems, fieldNumber: 2)
    }
    if let v = self._isFirstSet {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_WorkHourSetting, rhs: LarkNCExtensionPB_Entities_WorkHourSetting) -> Bool {
    if lhs._enableWorkHour != rhs._enableWorkHour {return false}
    if lhs.workHourItems != rhs.workHourItems {return false}
    if lhs._isFirstSet != rhs._isFirstSet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_WorkHourItem: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkHourItem"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "spans"),
  ]

  public var isInitialized: Bool {
    if !LarkHTTP.Internal.areAllInitialized(self.spans) {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.spans)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if !self.spans.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.spans, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_WorkHourItem, rhs: LarkNCExtensionPB_Entities_WorkHourItem) -> Bool {
    if lhs.spans != rhs.spans {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_WorkHourSpan: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkHourSpan"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "start_minute"),
    2: .standard(proto: "end_minute"),
  ]

  public var isInitialized: Bool {
    if self._startMinute == nil {return false}
    if self._endMinute == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._startMinute)
      case 2: try decoder.decodeSingularInt32Field(value: &self._endMinute)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._startMinute {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._endMinute {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_WorkHourSpan, rhs: LarkNCExtensionPB_Entities_WorkHourSpan) -> Bool {
    if lhs._startMinute != rhs._startMinute {return false}
    if lhs._endMinute != rhs._endMinute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_CalendarUserDeviceSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarUserDeviceSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "timezone"),
//    2: .standard(proto: "device_id"),
//    3: .standard(proto: "enable_system_timezone"),
//    4: .standard(proto: "alternate_calendar"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._timezone)
//      case 2: try decoder.decodeSingularStringField(value: &self._deviceID)
//      case 3: try decoder.decodeSingularBoolField(value: &self._enableSystemTimezone)
//      case 4: try decoder.decodeSingularEnumField(value: &self._alternateCalendar)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._timezone {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._deviceID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._enableSystemTimezone {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
//    }
//    if let v = self._alternateCalendar {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarUserDeviceSetting, rhs: LarkNCExtensionPB_Entities_CalendarUserDeviceSetting) -> Bool {
//    if lhs._timezone != rhs._timezone {return false}
//    if lhs._deviceID != rhs._deviceID {return false}
//    if lhs._enableSystemTimezone != rhs._enableSystemTimezone {return false}
//    if lhs._alternateCalendar != rhs._alternateCalendar {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarUserDeviceSettings: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarUserDeviceSettings"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "calendar_user_device_settings"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.calendarUserDeviceSettings)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.calendarUserDeviceSettings.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.calendarUserDeviceSettings, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarUserDeviceSettings, rhs: LarkNCExtensionPB_Entities_CalendarUserDeviceSettings) -> Bool {
//    if lhs.calendarUserDeviceSettings != rhs.calendarUserDeviceSettings {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_CalendarBuilding: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CalendarBuilding"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
    4: .same(proto: "latitude"),
    5: .same(proto: "longitude"),
    6: .same(proto: "floors"),
    7: .standard(proto: "meeting_rooms"),
    8: .standard(proto: "is_deleted"),
    9: .same(proto: "weight"),
    10: .standard(proto: "seize_time"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if !LarkHTTP.Internal.areAllInitialized(self.meetingRooms) {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._id)
      case 2: try decoder.decodeSingularStringField(value: &self._name)
      case 3: try decoder.decodeSingularStringField(value: &self._description_p)
      case 4: try decoder.decodeSingularFloatField(value: &self._latitude)
      case 5: try decoder.decodeSingularFloatField(value: &self._longitude)
      case 6: try decoder.decodeRepeatedStringField(value: &self.floors)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.meetingRooms)
      case 8: try decoder.decodeSingularBoolField(value: &self._isDeleted)
      case 9: try decoder.decodeSingularInt32Field(value: &self._weight)
      case 10: try decoder.decodeSingularInt64Field(value: &self._seizeTime)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._latitude {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    if let v = self._longitude {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
    }
    if !self.floors.isEmpty {
      try visitor.visitRepeatedStringField(value: self.floors, fieldNumber: 6)
    }
    if !self.meetingRooms.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.meetingRooms, fieldNumber: 7)
    }
    if let v = self._isDeleted {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._weight {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
    }
    if let v = self._seizeTime {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarBuilding, rhs: LarkNCExtensionPB_Entities_CalendarBuilding) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._latitude != rhs._latitude {return false}
    if lhs._longitude != rhs._longitude {return false}
    if lhs.floors != rhs.floors {return false}
    if lhs.meetingRooms != rhs.meetingRooms {return false}
    if lhs._isDeleted != rhs._isDeleted {return false}
    if lhs._weight != rhs._weight {return false}
    if lhs._seizeTime != rhs._seizeTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_CalendarBuildingExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarBuildingExtra"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "description"),
//    2: .same(proto: "latitude"),
//    3: .same(proto: "longitude"),
//    4: .same(proto: "floors"),
//    5: .same(proto: "location"),
//    6: .same(proto: "timezone"),
//    7: .standard(proto: "seize_time"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._description_p)
//      case 2: try decoder.decodeSingularFloatField(value: &self._latitude)
//      case 3: try decoder.decodeSingularFloatField(value: &self._longitude)
//      case 4: try decoder.decodeRepeatedStringField(value: &self.floors)
//      case 5: try decoder.decodeSingularStringField(value: &self._location)
//      case 6: try decoder.decodeSingularStringField(value: &self._timezone)
//      case 7: try decoder.decodeSingularInt64Field(value: &self._seizeTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._description_p {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._latitude {
//      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
//    }
//    if let v = self._longitude {
//      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
//    }
//    if !self.floors.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.floors, fieldNumber: 4)
//    }
//    if let v = self._location {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    if let v = self._timezone {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//    }
//    if let v = self._seizeTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarBuildingExtra, rhs: LarkNCExtensionPB_Entities_CalendarBuildingExtra) -> Bool {
//    if lhs._description_p != rhs._description_p {return false}
//    if lhs._latitude != rhs._latitude {return false}
//    if lhs._longitude != rhs._longitude {return false}
//    if lhs.floors != rhs.floors {return false}
//    if lhs._location != rhs._location {return false}
//    if lhs._timezone != rhs._timezone {return false}
//    if lhs._seizeTime != rhs._seizeTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SearchContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".SearchContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "name"),
//    3: .same(proto: "description"),
//    4: .standard(proto: "avatar_url"),
//    5: .standard(proto: "search_content_type"),
//    6: .standard(proto: "tenant_id"),
//    7: .standard(proto: "is_cross_tenant"),
//    8: .standard(proto: "is_meeting_group"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._id == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularStringField(value: &self._name)
//      case 3: try decoder.decodeSingularStringField(value: &self._description_p)
//      case 4: try decoder.decodeSingularStringField(value: &self._avatarURL)
//      case 5: try decoder.decodeSingularEnumField(value: &self._searchContentType)
//      case 6: try decoder.decodeSingularStringField(value: &self._tenantID)
//      case 7: try decoder.decodeSingularBoolField(value: &self._isCrossTenant)
//      case 8: try decoder.decodeSingularBoolField(value: &self._isMeetingGroup)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._name {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._description_p {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._avatarURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._searchContentType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
//    }
//    if let v = self._tenantID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//    }
//    if let v = self._isCrossTenant {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
//    }
//    if let v = self._isMeetingGroup {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SearchContent, rhs: LarkNCExtensionPB_Entities_SearchContent) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._name != rhs._name {return false}
//    if lhs._description_p != rhs._description_p {return false}
//    if lhs._avatarURL != rhs._avatarURL {return false}
//    if lhs._searchContentType != rhs._searchContentType {return false}
//    if lhs._tenantID != rhs._tenantID {return false}
//    if lhs._isCrossTenant != rhs._isCrossTenant {return false}
//    if lhs._isMeetingGroup != rhs._isMeetingGroup {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SearchContent.SearchContentType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "CHATTER"),
//    2: .same(proto: "GROUP"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_GroupMemberContact: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".GroupMemberContact"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "calendar_id"),
//    2: .standard(proto: "avatar_url"),
//    3: .same(proto: "name"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._calendarID == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._calendarID)
//      case 2: try decoder.decodeSingularStringField(value: &self._avatarURL)
//      case 3: try decoder.decodeSingularStringField(value: &self._name)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._calendarID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._avatarURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._name {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_GroupMemberContact, rhs: LarkNCExtensionPB_Entities_GroupMemberContact) -> Bool {
//    if lhs._calendarID != rhs._calendarID {return false}
//    if lhs._avatarURL != rhs._avatarURL {return false}
//    if lhs._name != rhs._name {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_GroupMembersContact: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".GroupMembersContact"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "group_members_contact"),
//  ]
//
//  public var isInitialized: Bool {
//    if !LarkHTTP.Internal.areAllInitialized(self.groupMembersContact) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.groupMembersContact)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.groupMembersContact.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.groupMembersContact, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_GroupMembersContact, rhs: LarkNCExtensionPB_Entities_GroupMembersContact) -> Bool {
//    if lhs.groupMembersContact != rhs.groupMembersContact {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MultiCalendarSearchContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MultiCalendarSearchContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "calendar_id"),
//    2: .same(proto: "type"),
//    3: .same(proto: "title"),
//    4: .same(proto: "subtitle"),
//    5: .standard(proto: "avatar_url"),
//    6: .standard(proto: "is_private"),
//    7: .standard(proto: "is_member"),
//    8: .standard(proto: "is_disabled"),
//    9: .standard(proto: "is_dismiss"),
//    10: .standard(proto: "is_cross_tenant"),
//    11: .standard(proto: "calendar_tenant_id"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._calendarID == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._calendarID)
//      case 2: try decoder.decodeSingularEnumField(value: &self._type)
//      case 3: try decoder.decodeSingularStringField(value: &self._title)
//      case 4: try decoder.decodeSingularStringField(value: &self._subtitle)
//      case 5: try decoder.decodeSingularStringField(value: &self._avatarURL)
//      case 6: try decoder.decodeSingularBoolField(value: &self._isPrivate)
//      case 7: try decoder.decodeSingularBoolField(value: &self._isMember)
//      case 8: try decoder.decodeSingularBoolField(value: &self._isDisabled)
//      case 9: try decoder.decodeSingularBoolField(value: &self._isDismiss)
//      case 10: try decoder.decodeSingularBoolField(value: &self._isCrossTenant)
//      case 11: try decoder.decodeSingularStringField(value: &self._calendarTenantID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._calendarID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    if let v = self._title {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._subtitle {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._avatarURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    if let v = self._isPrivate {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//    }
//    if let v = self._isMember {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
//    }
//    if let v = self._isDisabled {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
//    }
//    if let v = self._isDismiss {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
//    }
//    if let v = self._isCrossTenant {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
//    }
//    if let v = self._calendarTenantID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MultiCalendarSearchContent, rhs: LarkNCExtensionPB_Entities_MultiCalendarSearchContent) -> Bool {
//    if lhs._calendarID != rhs._calendarID {return false}
//    if lhs._type != rhs._type {return false}
//    if lhs._title != rhs._title {return false}
//    if lhs._subtitle != rhs._subtitle {return false}
//    if lhs._avatarURL != rhs._avatarURL {return false}
//    if lhs._isPrivate != rhs._isPrivate {return false}
//    if lhs._isMember != rhs._isMember {return false}
//    if lhs._isDisabled != rhs._isDisabled {return false}
//    if lhs._isDismiss != rhs._isDismiss {return false}
//    if lhs._isCrossTenant != rhs._isCrossTenant {return false}
//    if lhs._calendarTenantID != rhs._calendarTenantID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MultiCalendarSearchContent.MultiCalendarSearchContentType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "CHATTER"),
//    2: .same(proto: "MEETING_ROOM"),
//    3: .same(proto: "SHARED_CALENDAR"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_MeetingSubscriptionInformation: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MeetingSubscriptionInformation"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "is_public"),
//    2: .same(proto: "summary"),
//    3: .standard(proto: "event_creator"),
//    4: .same(proto: "instance"),
//    5: .standard(proto: "is_all_day"),
//    6: .standard(proto: "original_event_creator"),
//    7: .standard(proto: "event_organizer"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _isPublic: Bool? = nil
//    var _summary: String? = nil
//    var _eventCreator: LarkNCExtensionPB_Entities_EventCreator? = nil
//    var _instance: LarkNCExtensionPB_Entities_CalendarEventInstance? = nil
//    var _isAllDay: Bool? = nil
//    var _originalEventCreator: LarkNCExtensionPB_Entities_EventCreator? = nil
//    var _eventOrganizer: LarkNCExtensionPB_Entities_EventCreator? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _isPublic = source._isPublic
//      _summary = source._summary
//      _eventCreator = source._eventCreator
//      _instance = source._instance
//      _isAllDay = source._isAllDay
//      _originalEventCreator = source._originalEventCreator
//      _eventOrganizer = source._eventOrganizer
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._instance, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularBoolField(value: &_storage._isPublic)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._summary)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._eventCreator)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._instance)
//        case 5: try decoder.decodeSingularBoolField(value: &_storage._isAllDay)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._originalEventCreator)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._eventOrganizer)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._isPublic {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._summary {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._eventCreator {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._instance {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._isAllDay {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._originalEventCreator {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._eventOrganizer {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MeetingSubscriptionInformation, rhs: LarkNCExtensionPB_Entities_MeetingSubscriptionInformation) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._isPublic != rhs_storage._isPublic {return false}
//        if _storage._summary != rhs_storage._summary {return false}
//        if _storage._eventCreator != rhs_storage._eventCreator {return false}
//        if _storage._instance != rhs_storage._instance {return false}
//        if _storage._isAllDay != rhs_storage._isAllDay {return false}
//        if _storage._originalEventCreator != rhs_storage._originalEventCreator {return false}
//        if _storage._eventOrganizer != rhs_storage._eventOrganizer {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_EventCreator: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".EventCreator"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "creator_type"),
//    2: .standard(proto: "chatter_id"),
//    3: .standard(proto: "creator_name"),
//    4: .same(proto: "department"),
//    5: .standard(proto: "avatar_url"),
//    6: .standard(proto: "dismissed_creator_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._creatorType)
//      case 2: try decoder.decodeSingularStringField(value: &self._chatterID)
//      case 3: try decoder.decodeSingularStringField(value: &self._creatorName)
//      case 4: try decoder.decodeSingularStringField(value: &self._department)
//      case 5: try decoder.decodeSingularStringField(value: &self._avatarURL)
//      case 6: try decoder.decodeSingularInt64Field(value: &self._dismissedCreatorID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._creatorType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._chatterID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._creatorName {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._department {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._avatarURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    if let v = self._dismissedCreatorID {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_EventCreator, rhs: LarkNCExtensionPB_Entities_EventCreator) -> Bool {
//    if lhs._creatorType != rhs._creatorType {return false}
//    if lhs._chatterID != rhs._chatterID {return false}
//    if lhs._creatorName != rhs._creatorName {return false}
//    if lhs._department != rhs._department {return false}
//    if lhs._avatarURL != rhs._avatarURL {return false}
//    if lhs._dismissedCreatorID != rhs._dismissedCreatorID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_EventCreator.EventCreatorType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "CHATTER"),
//    2: .same(proto: "GOOGLE"),
//    3: .same(proto: "CHATTER_BOT"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_TenantAllStuffCalendarRefExtra: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TenantAllStuffCalendarRefExtra"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TenantAllStuffCalendarRefExtra, rhs: LarkNCExtensionPB_Entities_TenantAllStuffCalendarRefExtra) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Tenant: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Tenant"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "name"),
//    3: .standard(proto: "contact_name"),
//    4: .standard(proto: "contact_mobile"),
//    5: .standard(proto: "contact_email"),
//    6: .same(proto: "address"),
//    7: .same(proto: "domain"),
//    8: .standard(proto: "post_code"),
//    9: .same(proto: "remark"),
//    10: .same(proto: "telephone"),
//    11: .standard(proto: "icon_url"),
//    12: .same(proto: "avatar"),
//    13: .standard(proto: "unit_league"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _name: String? = nil
//    var _contactName: String? = nil
//    var _contactMobile: String? = nil
//    var _contactEmail: String? = nil
//    var _address: String? = nil
//    var _domain: String? = nil
//    var _postCode: String? = nil
//    var _remark: String? = nil
//    var _telephone: String? = nil
//    var _iconURL: String? = nil
//    var _avatar: LarkNCExtensionPB_Entities_Image? = nil
//    var _unitLeague: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _name = source._name
//      _contactName = source._contactName
//      _contactMobile = source._contactMobile
//      _contactEmail = source._contactEmail
//      _address = source._address
//      _domain = source._domain
//      _postCode = source._postCode
//      _remark = source._remark
//      _telephone = source._telephone
//      _iconURL = source._iconURL
//      _avatar = source._avatar
//      _unitLeague = source._unitLeague
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._id == nil {return false}
//      if _storage._name == nil {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._contactName)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._contactMobile)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._contactEmail)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._address)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._domain)
//        case 8: try decoder.decodeSingularStringField(value: &_storage._postCode)
//        case 9: try decoder.decodeSingularStringField(value: &_storage._remark)
//        case 10: try decoder.decodeSingularStringField(value: &_storage._telephone)
//        case 11: try decoder.decodeSingularStringField(value: &_storage._iconURL)
//        case 12: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 13: try decoder.decodeSingularStringField(value: &_storage._unitLeague)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._contactName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._contactMobile {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._contactEmail {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._address {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._domain {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._postCode {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._remark {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._telephone {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._iconURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._unitLeague {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Tenant, rhs: LarkNCExtensionPB_Entities_Tenant) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._contactName != rhs_storage._contactName {return false}
//        if _storage._contactMobile != rhs_storage._contactMobile {return false}
//        if _storage._contactEmail != rhs_storage._contactEmail {return false}
//        if _storage._address != rhs_storage._address {return false}
//        if _storage._domain != rhs_storage._domain {return false}
//        if _storage._postCode != rhs_storage._postCode {return false}
//        if _storage._remark != rhs_storage._remark {return false}
//        if _storage._telephone != rhs_storage._telephone {return false}
//        if _storage._iconURL != rhs_storage._iconURL {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._unitLeague != rhs_storage._unitLeague {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_StartEndTime: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".StartEndTime"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "start_time"),
//    2: .standard(proto: "end_time"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._startTime == nil {return false}
//    if self._endTime == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._startTime)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._endTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._startTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._endTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_StartEndTime, rhs: LarkNCExtensionPB_Entities_StartEndTime) -> Bool {
//    if lhs._startTime != rhs._startTime {return false}
//    if lhs._endTime != rhs._endTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarInstanceSet: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarInstanceSet"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "calendar_event_instances"),
//    2: .same(proto: "events"),
//    3: .standard(proto: "event_creators"),
//    4: .standard(proto: "original_event_creators"),
//  ]
//
//  public var isInitialized: Bool {
//    if !LarkHTTP.Internal.areAllInitialized(self.calendarEventInstances) {return false}
//    if !LarkHTTP.Internal.areAllInitialized(self.events) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.calendarEventInstances)
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_CalendarEvent>.self, value: &self.events)
//      case 3: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_EventCreator>.self, value: &self.eventCreators)
//      case 4: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_EventCreator>.self, value: &self.originalEventCreators)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.calendarEventInstances.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.calendarEventInstances, fieldNumber: 1)
//    }
//    if !self.events.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_CalendarEvent>.self, value: self.events, fieldNumber: 2)
//    }
//    if !self.eventCreators.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_EventCreator>.self, value: self.eventCreators, fieldNumber: 3)
//    }
//    if !self.originalEventCreators.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_EventCreator>.self, value: self.originalEventCreators, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarInstanceSet, rhs: LarkNCExtensionPB_Entities_CalendarInstanceSet) -> Bool {
//    if lhs.calendarEventInstances != rhs.calendarEventInstances {return false}
//    if lhs.events != rhs.events {return false}
//    if lhs.eventCreators != rhs.eventCreators {return false}
//    if lhs.originalEventCreators != rhs.originalEventCreators {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UserName: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UserName"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "name"),
//    2: .standard(proto: "name_py"),
//    3: .standard(proto: "international_name"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._name == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._name)
//      case 2: try decoder.decodeSingularStringField(value: &self._namePy)
//      case 3: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.internationalName)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._name {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._namePy {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if !self.internationalName.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.internationalName, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserName, rhs: LarkNCExtensionPB_Entities_UserName) -> Bool {
//    if lhs._name != rhs._name {return false}
//    if lhs._namePy != rhs._namePy {return false}
//    if lhs.internationalName != rhs.internationalName {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_EventIdVersionPair: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".EventIdVersionPair"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "calendar_event_id"),
//    2: .same(proto: "version"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._calendarEventID == nil {return false}
//    if self._version == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._calendarEventID)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._version)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._calendarEventID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._version {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_EventIdVersionPair, rhs: LarkNCExtensionPB_Entities_EventIdVersionPair) -> Bool {
//    if lhs._calendarEventID != rhs._calendarEventID {return false}
//    if lhs._version != rhs._version {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CalendarEventVersionSet: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarEventVersionSet"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "event_version_set"),
//    2: .standard(proto: "time_pair"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _eventVersionSet: [LarkNCExtensionPB_Entities_EventIdVersionPair] = []
//    var _timePair: LarkNCExtensionPB_Entities_StartEndTime? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _eventVersionSet = source._eventVersionSet
//      _timePair = source._timePair
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._timePair == nil {return false}
//      if !LarkHTTP.Internal.areAllInitialized(_storage._eventVersionSet) {return false}
//      if let v = _storage._timePair, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._eventVersionSet)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._timePair)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if !_storage._eventVersionSet.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._eventVersionSet, fieldNumber: 1)
//      }
//      if let v = _storage._timePair {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarEventVersionSet, rhs: LarkNCExtensionPB_Entities_CalendarEventVersionSet) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._eventVersionSet != rhs_storage._eventVersionSet {return false}
//        if _storage._timePair != rhs_storage._timePair {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_WorkStatus: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".WorkStatus"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    7: .same(proto: "status"),
//    8: .standard(proto: "start_time"),
//    9: .standard(proto: "end_time"),
//    10: .standard(proto: "description_templates"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 7: try decoder.decodeSingularEnumField(value: &self._status)
//      case 8: try decoder.decodeSingularInt64Field(value: &self._startTime)
//      case 9: try decoder.decodeSingularInt64Field(value: &self._endTime)
//      case 10: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.descriptionTemplates)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._status {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
//    }
//    if let v = self._startTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 8)
//    }
//    if let v = self._endTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 9)
//    }
//    if !self.descriptionTemplates.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.descriptionTemplates, fieldNumber: 10)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_WorkStatus, rhs: LarkNCExtensionPB_Entities_WorkStatus) -> Bool {
//    if lhs._status != rhs._status {return false}
//    if lhs._startTime != rhs._startTime {return false}
//    if lhs._endTime != rhs._endTime {return false}
//    if lhs.descriptionTemplates != rhs.descriptionTemplates {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_WorkStatus.Status: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "ON_LEAVE"),
//    2: .same(proto: "ON_MEETING"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_CryptoChatInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CryptoChatInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "first_position"),
//    2: .standard(proto: "first_position_badge_count"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt32Field(value: &self._firstPosition)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._firstPositionBadgeCount)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._firstPosition {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._firstPositionBadgeCount {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CryptoChatInfo, rhs: LarkNCExtensionPB_Entities_CryptoChatInfo) -> Bool {
//    if lhs._firstPosition != rhs._firstPosition {return false}
//    if lhs._firstPositionBadgeCount != rhs._firstPositionBadgeCount {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AccountUser: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".AccountUser"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "chatter"),
//    2: .standard(proto: "icon_url"),
//    3: .same(proto: "description"),
//    4: .standard(proto: "tenant_code"),
//    5: .standard(proto: "user_env"),
//    6: .standard(proto: "tenant_tag"),
//    7: .same(proto: "avatar"),
//    8: .standard(proto: "account_security_config"),
//    9: .standard(proto: "tenant_single_products"),
//    10: .standard(proto: "is_idp"),
//    11: .standard(proto: "is_frozen"),
//    12: .standard(proto: "is_active"),
//    13: .standard(proto: "user_unit"),
//    14: .standard(proto: "user_brand"),
//    15: .standard(proto: "suite_full_domain"),
//    16: .standard(proto: "upgrade_enabled"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _chatter: LarkNCExtensionPB_Entities_Chatter? = nil
//    var _iconURL: String? = nil
//    var _description_p: String? = nil
//    var _tenantCode: String? = nil
//    var _userEnv: String? = nil
//    var _tenantTag: LarkNCExtensionPB_Entities_TenantTag? = nil
//    var _avatar: LarkNCExtensionPB_Entities_Image? = nil
//    var _accountSecurityConfig: LarkNCExtensionPB_Entities_AccountSecurityConfig? = nil
//    var _tenantSingleProducts: [LarkNCExtensionPB_Entities_TenantSingleProduct] = []
//    var _isIdp: Bool? = nil
//    var _isFrozen: Bool? = nil
//    var _isActive: Bool? = nil
//    var _userUnit: String? = nil
//    var _userBrand: String? = nil
//    var _suiteFullDomain: String? = nil
//    var _upgradeEnabled: Bool? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _chatter = source._chatter
//      _iconURL = source._iconURL
//      _description_p = source._description_p
//      _tenantCode = source._tenantCode
//      _userEnv = source._userEnv
//      _tenantTag = source._tenantTag
//      _avatar = source._avatar
//      _accountSecurityConfig = source._accountSecurityConfig
//      _tenantSingleProducts = source._tenantSingleProducts
//      _isIdp = source._isIdp
//      _isFrozen = source._isFrozen
//      _isActive = source._isActive
//      _userUnit = source._userUnit
//      _userBrand = source._userBrand
//      _suiteFullDomain = source._suiteFullDomain
//      _upgradeEnabled = source._upgradeEnabled
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._chatter, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._chatter)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._iconURL)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._tenantCode)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._userEnv)
//        case 6: try decoder.decodeSingularEnumField(value: &_storage._tenantTag)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 8: try decoder.decodeSingularMessageField(value: &_storage._accountSecurityConfig)
//        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._tenantSingleProducts)
//        case 10: try decoder.decodeSingularBoolField(value: &_storage._isIdp)
//        case 11: try decoder.decodeSingularBoolField(value: &_storage._isFrozen)
//        case 12: try decoder.decodeSingularBoolField(value: &_storage._isActive)
//        case 13: try decoder.decodeSingularStringField(value: &_storage._userUnit)
//        case 14: try decoder.decodeSingularStringField(value: &_storage._userBrand)
//        case 15: try decoder.decodeSingularStringField(value: &_storage._suiteFullDomain)
//        case 16: try decoder.decodeSingularBoolField(value: &_storage._upgradeEnabled)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._chatter {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._iconURL {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._description_p {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._tenantCode {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._userEnv {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._tenantTag {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._accountSecurityConfig {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
//      }
//      if !_storage._tenantSingleProducts.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._tenantSingleProducts, fieldNumber: 9)
//      }
//      if let v = _storage._isIdp {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._isFrozen {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._isActive {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._userUnit {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
//      }
//      if let v = _storage._userBrand {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
//      }
//      if let v = _storage._suiteFullDomain {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
//      }
//      if let v = _storage._upgradeEnabled {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AccountUser, rhs: LarkNCExtensionPB_Entities_AccountUser) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._chatter != rhs_storage._chatter {return false}
//        if _storage._iconURL != rhs_storage._iconURL {return false}
//        if _storage._description_p != rhs_storage._description_p {return false}
//        if _storage._tenantCode != rhs_storage._tenantCode {return false}
//        if _storage._userEnv != rhs_storage._userEnv {return false}
//        if _storage._tenantTag != rhs_storage._tenantTag {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._accountSecurityConfig != rhs_storage._accountSecurityConfig {return false}
//        if _storage._tenantSingleProducts != rhs_storage._tenantSingleProducts {return false}
//        if _storage._isIdp != rhs_storage._isIdp {return false}
//        if _storage._isFrozen != rhs_storage._isFrozen {return false}
//        if _storage._isActive != rhs_storage._isActive {return false}
//        if _storage._userUnit != rhs_storage._userUnit {return false}
//        if _storage._userBrand != rhs_storage._userBrand {return false}
//        if _storage._suiteFullDomain != rhs_storage._suiteFullDomain {return false}
//        if _storage._upgradeEnabled != rhs_storage._upgradeEnabled {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AccountSecurityConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".AccountSecurityConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "module_modify_pwd"),
//    2: .standard(proto: "module_account_management"),
//    3: .standard(proto: "module_security_verification"),
//    4: .standard(proto: "module_device_management"),
//    5: .standard(proto: "module_2fa"),
//    6: .standard(proto: "module_bio_auth"),
//    7: .standard(proto: "module_bio_auth_login"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _moduleModifyPwd: LarkNCExtensionPB_Entities_ModuleSwitchConfig? = nil
//    var _moduleAccountManagement: LarkNCExtensionPB_Entities_ModuleSwitchConfig? = nil
//    var _moduleSecurityVerification: LarkNCExtensionPB_Entities_ModuleSwitchConfig? = nil
//    var _moduleDeviceManagement: LarkNCExtensionPB_Entities_ModuleSwitchConfig? = nil
//    var _module2Fa: LarkNCExtensionPB_Entities_ModuleSwitchConfig? = nil
//    var _moduleBioAuth: LarkNCExtensionPB_Entities_ModuleSwitchConfig? = nil
//    var _moduleBioAuthLogin: LarkNCExtensionPB_Entities_ModuleSwitchConfig? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _moduleModifyPwd = source._moduleModifyPwd
//      _moduleAccountManagement = source._moduleAccountManagement
//      _moduleSecurityVerification = source._moduleSecurityVerification
//      _moduleDeviceManagement = source._moduleDeviceManagement
//      _module2Fa = source._module2Fa
//      _moduleBioAuth = source._moduleBioAuth
//      _moduleBioAuthLogin = source._moduleBioAuthLogin
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._moduleModifyPwd)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._moduleAccountManagement)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._moduleSecurityVerification)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._moduleDeviceManagement)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._module2Fa)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._moduleBioAuth)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._moduleBioAuthLogin)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._moduleModifyPwd {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._moduleAccountManagement {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._moduleSecurityVerification {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._moduleDeviceManagement {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._module2Fa {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._moduleBioAuth {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._moduleBioAuthLogin {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AccountSecurityConfig, rhs: LarkNCExtensionPB_Entities_AccountSecurityConfig) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._moduleModifyPwd != rhs_storage._moduleModifyPwd {return false}
//        if _storage._moduleAccountManagement != rhs_storage._moduleAccountManagement {return false}
//        if _storage._moduleSecurityVerification != rhs_storage._moduleSecurityVerification {return false}
//        if _storage._moduleDeviceManagement != rhs_storage._moduleDeviceManagement {return false}
//        if _storage._module2Fa != rhs_storage._module2Fa {return false}
//        if _storage._moduleBioAuth != rhs_storage._moduleBioAuth {return false}
//        if _storage._moduleBioAuthLogin != rhs_storage._moduleBioAuthLogin {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ModuleSwitchConfig: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ModuleSwitchConfig"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "switch_status"),
//    2: .standard(proto: "module_info"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt32Field(value: &self._switchStatus)
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.moduleInfo)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._switchStatus {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//    }
//    if !self.moduleInfo.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.moduleInfo, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ModuleSwitchConfig, rhs: LarkNCExtensionPB_Entities_ModuleSwitchConfig) -> Bool {
//    if lhs._switchStatus != rhs._switchStatus {return false}
//    if lhs.moduleInfo != rhs.moduleInfo {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_FeedCard: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".FeedCard"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "type"),
//    3: .standard(proto: "update_time"),
//    9: .standard(proto: "update_time_ms"),
//    4: .standard(proto: "is_delayed"),
//    5: .standard(proto: "parent_card_id"),
//    6: .standard(proto: "rank_time"),
//    7: .standard(proto: "feed_type"),
//    10: .same(proto: "status"),
//    8: .standard(proto: "impr_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularEnumField(value: &self._type)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._updateTime)
//      case 4: try decoder.decodeSingularBoolField(value: &self._isDelayed)
//      case 5: try decoder.decodeSingularInt64Field(value: &self._parentCardID)
//      case 6: try decoder.decodeSingularInt64Field(value: &self._rankTime)
//      case 7: try decoder.decodeSingularEnumField(value: &self._feedType)
//      case 8: try decoder.decodeSingularStringField(value: &self._imprID)
//      case 9: try decoder.decodeSingularInt64Field(value: &self._updateTimeMs)
//      case 10: try decoder.decodeSingularEnumField(value: &self._status)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    if let v = self._updateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._isDelayed {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//    }
//    if let v = self._parentCardID {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
//    }
//    if let v = self._rankTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
//    }
//    if let v = self._feedType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
//    }
//    if let v = self._imprID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//    }
//    if let v = self._updateTimeMs {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 9)
//    }
//    if let v = self._status {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 10)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_FeedCard, rhs: LarkNCExtensionPB_Entities_FeedCard) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._type != rhs._type {return false}
//    if lhs._updateTime != rhs._updateTime {return false}
//    if lhs._updateTimeMs != rhs._updateTimeMs {return false}
//    if lhs._isDelayed != rhs._isDelayed {return false}
//    if lhs._parentCardID != rhs._parentCardID {return false}
//    if lhs._rankTime != rhs._rankTime {return false}
//    if lhs._feedType != rhs._feedType {return false}
//    if lhs._status != rhs._status {return false}
//    if lhs._imprID != rhs._imprID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_FeedCard.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_TYPE"),
//    1: .same(proto: "CHAT"),
//    2: .same(proto: "MAIL"),
//    3: .same(proto: "DOC"),
//    4: .same(proto: "THREAD"),
//    5: .same(proto: "BOX"),
//    6: .same(proto: "OPENAPP"),
//    7: .same(proto: "TOPIC"),
//    8: .same(proto: "APP_CHAT"),
//    10: .same(proto: "SUBSCRIPTION"),
//    11: .same(proto: "MSG_THREAD"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_FeedCard.Status: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_STATUS"),
//    1: .same(proto: "NORMAL"),
//    2: .same(proto: "PENDING_DELETE"),
//    3: .same(proto: "DELETED"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_FeedCardIdentity: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".FeedCardIdentity"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "type"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularEnumField(value: &self._type)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_FeedCardIdentity, rhs: LarkNCExtensionPB_Entities_FeedCardIdentity) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._type != rhs._type {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UserFeedCardIdentity: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UserFeedCardIdentity"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "user_id"),
//    2: .standard(proto: "card_id"),
//    3: .standard(proto: "card_type"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._userID)
//      case 2: try decoder.decodeSingularStringField(value: &self._cardID)
//      case 3: try decoder.decodeSingularEnumField(value: &self._cardType)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._userID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._cardID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._cardType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserFeedCardIdentity, rhs: LarkNCExtensionPB_Entities_UserFeedCardIdentity) -> Bool {
//    if lhs._userID != rhs._userID {return false}
//    if lhs._cardID != rhs._cardID {return false}
//    if lhs._cardType != rhs._cardType {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_InvisibleMessage: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".InvisibleMessage"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .standard(proto: "create_time"),
//    3: .same(proto: "position"),
//    4: .standard(proto: "thread_id"),
//    5: .standard(proto: "thread_position"),
//    6: .standard(proto: "from_id"),
//    7: .standard(proto: "from_type"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._createTime)
//      case 3: try decoder.decodeSingularInt32Field(value: &self._position)
//      case 4: try decoder.decodeSingularStringField(value: &self._threadID)
//      case 5: try decoder.decodeSingularInt32Field(value: &self._threadPosition)
//      case 6: try decoder.decodeSingularStringField(value: &self._fromID)
//      case 7: try decoder.decodeSingularEnumField(value: &self._fromType)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._createTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._position {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._threadID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._threadPosition {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
//    }
//    if let v = self._fromID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//    }
//    if let v = self._fromType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_InvisibleMessage, rhs: LarkNCExtensionPB_Entities_InvisibleMessage) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._createTime != rhs._createTime {return false}
//    if lhs._position != rhs._position {return false}
//    if lhs._threadID != rhs._threadID {return false}
//    if lhs._threadPosition != rhs._threadPosition {return false}
//    if lhs._fromID != rhs._fromID {return false}
//    if lhs._fromType != rhs._fromType {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_InvisibleThread: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".InvisibleThread"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "owner_id"),
//    2: .standard(proto: "thread_id"),
//    3: .standard(proto: "update_time"),
//    4: .same(proto: "position"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._ownerID)
//      case 2: try decoder.decodeSingularStringField(value: &self._threadID)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._updateTime)
//      case 4: try decoder.decodeSingularInt32Field(value: &self._position)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._ownerID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._threadID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._updateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._position {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_InvisibleThread, rhs: LarkNCExtensionPB_Entities_InvisibleThread) -> Bool {
//    if lhs._ownerID != rhs._ownerID {return false}
//    if lhs._threadID != rhs._threadID {return false}
//    if lhs._updateTime != rhs._updateTime {return false}
//    if lhs._position != rhs._position {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_WayToAddFriendSettingItem: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".WayToAddFriendSettingItem"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .same(proto: "enable"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._type)
//      case 2: try decoder.decodeSingularBoolField(value: &self._enable)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._enable {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_WayToAddFriendSettingItem, rhs: LarkNCExtensionPB_Entities_WayToAddFriendSettingItem) -> Bool {
//    if lhs._type != rhs._type {return false}
//    if lhs._enable != rhs._enable {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_WayToAddFriendSettingItem.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_TYPE"),
//    1: .same(proto: "CHAT"),
//    2: .same(proto: "CONTACT_TOKEN"),
//    3: .same(proto: "PROFILE"),
//    4: .same(proto: "DOCS"),
//    5: .same(proto: "CALENDAR"),
//    6: .same(proto: "VIDEO_CONFERENCE"),
//    7: .same(proto: "EMAIL"),
//    8: .same(proto: "NAME_CARD"),
//    9: .same(proto: "MINUTES"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_WayToAddFriendSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".WayToAddFriendSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "chat_setting"),
//    2: .standard(proto: "contact_token_setting"),
//    3: .standard(proto: "way_to_add_items"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._chatSetting)
//      case 2: try decoder.decodeSingularBoolField(value: &self._contactTokenSetting)
//      case 3: try decoder.decodeRepeatedMessageField(value: &self.wayToAddItems)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._chatSetting {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._contactTokenSetting {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    if !self.wayToAddItems.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.wayToAddItems, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_WayToAddFriendSetting, rhs: LarkNCExtensionPB_Entities_WayToAddFriendSetting) -> Bool {
//    if lhs._chatSetting != rhs._chatSetting {return false}
//    if lhs._contactTokenSetting != rhs._contactTokenSetting {return false}
//    if lhs.wayToAddItems != rhs.wayToAddItems {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_WayToFindMeSettingItem: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".WayToFindMeSettingItem"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .same(proto: "id"),
//    3: .standard(proto: "displayed_contact"),
//    4: .same(proto: "enable"),
//    5: .standard(proto: "has_verified"),
//    6: .standard(proto: "need_cp_verify"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._type)
//      case 2: try decoder.decodeSingularStringField(value: &self._id)
//      case 3: try decoder.decodeSingularStringField(value: &self._displayedContact)
//      case 4: try decoder.decodeSingularBoolField(value: &self._enable)
//      case 5: try decoder.decodeSingularBoolField(value: &self._hasVerified_p)
//      case 6: try decoder.decodeSingularBoolField(value: &self._needCpVerify)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._displayedContact {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._enable {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//    }
//    if let v = self._hasVerified_p {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//    }
//    if let v = self._needCpVerify {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_WayToFindMeSettingItem, rhs: LarkNCExtensionPB_Entities_WayToFindMeSettingItem) -> Bool {
//    if lhs._type != rhs._type {return false}
//    if lhs._id != rhs._id {return false}
//    if lhs._displayedContact != rhs._displayedContact {return false}
//    if lhs._enable != rhs._enable {return false}
//    if lhs._hasVerified_p != rhs._hasVerified_p {return false}
//    if lhs._needCpVerify != rhs._needCpVerify {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_WayToFindMeSettingItem.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "MOBILE"),
//    2: .same(proto: "EMAIL"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_InstanceImportanceScore: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".InstanceImportanceScore"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "calendar_event_id"),
//    2: .standard(proto: "instance_start_time"),
//    3: .same(proto: "score"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._calendarEventID == nil {return false}
//    if self._instanceStartTime == nil {return false}
//    if self._score == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._calendarEventID)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._instanceStartTime)
//      case 3: try decoder.decodeSingularInt32Field(value: &self._score)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._calendarEventID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._instanceStartTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._score {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_InstanceImportanceScore, rhs: LarkNCExtensionPB_Entities_InstanceImportanceScore) -> Bool {
//    if lhs._calendarEventID != rhs._calendarEventID {return false}
//    if lhs._instanceStartTime != rhs._instanceStartTime {return false}
//    if lhs._score != rhs._score {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_WordEntity: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".WordEntity"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "text"),
//    2: .standard(proto: "locale_identifier"),
//    3: .standard(proto: "update_time"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._text)
//      case 2: try decoder.decodeSingularStringField(value: &self._localeIdentifier)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._updateTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._text {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._localeIdentifier {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._updateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_WordEntity, rhs: LarkNCExtensionPB_Entities_WordEntity) -> Bool {
//    if lhs._text != rhs._text {return false}
//    if lhs._localeIdentifier != rhs._localeIdentifier {return false}
//    if lhs._updateTime != rhs._updateTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SystemMessageAction: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".SystemMessageAction"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .same(proto: "payload"),
//    4: .same(proto: "cmd"),
//    5: .same(proto: "url"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _type: Int32? = nil
//    var _payload: Data? = nil
//    var _cmd: LarkNCExtensionPB_Improto_Command? = nil
//    var _url: LarkNCExtensionPB_Entities_SystemMessageAction.Url? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _type = source._type
//      _payload = source._payload
//      _cmd = source._cmd
//      _url = source._url
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._url, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt32Field(value: &_storage._type)
//        case 2: try decoder.decodeSingularBytesField(value: &_storage._payload)
//        case 4: try decoder.decodeSingularEnumField(value: &_storage._cmd)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._url)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._type {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._payload {
//        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._cmd {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._url {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemMessageAction, rhs: LarkNCExtensionPB_Entities_SystemMessageAction) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._type != rhs_storage._type {return false}
//        if _storage._payload != rhs_storage._payload {return false}
//        if _storage._cmd != rhs_storage._cmd {return false}
//        if _storage._url != rhs_storage._url {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SystemMessageAction.ActType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_ACT_TYPE"),
//    1: .same(proto: "INVITE_AT_CHATTERS"),
//    2: .same(proto: "URL"),
//    3: .same(proto: "LARK_COMMAND"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_SystemMessageAction.InviteAtChatters: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_SystemMessageAction.protoMessageName + ".InviteAtChatters"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "at_chatter_ids"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedInt64Field(value: &self.atChatterIds)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.atChatterIds.isEmpty {
//      try visitor.visitRepeatedInt64Field(value: self.atChatterIds, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemMessageAction.InviteAtChatters, rhs: LarkNCExtensionPB_Entities_SystemMessageAction.InviteAtChatters) -> Bool {
//    if lhs.atChatterIds != rhs.atChatterIds {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SystemMessageAction.Url: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_SystemMessageAction.protoMessageName + ".Url"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "ios"),
//    2: .same(proto: "android"),
//    3: .same(proto: "pc"),
//    4: .same(proto: "web"),
//    100: .same(proto: "common"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._common == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._ios)
//      case 2: try decoder.decodeSingularStringField(value: &self._android)
//      case 3: try decoder.decodeSingularStringField(value: &self._pc)
//      case 4: try decoder.decodeSingularStringField(value: &self._web)
//      case 100: try decoder.decodeSingularStringField(value: &self._common)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._ios {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._android {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._pc {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._web {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._common {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 100)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemMessageAction.Url, rhs: LarkNCExtensionPB_Entities_SystemMessageAction.Url) -> Bool {
//    if lhs._ios != rhs._ios {return false}
//    if lhs._android != rhs._android {return false}
//    if lhs._pc != rhs._pc {return false}
//    if lhs._web != rhs._web {return false}
//    if lhs._common != rhs._common {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SystemMessageItemAction: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".SystemMessageItemAction"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "invite_at_chatters"),
//    2: .standard(proto: "action_link"),
//    3: .standard(proto: "lark_command"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _action: LarkNCExtensionPB_Entities_SystemMessageItemAction.OneOf_Action?
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _action = source._action
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1:
//          var v: LarkNCExtensionPB_Entities_SystemMessageItemAction.InviteAtChatters?
//          if let current = _storage._action {
//            try decoder.handleConflictingOneOf()
//            if case .inviteAtChatters(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._action = .inviteAtChatters(v)}
//        case 2:
//          var v: LarkNCExtensionPB_Entities_SystemMessageItemAction.ActionLink?
//          if let current = _storage._action {
//            try decoder.handleConflictingOneOf()
//            if case .actionLink(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._action = .actionLink(v)}
//        case 3:
//          var v: LarkNCExtensionPB_Entities_SystemMessageItemAction.LarkCommand?
//          if let current = _storage._action {
//            try decoder.handleConflictingOneOf()
//            if case .larkCommand(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._action = .larkCommand(v)}
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      switch _storage._action {
//      case .inviteAtChatters(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      case .actionLink(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      case .larkCommand(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      case nil: break
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemMessageItemAction, rhs: LarkNCExtensionPB_Entities_SystemMessageItemAction) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._action != rhs_storage._action {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SystemMessageItemAction.InviteAtChatters: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_SystemMessageItemAction.protoMessageName + ".InviteAtChatters"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "at_chatter_ids"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedInt64Field(value: &self.atChatterIds)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.atChatterIds.isEmpty {
//      try visitor.visitRepeatedInt64Field(value: self.atChatterIds, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemMessageItemAction.InviteAtChatters, rhs: LarkNCExtensionPB_Entities_SystemMessageItemAction.InviteAtChatters) -> Bool {
//    if lhs.atChatterIds != rhs.atChatterIds {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SystemMessageItemAction.ActionLink: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_SystemMessageItemAction.protoMessageName + ".ActionLink"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "ios"),
//    2: .same(proto: "android"),
//    3: .same(proto: "pc"),
//    4: .same(proto: "web"),
//    5: .same(proto: "common"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._ios)
//      case 2: try decoder.decodeSingularStringField(value: &self._android)
//      case 3: try decoder.decodeSingularStringField(value: &self._pc)
//      case 4: try decoder.decodeSingularStringField(value: &self._web)
//      case 5: try decoder.decodeSingularStringField(value: &self._common)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._ios {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._android {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._pc {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._web {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._common {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemMessageItemAction.ActionLink, rhs: LarkNCExtensionPB_Entities_SystemMessageItemAction.ActionLink) -> Bool {
//    if lhs._ios != rhs._ios {return false}
//    if lhs._android != rhs._android {return false}
//    if lhs._pc != rhs._pc {return false}
//    if lhs._web != rhs._web {return false}
//    if lhs._common != rhs._common {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SystemMessageItemAction.LarkCommand: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_SystemMessageItemAction.protoMessageName + ".LarkCommand"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    2: .same(proto: "payload"),
//    4: .same(proto: "cmd"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 2: try decoder.decodeSingularBytesField(value: &self._payload)
//      case 4: try decoder.decodeSingularEnumField(value: &self._cmd)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._payload {
//      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
//    }
//    if let v = self._cmd {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SystemMessageItemAction.LarkCommand, rhs: LarkNCExtensionPB_Entities_SystemMessageItemAction.LarkCommand) -> Bool {
//    if lhs._payload != rhs._payload {return false}
//    if lhs._cmd != rhs._cmd {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_FavorItem: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".FavorItem"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "chatter_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._chatterID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._chatterID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_FavorItem, rhs: LarkNCExtensionPB_Entities_FavorItem) -> Bool {
//    if lhs._chatterID != rhs._chatterID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_FavorChattersInChat: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".FavorChattersInChat"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "chat_id"),
//    2: .standard(proto: "ordered_favor_items"),
//    3: .standard(proto: "selected_favor_items"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._chatID)
//      case 2: try decoder.decodeRepeatedMessageField(value: &self.orderedFavorItems)
//      case 3: try decoder.decodeRepeatedMessageField(value: &self.selectedFavorItems)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._chatID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if !self.orderedFavorItems.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.orderedFavorItems, fieldNumber: 2)
//    }
//    if !self.selectedFavorItems.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.selectedFavorItems, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_FavorChattersInChat, rhs: LarkNCExtensionPB_Entities_FavorChattersInChat) -> Bool {
//    if lhs._chatID != rhs._chatID {return false}
//    if lhs.orderedFavorItems != rhs.orderedFavorItems {return false}
//    if lhs.selectedFavorItems != rhs.selectedFavorItems {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_PlatformInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".PlatformInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .same(proto: "minVersion"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._type == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._type)
//      case 2: try decoder.decodeSingularStringField(value: &self._minVersion)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._type {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._minVersion {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_PlatformInfo, rhs: LarkNCExtensionPB_Entities_PlatformInfo) -> Bool {
//    if lhs._type != rhs._type {return false}
//    if lhs._minVersion != rhs._minVersion {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AppInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".AppInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "ID"),
//    2: .same(proto: "key"),
//    3: .same(proto: "name"),
//    4: .same(proto: "logo"),
//    5: .same(proto: "appType"),
//    6: .same(proto: "platforms"),
//    7: .same(proto: "primaryOnly"),
//    8: .same(proto: "desc"),
//    9: .same(proto: "extra"),
//    10: .same(proto: "unmovable"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._id == nil {return false}
//    if self._key == nil {return false}
//    if self._appType == nil {return false}
//    if self._primaryOnly == nil {return false}
//    if !LarkHTTP.Internal.areAllInitialized(self.platforms) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularStringField(value: &self._key)
//      case 3: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.name)
//      case 4: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.logo)
//      case 5: try decoder.decodeSingularStringField(value: &self._appType)
//      case 6: try decoder.decodeRepeatedMessageField(value: &self.platforms)
//      case 7: try decoder.decodeSingularBoolField(value: &self._primaryOnly)
//      case 8: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.desc)
//      case 9: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.extra)
//      case 10: try decoder.decodeSingularBoolField(value: &self._unmovable)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._key {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if !self.name.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.name, fieldNumber: 3)
//    }
//    if !self.logo.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.logo, fieldNumber: 4)
//    }
//    if let v = self._appType {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    if !self.platforms.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.platforms, fieldNumber: 6)
//    }
//    if let v = self._primaryOnly {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
//    }
//    if !self.desc.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.desc, fieldNumber: 8)
//    }
//    if !self.extra.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.extra, fieldNumber: 9)
//    }
//    if let v = self._unmovable {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AppInfo, rhs: LarkNCExtensionPB_Entities_AppInfo) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._key != rhs._key {return false}
//    if lhs.name != rhs.name {return false}
//    if lhs.logo != rhs.logo {return false}
//    if lhs._appType != rhs._appType {return false}
//    if lhs.platforms != rhs.platforms {return false}
//    if lhs._primaryOnly != rhs._primaryOnly {return false}
//    if lhs.desc != rhs.desc {return false}
//    if lhs.extra != rhs.extra {return false}
//    if lhs._unmovable != rhs._unmovable {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_NavigationAppInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".NavigationAppInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "ID"),
//    2: .same(proto: "key"),
//    3: .same(proto: "appType"),
//    4: .same(proto: "name"),
//    5: .same(proto: "logo"),
//    6: .same(proto: "platforms"),
//    7: .same(proto: "extra"),
//    30: .standard(proto: "primary_only"),
//    31: .same(proto: "unmovable"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: Int64? = nil
//    var _key: String? = nil
//    var _appType: LarkNCExtensionPB_Entities_NavigationAppType? = nil
//    var _name: Dictionary<String,String> = [:]
//    var _logo: LarkNCExtensionPB_Entities_NavigationAppInfo.Logo? = nil
//    var _platforms: [LarkNCExtensionPB_Entities_NavigationAppInfo.PlatformInfo] = []
//    var _extra: Dictionary<String,String> = [:]
//    var _primaryOnly: Bool? = nil
//    var _unmovable: Bool? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _key = source._key
//      _appType = source._appType
//      _name = source._name
//      _logo = source._logo
//      _platforms = source._platforms
//      _extra = source._extra
//      _primaryOnly = source._primaryOnly
//      _unmovable = source._unmovable
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._id == nil {return false}
//      if _storage._key == nil {return false}
//      if _storage._appType == nil {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._key)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._appType)
//        case 4: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._name)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._logo)
//        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._platforms)
//        case 7: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._extra)
//        case 30: try decoder.decodeSingularBoolField(value: &_storage._primaryOnly)
//        case 31: try decoder.decodeSingularBoolField(value: &_storage._unmovable)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._key {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._appType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if !_storage._name.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._name, fieldNumber: 4)
//      }
//      if let v = _storage._logo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//      if !_storage._platforms.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._platforms, fieldNumber: 6)
//      }
//      if !_storage._extra.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._extra, fieldNumber: 7)
//      }
//      if let v = _storage._primaryOnly {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 30)
//      }
//      if let v = _storage._unmovable {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 31)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_NavigationAppInfo, rhs: LarkNCExtensionPB_Entities_NavigationAppInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._key != rhs_storage._key {return false}
//        if _storage._appType != rhs_storage._appType {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._logo != rhs_storage._logo {return false}
//        if _storage._platforms != rhs_storage._platforms {return false}
//        if _storage._extra != rhs_storage._extra {return false}
//        if _storage._primaryOnly != rhs_storage._primaryOnly {return false}
//        if _storage._unmovable != rhs_storage._unmovable {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_NavigationAppInfo.Platform: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "Unknown"),
//    1: .same(proto: "Mac"),
//    2: .same(proto: "Windows"),
//    3: .same(proto: "Android"),
//    4: .same(proto: "IPhone"),
//    5: .same(proto: "IPad"),
//    6: .same(proto: "Linux"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_NavigationAppInfo.Logo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_NavigationAppInfo.protoMessageName + ".Logo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "primary_default"),
//    2: .standard(proto: "primary_selected"),
//    3: .standard(proto: "shortcut_default"),
//    4: .standard(proto: "primary_default_svg"),
//    5: .standard(proto: "primary_color_png"),
//    6: .standard(proto: "pc_primary_color_svg"),
//    7: .standard(proto: "mobile_primary_default_png"),
//    8: .standard(proto: "mobile_primary_selected_png"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._primaryDefault)
//      case 2: try decoder.decodeSingularStringField(value: &self._primarySelected)
//      case 3: try decoder.decodeSingularStringField(value: &self._shortcutDefault)
//      case 4: try decoder.decodeSingularStringField(value: &self._primaryDefaultSvg)
//      case 5: try decoder.decodeSingularStringField(value: &self._primaryColorPng)
//      case 6: try decoder.decodeSingularStringField(value: &self._pcPrimaryColorSvg)
//      case 7: try decoder.decodeSingularStringField(value: &self._mobilePrimaryDefaultPng)
//      case 8: try decoder.decodeSingularStringField(value: &self._mobilePrimarySelectedPng)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._primaryDefault {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._primarySelected {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._shortcutDefault {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._primaryDefaultSvg {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._primaryColorPng {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    if let v = self._pcPrimaryColorSvg {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//    }
//    if let v = self._mobilePrimaryDefaultPng {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//    }
//    if let v = self._mobilePrimarySelectedPng {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_NavigationAppInfo.Logo, rhs: LarkNCExtensionPB_Entities_NavigationAppInfo.Logo) -> Bool {
//    if lhs._primaryDefault != rhs._primaryDefault {return false}
//    if lhs._primarySelected != rhs._primarySelected {return false}
//    if lhs._shortcutDefault != rhs._shortcutDefault {return false}
//    if lhs._primaryDefaultSvg != rhs._primaryDefaultSvg {return false}
//    if lhs._primaryColorPng != rhs._primaryColorPng {return false}
//    if lhs._pcPrimaryColorSvg != rhs._pcPrimaryColorSvg {return false}
//    if lhs._mobilePrimaryDefaultPng != rhs._mobilePrimaryDefaultPng {return false}
//    if lhs._mobilePrimarySelectedPng != rhs._mobilePrimarySelectedPng {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_NavigationAppInfo.Version: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_NavigationAppInfo.protoMessageName + ".Version"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "major"),
//    2: .same(proto: "minor"),
//    3: .same(proto: "patch"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt32Field(value: &self._major)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._minor)
//      case 3: try decoder.decodeSingularInt32Field(value: &self._patch)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._major {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._minor {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._patch {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_NavigationAppInfo.Version, rhs: LarkNCExtensionPB_Entities_NavigationAppInfo.Version) -> Bool {
//    if lhs._major != rhs._major {return false}
//    if lhs._minor != rhs._minor {return false}
//    if lhs._patch != rhs._patch {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_NavigationAppInfo.PlatformInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_NavigationAppInfo.protoMessageName + ".PlatformInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "platform"),
//    2: .standard(proto: "min_version"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _platform: LarkNCExtensionPB_Entities_NavigationAppInfo.Platform? = nil
//    var _minVersion: LarkNCExtensionPB_Entities_NavigationAppInfo.Version? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _platform = source._platform
//      _minVersion = source._minVersion
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._platform)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._minVersion)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._platform {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._minVersion {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_NavigationAppInfo.PlatformInfo, rhs: LarkNCExtensionPB_Entities_NavigationAppInfo.PlatformInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._platform != rhs_storage._platform {return false}
//        if _storage._minVersion != rhs_storage._minVersion {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_NavigationOrder: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".NavigationOrder"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "navigations"),
//    2: .standard(proto: "primary_count"),
//    3: .standard(proto: "total_count"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._primaryCount == nil {return false}
//    if !LarkHTTP.Internal.areAllInitialized(self.navigations) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.navigations)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._primaryCount)
//      case 3: try decoder.decodeSingularInt32Field(value: &self._totalCount)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.navigations.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.navigations, fieldNumber: 1)
//    }
//    if let v = self._primaryCount {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._totalCount {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_NavigationOrder, rhs: LarkNCExtensionPB_Entities_NavigationOrder) -> Bool {
//    if lhs.navigations != rhs.navigations {return false}
//    if lhs._primaryCount != rhs._primaryCount {return false}
//    if lhs._totalCount != rhs._totalCount {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_NavigationInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".NavigationInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "mainNavigation"),
//    2: .same(proto: "shortcutNavigation"),
//    3: .same(proto: "version"),
//    4: .same(proto: "versionV2"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._version == nil {return false}
//    if !LarkHTTP.Internal.areAllInitialized(self.mainNavigation) {return false}
//    if !LarkHTTP.Internal.areAllInitialized(self.shortcutNavigation) {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.mainNavigation)
//      case 2: try decoder.decodeRepeatedMessageField(value: &self.shortcutNavigation)
//      case 3: try decoder.decodeSingularInt32Field(value: &self._version)
//      case 4: try decoder.decodeSingularInt64Field(value: &self._versionV2)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.mainNavigation.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.mainNavigation, fieldNumber: 1)
//    }
//    if !self.shortcutNavigation.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.shortcutNavigation, fieldNumber: 2)
//    }
//    if let v = self._version {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._versionV2 {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_NavigationInfo, rhs: LarkNCExtensionPB_Entities_NavigationInfo) -> Bool {
//    if lhs.mainNavigation != rhs.mainNavigation {return false}
//    if lhs.shortcutNavigation != rhs.shortcutNavigation {return false}
//    if lhs._version != rhs._version {return false}
//    if lhs._versionV2 != rhs._versionV2 {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_NavigationUniqueID: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".NavigationUniqueID"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "ID"),
//    2: .same(proto: "appType"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._id == nil {return false}
//    if self._appType == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._id)
//      case 2: try decoder.decodeSingularEnumField(value: &self._appType)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._appType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_NavigationUniqueID, rhs: LarkNCExtensionPB_Entities_NavigationUniqueID) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._appType != rhs._appType {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_OncallGroupChatter: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".OncallGroupChatter"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "group_avatar"),
//    2: .standard(proto: "group_i18n_inf"),
//    3: .standard(proto: "name_pinyin"),
//    4: .standard(proto: "is_anonymous"),
//    5: .standard(proto: "image_avatar"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _groupAvatar: LarkNCExtensionPB_Entities_ImageSet? = nil
//    var _groupI18NInf: LarkNCExtensionPB_Entities_OncallGroupChatter.I18nInf? = nil
//    var _namePinyin: String? = nil
//    var _isAnonymous: Bool? = nil
//    var _imageAvatar: LarkNCExtensionPB_Entities_Image? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _groupAvatar = source._groupAvatar
//      _groupI18NInf = source._groupI18NInf
//      _namePinyin = source._namePinyin
//      _isAnonymous = source._isAnonymous
//      _imageAvatar = source._imageAvatar
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._groupAvatar)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._groupI18NInf)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._namePinyin)
//        case 4: try decoder.decodeSingularBoolField(value: &_storage._isAnonymous)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._imageAvatar)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._groupAvatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._groupI18NInf {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._namePinyin {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._isAnonymous {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._imageAvatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_OncallGroupChatter, rhs: LarkNCExtensionPB_Entities_OncallGroupChatter) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._groupAvatar != rhs_storage._groupAvatar {return false}
//        if _storage._groupI18NInf != rhs_storage._groupI18NInf {return false}
//        if _storage._namePinyin != rhs_storage._namePinyin {return false}
//        if _storage._isAnonymous != rhs_storage._isAnonymous {return false}
//        if _storage._imageAvatar != rhs_storage._imageAvatar {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_OncallGroupChatter.I18nInf: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_OncallGroupChatter.protoMessageName + ".I18nInf"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "i18n_names"),
//    2: .standard(proto: "i18n_descriptions"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NNames)
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NDescriptions)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.i18NNames.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NNames, fieldNumber: 1)
//    }
//    if !self.i18NDescriptions.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NDescriptions, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_OncallGroupChatter.I18nInf, rhs: LarkNCExtensionPB_Entities_OncallGroupChatter.I18nInf) -> Bool {
//    if lhs.i18NNames != rhs.i18NNames {return false}
//    if lhs.i18NDescriptions != rhs.i18NDescriptions {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TenantSingleProduct: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TenantSingleProduct"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "tenant_single_product"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt32Field(value: &self._tenantSingleProduct)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._tenantSingleProduct {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TenantSingleProduct, rhs: LarkNCExtensionPB_Entities_TenantSingleProduct) -> Bool {
//    if lhs._tenantSingleProduct != rhs._tenantSingleProduct {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TopicGroup: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TopicGroup"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .standard(proto: "user_setting"),
//    3: .same(proto: "type"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: String? = nil
//    var _userSetting: LarkNCExtensionPB_Entities_TopicGroup.UserSetting? = nil
//    var _type: Int32? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _userSetting = source._userSetting
//      _type = source._type
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._id == nil {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._userSetting)
//        case 3: try decoder.decodeSingularInt32Field(value: &_storage._type)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._userSetting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._type {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TopicGroup, rhs: LarkNCExtensionPB_Entities_TopicGroup) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._userSetting != rhs_storage._userSetting {return false}
//        if _storage._type != rhs_storage._type {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TopicGroup.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN_TYPE"),
//    1: .same(proto: "NORMAL"),
//    2: .same(proto: "DEFAULT"),
//    3: .same(proto: "PUBLIC"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_TopicGroup.UserSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_TopicGroup.protoMessageName + ".UserSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "is_favorite"),
//    2: .standard(proto: "update_time"),
//    3: .standard(proto: "topic_group_role"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._isFavorite)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._updateTime)
//      case 3: try decoder.decodeSingularEnumField(value: &self._topicGroupRole)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._isFavorite {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._updateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._topicGroupRole {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TopicGroup.UserSetting, rhs: LarkNCExtensionPB_Entities_TopicGroup.UserSetting) -> Bool {
//    if lhs._isFavorite != rhs._isFavorite {return false}
//    if lhs._updateTime != rhs._updateTime {return false}
//    if lhs._topicGroupRole != rhs._topicGroupRole {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MailGroupSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MailGroupSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "send_permission"),
//    2: .standard(proto: "enable_mail_send"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._sendPermission)
//      case 2: try decoder.decodeSingularBoolField(value: &self._enableMailSend)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._sendPermission {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._enableMailSend {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MailGroupSetting, rhs: LarkNCExtensionPB_Entities_MailGroupSetting) -> Bool {
//    if lhs._sendPermission != rhs._sendPermission {return false}
//    if lhs._enableMailSend != rhs._enableMailSend {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MailGroupSetting.SendPermission: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "GROUP_ADMIN"),
//    2: .same(proto: "GROUP_MEMBERS"),
//    3: .same(proto: "ORGANIZATION_MEMBERS"),
//    4: .same(proto: "ALL"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_CalendarSchemaCollection: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarSchemaCollection"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "entity_schemas"),
//    2: .same(proto: "compatibility"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _entitySchemas: [LarkNCExtensionPB_Entities_EntitySchema] = []
//    var _compatibility: LarkNCExtensionPB_Entities_CalendarSchemaCompatibility? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _entitySchemas = source._entitySchemas
//      _compatibility = source._compatibility
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._entitySchemas)
//        case 2: try decoder.decodeSingularMessageField(value: &_storage._compatibility)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if !_storage._entitySchemas.isEmpty {
//        try visitor.visitRepeatedMessageField(value: _storage._entitySchemas, fieldNumber: 1)
//      }
//      if let v = _storage._compatibility {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarSchemaCollection, rhs: LarkNCExtensionPB_Entities_CalendarSchemaCollection) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._entitySchemas != rhs_storage._entitySchemas {return false}
//        if _storage._compatibility != rhs_storage._compatibility {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_EntitySchema: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".EntitySchema"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "unique_name"),
//    2: .standard(proto: "ui_level"),
//    3: .standard(proto: "app_link"),
//    4: .standard(proto: "incompatible_level"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._uniqueName)
//      case 2: try decoder.decodeSingularEnumField(value: &self._uiLevel)
//      case 3: try decoder.decodeSingularStringField(value: &self._appLink)
//      case 4: try decoder.decodeSingularEnumField(value: &self._incompatibleLevel)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._uniqueName {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._uiLevel {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    if let v = self._appLink {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._incompatibleLevel {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_EntitySchema, rhs: LarkNCExtensionPB_Entities_EntitySchema) -> Bool {
//    if lhs._uniqueName != rhs._uniqueName {return false}
//    if lhs._uiLevel != rhs._uiLevel {return false}
//    if lhs._appLink != rhs._appLink {return false}
//    if lhs._incompatibleLevel != rhs._incompatibleLevel {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_EntitySchema.ItemUILevel: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "HIDE"),
//    2: .same(proto: "READONLY"),
//    3: .same(proto: "EDITABLE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_CalendarSchemaCompatibility: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarSchemaCompatibility"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "minimum_compatibility_ver"),
//    2: .standard(proto: "incompatible_level"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt32Field(value: &self._minimumCompatibilityVer)
//      case 2: try decoder.decodeSingularEnumField(value: &self._incompatibleLevel)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._minimumCompatibilityVer {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._incompatibleLevel {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarSchemaCompatibility, rhs: LarkNCExtensionPB_Entities_CalendarSchemaCompatibility) -> Bool {
//    if lhs._minimumCompatibilityVer != rhs._minimumCompatibilityVer {return false}
//    if lhs._incompatibleLevel != rhs._incompatibleLevel {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_PendingUser: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".PendingUser"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "user_name"),
//    2: .standard(proto: "user_env"),
//    3: .standard(proto: "tenant_id"),
//    4: .standard(proto: "tenant_name"),
//    5: .standard(proto: "tenant_icon_url"),
//    6: .standard(proto: "user_unit"),
//    7: .standard(proto: "user_brand"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._userName)
//      case 2: try decoder.decodeSingularStringField(value: &self._userEnv)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._tenantID)
//      case 4: try decoder.decodeSingularStringField(value: &self._tenantName)
//      case 5: try decoder.decodeSingularStringField(value: &self._tenantIconURL)
//      case 6: try decoder.decodeSingularStringField(value: &self._userUnit)
//      case 7: try decoder.decodeSingularStringField(value: &self._userBrand)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._userName {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._userEnv {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._tenantID {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._tenantName {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._tenantIconURL {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//    }
//    if let v = self._userUnit {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//    }
//    if let v = self._userBrand {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_PendingUser, rhs: LarkNCExtensionPB_Entities_PendingUser) -> Bool {
//    if lhs._userName != rhs._userName {return false}
//    if lhs._userEnv != rhs._userEnv {return false}
//    if lhs._tenantID != rhs._tenantID {return false}
//    if lhs._tenantName != rhs._tenantName {return false}
//    if lhs._tenantIconURL != rhs._tenantIconURL {return false}
//    if lhs._userUnit != rhs._userUnit {return false}
//    if lhs._userBrand != rhs._userBrand {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AvatarMeta: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".AvatarMeta"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "type"),
//    2: .same(proto: "color"),
//    3: .same(proto: "text"),
//    5: .standard(proto: "border_color"),
//    7: .standard(proto: "background_color"),
//    8: .standard(proto: "center_color"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._type)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._color)
//      case 3: try decoder.decodeSingularStringField(value: &self._text)
//      case 5: try decoder.decodeSingularInt32Field(value: &self._borderColor)
//      case 7: try decoder.decodeSingularInt32Field(value: &self._backgroundColor)
//      case 8: try decoder.decodeSingularInt32Field(value: &self._centerColor)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._type {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._color {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._text {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._borderColor {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
//    }
//    if let v = self._backgroundColor {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
//    }
//    if let v = self._centerColor {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AvatarMeta, rhs: LarkNCExtensionPB_Entities_AvatarMeta) -> Bool {
//    if lhs._type != rhs._type {return false}
//    if lhs._color != rhs._color {return false}
//    if lhs._text != rhs._text {return false}
//    if lhs._borderColor != rhs._borderColor {return false}
//    if lhs._backgroundColor != rhs._backgroundColor {return false}
//    if lhs._centerColor != rhs._centerColor {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AvatarMeta.TypeEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "RANDOM"),
//    2: .same(proto: "WORDS"),
//    3: .same(proto: "UPLOAD"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_SidebarInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".SidebarInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "sidebar_type"),
//    2: .standard(proto: "sidebar_icon"),
//    3: .standard(proto: "sidebar_link"),
//    4: .standard(proto: "sidebar_isshow"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._sidebarType)
//      case 2: try decoder.decodeSingularStringField(value: &self._sidebarIcon)
//      case 3: try decoder.decodeSingularStringField(value: &self._sidebarLink)
//      case 4: try decoder.decodeSingularBoolField(value: &self._sidebarIsshow)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._sidebarType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._sidebarIcon {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._sidebarLink {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._sidebarIsshow {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SidebarInfo, rhs: LarkNCExtensionPB_Entities_SidebarInfo) -> Bool {
//    if lhs._sidebarType != rhs._sidebarType {return false}
//    if lhs._sidebarIcon != rhs._sidebarIcon {return false}
//    if lhs._sidebarLink != rhs._sidebarLink {return false}
//    if lhs._sidebarIsshow != rhs._sidebarIsshow {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SimpleMember: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".SimpleMember"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "attendee_calendar_id"),
//    2: .same(proto: "status"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._attendeeCalendarID)
//      case 2: try decoder.decodeSingularEnumField(value: &self._status)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._attendeeCalendarID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._status {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SimpleMember, rhs: LarkNCExtensionPB_Entities_SimpleMember) -> Bool {
//    if lhs._attendeeCalendarID != rhs._attendeeCalendarID {return false}
//    if lhs._status != rhs._status {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_SimpleMembers: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".SimpleMembers"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "members"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.members)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.members.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.members, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SimpleMembers, rhs: LarkNCExtensionPB_Entities_SimpleMembers) -> Bool {
//    if lhs.members != rhs.members {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

extension LarkNCExtensionPB_Entities_EventAttendeeInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventAttendeeInfo"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "total_no"),
    2: .standard(proto: "accept_no"),
    3: .standard(proto: "decline_no"),
    4: .standard(proto: "tentative_no"),
    5: .standard(proto: "need_action_no"),
    6: .standard(proto: "event_creators"),
    7: .standard(proto: "all_individual_attendee"),
    8: .standard(proto: "snapshot_page_token"),
  ]

  fileprivate class _StorageClass {
    var _totalNo: Int32? = nil
    var _acceptNo: Int32? = nil
    var _declineNo: Int32? = nil
    var _tentativeNo: Int32? = nil
    var _needActionNo: Int32? = nil
    var _eventCreators: LarkNCExtensionPB_Entities_EventCreators? = nil
    var _allIndividualAttendee: Bool? = nil
    var _snapshotPageToken: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _totalNo = source._totalNo
      _acceptNo = source._acceptNo
      _declineNo = source._declineNo
      _tentativeNo = source._tentativeNo
      _needActionNo = source._needActionNo
      _eventCreators = source._eventCreators
      _allIndividualAttendee = source._allIndividualAttendee
      _snapshotPageToken = source._snapshotPageToken
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._eventCreators, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._totalNo)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._acceptNo)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._declineNo)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._tentativeNo)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._needActionNo)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._eventCreators)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._allIndividualAttendee)
        case 8: try decoder.decodeSingularStringField(value: &_storage._snapshotPageToken)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._totalNo {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._acceptNo {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._declineNo {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._tentativeNo {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._needActionNo {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._eventCreators {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._allIndividualAttendee {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      }
      if let v = _storage._snapshotPageToken {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_EventAttendeeInfo, rhs: LarkNCExtensionPB_Entities_EventAttendeeInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._totalNo != rhs_storage._totalNo {return false}
        if _storage._acceptNo != rhs_storage._acceptNo {return false}
        if _storage._declineNo != rhs_storage._declineNo {return false}
        if _storage._tentativeNo != rhs_storage._tentativeNo {return false}
        if _storage._needActionNo != rhs_storage._needActionNo {return false}
        if _storage._eventCreators != rhs_storage._eventCreators {return false}
        if _storage._allIndividualAttendee != rhs_storage._allIndividualAttendee {return false}
        if _storage._snapshotPageToken != rhs_storage._snapshotPageToken {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Entities_EventCreators: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventCreators"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "organizer"),
    2: .same(proto: "creator"),
    3: .same(proto: "successor"),
  ]

  fileprivate class _StorageClass {
    var _organizer: LarkNCExtensionPB_Entities_CalendarEventAttendee? = nil
    var _creator: LarkNCExtensionPB_Entities_CalendarEventAttendee? = nil
    var _successor: LarkNCExtensionPB_Entities_CalendarEventAttendee? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _organizer = source._organizer
      _creator = source._creator
      _successor = source._successor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._organizer, !v.isInitialized {return false}
      if let v = _storage._creator, !v.isInitialized {return false}
      if let v = _storage._successor, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._organizer)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._creator)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._successor)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._organizer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._creator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._successor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Entities_EventCreators, rhs: LarkNCExtensionPB_Entities_EventCreators) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._organizer != rhs_storage._organizer {return false}
        if _storage._creator != rhs_storage._creator {return false}
        if _storage._successor != rhs_storage._successor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Entities_AttendeeCommit: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".AttendeeCommit"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "category"),
//    2: .standard(proto: "attendee_calendar_id"),
//    3: .standard(proto: "attendee_schema"),
//    4: .standard(proto: "schema_extra_data"),
//    5: .same(proto: "status"),
//    100: .same(proto: "user"),
//    101: .same(proto: "group"),
//    102: .same(proto: "resource"),
//    103: .standard(proto: "third_party_user"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _category: LarkNCExtensionPB_Entities_AttendeeCommit.Category? = nil
//    var _attendeeCalendarID: String? = nil
//    var _attendeeSchema: Data? = nil
//    var _schemaExtraData: Data? = nil
//    var _status: LarkNCExtensionPB_Entities_CalendarEventAttendee.Status? = nil
//    var _dependency: LarkNCExtensionPB_Entities_AttendeeCommit.OneOf_Dependency?
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _category = source._category
//      _attendeeCalendarID = source._attendeeCalendarID
//      _attendeeSchema = source._attendeeSchema
//      _schemaExtraData = source._schemaExtraData
//      _status = source._status
//      _dependency = source._dependency
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularEnumField(value: &_storage._category)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._attendeeCalendarID)
//        case 3: try decoder.decodeSingularBytesField(value: &_storage._attendeeSchema)
//        case 4: try decoder.decodeSingularBytesField(value: &_storage._schemaExtraData)
//        case 5: try decoder.decodeSingularEnumField(value: &_storage._status)
//        case 100:
//          var v: LarkNCExtensionPB_Entities_AttendeeCommit.User?
//          if let current = _storage._dependency {
//            try decoder.handleConflictingOneOf()
//            if case .user(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._dependency = .user(v)}
//        case 101:
//          var v: LarkNCExtensionPB_Entities_AttendeeCommit.Group?
//          if let current = _storage._dependency {
//            try decoder.handleConflictingOneOf()
//            if case .group(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._dependency = .group(v)}
//        case 102:
//          var v: LarkNCExtensionPB_Entities_AttendeeCommit.Resource?
//          if let current = _storage._dependency {
//            try decoder.handleConflictingOneOf()
//            if case .resource(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._dependency = .resource(v)}
//        case 103:
//          var v: LarkNCExtensionPB_Entities_AttendeeCommit.ThirdPartyUser?
//          if let current = _storage._dependency {
//            try decoder.handleConflictingOneOf()
//            if case .thirdPartyUser(let m) = current {v = m}
//          }
//          try decoder.decodeSingularMessageField(value: &v)
//          if let v = v {_storage._dependency = .thirdPartyUser(v)}
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._category {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._attendeeCalendarID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._attendeeSchema {
//        try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._schemaExtraData {
//        try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
//      }
//      switch _storage._dependency {
//      case .user(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
//      case .group(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
//      case .resource(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
//      case .thirdPartyUser(let v)?:
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
//      case nil: break
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AttendeeCommit, rhs: LarkNCExtensionPB_Entities_AttendeeCommit) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._category != rhs_storage._category {return false}
//        if _storage._attendeeCalendarID != rhs_storage._attendeeCalendarID {return false}
//        if _storage._attendeeSchema != rhs_storage._attendeeSchema {return false}
//        if _storage._schemaExtraData != rhs_storage._schemaExtraData {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._dependency != rhs_storage._dependency {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AttendeeCommit.Category: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "USER"),
//    2: .same(proto: "GROUP"),
//    3: .same(proto: "RESOURCE"),
//    4: .same(proto: "THIRD_PARTY_USER"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_AttendeeCommit.User: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AttendeeCommit.protoMessageName + ".User"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "is_optional"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._isOptional)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._isOptional {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AttendeeCommit.User, rhs: LarkNCExtensionPB_Entities_AttendeeCommit.User) -> Bool {
//    if lhs._isOptional != rhs._isOptional {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AttendeeCommit.Group: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AttendeeCommit.protoMessageName + ".Group"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "group_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._groupID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._groupID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AttendeeCommit.Group, rhs: LarkNCExtensionPB_Entities_AttendeeCommit.Group) -> Bool {
//    if lhs._groupID != rhs._groupID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AttendeeCommit.Resource: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AttendeeCommit.protoMessageName + ".Resource"
//  public static let _protobuf_nameMap = LarkHTTP._NameMap()
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let _ = try decoder.nextFieldNumber() {
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AttendeeCommit.Resource, rhs: LarkNCExtensionPB_Entities_AttendeeCommit.Resource) -> Bool {
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AttendeeCommit.ThirdPartyUser: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_AttendeeCommit.protoMessageName + ".ThirdPartyUser"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "email"),
//    2: .standard(proto: "is_optional"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._email)
//      case 2: try decoder.decodeSingularBoolField(value: &self._isOptional)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._email {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._isOptional {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AttendeeCommit.ThirdPartyUser, rhs: LarkNCExtensionPB_Entities_AttendeeCommit.ThirdPartyUser) -> Bool {
//    if lhs._email != rhs._email {return false}
//    if lhs._isOptional != rhs._isOptional {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_AttendeeCommits: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".AttendeeCommits"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "added_attendees"),
//    2: .standard(proto: "updated_attendees"),
//    3: .standard(proto: "removed_individual_attendee_calendar_ids"),
//    4: .standard(proto: "removed_group_ids"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.addedAttendees)
//      case 2: try decoder.decodeRepeatedMessageField(value: &self.updatedAttendees)
//      case 3: try decoder.decodeRepeatedStringField(value: &self.removedIndividualAttendeeCalendarIds)
//      case 4: try decoder.decodeRepeatedStringField(value: &self.removedGroupIds)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.addedAttendees.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.addedAttendees, fieldNumber: 1)
//    }
//    if !self.updatedAttendees.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.updatedAttendees, fieldNumber: 2)
//    }
//    if !self.removedIndividualAttendeeCalendarIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.removedIndividualAttendeeCalendarIds, fieldNumber: 3)
//    }
//    if !self.removedGroupIds.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.removedGroupIds, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_AttendeeCommits, rhs: LarkNCExtensionPB_Entities_AttendeeCommits) -> Bool {
//    if lhs.addedAttendees != rhs.addedAttendees {return false}
//    if lhs.updatedAttendees != rhs.updatedAttendees {return false}
//    if lhs.removedIndividualAttendeeCalendarIds != rhs.removedIndividualAttendeeCalendarIds {return false}
//    if lhs.removedGroupIds != rhs.removedGroupIds {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_EventAttendeeCommits: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".EventAttendeeCommits"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "calendar_id"),
//    2: .same(proto: "key"),
//    3: .standard(proto: "original_time"),
//    4: .standard(proto: "attendee_commits"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _calendarID: String? = nil
//    var _key: String? = nil
//    var _originalTime: Int64? = nil
//    var _attendeeCommits: LarkNCExtensionPB_Entities_AttendeeCommits? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _calendarID = source._calendarID
//      _key = source._key
//      _originalTime = source._originalTime
//      _attendeeCommits = source._attendeeCommits
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._calendarID == nil {return false}
//      if _storage._key == nil {return false}
//      if _storage._originalTime == nil {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._calendarID)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._key)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._originalTime)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._attendeeCommits)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._calendarID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._key {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._originalTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._attendeeCommits {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_EventAttendeeCommits, rhs: LarkNCExtensionPB_Entities_EventAttendeeCommits) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._calendarID != rhs_storage._calendarID {return false}
//        if _storage._key != rhs_storage._key {return false}
//        if _storage._originalTime != rhs_storage._originalTime {return false}
//        if _storage._attendeeCommits != rhs_storage._attendeeCommits {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UserInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UserInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "avatar_key"),
//    2: .standard(proto: "user_name"),
//    3: .standard(proto: "name_py"),
//    4: .standard(proto: "tenant_name"),
//    5: .standard(proto: "last_seven_day_online_minutes"),
//    6: .standard(proto: "user_id"),
//    7: .standard(proto: "tenant_id"),
//    8: .same(proto: "alias"),
//    9: .same(proto: "description"),
//    10: .same(proto: "status"),
//    11: .standard(proto: "search_enable"),
//    12: .standard(proto: "avatar_image"),
//    13: .standard(proto: "agree_time"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _avatarKey: String? = nil
//    var _userName: String? = nil
//    var _namePy: String? = nil
//    var _tenantName: String? = nil
//    var _lastSevenDayOnlineMinutes: Int32? = nil
//    var _userID: String? = nil
//    var _tenantID: String? = nil
//    var _alias: String? = nil
//    var _description_p: String? = nil
//    var _status: Int32? = nil
//    var _searchEnable: Bool? = nil
//    var _avatarImage: LarkNCExtensionPB_Entities_Image? = nil
//    var _agreeTime: Int64? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _avatarKey = source._avatarKey
//      _userName = source._userName
//      _namePy = source._namePy
//      _tenantName = source._tenantName
//      _lastSevenDayOnlineMinutes = source._lastSevenDayOnlineMinutes
//      _userID = source._userID
//      _tenantID = source._tenantID
//      _alias = source._alias
//      _description_p = source._description_p
//      _status = source._status
//      _searchEnable = source._searchEnable
//      _avatarImage = source._avatarImage
//      _agreeTime = source._agreeTime
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._avatarKey)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._userName)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._namePy)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._tenantName)
//        case 5: try decoder.decodeSingularInt32Field(value: &_storage._lastSevenDayOnlineMinutes)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._userID)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._tenantID)
//        case 8: try decoder.decodeSingularStringField(value: &_storage._alias)
//        case 9: try decoder.decodeSingularStringField(value: &_storage._description_p)
//        case 10: try decoder.decodeSingularInt32Field(value: &_storage._status)
//        case 11: try decoder.decodeSingularBoolField(value: &_storage._searchEnable)
//        case 12: try decoder.decodeSingularMessageField(value: &_storage._avatarImage)
//        case 13: try decoder.decodeSingularInt64Field(value: &_storage._agreeTime)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._avatarKey {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._userName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._namePy {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._tenantName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._lastSevenDayOnlineMinutes {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._userID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._tenantID {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._alias {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._description_p {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._searchEnable {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
//      }
//      if let v = _storage._avatarImage {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
//      }
//      if let v = _storage._agreeTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 13)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserInfo, rhs: LarkNCExtensionPB_Entities_UserInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._avatarKey != rhs_storage._avatarKey {return false}
//        if _storage._userName != rhs_storage._userName {return false}
//        if _storage._namePy != rhs_storage._namePy {return false}
//        if _storage._tenantName != rhs_storage._tenantName {return false}
//        if _storage._lastSevenDayOnlineMinutes != rhs_storage._lastSevenDayOnlineMinutes {return false}
//        if _storage._userID != rhs_storage._userID {return false}
//        if _storage._tenantID != rhs_storage._tenantID {return false}
//        if _storage._alias != rhs_storage._alias {return false}
//        if _storage._description_p != rhs_storage._description_p {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._searchEnable != rhs_storage._searchEnable {return false}
//        if _storage._avatarImage != rhs_storage._avatarImage {return false}
//        if _storage._agreeTime != rhs_storage._agreeTime {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_ContactInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ContactInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "user_info"),
//    2: .same(proto: "op"),
//    3: .same(proto: "chatter"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _userInfo: LarkNCExtensionPB_Entities_UserInfo? = nil
//    var _op: LarkNCExtensionPB_Entities_ContactOperation? = nil
//    var _chatter: LarkNCExtensionPB_Entities_Chatter? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _userInfo = source._userInfo
//      _op = source._op
//      _chatter = source._chatter
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._userInfo == nil {return false}
//      if let v = _storage._chatter, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._userInfo)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._op)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._chatter)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._userInfo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._op {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._chatter {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_ContactInfo, rhs: LarkNCExtensionPB_Entities_ContactInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._userInfo != rhs_storage._userInfo {return false}
//        if _storage._op != rhs_storage._op {return false}
//        if _storage._chatter != rhs_storage._chatter {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MeetingRoomFilter: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MeetingRoomFilter"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "min_capacity"),
//    2: .standard(proto: "need_equipments"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt32Field(value: &self._minCapacity)
//      case 2: try decoder.decodeRepeatedStringField(value: &self.needEquipments)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._minCapacity {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//    }
//    if !self.needEquipments.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.needEquipments, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MeetingRoomFilter, rhs: LarkNCExtensionPB_Entities_MeetingRoomFilter) -> Bool {
//    if lhs._minCapacity != rhs._minCapacity {return false}
//    if lhs.needEquipments != rhs.needEquipments {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MeetingRoomFloorFilter: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MeetingRoomFloorFilter"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "building_id"),
//    2: .standard(proto: "needed_floors"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._buildingID)
//      case 2: try decoder.decodeRepeatedStringField(value: &self.neededFloors)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._buildingID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if !self.neededFloors.isEmpty {
//      try visitor.visitRepeatedStringField(value: self.neededFloors, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MeetingRoomFloorFilter, rhs: LarkNCExtensionPB_Entities_MeetingRoomFloorFilter) -> Bool {
//    if lhs._buildingID != rhs._buildingID {return false}
//    if lhs.neededFloors != rhs.neededFloors {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Equipment: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Equipment"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "default_name"),
//    2: .standard(proto: "i18n_name"),
//    3: .standard(proto: "equipment_type"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._defaultName)
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NName)
//      case 3: try decoder.decodeSingularStringField(value: &self._equipmentType)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._defaultName {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if !self.i18NName.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NName, fieldNumber: 2)
//    }
//    if let v = self._equipmentType {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Equipment, rhs: LarkNCExtensionPB_Entities_Equipment) -> Bool {
//    if lhs._defaultName != rhs._defaultName {return false}
//    if lhs.i18NName != rhs.i18NName {return false}
//    if lhs._equipmentType != rhs._equipmentType {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UniversalUserSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UniversalUserSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "key"),
//    2: .standard(proto: "is_default"),
//    3: .standard(proto: "int_value"),
//    4: .standard(proto: "str_value"),
//    5: .standard(proto: "bool_value"),
//    21: .standard(proto: "update_time"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._key == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._key)
//      case 2: try decoder.decodeSingularBoolField(value: &self._isDefault)
//      case 3:
//        if self.value != nil {try decoder.handleConflictingOneOf()}
//        var v: Int64?
//        try decoder.decodeSingularInt64Field(value: &v)
//        if let v = v {self.value = .intValue(v)}
//      case 4:
//        if self.value != nil {try decoder.handleConflictingOneOf()}
//        var v: String?
//        try decoder.decodeSingularStringField(value: &v)
//        if let v = v {self.value = .strValue(v)}
//      case 5:
//        if self.value != nil {try decoder.handleConflictingOneOf()}
//        var v: Bool?
//        try decoder.decodeSingularBoolField(value: &v)
//        if let v = v {self.value = .boolValue(v)}
//      case 21: try decoder.decodeSingularInt64Field(value: &self._updateTime)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._key {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._isDefault {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
//    }
//    switch self.value {
//    case .intValue(let v)?:
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    case .strValue(let v)?:
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    case .boolValue(let v)?:
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//    case nil: break
//    }
//    if let v = self._updateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 21)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UniversalUserSetting, rhs: LarkNCExtensionPB_Entities_UniversalUserSetting) -> Bool {
//    if lhs._key != rhs._key {return false}
//    if lhs._isDefault != rhs._isDefault {return false}
//    if lhs.value != rhs.value {return false}
//    if lhs._updateTime != rhs._updateTime {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_GeneralUserSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".GeneralUserSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "key"),
//    2: .standard(proto: "update_time"),
//    3: .standard(proto: "str_value"),
//    4: .standard(proto: "bool_value"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._key == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._key)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._updateTime)
//      case 3:
//        if self.value != nil {try decoder.handleConflictingOneOf()}
//        var v: String?
//        try decoder.decodeSingularStringField(value: &v)
//        if let v = v {self.value = .strValue(v)}
//      case 4:
//        if self.value != nil {try decoder.handleConflictingOneOf()}
//        var v: Bool?
//        try decoder.decodeSingularBoolField(value: &v)
//        if let v = v {self.value = .boolValue(v)}
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._key {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._updateTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    switch self.value {
//    case .strValue(let v)?:
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    case .boolValue(let v)?:
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
//    case nil: break
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_GeneralUserSetting, rhs: LarkNCExtensionPB_Entities_GeneralUserSetting) -> Bool {
//    if lhs._key != rhs._key {return false}
//    if lhs._updateTime != rhs._updateTime {return false}
//    if lhs.value != rhs.value {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_GeneralUserSetting.Key: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "EXTERNAL_DISPLAY_TIMEZONE_SETTING"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_SubscriptionFeed: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".SubscriptionFeed"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "name"),
//    3: .same(proto: "avatar"),
//    4: .same(proto: "summary"),
//    5: .standard(proto: "is_notify"),
//    6: .same(proto: "badge"),
//    7: .same(proto: "schema"),
//    8: .same(proto: "body"),
//    9: .standard(proto: "display_time"),
//    10: .same(proto: "version"),
//    11: .standard(proto: "avatar_image"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: Int64? = nil
//    var _name: Dictionary<String,String> = [:]
//    var _avatar: String? = nil
//    var _summary: Dictionary<String,String> = [:]
//    var _isNotify: Bool? = nil
//    var _badge: Int32? = nil
//    var _schema: Dictionary<String,String> = [:]
//    var _body: String? = nil
//    var _displayTime: Int64? = nil
//    var _version: Int64? = nil
//    var _avatarImage: LarkNCExtensionPB_Entities_Image? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _name = source._name
//      _avatar = source._avatar
//      _summary = source._summary
//      _isNotify = source._isNotify
//      _badge = source._badge
//      _schema = source._schema
//      _body = source._body
//      _displayTime = source._displayTime
//      _version = source._version
//      _avatarImage = source._avatarImage
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._id == nil {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
//        case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._name)
//        case 3: try decoder.decodeSingularStringField(value: &_storage._avatar)
//        case 4: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._summary)
//        case 5: try decoder.decodeSingularBoolField(value: &_storage._isNotify)
//        case 6: try decoder.decodeSingularInt32Field(value: &_storage._badge)
//        case 7: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &_storage._schema)
//        case 8: try decoder.decodeSingularStringField(value: &_storage._body)
//        case 9: try decoder.decodeSingularInt64Field(value: &_storage._displayTime)
//        case 10: try decoder.decodeSingularInt64Field(value: &_storage._version)
//        case 11: try decoder.decodeSingularMessageField(value: &_storage._avatarImage)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//      }
//      if !_storage._name.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._name, fieldNumber: 2)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//      }
//      if !_storage._summary.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._summary, fieldNumber: 4)
//      }
//      if let v = _storage._isNotify {
//        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._badge {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
//      }
//      if !_storage._schema.isEmpty {
//        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: _storage._schema, fieldNumber: 7)
//      }
//      if let v = _storage._body {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._displayTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._version {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
//      }
//      if let v = _storage._avatarImage {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_SubscriptionFeed, rhs: LarkNCExtensionPB_Entities_SubscriptionFeed) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._summary != rhs_storage._summary {return false}
//        if _storage._isNotify != rhs_storage._isNotify {return false}
//        if _storage._badge != rhs_storage._badge {return false}
//        if _storage._schema != rhs_storage._schema {return false}
//        if _storage._body != rhs_storage._body {return false}
//        if _storage._displayTime != rhs_storage._displayTime {return false}
//        if _storage._version != rhs_storage._version {return false}
//        if _storage._avatarImage != rhs_storage._avatarImage {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CryptoMessageMissingDevicesInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "message_id"),
//    2: .standard(proto: "crypto_device_info"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._messageID)
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo.CryptoDeviceInfo>.self, value: &self.cryptoDeviceInfo)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._messageID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if !self.cryptoDeviceInfo.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo.CryptoDeviceInfo>.self, value: self.cryptoDeviceInfo, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo, rhs: LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo) -> Bool {
//    if lhs._messageID != rhs._messageID {return false}
//    if lhs.cryptoDeviceInfo != rhs.cryptoDeviceInfo {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo.CryptoDeviceInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo.protoMessageName + ".CryptoDeviceInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "device_info"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.deviceInfo)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.deviceInfo.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.deviceInfo, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo.CryptoDeviceInfo, rhs: LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo.CryptoDeviceInfo) -> Bool {
//    if lhs.deviceInfo != rhs.deviceInfo {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo.CryptoDeviceInfo.DeviceInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo.CryptoDeviceInfo.protoMessageName + ".DeviceInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "deviceId"),
//    2: .standard(proto: "create_time"),
//    3: .standard(proto: "public_key"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._deviceID)
//      case 2: try decoder.decodeSingularInt64Field(value: &self._createTime)
//      case 3: try decoder.decodeSingularBytesField(value: &self._publicKey)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._deviceID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._createTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._publicKey {
//      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo.CryptoDeviceInfo.DeviceInfo, rhs: LarkNCExtensionPB_Entities_CryptoMessageMissingDevicesInfo.CryptoDeviceInfo.DeviceInfo) -> Bool {
//    if lhs._deviceID != rhs._deviceID {return false}
//    if lhs._createTime != rhs._createTime {return false}
//    if lhs._publicKey != rhs._publicKey {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CryptoMessageFallbackUserContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CryptoMessageFallbackUserContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "contents"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_CryptoMessageFallbackUserContent.FallbackContent>.self, value: &self.contents)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.contents.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_CryptoMessageFallbackUserContent.FallbackContent>.self, value: self.contents, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CryptoMessageFallbackUserContent, rhs: LarkNCExtensionPB_Entities_CryptoMessageFallbackUserContent) -> Bool {
//    if lhs.contents != rhs.contents {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_CryptoMessageFallbackUserContent.FallbackContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_CryptoMessageFallbackUserContent.protoMessageName + ".FallbackContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "content"),
//    2: .same(proto: "nonce"),
//    3: .standard(proto: "additional_data"),
//    4: .standard(proto: "public_key"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBytesField(value: &self._content)
//      case 2: try decoder.decodeSingularBytesField(value: &self._nonce)
//      case 3: try decoder.decodeSingularBytesField(value: &self._additionalData)
//      case 4: try decoder.decodeSingularBytesField(value: &self._publicKey)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._content {
//      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
//    }
//    if let v = self._nonce {
//      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
//    }
//    if let v = self._additionalData {
//      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
//    }
//    if let v = self._publicKey {
//      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CryptoMessageFallbackUserContent.FallbackContent, rhs: LarkNCExtensionPB_Entities_CryptoMessageFallbackUserContent.FallbackContent) -> Bool {
//    if lhs._content != rhs._content {return false}
//    if lhs._nonce != rhs._nonce {return false}
//    if lhs._additionalData != rhs._additionalData {return false}
//    if lhs._publicKey != rhs._publicKey {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Team: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Team"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "name"),
//    3: .same(proto: "status"),
//    4: .standard(proto: "owner_id"),
//    5: .standard(proto: "member_count"),
//    6: .standard(proto: "default_chat_id"),
//    7: .same(proto: "description"),
//    8: .same(proto: "avatar"),
//    20: .standard(proto: "create_time"),
//    21: .same(proto: "version"),
//    100: .same(proto: "setting"),
//    101: .standard(proto: "user_entity"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: Int64? = nil
//    var _name: String? = nil
//    var _status: LarkNCExtensionPB_Entities_TeamStatus? = nil
//    var _ownerID: Int64? = nil
//    var _memberCount: Int32? = nil
//    var _defaultChatID: Int64? = nil
//    var _description_p: String? = nil
//    var _avatar: LarkNCExtensionPB_Entities_Image? = nil
//    var _createTime: Int64? = nil
//    var _version: Int64? = nil
//    var _setting: LarkNCExtensionPB_Entities_TeamSetting? = nil
//    var _userEntity: LarkNCExtensionPB_Entities_TeamUserEntity? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _name = source._name
//      _status = source._status
//      _ownerID = source._ownerID
//      _memberCount = source._memberCount
//      _defaultChatID = source._defaultChatID
//      _description_p = source._description_p
//      _avatar = source._avatar
//      _createTime = source._createTime
//      _version = source._version
//      _setting = source._setting
//      _userEntity = source._userEntity
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._status)
//        case 4: try decoder.decodeSingularInt64Field(value: &_storage._ownerID)
//        case 5: try decoder.decodeSingularInt32Field(value: &_storage._memberCount)
//        case 6: try decoder.decodeSingularInt64Field(value: &_storage._defaultChatID)
//        case 7: try decoder.decodeSingularStringField(value: &_storage._description_p)
//        case 8: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        case 20: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
//        case 21: try decoder.decodeSingularInt64Field(value: &_storage._version)
//        case 100: try decoder.decodeSingularMessageField(value: &_storage._setting)
//        case 101: try decoder.decodeSingularMessageField(value: &_storage._userEntity)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._ownerID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._memberCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._defaultChatID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._description_p {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._createTime {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 20)
//      }
//      if let v = _storage._version {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 21)
//      }
//      if let v = _storage._setting {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
//      }
//      if let v = _storage._userEntity {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Team, rhs: LarkNCExtensionPB_Entities_Team) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._ownerID != rhs_storage._ownerID {return false}
//        if _storage._memberCount != rhs_storage._memberCount {return false}
//        if _storage._defaultChatID != rhs_storage._defaultChatID {return false}
//        if _storage._description_p != rhs_storage._description_p {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        if _storage._createTime != rhs_storage._createTime {return false}
//        if _storage._version != rhs_storage._version {return false}
//        if _storage._setting != rhs_storage._setting {return false}
//        if _storage._userEntity != rhs_storage._userEntity {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TeamBaseInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TeamBaseInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "name"),
//    2: .same(proto: "status"),
//    3: .standard(proto: "owner_id"),
//    4: .standard(proto: "member_count"),
//    5: .standard(proto: "default_chat_id"),
//    6: .same(proto: "description"),
//    7: .same(proto: "avatar"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _name: String? = nil
//    var _status: LarkNCExtensionPB_Entities_TeamStatus? = nil
//    var _ownerID: Int64? = nil
//    var _memberCount: Int32? = nil
//    var _defaultChatID: Int64? = nil
//    var _description_p: String? = nil
//    var _avatar: LarkNCExtensionPB_Entities_Image? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _name = source._name
//      _status = source._status
//      _ownerID = source._ownerID
//      _memberCount = source._memberCount
//      _defaultChatID = source._defaultChatID
//      _description_p = source._description_p
//      _avatar = source._avatar
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 2: try decoder.decodeSingularEnumField(value: &_storage._status)
//        case 3: try decoder.decodeSingularInt64Field(value: &_storage._ownerID)
//        case 4: try decoder.decodeSingularInt32Field(value: &_storage._memberCount)
//        case 5: try decoder.decodeSingularInt64Field(value: &_storage._defaultChatID)
//        case 6: try decoder.decodeSingularStringField(value: &_storage._description_p)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._avatar)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._status {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._ownerID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._memberCount {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._defaultChatID {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._description_p {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._avatar {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TeamBaseInfo, rhs: LarkNCExtensionPB_Entities_TeamBaseInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._status != rhs_storage._status {return false}
//        if _storage._ownerID != rhs_storage._ownerID {return false}
//        if _storage._memberCount != rhs_storage._memberCount {return false}
//        if _storage._defaultChatID != rhs_storage._defaultChatID {return false}
//        if _storage._description_p != rhs_storage._description_p {return false}
//        if _storage._avatar != rhs_storage._avatar {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TeamRole: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TeamRole"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "role_type"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._roleType)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._roleType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TeamRole, rhs: LarkNCExtensionPB_Entities_TeamRole) -> Bool {
//    if lhs._roleType != rhs._roleType {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TeamRole.RoleType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "OWNER"),
//    2: .same(proto: "ADMIN"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_TeamUserEntity: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TeamUserEntity"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "user_role"),
//    2: .standard(proto: "user_roles"),
//    100: .same(proto: "version"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._userRole)
//      case 2: try decoder.decodeRepeatedMessageField(value: &self.userRoles)
//      case 100: try decoder.decodeSingularInt64Field(value: &self._version)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._userRole {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if !self.userRoles.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.userRoles, fieldNumber: 2)
//    }
//    if let v = self._version {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 100)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TeamUserEntity, rhs: LarkNCExtensionPB_Entities_TeamUserEntity) -> Bool {
//    if lhs._userRole != rhs._userRole {return false}
//    if lhs.userRoles != rhs.userRoles {return false}
//    if lhs._version != rhs._version {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TeamUserEntity.Role: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "MEMBER"),
//    2: .same(proto: "OWNER"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_TeamSetting: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TeamSetting"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "add_member_permission"),
//    2: .standard(proto: "create_team_chat_permission"),
//    3: .standard(proto: "bind_team_chat_permission"),
//    4: .standard(proto: "add_team_chat_permission"),
//    5: .standard(proto: "add_private_team_chat_permission"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._addMemberPermission)
//      case 2: try decoder.decodeSingularEnumField(value: &self._createTeamChatPermission)
//      case 3: try decoder.decodeSingularEnumField(value: &self._bindTeamChatPermission)
//      case 4: try decoder.decodeSingularEnumField(value: &self._addTeamChatPermission)
//      case 5: try decoder.decodeSingularEnumField(value: &self._addPrivateTeamChatPermission)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._addMemberPermission {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    if let v = self._createTeamChatPermission {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
//    }
//    if let v = self._bindTeamChatPermission {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//    }
//    if let v = self._addTeamChatPermission {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
//    }
//    if let v = self._addPrivateTeamChatPermission {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TeamSetting, rhs: LarkNCExtensionPB_Entities_TeamSetting) -> Bool {
//    if lhs._addMemberPermission != rhs._addMemberPermission {return false}
//    if lhs._createTeamChatPermission != rhs._createTeamChatPermission {return false}
//    if lhs._bindTeamChatPermission != rhs._bindTeamChatPermission {return false}
//    if lhs._addTeamChatPermission != rhs._addTeamChatPermission {return false}
//    if lhs._addPrivateTeamChatPermission != rhs._addPrivateTeamChatPermission {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TeamSetting.AddMemberPermissionEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "ADD_MEMBER_PERMISSION_UNKNOWN"),
//    1: .same(proto: "ADD_MEMBER_PERMISSION_ALL_MEMBERS"),
//    2: .same(proto: "ADD_MEMBER_PERMISSION_ONLY_OWNER"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_TeamSetting.CreateTeamChatPermissionEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "CREATE_TEAM_CHAT_PERMISSION_UNKNOWN"),
//    1: .same(proto: "CREATE_TEAM_CHAT_PERMISSION_ALL_MEMBERS"),
//    2: .same(proto: "CREATE_TEAM_CHAT_PERMISSION_ONLY_OWNER"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_TeamSetting.BindTeamChatPermissionEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "BIND_TEAM_CHAT_PERMISSION_UNKNOWN"),
//    1: .same(proto: "BIND_TEAM_CHAT_PERMISSION_ALL_MEMBERS"),
//    2: .same(proto: "BIND_TEAM_CHAT_PERMISSION_ONLY_OWNER"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_TeamSetting.AddTeamChatPermissionEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "ADD_TEAM_CHAT_PERMISSION_UNKNOWN"),
//    1: .same(proto: "ADD_TEAM_CHAT_PERMISSION_ALL_MEMBERS"),
//    2: .same(proto: "ADD_TEAM_CHAT_PERMISSION_ONLY_MANAGER"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_TeamSetting.AddPrivateTeamChatPermissionEnum: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "ADD_PRIVATE_TEAM_CHAT_UNKNOWN"),
//    1: .same(proto: "ADD_PRIVATE_TEAM_CHAT_ALL_MEMBERS"),
//    2: .same(proto: "ADD_PRIVATE_TEAM_CHAT_ONLY_MANAGER"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_TeamMemberMeta: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TeamMemberMeta"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "user_roles"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeRepeatedMessageField(value: &self.userRoles)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.userRoles.isEmpty {
//      try visitor.visitRepeatedMessageField(value: self.userRoles, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TeamMemberMeta, rhs: LarkNCExtensionPB_Entities_TeamMemberMeta) -> Bool {
//    if lhs.userRoles != rhs.userRoles {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Item: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".Item"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .standard(proto: "entity_id"),
//    3: .standard(proto: "entity_type"),
//    4: .standard(proto: "parent_id"),
//    5: .standard(proto: "order_weight"),
//    6: .same(proto: "version"),
//    7: .standard(proto: "is_hidden"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._id)
//      case 2: try decoder.decodeSingularStringField(value: &self._entityID)
//      case 3: try decoder.decodeSingularEnumField(value: &self._entityType)
//      case 4: try decoder.decodeSingularInt64Field(value: &self._parentID)
//      case 5: try decoder.decodeSingularInt64Field(value: &self._orderWeight)
//      case 6: try decoder.decodeSingularInt64Field(value: &self._version)
//      case 7: try decoder.decodeSingularBoolField(value: &self._isHidden)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._entityID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._entityType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//    }
//    if let v = self._parentID {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//    }
//    if let v = self._orderWeight {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
//    }
//    if let v = self._version {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
//    }
//    if let v = self._isHidden {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_Item, rhs: LarkNCExtensionPB_Entities_Item) -> Bool {
//    if lhs._id != rhs._id {return false}
//    if lhs._entityID != rhs._entityID {return false}
//    if lhs._entityType != rhs._entityType {return false}
//    if lhs._parentID != rhs._parentID {return false}
//    if lhs._orderWeight != rhs._orderWeight {return false}
//    if lhs._version != rhs._version {return false}
//    if lhs._isHidden != rhs._isHidden {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_Item.EntityType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "CHAT"),
//    2: .same(proto: "TEAM"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_CalendarTenantInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".CalendarTenantInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "tenant_id"),
//    2: .standard(proto: "tenant_name"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._tenantID)
//      case 2: try decoder.decodeSingularStringField(value: &self._tenantName)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._tenantID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._tenantName {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_CalendarTenantInfo, rhs: LarkNCExtensionPB_Entities_CalendarTenantInfo) -> Bool {
//    if lhs._tenantID != rhs._tenantID {return false}
//    if lhs._tenantName != rhs._tenantName {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_HongbaoCover: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".HongbaoCover"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "name"),
//    3: .standard(proto: "cover_type"),
//    4: .standard(proto: "main_cover"),
//    5: .standard(proto: "message_cover"),
//    6: .standard(proto: "head_cover"),
//    7: .standard(proto: "company_logo"),
//    8: .standard(proto: "select_cover"),
//    9: .standard(proto: "display_name"),
//    10: .standard(proto: "company_name"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: Int64? = nil
//    var _name: String? = nil
//    var _coverType: LarkNCExtensionPB_Entities_HongbaoCover.CoverType? = nil
//    var _mainCover: LarkNCExtensionPB_Entities_ImageSetPassThrough? = nil
//    var _messageCover: LarkNCExtensionPB_Entities_ImageSetPassThrough? = nil
//    var _headCover: LarkNCExtensionPB_Entities_ImageSetPassThrough? = nil
//    var _companyLogo: LarkNCExtensionPB_Entities_ImageSetPassThrough? = nil
//    var _selectCover: LarkNCExtensionPB_Entities_ImageSetPassThrough? = nil
//    var _displayName: LarkNCExtensionPB_Entities_HongbaoCover.DisplayName? = nil
//    var _companyName: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _name = source._name
//      _coverType = source._coverType
//      _mainCover = source._mainCover
//      _messageCover = source._messageCover
//      _headCover = source._headCover
//      _companyLogo = source._companyLogo
//      _selectCover = source._selectCover
//      _displayName = source._displayName
//      _companyName = source._companyName
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._mainCover, !v.isInitialized {return false}
//      if let v = _storage._messageCover, !v.isInitialized {return false}
//      if let v = _storage._headCover, !v.isInitialized {return false}
//      if let v = _storage._companyLogo, !v.isInitialized {return false}
//      if let v = _storage._selectCover, !v.isInitialized {return false}
//      if let v = _storage._displayName, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
//        case 3: try decoder.decodeSingularEnumField(value: &_storage._coverType)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._mainCover)
//        case 5: try decoder.decodeSingularMessageField(value: &_storage._messageCover)
//        case 6: try decoder.decodeSingularMessageField(value: &_storage._headCover)
//        case 7: try decoder.decodeSingularMessageField(value: &_storage._companyLogo)
//        case 8: try decoder.decodeSingularMessageField(value: &_storage._selectCover)
//        case 9: try decoder.decodeSingularMessageField(value: &_storage._displayName)
//        case 10: try decoder.decodeSingularStringField(value: &_storage._companyName)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._name {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._coverType {
//        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._mainCover {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._messageCover {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
//      }
//      if let v = _storage._headCover {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
//      }
//      if let v = _storage._companyLogo {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
//      }
//      if let v = _storage._selectCover {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
//      }
//      if let v = _storage._displayName {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
//      }
//      if let v = _storage._companyName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_HongbaoCover, rhs: LarkNCExtensionPB_Entities_HongbaoCover) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._name != rhs_storage._name {return false}
//        if _storage._coverType != rhs_storage._coverType {return false}
//        if _storage._mainCover != rhs_storage._mainCover {return false}
//        if _storage._messageCover != rhs_storage._messageCover {return false}
//        if _storage._headCover != rhs_storage._headCover {return false}
//        if _storage._companyLogo != rhs_storage._companyLogo {return false}
//        if _storage._selectCover != rhs_storage._selectCover {return false}
//        if _storage._displayName != rhs_storage._displayName {return false}
//        if _storage._companyName != rhs_storage._companyName {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_HongbaoCover.CoverType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "UNKNOWN"),
//    1: .same(proto: "TEMPLATE"),
//    2: .same(proto: "CUSTOMIZE"),
//  ]
//}

//extension LarkNCExtensionPB_Entities_HongbaoCover.DisplayName: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_HongbaoCover.protoMessageName + ".DisplayName"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "background_img"),
//    2: .standard(proto: "display_name"),
//    3: .standard(proto: "bg_border_width"),
//    4: .standard(proto: "bg_img_dot_9"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _backgroundImg: LarkNCExtensionPB_Entities_ImageSetPassThrough? = nil
//    var _displayName: String? = nil
//    var _bgBorderWidth: Int32? = nil
//    var _bgImgDot9: LarkNCExtensionPB_Entities_ImageSetPassThrough? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _backgroundImg = source._backgroundImg
//      _displayName = source._displayName
//      _bgBorderWidth = source._bgBorderWidth
//      _bgImgDot9 = source._bgImgDot9
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._backgroundImg, !v.isInitialized {return false}
//      if let v = _storage._bgImgDot9, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularMessageField(value: &_storage._backgroundImg)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._displayName)
//        case 3: try decoder.decodeSingularInt32Field(value: &_storage._bgBorderWidth)
//        case 4: try decoder.decodeSingularMessageField(value: &_storage._bgImgDot9)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._backgroundImg {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._displayName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._bgBorderWidth {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._bgImgDot9 {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_HongbaoCover.DisplayName, rhs: LarkNCExtensionPB_Entities_HongbaoCover.DisplayName) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._backgroundImg != rhs_storage._backgroundImg {return false}
//        if _storage._displayName != rhs_storage._displayName {return false}
//        if _storage._bgBorderWidth != rhs_storage._bgBorderWidth {return false}
//        if _storage._bgImgDot9 != rhs_storage._bgImgDot9 {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DeviceSecretContent: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".DeviceSecretContent"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "device_contents"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_DeviceSecretContent.Content>.self, value: &self.deviceContents)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.deviceContents.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_DeviceSecretContent.Content>.self, value: self.deviceContents, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DeviceSecretContent, rhs: LarkNCExtensionPB_Entities_DeviceSecretContent) -> Bool {
//    if lhs.deviceContents != rhs.deviceContents {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DeviceSecretContent.Content: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_DeviceSecretContent.protoMessageName + ".Content"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "content"),
//    2: .standard(proto: "receiver_ipk"),
//    3: .same(proto: "header"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBytesField(value: &self._content)
//      case 2: try decoder.decodeSingularBytesField(value: &self._receiverIpk)
//      case 3: try decoder.decodeSingularBytesField(value: &self._header)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._content {
//      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
//    }
//    if let v = self._receiverIpk {
//      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
//    }
//    if let v = self._header {
//      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DeviceSecretContent.Content, rhs: LarkNCExtensionPB_Entities_DeviceSecretContent.Content) -> Bool {
//    if lhs._content != rhs._content {return false}
//    if lhs._receiverIpk != rhs._receiverIpk {return false}
//    if lhs._header != rhs._header {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DeviceIpkInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".DeviceIpkInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "user_id"),
//    2: .standard(proto: "device_id"),
//    3: .standard(proto: "create_time"),
//    4: .same(proto: "ipk"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._userID)
//      case 2: try decoder.decodeSingularStringField(value: &self._deviceID)
//      case 3: try decoder.decodeSingularInt64Field(value: &self._createTime)
//      case 4: try decoder.decodeSingularBytesField(value: &self._ipk)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._userID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._deviceID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._createTime {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._ipk {
//      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DeviceIpkInfo, rhs: LarkNCExtensionPB_Entities_DeviceIpkInfo) -> Bool {
//    if lhs._userID != rhs._userID {return false}
//    if lhs._deviceID != rhs._deviceID {return false}
//    if lhs._createTime != rhs._createTime {return false}
//    if lhs._ipk != rhs._ipk {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_UserIpkInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".UserIpkInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "user_ipk_info"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufInt64,LarkNCExtensionPB_Entities_DeviceIpkInfo>.self, value: &self.userIpkInfo)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if !self.userIpkInfo.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufInt64,LarkNCExtensionPB_Entities_DeviceIpkInfo>.self, value: self.userIpkInfo, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_UserIpkInfo, rhs: LarkNCExtensionPB_Entities_UserIpkInfo) -> Bool {
//    if lhs.userIpkInfo != rhs.userIpkInfo {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TranslatedUrlPreviewEntity: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TranslatedUrlPreviewEntity"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "preview_id"),
//    2: .same(proto: "title"),
//    3: .same(proto: "tag"),
//    4: .standard(proto: "target_language"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._previewID == nil {return false}
//    if self._targetLanguage == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._previewID)
//      case 2: try decoder.decodeSingularStringField(value: &self._title)
//      case 3: try decoder.decodeSingularStringField(value: &self._tag)
//      case 4: try decoder.decodeSingularStringField(value: &self._targetLanguage)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._previewID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._title {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._tag {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._targetLanguage {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TranslatedUrlPreviewEntity, rhs: LarkNCExtensionPB_Entities_TranslatedUrlPreviewEntity) -> Bool {
//    if lhs._previewID != rhs._previewID {return false}
//    if lhs._title != rhs._title {return false}
//    if lhs._tag != rhs._tag {return false}
//    if lhs._targetLanguage != rhs._targetLanguage {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_TranslateUrlPreviewContext: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".TranslateUrlPreviewContext"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "preview_id"),
//    2: .same(proto: "title"),
//    3: .same(proto: "tag"),
//    4: .standard(proto: "target_language"),
//    5: .standard(proto: "is_sdk_preview"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._previewID == nil {return false}
//    if self._targetLanguage == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._previewID)
//      case 2: try decoder.decodeSingularStringField(value: &self._title)
//      case 3: try decoder.decodeSingularStringField(value: &self._tag)
//      case 4: try decoder.decodeSingularStringField(value: &self._targetLanguage)
//      case 5: try decoder.decodeSingularBoolField(value: &self._isSdkPreview)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._previewID {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._title {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._tag {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    if let v = self._targetLanguage {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//    }
//    if let v = self._isSdkPreview {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_TranslateUrlPreviewContext, rhs: LarkNCExtensionPB_Entities_TranslateUrlPreviewContext) -> Bool {
//    if lhs._previewID != rhs._previewID {return false}
//    if lhs._title != rhs._title {return false}
//    if lhs._tag != rhs._tag {return false}
//    if lhs._targetLanguage != rhs._targetLanguage {return false}
//    if lhs._isSdkPreview != rhs._isSdkPreview {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DynamicEmojiResource: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".DynamicEmojiResource"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "show_weight"),
//    2: .standard(proto: "resource_key"),
//    3: .same(proto: "text"),
//    4: .standard(proto: "fs_unit"),
//    5: .standard(proto: "resource_name"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _showWeight: Int32? = nil
//    var _resourceKey: String? = nil
//    var _text: LarkNCExtensionPB_Entities_DynamicEmojiResource.I18NName? = nil
//    var _fsUnit: String? = nil
//    var _resourceName: String? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _showWeight = source._showWeight
//      _resourceKey = source._resourceKey
//      _text = source._text
//      _fsUnit = source._fsUnit
//      _resourceName = source._resourceName
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._showWeight == nil {return false}
//      if _storage._resourceKey == nil {return false}
//      if _storage._text == nil {return false}
//      if _storage._fsUnit == nil {return false}
//      if _storage._resourceName == nil {return false}
//      if let v = _storage._text, !v.isInitialized {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt32Field(value: &_storage._showWeight)
//        case 2: try decoder.decodeSingularStringField(value: &_storage._resourceKey)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._text)
//        case 4: try decoder.decodeSingularStringField(value: &_storage._fsUnit)
//        case 5: try decoder.decodeSingularStringField(value: &_storage._resourceName)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._showWeight {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._resourceKey {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._text {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//      if let v = _storage._fsUnit {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
//      }
//      if let v = _storage._resourceName {
//        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DynamicEmojiResource, rhs: LarkNCExtensionPB_Entities_DynamicEmojiResource) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._showWeight != rhs_storage._showWeight {return false}
//        if _storage._resourceKey != rhs_storage._resourceKey {return false}
//        if _storage._text != rhs_storage._text {return false}
//        if _storage._fsUnit != rhs_storage._fsUnit {return false}
//        if _storage._resourceName != rhs_storage._resourceName {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_DynamicEmojiResource.I18NName: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = LarkNCExtensionPB_Entities_DynamicEmojiResource.protoMessageName + ".I18NName"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "default_val"),
//    2: .standard(proto: "i18n_vals"),
//  ]
//
//  public var isInitialized: Bool {
//    if self._defaultVal == nil {return false}
//    return true
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._defaultVal)
//      case 2: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: &self.i18NVals)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._defaultVal {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if !self.i18NVals.isEmpty {
//      try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMap<LarkHTTP.ProtobufString,LarkHTTP.ProtobufString>.self, value: self.i18NVals, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_DynamicEmojiResource.I18NName, rhs: LarkNCExtensionPB_Entities_DynamicEmojiResource.I18NName) -> Bool {
//    if lhs._defaultVal != rhs._defaultVal {return false}
//    if lhs.i18NVals != rhs.i18NVals {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MessageLastVisibleInfoPatch"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "visible_id"),
//    2: .standard(proto: "visible_position"),
//    3: .standard(proto: "removed_last_position"),
//    4: .standard(proto: "removed_last_id"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt64Field(value: &self._visibleID)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._visiblePosition)
//      case 3: try decoder.decodeSingularInt32Field(value: &self._removedLastPosition)
//      case 4: try decoder.decodeSingularInt64Field(value: &self._removedLastID)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._visibleID {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._visiblePosition {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._removedLastPosition {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._removedLastID {
//      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch, rhs: LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch) -> Bool {
//    if lhs._visibleID != rhs._visibleID {return false}
//    if lhs._visiblePosition != rhs._visiblePosition {return false}
//    if lhs._removedLastPosition != rhs._removedLastPosition {return false}
//    if lhs._removedLastID != rhs._removedLastID {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Entities_MessageLastVisibleInfo: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".MessageLastVisibleInfo"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "position"),
//    3: .same(proto: "patch"),
//  ]
//
//  fileprivate class _StorageClass {
//    var _id: Int64? = nil
//    var _position: Int32? = nil
//    var _patch: LarkNCExtensionPB_Entities_MessageLastVisibleInfoPatch? = nil
//
//    static let defaultInstance = _StorageClass()
//
//    private init() {}
//
//    init(copying source: _StorageClass) {
//      _id = source._id
//      _position = source._position
//      _patch = source._patch
//    }
//  }
//
//  fileprivate mutating func _uniqueStorage() -> _StorageClass {
//    if !isKnownUniquelyReferenced(&_storage) {
//      _storage = _StorageClass(copying: _storage)
//    }
//    return _storage
//  }
//
//  public var isInitialized: Bool {
//    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if _storage._id == nil {return false}
//      if _storage._position == nil {return false}
//      return true
//    }
//  }
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    _ = _uniqueStorage()
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      while let fieldNumber = try decoder.nextFieldNumber() {
//        switch fieldNumber {
//        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
//        case 2: try decoder.decodeSingularInt32Field(value: &_storage._position)
//        case 3: try decoder.decodeSingularMessageField(value: &_storage._patch)
//        default: break
//        }
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
//      if let v = _storage._id {
//        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
//      }
//      if let v = _storage._position {
//        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//      }
//      if let v = _storage._patch {
//        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
//      }
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Entities_MessageLastVisibleInfo, rhs: LarkNCExtensionPB_Entities_MessageLastVisibleInfo) -> Bool {
//    if lhs._storage !== rhs._storage {
//      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
//        let _storage = _args.0
//        let rhs_storage = _args.1
//        if _storage._id != rhs_storage._id {return false}
//        if _storage._position != rhs_storage._position {return false}
//        if _storage._patch != rhs_storage._patch {return false}
//        return true
//      }
//      if !storagesAreEqual {return false}
//    }
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}
// swiftlint:enable all
