// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// swiftlint:disable all

import Foundation
import LarkHTTP

/// command: PUT_MESSAGE = 5
/// 描述: 发表消息接口
/// 场景1: 客户端发文字消息、富文本消息
/// 启用版本:
/// 废弃版本:
/// PCT99:
/// QPS:
public struct LarkNCExtensionPB_Messages_PutMessageRequest {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 消息类型
  public var type: LarkNCExtensionPB_Entities_Message.TypeEnum {
    get {return _storage._type ?? .unknown}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {_uniqueStorage()._type = nil}

  /// 消息内容
  public var content: LarkNCExtensionPB_Messages_PutMessageRequest.Content {
    get {return _storage._content ?? LarkNCExtensionPB_Messages_PutMessageRequest.Content()}
    set {_uniqueStorage()._content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return _storage._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {_uniqueStorage()._content = nil}

  /// 消息发表在哪个会话中
  public var chatID: String {
    get {return _storage._chatID ?? String()}
    set {_uniqueStorage()._chatID = newValue}
  }
  /// Returns true if `chatID` has been explicitly set.
  public var hasChatID: Bool {return _storage._chatID != nil}
  /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatID() {_uniqueStorage()._chatID = nil}

  /// 该消息的根级 ID
  public var rootID: String {
    get {return _storage._rootID ?? String()}
    set {_uniqueStorage()._rootID = newValue}
  }
  /// Returns true if `rootID` has been explicitly set.
//  public var hasRootID: Bool {return _storage._rootID != nil}
  /// Clears the value of `rootID`. Subsequent reads from it will return its default value.
//  public mutating func clearRootID() {_uniqueStorage()._rootID = nil}

  /// 该消息的父级 ID
  public var parentID: String {
    get {return _storage._parentID ?? String()}
    set {_uniqueStorage()._parentID = newValue}
  }
  /// Returns true if `parentID` has been explicitly set.
  public var hasParentID: Bool {return _storage._parentID != nil}
  /// Clears the value of `parentID`. Subsequent reads from it will return its default value.
//  public mutating func clearParentID() {_uniqueStorage()._parentID = nil}

  /// 该消息的 cid
  public var cid: String {
    get {return _storage._cid ?? String()}
    set {_uniqueStorage()._cid = newValue}
  }
  /// Returns true if `cid` has been explicitly set.
//  public var hasCid: Bool {return _storage._cid != nil}
  /// Clears the value of `cid`. Subsequent reads from it will return its default value.
//  public mutating func clearCid() {_uniqueStorage()._cid = nil}

  /// 是否通知
  public var isNotified: Bool {
    get {return _storage._isNotified ?? true}
    set {_uniqueStorage()._isNotified = newValue}
  }
  /// Returns true if `isNotified` has been explicitly set.
//  public var hasIsNotified: Bool {return _storage._isNotified != nil}
  /// Clears the value of `isNotified`. Subsequent reads from it will return its default value.
//  public mutating func clearIsNotified() {_uniqueStorage()._isNotified = nil}

  /// 是否发送到chat
  public var sendToChat: Bool {
    get {return _storage._sendToChat ?? true}
    set {_uniqueStorage()._sendToChat = newValue}
  }
  /// Returns true if `sendToChat` has been explicitly set.
//  public var hasSendToChat: Bool {return _storage._sendToChat != nil}
  /// Clears the value of `sendToChat`. Subsequent reads from it will return its default value.
//  public mutating func clearSendToChat() {_uniqueStorage()._sendToChat = nil}

  /// >= 1 的值会对里面的 doc 链接授权
  public var version: Int32 {
    get {return _storage._version ?? 0}
    set {_uniqueStorage()._version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
//  public var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
//  public mutating func clearVersion() {_uniqueStorage()._version = nil}

  /// 从小组发现页创建话题时为true
  public var isThreadGroupTopic: Bool {
    get {return _storage._isThreadGroupTopic ?? false}
    set {_uniqueStorage()._isThreadGroupTopic = newValue}
  }
  /// Returns true if `isThreadGroupTopic` has been explicitly set.
//  public var hasIsThreadGroupTopic: Bool {return _storage._isThreadGroupTopic != nil}
  /// Clears the value of `isThreadGroupTopic`. Subsequent reads from it will return its default value.
//  public mutating func clearIsThreadGroupTopic() {_uniqueStorage()._isThreadGroupTopic = nil}

  /// 匿名身份发送消息
  public var isAnonymous: Bool {
    get {return _storage._isAnonymous ?? false}
    set {_uniqueStorage()._isAnonymous = newValue}
  }
  /// Returns true if `isAnonymous` has been explicitly set.
//  public var hasIsAnonymous: Bool {return _storage._isAnonymous != nil}
  /// Clears the value of `isAnonymous`. Subsequent reads from it will return its default value.
//  public mutating func clearIsAnonymous() {_uniqueStorage()._isAnonymous = nil}

  /// 在对话群中 reply_in_thread
  public var isReplyInThread: Bool {
    get {return _storage._isReplyInThread ?? false}
    set {_uniqueStorage()._isReplyInThread = newValue}
  }
  /// Returns true if `isReplyInThread` has been explicitly set.
//  public var hasIsReplyInThread: Bool {return _storage._isReplyInThread != nil}
  /// Clears the value of `isReplyInThread`. Subsequent reads from it will return its default value.
//  public mutating func clearIsReplyInThread() {_uniqueStorage()._isReplyInThread = nil}

  ///only used at server side
  ///预处理时，优先在本地取静态资源，如果取不到，将key加入到这个slice中，正式创建消息时会拿这些key 再取一次
  public var leftStaticResourceKeys: [String] {
    get {return _storage._leftStaticResourceKeys}
    set {_uniqueStorage()._leftStaticResourceKeys = newValue}
  }

  ///预处理时，优先在本地取静态资源，生成thriftMessage，如果取不到，正式创建消息时会拿这些key 再取一次
  public var thriftMessage: Data {
    get {return _storage._thriftMessage ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._thriftMessage = newValue}
  }
  /// Returns true if `thriftMessage` has been explicitly set.
//  public var hasThriftMessage: Bool {return _storage._thriftMessage != nil}
  /// Clears the value of `thriftMessage`. Subsequent reads from it will return its default value.
//  public mutating func clearThriftMessage() {_uniqueStorage()._thriftMessage = nil}

  ///预处理时，对image类型消息，需要预生成MsgID
  public var msgID: Int64 {
    get {return _storage._msgID ?? 0}
    set {_uniqueStorage()._msgID = newValue}
  }
  /// Returns true if `msgID` has been explicitly set.
//  public var hasMsgID: Bool {return _storage._msgID != nil}
  /// Clears the value of `msgID`. Subsequent reads from it will return its default value.
//  public mutating func clearMsgID() {_uniqueStorage()._msgID = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public struct Content {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    /// 文本消息相关
    public var text: String {
      get {return _storage._text ?? String()}
      set {_uniqueStorage()._text = newValue}
    }
    /// Returns true if `text` has been explicitly set.
    public var hasText: Bool {return _storage._text != nil}
    /// Clears the value of `text`. Subsequent reads from it will return its default value.
    public mutating func clearText() {_uniqueStorage()._text = nil}

    /// 图片信息相关
    public var imageKey: String {
      get {return _storage._imageKey ?? String()}
      set {_uniqueStorage()._imageKey = newValue}
    }
    /// Returns true if `imageKey` has been explicitly set.
//    public var hasImageKey: Bool {return _storage._imageKey != nil}
    /// Clears the value of `imageKey`. Subsequent reads from it will return its default value.
//    public mutating func clearImageKey() {_uniqueStorage()._imageKey = nil}

    /// 发送方是否选择以原图发送
    public var isOriginSource: Bool {
      get {return _storage._isOriginSource ?? false}
      set {_uniqueStorage()._isOriginSource = newValue}
    }
    /// Returns true if `isOriginSource` has been explicitly set.
//    public var hasIsOriginSource: Bool {return _storage._isOriginSource != nil}
    /// Clears the value of `isOriginSource`. Subsequent reads from it will return its default value.
//    public mutating func clearIsOriginSource() {_uniqueStorage()._isOriginSource = nil}

    /// 帖子相关
    public var title: String {
      get {return _storage._title ?? String()}
      set {_uniqueStorage()._title = newValue}
    }
    /// Returns true if `title` has been explicitly set.
    public var hasTitle: Bool {return _storage._title != nil}
    /// Clears the value of `title`. Subsequent reads from it will return its default value.
//    public mutating func clearTitle() {_uniqueStorage()._title = nil}

    /// 该帖子的附件列表
    public var attachments: [String] {
      get {return _storage._attachments}
      set {_uniqueStorage()._attachments = newValue}
    }

    /// 该帖子是否开启通知
    public var isNotified: Bool {
      get {return _storage._isNotified ?? false}
      set {_uniqueStorage()._isNotified = newValue}
    }
    /// Returns true if `isNotified` has been explicitly set.
//    public var hasIsNotified: Bool {return _storage._isNotified != nil}
    /// Clears the value of `isNotified`. Subsequent reads from it will return its default value.
//    public mutating func clearIsNotified() {_uniqueStorage()._isNotified = nil}

    /// 语音消息相关
    public var audioKey: String {
      get {return _storage._audioKey ?? String()}
      set {_uniqueStorage()._audioKey = newValue}
    }
    /// Returns true if `audioKey` has been explicitly set.
//    public var hasAudioKey: Bool {return _storage._audioKey != nil}
    /// Clears the value of `audioKey`. Subsequent reads from it will return its default value.
//    public mutating func clearAudioKey() {_uniqueStorage()._audioKey = nil}

    /// 语音时长
    public var audioDuration: Int32 {
      get {return _storage._audioDuration ?? 0}
      set {_uniqueStorage()._audioDuration = newValue}
    }
    /// Returns true if `audioDuration` has been explicitly set.
//    public var hasAudioDuration: Bool {return _storage._audioDuration != nil}
    /// Clears the value of `audioDuration`. Subsequent reads from it will return its default value.
//    public mutating func clearAudioDuration() {_uniqueStorage()._audioDuration = nil}

    /// 分享群名片相关
    public var chatID: String {
      get {return _storage._chatID ?? String()}
      set {_uniqueStorage()._chatID = newValue}
    }
    /// Returns true if `chatID` has been explicitly set.
    public var hasChatID: Bool {return _storage._chatID != nil}
    /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//    public mutating func clearChatID() {_uniqueStorage()._chatID = nil}

    /// 加密相关
    public var cryptoToken: String {
      get {return _storage._cryptoToken ?? String()}
      set {_uniqueStorage()._cryptoToken = newValue}
    }
    /// Returns true if `cryptoToken` has been explicitly set.
//    public var hasCryptoToken: Bool {return _storage._cryptoToken != nil}
    /// Clears the value of `cryptoToken`. Subsequent reads from it will return its default value.
//    public mutating func clearCryptoToken() {_uniqueStorage()._cryptoToken = nil}

    /// 文件消息相关
    public var fileKey: String {
      get {return _storage._fileKey ?? String()}
      set {_uniqueStorage()._fileKey = newValue}
    }
    /// Returns true if `fileKey` has been explicitly set.
//    public var hasFileKey: Bool {return _storage._fileKey != nil}
    /// Clears the value of `fileKey`. Subsequent reads from it will return its default value.
//    public mutating func clearFileKey() {_uniqueStorage()._fileKey = nil}

    public var fileName: String {
      get {return _storage._fileName ?? String()}
      set {_uniqueStorage()._fileName = newValue}
    }
    /// Returns true if `fileName` has been explicitly set.
//    public var hasFileName: Bool {return _storage._fileName != nil}
    /// Clears the value of `fileName`. Subsequent reads from it will return its default value.
//    public mutating func clearFileName() {_uniqueStorage()._fileName = nil}

    public var fileMime: String {
      get {return _storage._fileMime ?? String()}
      set {_uniqueStorage()._fileMime = newValue}
    }
    /// Returns true if `fileMime` has been explicitly set.
//    public var hasFileMime: Bool {return _storage._fileMime != nil}
    /// Clears the value of `fileMime`. Subsequent reads from it will return its default value.
//    public mutating func clearFileMime() {_uniqueStorage()._fileMime = nil}

    public var fileSize: Int64 {
      get {return _storage._fileSize ?? 0}
      set {_uniqueStorage()._fileSize = newValue}
    }
    /// Returns true if `fileSize` has been explicitly set.
//    public var hasFileSize: Bool {return _storage._fileSize != nil}
    /// Clears the value of `fileSize`. Subsequent reads from it will return its default value.
//    public mutating func clearFileSize() {_uniqueStorage()._fileSize = nil}

    public var fileTransMode: LarkNCExtensionPB_Messages_PutMessageRequest.Content.FileTransMode {
      get {return _storage._fileTransMode ?? .unknown}
      set {_uniqueStorage()._fileTransMode = newValue}
    }
    /// Returns true if `fileTransMode` has been explicitly set.
//    public var hasFileTransMode: Bool {return _storage._fileTransMode != nil}
    /// Clears the value of `fileTransMode`. Subsequent reads from it will return its default value.
//    public mutating func clearFileTransMode() {_uniqueStorage()._fileTransMode = nil}

    ///局域网文件传输设备id
    public var senderDeviceID: String {
      get {return _storage._senderDeviceID ?? String()}
      set {_uniqueStorage()._senderDeviceID = newValue}
    }
    /// Returns true if `senderDeviceID` has been explicitly set.
//    public var hasSenderDeviceID: Bool {return _storage._senderDeviceID != nil}
    /// Clears the value of `senderDeviceID`. Subsequent reads from it will return its default value.
//    public mutating func clearSenderDeviceID() {_uniqueStorage()._senderDeviceID = nil}

    /// 富文本相关
    public var richText: LarkNCExtensionPB_Entities_RichText {
      get {return _storage._richText ?? LarkNCExtensionPB_Entities_RichText()}
      set {_uniqueStorage()._richText = newValue}
    }
    /// Returns true if `richText` has been explicitly set.
    public var hasRichText: Bool {return _storage._richText != nil}
    /// Clears the value of `richText`. Subsequent reads from it will return its default value.
//    public mutating func clearRichText() {_uniqueStorage()._richText = nil}

    /// 视频相关
    public var duration: Int32 {
      get {return _storage._duration ?? 0}
      set {_uniqueStorage()._duration = newValue}
    }
    /// Returns true if `duration` has been explicitly set.
    public var hasDuration: Bool {return _storage._duration != nil}
    /// Clears the value of `duration`. Subsequent reads from it will return its default value.
//    public mutating func clearDuration() {_uniqueStorage()._duration = nil}

    ///calendar相关
    public var calendarEvent: LarkNCExtensionPB_Entities_CalendarEvent {
      get {return _storage._calendarEvent ?? LarkNCExtensionPB_Entities_CalendarEvent()}
      set {_uniqueStorage()._calendarEvent = newValue}
    }
    /// Returns true if `calendarEvent` has been explicitly set.
    public var hasCalendarEvent: Bool {return _storage._calendarEvent != nil}
    /// Clears the value of `calendarEvent`. Subsequent reads from it will return its default value.
//    public mutating func clearCalendarEvent() {_uniqueStorage()._calendarEvent = nil}

    public var attendeesCount: Int32 {
      get {return _storage._attendeesCount ?? 0}
      set {_uniqueStorage()._attendeesCount = newValue}
    }
    /// Returns true if `attendeesCount` has been explicitly set.
//    public var hasAttendeesCount: Bool {return _storage._attendeesCount != nil}
    /// Clears the value of `attendeesCount`. Subsequent reads from it will return its default value.
//    public mutating func clearAttendeesCount() {_uniqueStorage()._attendeesCount = nil}

    ///该帖子是否是群公告
    public var isGroupAnnouncement: Bool {
      get {return _storage._isGroupAnnouncement ?? false}
      set {_uniqueStorage()._isGroupAnnouncement = newValue}
    }
    /// Returns true if `isGroupAnnouncement` has been explicitly set.
//    public var hasIsGroupAnnouncement: Bool {return _storage._isGroupAnnouncement != nil}
    /// Clears the value of `isGroupAnnouncement`. Subsequent reads from it will return its default value.
//    public mutating func clearIsGroupAnnouncement() {_uniqueStorage()._isGroupAnnouncement = nil}

    ///语音识别相关
    public var audioRecognition: LarkNCExtensionPB_Entities_AudioRecognition {
      get {return _storage._audioRecognition ?? LarkNCExtensionPB_Entities_AudioRecognition()}
      set {_uniqueStorage()._audioRecognition = newValue}
    }
    /// Returns true if `audioRecognition` has been explicitly set.
//    public var hasAudioRecognition: Bool {return _storage._audioRecognition != nil}
    /// Clears the value of `audioRecognition`. Subsequent reads from it will return its default value.
//    public mutating func clearAudioRecognition() {_uniqueStorage()._audioRecognition = nil}

    /// required for card message
    public var cardType: LarkNCExtensionPB_Entities_CardContent.TypeEnum {
      get {return _storage._cardType ?? .unknownType}
      set {_uniqueStorage()._cardType = newValue}
    }
    /// Returns true if `cardType` has been explicitly set.
//    public var hasCardType: Bool {return _storage._cardType != nil}
    /// Clears the value of `cardType`. Subsequent reads from it will return its default value.
//    public mutating func clearCardType() {_uniqueStorage()._cardType = nil}

    public var actions: Dictionary<String,LarkNCExtensionPB_Entities_CardAction> {
      get {return _storage._actions}
      set {_uniqueStorage()._actions = newValue}
    }

    public var cardExtra: LarkNCExtensionPB_Entities_CardContent.ExtraType {
      get {return _storage._cardExtra ?? .unknown}
      set {_uniqueStorage()._cardExtra = newValue}
    }
    /// Returns true if `cardExtra` has been explicitly set.
//    public var hasCardExtra: Bool {return _storage._cardExtra != nil}
    /// Clears the value of `cardExtra`. Subsequent reads from it will return its default value.
//    public mutating func clearCardExtra() {_uniqueStorage()._cardExtra = nil}

    public var cardMinVersion: LarkNCExtensionPB_Entities_MinVersion {
      get {return _storage._cardMinVersion ?? LarkNCExtensionPB_Entities_MinVersion()}
      set {_uniqueStorage()._cardMinVersion = newValue}
    }
    /// Returns true if `cardMinVersion` has been explicitly set.
//    public var hasCardMinVersion: Bool {return _storage._cardMinVersion != nil}
    /// Clears the value of `cardMinVersion`. Subsequent reads from it will return its default value.
//    public mutating func clearCardMinVersion() {_uniqueStorage()._cardMinVersion = nil}

    /// location消息相关
    public var location: LarkNCExtensionPB_Entities_LocationContent {
      get {return _storage._location ?? LarkNCExtensionPB_Entities_LocationContent()}
      set {_uniqueStorage()._location = newValue}
    }
    /// Returns true if `location` has been explicitly set.
    public var hasLocation: Bool {return _storage._location != nil}
    /// Clears the value of `location`. Subsequent reads from it will return its default value.
//    public mutating func clearLocation() {_uniqueStorage()._location = nil}

    /// 表情包相关
    public var stickerSetID: String {
      get {return _storage._stickerSetID ?? String()}
      set {_uniqueStorage()._stickerSetID = newValue}
    }
    /// Returns true if `stickerSetID` has been explicitly set.
//    public var hasStickerSetID: Bool {return _storage._stickerSetID != nil}
    /// Clears the value of `stickerSetID`. Subsequent reads from it will return its default value.
//    public mutating func clearStickerSetID() {_uniqueStorage()._stickerSetID = nil}

    public var stickerID: String {
      get {return _storage._stickerID ?? String()}
      set {_uniqueStorage()._stickerID = newValue}
    }
    /// Returns true if `stickerID` has been explicitly set.
//    public var hasStickerID: Bool {return _storage._stickerID != nil}
    /// Clears the value of `stickerID`. Subsequent reads from it will return its default value.
//    public mutating func clearStickerID() {_uniqueStorage()._stickerID = nil}

    ///分享个人名片相关
    public var shareUserID: String {
      get {return _storage._shareUserID ?? String()}
      set {_uniqueStorage()._shareUserID = newValue}
    }
    /// Returns true if `shareUserID` has been explicitly set.
//    public var hasShareUserID: Bool {return _storage._shareUserID != nil}
    /// Clears the value of `shareUserID`. Subsequent reads from it will return its default value.
//    public mutating func clearShareUserID() {_uniqueStorage()._shareUserID = nil}

    ///todo任务相关
    public var todoOperationContent: LarkNCExtensionPB_Entities_TodoOperationContent {
      get {return _storage._todoOperationContent ?? LarkNCExtensionPB_Entities_TodoOperationContent()}
      set {_uniqueStorage()._todoOperationContent = newValue}
    }
    /// Returns true if `todoOperationContent` has been explicitly set.
//    public var hasTodoOperationContent: Bool {return _storage._todoOperationContent != nil}
    /// Clears the value of `todoOperationContent`. Subsequent reads from it will return its default value.
//    public mutating func clearTodoOperationContent() {_uniqueStorage()._todoOperationContent = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    /// 文件消息-文件传输相关
    public enum FileTransMode: LarkHTTP.Enum {
      public typealias RawValue = Int
      case unknown // = 0

      /// 局域网在线传输, 不需要关注 file_key, 信任端上给的name, mime, size和key
      case lanTrans // = 1

      public init() {
        self = .unknown
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .lanTrans
        default: return nil
        }
      }

      public var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .lanTrans: return 1
        }
      }

    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// command: PUT_READ_MESSAGES = 40
/// 描述: 读消息信息回传服务端 new 对应 PUT_READ_MESSAGES
/// 场景1：读普通会话的消息(包括读消息和消badge)
/// 场景2：读话题详情页的回复消息(包括读消息和消badge)
/// 启用版本:
/// 废弃版本:
/// PCT99:
/// QPS:
public struct LarkNCExtensionPB_Messages_PutReadMessagesRequest {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var chatID: String {
    get {return _chatID ?? String()}
    set {_chatID = newValue}
  }
  /// Returns true if `chatID` has been explicitly set.
  public var hasChatID: Bool {return self._chatID != nil}
  /// Clears the value of `chatID`. Subsequent reads from it will return its default value.
//  public mutating func clearChatID() {self._chatID = nil}

  public var messageIds: [String] = []

  /// 最新的已读位置，无需使用时传-1, 比如读 thread 或者 不需要消 badged 时(读比已读到position更小的消息)传 -1
  public var maxPosition: Int32 {
    get {return _maxPosition ?? -1}
    set {_maxPosition = newValue}
  }
  /// Returns true if `maxPosition` has been explicitly set.
//  public var hasMaxPosition: Bool {return self._maxPosition != nil}
  /// Clears the value of `maxPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearMaxPosition() {self._maxPosition = nil}

  /// thread 相关
  public var threadID: String {
    get {return _threadID ?? String()}
    set {_threadID = newValue}
  }
  /// Returns true if `threadID` has been explicitly set.
  public var hasThreadID: Bool {return self._threadID != nil}
  /// Clears the value of `threadID`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadID() {self._threadID = nil}

  ///某个帖子中的已读位置
  public var threadMaxPosition: Int32 {
    get {return _threadMaxPosition ?? 0}
    set {_threadMaxPosition = newValue}
  }
  /// Returns true if `threadMaxPosition` has been explicitly set.
//  public var hasThreadMaxPosition: Bool {return self._threadMaxPosition != nil}
  /// Clears the value of `threadMaxPosition`. Subsequent reads from it will return its default value.
//  public mutating func clearThreadMaxPosition() {self._threadMaxPosition = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _chatID: String? = nil
  fileprivate var _maxPosition: Int32? = nil
  fileprivate var _threadID: String? = nil
  fileprivate var _threadMaxPosition: Int32? = nil
}

// MARK: - Code below here is support for the LarkHTTP runtime.

fileprivate let _protobuf_package = "messages"

extension LarkNCExtensionPB_Messages_PutMessageRequest: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PutMessageRequest"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "content"),
    3: .standard(proto: "chat_id"),
    4: .standard(proto: "root_id"),
    5: .standard(proto: "parent_id"),
    6: .same(proto: "cid"),
    7: .standard(proto: "is_notified"),
    8: .standard(proto: "send_to_chat"),
    9: .same(proto: "version"),
    10: .standard(proto: "is_thread_group_topic"),
    11: .standard(proto: "is_anonymous"),
    12: .standard(proto: "is_reply_in_thread"),
    101: .standard(proto: "left_static_resource_keys"),
    102: .standard(proto: "thrift_message"),
    103: .standard(proto: "msg_id"),
  ]

  fileprivate class _StorageClass {
    var _type: LarkNCExtensionPB_Entities_Message.TypeEnum? = nil
    var _content: LarkNCExtensionPB_Messages_PutMessageRequest.Content? = nil
    var _chatID: String? = nil
    var _rootID: String? = nil
    var _parentID: String? = nil
    var _cid: String? = nil
    var _isNotified: Bool? = nil
    var _sendToChat: Bool? = nil
    var _version: Int32? = nil
    var _isThreadGroupTopic: Bool? = nil
    var _isAnonymous: Bool? = nil
    var _isReplyInThread: Bool? = nil
    var _leftStaticResourceKeys: [String] = []
    var _thriftMessage: Data? = nil
    var _msgID: Int64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _content = source._content
      _chatID = source._chatID
      _rootID = source._rootID
      _parentID = source._parentID
      _cid = source._cid
      _isNotified = source._isNotified
      _sendToChat = source._sendToChat
      _version = source._version
      _isThreadGroupTopic = source._isThreadGroupTopic
      _isAnonymous = source._isAnonymous
      _isReplyInThread = source._isReplyInThread
      _leftStaticResourceKeys = source._leftStaticResourceKeys
      _thriftMessage = source._thriftMessage
      _msgID = source._msgID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._content, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._content)
        case 3: try decoder.decodeSingularStringField(value: &_storage._chatID)
        case 4: try decoder.decodeSingularStringField(value: &_storage._rootID)
        case 5: try decoder.decodeSingularStringField(value: &_storage._parentID)
        case 6: try decoder.decodeSingularStringField(value: &_storage._cid)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._isNotified)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._sendToChat)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._version)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._isThreadGroupTopic)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._isAnonymous)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._isReplyInThread)
        case 101: try decoder.decodeRepeatedStringField(value: &_storage._leftStaticResourceKeys)
        case 102: try decoder.decodeSingularBytesField(value: &_storage._thriftMessage)
        case 103: try decoder.decodeSingularInt64Field(value: &_storage._msgID)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._content {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._chatID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._rootID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._parentID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._cid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._isNotified {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      }
      if let v = _storage._sendToChat {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      }
      if let v = _storage._version {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._isThreadGroupTopic {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      }
      if let v = _storage._isAnonymous {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      }
      if let v = _storage._isReplyInThread {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      }
      if !_storage._leftStaticResourceKeys.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._leftStaticResourceKeys, fieldNumber: 101)
      }
      if let v = _storage._thriftMessage {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 102)
      }
      if let v = _storage._msgID {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 103)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Messages_PutMessageRequest, rhs: LarkNCExtensionPB_Messages_PutMessageRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._chatID != rhs_storage._chatID {return false}
        if _storage._rootID != rhs_storage._rootID {return false}
        if _storage._parentID != rhs_storage._parentID {return false}
        if _storage._cid != rhs_storage._cid {return false}
        if _storage._isNotified != rhs_storage._isNotified {return false}
        if _storage._sendToChat != rhs_storage._sendToChat {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._isThreadGroupTopic != rhs_storage._isThreadGroupTopic {return false}
        if _storage._isAnonymous != rhs_storage._isAnonymous {return false}
        if _storage._isReplyInThread != rhs_storage._isReplyInThread {return false}
        if _storage._leftStaticResourceKeys != rhs_storage._leftStaticResourceKeys {return false}
        if _storage._thriftMessage != rhs_storage._thriftMessage {return false}
        if _storage._msgID != rhs_storage._msgID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Messages_PutMessageRequest.Content: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Messages_PutMessageRequest.protoMessageName + ".Content"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "image_key"),
    31: .standard(proto: "is_origin_source"),
    3: .same(proto: "title"),
    4: .same(proto: "attachments"),
    5: .standard(proto: "is_notified"),
    7: .standard(proto: "audio_key"),
    8: .standard(proto: "audio_duration"),
    9: .standard(proto: "chat_id"),
    10: .standard(proto: "crypto_token"),
    6: .standard(proto: "file_key"),
    11: .standard(proto: "file_name"),
    12: .standard(proto: "file_mime"),
    13: .standard(proto: "file_size"),
    28: .standard(proto: "file_trans_mode"),
    29: .standard(proto: "sender_device_id"),
    14: .standard(proto: "rich_text"),
    15: .same(proto: "duration"),
    16: .standard(proto: "calendar_event"),
    17: .standard(proto: "attendees_count"),
    18: .standard(proto: "is_group_announcement"),
    19: .standard(proto: "audio_recognition"),
    20: .standard(proto: "card_type"),
    21: .same(proto: "actions"),
    22: .standard(proto: "card_extra"),
    26: .standard(proto: "card_min_version"),
    23: .same(proto: "location"),
    24: .standard(proto: "sticker_set_id"),
    25: .standard(proto: "sticker_id"),
    27: .standard(proto: "share_user_id"),
    30: .standard(proto: "todo_operation_content"),
  ]

  fileprivate class _StorageClass {
    var _text: String? = nil
    var _imageKey: String? = nil
    var _isOriginSource: Bool? = nil
    var _title: String? = nil
    var _attachments: [String] = []
    var _isNotified: Bool? = nil
    var _audioKey: String? = nil
    var _audioDuration: Int32? = nil
    var _chatID: String? = nil
    var _cryptoToken: String? = nil
    var _fileKey: String? = nil
    var _fileName: String? = nil
    var _fileMime: String? = nil
    var _fileSize: Int64? = nil
    var _fileTransMode: LarkNCExtensionPB_Messages_PutMessageRequest.Content.FileTransMode? = nil
    var _senderDeviceID: String? = nil
    var _richText: LarkNCExtensionPB_Entities_RichText? = nil
    var _duration: Int32? = nil
    var _calendarEvent: LarkNCExtensionPB_Entities_CalendarEvent? = nil
    var _attendeesCount: Int32? = nil
    var _isGroupAnnouncement: Bool? = nil
    var _audioRecognition: LarkNCExtensionPB_Entities_AudioRecognition? = nil
    var _cardType: LarkNCExtensionPB_Entities_CardContent.TypeEnum? = nil
    var _actions: Dictionary<String,LarkNCExtensionPB_Entities_CardAction> = [:]
    var _cardExtra: LarkNCExtensionPB_Entities_CardContent.ExtraType? = nil
    var _cardMinVersion: LarkNCExtensionPB_Entities_MinVersion? = nil
    var _location: LarkNCExtensionPB_Entities_LocationContent? = nil
    var _stickerSetID: String? = nil
    var _stickerID: String? = nil
    var _shareUserID: String? = nil
    var _todoOperationContent: LarkNCExtensionPB_Entities_TodoOperationContent? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _text = source._text
      _imageKey = source._imageKey
      _isOriginSource = source._isOriginSource
      _title = source._title
      _attachments = source._attachments
      _isNotified = source._isNotified
      _audioKey = source._audioKey
      _audioDuration = source._audioDuration
      _chatID = source._chatID
      _cryptoToken = source._cryptoToken
      _fileKey = source._fileKey
      _fileName = source._fileName
      _fileMime = source._fileMime
      _fileSize = source._fileSize
      _fileTransMode = source._fileTransMode
      _senderDeviceID = source._senderDeviceID
      _richText = source._richText
      _duration = source._duration
      _calendarEvent = source._calendarEvent
      _attendeesCount = source._attendeesCount
      _isGroupAnnouncement = source._isGroupAnnouncement
      _audioRecognition = source._audioRecognition
      _cardType = source._cardType
      _actions = source._actions
      _cardExtra = source._cardExtra
      _cardMinVersion = source._cardMinVersion
      _location = source._location
      _stickerSetID = source._stickerSetID
      _stickerID = source._stickerID
      _shareUserID = source._shareUserID
      _todoOperationContent = source._todoOperationContent
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._richText, !v.isInitialized {return false}
      if let v = _storage._calendarEvent, !v.isInitialized {return false}
      if !LarkHTTP.Internal.areAllInitialized(_storage._actions) {return false}
      if let v = _storage._todoOperationContent, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._text)
        case 2: try decoder.decodeSingularStringField(value: &_storage._imageKey)
        case 3: try decoder.decodeSingularStringField(value: &_storage._title)
        case 4: try decoder.decodeRepeatedStringField(value: &_storage._attachments)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._isNotified)
        case 6: try decoder.decodeSingularStringField(value: &_storage._fileKey)
        case 7: try decoder.decodeSingularStringField(value: &_storage._audioKey)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._audioDuration)
        case 9: try decoder.decodeSingularStringField(value: &_storage._chatID)
        case 10: try decoder.decodeSingularStringField(value: &_storage._cryptoToken)
        case 11: try decoder.decodeSingularStringField(value: &_storage._fileName)
        case 12: try decoder.decodeSingularStringField(value: &_storage._fileMime)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._fileSize)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._richText)
        case 15: try decoder.decodeSingularInt32Field(value: &_storage._duration)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._calendarEvent)
        case 17: try decoder.decodeSingularInt32Field(value: &_storage._attendeesCount)
        case 18: try decoder.decodeSingularBoolField(value: &_storage._isGroupAnnouncement)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._audioRecognition)
        case 20: try decoder.decodeSingularEnumField(value: &_storage._cardType)
        case 21: try decoder.decodeMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_CardAction>.self, value: &_storage._actions)
        case 22: try decoder.decodeSingularEnumField(value: &_storage._cardExtra)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 24: try decoder.decodeSingularStringField(value: &_storage._stickerSetID)
        case 25: try decoder.decodeSingularStringField(value: &_storage._stickerID)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._cardMinVersion)
        case 27: try decoder.decodeSingularStringField(value: &_storage._shareUserID)
        case 28: try decoder.decodeSingularEnumField(value: &_storage._fileTransMode)
        case 29: try decoder.decodeSingularStringField(value: &_storage._senderDeviceID)
        case 30: try decoder.decodeSingularMessageField(value: &_storage._todoOperationContent)
        case 31: try decoder.decodeSingularBoolField(value: &_storage._isOriginSource)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._text {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._imageKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if !_storage._attachments.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._attachments, fieldNumber: 4)
      }
      if let v = _storage._isNotified {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      }
      if let v = _storage._fileKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._audioKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
      if let v = _storage._audioDuration {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._chatID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
      if let v = _storage._cryptoToken {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      }
      if let v = _storage._fileName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      }
      if let v = _storage._fileMime {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      }
      if let v = _storage._fileSize {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._richText {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._duration {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 15)
      }
      if let v = _storage._calendarEvent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._attendeesCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      }
      if let v = _storage._isGroupAnnouncement {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      }
      if let v = _storage._audioRecognition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._cardType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 20)
      }
      if !_storage._actions.isEmpty {
        try visitor.visitMapField(fieldType: LarkHTTP._ProtobufMessageMap<LarkHTTP.ProtobufString,LarkNCExtensionPB_Entities_CardAction>.self, value: _storage._actions, fieldNumber: 21)
      }
      if let v = _storage._cardExtra {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 22)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._stickerSetID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      }
      if let v = _storage._stickerID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      }
      if let v = _storage._cardMinVersion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._shareUserID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 27)
      }
      if let v = _storage._fileTransMode {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 28)
      }
      if let v = _storage._senderDeviceID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 29)
      }
      if let v = _storage._todoOperationContent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
      if let v = _storage._isOriginSource {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 31)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Messages_PutMessageRequest.Content, rhs: LarkNCExtensionPB_Messages_PutMessageRequest.Content) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._text != rhs_storage._text {return false}
        if _storage._imageKey != rhs_storage._imageKey {return false}
        if _storage._isOriginSource != rhs_storage._isOriginSource {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._attachments != rhs_storage._attachments {return false}
        if _storage._isNotified != rhs_storage._isNotified {return false}
        if _storage._audioKey != rhs_storage._audioKey {return false}
        if _storage._audioDuration != rhs_storage._audioDuration {return false}
        if _storage._chatID != rhs_storage._chatID {return false}
        if _storage._cryptoToken != rhs_storage._cryptoToken {return false}
        if _storage._fileKey != rhs_storage._fileKey {return false}
        if _storage._fileName != rhs_storage._fileName {return false}
        if _storage._fileMime != rhs_storage._fileMime {return false}
        if _storage._fileSize != rhs_storage._fileSize {return false}
        if _storage._fileTransMode != rhs_storage._fileTransMode {return false}
        if _storage._senderDeviceID != rhs_storage._senderDeviceID {return false}
        if _storage._richText != rhs_storage._richText {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._calendarEvent != rhs_storage._calendarEvent {return false}
        if _storage._attendeesCount != rhs_storage._attendeesCount {return false}
        if _storage._isGroupAnnouncement != rhs_storage._isGroupAnnouncement {return false}
        if _storage._audioRecognition != rhs_storage._audioRecognition {return false}
        if _storage._cardType != rhs_storage._cardType {return false}
        if _storage._actions != rhs_storage._actions {return false}
        if _storage._cardExtra != rhs_storage._cardExtra {return false}
        if _storage._cardMinVersion != rhs_storage._cardMinVersion {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._stickerSetID != rhs_storage._stickerSetID {return false}
        if _storage._stickerID != rhs_storage._stickerID {return false}
        if _storage._shareUserID != rhs_storage._shareUserID {return false}
        if _storage._todoOperationContent != rhs_storage._todoOperationContent {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Messages_PutMessageRequest.Content.FileTransMode: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "LAN_TRANS"),
  ]
}

extension LarkNCExtensionPB_Messages_PutReadMessagesRequest: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PutReadMessagesRequest"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .standard(proto: "message_ids"),
    3: .standard(proto: "max_position"),
    4: .standard(proto: "thread_id"),
    5: .standard(proto: "thread_max_position"),
  ]

  public var isInitialized: Bool {
    if self._chatID == nil {return false}
    if self._maxPosition == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._chatID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.messageIds)
      case 3: try decoder.decodeSingularInt32Field(value: &self._maxPosition)
      case 4: try decoder.decodeSingularStringField(value: &self._threadID)
      case 5: try decoder.decodeSingularInt32Field(value: &self._threadMaxPosition)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._chatID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.messageIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.messageIds, fieldNumber: 2)
    }
    if let v = self._maxPosition {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._threadID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._threadMaxPosition {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Messages_PutReadMessagesRequest, rhs: LarkNCExtensionPB_Messages_PutReadMessagesRequest) -> Bool {
    if lhs._chatID != rhs._chatID {return false}
    if lhs.messageIds != rhs.messageIds {return false}
    if lhs._maxPosition != rhs._maxPosition {return false}
    if lhs._threadID != rhs._threadID {return false}
    if lhs._threadMaxPosition != rhs._threadMaxPosition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
// swiftlint:enable all
