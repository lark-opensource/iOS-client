// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: reactions.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// swiftlint:disable all

import Foundation
import LarkHTTP

/// command: PUT_REACTION = 25
/// 描述：添加Reaction请求
/// 场景：对某一条消息做出反应，点赞、+1等
public struct LarkNCExtensionPB_Reactions_PutReactionRequest {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 消息Id
  public var messageID: String {
    get {return _messageID ?? String()}
    set {_messageID = newValue}
  }
  /// Returns true if `messageID` has been explicitly set.
  public var hasMessageID: Bool {return self._messageID != nil}
  /// Clears the value of `messageID`. Subsequent reads from it will return its default value.
//  public mutating func clearMessageID() {self._messageID = nil}

  /// reaction类型： “点赞（thumb_up）”或者其他
  public var reactionType: String {
    get {return _reactionType ?? String()}
    set {_reactionType = newValue}
  }
  /// Returns true if `reactionType` has been explicitly set.
//  public var hasReactionType: Bool {return self._reactionType != nil}
  /// Clears the value of `reactionType`. Subsequent reads from it will return its default value.
//  public mutating func clearReactionType() {self._reactionType = nil}

  /// 自定义Reaction的更新策略版本
  public var reactionStrategyVersion: Int32 {
    get {return _reactionStrategyVersion ?? 0}
    set {_reactionStrategyVersion = newValue}
  }
  /// Returns true if `reactionStrategyVersion` has been explicitly set.
//  public var hasReactionStrategyVersion: Bool {return self._reactionStrategyVersion != nil}
  /// Clears the value of `reactionStrategyVersion`. Subsequent reads from it will return its default value.
//  public mutating func clearReactionStrategyVersion() {self._reactionStrategyVersion = nil}

  /// 仅当外部数据调导入Lark时使用，用于不推送reaction给用户，客户端不要填充。
  public var isFromMigration: Bool {
    get {return _isFromMigration ?? false}
    set {_isFromMigration = newValue}
  }
  /// Returns true if `isFromMigration` has been explicitly set.
//  public var hasIsFromMigration: Bool {return self._isFromMigration != nil}
  /// Clears the value of `isFromMigration`. Subsequent reads from it will return its default value.
//  public mutating func clearIsFromMigration() {self._isFromMigration = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _messageID: String? = nil
  fileprivate var _reactionType: String? = nil
  fileprivate var _reactionStrategyVersion: Int32? = nil
  fileprivate var _isFromMigration: Bool? = nil
}

// MARK: - Code below here is support for the LarkHTTP runtime.

fileprivate let _protobuf_package = "reactions"

extension LarkNCExtensionPB_Reactions_PutReactionRequest: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PutReactionRequest"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "message_id"),
    2: .standard(proto: "reaction_type"),
    3: .standard(proto: "reaction_strategy_version"),
    4: .standard(proto: "is_from_migration"),
  ]

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._messageID)
      case 2: try decoder.decodeSingularStringField(value: &self._reactionType)
      case 3: try decoder.decodeSingularInt32Field(value: &self._reactionStrategyVersion)
      case 4: try decoder.decodeSingularBoolField(value: &self._isFromMigration)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._messageID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._reactionType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._reactionStrategyVersion {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._isFromMigration {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Reactions_PutReactionRequest, rhs: LarkNCExtensionPB_Reactions_PutReactionRequest) -> Bool {
    if lhs._messageID != rhs._messageID {return false}
    if lhs._reactionType != rhs._reactionType {return false}
    if lhs._reactionStrategyVersion != rhs._reactionStrategyVersion {return false}
    if lhs._isFromMigration != rhs._isFromMigration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
// swiftlint:enable all
