// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: improto.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// swiftlint:disable all
import Foundation
import LarkHTTP

/// IM 协议报文头中cmd
public enum LarkNCExtensionPB_Improto_Command: LarkHTTP.Enum {
  public typealias RawValue = Int

  /// option allow_alias = true;
  /// 服务端发起的，向客户端的 push，客户端需要回应服务端 ACK，
  /// 对应的，客户端发起的，向服务端的 request，服务端要回应客户端 ACK
  case ack // = 1
  case connect // = 2
  case disconnect // = 3
  case ping // = 4

  /// 客户端发送消息
  case putMessage // = 5

  /// 服务器推送消息
  case pushMessages // = 6

  /// 拉取一个会话的消息
  case pullChatMessages // = 7

  /// 拉取 message_ids 的消息
  case pullMessagesByIds // = 8

  ///删除消息，撤回消息是的所有人不再可见
  case deleteMessage // = 9

  /// PUSH_READ_MESSAGES=10; //客户端通知服务端消息已读       [废弃 不符合规范的命名 由 PUT_READ_MESSAGES 替代]
  /// PUSH_MESSAGE_READ_STATE=11; 1100310//服务端通知客户端消息已读  [废弃 由 PUSH_MESSAGE_READ_COUNT 替代]
  case pullMessageReadState // = 12

  ///增加或者修改Chat信息 低频 一周日最高100以内
  case putChat // = 13

  /// PUT_CHAT_USER=14; //增加Chat成员 [废弃，由PUT_CHAT_CHATTER代替]
  /// DELETE_CHAT_USER=15; //删除Chat成员 [废弃，由DELETE_CHAT_CHATTER代替]
  /// PULL_CHATS=16; //拉取Chat列表 低频 [废弃，由 feed 和 pull recent chat 替代]
  /// PULL_CHAT_USERS=17; //拉取Chat成员   [废弃，由PULL_CHAT_CHATTERS替代]
  case pushChats // = 18

  /// PULL_USERS=20; //拉取用户信息 [废弃，由 PULL_CHATTERS_BY_IDS 替代]
  case pushUsers // = 21

  ///改变用户的信息
  case putUser // = 22

  ///拉取回复(帖子等)
  case pullMessageReplies // = 23

  ///拉取一批消息的回应
  case pullReactions // = 24

  ///增加回应
  case putReaction // = 25

  ///取消一条消息的一个回应
  case deleteReaction // = 26

  ///推送回应
  case pushReactions // = 27

  ///修改消息
  case patchMessage // = 28

  /// 服务端主动断开连接
  case serverDisconnet // = 30

  /// reserved, [已废弃] 客户端上传图片；改用：直接通过 http 访问 pan 服务上传，不走 pb
  case putImage // = 31

  /// 从管子同步 packet
  case syncPackets // = 32

  /// 拉取最近会话列表 新 feed 普及后可废弃
  case pullRecentChats // = 33

  /// 拉取联系人列表 [增加chatters字段]
  case pullContacts // = 37

  /// 拉取机器人列表
  case pullBots // = 38

  /// PUSH_CHAT_NEW_MESSAGE_COUNT = 39;    // 服务端推送 chat 的新消息数 [废弃]
  case pullUpdateChatters // = 39

  /// 客户端通知服务端消息已读
  case putReadMessages // = 40

  /// 服务端推送消息已读到客户端
  case pushMessageReadCount // = 41

  ///根据positions拉取消息
  case pullMessagesByPositions // = 43

  ///拉取Chat成员
  case pullChatChatters // = 44

  ///删除Chat成员
  case deleteChatChatter // = 45

  ///用id拉取聊天者
  case pullChattersByIds // = 46

  ///增加Chat成员
  case putChatChatter // = 47

  ///推送Chat聊天者
  case pushChatChatters // = 48

  ///推送可变chat字段
  case pushChatMutableInfo // = 49

  ///一次性创建多个单聊
  case putP2PChats // = 50

  /// 转发单条消息
  case putTransmitMessage // = 51

  ///转发单个对象，目前是收藏
  case putTransmitOne // = 52

  ///多选并逐条发送消息到目标群/话题群/话题中，没有转发关系，类似单聊建群同步消息
  case batchCopyMessages // = 53

  /// 批量发送单聊消息
  case batchPutP2PChatMessages // = 54

  /// 更新LAN_FILE 的传输状态
  case fileUpdateLanTransStatus // = 57

  ///LAN_FILE 转换成离线发送-同老文件消息
  case fileUpdateToOfflineMode // = 56

  /// PUT_DING = 52; // 客户端发送DING 废弃，由 urgent 相关替代
  case pullMessageTransmitChain // = 55

  /// 通过消息Position拉取消息ID (去除不可见消息和系统消息)
  case pullMessageIDByPosition // = 58

  /// 分享内容到Lark群，生成新的消息，从用户视角看和转发类似。
  case putShareAsMessage // = 59

  ///设置单个ChatSetting
  case patchChatSetting // = 60

  ///服务端下发单个ChatSetting
  case pushChatSetting // = 61

  ///拉取单个或多个ChatSetting
  case pullChatSettings // = 62

  ///拉取全部ChatSetting
  case pullAllChatSettings // = 63

  /// 用 id 拉取会话
  case pullChatsByIds // = 64

  ///推送员工离职消息
  case pushChatterResign // = 70

  ///根据 id 拉取 chatters 的离职状态
  case pullChattersResignStatus // = 71

  /// 修改群设置
  case patchGroupChat // = 72

  /// 检测某条消息自己是否已读
  case pullMessageMeReadState // = 73

  /// 推送 group 中消息的已读状态
  case pushGroupMessageReadState // = 74

  /// [已废弃]获取thread详情
  case pullThread // = 90

  /// 推送thread回复数量
  case pushThreadReplyCount // = 92

  /// [已废弃]拉取thread回复（根据是否参与者返回不同）
  case pullThreadReplies // = 93

  /// [已废弃]拉取thread reaction
  case pullThreadReactions // = 94

  ///推送 chatters 信息
  case pushChatters // = 95

  ///# 拉取用户 "未读@消息"
  case pullUnreadAtMessageIds // = 96

  /// 拉群用户特别关注消息
  case pullUnreadSpecialFocusMessageIds // = 99

  /// 拉取部门结构（单级，只有用户所在的那层结构）
  case pullDepartmentStructure // = 80

  /// 废弃
  case pullFullDepartmentStructure // = 81

  /// 拉取所属部门列表
  case pullSubordinateDepartments // = 83

  /// 拉取展开的部门接口 （多级部门结构，仅PC端调用）
  case pullUnfoldDepartmentStructure // = 84

  /// 拉取用户所管理的部门信息 （待废弃）
  case pullManagedDepartment // = 85

  /// 创建部门群
  case putDepartmentChat // = 86

  /// 获取用户所在的群聊
  case pullGroupChats // = 82

  /// 拉取群聊里可能 @ 的人
  case pullWantedAtChatter // = 75
  case processMultiPackets // = 77

  ///群主撤销成员到消息
  case deleteGroupMessage // = 78

  /// 分页拉取已读成员列表
  case pullMessageReadUsers // = 79

  /// 分页拉取未读成员列表
  case pullMessageUnreadUsers // = 87

  /// 无痕删除messageID对应的消息实体
  case noTraceRemoveMessageByID // = 97

  /// 推送无痕删除message
  case pushMessageNoTraceRemove // = 98

  /// 批量新增表情
  case putStickers // = 100

  /// 批量删除正在使用的表情包
  case deleteStickers // = 101

  /// 修改表情顺序
  case patchStickers // = 102

  /// 分页拉取用户表情
  case pullStickers // = 103
  case pushStickers // = 104

  /// 修改个人信息
  case patchChatterProfile // = 105
  case pushMultiThreadReplyCount // = 290
  case pushMultiChatMutableInfo // = 291
  case pushMultiGroupMessageReadState // = 293

  ///    PULL_CHATTERS_PER_CHATTER_PROPERTY = 141; // 拉取 chatter 的一些 per chatter 属性 [废弃]
  /// sticker set
  case pullStickerSetsStore // = 3100

  /// 拉取用户的所有表情包
  case pullStickerSets // = 3101

  /// 根据表情包id拉取所有表情
  case pullStickerSetsByID // = 3102

  /// 添加表情包
  case putStickerSets // = 3103

  /// 修改表情包顺序
  case patchStickerSets // = 3104

  /// 删除表情包
  case deleteStickerSets // = 3105

  /// 拉取用户表情包
  case pushStickerSets // = 3106

  /// 拉取表情包的分享卡片
  case pullStickerSetCard // = 3107

  /// 拉取表情包面板
  case pullStickerSetsTab // = 3108

  /// deprecated；修改 chatter 信息
  case patchChatter // = 106

  /// 对翻译结果的反馈
  case putTranslateFeedbacks // = 108

  /// 翻译相关
  case translateMessages // = 107

  /// 拉取之前的翻译结果
  case pullTranslateInfos // = 109
  case pushTranslateStatesNotice // = 110

  /// 拉取翻译的相关设置
  case pullTranslateLanguages // = 111

  ///修改翻译的目标语言
  case patchTranslateLanguage // = 112
  case pushTranslateLanguagesNotice // = 113

  ///修改译文展示规则
  case patchLanguagesConfiguration // = 114
  case pushLanguagesConfigurationNotice // = 115

  ///设置无需自动翻译的语言
  case disableAutoTranslateLanguage // = 116
  case pushDisableAutoTranslateLanguageNotice // = 117

  ///消息被翻译通知发送方
  case pushMessageFirstTranslatedToSenderNotice // = 118

  ///老接口，已经废弃，拉取是否需要弹框提示设置自动翻译语言
  case pullAutoTranslateGuidance // = 119

  ///老接口，已经废弃，拉取消息的所有语种的翻译结果
  case pullMessageTranslateInfos // = 120

  ///修改自动翻译全局开关
  case patchAutoTranslateGlobalSwitch // = 121

  ///修改自动翻译全局开关push
  case pushAutoTranslateGlobalSwitchNotice // = 122

  ///修改群聊自动翻译开关
  case patchAutoTranslateChatSwitch // = 123

  ///修改群聊自动翻译开关push
  case pushAutoTranslateChatSwitchNotice // = 124

  ///拉取群聊自动翻译开关
  case pullAutoTranslateChatSwitch // = 125

  ///翻译V2版本接口
  case translateMessagesV2 // = 126

  ///翻译V2版本push
  case pushTranslateStatesNoticeV2 // = 127

  /// 自定义Reaction相关 128 - 149
  case pullReactionsResource // = 128

  /// 拉取用户常用的n个reaction
  case pullUserReactions // = 129
  case pushUserReactions // = 130

  /// 拉取全量的reaction列表
  case pullUsedReactions // = 131
  case pushUsedReactions // = 132

  /// 133 - 135被Reaction之外其它模块占用
  case pullEmojiResources // = 136

  /// 推送自己的 reaction status
  case pushReactionStatus // = 137

  ///拉取个人状态推荐的表情
  case pullRecommendStatusIconResources // = 138

  /// 更新表情肤色
  case updateUserReactionSkin // = 139

  /// 推送用户表情肤色变化
  case pushUserReactionSkin // = 140

  /// 新拉取表情面板，旧的为PULL_USED_REACTIONS
  case pullEmojiPanel // = 141

  /// 拉取表情资源V2
  case pullEmojiResourcesV2 // = 142

  /// 按需拉去表情资源
  case pullEmojiResourcesByEmojiKeys // = 143

  /// 133 - 135被Reaction之外其它模块占用
  /// -----------------------------------------------------------------------------------------------------------------
  ///撤回静态资源消息通知相关
  case pushMessageStaticResourceDeleted // = 133

  ///逐条转发推送
  case pushBatchCopyMessages // = 134

  ///检查实体版本是否为最新
  case checkEntityVersion // = 135

  /// -----------------------------------------------------------------------------------------------------------------
  /// 翻译相关
  case patchAutoTranslateScope // = 150

  ///自动翻译内容push
  case pushAutoTranslateScopeNotice // = 151

  ///拉取自动翻译初次引导信息
  case pullAutoTranslateFirstGuideInfo // = 152

  ///push自动翻译初次引导信息
  case pushAutoTranslateFirstGuideInfoNotice // = 153

  ///记录自动翻译初次引导信息
  case patchAutoTranslateFirstGuideInfo // = 154

  ///获取消息的主语言
  case pullMessageLanguage // = 155

  ///Web XML翻译
  case translateWebXml // = 156

  ///图片翻译
  case translateImageKeys // = 157

  ///图片翻译推送
  case pushImageTranslationInfo // = 158

  ///文本语种检测
  case detectTextLanguage // = 159

  /// 更改用户网页翻译配置
  case patchWebTranslationConfig // = 160

  /// 推送用户网页翻译配置
  case pushWebTranslationConfig // = 161

  /// 修改语种的自动翻译范围
  case patchLanguageAutoTranslateScope // = 162

  /// 推送语种的自动翻译范围
  case pushLanguageAutoTranslateScope // = 163

  ///图片语种检测
  case detectImageLanguage // = 164

  /// 修改源语种的译文展示规则
  case patchLanguagesConfigurationV2 // = 165

  /// 推送源语种的译文展示规则
  case pushLanguagesConfigurationNoticeV2 // = 166

  /// 增加网页翻译场景不翻译的源语种
  case patchWebNotTranslateLanguages // = 167

  /// 推送网页翻译场景不翻译的源语种
  case pushWebNotTranslateLanguagesNotice // = 168

  /// 拉取网页翻译场景不翻译的源语种
  case pullWebNotTranslateLanguages // = 169

  /// 删除网页翻译场景不翻译的源语种
  case deleteWebNotTranslateLanguages // = 170

  /// 输入框边写边译
  case streamingTranslateMessage // = 172

  /// 与 PING 相对，是 PING 的回包指令
  case pong // = 200

  ///APP config相关
  case pullAppConfig // = 201

  /// 推送 app 配置
  case pushAppConfig // = 202

  /// 提醒客户端重拉配置
  case pushSettingsNotification // = 203

  /// App Config V2 相关
  case pullAppConfigV2 // = 210

  /// 拉取某一个配置源下的完整配置
  case pullStaticAppConfigV2 // = 211

  /// Security config相关
  case pullSecurityConfig // = 251

  /// 推送安全配置
  case pushSecurityConfig // = 252

  /// 群禁言相关
  case pullChatPostUser // = 253

  /// 设置群发言模式
  case patchChatPostUser // = 254

  /// 批量获取用户在群内是否可以发言
  case pullAllowPostChat // = 255

  /// 检查试图创建的公开群群名是否已存在
  case checkPublicChatNameExist // = 256

  /// 新建入群申请
  case putAddChatChatterApply // = 257

  /// 拉取群加人申请
  case pullAddChatChatterApply // = 258

  /// 更新向群组里加人的申请
  case patchAddChatChatterApply // = 259

  /// 撤回群内加人
  case disableChatShared // = 270

  /// 检查给定的chatter_ids是否在目标群内
  case checkChattersInChat // = 271

  /// 群公告展示相关
  case putChatAnnReadTime // = 280

  /// 批量获取群公告用户阅读时间
  case pullChatsAnnReadTime // = 281
  case pushChatAnnReadTime // = 282

  /// 300-400 租户信息 tenant 相关
  case pullTenantsByIds // = 300

  /// 401-499 chat新command相关
  case pushChatChatterTag // = 401

  /// 被踢出信息
  case pullChatChatterKickInfo // = 402

  /// 实体中的chatter是否还在群中（是否支持撤回）
  case checkWithdrawPickEntitiesInChat // = 403

  /// 拉取租户维度的群成员上限设置
  case pullChatMemberSetting // = 404

  /// 是否允许建群、入群等群成员变化行为
  case pullChangeGroupMemberAuthorization // = 405

  ///500-600 收藏夹
  case putFavorite // = 500

  /// 拉取收藏消息
  case pullFavorites // = 501

  /// 移除收藏消息
  case removeFavorite // = 502

  /// 拉取全部收藏
  case pullAllFavorite // = 503

  ///合并收藏
  case putMergeMessageFavorite // = 504

  /// 拉取客户端新版本信息
  case pullNewVersion // = 600

  /// 拉取客户端新版本的发布日志
  case pullVersionNote // = 601

  /// 客户端上报下载行为
  case patchDownloadStatus // = 602

  ///700-800 edu相关命令
  case putHomeSchoolChat // = 700

  /// 获取可以创建家校群的班级
  case getHomeSchoolChatClass // = 701

  ///  拉取用户能够管理的节点（有父子关系的节点只会暴露父节点）
  case pullManagedNodes // = 702

  ///  拉取学校的节点（双层，含子节点）
  case pullSchoolNode // = 703

  /// 入群预检查，筛除不符合入群条件的用户
  case eduJoinChatPreCheck // = 704

  /// 用户加入家校群
  case eduJoinChat // = 705

  ///801-999 B2B相关命令
  case pullCollaborationStructure // = 801

  ///拉取关联关系租户
  case pullCollaborationTenant // = 802

  ///判断用户关联关系可见性
  case authUserCollaborationVisible // = 803

  ///拉取B2B邀请二维码
  case pullCollaborationInviteQrcode // = 804

  /// 1000-1099 FEED
  case pullFeedCards // = 1000

  /// 修改 feed card 状态（inbox/done）
  case patchFeedCards // = 1001

  /// 推送 feed cards
  case pushFeedCards // = 1002

  /// 拉取 feed card 在 inbox/done 里
  case pullFeedCardsFeedTypes // = 1003

  /// 把 feed card 顶到最前面，常用的场景是搜索后调用
  case peakFeedCard // = 1004

  /// 将 feed 置为稍后处理
  case putFeedCardDelayed // = 1005

  /// 将 feed 移入会话盒子
  case putFeedCardsIntoBox // = 1006

  /// 将 feed 移出会话盒子
  case deleteFeedCardsFromBox // = 1007

  /// 拉稍后处理的 feed list
  case pullFeedCardsDelayed // = 1008

  /// 通过 card id 拉取 feed cards
  case pullFeedCardsByIds // = 1009

  /// 拉取自动放进会话盒子的横幅列表
  case pullNewBoxFeedCards // = 1010

  /// 清理新进入会话盒子的横幅
  case cleanNewBoxFeedCards // = 1011

  /// 推送清理新进入会话盒子的横幅
  case pushCleanNewBoxFeedCards // = 1012

  /// 客户端冷启动调用接口
  case putUserColdBoot // = 1014

  /// 拉取推荐勿扰弹窗信息
  case pullMutePopupInfo // = 1015

  /// 提交“推荐勿扰弹窗”展示事件
  case putShowMutePopup // = 1016

  /// 批量 mute feed card
  case putBatchMuteFeedCards // = 1017

  /// 创建新分组
  case createFeedGroup // = 1018

  /// 通过关键词搜索 创建新关键词分组
  case pullKeywordsFeedCards // = 1019

  /// 同步 feed group 数据
  case pullFeedGroups // = 1020

  /// 拉取 item 发生变化的 group ids
  case pullItemChangedGroups // = 1021

  /// 拉取 feed group item 数据
  case pullFeedGroupItems // = 1022

  /// 更新 feed groups
  case updateFeedGroups // = 1023

  /// 当 feed group 发生变更时 push
  case pushFeedGroups // = 1024

  /// 确认删除 feed card
  case confirmDeleteFeedCards // = 1025

  /// 推送删除的 feed card
  case pushDeletedFeedCards // = 1026

  /// 创建、更新、删除标记
  case updateFlags // = 1027

  /// 拉取同步标记数据
  case pullFlags // = 1028

  /// 创建、更新、删除标记异步推送
  case pushFlags // = 1029

  /// 置顶相关
  case putShortcuts // = 1100

  /// 删除Feed置顶
  case deleteShortcuts // = 1101

  /// 移动Feed置顶位置
  case patchShortcuts // = 1102

  /// 拉取Feed置顶
  case pullShortcuts // = 1103

  /// 推送Feed置顶
  case pushShortcuts // = 1104

  /// 新消息相关指令
  case removeMessagesFromUser // = 1200

  /// 合并转发指令
  case putMergeForwardMessage // = 1201

  ///拉取系统消息多语言模板
  case pullSystemMessageTemplate // = 1202

  /// 为同账号内的关联用户推送未读 badge 数
  case pushBadgeToRelatedUsers // = 1203

  /// 拉取 badge 数
  case pullRelatedUsersBadge // = 1204

  /// 消息通知-故障排除-发送测试消息
  case putDiagnoseMessage // = 1205

  /// 消息通知-故障排除-服务检查配置
  case diagnoseMessageConfig // = 1206

  /// 上报诊断信息给服务端
  case sendDiagnosticEvent // = 1207

  /// 消息url预览相关
  case deleteMessageURLPreview // = 1301

  /// 提交 URL 预览
  case putURLPreview // = 1304

  /// 拉消息预览
  case pullMessagePreviews // = 1310

  /// 推送消息预览
  case pushMessagePreviews // = 1311

  /// deprecated, 用 cmd 1314 代替
  case pullURLPreviewChatters // = 1312

  /// 妙记预览上直接修改授权
  case grantMinutes // = 1313

  /// URL 预览人员列表组件主动拉 chatters 信息
  case pullURLPreviewChattersList // = 1314

  /// 同步生成 preview entity 预览体, 一般用于 [编辑框内预览]
  case generateURLPreviewEntity // = 1315

  /// 根据场景实体 ID 批量拉取预览
  case getURLPreview // = 1316

  /// URL 预览交互事件
  case urlPreviewActionCallback // = 1317

  /// 推送实体挂在的某一URL预览的更新
  case pushURLPreview // = 1318

  /// 推送实体所有URL预览
  case pushURLPreviewEntries // = 1319

  /// 拉取URL预览模版
  case pullURLPreviewTemplates // = 1320

  /// 语音消息隐藏识别结果
  case hideAudioRecognitionResult // = 1302
  case pushAudioRecognitionResult // = 1303

  /// 语音识别
  case putSpeechRecognition // = 1305
  case putAudioMessageRecognition // = 1306
  case pushAudioMessageRecognitionResult // = 1307

  /// 通过 url 获取 Video 播放信息
  case pullVideoInfo // = 1350

  ///1600-1699 小组相关
  case putTopicGroup // = 1600

  ///小组特别关注
  case registerTopicGroupFavorite // = 1601

  ///取消小组特别关注
  case cancelTopicGroupFavorite // = 1602

  ///推送小组feed card
  case pushTopicGroupFeedCards // = 1603

  ///加入小组
  case putTopicGroupMember // = 1604

  /// 2000-2069 appcenter
  case pullApplist // = 2000
  case putRecentapp // = 2001

  /// 功能与PULL_APPLIST一致，回包结构发生了变化
  case pullTenantAppcenter // = 2002
  case searchAppcenter // = 2003

  /// 2070-2079 消息卡片小程序utils
  case cardJsonToPb // = 2070

  /// 发送小程序消息卡片
  case sendPreviewCard // = 2071

  /// 推送调试信息
  case gadgetDevToolPush // = 2072

  /// 2080-2097 临时消息
  case pushEphemeralMessage // = 2080

  /// 批量拉取临时消息
  case pullEphemeralMessage // = 2081

  ///推送更新临时消息
  case pushEphemeralMessageUpdate // = 2082

  ///推送删除临时消息
  case pushEphemeralMessageDelete // = 2083

  /// 应用分享小项目
  case appShareV2 // = 2098
  case appShare // = 2099

  /// 2100-2199 && 2318 VoIP
  case putE2EeVoiceCall // = 2100
  case patchE2EeVoiceCall // = 2101
  case pushE2EeVoiceCallNotice // = 2102
  case pullE2EeVoiceCalls // = 2103
  case putE2EeVoiceDeviceToken // = 2104
  case putE2EeVoiceFeedbacks // = 2105
  case pullE2EeVoiceCallByCallIds // = 2106

  /// 2200-2399 Video Chat & Mutex
  /// deprecated
  case putVideoConf // = 2200

  /// deprecated
  case patchVideoConf // = 2201

  /// deprecated
  case pushVideoConfNotice // = 2202

  /// deprecated
  case pullVideoConfs // = 2203
  case registerClientInfo // = 2204
  case createVideoChat // = 2205

  /// deprecated
  case joinVideoChat // = 2206
  case updateVideoChat // = 2207
  case inviteVideoChat // = 2208
  case shareVideoChat // = 2209
  case notifyVideoChat // = 2210
  case searchVcChatters // = 2211
  case getChattersVcStatus // = 2212
  case pullVideoChatConfig // = 2213
  case pushVideoChatConfig // = 2214
  case pushVideoChatNotice // = 2215
  case replyVideoChatNotice // = 2216
  case joinCalendarGroupMeeting // = 2217
  case putFeedbacks // = 2218

  /// Cmd 2219 - 2227 are used by client <-> rust
  case pullVideochatByShareCode // = 2219
  case putByteviewHeartbeat // = 2300

  /// Cmd 2301 - 2305 are used for client <-> rust
  case notifyVideoChatExtra // = 2306

  /// 给vc单品的推送
  case notifyStandaloneVcApplication // = 2307
  case hostManage // = 2308
  case hostChangeSettings // = 2309
  case participantChangeSettings // = 2310
  case shareScreen // = 2311
  case pullVideoChatInMeetingInfo // = 2312

  /// Cmd 2313 for client <-> rust
  case previewJoinVideoChat // = 2314
  case forceLeaveVideoChat // = 2315
  case querySelfStatus // = 2316
  case putVideoChatFeedbacks // = 2317

  /// VoIP Pull Config
  case pullE2EeVoiceCallConfig // = 2318
  case rejoinVideoChat // = 2321
  case joinByMeetingNumber // = 2323
  case shareScreenToRoom // = 2324
  case pullPreVideoChatSetting // = 2325

  /// calendar
  case inviteCalendarMeeting // = 2327
  case getCalendarInfo // = 2328
  case getCalendarGroup // = 2329

  /// vc follow
  case shareFollow // = 2330

  /// 共享文档的人的操作action传给服务端
  case syncFollowAction // = 2331

  /// 查询是否可以加入视频会议
  case queryMeetingJoinable // = 2332

  ///加入视频会议通用入口
  case joinMeeting // = 2333

  /// 向群长连推送会议状态发生改变的命令字
  case pushAssociatedVcStatus // = 2334

  /// 获取与某ID绑定的视频会议信息
  case getAssociatedVc // = 2335

  /// dialtest
  case pullDialTestSuite // = 2336

  /// 上报测试执行情况
  case reportDialTestStatus // = 2337

  /// 拨测相关推送
  case notifyDialTestAction // = 2338

  /// subtitle
  case pullSubtitles // = 2339

  /// sharebox
  case getShareCodeInfo // = 2340

  /// 获取与某ID绑定的视频会议状态
  case getAssociatedVcStatus // = 2341

  /// 加入面试会议
  case joinInterviewGroupMeeting // = 2342

  /// Record meeting
  case recordMeeting // = 2343

  /// Get chatters with CI order
  case getChattersWithCiOrder // = 2344

  /// 会中邀请搜索用户
  case searchViewParticipants // = 2345

  /// vc follow
  case requestFollowToken // = 2346
  case grantFollowToken // = 2347
  case requestFollowPerm // = 2348

  /// 会中搜索文档
  case vcQueryDocs // = 2349

  /// 推送对VideoChatNotice的更新动作
  case pushVideoChatNoticeUpdate // = 2350

  /// vc preCheck
  case joinMeetingPreCheck // = 2351

  /// vc im
  case sendVideoChatInteractionMessage // = 2352

  /// 视频会议中拉取消息
  case pullVideoChatInteractionMessage // = 2353

  /// 互动消息推送
  case pushVideoChatInteractionMessages // = 2354

  /// poc media
  case publishMediaStream // = 2360

  /// 通知管理员升级付费方案
  case sendUpgradePlanNotice // = 2370
  case pushVideoChatPrompt // = 2371
  case replyVideoChatPrompt // = 2372
  case adjuestMeetingDuration // = 2373
  case pullViewUserSetting // = 2374
  case patchViewUserSetting // = 2375
  case pushViewUserSetting // = 2376
  case submitGenericFeedback // = 2377

  /// 获取预约信息
  case getReservation // = 2378

  /// Live Meeting
  case liveMeetingAction // = 2380

  /// 请求直播信息
  case liveMeetingExtraInfo // = 2381

  /// 加入会议前检查Live状态, 目前用于合规
  case liveMeetingJoinPreCheck // = 2382

  /// 会议直播，账号绑定信息
  case liveMeetingAccountBindingInfo // = 2383

  /// 会议直播，设置账号绑定以及第三方推流地址
  case liveMeetingStreamSetting // = 2384

  /// 拉取直播政策文案
  case liveMeetingFetchLivePolicy // = 2385

  /// PC端获取实名认证二维码
  case liveMeetingGetVerificationQrCode // = 2386

  /// PC端轮询实名认证状态
  case liveMeetingPollVerificationStatus // = 2387

  /// 客户端根据token获取验证信息
  case liveMeetingGetVerificationInfo // = 2388

  /// 客户端二要素验证
  case liveMeetingVerifyTwoElement // = 2389

  ///客户端活体认证成功回调
  case liveMeetingLivenessVerificationCallback // = 2390

  /// 判断是否需要实名认证
  case liveMeetingGetLivePermission // = 2391

  /// 获取调用活体认证的ticket
  case liveMeetingGetVerificationTicket // = 2392

  /// 拉取直播设置面板状态
  case liveMeetingPullSetting // = 2393

  /// account_badge 相关
  case pullAccountBadges // = 2500

  /// 推送用户关联的其他用户的 badge 个数变化
  case pushAccountBadges // = 2501

  /// 清零当前用户的 account_badge
  case clearAccountBadge // = 2502

  /// 3000 - 4000 email
  case putEmail // = 3000

  /// 拉取邮件收件人／发件人列表
  case pullEmailMembers // = 3001

  /// 修改邮件收件人／发件人
  case patchEmailMembers // = 3002
  case pushEmailMembers // = 3003
  case pullEmailsByIds // = 3004
  case patchEmail // = 3005
  case pushEmail // = 3006

  /// 拉取邮件所有的成员
  case pullEmailChatters // = 3007

  /// 获取用户在邮件中是收件人还是抄送人
  case pullEmailRole // = 3008

  /// 用户在邮件里输入 @,拉取默认的推荐用户
  case pullEmailWantedAtChatters // = 3009

  /// mail 查询发信人的对外发信权限
  case mailGetSendExternalLimit // = 3010

  /// 通过审批实例ID查询邮件eml
  case mailGetEmlByInstanceCode // = 3011

  /// Mail
  case createMail // = 3500

  /// Create mail draft.
  case updateMailDraft // = 3501

  /// Get mail inbox.
  case getMailInbox // = 3502

  /// Get threads by ID.
  case getThreadsByID // = 3503

  /// Push new thread and mail
  case pushThreadForNewMail // = 3504

  /// Update message or thread status.
  case updateMailStatus // = 3505
  case cloneDriveFile // = 3506

  /// Add a change of a mail entity.
  case mailAddChange // = 3507

  /// Get filtered thread meta with pagination.
  case getFilteredThreads // = 3508

  /// new command to get thread
  case getThreadsByIDWithMeta // = 3509

  /// new command to create outgoing mail
  case createOutgoingMail // = 3510

  /// apply rule (auto-filter) to existing emails
  case mailApplyRule // = 3511

  /// new batch API for search only
  case mailGetMessagesByThreadIdsForSearch // = 3512

  /// new messages notification.
  case mailNewMessagesRequest // = 3513
  case markAllAsReadRequest // = 3514
  case mailGetRawMessages // = 3515
  case mailInitSync // = 3600
  case getMailThreadMeta // = 3601
  case getMailMessages // = 3602
  case mailPushChange // = 3603
  case getMailThreadMetaV2 // = 3604
  case getLabelListByUser // = 3605
  case getMailMessageMeta // = 3606
  case getMailMessageMetaWithFolderDisable // = 3607
  case getMailMessageGroups // = 3608
  case mailAtContact // = 3650
  case mailSimpleSearchRequest // = 3651
  case mailSimpleSearchResponse // = 3652
  case mailGetSearchHistoryRequest // = 3653
  case mailStoreSearchHistoryKeyword // = 3654
  case mailDeleteSearchHistory // = 3655
  case mailRulePreviewSearchRequest // = 3656
  case mailContactSearch // = 3657
  case mailAdvancedSearch // = 3658

  /// result of async work in the background, push to client
  case mailChangeAsyncResult // = 3659

  /// filter unread mail thread list
  case getUnreadMailThreadMeta // = 3660
  case getMailThreadTimestamp // = 3661

  /// batch get thread meta by thread biz ids
  case mailGetThreadMetaByThreadIds // = 3662

  /// batch get thread full by thread biz ids
  case mailGetThreadFullByThreadIds // = 3663

  /// make the limit of GET_MAIL_MESSAGES
  case mailGetMailMessageFullByMessageIds // = 3664

  /// make the limit of MAIL_GET_MESSAGE_BODY_REQUEST
  case mailGetMailMessageBodyByMessageIds // = 3665

  /// make the limit of MAIL_GET_MESSAGE_SUMMARY_REQUEST
  case mailGetMailMessageSummaryByMessageIds // = 3666

  /// get mail sync status, so we can judge init sync or use changlog if too many changelogs
  case mailGetSyncStatus // = 3667

  /// batch get message meta by message biz ids
  case mailGetMessageMetaByMessageIds // = 3668

  /// delete mail external contact
  case mailDeleteMailExternalContact // = 3669

  /// Get mail settings.
  case getMailSettings // = 3700

  /// Update mail settings.
  case updateMailSettings // = 3701

  /// Push mail settings.
  case pushMailSettings // = 3702
  case mailChangeOauthStatus // = 3703

  /// when mail oauth set, push to client
  case pushMailOauthStatus // = 3704
  case mailUpdateClientTabSetting // = 3705
  case mailGetGoogleAuthURL // = 3706

  /// judge if a tenant can share file to external or not
  case mailGetCanShareToExternal // = 3707

  /// unbind gmail client account
  case mailUnbindGmailAccount // = 3708

  /// get all domains
  case mailGetTenantDomains // = 3709

  ///Push mail unread count
  case pushMailUnreadCount // = 3710

  /// Pull mail card
  case pullMailCard // = 3711

  /// Get mail card
  case getMailCard // = 3712

  /// Send mail card
  case sendMailCard // = 3713

  /// Add mail change log, provided only for PSM because thrift have no MailChangeLog define.
  case addMailChangeLog // = 3714
  case deleteLargeFile // = 3715

  /// get label threads count
  case mailGetLabelThreadsCount // = 3716

  /// get long running task
  case mailGetLongRunningTask // = 3717

  /// user stop long running task
  case mailCancelLongRunningTask // = 3718

  /// smtp/imap client for third permission Setting Push
  case mailPushClientForThirdServicePermissionConfig // = 3719

  /// Email External tenant related
  case mailGetConfig // = 3720

  /// Email User Engagement Settings
  case mailGetUserEngagementSettings // = 3721
  case mailUpdateUserEngagementSettings // = 3722

  /// Email gmail client alias
  case mailSyncAlias // = 3723
  case mailCreateRuleRequest // = 3750
  case mailUpdateRuleRequest // = 3751
  case mailDeleteRuleRequest // = 3752
  case mailGetRulesRequest // = 3753
  case mailRuleControlRequest // = 3754
  case mailAdjustRuleOrderRequest // = 3755

  /// rule- autoTransfer
  case mailSendAutoTransferAuthMail // = 3756
  case mailGetAutoTransferEmail // = 3757
  case pushMailRelatedBizID // = 3778
  case mailShareMailAttachmentRequest // = 3779
  case mailShareCreatePermRequest // = 3780
  case mailShareUpdatePermRequest // = 3781
  case mailShareDeletePermRequest // = 3782
  case mailShareGetThreadCollaboratorsInfoRequest // = 3783
  case mailShareGetMessageFullRequest // = 3784
  case mailShareGetShareGroupsRequest // = 3785
  case mailShareCreateDocRequest // = 3786
  case mailShareGetShareGroupInfoRequest // = 3787
  case mailShareCreateShareDraftRequest // = 3788
  case mailShareUpdateDraftRequest // = 3789
  case mailShareGetMailSettings // = 3790
  case mailGetMessageSummaryRequest // = 3791
  case mailGetMessageBodyRequest // = 3792
  case mailShareSearchMemberRequest // = 3793
  case mailShareUpdateCollaboratorsRoleRequest // = 3794
  case mailShareCreateGroupRequest // = 3795

  /// Migration related 3796-3800
  case mailGetMigrationStatus // = 3796

  /// Mailing list related 3801-3810, 3860-3870
  case mailGetGroupSetting // = 3801
  case mailSetGroupSetting // = 3802
  case mailPushGroupSetting // = 3803
  case mailDeleteGroupSetting // = 3804
  case mailGetConfigRequest // = 3805

  /// 获取我管理的邮件组列表
  case mailGetManagedGroups // = 3806

  /// 获取邮件组详情信息
  case mailGetGroupDetail // = 3807

  /// 更新邮件组信息
  case mailUpdateGroup // = 3808

  /// 分页获取邮件组成员列表
  case mailListGroupMembers // = 3809

  /// 分页获取公共邮箱列表
  case mailListSharedEmailAccounts // = 3810

  /// Mail Recall
  case mailRecallStatus // = 3811
  case mailRecallDetail // = 3812

  /// Mail imap migration
  case pushMailImapMigrationStatus // = 3820
  case mailImapMigrationGetStatus // = 3821
  case mailImapMigrationUpdateToken // = 3822
  case mailImapMigrationUpdateUids // = 3823
  case mailImapMigrationGetOldMessageTask // = 3824
  case mailImapMigrationUploadOldMessage // = 3825
  case mailImapMigrationUploadNewMessage // = 3826
  case mailImapMigrationQueryProgress // = 3827
  case mailImapMigrationDecodeMessage // = 3828
  case mailImapMigrationGetMailboxInfos // = 3829
  case mailImapMigrationBlocked // = 3830
  case pushMailImapMigrationOldestInfo // = 3831
  case mailImapMigrationGetHistoryDoneInfo // = 3832
  case mailImapMigrationGetAllAccountStatus // = 3833
  case mailImapMigrationVerifyToken // = 3834

  /// Mail Translation
  case mailTranslation // = 3840

  /// Mail Unsubscription
  case mailUnsubscribe // = 3843

  /// Mail smart replies
  case mailGetSmartReply // = 3845

  /// Mail get is target user for smart inbox
  case mailGetIsSmartInboxTargetUser // = 3846

  /// Mail IMAP
  case mailGetAuthorizationCodes // = 3847
  case mailCreateAuthorizationCode // = 3848
  case mailDeleteAuthorizationCode // = 3849
  case mailGetThirdPartyClientSetting // = 3851

  /// Mail Exchange Client Oauth
  case mailGetExchangeAuthURL // = 3850

  /// Mail Push Mail Setting Change Notification
  case pushMailSettingChange // = 3852
  case mailGetMessageSendStatus // = 3853
  case mailPullEnterpriseEmail // = 3854

  /// Mail MCopyFile
  case mailMultiCopyFile // = 3855

  /// shared account mail setting
  case getSharedMailSettings // = 3856

  /// Update mail settings.
  case updateSharedMailSettings // = 3857

  /// Push mail settings.
  case pushSharedMailSettingChange // = 3858

  /// mail get clear client dirty info
  case mailGetClearInfoChangeList // = 3859

  /// Mailing list related 3801-3810, 3860-3870
  case mailCheckGroupMemberExistence // = 3860

  /// 获取邮件组成员信息
  case mailCheckGroupMemberInfo // = 3861

  /// 获取用户是否具有邮件组管理权限
  case mailCheckUserGroupPermission // = 3862

  ///多签名与企业签名
  case mailCreateMailUserSignature // = 3870
  case mailUpdateMailUserSignature // = 3871
  case mailApplyMailSignature // = 3872
  case mailDeleteMailUserSignature // = 3873
  case mailQueryMailSignature // = 3874
  case mailGetUserField // = 3875

  ///判断图片tokens的权限
  case mailCheckImageTokensPermission // = 3876

  /// 日历拉取联系人标签
  case mailGetMailContactTypeByEmailAddress // = 3877

  /// 加密消息相关 4000 - 5000
  /// 消息部分 4000 - 4100
  case putCryptoMessage // = 4000

  /// 客户端确认收到密聊消息
  case ackCryptoMessages // = 4001
  case pullCryptoMessageDetailByIds // = 4002
  case putSystemMessageForScreenshots // = 4003

  /// 密聊会话部分 4100 - 4300
  case putCryptoP2PChat // = 4101

  /// 创建密聊群聊
  case putCryptoGroupChat // = 4102

  /// 密聊群中加人
  case putCryptoChatChatter // = 4103

  /// 从密聊群中删人
  case deleteCryptoChatChatter // = 4104
  case disbandCryptoChat // = 4105

  /// 下发新设备上线消息
  case pushNewDeviceOnline // = 4106

  /// (设定会话内每条消息的约定倒计时值)
  case putCryptoBurnedTime // = 4107

  /// 增量发密聊消息
  case putCryptoMessageMain // = 4108

  /// 补偿发送密聊消息
  case putCryptoMessageMissingContent // = 4109

  /// 密钥2.0 用户设备身份公钥注册
  case putUserDeviceIpk // = 4111

  /// 密钥2.0 用户设备身份公钥变更推送
  case pushUserDeviceIpkChange // = 4112

  ///密钥2.0 发送消息
  case putSecretMessage // = 4113

  /// 密聊2.0 拉群内用户设备身份公钥
  case getUsersIpksByChat // = 4114

  /// 密聊2.0 群成员变化时候，推送IPK变化
  case pushChatDeviceIpkChange // = 4115

  /// 呼叫中心
  case pullEmergencyCallNumber // = 4200
  case putEmergencyCallReason // = 4201

  /// 词体识别
  case pullAbbreviationsByIds // = 4301

  /// 提交缩写词反馈
  case putAbbreviationFeedbacks // = 4302

  /// 根据id获取实体词卡片
  case getAbbreviationCard // = 4303

  /// 纠正消息中baike引用标注
  case refreshMessageBaikeRefs // = 4304

  /// 拉取用户反馈页面的文案内容
  case getFeedback // = 4305

  /// 新 chat 相关指令 5000-6000
  case putChatterViaShare // = 5000

  ///拉取会话角色
  case pullChatsRole // = 5001

  /// 拉取加群|加好友申请 目前是只有跨租户好友申请，入群申请放在了另外的接口 suite/facade/contact
  case pullChatApplications // = 5002

  /// 下发加群|加好友申请 （只有好友申请）suite/facade/contact
  case pushChatApplication // = 5003

  /// 处理加群|加好友申请 （只有好友申请）suite/facade/contact
  case processChatApplications // = 5004

  /// 重置好友申请连接 token lark/facade/chatter
  case resetContactToken // = 5005

  /// 申请加好友 suite/facade/contact
  case putContactApplication // = 5006

  /// 加群|加好友申请已读
  case readApplications // = 5007

  /// 拉取个人联系人列表 原来的 37 废弃
  case pullPersonalContacts // = 5008

  /// 下发个人联系人变化
  case pushContacts // = 5009

  /// 拉未读加好友申请 badge 数
  case pullUnreadChatApplicationsBadge // = 5010

  /// 删除一个外部联系人
  case deleteContact // = 5011

  /// 获取自己的好友申请链接 token
  case pullContactToken // = 5012

  /// 推送好友申请 token；重置好友申请链接 token 后需要同步更新到自己的各个设备上
  case pushContactToken // = 5013

  /// 更改联系人设置
  case putContactSetting // = 5014

  /// 推送联系人设置
  case pushContactSetting // = 5015

  /// 获取联系人设置
  case pullContactSetting // = 5016

  /// 获取联系人个人名片页
  case pullUserProfile // = 5017

  /// 发送用户注册邀请
  case putUserInvitation // = 5018

  /// 通过联系方式搜索 c 端用户
  case searchUserByContactPoint // = 5019

  /// 获取群分享的token
  case pullChatQrcodeToken // = 5020

  /// 获取扫码人扫描结果
  case pullChatQrcodeInfo // = 5021

  /// user 通过扫码进群
  case putChatterViaQrcode // = 5022

  /// 获得 chat 中某个 chatter 及其元信息
  case pullChatChatterByIds // = 5023

  /// 获取chat的安全配置
  case pullChatSecurityConfig // = 5024
  case pullChatNoTraceRemovedPositions // = 5025

  ///批量拉用户名片页
  case pullUserProfiles // = 5026

  /// 拉取部门群中非部门的成员
  case pullChatNonDepartmentalChatters // = 5027

  ///拉取chat side bar 相关配置。
  case pullChatSidebarButtons // = 5028

  /// 拉取chat内成员变动历史
  case pullChatJoinLeaveHistory // = 5029

  ///批量自己和其他用户是否有单聊存在
  case checkP2PChatsExistByUser // = 5030

  /// 获取联系人个人名片页
  case pullUserProfileV2 // = 5031

  /// 批量获取联系人个人名片页
  case batchPullUserProfileV2 // = 5032

  /// 区分渠道的拉取自己的好友申请链接 token
  case pullContactTokensForSharing // = 5033

  /// 检查mobiles和emails是不是和某个/某些用户绑定，不返回详细信息，只返回是否，查联系方式而不是登录凭证
  case checkContactIsLinkedToUser // = 5034

  /// 用户修改自己的 Profile 中可自定义的部分
  case patchSelfUserProfile // = 5035

  /// 用户修改自己给别人的备注
  case patchUserMemo // = 5036

  /// Profile 拉 Section Tab 类型数据接口
  case pullUserProfileSectionTab // = 5037

  /// 用户请求重置头像，返回重置头像 key，不实际更换头像
  case resetUserAvatar // = 5038

  /// 用户重置头像结果上报，确认重置则更新头像，取消重置则删除生成的图片资源
  case putResetUserAvatarResult // = 5039

  ///拉取外部联系人是都可以被拉群
  case pullExternalChattersInSameChatAuth // = 5040

  ///是否已经在群
  case pullAlreadyInChat // = 5041
  case pullWorkStatus // = 5050
  case deleteWorkStatud // = 5051

  ///拉取群链接分享信息
  case pullChatLinkToken // = 5055

  ///通过群分享链接入群
  case putChatterViaShareLink // = 5056

  /// 获取群分享链接对应的群信息
  case pullChatLinkInfo // = 5057

  /// 推广注册B端账号
  case pullMyPromotionLink // = 5060

  /// 推广活动的规则
  case pullPromotionRule // = 5061

  /// 定向发送邀请链接邀请好友成为B端用户
  case putBusinessInvitation // = 5062

  /// 群头像相关
  case pullChatAvatarMeta // = 5070

  /// 应用内邀请成员
  case pullInvitationLink // = 5080

  /// 发送管理员邀请 （邮件或sms邀请）
  case putAdminInvitation // = 5081

  /// 拉取用户的权限信息和banner展示情况
  case pullUserInvitationMessage // = 5082

  /// 上传用户banner首次展示的时间
  case putBannerBeginTime // = 5083

  /// 用户头像侧边栏相关
  case pushUserSidebarUpdateEvent // = 5090

  ///获取用户侧边栏信息
  case pullUserSidebar // = 5091

  /// 获取用户手机号
  case checkUserPhoneNumber // = 5092

  /// 会话窗口中展示人员特定信息
  case pullUserProfileAssignedFields // = 5093

  /// 个人信息下载，token验证
  case authDownloadToken // = 5094

  /// chat pin 相关指令 5100 - 5200
  case putPin // = 5100

  /// 按照 message_id 拉取 pin
  case pullPinsByMessageIds // = 5101

  /// 拉取这个 chat 中的所有 pin
  case pullChatPins // = 5102

  /// 删除 pin
  case deletePins // = 5103

  /// 推送 pin
  case pushPin // = 5104

  /// 推送pin已读
  case pushPinRead // = 5105

  /// 拉取pin已读未读状态
  case pullPinReadStatus // = 5106

  /// pin已读ACK
  case putPinRead // = 5107

  /// SDK预加载pin数据
  case pullPinByChatUpdateTime // = 5108

  ///全部pin的设置项，目前仅含订阅通知
  case putAllPinSetting // = 5109

  /// 推送全部pin设置
  case pushAllPinSetting // = 5110

  /// 拉取全部pin设置
  case pullAllPinSetting // = 5111

  /// 纯账号或用户相关
  case updateAccountUserListOrder // = 5200
  case pushAccountUserList // = 5201

  /// 拉取个人账户下所有绑定的User
  case pullAccountUserList // = 5202
  case pushAccountUpdateUserEvnet // = 5203

  ///用户注销成功push提醒
  case pushAccountUnregisterUserEvent // = 5204
  case pushGlobalAccountUpdateUserEvent // = 5205
  case pushUserListUpdateEvent // = 5206
  case pushUserMigrateSwitchEvent // = 5207

  /// 用户自定义姓名
  case putUserName // = 5300

  /// 获取用户是否能更改姓名
  case getUserUpdateNamePermission // = 5301

  /// 用户登出push提醒
  case pushUserLogoutEvent // = 5302

  ///获取用户相关权限
  case pullUserUpdateFieldPermission // = 5303

  /// 用户花名相关
  case putUserAlias // = 5400

  /// 设置群昵称
  case putGroupNickname // = 5401

  /// 推送备注名
  case pushUserAlias // = 5402

  /// 设置群昵称
  case pushGroupNickname // = 5403

  /// i18n 相关
  case pullMessageI18NTemplates // = 5500

  /// 获取用户的i18nNames
  case pullUserNames // = 5501

  /// 群分享历史相关 5600 - 5699
  case pullChatShareHistory // = 5600

  /// 记录群被分享
  case putChatShareHistory // = 5601

  /// 修改群分享状态
  case patchChatShareStatus // = 5602

  /// 群卡片分享 5700 - 5710
  case pullChatShareTokenInfo // = 5700

  ///面对面建群 5800 - 5810
  case createFaceToFaceApplication // = 5800

  ///推送同时面对面建群的用户（同一个数字有效距离内）
  case pushFaceToFaceApplicants // = 5801

  ///创建/加入面对面群
  case joinFaceToFaceChat // = 5802

  ///群管理员 5900 - 5910
  case patchChatAdminUsers // = 5900

  ///推送管理员变更
  case pushChatAdminUsers // = 5901

  ///拉取群管理员
  case pullChatAdminUsers // = 5902

  /// chat tab相关 5911 - 5920
  case pullChatTabs // = 5911

  /// 新建chat tab
  case createChatTab // = 5912

  /// 删除chat tab
  case deleteChatTab // = 5913

  /// chat tab排序
  case reorderChatTabs // = 5914

  /// 批量删除tab后并排序
  case updateChatTabs // = 5915

  /// 推送
  case pushChatTabs // = 5916

  /// chat online status 5921 - 5930
  case putChatOnlineStatus // = 5921

  ///导入建群 5931～5940
  case analyzeChattersSheet // = 5931

  /// 如果 Packet 过大无法下发，gateway 通过 PUSH_SID 下发 sid, 客户端通过 sid 主动去拉取 Packet
  case pushSid // = 6000

  /// PUT_EASEMOB_GROUP_CHAT=10000; // temporary used for easemob channel 废弃
  case pushBackgroundNotification // = 6001

  /// 多租户通知，后台用户的 push 转换成类似离线 push 后通过 PUSH_BANNER_NOTIFICATION 下发给前台用户
  case pushBannerNotification // = 6002

  /// chatter 相关 command 6300~6700
  case pullChatterSubscribers // = 6300

  /// 用户协议相关 6950 - 6999
  case pullNewestPolicies // = 6951

  /// 签署用户协议
  case putNewestPolicies // = 6952

  /// device 相关指令
  case putDeviceNotifySetting // = 7000

  /// frontier gateway 使用，直接发送给客户端告知设备在线状态
  case pushDeviceOnlineStatus // = 7001

  /// 客户端从 im server 拉取各端的在线状态
  case pullDevicesOnlineStatus // = 7002

  /// 更改设备的桌面端在线时关闭移动设备通知设置
  case putDeviceNotifySettingDisableNotify // = 7003

  /// 更改设备的“桌面端在线时关闭移动设备通知”情况下 at 消息仍然通知设置
  case putDeviceNotifySettingStillNotifyAt // = 7004

  /// 设备登入登出时，周知其他用户设备的指令
  case pushUserLoginStatus // = 7005

  /// 获取设备的新消息通知设置
  case pullDeviceNotifySetting // = 7006

  ///上传device设置 以后的device设置都用这个指令
  case putDeviceSetting // = 7007

  /// 拉取device设置
  case pullDeviceSetting // = 7008

  /// 通知 SDK 客户端网络连接相关的事件
  case pushDeviceNetworkAccessEvent // = 7017

  /// 拉取用户设置
  case pullUserSetting // = 7009

  /// 修改用户设置
  case patchUserSetting // = 7010

  /// 推送用户设置
  case pushUserSetting // = 7011

  /// 修改用户可被何种方式搜索到的设置
  case putWayToFindMeSetting // = 7012

  /// 推送用户可被何种方式搜索到的设置
  case pushWayToFindMeSetting // = 7013

  /// 修改单项用户被加好友方式设置
  case putWayToAddFriendSettingItem // = 7014

  /// 推送单项用户被加好友方式设置
  case pushWayToAddFriendSettingItem // = 7015

  /// 拉取用户被加好友的隐私设置
  case pullAddFriendSetting // = 7016

  /// 用户纠错建议词典相关
  case pullSpellCheckWords // = 7018

  /// 推送用户拼写纠错词典无需纠错的单词
  case pushSpellCheckAddWords // = 7019

  /// 增加用户纠错建议词典无需纠错的单词
  case putSpellCheckAddWords // = 7020

  /// 用户入会议 是否不接受消息提醒 详情： https://bytedance.feishu.cn/docs/doccnkQ6Hy2npXFkf2SPth9iNce#
  case pullMessageNotificationsOffDuringCalls // = 7021

  /// 用户 feed 过滤器相关设置
  case pullFeedFilterSetting // = 7022

  /// 修改 feed 过滤器设置
  case putFeedFilterSetting // = 7023

  /// 推送 feed 过滤器设置
  case pushFeedFilterSetting // = 7024

  /// 用户通用设置相关
  case patchUniversalUserSetting // = 7025

  ///拉取用户通用设置
  case pullUniversalUserSetting // = 7026

  ///推送用户通用设置
  case pushUniversalUserSetting // = 7027

  /// 手机在线不通知重要联系人通知设置
  case putDeviceNotifySettingStillNotifySpecialFocus // = 7028

  /// 拉取用户空状态emoji插画资源
  case pullDynamicEmojiResources // = 7029

  /// 三栏设置相关
  case pullThreeColumnsSetting // = 7030

  /// 修改三栏设置
  case patchThreeColumnsSetting // = 7031

  /// 推送三栏设置
  case pushThreeColumnsSetting // = 7032

  /// device 相关  7100 - 7200
  case putDeviceToken // = 7100

  /// 推送相关action。包括：推送限流设置
  case pushAction // = 7101

  /// 设置基本功能模式状态
  case putDeviceBasicModeSetting // = 7102

  /// 拉取基本功能模式状态
  case pullDeviceBasicModeSetting // = 7103

  ///用户引导、反馈相关
  case pullProductGuide // = 7501

  /// 删除用户引导
  case deleteProductGuide // = 7504

  ///推送删除/添加用户引导
  case pushProductGuide // = 7505

  /// 拉取用户引导V2
  case pullGuideV2 // = 7506

  /// 全量获取用户引导配置.
  case getUserGuideRequest // = 7507

  /// 同步消费了用户引导.
  case postUserConsumingGuideRequest // = 7508

  /// 通知端上用户引导变化.
  case userGuideUpdatedRequest // = 7509

  /// onboarding tour 相关
  case pullIceBreakingStatus // = 7600

  /// 提交 onboarding 操作
  case putIceBreakingAction // = 7601

  /// 提交 onboarding 引导任务完成
  case putTourGuideAchieved // = 7602

  /// 提交 用户引导中的团队选择版本引导
  case putUpdateTenantPackage // = 7603

  /// 提交 用户设置的可信邮箱
  case putTrustedMail // = 7604

  /// 拿取用户是否是可信邮箱信息
  case pullTrustedMailInfo // = 7605

  /// 获取source对应配置
  case getAdvertiseSourceConfig // = 7606

  /// 应用商店评分弹窗相关
  case pushGuideToRateState // = 7700

  /// 拉取引导用户评分（弹窗）的状态
  case pullGuideToRateState // = 7701

  /// 上传引导用户评分（弹窗）事件
  case putGuideToRateEvent // = 7702

  /// misc 相关指令
  case pushSyncDevices // = 8001

  ///获取某个ip的地理位置信息
  case pullGeoInfoByIp // = 8002

  ///获取飞书证书密钥指令
  case pullCertificateDecryptionKey // = 8003

  /// 获取群成员上限审批设置
  case pullChatMemberSuppRoleApprovalSetting // = 8004

  /// 创建群成员上限审批
  case putChatMemberSuppRoleApproval // = 8005

  /// thread 8100 - 8200
  case pushThreads // = 8100

  /// 修改 thread
  case patchThread // = 8101

  /// 拉取 chat 里的 thread
  case pullChatThreads // = 8102

  /// [已废弃]拉取 thread messages
  case pullThreadMessages // = 8103

  /// 推送 thread 设置
  case pushThreadSetting // = 8104

  ///编辑thread
  case patchThreadSetting // = 91

  /// 读取thread
  case putReadThreads // = 8105

  /// 推送chat中读取thread
  case pushThreadReadState // = 8106

  /// PUSH_THREAD_MESSAGE_READ_STATE = 8107; // 推送thread中读取message
  case pullThreadsByPositions // = 8108

  /// pull thread's message by message's position in it's thread
  case pullThreadMessageByPositions // = 8109
  case pushThreadUpdated // = 8110

  /// 批量拉取thread实体
  case pullThreadsByIds // = 8111

  /// 拉取话题订阅状态的
  case pullThreadsSetting // = 8112
  case pushThreadsRemoved // = 8113
  case pushThreadMutableInfo // = 8114
  case pushThreadNoReplyCountUpdated // = 8115

  /// 拉取话题卡片
  case pullThreadCard // = 8116
  case pushThreadStateInfo // = 8117

  /// pull threads in the chat by specific filters
  case pullFilteredThreadsByChat // = 8118

  /// push when filtered threads are updated
  case pushThreadFilterUpdated // = 8119

  /// 拉取推荐结果
  case pullRecommendationsByUser // = 8120

  /// 我参与的话题，标记已读状态
  case putReadMyThreads // = 8121

  /// 我参与的话题，推送阅读状态
  case pushMyThreadsReadState // = 8122

  /// 拉取 thread 下剩余匿名 quota
  case pullThreadAnonymousQuota // = 8123

  /// 推送 thread 下剩余匿名 quota
  case pushThreadAnonymousQuota // = 8124

  /// 分享话题卡片
  case putThreadShare // = 8125

  /// 拉取话题群模板
  case pullChatTemplateBanner // = 8126

  /// 关闭话题群模板
  case putChatTemplateBannerStatus // = 8127

  /// 推送话题群帖子的最新状态，目前只用于超大话题群
  case pushThreadUpdateInfo // = 8128

  /// topic group 8300 - 8400
  case putTopicsReadState // = 8300

  /// 拉取推荐的小组
  case pullRecommendedTopicGroups // = 8301

  /// 拉取我的小组
  case pullMyTopicGroups // = 8302

  /// 发话题展示小组列表
  case pullTopicGroupsToPost // = 8303

  /// 发现页屏蔽小组
  case uninterestTopicGroupForUser // = 8310

  /// 发现页屏蔽话题
  case uninterestTopicForUser // = 8311

  /// 发现页屏蔽用户发出的话题
  case uninterestUserForUser // = 8312

  ///REMOVE_UNINTERESTED_TOPIC_GROUP_FOR_USER = 8313; // 取消发现页屏蔽小组
  ///REMOVE_UNINTERESTED_TOPIC_FOR_USER = 8314; // 取消发现页屏蔽话题
  ///REMOTE_UNINTERESTED_USER_FOR_USER = 8315; // 取消发现页屏蔽用户发出的话题
  ///MGET_UNINTERESTED_TOPIC_GROUP_FOR_USER = 8316; // 查询发现页屏蔽小组
  ///MGET_UNINTERESTED_TOPIC_FOR_USER = 8317; // 查询发现页屏蔽话题
  ///MGET_UNINTERESTED_USER_FOR_USER = 8318; // 查询发现页屏蔽用户发出的话题
  case pullTopicGroupsByIds // = 8319

  /// 服务器推送小组消息
  case pushTopicMessages // = 8320

  /// 从推荐小组列表中加入小组
  case putTopicGroupMemberViaRecommendation // = 8321

  /// 拉取小组tab按钮上的新内容提示红点
  case pullTopicGroupTabNotification // = 8322

  ///推送用户小组设置
  case pushTopicGroupSetting // = 8323

  ///推送小组实体
  case pushTopicGroup // = 8324

  /// 拉取用户小组设置
  case pullTopicGroupSetting // = 8325

  /// search 接口
  case searchUser // = 11000

  /// 搜索消息
  case searchMessage // = 11001

  /// 搜索群会话
  case searchGroupChat // = 11002

  /// 搜索用户、消息、群会话
  case search // = 11003

  /// 搜索 chatter
  case searchChatter // = 11004

  ///智能搜索
  case smartSearch // = 11005

  ///上传点击实体
  case putSearchFeedback // = 11006

  ///拉取搜索历史
  case pullSearchHistoryEntities // = 11007

  /// 删除搜索历史
  case deleteSearchHistoryEntity // = 11008

  /// 进行分词
  case segmentText // = 11009

  /// 搜邮件消息
  case searchEmailMessage // = 11010

  ///DOC 相关搜索
  case searchDoc // = 11011

  /// 重构的集成搜索
  case integrationSearch // = 11012

  /// 群内拉取图片、视频及包含图片的 post 消息
  case pullChatResourceMessages // = 11013

  /// 上传搜消息、docs 等历史，不止 message
  case putSearchMsgHistory // = 11014

  /// 拉搜消息、docs 等历史，不止 message
  case pullSearchMsgHistory // = 11015

  /// 删搜消息、docs 等历史，不止 message
  case deleteSearchMsgHistory // = 11016

  /// 拉取搜索设置
  case pullSearchSetting // = 11017

  /// 拉取搜索过滤器
  case pullSearchFilter // = 11018

  /// 搜索自定义字段
  case searchCustomizeField // = 11019

  /// 群内搜索
  case searchInChat // = 11020

  /// universal 搜索
  case universalSearch // = 11021

  /// 外部搜索
  case externalResourceSearch // = 11022

  /// 拉取用户当前的 Search Tabs
  case pullUserSearchTabs // = 11023

  /// 保存用户当前的 Search Tabs
  case putUserSearchTabs // = 11024

  /// 拉取所有可用的 Search Tabs
  case pullAvailableSearchTabs // = 11025

  /// 上传搜索query历史
  case putSearchQueryHistory // = 11026

  ///删除全部搜索query历史
  case deleteSearchQueryHistory // = 11027

  /// 获取最紧密用户列表
  case pullClosestChatters // = 11100

  /// 获取最紧密对话列表
  case pullClosestChats // = 11101

  /// 获取端上本地搜速排序模型配置
  case pullLocalSearchRankModelConfig // = 11102

  /// 特别关注
  case pullSpecialFocus // = 11103
  case updateSpecialFocus // = 11104
  case pushUserSpecialFocus // = 11105

  /// 批量获取指定 sid 的 packet
  case pullPacketsBySids // = 12001

  /// 同步数据
  case sync // = 12002

  /// 拉取管子片段
  case pullPipelineIntervalBySid // = 12003

  ///拉取值班号
  case pullOncalls // = 13001

  ///创建值班群
  case putOncallChat // = 13002

  /// 获得所有 oncall 的 tag
  case pullAllOncallTags // = 13003

  /// 获得某些 tag 的 oncall
  case pullOncallByTags // = 13004

  /// 结束此次 oncall
  case putFinishOncall // = 13005

  ///拉取用首页处的 oncall list
  case pullHomePageOncalls // = 13006

  /// 邀请人工客服
  case putInviteOncall // = 13007

  /// 按oncall id拉取oncalls
  case pullOncallsByIds // = 13008

  /// 推送oncalls
  case pushOncalls // = 13009

  /// bot相关
  case pullChatBots // = 13100

  ///拉取可以加群的bot
  case pullChatCandidateBots // = 13101

  ///通过BOT，日志上传 FIXME: deprecated
  case pushLogUpload // = 13102

  /// 所有关于 Log 的推送请求
  case pushLogRequest // = 13103

  /// logifier 推送日志回捞请求
  case pushLogRetrieval // = 13110

  /// logifier 推送重试请求
  case retryLogRetrievalTask // = 13111

  /// 上报任务状态
  case fetchLogRetrievalTaskStatus // = 13112

  /// 更改授权
  case patchDocPrem // = 14001

  /// 推送 doc deprecated-2.9.0
  case pushDoc // = 14002

  /// 拉取 doc deprecated-2.9.0
  case pullDocs // = 14003

  ///推送DocFeed更新
  case pushDocFeed // = 14004

  /// 拉取 doc_feed
  case pullDocFeedsByIds // = 14005

  /// 推送多个 doc
  case pushDocs // = 14006

  /// 拉取用户的 doc 授权信息
  case pullDocPerms // = 14007

  /// 创建一个 doc feed
  case putDocFeed // = 14008

  ///拉取doc最近浏览历史
  case pullDocsHistory // = 14009

  /// 请求将lark中office文档转为在线文档的token
  case pullConvertToken // = 14010

  ///设置单个DOCSetting
  case patchDocFeedSetting // = 14011

  ///服务端下发单个DOCSetting
  case pushDocFeedSetting // = 14012

  ///拉取单个或多个DOCSetting
  case pullDocFeedSettings // = 14013

  /// 读 doc 消息
  case putReadDocMessages // = 14014

  /// 使用 url 拉取 doc 基本信息
  case pullDocByUrls // = 14015

  /// 拉取 doc feed 已读未读
  case pullDocMessageReadStatus // = 14016

  /// 推送 doc，用于新版 from 2.9.0
  case pushDoc2 // = 14017

  /// 推送多个 doc，用于新版 from 2.9.0
  case pushDocs2 // = 14018

  /// doc 使用透传 payload
  case pushToDoc // = 14100

  /// doc传图接力请求
  case pushDocImageRelay // = 14101

  /// 拉取doc feed消息模板
  case pullDocFeedMsgTmpl // = 14102

  /// 红包相关
  case sendHongbao // = 15001

  /// 抢红包
  case grabHongbao // = 15002

  /// 更新红包
  case updateHongbao // = 15003

  /// 获取红包信息
  case pullHongbaoInfo // = 15004

  /// 获取红包领取详情
  case pullHongbaoRecvDetail // = 15005

  /// 获取钱包余额
  case pullWalletBalance // = 15006

  /// 获取发送红包记录
  case pullSendHongbaoRecord // = 15007

  /// 获取抢到红包记录
  case pullGrabHongbaoRecord // = 15008

  /// 此功能暂时不做，后台实现查询相关功能
  /// PULL_HONGBAO_RECV_LIST = 15007; // 我接收的红包
  /// PULL_HONGBAO_SEND_LIST = 15008; // 我发出的红包
  case pullHongbaoCoverList // = 15009

  /// 营销活动红包相关 （18000~18500）
  case grabCommercialHongbao // = 18001

  /// 更新红包
  case updateCommercialHongbao // = 18002

  /// 获取红包信息
  case pullCommercialHongbaoInfo // = 18003

  /// 获取红包领取详情
  case pullCommercialHongbaoRecvDetail // = 18004

  /// automation
  case pullMessageActionList // = 16000

  ///新建加急消息
  case putUrgent // = 30000

  ///新建加急消息确认响应
  case putUrgentAck // = 30001

  ///推送加急消息
  case pushUrgent // = 30002

  ///推送加急消息状态响应
  case pushUrgentAck // = 30003

  ///拉取用户发出等待确认的加急消息
  case pullUrgentWaitingAck // = 30004

  ///拉取用户发出加急消息状态接口
  case pullUrgentAckStatus // = 30005

  ///可以重复加急之后，就需要通过ack_id来确认加急
  case confirmUrgentAckByID // = 30006

  ///获取用于拨打加急电话的外显号码
  case pullUrgentPhones // = 30007

  /// 推送短信和电话加急通知结果
  case pushFailedUrgentNotifyResult // = 30008

  /// 拉取全选后不支持电话或短信加急的用户和具体成功失败数量
  case pullSelectUrgentChatters // = 30009

  /// 加急页面初始可选的 chatter
  case pullUrgentChatChatters // = 30010

  /// 搜索补齐 chatter 状态
  case pullChattersUrgentInfo // = 30011

  /// 接入 fantasy 相关
  case pullTtUser // = 40001
  case putTtUser // = 40002

  /// open platform (40100 - 40200)
  case pushAppCenterUpdate // = 40100

  ///头条圈数据刷新
  case pushMalaitaUpdate // = 40101

  ///应用中心数据刷新V2 lark>1.19.0
  case pushAppCenterUpdateV2 // = 40102

  /// 租户应用变更数据刷新通知
  case pushTenantAppUpdate // = 40103

  ///小程序meta更新
  case pushMiniprogramUpdate // = 40104
  case pushOpenAppFeed // = 40105
  case pushOpenAppNotifyReadSync // = 40106
  case pushOpenAppSettings // = 40107
  case pushMiniprogramPreview // = 40108

  ///开放平台通用push
  case pushOpenCommon // = 40111

  /// 应用中心头条圈、商业圈预览、未读通知计数
  case pullMalaitaPreview // = 40112
  case pullUlawaPreview // = 40113
  case pullMalaitaNotificationUnreadCount // = 40114
  case pullUlawaNotificationUnreadCount // = 40115
  case setMalaitaJumpReport // = 40116

  ///开放平台 拉取app_chat对应的feed实体
  case pullAppChatFeed // = 40117

  /// 【废弃】开放平台 推送app_chat_feed的通知开关状态
  case pushAppChatFeedSettings // = 40118

  /// 创建app_chat
  case createAppChat // = 40119

  /// 查询app_chat_feed_id
  case pullAppChatFeedID // = 40120

  ///开放平台 批量设置app_chat通知开关
  case setAppChatNoticeConfig // = 40121

  ///小程序通用push
  case pushGadgetAppData // = 40122

  /// 拉应用红点数量信息
  case pullOpenAppBadgeNodes // = 40123

  /// 推应用红点数量信息
  case pushOpenAppBadgeNodes // = 40124

  /// 【废弃】拉应用红点开关列表
  case pullOpenAppBadgeSettings // = 40125

  /// 拉取有更新的管子信息
  case pullPipeList // = 70000

  /// 拉取未（特化）支持的 type 的管子的 packet
  case pullMultiPipePacketsByTypes // = 70001

  /// 拉取具体管子中的 packet
  case pullMultiPipePacketsByIds // = 70002

  /// 拉取未（特化）支持的管子信息
  case pullUnsupportPipeTypeInfos // = 70003

  /// 拉取（特化）支持的 type 的管子的 packet
  case pullMultiPipePacketsBySupportType // = 70004

  /// 拉取 chat 内的变更列表，包括 message 和 chat 维度变更事件
  case pullChatChangeLists // = 70005

  ///拉取管子的packet，pipeline重构新接口，详见 https://bytedance.feishu.cn/docs/doccnYPJTtnaE1R9R5DUUo8Fnwe
  case pullMultiPipePackets // = 70006

  ///拉取changelist变更，支持分页替代之前的pipelist & chatchangelist, pipeline重构新接口
  case pullChangeLists // = 70007
  case checkPipesTimeout // = 70008

  /// 80000 ~ 89999 视频会议 和 视频会议室设备 占用
  case pullRoomInfo // = 81000

  /// 提交用户反馈
  case submitFeedbacks // = 81030

  /// 签到板相关，82001 ~ 82999
  case updateScheduleStatus // = 82011

  /// Sketch
  case sketchStart // = 88001
  case updateShareScreenSettings // = 88002
  case fetchAllSketchData // = 88003
  case applyByteviewAccessibility // = 88004
  case fetchSketchDataByShapeIds // = 88005
  case pullSketchHistory // = 88006

  /// RemoteContol
  case remoteControl // = 88011
  case updateRemoteControlSettings // = 88012
  case getAdminSettings // = 88013

  /// 上报参会人信息到admin
  case uploadParticipantInfo // = 88015

  /// 获取admin中媒体专有部署中会议流媒体的seeting配置
  case getAdminMediaServerSeetings // = 88016

  /// follow
  case pullAllFollowStates // = 88051
  case getFollowResources // = 88052
  case getURLBriefs // = 88053
  case uploadGoogleToken // = 88054
  case getGoogleToken // = 88055
  case revokeGoogleToken // = 88056
  case exchangeGoogleToken // = 88057
  case replyFollowNotice // = 88058

  /// 会中共享的消息推送，和会议解耦
  case pushVcShareMessage // = 88100

  /// New Whiteboard (新白板)
  case operateWhiteboard // = 88101
  case operateWhiteboardPage // = 88102
  case uploadWhiteboard // = 88103
  case pullWhiteboardSnapshot // = 88104
  case saveWhiteboard // = 88105

  /// Whiteboard 老白板 已废弃
  case whiteboardStart // = 800021
  case whiteboardStop // = 800022
  case fetchAllWhiteboardData // = 800023

  /// 89000 ~ 89999 飞书会议使用
  /// 工作台
  case sendGrootCellsMeetingSpace // = 89000
  case pullGrootCellsMeetingSpace // = 89001
  case pushGrootCells // = 89002
  case grootChannelHandshakeMeetingSpace // = 89003
  case pushMeetingSpaceInfo // = 89004
  case updateReadCursor // = 89005
  case getMeetingSpaceMetaData // = 89006
  case getMeetingSpaceAgenda // = 89007
  case getMeetingSpaceFiles // = 89008
  case getUniqueIDByMeetingID // = 89009
  case grootChannelPingMeetingSpace // = 89010
  case checkInterviewMeetingSpace // = 89011
  case occupyInterviewCoding // = 89012
  case sendInterviewCodingAction // = 89013

  ///更新飞书速记的状态
  case updateMinutesStatus // = 89014

  /// groot
  case sendGrootCells // = 89050
  case pullGrootCells // = 89051
  case grootChannelHandshake // = 89052
  case grootChannelPing // = 89053
  case pullUpstreamGrootCells // = 89054

  /// 89200 ～ 89300 视频会议独立tab专用
  /// get info
  case getCalendarMeetingByUids // = 89201
  case getHistoryMeetingList // = 89202
  case getCallHistoryList // = 89203
  case batchGetMeetingByIds // = 89204
  case batchGetUniqueIDByEventID // = 89205

  /// 主动获取独立tab整体未接计数
  case getVcTabTotalMissedCall // = 89206

  /// 上报未接计数已读
  case vcTabMissedCallConfirm // = 89207

  /// 拉取列表数据
  case getVcTabHistoryList // = 89208

  /// 拉取详情数据
  case getVcTabMeetingDetail // = 89209

  /// 89210 已被端上占用
  case notifyVcTabMissedCalls // = 89211

  /// 生成统计表格
  case createVcTabMeetingStatistics // = 89212

  ///通知独立TAB分享卡片
  case pushVcTabNotice // = 89213
  case pushOnCallTicketNotice // = 89214

  /// 89301 ~ 89399 View In Lark 视频会议占用
  case getMeetingURLInfo // = 89301

  /// 强制转移主持人
  case vcOwnerForceTransferHost // = 89302

  /// 转移主持人时，查询即将消失的会管能力
  case checkVcManageCapabilities // = 89303
  case vcSearchUserInMeeting // = 89304
  case uploadEquipmentInfo // = 89305
  case vcLarkSearchUserInMeeting // = 89306
  case vcGetSuiteQuota // = 89308

  /// 拉取卡片信息
  case vcPullCardInfo // = 89309

  ///保留要被自动结束的会议
  case keepMeeting // = 89310

  ///推送rtc网络状态
  case pushRtcStatus // = 89311
  // 拒绝邀请后
  case refuseReply // = 89317
  ///拉取所有的rtc网络状态
  case pullAllRtcStatus // = 89312
  case getVcLobbyParticipants // = 89321
  case updateVcLobbyParticipant // = 89322
  case vcLobbyHeartbeat // = 89323
  case vcManageApply // = 89341
  case vcManageApproval // = 89342
  case pushVcManageNotify // = 89343
  case pushVcManageResult // = 89344
  case sendClientInfo // = 89349

  /// 客户端上传打点信息
  case entrustServerTrack // = 89350

  /// 日程会议VC配置 & 会前等候室
  case setCalendarVcSettings // = 89351
  case getCalendarVcSettings // = 89352
  case getCalendarGuestList // = 89353

  /// 根据sharecode获取room信息，用于客户端在会议室的啸叫抑制
  case getRoomStatusByShareCode // = 89354

  /// BreakoutRoom
  case breakoutRoomInfoNotify // = 89360

  /// 开启分组讨论
  case startMeetingBreakoutRoom // = 89361

  /// 加入会议讨论组
  case joinMeetingBreakoutRoom // = 89362

  /// 加入讨论组后，获取讨论组信息
  case pullBreakoutRoomInfo // = 89363

  /// open api vc单品 日历 接口
  case vcCreateCalendarEvent // = 89364
  case vcUpdateCalendarEvent // = 89365
  case pullVcCalendarEvents // = 89366
  case getMainCalendar // = 89367

  /// 获取日程会议及面试会议状态，是否开会及持续时长，用于日历日程详情页展示
  case getCalendarVchatStatus // = 89370
  case getInterviewVchatStatus // = 89371
  case getCalendarDefaultSettings // = 89372
  case applyPreVcSettingID // = 89373
  case getCalendarPreSettings // = 89374

  ///关闭面试官侧提示tips
  case closeInterviewerNotice // = 89375

  /// 89381 ～ 89400 视频会议翻译相关指令
  case translateVcMessages // = 89381

  /// 视频会议会中互动消息翻译结果推送
  case pushVcTranslateResults // = 89382

  /// breakout room pre setting
  case setBreakoutRoomPreSetting // = 89390

  /// 获取日程上分组讨论预分组
  case getBreakoutRoomPreSetting // = 89391

  /// 文件绑定鉴权
  case getAndBindFilesVc // = 89392

  /// 下载预分组模板文件信息
  case breakoutDownloadTemplate // = 89393

  /// 上传预分组文件信息
  case breakoutUploadFile // = 89394

  /// 预分组推送
  case notifyBreakoutManageResult // = 89395

  /// 89401 ~ 89499 视频会议 PSTN & SIP 相关专用
  case applyDtmf // = 89401

  /// 89402 被 ROOM 1v1 升级使用
  case pullParticipantInfo // = 89403

  /// 获取pstn及sip信息用于，日历日程详情页展示
  case getSipDomainByUniqueID // = 89404
  case getPstnSipFc // = 89405
  case getH323AccessByUniqueID // = 89406
  case createEnterprisePhone // = 89450
  case cancelEnterprisePhone // = 89451
  case notifyEnterprisePhone // = 89452
  case getEnterprisePhoneConfig // = 89453
  case checkEnterprisePhoneQuota // = 89454
  case getPhoneNumberAttribution // = 89455

  /// 获取会议的生态
  case getMeetingUnit // = 89460

  /// 获取目标用户手机号
  case getTargetUserPhoneNumber // = 89461

  ///飞书视频会议OnCall工单
  case genOnCallTicket // = 89465
  case updateOnCallTicket // = 89466

  /// 89500 ~ 89600 视频会议search接口专用
  case searchUsersAndChats // = 89501

  /// 89601 ~ 89700 飞阅会接口专用
  case startSamePageMeeting // = 89601

  /// 更新飞阅会信息
  case updateSamePageMeeting // = 89602

  /// 第一次开启飞阅会（当前已有飞阅会则失败，当前没有飞阅会则创建）
  case initSamePageMeeting // = 89603

  /// 89701 ~ 89799 投屏会议 占用
  case stopShareBoxLink // = 89701

  /// 投屏会议心跳
  case shareBoxHeartbeat // = 89702

  /// 投屏会议推送
  case pushShareLinkInfo // = 89703

  /// 开启投屏会议
  case startShareLink // = 89704

  /// 给盒子推送notice
  case pushBoxNotice // = 89705

  /// 修改投屏会议信息
  case changeShareLinkSetting // = 89706

  /// 89801 ~ 89900  视频会议特效素材（如虚拟背景）相关接口占用
  case uploadVcMaterialMeta // = 89801

  /// 拉取素材meta
  case pullVcMaterialMeta // = 89802

  /// 删除素材
  case deleteVcMaterial // = 89803

  /// 推送VC素材相关消息
  case pushVcMaterialMsg // = 89804

  /// 90000 ~ 99999 飞书会议 和 Lark Meetings 占用
  case mmPushReactionInfo // = 90001

  /// 推送会议纪要状态
  case mmPushSummaryStatus // = 90002

  /// 推送会议纪要变更内容
  case mmPushSummaryChange // = 90003

  /// 推送会议纪要CheckBox变更
  case mmPushSummaryCheck // = 90004

  /// 推送实时录音字幕
  case mmPushRealtimeSubtitleSentence // = 90005

  /// 推送说话人识别状态变更
  case mmPushDiarizationRematchStatus // = 90006

  /// 声纹相关
  case voicePrintPullStatus // = 90008

  /// 推送声纹状态变更
  case voicePrintPushStatus // = 90009

  /// 清空声纹
  case voicePrintClear // = 90010

  /// 90000 ~ 99999 飞书会议 和 Lark Meetings 占用
  case submitNeoFeedbacks // = 91030

  /// 飞书直播 200000～250000
  case getLiveConfig // = 200000

  /// 直播独立窗口心跳
  case liveHeartbeat // = 200001

  /// 获取导播台直播信息
  case getLiveInfo // = 200002

  /// 更新直播
  case updateLiveInfo // = 200003

  /// 推送弹窗
  case pushLiveNotice // = 200004

  /// 推送直播信息
  case pushLiveInfo // = 200005

  /// 更新直播状态
  case updateLiveStatus // = 200006

  /// 独立窗口轮询观众人数
  case pollLiveAudienceNum // = 200007

  /// 群聊调起独立窗口创建默认直播
  case createLive // = 200008

  /// 创建直播Scene
  case createLiveScene // = 200009

  ///  编辑直播Scene
  case editLiveScene // = 200010

  /// 删除直播Scene
  case deleteLiveScene // = 200011

  /// 移动直播Scene
  case moveLiveScene // = 200012

  /// 分页获取SubScene列表
  case getSubSceneList // = 200013

  /// 切换on air SubScene
  case switchSubScene // = 200014

  /// 根据SceneID批量获取Scene
  case mgetSceneByID // = 200015

  /// 进入独立直播窗口
  case joinLiveRoom // = 200016

  /// 邀请嘉宾
  case inviteLiveGuest // = 200017

  /// 移除嘉宾
  case removeLiveGuest // = 200018

  /// 通知嘉宾上线
  case notifyLiveGuest // = 200019

  /// 主播状态更改
  case updateLiveDevice // = 200020

  /// 根据live_user_id批量获取LiveUser
  case mgetLiveUserByID // = 200021

  /// 推送所有直播的改动
  case pushLiveChange // = 200022

  /// 离开独立直播
  case leaveLiveRoom // = 200023

  /// 进入直播独立窗口预检查
  case livePreCheck // = 200024

  /// 获取直播详情(目前用于管理平台)
  case getLiveInfoV2 // = 200025

  /// 更新直播(目前用于管理平台)
  case updateLiveInfoV2 // = 200026

  /// 删除直播(目前用于管理平台)
  case deleteLiveInfo // = 200027

  /// 获取与自己相关的直播列表(目前用于管理平台)
  case getLiveInfoList // = 200028

  /// 导出直播数据(目前用于管理平台)
  case exportLiveStatistics // = 200029

  /// 推送生成的直播数据文件url
  case liveStatisticsPush // = 200030

  /// 下发静态资源
  case getLiveStaticResource // = 200031

  /// 上传直播文件
  case uploadLiveFile // = 200032

  /// 直播文件审核结果推送
  case liveFileReviewResultPush // = 200033

  /// 更新直播主播信息
  case updateLiveUser // = 200034

  /// 检索直播分享候选人
  case searchLiveShareCandidate // = 200035

  /// 发送直播分享
  case sendLiveShareMessage // = 200036

  /// 轮询数据文件导出状态
  case pollingLiveStatistics // = 200037

  /// 创建直播挂件
  case createLiveAccessory // = 200038

  /// 删除直播挂件
  case deleteLiveAccessory // = 200039

  /// 更新直播挂件
  case updateLiveAccessory // = 200040

  /// 根据挂件ID获取挂件信息
  case mgetLiveAccessoryByID // = 200041

  /// 检查直播素材是否通过风控
  case liveResourceRiskCheck // = 200042

  /// 关闭群聊直播独立开播窗通知
  case closeLiveWindowNotice // = 200043

  /// 获取指定观看用户
  case getLivePermissionMembers // = 200044

  /// 展开指定观看用户中的群组
  case getLivePermissionChatPaged // = 200045

  /// 获取日程关联直播状态
  case getAssociatedLiveStatusWithEventID // = 210000

  /// 推送日程关联直播状态
  case pushAssociatedLiveStatus // = 210001

  /// 观众端长连推送挂件信息
  case pushLiveAccessories // = 220000

  /// 直播消息相关23000开始
  case fetchLiveMessages // = 230001
  case sendLiveMessage // = 230002
  case deleteLiveMessage // = 230003
  case pinLiveMessage // = 230004
  case liveBanUser // = 230005
  case getLiveBannedUser // = 230006

  /// 直播CMS相关240000开始
  case getLiveList // = 240001

  /// 列表获取更多直播
  case getMoreLives // = 240002

  /// 删除直播
  case deleteLive // = 240003

  /// 创建直播
  case cmsCreateLive // = 240004

  /// 获取直播配置（进入详情页）
  case cmsGetLiveInfo // = 240005

  /// 更新直播配置
  case updateLiveConfig // = 240006

  /// 生成推流地址
  case updateStream // = 240007

  /// 获取推流地址
  case getStreamPushInfo // = 240008

  /// 检查文字信息是否合规
  case checkContentText // = 240009

  /// 获取静态资源
  case getLiveStaticResourceV2 // = 240010

  /// 获取主题色（for 移动端）
  case getLiveThemeColor // = 240011

  /// 获取配置可用条件
  case getLiveConfigCondition // = 240012

  /// lark.im.message 使用 900000 ~ 901000
  case pullMessageDocPerms // = 900000

  /// 【密钥删除】需求中密钥变更事件推送
  case pushCipherChangeEvent // = 900001

  /// 【密钥删除】需求中客户端拉取变更的密钥
  case pullChangedCipherKeys // = 900002

  /// 翻译消息中的 url preview 数据
  case translateMessageURLPreview // = 900003

  /// 获取用户最后一条可见消息
  case pullMessageLastVisibleInfo // = 900004

  ///日历相关
  case syncCalendars // = 1000001
  case saveCalendars // = 1000002

  ///拉取日历参与者的权限
  case pullCalendarUserIDRoles // = 1000003

  ///根据id获取日历
  case pullCalendarByIds // = 1000004

  ///push变化了的日历的id
  case pushChangedCalendarIds // = 1000005

  /// 根据chatterID获取主日历id等，做映射使用
  case pullChatterCalendarMap // = 1000006
  case subscribeCalendar // = 1000007
  case unsubscribeCalendar // = 1000008
  case getGoogleAuthURL // = 1000009
  case revokeGoogkeToken // = 1000010
  case subscribeAndGetLatestUpdatedCalendars // = 1000011
  case saveCalendarSetting // = 1000012
  case pullCalendarSetting // = 1000013

  /// 搜索邀请人或群信息
  case searchGuests // = 1000014

  /// 通过群id拉取群成员
  case pullGroupsChatters // = 1000015

  /// 搜索会议室
  case searchMeetingRooms // = 1000016

  /// 日历侧边栏搜索，公共日历/侧边栏/会议室等
  case multiCalendarSearch // = 1000017

  ///获取特定时间段占用会议室的情况
  case pullMeetingRoomsSubscriber // = 1000018
  case saveCalendarSettingPb // = 1000019

  /// 拉取日历设置
  case pullCalendarSettingPb // = 1000020
  case genPasswordForCaldav // = 1000021

  /// deprecated
  case changePasswordForCaldav // = 1000022
  case deleteCaldavUserPassword // = 1000023
  case getCaldavPasswordList // = 1000024

  /// 获取用户最近用过的会议室
  case getLastUsedResources // = 1000025

  /// 获取用户最近邀请过的用户
  case getLastInvitedGuests // = 1000026

  /// 拉取用户会议室视图日历列表
  case pullMeetingRoomViewCalendars // = 1000027

  /// 会议室视图中批量订阅日历
  case subscribeMeetingRoomViewCalendars // = 1000028

  /// 会议室视图中批量退订日历
  case unsubscribeMeetingRoomViewCalendars // = 1000029

  /// 批量订阅普通日历
  case msubscribeCalendars // = 1000030

  /// 获取会议室视图日历
  case getMeetingRoomViewCalendars // = 1000031

  /// 批量获取日历信息
  case mgetCalendarsWithIds // = 1000032

  /// 批量取消订阅日历
  case munsubscribeCalendars // = 1000033

  /// 获取一个用户对其他用户的忙闲查看权限
  case getFreeBusyAccessibleUsers // = 1000034

  /// 保存用户设备上日历的相关设置
  case saveCalendarUserDeviceSetting // = 1000035
  case getPlaceByID // = 1000036
  case getPlaceTips // = 1000037
  case searchAttendeeInChat // = 1000038

  /// 批量获取用户的设备设置
  case mgetCalendarUserDeviceSetting // = 1000039
  case getUserCalendarIds // = 1000040
  case getUserPrimaryCalendar // = 1000041

  /// 修改对日历的可见性，日历侧边栏当前日历是否勾选
  case uploadCalendarsWithCommit // = 1000048

  /// 日历保存，成员等更新逻辑走这个接口
  case saveCalendarWithMembers // = 1000049

  /// 日历同步中的读逻辑，根据version返回更新的日历列表
  case listCalendarList // = 1000050

  /// 获取当前租户下会议室的设备
  case getResourceEquipments // = 1000051

  /// 过滤会议室日历
  case filterMrviewResourceCalendar // = 1000052

  ///获取会议室基本信息，预定信息，预定时间范围限制/是否禁用等
  case pullMeetingRoomStatusInformation // = 1000053

  ///日历列表数据完整性校验
  case verifyCalendarList // = 1000056

  /// 获取会议室个性化配置
  case pullResourceCustomizationByContactID // = 1000057

  /// 获取整个租户下的会议室
  case pullAllMeetingRoomsInTenant // = 1000058

  /// 通过applink获取日程信息
  case getCalendarEventFromApplink // = 1000059

  ///绑定exchange日历账号
  case bindingExchangeAccount // = 1000060

  ///移除exchange日历账号
  case revokeExchangeAccount // = 1000061

  /// 通过departmentId 拉取部门成员
  case pullDepartmentsChatters // = 1000062

  /// 通过departmentId 拉取部门成员
  case mgetDepartmentsMemberCount // = 1000063

  /// 根据id获取当前日历详情页信息，日历详情页展示使用
  case getCalendarInfoByID // = 1000064

  /// 编辑日历
  case patchCalendar // = 1000065

  /// 分享日历
  case shareCalendar // = 1000066
  case createCalendar // = 1000067

  /// 根据日历的分享token获取id
  case getCalendarIDByShareToken // = 1000068

  /// 子层级会议室获取
  case pullMeetingRoomAndLevelInfo // = 1000069

  /// 递归获取所有层级会议室
  case pullAllMeetingRoomAndLevelInfo // = 1000070

  /// 搜索会议室，多层级会议室
  case searchMeetingRoomsV2 // = 1000071

  /// 拉取租户级别的配置
  case pullCalendarTenantSettingPb // = 1000072

  /// 群聊查看忙闲
  case mgetChatFreeBusyFavor // = 1000042
  case setChatFreeBusyFavor // = 1000043

  /// 导入账号设置
  case getExternalAccountList // = 1000044
  case saveExternalAccountSetting // = 1000045
  case getExternalAccountByMail // = 1000046
  case markLarkServerMailSelected // = 1000047

  /// WEB日历相关
  case webListCalendars // = 1001001
  case webBatchSubscribeCalendars // = 1001002
  case webBatchUnsubscribeCalendars // = 1001003
  case webCreateCalendar // = 1001004
  case webDeleteCalendar // = 1001005
  case webUpdateCalendar // = 1001006

  /// 1001007没在用，占位后面可以用
  case webMgetCalendarsWithIds // = 1001008

  /// WEB日程相关
  case webListCalendarEvents // = 1002001
  case webPullCalendarEvents // = 1002002
  case webCreateEvent // = 1002003
  case webUpdateEvent // = 1002004
  case webDeleteEvent // = 1002005
  case webMgetEventsWithIds // = 1002006
  case webGetGroupAttendeesByGroupIds // = 1002007
  case webGetUserAttendeesByUserIds // = 1002008
  case webGetAttendeesByCalendarIds // = 1002009
  case webListOptimizedCalendarEvents // = 1002010
  case webListFirstScreenCalendarEvents // = 1002011
  case webShareCalendarEvent // = 1002012

  /// 会议室管理页相关
  case resourceManagementGetInstances // = 1003001

  /// 获取日程
  case resourceManagementGetEvent // = 1003002

  /// 新建日程
  case resourceManagementCreateEvent // = 1003003

  /// 编辑日程
  case resourceManagementUpdateEvent // = 1003004

  /// 删除日程
  case resourceManagementDeleteEvent // = 1003005

  /// 新建日程或修改日程时间后，弹窗展示冲突日程信息
  case resourceManagementGetConflictEventInfo // = 1003006

  /// 客户端调用，判断是否需要展示功能入口
  case resourceManagementGetResourceAccessRole // = 1003007

  /// 拉取租户下的建筑
  case resourceManagementListBuildings // = 1003008

  /// 拉取建筑下的会议室
  case resourceManagementListResources // = 1003009

  /// 编辑页搜索会议室
  case resourceManagementSearchMeetingRooms // = 1003010

  ///日程相关
  case syncCalendarEvents // = 1010001
  case pushCalendarEventReminder // = 1010002
  case pullCalendarEventsWithRefIds // = 1010003
  case pullCalendarMeetingRooms // = 1010004
  case pullCalendarResourcesByID // = 1010005

  /// 查询日历的忙闲
  case queryInstance // = 1010006

  /// request: MGetCalendarEventsRequest
  case mgetCalendarEventsWithIds // = 1010007
  case searchCalendarContacts // = 1010008

  /// 拉取建筑物列表（会议室添加页等）
  case pullMeetingRoomBuildings // = 1010009

  /// 拉取建筑物下的所有会议室
  case pullMeetingRoomsInBuilding // = 1010010
  case pullMeetingsByChatIds // = 1010011
  case quitMeeting // = 1010012
  case markMeetingEntered // = 1010013
  case upgradeToMeeting // = 1010014
  case batchQueryInstance // = 1010015

  /// 加入日程
  case joinCalendarEvent // = 1010016

  /// 分享卡片详情页获取日程数据
  case getCalendarEventInfo // = 1010017

  ///标记点击会议群聊条幅
  case markScrollClicked // = 1010018
  case batchQueryEventsDiff // = 1010019

  /// 获取用户某个时间段的忙闲状态，日程编辑页的「小茶杯」
  case getBusyUser // = 1010020

  /// 日程提醒提醒卡片关闭（这样其他设备不会重复弹窗）
  case closeEventReminderCard // = 1010021
  case transferCalendarEvent // = 1010022

  /// 根据uid，originalTime，calendarID获取日程的信息
  case mgetCalendarEventsWithKey // = 1010023

  /// 根据日历id获取会议室相关信息
  case getResourcesByCalendarIds // = 1010024
  case getResourcesWithToken // = 1010025
  case seizeResource // = 1010026
  case setWhetherPopUp // = 1010027
  case createMeetingMinute // = 1010028

  /// 获取对会议纪要是否更新（红点）
  case meetingMinuteUpdateCheck // = 1010029

  /// 进入视频会议时实时请求视频会议ID，重复性日程视频会议number过期后重新申请
  case getVchatByEvnet // = 1010030

  /// 查询视频会议进行状态
  case getVchatStatus // = 1010031

  /// 查询视频会议对应日程 instance 信息
  case getEventInfoByVchatID // = 1010032

  /// 会议群聊转成普通群
  case upgradeToChat // = 1010033

  /// 是否展示 会议群转普通群的提示条幅
  case displayTransferChatScrollCheck // = 1010034

  /// 日程同步，读写逻辑均在。OptimizedSyncCalendarEventsRequest
  case optimizedSyncCalendarEvents // = 1010035

  /// 日程搜索
  case searchCalendarEvent // = 1010036
  case getAuthorizedCalendarEventWithKey // = 1010037
  case getUser2CalendarBotChatID // = 1010038
  case mgetIsJoinedEventStatus // = 1010039
  case joinMeetingChat // = 1010040
  case getEventShareLink // = 1010041
  case pullEventGroupAttendeeMembers // = 1010042
  case pullEventGroupsSimpleMembers // = 1010043
  case switchEventCalendar // = 1010044

  /// 获取会议室视图的日程忙闲
  case getRoomViewInstances // = 1010045
  case getIndividualAttendeesByPage // = 1010046

  ///查询给定日历在指定时间内的instance（instance太多会自动对区间进行扩缩）
  case pullCalendarInstances // = 1010047

  ///读写分离的读日程接口, listCalendarEventsRequest
  case listCalendarEvents // = 1010048

  ///写日程接口
  case saveCalendarEvents // = 1010049
  case getEventGroupAttendeeWithKeyForCopy // = 1010050
  case getEventIndividualAttendeeWithKeyForCopy // = 1010051
  case pushCalendarEventInvitation // = 1020001

  /// 日程的rsvp接口，回复日程状态
  case replyCalendarEventInvitation // = 1020002
  case pushCalendarEventSyncNotification // = 1020003
  case pushCalendarEventCancelNotification // = 1020004
  case pushReplyCalendarEventInvitation // = 1020005
  case pushCalendarEventUpdateNotification // = 1020006
  case pushCalendarEventRescheduleNotification // = 1020007
  case pushCalendarSyncNotification // = 1020008
  case pushBindGoogleSuccessNotification // = 1020009
  case pushRevokeGoogleSuccessNotification // = 1020010
  case pushCalendarSettingChangeNotification // = 1020011
  case pushCalendarSettingPbChangeNotification // = 1020012
  case pushMeetingInfoNotification // = 1020013
  case pushCalendarEventWithData // = 1020014
  case pushSharedCalendarEventChangeNotification // = 1020015
  case pushReminderClosedNotification // = 1020016
  case pushShowSubscribedCalendarNotification // = 1020017
  case pushClearCalendarEventNotification // = 1020018
  case pushScrollClosedNotification // = 1020019
  case pushExternalAccountSettingSyncNotification // = 1020020
  case pushGoogleBindSettingCallback // = 1020021
  case pushCalendarEventVchatChange // = 1020022
  case pushExternalCalendarChangeNotification // = 1020023

  ///获取签到板会议室相关信息
  case getResourceCheckInInfoWithToken // = 1000054
  case checkInByQrCode // = 1000055

  ///日程示例重要性分数计算反馈
  case setInstanceImportanceScoreFeedback // = 1021001
  case getInstanceImportanceScore // = 1021002
  case pushUploadEntityTask // = 1030000
  case putEntity // = 1030001
  case pushMeetingMinuteEditors // = 1030002

  /// EMAIL 相关 1040001
  case mgetMailCalendarInfo // = 1040001

  /// TODO_ 相关: 1050001 - 1054999
  case getTodoHistoryCommits // = 1050003

  /// 和同步相关的命名（读写分离）
  case postSyncTodoCommits // = 1050004
  case pullSyncTodoItems // = 1050005
  case getTodoItems // = 1050006
  case mgetTodoByGuid // = 1050007
  case getRecommendedContents // = 1050008
  case getTodoReferResources // = 1050009
  case mergeMessagesAsTodoResource // = 1050010
  case mergeTopicAsTodoResource // = 1050011
  case followTodo // = 1050012

  /// TodoSetting 相关
  case getTodoSetting // = 1050013
  case saveTodoSetting // = 1050014

  /// chatTodo 相关
  case getChatTodoStatus // = 1050015
  case getChatTodos // = 1050016
  case getChatCompletedTodos // = 1050017
  case listDocTodos // = 1050018

  /// 卡片相关
  case getTodoMsgCardPermission // = 1050019
  case updateTodoMsgCards // = 1050020

  /// Todo comment 相关接口
  case createTodoComment // = 1050201
  case updateTodoComment // = 1050202
  case deleteTodoComment // = 1050203
  case mgetTodoComments // = 1050204
  case mgetTodoCommentsWithPositions // = 1050205
  case listTodoComments // = 1050206
  case createTodoCommentReaction // = 1050207
  case deleteTodoCommentReaction // = 1050208

  /// 发送心跳的命令
  case sendTodoHeartbeat // = 1050300

  /// Todo 的增删改（1050100~1050199）
  case updateTodo // = 1050100
  case deleteTodos // = 1050101
  case exitCollaborationTodo // = 1050102
  case updateTodoCompleteStatus // = 1050103
  case pushTodoSyncNotification // = 1051001
  case pushTodoReminderNotification // = 1051002
  case pushTodoClearNotification // = 1051003
  case pushTodoSettingNotification // = 1051004
  case pushTodoCommentNotification // = 1051005
  case pushTodoCommentReactionNotification // = 1051006

  /// MOMENTS 相关 1055001 - 1055999
  case momentsCreatePost // = 1055001

  /// 删帖
  case momentsDeletePost // = 1055002

  /// 发评论
  case momentsCreateComment // = 1055003

  /// 删评论
  case momentsDeleteComment // = 1055004

  /// 发送Reaction
  case momentsCreateReaction // = 1055005

  /// 删除Reaction
  case momentsDeleteReaction // = 1055006

  /// 分享内容
  case momentsSharePost // = 1055007

  /// 关注用户
  case momentsFollowUser // = 1055008

  /// 取消关注用户
  case momentsUnfollowUser // = 1055009

  /// 拉取置顶轮播
  case momentsListBroadcasts // = 1055010

  /// 拉取关注用户列表
  case momentsListUserFollowers // = 1055011

  /// 拉取用户关注列表
  case momentsListUserFollowings // = 1055012

  /// 拉取用户通知消息
  case momentsListNotifications // = 1055013

  /// 管理员操作: 加精, 置顶, 设置可见性 等
  case momentsAdminOperation // = 1055014

  /// 1055015 占位，后续可用。gateway boe和pre已经注册到action了。
  case momentsReport // = 1055016

  /// 拉取用户全局配置和设置
  case momentsGetUserConfigAndSettings // = 1055017

  /// 拉取内容详情
  case momentsGetPostDetail // = 1055019

  /// 拉取Circles
  case momentsMgetCircles // = 1055020

  /// 拉取MomentUsers
  case momentsMgetMomentUsers // = 1055021

  /// 获取当前用户是否关注了目标用户
  case momentsMgetIsUserFollowing // = 1055022

  /// 标记通知已读
  case momentsPutReadNotifications // = 1055023

  /// 拉取Posts
  case momentsMgetPosts // = 1055024

  /// 拉取Comments
  case momentsMgetComments // = 1055025

  /// 拉取Categories
  case momentsMgetCategories // = 1055026

  /// 拉取Category列表
  case momentsListCategories // = 1055027

  /// 拉取可配置的Tab列表
  case momentsListTabs // = 1055028

  /// 配置圈子的Tab列表
  case momentsConfigTabs // = 1055029

  /// 查询版块详情
  case momentsGetCategoryDetail // = 1055030

  ///根据用户输入拉取hashtag备选
  case momentsListHashtagsByUserInput // = 1055031

  ///拉hashtag详情
  case momentsGetHashtagDetail // = 1055032

  /// 创建订阅号草稿
  case momentsCreateSubscriptionDraft // = 1055033

  /// 获取订阅号后台链接
  case momentsGetSubscriptionBackstageURL // = 1055034

  /// 用户上线后拉取 Badge
  case momentsGetBadge // = 1055101

  /// 拉取最新 Feed
  case momentsGetRecommendFeed // = 1055102

  /// 拉取关注 Feed
  case momentsGetFollowingFeed // = 1055103

  /// 获取用户个人主页
  case momentsGetUserProfile // = 1055105

  /// 拉取用户发帖列表
  case momentsListUserPosts // = 1055106

  /// 分页查询评论列表
  case momentsListComments // = 1055107

  /// 分页查询 Reaction 列表
  case momentsListReactions // = 1055108

  /// 获取 Reaction 首页列表
  case momentsPullReactionsSet // = 1055109

  /// 获取当前用户的用户设置
  case momentsGetUserSetting // = 1055110

  /// 修改当前用户的用户设置
  case momentsPatchUserSetting // = 1055111

  /// 统计操作：帖子阅读数 等
  case momentsCountOperation // = 1055112

  /// 社区内获得at人默认列表
  case momentsGetRecommendAtList // = 1055113

  /// 拉取版块下的帖子列表
  case momentsListCategoryPosts // = 1055114

  /// 推送用户的用户设置
  case momentsPushUserSetting // = 1055115

  /// 拉取 tab 红点状态
  case momentsPullTabNotification // = 1055116

  /// 读 tab 红点状态
  case momentsPutTabNotification // = 1055117

  /// 推送 tab 红点状态
  case momentsPushTabNotification // = 1055118

  ///拉取hashtag下的帖子列表
  case momentsListHashtagPosts // = 1055119

  /// 查询当前匿名状态
  case momentsGetAnonymousInfo // = 1055151

  /// 拉取花名列表
  case momentsPullNicknames // = 1055152

  /// 拉取匿名头像
  case momentsPullNicknameAvatar // = 1055153

  /// 创建花名身份
  case momentsCreateNicknameUser // = 1055154

  /// 查询密聊状态
  case momentsCheckSecretChatStatus // = 1055155

  /// 请求发起密聊
  case momentsAskForSecretChat // = 1055156

  /// 接受密聊邀请
  case momentsAcceptSecretChat // = 1055157

  /// 通用推送指令
  case momentsPush // = 1055201

  /// 自定义导航
  case pullNavigation // = 1060001

  /// 用户确认更新导航信息；未使用，已废弃 TODO deprecated
  case putNavigationConfirm // = 1060002

  /// 推送导航栏变化
  case pushNavigation // = 1060003

  /// 用户自定义导航栏顺序
  case patchNavigation // = 1060004

  /// 拉取自定义导航配置信息，3.40后版本使用
  case pullNavigationV2 // = 1060005

  /// 拉取用户的联系人页面的业务入口
  case pullContactEntries // = 1060006

  /// 拉取导航栏顺序
  case pullNavigationOrder // = 1060007

  /// 获取导航栏应用详情
  case pullNavigationAppInfo // = 1060008

  /// 推送导航栏顺序
  case pushNavigationOrder // = 1060009

  /// 修改导航栏顺序
  case patchNavigationOrder // = 1060010

  /// Yellowstone related: 1070001 - 1071000
  ///     comments: 1070001 - 1070100
  case createCommentThread // = 1070001
  case getCommentThreads // = 1070002
  case setCommentThreadVisibility // = 1070003
  case deleteCommentThread // = 1070004
  case addComment // = 1070005
  case editComment // = 1070006
  case deleteComment // = 1070007
  case grantEntityPermission // = 1070008
  case getThreadPermission // = 1070009
  case revokePermission // = 1070010
  case addReactionToComment // = 1070011
  case deleteCommentReaction // = 1070012
  case setThreadSharedStrategy // = 1070013
  case uploadImage // = 1070014
  case getLoginUserID // = 1070015
  case getIsURLSupported // = 1070016
  case searchCommentThread // = 1070017
  case analyzeWebPage // = 1070018
  case shareEmailToChat // = 1070019
  case getMessage // = 1070020
  case checkAuthPermission // = 1070021
  case revokeAuthPermission // = 1070022
  case getAuthEntities // = 1070023
  case getImage // = 1070024

  /// AI Playground 1071001 - 1072000
  case aiTranslateImg // = 1071001

  /// 智能补全
  case getSmartCompose // = 1071002
  case getComposerSetting // = 1071003
  case setComposerSetting // = 1071004
  case pushComposerSetting // = 1071005

  /// 智能回复
  case getSmartReply // = 1071006

  /// 智能内存
  case getSmartMemory // = 1071007

  /// 企业实体词
  case getEnterpriseTopic // = 1071008

  /// slash command 请求
  case slashCommand // = 1071009

  /// 编辑企业实体词
  case postEnterpriseTopic // = 1071010

  /// 企业实体词种子用户申请
  case enterpriseTopicSeedUserEnroll // = 1071011

  /// 收录企业实体词卡片
  case enterpriseTopicRecord // = 1071012

  /// 建群时用户推荐
  case getChatCreateChattersRecommend // = 1071013

  /// ios14 widget suggestion
  case getSmartWidget // = 1071014

  /// 用户点赞/点踩行为
  case enterpriseTopicUserCardAction // = 1071015

  /// get个性化推荐设置
  case getPersonalizationSetting // = 1071016

  /// set个性化推荐设置
  case setPersonalizationSetting // = 1071017

  /// push个性化推荐设置
  case pushPersonalizationSetting // = 1071018
  case getSmartReplySetting // = 1071019
  case setSmartReplySetting // = 1071020
  case pushSmartReplySetting // = 1071021

  /// 拉取所有 Slash Command
  case pullSlashCommands // = 1071022

  /// AI & 搜索反馈
  case postAsFeedback // = 1071023

  /// 无 query 推荐
  case getSearchRecommend // = 1071024

  /// 拉取搜索 placeholder
  case pullSearchPlaceholder // = 1071025
  case pushSearchPlaceholder // = 1071026

  /// get 智能纠错设置
  case getGecSetting // = 1071027
  case setGecSetting // = 1071028
  case pushGecSetting // = 1071029

  /// ai 个性化词表
  case getAiVocab // = 1071030
  case createAiVocab // = 1071031
  case deleteAiVocab // = 1071032

  /// get ai & search 用户功能的设置，后续新A&S业务用户设置可复用这个命令
  case getAsSetting // = 1071033
  case setAsSetting // = 1071034
  case pushAsSetting // = 1071035

  /// 智能马赛克，返回图片上识别的区域框
  case smartMosaic // = 1071036

  /// 智能纠错
  case getAiTextCorrection // = 1071037

  /// 拉取搜索反馈Reason文案
  case getFeedbackReasonItems // = 1071038

  /// 无query页通用推荐
  case getUniversalRecommend // = 1071039

  /// 上传妙享时文档分享/添加评论等信息
  case postMagicShareInfo // = 1071040

  /// 活动接口相关: 1072001 - 1073000
  case getActivityBanner // = 1072001

  /// 获取onboarding source 配置
  case getOnboardingSourceConfig // = 1072002

  ///时区接口相关: 1080001~1081199
  case getTimezoneByCity // = 1080001

  ///精简模式相关
  case pullLeanModeStatusAndAuthority // = 109001

  ///用户更新用户精简模式配置
  case patchLeanModeStatus // = 109002

  ///通知精简模式权限和状态
  case pushLeanModeStatusAndAuthority // = 109003

  /// 动态流程下发  110001-110100
  case pullDynamicFlow // = 110001

  /// deprecated 单步拉取配置化流程
  case pullDynamicFlowStep // = 110002

  /// 上报动态流程内事件
  case reportFlowEvent // = 110003

  /// 拉取动态资源
  case pullDynamicResource // = 110004

  /// 推送配置化流程
  case pushDynamicFlow // = 110005

  /// 推送单步配置化流程
  case pushDynamicFlowStep // = 110006

  /// 尝试设置UG事件的状态
  case trySetUgEventState // = 110007

  ///获取新用户创建团队强引导上下文
  case getNewUserCreateTeamStrongGuideContext // = 110008

  ///获取LDR服务applink
  case getLdrServiceApplink // = 110009

  ///通用事件上报
  case bizEventReport // = 110010

  //// whats new 相关借用 动态流程下发的 110050～110070
  case pullNewFeatureMaterial // = 110050
  case submitNewFeatureClickEvent // = 110051

  //// meego 借用动态流程下达的110071~110070
  case getMeegoSingature // = 110071

  /// ECM相关 110101-110200
  case ecmSubscribeEvent // = 110101

  /// 订阅心跳
  case ecmKeepLiveSubscribe // = 110102

  /// 取消订阅
  case ecmCancelSubscribe // = 110103

  /// ECM事件广播
  case ecmEventBroadcast // = 110104

  /// 订阅补充
  case ecmAddItemSubscribe // = 110105

  ///banner相关: 1100001~1100201
  case pullBanner // = 1100001

  ///设置banner状态
  case setBannerStatus // = 1100002

  ///推送用户banner变更事件
  case pushBanner // = 1100003

  /// 单向关系联系人相关：1100301~1100501
  case mgetContactPointsUserInfo // = 1100301

  /// 批量上传cp
  case batchUploadContactPoints // = 1100302

  /// 查询通讯录内变化的飞书\lark用户信息
  case getChangedContactPointsUserInfo // = 1100303

  /// 查询屏蔽用户列表
  case mgetBlockUserInfo // = 1100304

  /// 查询屏蔽用户数
  case mgetBlockUserNum // = 1100305

  /// 设置对单个用户block权限
  case setupBlockUser // = 1100308

  /// 拉取联系人列表
  case pullContactsV2 // = 1100310

  ///  好友关系判断
  case mgetFriendship // = 1100311

  /// 查询对单个用户block权限设置
  case getUserBlockStatus // = 1100315

  /// 屏蔽状态变更事件
  case blockStatusChangeEvent // = 1100316

  /// 设置非联系人发消息权限
  case setupMsgAuth // = 1100317

  /// 查询非联系人发消息权限
  case getMsgAuth // = 1100318

  /// 查询用户间联系人\屏蔽\申请添加等状态
  case pullUserRelation // = 1100319

  /// 关闭接受好友申请banner
  case ignoreContactApply // = 1100320

  /// 批量申请添加好友
  case mputContactApplication // = 1100321

  /// 拉取user鉴权信息
  case pullAuthChatterInfo // = 1100322

  ///根据token获取UserID和好友关系
  case getUserIDAndRelation // = 1100323

  /// 成员邀请相关：1100801~1101000
  case getContactOauthURL // = 1100801
  case getOauthContacts // = 1100802
  case getPendingReviewCount // = 1100803

  /// suite.ai.mt相关：1101400~1101500
  case putTranslationFeedbackV2 // = 1101400

  /// creation.docs相关：1101501~1101600
  case creationDocsNoticeNew // = 1101501

  /// 通知变更
  case creationDocsNoticeChange // = 1101502

  /// pano 相关: 1101601~1101700
  case mgetTagMentionEntities // = 1101601

  /// edu invitation 相关:1101701～1101720
  case sendInvitationToInactive // = 1101701
  case oneKeyInviteInactive // = 1101702
  case getInactiveParents // = 1101703
  case getDepartmentInactiveInfo // = 1101704
  case getDepartmentInvitationURL // = 1101705

  /// 局域网传输相关：1011721~101730
  case pushLanTransSenderAddrsSet // = 1101721

  /// suite.ai.ocr 相关: 1011731~1011740
  case sendImageToOcr // = 1011731

  /// 权限系统相关：1011741~1011760
  case pullPermission // = 1011741

  /// 推送权限变更事件
  case pushPermissionEvent // = 1011742

  /// reaction 相关：1011761~1011770
  case updateUserRecentlyUsedEmoji // = 1011761

  /// 广告相关: 1011771 ~ 1011780
  case pullSplashAd // = 1011771

  /// Admin权限信息: 1011791 ~ 1011800
  case getAdminPermissionInfo // = 1011791

  /// 邮箱 WEB 端相关：1011801 ~ 1011810
  case getMailWebTabVisible // = 1011801

  /// UserGrowth 用户触达: 1102001 ~ 1102100
  case pullUgScenario // = 1102001
  case pullUgSdkSettings // = 1102002
  case reportUgEvent // = 1102003
  case pushUgScenarioInfo // = 1102004

  /// block相关事件: 1102201 ~ 1102300
  case pushBlockEvent // = 1102201
  case pushKv // = 1102202
  case pushBlockEntityUpdate // = 1102203
  case pushBlockExtensionUpdate // = 1102204

  /// 名片夹相关事件: 1102400 ~ 1102500
  case pullNamecardProfile // = 1102400
  case putSingleNamecard // = 1102401
  case pullNamecardList // = 1102402
  case updateSingleNamecard // = 1102403
  case deleteSingleNamecard // = 1102404
  case pullNamecardsByIds // = 1102405
  case checkContactPointDuplicate // = 1102406
  case createOrUpdateSingleNamecard // = 1102407

  /// 协同平台消息 1102501 ~ 1102600
  case pushTeleMeessage // = 1102501
  case pushSyncMeessage // = 1102502
  case sendSyncMeessage // = 1102503

  ///套件水印相关api： 1102601 ~ 1102700
  case pullWatermarkConfig // = 1102601
  case getHiddenWatermarkImage // = 1102602
  case pushWatermarkConfig // = 1102603

  ///团队相关api： 1102701 ~ 1102800
  case createTeam // = 1102701
  case createTeamChat // = 1102702
  case bindTeamChatPreCheck // = 1102703
  case bindTeamChat // = 1102704
  case unbindTeamChat // = 1102705
  case patchTeam // = 1102706
  case patchTeamSetting // = 1102707
  case putTeamMembers // = 1102708
  case deleteTeamMembers // = 1102709
  case pullTeamsByIds // = 1102710
  case pushTeam // = 1102711
  case pushTeamSetting // = 1102712
  case pushTeamBaseInfo // = 1102713
  case checkNameAvailability // = 1102714
  case patchTeamMembersRole // = 1102715
  case pullTeamMembers // = 1102716
  case pushTeamMembers // = 1102717

  /// 团队下群增加群成员
  case putTeamChatChatters // = 1102718

  /// 修改团队群
  case patchTeamChatByID // = 1102719

  /// 通过团队公开群页面加入群
  case putChatterViaTeamOpenChat // = 1102720

  ///Item相关api：1102801 ~ 1102899
  case pullItems // = 1102801
  case pullItemsByIds // = 1102802
  case reorderItems // = 1102803
  case pushItems // = 1102804
  case pullTeamItemIds // = 1102805
  case patchItem // = 1102806
  case pullItemsByEntityIds // = 1102807

  ///头像相关
  case pullAvatarMeta // = 1102900

  /// 订阅号相关api 1102901 ~ 1103000
  case pushSubscriptionsFeed // = 1102901
  case pullSubscriptionsFeedsByIds // = 1102902

  /// EM 相关 1103001 ~ 1103020
  case sendEmToUser // = 1103001
  case cancelEm // = 1103002
  case sendEmInfo // = 1103003
  case receiveEm // = 1103004
  case pullEmRecords // = 1103005
  case checkEmStatus // = 1103006
  case existActiveEmTask // = 1103007

  /// 【数据保险箱】1103021 ~ 1103030
  case pullDataRetentionRules // = 1103021

  /// 客户端是否允许开启离线搜索 1103101-1103200
  case pullOfflineSearchPermission // = 1103101
  case pushOfflineSearchPermission // = 1103102

  ///meego相关 1103201-1103300
  case getMeegoShowEnable // = 1103201
  case getFeishuMeegoShowEnable // = 1103202

  /// OpenBanner Command取值范围：1103301 ~ 1103400
  case openBannerPull // = 1103301
  case openBannerPush // = 1103302
  case openBannerPost // = 1103303

  /// lark.im.setting相关 1103401 ~ 1103600
  case pushChatterCustomStatus // = 1103401
  case isAllowedCreateUserCustomStatus // = 1103402
  case createUserCustomStatus // = 1103403
  case updateUserCustomStatus // = 1103404
  case pullUserCustomStatuses // = 1103405
  case deleteUserCustomStatuses // = 1103406

  /// 应该1103407，位数错误
  case putUserStatusCalendarEvents // = 11034067
  case pullUserTypingTranslateSettings // = 1103408
  case pushUserTypingTranslateSettings // = 1103409

  ///上传系统时区
  case uploadSystemTimezone // = 1103410

  /// lark.ug.hobby相关 api： 1103601 ~ 1103700
  case pushUserMedal // = 1103601

  /// 获取头像勋章列表
  case getMedalList // = 1103602

  /// 获取头像勋章详情
  case getMedalDetail // = 1103603

  /// 佩戴头像勋章
  case setMedal // = 1103604

  /// 获取用户佩戴中的勋章详情
  case getUserTakingMedal // = 1103605

  /// lark.facade.chat 置顶消息相关 1103701 ～ 1103710
  case patchChatTopNotice // = 1103701

  /// 获取置顶
  case pullChatTopNoticeByIds // = 1103702

  /// 隐藏置顶
  case closeChatTopNotice // = 1103703

  /// 推送置顶
  case pushChatTopNotice // = 1103704

  /// 推送置顶个人状态
  case pushChatTopNoticePersonalState // = 1103705

  /// lark.ug.retention api: 1103801 ~ 1103900
  case getRetentionQuestionnaire // = 1103801
  case submitRetentionQuestionnaire // = 1103802
  case getRetentionOperationLink // = 1103803
  case getWidgetAppList // = 1103804
  case getMaterialsByScene // = 1103805

  /// lark.facade.chat chatter业务状态存储 1103901 ~ 1103910
  case patchChatterExtraStates // = 1103901

  /// lark.attendance 考勤相关 1103911 ~ 1103920
  case pushAttendanceRefreshConfig // = 1103911
  case pushAttendanceTopSpeedClockIn // = 1103912

  ///ee.miniprogram.vote 投票相关 1103921 ~1103940；
  case publishVote // = 1103921

  ///投票
  case vote // = 1103922

  ///推送投票结果
  case pushVoteResult // = 1103923

  ///获取投票首屏信息
  case mgetVoteFirstScreenResult // = 1103924

  ///拉取投票结果
  case mgetVoteResult // = 1103925

  ///重发投票
  case retransmitVote // = 1103926

  ///关闭投票
  case closeVote // = 1103927

  public init() {
    self = .ack
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .ack
    case 2: self = .connect
    case 3: self = .disconnect
    case 4: self = .ping
    case 5: self = .putMessage
    case 6: self = .pushMessages
    case 7: self = .pullChatMessages
    case 8: self = .pullMessagesByIds
    case 9: self = .deleteMessage
    case 12: self = .pullMessageReadState
    case 13: self = .putChat
    case 18: self = .pushChats
    case 21: self = .pushUsers
    case 22: self = .putUser
    case 23: self = .pullMessageReplies
    case 24: self = .pullReactions
    case 25: self = .putReaction
    case 26: self = .deleteReaction
    case 27: self = .pushReactions
    case 28: self = .patchMessage
    case 30: self = .serverDisconnet
    case 31: self = .putImage
    case 32: self = .syncPackets
    case 33: self = .pullRecentChats
    case 37: self = .pullContacts
    case 38: self = .pullBots
    case 39: self = .pullUpdateChatters
    case 40: self = .putReadMessages
    case 41: self = .pushMessageReadCount
    case 43: self = .pullMessagesByPositions
    case 44: self = .pullChatChatters
    case 45: self = .deleteChatChatter
    case 46: self = .pullChattersByIds
    case 47: self = .putChatChatter
    case 48: self = .pushChatChatters
    case 49: self = .pushChatMutableInfo
    case 50: self = .putP2PChats
    case 51: self = .putTransmitMessage
    case 52: self = .putTransmitOne
    case 53: self = .batchCopyMessages
    case 54: self = .batchPutP2PChatMessages
    case 55: self = .pullMessageTransmitChain
    case 56: self = .fileUpdateToOfflineMode
    case 57: self = .fileUpdateLanTransStatus
    case 58: self = .pullMessageIDByPosition
    case 59: self = .putShareAsMessage
    case 60: self = .patchChatSetting
    case 61: self = .pushChatSetting
    case 62: self = .pullChatSettings
    case 63: self = .pullAllChatSettings
    case 64: self = .pullChatsByIds
    case 70: self = .pushChatterResign
    case 71: self = .pullChattersResignStatus
    case 72: self = .patchGroupChat
    case 73: self = .pullMessageMeReadState
    case 74: self = .pushGroupMessageReadState
    case 75: self = .pullWantedAtChatter
    case 77: self = .processMultiPackets
    case 78: self = .deleteGroupMessage
    case 79: self = .pullMessageReadUsers
    case 80: self = .pullDepartmentStructure
    case 81: self = .pullFullDepartmentStructure
    case 82: self = .pullGroupChats
    case 83: self = .pullSubordinateDepartments
    case 84: self = .pullUnfoldDepartmentStructure
    case 85: self = .pullManagedDepartment
    case 86: self = .putDepartmentChat
    case 87: self = .pullMessageUnreadUsers
    case 90: self = .pullThread
    case 91: self = .patchThreadSetting
    case 92: self = .pushThreadReplyCount
    case 93: self = .pullThreadReplies
    case 94: self = .pullThreadReactions
    case 95: self = .pushChatters
    case 96: self = .pullUnreadAtMessageIds
    case 97: self = .noTraceRemoveMessageByID
    case 98: self = .pushMessageNoTraceRemove
    case 99: self = .pullUnreadSpecialFocusMessageIds
    case 100: self = .putStickers
    case 101: self = .deleteStickers
    case 102: self = .patchStickers
    case 103: self = .pullStickers
    case 104: self = .pushStickers
    case 105: self = .patchChatterProfile
    case 106: self = .patchChatter
    case 107: self = .translateMessages
    case 108: self = .putTranslateFeedbacks
    case 109: self = .pullTranslateInfos
    case 110: self = .pushTranslateStatesNotice
    case 111: self = .pullTranslateLanguages
    case 112: self = .patchTranslateLanguage
    case 113: self = .pushTranslateLanguagesNotice
    case 114: self = .patchLanguagesConfiguration
    case 115: self = .pushLanguagesConfigurationNotice
    case 116: self = .disableAutoTranslateLanguage
    case 117: self = .pushDisableAutoTranslateLanguageNotice
    case 118: self = .pushMessageFirstTranslatedToSenderNotice
    case 119: self = .pullAutoTranslateGuidance
    case 120: self = .pullMessageTranslateInfos
    case 121: self = .patchAutoTranslateGlobalSwitch
    case 122: self = .pushAutoTranslateGlobalSwitchNotice
    case 123: self = .patchAutoTranslateChatSwitch
    case 124: self = .pushAutoTranslateChatSwitchNotice
    case 125: self = .pullAutoTranslateChatSwitch
    case 126: self = .translateMessagesV2
    case 127: self = .pushTranslateStatesNoticeV2
    case 128: self = .pullReactionsResource
    case 129: self = .pullUserReactions
    case 130: self = .pushUserReactions
    case 131: self = .pullUsedReactions
    case 132: self = .pushUsedReactions
    case 133: self = .pushMessageStaticResourceDeleted
    case 134: self = .pushBatchCopyMessages
    case 135: self = .checkEntityVersion
    case 136: self = .pullEmojiResources
    case 137: self = .pushReactionStatus
    case 138: self = .pullRecommendStatusIconResources
    case 139: self = .updateUserReactionSkin
    case 140: self = .pushUserReactionSkin
    case 141: self = .pullEmojiPanel
    case 142: self = .pullEmojiResourcesV2
    case 143: self = .pullEmojiResourcesByEmojiKeys
    case 150: self = .patchAutoTranslateScope
    case 151: self = .pushAutoTranslateScopeNotice
    case 152: self = .pullAutoTranslateFirstGuideInfo
    case 153: self = .pushAutoTranslateFirstGuideInfoNotice
    case 154: self = .patchAutoTranslateFirstGuideInfo
    case 155: self = .pullMessageLanguage
    case 156: self = .translateWebXml
    case 157: self = .translateImageKeys
    case 158: self = .pushImageTranslationInfo
    case 159: self = .detectTextLanguage
    case 160: self = .patchWebTranslationConfig
    case 161: self = .pushWebTranslationConfig
    case 162: self = .patchLanguageAutoTranslateScope
    case 163: self = .pushLanguageAutoTranslateScope
    case 164: self = .detectImageLanguage
    case 165: self = .patchLanguagesConfigurationV2
    case 166: self = .pushLanguagesConfigurationNoticeV2
    case 167: self = .patchWebNotTranslateLanguages
    case 168: self = .pushWebNotTranslateLanguagesNotice
    case 169: self = .pullWebNotTranslateLanguages
    case 170: self = .deleteWebNotTranslateLanguages
    case 172: self = .streamingTranslateMessage
    case 200: self = .pong
    case 201: self = .pullAppConfig
    case 202: self = .pushAppConfig
    case 203: self = .pushSettingsNotification
    case 210: self = .pullAppConfigV2
    case 211: self = .pullStaticAppConfigV2
    case 251: self = .pullSecurityConfig
    case 252: self = .pushSecurityConfig
    case 253: self = .pullChatPostUser
    case 254: self = .patchChatPostUser
    case 255: self = .pullAllowPostChat
    case 256: self = .checkPublicChatNameExist
    case 257: self = .putAddChatChatterApply
    case 258: self = .pullAddChatChatterApply
    case 259: self = .patchAddChatChatterApply
    case 270: self = .disableChatShared
    case 271: self = .checkChattersInChat
    case 280: self = .putChatAnnReadTime
    case 281: self = .pullChatsAnnReadTime
    case 282: self = .pushChatAnnReadTime
    case 290: self = .pushMultiThreadReplyCount
    case 291: self = .pushMultiChatMutableInfo
    case 293: self = .pushMultiGroupMessageReadState
    case 300: self = .pullTenantsByIds
    case 401: self = .pushChatChatterTag
    case 402: self = .pullChatChatterKickInfo
    case 403: self = .checkWithdrawPickEntitiesInChat
    case 404: self = .pullChatMemberSetting
    case 405: self = .pullChangeGroupMemberAuthorization
    case 500: self = .putFavorite
    case 501: self = .pullFavorites
    case 502: self = .removeFavorite
    case 503: self = .pullAllFavorite
    case 504: self = .putMergeMessageFavorite
    case 600: self = .pullNewVersion
    case 601: self = .pullVersionNote
    case 602: self = .patchDownloadStatus
    case 700: self = .putHomeSchoolChat
    case 701: self = .getHomeSchoolChatClass
    case 702: self = .pullManagedNodes
    case 703: self = .pullSchoolNode
    case 704: self = .eduJoinChatPreCheck
    case 705: self = .eduJoinChat
    case 801: self = .pullCollaborationStructure
    case 802: self = .pullCollaborationTenant
    case 803: self = .authUserCollaborationVisible
    case 804: self = .pullCollaborationInviteQrcode
    case 1000: self = .pullFeedCards
    case 1001: self = .patchFeedCards
    case 1002: self = .pushFeedCards
    case 1003: self = .pullFeedCardsFeedTypes
    case 1004: self = .peakFeedCard
    case 1005: self = .putFeedCardDelayed
    case 1006: self = .putFeedCardsIntoBox
    case 1007: self = .deleteFeedCardsFromBox
    case 1008: self = .pullFeedCardsDelayed
    case 1009: self = .pullFeedCardsByIds
    case 1010: self = .pullNewBoxFeedCards
    case 1011: self = .cleanNewBoxFeedCards
    case 1012: self = .pushCleanNewBoxFeedCards
    case 1014: self = .putUserColdBoot
    case 1015: self = .pullMutePopupInfo
    case 1016: self = .putShowMutePopup
    case 1017: self = .putBatchMuteFeedCards
    case 1018: self = .createFeedGroup
    case 1019: self = .pullKeywordsFeedCards
    case 1020: self = .pullFeedGroups
    case 1021: self = .pullItemChangedGroups
    case 1022: self = .pullFeedGroupItems
    case 1023: self = .updateFeedGroups
    case 1024: self = .pushFeedGroups
    case 1025: self = .confirmDeleteFeedCards
    case 1026: self = .pushDeletedFeedCards
    case 1027: self = .updateFlags
    case 1028: self = .pullFlags
    case 1029: self = .pushFlags
    case 1100: self = .putShortcuts
    case 1101: self = .deleteShortcuts
    case 1102: self = .patchShortcuts
    case 1103: self = .pullShortcuts
    case 1104: self = .pushShortcuts
    case 1200: self = .removeMessagesFromUser
    case 1201: self = .putMergeForwardMessage
    case 1202: self = .pullSystemMessageTemplate
    case 1203: self = .pushBadgeToRelatedUsers
    case 1204: self = .pullRelatedUsersBadge
    case 1205: self = .putDiagnoseMessage
    case 1206: self = .diagnoseMessageConfig
    case 1207: self = .sendDiagnosticEvent
    case 1301: self = .deleteMessageURLPreview
    case 1302: self = .hideAudioRecognitionResult
    case 1303: self = .pushAudioRecognitionResult
    case 1304: self = .putURLPreview
    case 1305: self = .putSpeechRecognition
    case 1306: self = .putAudioMessageRecognition
    case 1307: self = .pushAudioMessageRecognitionResult
    case 1310: self = .pullMessagePreviews
    case 1311: self = .pushMessagePreviews
    case 1312: self = .pullURLPreviewChatters
    case 1313: self = .grantMinutes
    case 1314: self = .pullURLPreviewChattersList
    case 1315: self = .generateURLPreviewEntity
    case 1316: self = .getURLPreview
    case 1317: self = .urlPreviewActionCallback
    case 1318: self = .pushURLPreview
    case 1319: self = .pushURLPreviewEntries
    case 1320: self = .pullURLPreviewTemplates
    case 1350: self = .pullVideoInfo
    case 1600: self = .putTopicGroup
    case 1601: self = .registerTopicGroupFavorite
    case 1602: self = .cancelTopicGroupFavorite
    case 1603: self = .pushTopicGroupFeedCards
    case 1604: self = .putTopicGroupMember
    case 2000: self = .pullApplist
    case 2001: self = .putRecentapp
    case 2002: self = .pullTenantAppcenter
    case 2003: self = .searchAppcenter
    case 2070: self = .cardJsonToPb
    case 2071: self = .sendPreviewCard
    case 2072: self = .gadgetDevToolPush
    case 2080: self = .pushEphemeralMessage
    case 2081: self = .pullEphemeralMessage
    case 2082: self = .pushEphemeralMessageUpdate
    case 2083: self = .pushEphemeralMessageDelete
    case 2098: self = .appShareV2
    case 2099: self = .appShare
    case 2100: self = .putE2EeVoiceCall
    case 2101: self = .patchE2EeVoiceCall
    case 2102: self = .pushE2EeVoiceCallNotice
    case 2103: self = .pullE2EeVoiceCalls
    case 2104: self = .putE2EeVoiceDeviceToken
    case 2105: self = .putE2EeVoiceFeedbacks
    case 2106: self = .pullE2EeVoiceCallByCallIds
    case 2200: self = .putVideoConf
    case 2201: self = .patchVideoConf
    case 2202: self = .pushVideoConfNotice
    case 2203: self = .pullVideoConfs
    case 2204: self = .registerClientInfo
    case 2205: self = .createVideoChat
    case 2206: self = .joinVideoChat
    case 2207: self = .updateVideoChat
    case 2208: self = .inviteVideoChat
    case 2209: self = .shareVideoChat
    case 2210: self = .notifyVideoChat
    case 2211: self = .searchVcChatters
    case 2212: self = .getChattersVcStatus
    case 2213: self = .pullVideoChatConfig
    case 2214: self = .pushVideoChatConfig
    case 2215: self = .pushVideoChatNotice
    case 2216: self = .replyVideoChatNotice
    case 2217: self = .joinCalendarGroupMeeting
    case 2218: self = .putFeedbacks
    case 2219: self = .pullVideochatByShareCode
    case 2300: self = .putByteviewHeartbeat
    case 2306: self = .notifyVideoChatExtra
    case 2307: self = .notifyStandaloneVcApplication
    case 2308: self = .hostManage
    case 2309: self = .hostChangeSettings
    case 2310: self = .participantChangeSettings
    case 2311: self = .shareScreen
    case 2312: self = .pullVideoChatInMeetingInfo
    case 2314: self = .previewJoinVideoChat
    case 2315: self = .forceLeaveVideoChat
    case 2316: self = .querySelfStatus
    case 2317: self = .putVideoChatFeedbacks
    case 2318: self = .pullE2EeVoiceCallConfig
    case 2321: self = .rejoinVideoChat
    case 2323: self = .joinByMeetingNumber
    case 2324: self = .shareScreenToRoom
    case 2325: self = .pullPreVideoChatSetting
    case 2327: self = .inviteCalendarMeeting
    case 2328: self = .getCalendarInfo
    case 2329: self = .getCalendarGroup
    case 2330: self = .shareFollow
    case 2331: self = .syncFollowAction
    case 2332: self = .queryMeetingJoinable
    case 2333: self = .joinMeeting
    case 2334: self = .pushAssociatedVcStatus
    case 2335: self = .getAssociatedVc
    case 2336: self = .pullDialTestSuite
    case 2337: self = .reportDialTestStatus
    case 2338: self = .notifyDialTestAction
    case 2339: self = .pullSubtitles
    case 2340: self = .getShareCodeInfo
    case 2341: self = .getAssociatedVcStatus
    case 2342: self = .joinInterviewGroupMeeting
    case 2343: self = .recordMeeting
    case 2344: self = .getChattersWithCiOrder
    case 2345: self = .searchViewParticipants
    case 2346: self = .requestFollowToken
    case 2347: self = .grantFollowToken
    case 2348: self = .requestFollowPerm
    case 2349: self = .vcQueryDocs
    case 2350: self = .pushVideoChatNoticeUpdate
    case 2351: self = .joinMeetingPreCheck
    case 2352: self = .sendVideoChatInteractionMessage
    case 2353: self = .pullVideoChatInteractionMessage
    case 2354: self = .pushVideoChatInteractionMessages
    case 2360: self = .publishMediaStream
    case 2370: self = .sendUpgradePlanNotice
    case 2371: self = .pushVideoChatPrompt
    case 2372: self = .replyVideoChatPrompt
    case 2373: self = .adjuestMeetingDuration
    case 2374: self = .pullViewUserSetting
    case 2375: self = .patchViewUserSetting
    case 2376: self = .pushViewUserSetting
    case 2377: self = .submitGenericFeedback
    case 2378: self = .getReservation
    case 2380: self = .liveMeetingAction
    case 2381: self = .liveMeetingExtraInfo
    case 2382: self = .liveMeetingJoinPreCheck
    case 2383: self = .liveMeetingAccountBindingInfo
    case 2384: self = .liveMeetingStreamSetting
    case 2385: self = .liveMeetingFetchLivePolicy
    case 2386: self = .liveMeetingGetVerificationQrCode
    case 2387: self = .liveMeetingPollVerificationStatus
    case 2388: self = .liveMeetingGetVerificationInfo
    case 2389: self = .liveMeetingVerifyTwoElement
    case 2390: self = .liveMeetingLivenessVerificationCallback
    case 2391: self = .liveMeetingGetLivePermission
    case 2392: self = .liveMeetingGetVerificationTicket
    case 2393: self = .liveMeetingPullSetting
    case 2500: self = .pullAccountBadges
    case 2501: self = .pushAccountBadges
    case 2502: self = .clearAccountBadge
    case 3000: self = .putEmail
    case 3001: self = .pullEmailMembers
    case 3002: self = .patchEmailMembers
    case 3003: self = .pushEmailMembers
    case 3004: self = .pullEmailsByIds
    case 3005: self = .patchEmail
    case 3006: self = .pushEmail
    case 3007: self = .pullEmailChatters
    case 3008: self = .pullEmailRole
    case 3009: self = .pullEmailWantedAtChatters
    case 3010: self = .mailGetSendExternalLimit
    case 3011: self = .mailGetEmlByInstanceCode
    case 3100: self = .pullStickerSetsStore
    case 3101: self = .pullStickerSets
    case 3102: self = .pullStickerSetsByID
    case 3103: self = .putStickerSets
    case 3104: self = .patchStickerSets
    case 3105: self = .deleteStickerSets
    case 3106: self = .pushStickerSets
    case 3107: self = .pullStickerSetCard
    case 3108: self = .pullStickerSetsTab
    case 3500: self = .createMail
    case 3501: self = .updateMailDraft
    case 3502: self = .getMailInbox
    case 3503: self = .getThreadsByID
    case 3504: self = .pushThreadForNewMail
    case 3505: self = .updateMailStatus
    case 3506: self = .cloneDriveFile
    case 3507: self = .mailAddChange
    case 3508: self = .getFilteredThreads
    case 3509: self = .getThreadsByIDWithMeta
    case 3510: self = .createOutgoingMail
    case 3511: self = .mailApplyRule
    case 3512: self = .mailGetMessagesByThreadIdsForSearch
    case 3513: self = .mailNewMessagesRequest
    case 3514: self = .markAllAsReadRequest
    case 3515: self = .mailGetRawMessages
    case 3600: self = .mailInitSync
    case 3601: self = .getMailThreadMeta
    case 3602: self = .getMailMessages
    case 3603: self = .mailPushChange
    case 3604: self = .getMailThreadMetaV2
    case 3605: self = .getLabelListByUser
    case 3606: self = .getMailMessageMeta
    case 3607: self = .getMailMessageMetaWithFolderDisable
    case 3608: self = .getMailMessageGroups
    case 3650: self = .mailAtContact
    case 3651: self = .mailSimpleSearchRequest
    case 3652: self = .mailSimpleSearchResponse
    case 3653: self = .mailGetSearchHistoryRequest
    case 3654: self = .mailStoreSearchHistoryKeyword
    case 3655: self = .mailDeleteSearchHistory
    case 3656: self = .mailRulePreviewSearchRequest
    case 3657: self = .mailContactSearch
    case 3658: self = .mailAdvancedSearch
    case 3659: self = .mailChangeAsyncResult
    case 3660: self = .getUnreadMailThreadMeta
    case 3661: self = .getMailThreadTimestamp
    case 3662: self = .mailGetThreadMetaByThreadIds
    case 3663: self = .mailGetThreadFullByThreadIds
    case 3664: self = .mailGetMailMessageFullByMessageIds
    case 3665: self = .mailGetMailMessageBodyByMessageIds
    case 3666: self = .mailGetMailMessageSummaryByMessageIds
    case 3667: self = .mailGetSyncStatus
    case 3668: self = .mailGetMessageMetaByMessageIds
    case 3669: self = .mailDeleteMailExternalContact
    case 3700: self = .getMailSettings
    case 3701: self = .updateMailSettings
    case 3702: self = .pushMailSettings
    case 3703: self = .mailChangeOauthStatus
    case 3704: self = .pushMailOauthStatus
    case 3705: self = .mailUpdateClientTabSetting
    case 3706: self = .mailGetGoogleAuthURL
    case 3707: self = .mailGetCanShareToExternal
    case 3708: self = .mailUnbindGmailAccount
    case 3709: self = .mailGetTenantDomains
    case 3710: self = .pushMailUnreadCount
    case 3711: self = .pullMailCard
    case 3712: self = .getMailCard
    case 3713: self = .sendMailCard
    case 3714: self = .addMailChangeLog
    case 3715: self = .deleteLargeFile
    case 3716: self = .mailGetLabelThreadsCount
    case 3717: self = .mailGetLongRunningTask
    case 3718: self = .mailCancelLongRunningTask
    case 3719: self = .mailPushClientForThirdServicePermissionConfig
    case 3720: self = .mailGetConfig
    case 3721: self = .mailGetUserEngagementSettings
    case 3722: self = .mailUpdateUserEngagementSettings
    case 3723: self = .mailSyncAlias
    case 3750: self = .mailCreateRuleRequest
    case 3751: self = .mailUpdateRuleRequest
    case 3752: self = .mailDeleteRuleRequest
    case 3753: self = .mailGetRulesRequest
    case 3754: self = .mailRuleControlRequest
    case 3755: self = .mailAdjustRuleOrderRequest
    case 3756: self = .mailSendAutoTransferAuthMail
    case 3757: self = .mailGetAutoTransferEmail
    case 3778: self = .pushMailRelatedBizID
    case 3779: self = .mailShareMailAttachmentRequest
    case 3780: self = .mailShareCreatePermRequest
    case 3781: self = .mailShareUpdatePermRequest
    case 3782: self = .mailShareDeletePermRequest
    case 3783: self = .mailShareGetThreadCollaboratorsInfoRequest
    case 3784: self = .mailShareGetMessageFullRequest
    case 3785: self = .mailShareGetShareGroupsRequest
    case 3786: self = .mailShareCreateDocRequest
    case 3787: self = .mailShareGetShareGroupInfoRequest
    case 3788: self = .mailShareCreateShareDraftRequest
    case 3789: self = .mailShareUpdateDraftRequest
    case 3790: self = .mailShareGetMailSettings
    case 3791: self = .mailGetMessageSummaryRequest
    case 3792: self = .mailGetMessageBodyRequest
    case 3793: self = .mailShareSearchMemberRequest
    case 3794: self = .mailShareUpdateCollaboratorsRoleRequest
    case 3795: self = .mailShareCreateGroupRequest
    case 3796: self = .mailGetMigrationStatus
    case 3801: self = .mailGetGroupSetting
    case 3802: self = .mailSetGroupSetting
    case 3803: self = .mailPushGroupSetting
    case 3804: self = .mailDeleteGroupSetting
    case 3805: self = .mailGetConfigRequest
    case 3806: self = .mailGetManagedGroups
    case 3807: self = .mailGetGroupDetail
    case 3808: self = .mailUpdateGroup
    case 3809: self = .mailListGroupMembers
    case 3810: self = .mailListSharedEmailAccounts
    case 3811: self = .mailRecallStatus
    case 3812: self = .mailRecallDetail
    case 3820: self = .pushMailImapMigrationStatus
    case 3821: self = .mailImapMigrationGetStatus
    case 3822: self = .mailImapMigrationUpdateToken
    case 3823: self = .mailImapMigrationUpdateUids
    case 3824: self = .mailImapMigrationGetOldMessageTask
    case 3825: self = .mailImapMigrationUploadOldMessage
    case 3826: self = .mailImapMigrationUploadNewMessage
    case 3827: self = .mailImapMigrationQueryProgress
    case 3828: self = .mailImapMigrationDecodeMessage
    case 3829: self = .mailImapMigrationGetMailboxInfos
    case 3830: self = .mailImapMigrationBlocked
    case 3831: self = .pushMailImapMigrationOldestInfo
    case 3832: self = .mailImapMigrationGetHistoryDoneInfo
    case 3833: self = .mailImapMigrationGetAllAccountStatus
    case 3834: self = .mailImapMigrationVerifyToken
    case 3840: self = .mailTranslation
    case 3843: self = .mailUnsubscribe
    case 3845: self = .mailGetSmartReply
    case 3846: self = .mailGetIsSmartInboxTargetUser
    case 3847: self = .mailGetAuthorizationCodes
    case 3848: self = .mailCreateAuthorizationCode
    case 3849: self = .mailDeleteAuthorizationCode
    case 3850: self = .mailGetExchangeAuthURL
    case 3851: self = .mailGetThirdPartyClientSetting
    case 3852: self = .pushMailSettingChange
    case 3853: self = .mailGetMessageSendStatus
    case 3854: self = .mailPullEnterpriseEmail
    case 3855: self = .mailMultiCopyFile
    case 3856: self = .getSharedMailSettings
    case 3857: self = .updateSharedMailSettings
    case 3858: self = .pushSharedMailSettingChange
    case 3859: self = .mailGetClearInfoChangeList
    case 3860: self = .mailCheckGroupMemberExistence
    case 3861: self = .mailCheckGroupMemberInfo
    case 3862: self = .mailCheckUserGroupPermission
    case 3870: self = .mailCreateMailUserSignature
    case 3871: self = .mailUpdateMailUserSignature
    case 3872: self = .mailApplyMailSignature
    case 3873: self = .mailDeleteMailUserSignature
    case 3874: self = .mailQueryMailSignature
    case 3875: self = .mailGetUserField
    case 3876: self = .mailCheckImageTokensPermission
    case 3877: self = .mailGetMailContactTypeByEmailAddress
    case 4000: self = .putCryptoMessage
    case 4001: self = .ackCryptoMessages
    case 4002: self = .pullCryptoMessageDetailByIds
    case 4003: self = .putSystemMessageForScreenshots
    case 4101: self = .putCryptoP2PChat
    case 4102: self = .putCryptoGroupChat
    case 4103: self = .putCryptoChatChatter
    case 4104: self = .deleteCryptoChatChatter
    case 4105: self = .disbandCryptoChat
    case 4106: self = .pushNewDeviceOnline
    case 4107: self = .putCryptoBurnedTime
    case 4108: self = .putCryptoMessageMain
    case 4109: self = .putCryptoMessageMissingContent
    case 4111: self = .putUserDeviceIpk
    case 4112: self = .pushUserDeviceIpkChange
    case 4113: self = .putSecretMessage
    case 4114: self = .getUsersIpksByChat
    case 4115: self = .pushChatDeviceIpkChange
    case 4200: self = .pullEmergencyCallNumber
    case 4201: self = .putEmergencyCallReason
    case 4301: self = .pullAbbreviationsByIds
    case 4302: self = .putAbbreviationFeedbacks
    case 4303: self = .getAbbreviationCard
    case 4304: self = .refreshMessageBaikeRefs
    case 4305: self = .getFeedback
    case 5000: self = .putChatterViaShare
    case 5001: self = .pullChatsRole
    case 5002: self = .pullChatApplications
    case 5003: self = .pushChatApplication
    case 5004: self = .processChatApplications
    case 5005: self = .resetContactToken
    case 5006: self = .putContactApplication
    case 5007: self = .readApplications
    case 5008: self = .pullPersonalContacts
    case 5009: self = .pushContacts
    case 5010: self = .pullUnreadChatApplicationsBadge
    case 5011: self = .deleteContact
    case 5012: self = .pullContactToken
    case 5013: self = .pushContactToken
    case 5014: self = .putContactSetting
    case 5015: self = .pushContactSetting
    case 5016: self = .pullContactSetting
    case 5017: self = .pullUserProfile
    case 5018: self = .putUserInvitation
    case 5019: self = .searchUserByContactPoint
    case 5020: self = .pullChatQrcodeToken
    case 5021: self = .pullChatQrcodeInfo
    case 5022: self = .putChatterViaQrcode
    case 5023: self = .pullChatChatterByIds
    case 5024: self = .pullChatSecurityConfig
    case 5025: self = .pullChatNoTraceRemovedPositions
    case 5026: self = .pullUserProfiles
    case 5027: self = .pullChatNonDepartmentalChatters
    case 5028: self = .pullChatSidebarButtons
    case 5029: self = .pullChatJoinLeaveHistory
    case 5030: self = .checkP2PChatsExistByUser
    case 5031: self = .pullUserProfileV2
    case 5032: self = .batchPullUserProfileV2
    case 5033: self = .pullContactTokensForSharing
    case 5034: self = .checkContactIsLinkedToUser
    case 5035: self = .patchSelfUserProfile
    case 5036: self = .patchUserMemo
    case 5037: self = .pullUserProfileSectionTab
    case 5038: self = .resetUserAvatar
    case 5039: self = .putResetUserAvatarResult
    case 5040: self = .pullExternalChattersInSameChatAuth
    case 5041: self = .pullAlreadyInChat
    case 5050: self = .pullWorkStatus
    case 5051: self = .deleteWorkStatud
    case 5055: self = .pullChatLinkToken
    case 5056: self = .putChatterViaShareLink
    case 5057: self = .pullChatLinkInfo
    case 5060: self = .pullMyPromotionLink
    case 5061: self = .pullPromotionRule
    case 5062: self = .putBusinessInvitation
    case 5070: self = .pullChatAvatarMeta
    case 5080: self = .pullInvitationLink
    case 5081: self = .putAdminInvitation
    case 5082: self = .pullUserInvitationMessage
    case 5083: self = .putBannerBeginTime
    case 5090: self = .pushUserSidebarUpdateEvent
    case 5091: self = .pullUserSidebar
    case 5092: self = .checkUserPhoneNumber
    case 5093: self = .pullUserProfileAssignedFields
    case 5094: self = .authDownloadToken
    case 5100: self = .putPin
    case 5101: self = .pullPinsByMessageIds
    case 5102: self = .pullChatPins
    case 5103: self = .deletePins
    case 5104: self = .pushPin
    case 5105: self = .pushPinRead
    case 5106: self = .pullPinReadStatus
    case 5107: self = .putPinRead
    case 5108: self = .pullPinByChatUpdateTime
    case 5109: self = .putAllPinSetting
    case 5110: self = .pushAllPinSetting
    case 5111: self = .pullAllPinSetting
    case 5200: self = .updateAccountUserListOrder
    case 5201: self = .pushAccountUserList
    case 5202: self = .pullAccountUserList
    case 5203: self = .pushAccountUpdateUserEvnet
    case 5204: self = .pushAccountUnregisterUserEvent
    case 5205: self = .pushGlobalAccountUpdateUserEvent
    case 5206: self = .pushUserListUpdateEvent
    case 5207: self = .pushUserMigrateSwitchEvent
    case 5300: self = .putUserName
    case 5301: self = .getUserUpdateNamePermission
    case 5302: self = .pushUserLogoutEvent
    case 5303: self = .pullUserUpdateFieldPermission
    case 5400: self = .putUserAlias
    case 5401: self = .putGroupNickname
    case 5402: self = .pushUserAlias
    case 5403: self = .pushGroupNickname
    case 5500: self = .pullMessageI18NTemplates
    case 5501: self = .pullUserNames
    case 5600: self = .pullChatShareHistory
    case 5601: self = .putChatShareHistory
    case 5602: self = .patchChatShareStatus
    case 5700: self = .pullChatShareTokenInfo
    case 5800: self = .createFaceToFaceApplication
    case 5801: self = .pushFaceToFaceApplicants
    case 5802: self = .joinFaceToFaceChat
    case 5900: self = .patchChatAdminUsers
    case 5901: self = .pushChatAdminUsers
    case 5902: self = .pullChatAdminUsers
    case 5911: self = .pullChatTabs
    case 5912: self = .createChatTab
    case 5913: self = .deleteChatTab
    case 5914: self = .reorderChatTabs
    case 5915: self = .updateChatTabs
    case 5916: self = .pushChatTabs
    case 5921: self = .putChatOnlineStatus
    case 5931: self = .analyzeChattersSheet
    case 6000: self = .pushSid
    case 6001: self = .pushBackgroundNotification
    case 6002: self = .pushBannerNotification
    case 6300: self = .pullChatterSubscribers
    case 6951: self = .pullNewestPolicies
    case 6952: self = .putNewestPolicies
    case 7000: self = .putDeviceNotifySetting
    case 7001: self = .pushDeviceOnlineStatus
    case 7002: self = .pullDevicesOnlineStatus
    case 7003: self = .putDeviceNotifySettingDisableNotify
    case 7004: self = .putDeviceNotifySettingStillNotifyAt
    case 7005: self = .pushUserLoginStatus
    case 7006: self = .pullDeviceNotifySetting
    case 7007: self = .putDeviceSetting
    case 7008: self = .pullDeviceSetting
    case 7009: self = .pullUserSetting
    case 7010: self = .patchUserSetting
    case 7011: self = .pushUserSetting
    case 7012: self = .putWayToFindMeSetting
    case 7013: self = .pushWayToFindMeSetting
    case 7014: self = .putWayToAddFriendSettingItem
    case 7015: self = .pushWayToAddFriendSettingItem
    case 7016: self = .pullAddFriendSetting
    case 7017: self = .pushDeviceNetworkAccessEvent
    case 7018: self = .pullSpellCheckWords
    case 7019: self = .pushSpellCheckAddWords
    case 7020: self = .putSpellCheckAddWords
    case 7021: self = .pullMessageNotificationsOffDuringCalls
    case 7022: self = .pullFeedFilterSetting
    case 7023: self = .putFeedFilterSetting
    case 7024: self = .pushFeedFilterSetting
    case 7025: self = .patchUniversalUserSetting
    case 7026: self = .pullUniversalUserSetting
    case 7027: self = .pushUniversalUserSetting
    case 7028: self = .putDeviceNotifySettingStillNotifySpecialFocus
    case 7029: self = .pullDynamicEmojiResources
    case 7030: self = .pullThreeColumnsSetting
    case 7031: self = .patchThreeColumnsSetting
    case 7032: self = .pushThreeColumnsSetting
    case 7100: self = .putDeviceToken
    case 7101: self = .pushAction
    case 7102: self = .putDeviceBasicModeSetting
    case 7103: self = .pullDeviceBasicModeSetting
    case 7501: self = .pullProductGuide
    case 7504: self = .deleteProductGuide
    case 7505: self = .pushProductGuide
    case 7506: self = .pullGuideV2
    case 7507: self = .getUserGuideRequest
    case 7508: self = .postUserConsumingGuideRequest
    case 7509: self = .userGuideUpdatedRequest
    case 7600: self = .pullIceBreakingStatus
    case 7601: self = .putIceBreakingAction
    case 7602: self = .putTourGuideAchieved
    case 7603: self = .putUpdateTenantPackage
    case 7604: self = .putTrustedMail
    case 7605: self = .pullTrustedMailInfo
    case 7606: self = .getAdvertiseSourceConfig
    case 7700: self = .pushGuideToRateState
    case 7701: self = .pullGuideToRateState
    case 7702: self = .putGuideToRateEvent
    case 8001: self = .pushSyncDevices
    case 8002: self = .pullGeoInfoByIp
    case 8003: self = .pullCertificateDecryptionKey
    case 8004: self = .pullChatMemberSuppRoleApprovalSetting
    case 8005: self = .putChatMemberSuppRoleApproval
    case 8100: self = .pushThreads
    case 8101: self = .patchThread
    case 8102: self = .pullChatThreads
    case 8103: self = .pullThreadMessages
    case 8104: self = .pushThreadSetting
    case 8105: self = .putReadThreads
    case 8106: self = .pushThreadReadState
    case 8108: self = .pullThreadsByPositions
    case 8109: self = .pullThreadMessageByPositions
    case 8110: self = .pushThreadUpdated
    case 8111: self = .pullThreadsByIds
    case 8112: self = .pullThreadsSetting
    case 8113: self = .pushThreadsRemoved
    case 8114: self = .pushThreadMutableInfo
    case 8115: self = .pushThreadNoReplyCountUpdated
    case 8116: self = .pullThreadCard
    case 8117: self = .pushThreadStateInfo
    case 8118: self = .pullFilteredThreadsByChat
    case 8119: self = .pushThreadFilterUpdated
    case 8120: self = .pullRecommendationsByUser
    case 8121: self = .putReadMyThreads
    case 8122: self = .pushMyThreadsReadState
    case 8123: self = .pullThreadAnonymousQuota
    case 8124: self = .pushThreadAnonymousQuota
    case 8125: self = .putThreadShare
    case 8126: self = .pullChatTemplateBanner
    case 8127: self = .putChatTemplateBannerStatus
    case 8128: self = .pushThreadUpdateInfo
    case 8300: self = .putTopicsReadState
    case 8301: self = .pullRecommendedTopicGroups
    case 8302: self = .pullMyTopicGroups
    case 8303: self = .pullTopicGroupsToPost
    case 8310: self = .uninterestTopicGroupForUser
    case 8311: self = .uninterestTopicForUser
    case 8312: self = .uninterestUserForUser
    case 8319: self = .pullTopicGroupsByIds
    case 8320: self = .pushTopicMessages
    case 8321: self = .putTopicGroupMemberViaRecommendation
    case 8322: self = .pullTopicGroupTabNotification
    case 8323: self = .pushTopicGroupSetting
    case 8324: self = .pushTopicGroup
    case 8325: self = .pullTopicGroupSetting
    case 11000: self = .searchUser
    case 11001: self = .searchMessage
    case 11002: self = .searchGroupChat
    case 11003: self = .search
    case 11004: self = .searchChatter
    case 11005: self = .smartSearch
    case 11006: self = .putSearchFeedback
    case 11007: self = .pullSearchHistoryEntities
    case 11008: self = .deleteSearchHistoryEntity
    case 11009: self = .segmentText
    case 11010: self = .searchEmailMessage
    case 11011: self = .searchDoc
    case 11012: self = .integrationSearch
    case 11013: self = .pullChatResourceMessages
    case 11014: self = .putSearchMsgHistory
    case 11015: self = .pullSearchMsgHistory
    case 11016: self = .deleteSearchMsgHistory
    case 11017: self = .pullSearchSetting
    case 11018: self = .pullSearchFilter
    case 11019: self = .searchCustomizeField
    case 11020: self = .searchInChat
    case 11021: self = .universalSearch
    case 11022: self = .externalResourceSearch
    case 11023: self = .pullUserSearchTabs
    case 11024: self = .putUserSearchTabs
    case 11025: self = .pullAvailableSearchTabs
    case 11026: self = .putSearchQueryHistory
    case 11027: self = .deleteSearchQueryHistory
    case 11100: self = .pullClosestChatters
    case 11101: self = .pullClosestChats
    case 11102: self = .pullLocalSearchRankModelConfig
    case 11103: self = .pullSpecialFocus
    case 11104: self = .updateSpecialFocus
    case 11105: self = .pushUserSpecialFocus
    case 12001: self = .pullPacketsBySids
    case 12002: self = .sync
    case 12003: self = .pullPipelineIntervalBySid
    case 13001: self = .pullOncalls
    case 13002: self = .putOncallChat
    case 13003: self = .pullAllOncallTags
    case 13004: self = .pullOncallByTags
    case 13005: self = .putFinishOncall
    case 13006: self = .pullHomePageOncalls
    case 13007: self = .putInviteOncall
    case 13008: self = .pullOncallsByIds
    case 13009: self = .pushOncalls
    case 13100: self = .pullChatBots
    case 13101: self = .pullChatCandidateBots
    case 13102: self = .pushLogUpload
    case 13103: self = .pushLogRequest
    case 13110: self = .pushLogRetrieval
    case 13111: self = .retryLogRetrievalTask
    case 13112: self = .fetchLogRetrievalTaskStatus
    case 14001: self = .patchDocPrem
    case 14002: self = .pushDoc
    case 14003: self = .pullDocs
    case 14004: self = .pushDocFeed
    case 14005: self = .pullDocFeedsByIds
    case 14006: self = .pushDocs
    case 14007: self = .pullDocPerms
    case 14008: self = .putDocFeed
    case 14009: self = .pullDocsHistory
    case 14010: self = .pullConvertToken
    case 14011: self = .patchDocFeedSetting
    case 14012: self = .pushDocFeedSetting
    case 14013: self = .pullDocFeedSettings
    case 14014: self = .putReadDocMessages
    case 14015: self = .pullDocByUrls
    case 14016: self = .pullDocMessageReadStatus
    case 14017: self = .pushDoc2
    case 14018: self = .pushDocs2
    case 14100: self = .pushToDoc
    case 14101: self = .pushDocImageRelay
    case 14102: self = .pullDocFeedMsgTmpl
    case 15001: self = .sendHongbao
    case 15002: self = .grabHongbao
    case 15003: self = .updateHongbao
    case 15004: self = .pullHongbaoInfo
    case 15005: self = .pullHongbaoRecvDetail
    case 15006: self = .pullWalletBalance
    case 15007: self = .pullSendHongbaoRecord
    case 15008: self = .pullGrabHongbaoRecord
    case 15009: self = .pullHongbaoCoverList
    case 16000: self = .pullMessageActionList
    case 18001: self = .grabCommercialHongbao
    case 18002: self = .updateCommercialHongbao
    case 18003: self = .pullCommercialHongbaoInfo
    case 18004: self = .pullCommercialHongbaoRecvDetail
    case 30000: self = .putUrgent
    case 30001: self = .putUrgentAck
    case 30002: self = .pushUrgent
    case 30003: self = .pushUrgentAck
    case 30004: self = .pullUrgentWaitingAck
    case 30005: self = .pullUrgentAckStatus
    case 30006: self = .confirmUrgentAckByID
    case 30007: self = .pullUrgentPhones
    case 30008: self = .pushFailedUrgentNotifyResult
    case 30009: self = .pullSelectUrgentChatters
    case 30010: self = .pullUrgentChatChatters
    case 30011: self = .pullChattersUrgentInfo
    case 40001: self = .pullTtUser
    case 40002: self = .putTtUser
    case 40100: self = .pushAppCenterUpdate
    case 40101: self = .pushMalaitaUpdate
    case 40102: self = .pushAppCenterUpdateV2
    case 40103: self = .pushTenantAppUpdate
    case 40104: self = .pushMiniprogramUpdate
    case 40105: self = .pushOpenAppFeed
    case 40106: self = .pushOpenAppNotifyReadSync
    case 40107: self = .pushOpenAppSettings
    case 40108: self = .pushMiniprogramPreview
    case 40111: self = .pushOpenCommon
    case 40112: self = .pullMalaitaPreview
    case 40113: self = .pullUlawaPreview
    case 40114: self = .pullMalaitaNotificationUnreadCount
    case 40115: self = .pullUlawaNotificationUnreadCount
    case 40116: self = .setMalaitaJumpReport
    case 40117: self = .pullAppChatFeed
    case 40118: self = .pushAppChatFeedSettings
    case 40119: self = .createAppChat
    case 40120: self = .pullAppChatFeedID
    case 40121: self = .setAppChatNoticeConfig
    case 40122: self = .pushGadgetAppData
    case 40123: self = .pullOpenAppBadgeNodes
    case 40124: self = .pushOpenAppBadgeNodes
    case 40125: self = .pullOpenAppBadgeSettings
    case 70000: self = .pullPipeList
    case 70001: self = .pullMultiPipePacketsByTypes
    case 70002: self = .pullMultiPipePacketsByIds
    case 70003: self = .pullUnsupportPipeTypeInfos
    case 70004: self = .pullMultiPipePacketsBySupportType
    case 70005: self = .pullChatChangeLists
    case 70006: self = .pullMultiPipePackets
    case 70007: self = .pullChangeLists
    case 70008: self = .checkPipesTimeout
    case 81000: self = .pullRoomInfo
    case 81030: self = .submitFeedbacks
    case 82011: self = .updateScheduleStatus
    case 88001: self = .sketchStart
    case 88002: self = .updateShareScreenSettings
    case 88003: self = .fetchAllSketchData
    case 88004: self = .applyByteviewAccessibility
    case 88005: self = .fetchSketchDataByShapeIds
    case 88006: self = .pullSketchHistory
    case 88011: self = .remoteControl
    case 88012: self = .updateRemoteControlSettings
    case 88013: self = .getAdminSettings
    case 88015: self = .uploadParticipantInfo
    case 88016: self = .getAdminMediaServerSeetings
    case 88051: self = .pullAllFollowStates
    case 88052: self = .getFollowResources
    case 88053: self = .getURLBriefs
    case 88054: self = .uploadGoogleToken
    case 88055: self = .getGoogleToken
    case 88056: self = .revokeGoogleToken
    case 88057: self = .exchangeGoogleToken
    case 88058: self = .replyFollowNotice
    case 88100: self = .pushVcShareMessage
    case 88101: self = .operateWhiteboard
    case 88102: self = .operateWhiteboardPage
    case 88103: self = .uploadWhiteboard
    case 88104: self = .pullWhiteboardSnapshot
    case 88105: self = .saveWhiteboard
    case 89000: self = .sendGrootCellsMeetingSpace
    case 89001: self = .pullGrootCellsMeetingSpace
    case 89002: self = .pushGrootCells
    case 89003: self = .grootChannelHandshakeMeetingSpace
    case 89004: self = .pushMeetingSpaceInfo
    case 89005: self = .updateReadCursor
    case 89006: self = .getMeetingSpaceMetaData
    case 89007: self = .getMeetingSpaceAgenda
    case 89008: self = .getMeetingSpaceFiles
    case 89009: self = .getUniqueIDByMeetingID
    case 89010: self = .grootChannelPingMeetingSpace
    case 89011: self = .checkInterviewMeetingSpace
    case 89012: self = .occupyInterviewCoding
    case 89013: self = .sendInterviewCodingAction
    case 89014: self = .updateMinutesStatus
    case 89050: self = .sendGrootCells
    case 89051: self = .pullGrootCells
    case 89052: self = .grootChannelHandshake
    case 89053: self = .grootChannelPing
    case 89054: self = .pullUpstreamGrootCells
    case 89201: self = .getCalendarMeetingByUids
    case 89202: self = .getHistoryMeetingList
    case 89203: self = .getCallHistoryList
    case 89204: self = .batchGetMeetingByIds
    case 89205: self = .batchGetUniqueIDByEventID
    case 89206: self = .getVcTabTotalMissedCall
    case 89207: self = .vcTabMissedCallConfirm
    case 89208: self = .getVcTabHistoryList
    case 89209: self = .getVcTabMeetingDetail
    case 89211: self = .notifyVcTabMissedCalls
    case 89212: self = .createVcTabMeetingStatistics
    case 89213: self = .pushVcTabNotice
    case 89214: self = .pushOnCallTicketNotice
    case 89301: self = .getMeetingURLInfo
    case 89302: self = .vcOwnerForceTransferHost
    case 89303: self = .checkVcManageCapabilities
    case 89304: self = .vcSearchUserInMeeting
    case 89305: self = .uploadEquipmentInfo
    case 89306: self = .vcLarkSearchUserInMeeting
    case 89308: self = .vcGetSuiteQuota
    case 89309: self = .vcPullCardInfo
    case 89310: self = .keepMeeting
    case 89311: self = .pushRtcStatus
    case 89312: self = .pullAllRtcStatus
    case 89317: self = .refuseReply
    case 89321: self = .getVcLobbyParticipants
    case 89322: self = .updateVcLobbyParticipant
    case 89323: self = .vcLobbyHeartbeat
    case 89341: self = .vcManageApply
    case 89342: self = .vcManageApproval
    case 89343: self = .pushVcManageNotify
    case 89344: self = .pushVcManageResult
    case 89349: self = .sendClientInfo
    case 89350: self = .entrustServerTrack
    case 89351: self = .setCalendarVcSettings
    case 89352: self = .getCalendarVcSettings
    case 89353: self = .getCalendarGuestList
    case 89354: self = .getRoomStatusByShareCode
    case 89360: self = .breakoutRoomInfoNotify
    case 89361: self = .startMeetingBreakoutRoom
    case 89362: self = .joinMeetingBreakoutRoom
    case 89363: self = .pullBreakoutRoomInfo
    case 89364: self = .vcCreateCalendarEvent
    case 89365: self = .vcUpdateCalendarEvent
    case 89366: self = .pullVcCalendarEvents
    case 89367: self = .getMainCalendar
    case 89370: self = .getCalendarVchatStatus
    case 89371: self = .getInterviewVchatStatus
    case 89372: self = .getCalendarDefaultSettings
    case 89373: self = .applyPreVcSettingID
    case 89374: self = .getCalendarPreSettings
    case 89375: self = .closeInterviewerNotice
    case 89381: self = .translateVcMessages
    case 89382: self = .pushVcTranslateResults
    case 89390: self = .setBreakoutRoomPreSetting
    case 89391: self = .getBreakoutRoomPreSetting
    case 89392: self = .getAndBindFilesVc
    case 89393: self = .breakoutDownloadTemplate
    case 89394: self = .breakoutUploadFile
    case 89395: self = .notifyBreakoutManageResult
    case 89401: self = .applyDtmf
    case 89403: self = .pullParticipantInfo
    case 89404: self = .getSipDomainByUniqueID
    case 89405: self = .getPstnSipFc
    case 89406: self = .getH323AccessByUniqueID
    case 89450: self = .createEnterprisePhone
    case 89451: self = .cancelEnterprisePhone
    case 89452: self = .notifyEnterprisePhone
    case 89453: self = .getEnterprisePhoneConfig
    case 89454: self = .checkEnterprisePhoneQuota
    case 89455: self = .getPhoneNumberAttribution
    case 89460: self = .getMeetingUnit
    case 89461: self = .getTargetUserPhoneNumber
    case 89465: self = .genOnCallTicket
    case 89466: self = .updateOnCallTicket
    case 89501: self = .searchUsersAndChats
    case 89601: self = .startSamePageMeeting
    case 89602: self = .updateSamePageMeeting
    case 89603: self = .initSamePageMeeting
    case 89701: self = .stopShareBoxLink
    case 89702: self = .shareBoxHeartbeat
    case 89703: self = .pushShareLinkInfo
    case 89704: self = .startShareLink
    case 89705: self = .pushBoxNotice
    case 89706: self = .changeShareLinkSetting
    case 89801: self = .uploadVcMaterialMeta
    case 89802: self = .pullVcMaterialMeta
    case 89803: self = .deleteVcMaterial
    case 89804: self = .pushVcMaterialMsg
    case 90001: self = .mmPushReactionInfo
    case 90002: self = .mmPushSummaryStatus
    case 90003: self = .mmPushSummaryChange
    case 90004: self = .mmPushSummaryCheck
    case 90005: self = .mmPushRealtimeSubtitleSentence
    case 90006: self = .mmPushDiarizationRematchStatus
    case 90008: self = .voicePrintPullStatus
    case 90009: self = .voicePrintPushStatus
    case 90010: self = .voicePrintClear
    case 91030: self = .submitNeoFeedbacks
    case 109001: self = .pullLeanModeStatusAndAuthority
    case 109002: self = .patchLeanModeStatus
    case 109003: self = .pushLeanModeStatusAndAuthority
    case 110001: self = .pullDynamicFlow
    case 110002: self = .pullDynamicFlowStep
    case 110003: self = .reportFlowEvent
    case 110004: self = .pullDynamicResource
    case 110005: self = .pushDynamicFlow
    case 110006: self = .pushDynamicFlowStep
    case 110007: self = .trySetUgEventState
    case 110008: self = .getNewUserCreateTeamStrongGuideContext
    case 110009: self = .getLdrServiceApplink
    case 110010: self = .bizEventReport
    case 110050: self = .pullNewFeatureMaterial
    case 110051: self = .submitNewFeatureClickEvent
    case 110071: self = .getMeegoSingature
    case 110101: self = .ecmSubscribeEvent
    case 110102: self = .ecmKeepLiveSubscribe
    case 110103: self = .ecmCancelSubscribe
    case 110104: self = .ecmEventBroadcast
    case 110105: self = .ecmAddItemSubscribe
    case 200000: self = .getLiveConfig
    case 200001: self = .liveHeartbeat
    case 200002: self = .getLiveInfo
    case 200003: self = .updateLiveInfo
    case 200004: self = .pushLiveNotice
    case 200005: self = .pushLiveInfo
    case 200006: self = .updateLiveStatus
    case 200007: self = .pollLiveAudienceNum
    case 200008: self = .createLive
    case 200009: self = .createLiveScene
    case 200010: self = .editLiveScene
    case 200011: self = .deleteLiveScene
    case 200012: self = .moveLiveScene
    case 200013: self = .getSubSceneList
    case 200014: self = .switchSubScene
    case 200015: self = .mgetSceneByID
    case 200016: self = .joinLiveRoom
    case 200017: self = .inviteLiveGuest
    case 200018: self = .removeLiveGuest
    case 200019: self = .notifyLiveGuest
    case 200020: self = .updateLiveDevice
    case 200021: self = .mgetLiveUserByID
    case 200022: self = .pushLiveChange
    case 200023: self = .leaveLiveRoom
    case 200024: self = .livePreCheck
    case 200025: self = .getLiveInfoV2
    case 200026: self = .updateLiveInfoV2
    case 200027: self = .deleteLiveInfo
    case 200028: self = .getLiveInfoList
    case 200029: self = .exportLiveStatistics
    case 200030: self = .liveStatisticsPush
    case 200031: self = .getLiveStaticResource
    case 200032: self = .uploadLiveFile
    case 200033: self = .liveFileReviewResultPush
    case 200034: self = .updateLiveUser
    case 200035: self = .searchLiveShareCandidate
    case 200036: self = .sendLiveShareMessage
    case 200037: self = .pollingLiveStatistics
    case 200038: self = .createLiveAccessory
    case 200039: self = .deleteLiveAccessory
    case 200040: self = .updateLiveAccessory
    case 200041: self = .mgetLiveAccessoryByID
    case 200042: self = .liveResourceRiskCheck
    case 200043: self = .closeLiveWindowNotice
    case 200044: self = .getLivePermissionMembers
    case 200045: self = .getLivePermissionChatPaged
    case 210000: self = .getAssociatedLiveStatusWithEventID
    case 210001: self = .pushAssociatedLiveStatus
    case 220000: self = .pushLiveAccessories
    case 230001: self = .fetchLiveMessages
    case 230002: self = .sendLiveMessage
    case 230003: self = .deleteLiveMessage
    case 230004: self = .pinLiveMessage
    case 230005: self = .liveBanUser
    case 230006: self = .getLiveBannedUser
    case 240001: self = .getLiveList
    case 240002: self = .getMoreLives
    case 240003: self = .deleteLive
    case 240004: self = .cmsCreateLive
    case 240005: self = .cmsGetLiveInfo
    case 240006: self = .updateLiveConfig
    case 240007: self = .updateStream
    case 240008: self = .getStreamPushInfo
    case 240009: self = .checkContentText
    case 240010: self = .getLiveStaticResourceV2
    case 240011: self = .getLiveThemeColor
    case 240012: self = .getLiveConfigCondition
    case 800021: self = .whiteboardStart
    case 800022: self = .whiteboardStop
    case 800023: self = .fetchAllWhiteboardData
    case 900000: self = .pullMessageDocPerms
    case 900001: self = .pushCipherChangeEvent
    case 900002: self = .pullChangedCipherKeys
    case 900003: self = .translateMessageURLPreview
    case 900004: self = .pullMessageLastVisibleInfo
    case 1000001: self = .syncCalendars
    case 1000002: self = .saveCalendars
    case 1000003: self = .pullCalendarUserIDRoles
    case 1000004: self = .pullCalendarByIds
    case 1000005: self = .pushChangedCalendarIds
    case 1000006: self = .pullChatterCalendarMap
    case 1000007: self = .subscribeCalendar
    case 1000008: self = .unsubscribeCalendar
    case 1000009: self = .getGoogleAuthURL
    case 1000010: self = .revokeGoogkeToken
    case 1000011: self = .subscribeAndGetLatestUpdatedCalendars
    case 1000012: self = .saveCalendarSetting
    case 1000013: self = .pullCalendarSetting
    case 1000014: self = .searchGuests
    case 1000015: self = .pullGroupsChatters
    case 1000016: self = .searchMeetingRooms
    case 1000017: self = .multiCalendarSearch
    case 1000018: self = .pullMeetingRoomsSubscriber
    case 1000019: self = .saveCalendarSettingPb
    case 1000020: self = .pullCalendarSettingPb
    case 1000021: self = .genPasswordForCaldav
    case 1000022: self = .changePasswordForCaldav
    case 1000023: self = .deleteCaldavUserPassword
    case 1000024: self = .getCaldavPasswordList
    case 1000025: self = .getLastUsedResources
    case 1000026: self = .getLastInvitedGuests
    case 1000027: self = .pullMeetingRoomViewCalendars
    case 1000028: self = .subscribeMeetingRoomViewCalendars
    case 1000029: self = .unsubscribeMeetingRoomViewCalendars
    case 1000030: self = .msubscribeCalendars
    case 1000031: self = .getMeetingRoomViewCalendars
    case 1000032: self = .mgetCalendarsWithIds
    case 1000033: self = .munsubscribeCalendars
    case 1000034: self = .getFreeBusyAccessibleUsers
    case 1000035: self = .saveCalendarUserDeviceSetting
    case 1000036: self = .getPlaceByID
    case 1000037: self = .getPlaceTips
    case 1000038: self = .searchAttendeeInChat
    case 1000039: self = .mgetCalendarUserDeviceSetting
    case 1000040: self = .getUserCalendarIds
    case 1000041: self = .getUserPrimaryCalendar
    case 1000042: self = .mgetChatFreeBusyFavor
    case 1000043: self = .setChatFreeBusyFavor
    case 1000044: self = .getExternalAccountList
    case 1000045: self = .saveExternalAccountSetting
    case 1000046: self = .getExternalAccountByMail
    case 1000047: self = .markLarkServerMailSelected
    case 1000048: self = .uploadCalendarsWithCommit
    case 1000049: self = .saveCalendarWithMembers
    case 1000050: self = .listCalendarList
    case 1000051: self = .getResourceEquipments
    case 1000052: self = .filterMrviewResourceCalendar
    case 1000053: self = .pullMeetingRoomStatusInformation
    case 1000054: self = .getResourceCheckInInfoWithToken
    case 1000055: self = .checkInByQrCode
    case 1000056: self = .verifyCalendarList
    case 1000057: self = .pullResourceCustomizationByContactID
    case 1000058: self = .pullAllMeetingRoomsInTenant
    case 1000059: self = .getCalendarEventFromApplink
    case 1000060: self = .bindingExchangeAccount
    case 1000061: self = .revokeExchangeAccount
    case 1000062: self = .pullDepartmentsChatters
    case 1000063: self = .mgetDepartmentsMemberCount
    case 1000064: self = .getCalendarInfoByID
    case 1000065: self = .patchCalendar
    case 1000066: self = .shareCalendar
    case 1000067: self = .createCalendar
    case 1000068: self = .getCalendarIDByShareToken
    case 1000069: self = .pullMeetingRoomAndLevelInfo
    case 1000070: self = .pullAllMeetingRoomAndLevelInfo
    case 1000071: self = .searchMeetingRoomsV2
    case 1000072: self = .pullCalendarTenantSettingPb
    case 1001001: self = .webListCalendars
    case 1001002: self = .webBatchSubscribeCalendars
    case 1001003: self = .webBatchUnsubscribeCalendars
    case 1001004: self = .webCreateCalendar
    case 1001005: self = .webDeleteCalendar
    case 1001006: self = .webUpdateCalendar
    case 1001008: self = .webMgetCalendarsWithIds
    case 1002001: self = .webListCalendarEvents
    case 1002002: self = .webPullCalendarEvents
    case 1002003: self = .webCreateEvent
    case 1002004: self = .webUpdateEvent
    case 1002005: self = .webDeleteEvent
    case 1002006: self = .webMgetEventsWithIds
    case 1002007: self = .webGetGroupAttendeesByGroupIds
    case 1002008: self = .webGetUserAttendeesByUserIds
    case 1002009: self = .webGetAttendeesByCalendarIds
    case 1002010: self = .webListOptimizedCalendarEvents
    case 1002011: self = .webListFirstScreenCalendarEvents
    case 1002012: self = .webShareCalendarEvent
    case 1003001: self = .resourceManagementGetInstances
    case 1003002: self = .resourceManagementGetEvent
    case 1003003: self = .resourceManagementCreateEvent
    case 1003004: self = .resourceManagementUpdateEvent
    case 1003005: self = .resourceManagementDeleteEvent
    case 1003006: self = .resourceManagementGetConflictEventInfo
    case 1003007: self = .resourceManagementGetResourceAccessRole
    case 1003008: self = .resourceManagementListBuildings
    case 1003009: self = .resourceManagementListResources
    case 1003010: self = .resourceManagementSearchMeetingRooms
    case 1010001: self = .syncCalendarEvents
    case 1010002: self = .pushCalendarEventReminder
    case 1010003: self = .pullCalendarEventsWithRefIds
    case 1010004: self = .pullCalendarMeetingRooms
    case 1010005: self = .pullCalendarResourcesByID
    case 1010006: self = .queryInstance
    case 1010007: self = .mgetCalendarEventsWithIds
    case 1010008: self = .searchCalendarContacts
    case 1010009: self = .pullMeetingRoomBuildings
    case 1010010: self = .pullMeetingRoomsInBuilding
    case 1010011: self = .pullMeetingsByChatIds
    case 1010012: self = .quitMeeting
    case 1010013: self = .markMeetingEntered
    case 1010014: self = .upgradeToMeeting
    case 1010015: self = .batchQueryInstance
    case 1010016: self = .joinCalendarEvent
    case 1010017: self = .getCalendarEventInfo
    case 1010018: self = .markScrollClicked
    case 1010019: self = .batchQueryEventsDiff
    case 1010020: self = .getBusyUser
    case 1010021: self = .closeEventReminderCard
    case 1010022: self = .transferCalendarEvent
    case 1010023: self = .mgetCalendarEventsWithKey
    case 1010024: self = .getResourcesByCalendarIds
    case 1010025: self = .getResourcesWithToken
    case 1010026: self = .seizeResource
    case 1010027: self = .setWhetherPopUp
    case 1010028: self = .createMeetingMinute
    case 1010029: self = .meetingMinuteUpdateCheck
    case 1010030: self = .getVchatByEvnet
    case 1010031: self = .getVchatStatus
    case 1010032: self = .getEventInfoByVchatID
    case 1010033: self = .upgradeToChat
    case 1010034: self = .displayTransferChatScrollCheck
    case 1010035: self = .optimizedSyncCalendarEvents
    case 1010036: self = .searchCalendarEvent
    case 1010037: self = .getAuthorizedCalendarEventWithKey
    case 1010038: self = .getUser2CalendarBotChatID
    case 1010039: self = .mgetIsJoinedEventStatus
    case 1010040: self = .joinMeetingChat
    case 1010041: self = .getEventShareLink
    case 1010042: self = .pullEventGroupAttendeeMembers
    case 1010043: self = .pullEventGroupsSimpleMembers
    case 1010044: self = .switchEventCalendar
    case 1010045: self = .getRoomViewInstances
    case 1010046: self = .getIndividualAttendeesByPage
    case 1010047: self = .pullCalendarInstances
    case 1010048: self = .listCalendarEvents
    case 1010049: self = .saveCalendarEvents
    case 1010050: self = .getEventGroupAttendeeWithKeyForCopy
    case 1010051: self = .getEventIndividualAttendeeWithKeyForCopy
    case 1011731: self = .sendImageToOcr
    case 1011741: self = .pullPermission
    case 1011742: self = .pushPermissionEvent
    case 1011761: self = .updateUserRecentlyUsedEmoji
    case 1011771: self = .pullSplashAd
    case 1011791: self = .getAdminPermissionInfo
    case 1011801: self = .getMailWebTabVisible
    case 1020001: self = .pushCalendarEventInvitation
    case 1020002: self = .replyCalendarEventInvitation
    case 1020003: self = .pushCalendarEventSyncNotification
    case 1020004: self = .pushCalendarEventCancelNotification
    case 1020005: self = .pushReplyCalendarEventInvitation
    case 1020006: self = .pushCalendarEventUpdateNotification
    case 1020007: self = .pushCalendarEventRescheduleNotification
    case 1020008: self = .pushCalendarSyncNotification
    case 1020009: self = .pushBindGoogleSuccessNotification
    case 1020010: self = .pushRevokeGoogleSuccessNotification
    case 1020011: self = .pushCalendarSettingChangeNotification
    case 1020012: self = .pushCalendarSettingPbChangeNotification
    case 1020013: self = .pushMeetingInfoNotification
    case 1020014: self = .pushCalendarEventWithData
    case 1020015: self = .pushSharedCalendarEventChangeNotification
    case 1020016: self = .pushReminderClosedNotification
    case 1020017: self = .pushShowSubscribedCalendarNotification
    case 1020018: self = .pushClearCalendarEventNotification
    case 1020019: self = .pushScrollClosedNotification
    case 1020020: self = .pushExternalAccountSettingSyncNotification
    case 1020021: self = .pushGoogleBindSettingCallback
    case 1020022: self = .pushCalendarEventVchatChange
    case 1020023: self = .pushExternalCalendarChangeNotification
    case 1021001: self = .setInstanceImportanceScoreFeedback
    case 1021002: self = .getInstanceImportanceScore
    case 1030000: self = .pushUploadEntityTask
    case 1030001: self = .putEntity
    case 1030002: self = .pushMeetingMinuteEditors
    case 1040001: self = .mgetMailCalendarInfo
    case 1050003: self = .getTodoHistoryCommits
    case 1050004: self = .postSyncTodoCommits
    case 1050005: self = .pullSyncTodoItems
    case 1050006: self = .getTodoItems
    case 1050007: self = .mgetTodoByGuid
    case 1050008: self = .getRecommendedContents
    case 1050009: self = .getTodoReferResources
    case 1050010: self = .mergeMessagesAsTodoResource
    case 1050011: self = .mergeTopicAsTodoResource
    case 1050012: self = .followTodo
    case 1050013: self = .getTodoSetting
    case 1050014: self = .saveTodoSetting
    case 1050015: self = .getChatTodoStatus
    case 1050016: self = .getChatTodos
    case 1050017: self = .getChatCompletedTodos
    case 1050018: self = .listDocTodos
    case 1050019: self = .getTodoMsgCardPermission
    case 1050020: self = .updateTodoMsgCards
    case 1050100: self = .updateTodo
    case 1050101: self = .deleteTodos
    case 1050102: self = .exitCollaborationTodo
    case 1050103: self = .updateTodoCompleteStatus
    case 1050201: self = .createTodoComment
    case 1050202: self = .updateTodoComment
    case 1050203: self = .deleteTodoComment
    case 1050204: self = .mgetTodoComments
    case 1050205: self = .mgetTodoCommentsWithPositions
    case 1050206: self = .listTodoComments
    case 1050207: self = .createTodoCommentReaction
    case 1050208: self = .deleteTodoCommentReaction
    case 1050300: self = .sendTodoHeartbeat
    case 1051001: self = .pushTodoSyncNotification
    case 1051002: self = .pushTodoReminderNotification
    case 1051003: self = .pushTodoClearNotification
    case 1051004: self = .pushTodoSettingNotification
    case 1051005: self = .pushTodoCommentNotification
    case 1051006: self = .pushTodoCommentReactionNotification
    case 1055001: self = .momentsCreatePost
    case 1055002: self = .momentsDeletePost
    case 1055003: self = .momentsCreateComment
    case 1055004: self = .momentsDeleteComment
    case 1055005: self = .momentsCreateReaction
    case 1055006: self = .momentsDeleteReaction
    case 1055007: self = .momentsSharePost
    case 1055008: self = .momentsFollowUser
    case 1055009: self = .momentsUnfollowUser
    case 1055010: self = .momentsListBroadcasts
    case 1055011: self = .momentsListUserFollowers
    case 1055012: self = .momentsListUserFollowings
    case 1055013: self = .momentsListNotifications
    case 1055014: self = .momentsAdminOperation
    case 1055016: self = .momentsReport
    case 1055017: self = .momentsGetUserConfigAndSettings
    case 1055019: self = .momentsGetPostDetail
    case 1055020: self = .momentsMgetCircles
    case 1055021: self = .momentsMgetMomentUsers
    case 1055022: self = .momentsMgetIsUserFollowing
    case 1055023: self = .momentsPutReadNotifications
    case 1055024: self = .momentsMgetPosts
    case 1055025: self = .momentsMgetComments
    case 1055026: self = .momentsMgetCategories
    case 1055027: self = .momentsListCategories
    case 1055028: self = .momentsListTabs
    case 1055029: self = .momentsConfigTabs
    case 1055030: self = .momentsGetCategoryDetail
    case 1055031: self = .momentsListHashtagsByUserInput
    case 1055032: self = .momentsGetHashtagDetail
    case 1055033: self = .momentsCreateSubscriptionDraft
    case 1055034: self = .momentsGetSubscriptionBackstageURL
    case 1055101: self = .momentsGetBadge
    case 1055102: self = .momentsGetRecommendFeed
    case 1055103: self = .momentsGetFollowingFeed
    case 1055105: self = .momentsGetUserProfile
    case 1055106: self = .momentsListUserPosts
    case 1055107: self = .momentsListComments
    case 1055108: self = .momentsListReactions
    case 1055109: self = .momentsPullReactionsSet
    case 1055110: self = .momentsGetUserSetting
    case 1055111: self = .momentsPatchUserSetting
    case 1055112: self = .momentsCountOperation
    case 1055113: self = .momentsGetRecommendAtList
    case 1055114: self = .momentsListCategoryPosts
    case 1055115: self = .momentsPushUserSetting
    case 1055116: self = .momentsPullTabNotification
    case 1055117: self = .momentsPutTabNotification
    case 1055118: self = .momentsPushTabNotification
    case 1055119: self = .momentsListHashtagPosts
    case 1055151: self = .momentsGetAnonymousInfo
    case 1055152: self = .momentsPullNicknames
    case 1055153: self = .momentsPullNicknameAvatar
    case 1055154: self = .momentsCreateNicknameUser
    case 1055155: self = .momentsCheckSecretChatStatus
    case 1055156: self = .momentsAskForSecretChat
    case 1055157: self = .momentsAcceptSecretChat
    case 1055201: self = .momentsPush
    case 1060001: self = .pullNavigation
    case 1060002: self = .putNavigationConfirm
    case 1060003: self = .pushNavigation
    case 1060004: self = .patchNavigation
    case 1060005: self = .pullNavigationV2
    case 1060006: self = .pullContactEntries
    case 1060007: self = .pullNavigationOrder
    case 1060008: self = .pullNavigationAppInfo
    case 1060009: self = .pushNavigationOrder
    case 1060010: self = .patchNavigationOrder
    case 1070001: self = .createCommentThread
    case 1070002: self = .getCommentThreads
    case 1070003: self = .setCommentThreadVisibility
    case 1070004: self = .deleteCommentThread
    case 1070005: self = .addComment
    case 1070006: self = .editComment
    case 1070007: self = .deleteComment
    case 1070008: self = .grantEntityPermission
    case 1070009: self = .getThreadPermission
    case 1070010: self = .revokePermission
    case 1070011: self = .addReactionToComment
    case 1070012: self = .deleteCommentReaction
    case 1070013: self = .setThreadSharedStrategy
    case 1070014: self = .uploadImage
    case 1070015: self = .getLoginUserID
    case 1070016: self = .getIsURLSupported
    case 1070017: self = .searchCommentThread
    case 1070018: self = .analyzeWebPage
    case 1070019: self = .shareEmailToChat
    case 1070020: self = .getMessage
    case 1070021: self = .checkAuthPermission
    case 1070022: self = .revokeAuthPermission
    case 1070023: self = .getAuthEntities
    case 1070024: self = .getImage
    case 1071001: self = .aiTranslateImg
    case 1071002: self = .getSmartCompose
    case 1071003: self = .getComposerSetting
    case 1071004: self = .setComposerSetting
    case 1071005: self = .pushComposerSetting
    case 1071006: self = .getSmartReply
    case 1071007: self = .getSmartMemory
    case 1071008: self = .getEnterpriseTopic
    case 1071009: self = .slashCommand
    case 1071010: self = .postEnterpriseTopic
    case 1071011: self = .enterpriseTopicSeedUserEnroll
    case 1071012: self = .enterpriseTopicRecord
    case 1071013: self = .getChatCreateChattersRecommend
    case 1071014: self = .getSmartWidget
    case 1071015: self = .enterpriseTopicUserCardAction
    case 1071016: self = .getPersonalizationSetting
    case 1071017: self = .setPersonalizationSetting
    case 1071018: self = .pushPersonalizationSetting
    case 1071019: self = .getSmartReplySetting
    case 1071020: self = .setSmartReplySetting
    case 1071021: self = .pushSmartReplySetting
    case 1071022: self = .pullSlashCommands
    case 1071023: self = .postAsFeedback
    case 1071024: self = .getSearchRecommend
    case 1071025: self = .pullSearchPlaceholder
    case 1071026: self = .pushSearchPlaceholder
    case 1071027: self = .getGecSetting
    case 1071028: self = .setGecSetting
    case 1071029: self = .pushGecSetting
    case 1071030: self = .getAiVocab
    case 1071031: self = .createAiVocab
    case 1071032: self = .deleteAiVocab
    case 1071033: self = .getAsSetting
    case 1071034: self = .setAsSetting
    case 1071035: self = .pushAsSetting
    case 1071036: self = .smartMosaic
    case 1071037: self = .getAiTextCorrection
    case 1071038: self = .getFeedbackReasonItems
    case 1071039: self = .getUniversalRecommend
    case 1071040: self = .postMagicShareInfo
    case 1072001: self = .getActivityBanner
    case 1072002: self = .getOnboardingSourceConfig
    case 1080001: self = .getTimezoneByCity
    case 1100001: self = .pullBanner
    case 1100002: self = .setBannerStatus
    case 1100003: self = .pushBanner
    case 1100301: self = .mgetContactPointsUserInfo
    case 1100302: self = .batchUploadContactPoints
    case 1100303: self = .getChangedContactPointsUserInfo
    case 1100304: self = .mgetBlockUserInfo
    case 1100305: self = .mgetBlockUserNum
    case 1100308: self = .setupBlockUser
    case 1100310: self = .pullContactsV2
    case 1100311: self = .mgetFriendship
    case 1100315: self = .getUserBlockStatus
    case 1100316: self = .blockStatusChangeEvent
    case 1100317: self = .setupMsgAuth
    case 1100318: self = .getMsgAuth
    case 1100319: self = .pullUserRelation
    case 1100320: self = .ignoreContactApply
    case 1100321: self = .mputContactApplication
    case 1100322: self = .pullAuthChatterInfo
    case 1100323: self = .getUserIDAndRelation
    case 1100801: self = .getContactOauthURL
    case 1100802: self = .getOauthContacts
    case 1100803: self = .getPendingReviewCount
    case 1101400: self = .putTranslationFeedbackV2
    case 1101501: self = .creationDocsNoticeNew
    case 1101502: self = .creationDocsNoticeChange
    case 1101601: self = .mgetTagMentionEntities
    case 1101701: self = .sendInvitationToInactive
    case 1101702: self = .oneKeyInviteInactive
    case 1101703: self = .getInactiveParents
    case 1101704: self = .getDepartmentInactiveInfo
    case 1101705: self = .getDepartmentInvitationURL
    case 1101721: self = .pushLanTransSenderAddrsSet
    case 1102001: self = .pullUgScenario
    case 1102002: self = .pullUgSdkSettings
    case 1102003: self = .reportUgEvent
    case 1102004: self = .pushUgScenarioInfo
    case 1102201: self = .pushBlockEvent
    case 1102202: self = .pushKv
    case 1102203: self = .pushBlockEntityUpdate
    case 1102204: self = .pushBlockExtensionUpdate
    case 1102400: self = .pullNamecardProfile
    case 1102401: self = .putSingleNamecard
    case 1102402: self = .pullNamecardList
    case 1102403: self = .updateSingleNamecard
    case 1102404: self = .deleteSingleNamecard
    case 1102405: self = .pullNamecardsByIds
    case 1102406: self = .checkContactPointDuplicate
    case 1102407: self = .createOrUpdateSingleNamecard
    case 1102501: self = .pushTeleMeessage
    case 1102502: self = .pushSyncMeessage
    case 1102503: self = .sendSyncMeessage
    case 1102601: self = .pullWatermarkConfig
    case 1102602: self = .getHiddenWatermarkImage
    case 1102603: self = .pushWatermarkConfig
    case 1102701: self = .createTeam
    case 1102702: self = .createTeamChat
    case 1102703: self = .bindTeamChatPreCheck
    case 1102704: self = .bindTeamChat
    case 1102705: self = .unbindTeamChat
    case 1102706: self = .patchTeam
    case 1102707: self = .patchTeamSetting
    case 1102708: self = .putTeamMembers
    case 1102709: self = .deleteTeamMembers
    case 1102710: self = .pullTeamsByIds
    case 1102711: self = .pushTeam
    case 1102712: self = .pushTeamSetting
    case 1102713: self = .pushTeamBaseInfo
    case 1102714: self = .checkNameAvailability
    case 1102715: self = .patchTeamMembersRole
    case 1102716: self = .pullTeamMembers
    case 1102717: self = .pushTeamMembers
    case 1102718: self = .putTeamChatChatters
    case 1102719: self = .patchTeamChatByID
    case 1102720: self = .putChatterViaTeamOpenChat
    case 1102801: self = .pullItems
    case 1102802: self = .pullItemsByIds
    case 1102803: self = .reorderItems
    case 1102804: self = .pushItems
    case 1102805: self = .pullTeamItemIds
    case 1102806: self = .patchItem
    case 1102807: self = .pullItemsByEntityIds
    case 1102900: self = .pullAvatarMeta
    case 1102901: self = .pushSubscriptionsFeed
    case 1102902: self = .pullSubscriptionsFeedsByIds
    case 1103001: self = .sendEmToUser
    case 1103002: self = .cancelEm
    case 1103003: self = .sendEmInfo
    case 1103004: self = .receiveEm
    case 1103005: self = .pullEmRecords
    case 1103006: self = .checkEmStatus
    case 1103007: self = .existActiveEmTask
    case 1103021: self = .pullDataRetentionRules
    case 1103101: self = .pullOfflineSearchPermission
    case 1103102: self = .pushOfflineSearchPermission
    case 1103201: self = .getMeegoShowEnable
    case 1103202: self = .getFeishuMeegoShowEnable
    case 1103301: self = .openBannerPull
    case 1103302: self = .openBannerPush
    case 1103303: self = .openBannerPost
    case 1103401: self = .pushChatterCustomStatus
    case 1103402: self = .isAllowedCreateUserCustomStatus
    case 1103403: self = .createUserCustomStatus
    case 1103404: self = .updateUserCustomStatus
    case 1103405: self = .pullUserCustomStatuses
    case 1103406: self = .deleteUserCustomStatuses
    case 1103408: self = .pullUserTypingTranslateSettings
    case 1103409: self = .pushUserTypingTranslateSettings
    case 1103410: self = .uploadSystemTimezone
    case 1103601: self = .pushUserMedal
    case 1103602: self = .getMedalList
    case 1103603: self = .getMedalDetail
    case 1103604: self = .setMedal
    case 1103605: self = .getUserTakingMedal
    case 1103701: self = .patchChatTopNotice
    case 1103702: self = .pullChatTopNoticeByIds
    case 1103703: self = .closeChatTopNotice
    case 1103704: self = .pushChatTopNotice
    case 1103705: self = .pushChatTopNoticePersonalState
    case 1103801: self = .getRetentionQuestionnaire
    case 1103802: self = .submitRetentionQuestionnaire
    case 1103803: self = .getRetentionOperationLink
    case 1103804: self = .getWidgetAppList
    case 1103805: self = .getMaterialsByScene
    case 1103901: self = .patchChatterExtraStates
    case 1103911: self = .pushAttendanceRefreshConfig
    case 1103912: self = .pushAttendanceTopSpeedClockIn
    case 1103921: self = .publishVote
    case 1103922: self = .vote
    case 1103923: self = .pushVoteResult
    case 1103924: self = .mgetVoteFirstScreenResult
    case 1103925: self = .mgetVoteResult
    case 1103926: self = .retransmitVote
    case 1103927: self = .closeVote
    case 11034067: self = .putUserStatusCalendarEvents
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .ack: return 1
    case .connect: return 2
    case .disconnect: return 3
    case .ping: return 4
    case .putMessage: return 5
    case .pushMessages: return 6
    case .pullChatMessages: return 7
    case .pullMessagesByIds: return 8
    case .deleteMessage: return 9
    case .pullMessageReadState: return 12
    case .putChat: return 13
    case .pushChats: return 18
    case .pushUsers: return 21
    case .putUser: return 22
    case .pullMessageReplies: return 23
    case .pullReactions: return 24
    case .putReaction: return 25
    case .deleteReaction: return 26
    case .pushReactions: return 27
    case .patchMessage: return 28
    case .serverDisconnet: return 30
    case .putImage: return 31
    case .syncPackets: return 32
    case .pullRecentChats: return 33
    case .pullContacts: return 37
    case .pullBots: return 38
    case .pullUpdateChatters: return 39
    case .putReadMessages: return 40
    case .pushMessageReadCount: return 41
    case .pullMessagesByPositions: return 43
    case .pullChatChatters: return 44
    case .deleteChatChatter: return 45
    case .pullChattersByIds: return 46
    case .putChatChatter: return 47
    case .pushChatChatters: return 48
    case .pushChatMutableInfo: return 49
    case .putP2PChats: return 50
    case .putTransmitMessage: return 51
    case .putTransmitOne: return 52
    case .batchCopyMessages: return 53
    case .batchPutP2PChatMessages: return 54
    case .pullMessageTransmitChain: return 55
    case .fileUpdateToOfflineMode: return 56
    case .fileUpdateLanTransStatus: return 57
    case .pullMessageIDByPosition: return 58
    case .putShareAsMessage: return 59
    case .patchChatSetting: return 60
    case .pushChatSetting: return 61
    case .pullChatSettings: return 62
    case .pullAllChatSettings: return 63
    case .pullChatsByIds: return 64
    case .pushChatterResign: return 70
    case .pullChattersResignStatus: return 71
    case .patchGroupChat: return 72
    case .pullMessageMeReadState: return 73
    case .pushGroupMessageReadState: return 74
    case .pullWantedAtChatter: return 75
    case .processMultiPackets: return 77
    case .deleteGroupMessage: return 78
    case .pullMessageReadUsers: return 79
    case .pullDepartmentStructure: return 80
    case .pullFullDepartmentStructure: return 81
    case .pullGroupChats: return 82
    case .pullSubordinateDepartments: return 83
    case .pullUnfoldDepartmentStructure: return 84
    case .pullManagedDepartment: return 85
    case .putDepartmentChat: return 86
    case .pullMessageUnreadUsers: return 87
    case .pullThread: return 90
    case .patchThreadSetting: return 91
    case .pushThreadReplyCount: return 92
    case .pullThreadReplies: return 93
    case .pullThreadReactions: return 94
    case .pushChatters: return 95
    case .pullUnreadAtMessageIds: return 96
    case .noTraceRemoveMessageByID: return 97
    case .pushMessageNoTraceRemove: return 98
    case .pullUnreadSpecialFocusMessageIds: return 99
    case .putStickers: return 100
    case .deleteStickers: return 101
    case .patchStickers: return 102
    case .pullStickers: return 103
    case .pushStickers: return 104
    case .patchChatterProfile: return 105
    case .patchChatter: return 106
    case .translateMessages: return 107
    case .putTranslateFeedbacks: return 108
    case .pullTranslateInfos: return 109
    case .pushTranslateStatesNotice: return 110
    case .pullTranslateLanguages: return 111
    case .patchTranslateLanguage: return 112
    case .pushTranslateLanguagesNotice: return 113
    case .patchLanguagesConfiguration: return 114
    case .pushLanguagesConfigurationNotice: return 115
    case .disableAutoTranslateLanguage: return 116
    case .pushDisableAutoTranslateLanguageNotice: return 117
    case .pushMessageFirstTranslatedToSenderNotice: return 118
    case .pullAutoTranslateGuidance: return 119
    case .pullMessageTranslateInfos: return 120
    case .patchAutoTranslateGlobalSwitch: return 121
    case .pushAutoTranslateGlobalSwitchNotice: return 122
    case .patchAutoTranslateChatSwitch: return 123
    case .pushAutoTranslateChatSwitchNotice: return 124
    case .pullAutoTranslateChatSwitch: return 125
    case .translateMessagesV2: return 126
    case .pushTranslateStatesNoticeV2: return 127
    case .pullReactionsResource: return 128
    case .pullUserReactions: return 129
    case .pushUserReactions: return 130
    case .pullUsedReactions: return 131
    case .pushUsedReactions: return 132
    case .pushMessageStaticResourceDeleted: return 133
    case .pushBatchCopyMessages: return 134
    case .checkEntityVersion: return 135
    case .pullEmojiResources: return 136
    case .pushReactionStatus: return 137
    case .pullRecommendStatusIconResources: return 138
    case .updateUserReactionSkin: return 139
    case .pushUserReactionSkin: return 140
    case .pullEmojiPanel: return 141
    case .pullEmojiResourcesV2: return 142
    case .pullEmojiResourcesByEmojiKeys: return 143
    case .patchAutoTranslateScope: return 150
    case .pushAutoTranslateScopeNotice: return 151
    case .pullAutoTranslateFirstGuideInfo: return 152
    case .pushAutoTranslateFirstGuideInfoNotice: return 153
    case .patchAutoTranslateFirstGuideInfo: return 154
    case .pullMessageLanguage: return 155
    case .translateWebXml: return 156
    case .translateImageKeys: return 157
    case .pushImageTranslationInfo: return 158
    case .detectTextLanguage: return 159
    case .patchWebTranslationConfig: return 160
    case .pushWebTranslationConfig: return 161
    case .patchLanguageAutoTranslateScope: return 162
    case .pushLanguageAutoTranslateScope: return 163
    case .detectImageLanguage: return 164
    case .patchLanguagesConfigurationV2: return 165
    case .pushLanguagesConfigurationNoticeV2: return 166
    case .patchWebNotTranslateLanguages: return 167
    case .pushWebNotTranslateLanguagesNotice: return 168
    case .pullWebNotTranslateLanguages: return 169
    case .deleteWebNotTranslateLanguages: return 170
    case .streamingTranslateMessage: return 172
    case .pong: return 200
    case .pullAppConfig: return 201
    case .pushAppConfig: return 202
    case .pushSettingsNotification: return 203
    case .pullAppConfigV2: return 210
    case .pullStaticAppConfigV2: return 211
    case .pullSecurityConfig: return 251
    case .pushSecurityConfig: return 252
    case .pullChatPostUser: return 253
    case .patchChatPostUser: return 254
    case .pullAllowPostChat: return 255
    case .checkPublicChatNameExist: return 256
    case .putAddChatChatterApply: return 257
    case .pullAddChatChatterApply: return 258
    case .patchAddChatChatterApply: return 259
    case .disableChatShared: return 270
    case .checkChattersInChat: return 271
    case .putChatAnnReadTime: return 280
    case .pullChatsAnnReadTime: return 281
    case .pushChatAnnReadTime: return 282
    case .pushMultiThreadReplyCount: return 290
    case .pushMultiChatMutableInfo: return 291
    case .pushMultiGroupMessageReadState: return 293
    case .pullTenantsByIds: return 300
    case .pushChatChatterTag: return 401
    case .pullChatChatterKickInfo: return 402
    case .checkWithdrawPickEntitiesInChat: return 403
    case .pullChatMemberSetting: return 404
    case .pullChangeGroupMemberAuthorization: return 405
    case .putFavorite: return 500
    case .pullFavorites: return 501
    case .removeFavorite: return 502
    case .pullAllFavorite: return 503
    case .putMergeMessageFavorite: return 504
    case .pullNewVersion: return 600
    case .pullVersionNote: return 601
    case .patchDownloadStatus: return 602
    case .putHomeSchoolChat: return 700
    case .getHomeSchoolChatClass: return 701
    case .pullManagedNodes: return 702
    case .pullSchoolNode: return 703
    case .eduJoinChatPreCheck: return 704
    case .eduJoinChat: return 705
    case .pullCollaborationStructure: return 801
    case .pullCollaborationTenant: return 802
    case .authUserCollaborationVisible: return 803
    case .pullCollaborationInviteQrcode: return 804
    case .pullFeedCards: return 1000
    case .patchFeedCards: return 1001
    case .pushFeedCards: return 1002
    case .pullFeedCardsFeedTypes: return 1003
    case .peakFeedCard: return 1004
    case .putFeedCardDelayed: return 1005
    case .putFeedCardsIntoBox: return 1006
    case .deleteFeedCardsFromBox: return 1007
    case .pullFeedCardsDelayed: return 1008
    case .pullFeedCardsByIds: return 1009
    case .pullNewBoxFeedCards: return 1010
    case .cleanNewBoxFeedCards: return 1011
    case .pushCleanNewBoxFeedCards: return 1012
    case .putUserColdBoot: return 1014
    case .pullMutePopupInfo: return 1015
    case .putShowMutePopup: return 1016
    case .putBatchMuteFeedCards: return 1017
    case .createFeedGroup: return 1018
    case .pullKeywordsFeedCards: return 1019
    case .pullFeedGroups: return 1020
    case .pullItemChangedGroups: return 1021
    case .pullFeedGroupItems: return 1022
    case .updateFeedGroups: return 1023
    case .pushFeedGroups: return 1024
    case .confirmDeleteFeedCards: return 1025
    case .pushDeletedFeedCards: return 1026
    case .updateFlags: return 1027
    case .pullFlags: return 1028
    case .pushFlags: return 1029
    case .putShortcuts: return 1100
    case .deleteShortcuts: return 1101
    case .patchShortcuts: return 1102
    case .pullShortcuts: return 1103
    case .pushShortcuts: return 1104
    case .removeMessagesFromUser: return 1200
    case .putMergeForwardMessage: return 1201
    case .pullSystemMessageTemplate: return 1202
    case .pushBadgeToRelatedUsers: return 1203
    case .pullRelatedUsersBadge: return 1204
    case .putDiagnoseMessage: return 1205
    case .diagnoseMessageConfig: return 1206
    case .sendDiagnosticEvent: return 1207
    case .deleteMessageURLPreview: return 1301
    case .hideAudioRecognitionResult: return 1302
    case .pushAudioRecognitionResult: return 1303
    case .putURLPreview: return 1304
    case .putSpeechRecognition: return 1305
    case .putAudioMessageRecognition: return 1306
    case .pushAudioMessageRecognitionResult: return 1307
    case .pullMessagePreviews: return 1310
    case .pushMessagePreviews: return 1311
    case .pullURLPreviewChatters: return 1312
    case .grantMinutes: return 1313
    case .pullURLPreviewChattersList: return 1314
    case .generateURLPreviewEntity: return 1315
    case .getURLPreview: return 1316
    case .urlPreviewActionCallback: return 1317
    case .pushURLPreview: return 1318
    case .pushURLPreviewEntries: return 1319
    case .pullURLPreviewTemplates: return 1320
    case .pullVideoInfo: return 1350
    case .putTopicGroup: return 1600
    case .registerTopicGroupFavorite: return 1601
    case .cancelTopicGroupFavorite: return 1602
    case .pushTopicGroupFeedCards: return 1603
    case .putTopicGroupMember: return 1604
    case .pullApplist: return 2000
    case .putRecentapp: return 2001
    case .pullTenantAppcenter: return 2002
    case .searchAppcenter: return 2003
    case .cardJsonToPb: return 2070
    case .sendPreviewCard: return 2071
    case .gadgetDevToolPush: return 2072
    case .pushEphemeralMessage: return 2080
    case .pullEphemeralMessage: return 2081
    case .pushEphemeralMessageUpdate: return 2082
    case .pushEphemeralMessageDelete: return 2083
    case .appShareV2: return 2098
    case .appShare: return 2099
    case .putE2EeVoiceCall: return 2100
    case .patchE2EeVoiceCall: return 2101
    case .pushE2EeVoiceCallNotice: return 2102
    case .pullE2EeVoiceCalls: return 2103
    case .putE2EeVoiceDeviceToken: return 2104
    case .putE2EeVoiceFeedbacks: return 2105
    case .pullE2EeVoiceCallByCallIds: return 2106
    case .putVideoConf: return 2200
    case .patchVideoConf: return 2201
    case .pushVideoConfNotice: return 2202
    case .pullVideoConfs: return 2203
    case .registerClientInfo: return 2204
    case .createVideoChat: return 2205
    case .joinVideoChat: return 2206
    case .updateVideoChat: return 2207
    case .inviteVideoChat: return 2208
    case .shareVideoChat: return 2209
    case .notifyVideoChat: return 2210
    case .searchVcChatters: return 2211
    case .getChattersVcStatus: return 2212
    case .pullVideoChatConfig: return 2213
    case .pushVideoChatConfig: return 2214
    case .pushVideoChatNotice: return 2215
    case .replyVideoChatNotice: return 2216
    case .joinCalendarGroupMeeting: return 2217
    case .putFeedbacks: return 2218
    case .pullVideochatByShareCode: return 2219
    case .putByteviewHeartbeat: return 2300
    case .notifyVideoChatExtra: return 2306
    case .notifyStandaloneVcApplication: return 2307
    case .hostManage: return 2308
    case .hostChangeSettings: return 2309
    case .participantChangeSettings: return 2310
    case .shareScreen: return 2311
    case .pullVideoChatInMeetingInfo: return 2312
    case .previewJoinVideoChat: return 2314
    case .forceLeaveVideoChat: return 2315
    case .querySelfStatus: return 2316
    case .putVideoChatFeedbacks: return 2317
    case .pullE2EeVoiceCallConfig: return 2318
    case .rejoinVideoChat: return 2321
    case .joinByMeetingNumber: return 2323
    case .shareScreenToRoom: return 2324
    case .pullPreVideoChatSetting: return 2325
    case .inviteCalendarMeeting: return 2327
    case .getCalendarInfo: return 2328
    case .getCalendarGroup: return 2329
    case .shareFollow: return 2330
    case .syncFollowAction: return 2331
    case .queryMeetingJoinable: return 2332
    case .joinMeeting: return 2333
    case .pushAssociatedVcStatus: return 2334
    case .getAssociatedVc: return 2335
    case .pullDialTestSuite: return 2336
    case .reportDialTestStatus: return 2337
    case .notifyDialTestAction: return 2338
    case .pullSubtitles: return 2339
    case .getShareCodeInfo: return 2340
    case .getAssociatedVcStatus: return 2341
    case .joinInterviewGroupMeeting: return 2342
    case .recordMeeting: return 2343
    case .getChattersWithCiOrder: return 2344
    case .searchViewParticipants: return 2345
    case .requestFollowToken: return 2346
    case .grantFollowToken: return 2347
    case .requestFollowPerm: return 2348
    case .vcQueryDocs: return 2349
    case .pushVideoChatNoticeUpdate: return 2350
    case .joinMeetingPreCheck: return 2351
    case .sendVideoChatInteractionMessage: return 2352
    case .pullVideoChatInteractionMessage: return 2353
    case .pushVideoChatInteractionMessages: return 2354
    case .publishMediaStream: return 2360
    case .sendUpgradePlanNotice: return 2370
    case .pushVideoChatPrompt: return 2371
    case .replyVideoChatPrompt: return 2372
    case .adjuestMeetingDuration: return 2373
    case .pullViewUserSetting: return 2374
    case .patchViewUserSetting: return 2375
    case .pushViewUserSetting: return 2376
    case .submitGenericFeedback: return 2377
    case .getReservation: return 2378
    case .liveMeetingAction: return 2380
    case .liveMeetingExtraInfo: return 2381
    case .liveMeetingJoinPreCheck: return 2382
    case .liveMeetingAccountBindingInfo: return 2383
    case .liveMeetingStreamSetting: return 2384
    case .liveMeetingFetchLivePolicy: return 2385
    case .liveMeetingGetVerificationQrCode: return 2386
    case .liveMeetingPollVerificationStatus: return 2387
    case .liveMeetingGetVerificationInfo: return 2388
    case .liveMeetingVerifyTwoElement: return 2389
    case .liveMeetingLivenessVerificationCallback: return 2390
    case .liveMeetingGetLivePermission: return 2391
    case .liveMeetingGetVerificationTicket: return 2392
    case .liveMeetingPullSetting: return 2393
    case .pullAccountBadges: return 2500
    case .pushAccountBadges: return 2501
    case .clearAccountBadge: return 2502
    case .putEmail: return 3000
    case .pullEmailMembers: return 3001
    case .patchEmailMembers: return 3002
    case .pushEmailMembers: return 3003
    case .pullEmailsByIds: return 3004
    case .patchEmail: return 3005
    case .pushEmail: return 3006
    case .pullEmailChatters: return 3007
    case .pullEmailRole: return 3008
    case .pullEmailWantedAtChatters: return 3009
    case .mailGetSendExternalLimit: return 3010
    case .mailGetEmlByInstanceCode: return 3011
    case .pullStickerSetsStore: return 3100
    case .pullStickerSets: return 3101
    case .pullStickerSetsByID: return 3102
    case .putStickerSets: return 3103
    case .patchStickerSets: return 3104
    case .deleteStickerSets: return 3105
    case .pushStickerSets: return 3106
    case .pullStickerSetCard: return 3107
    case .pullStickerSetsTab: return 3108
    case .createMail: return 3500
    case .updateMailDraft: return 3501
    case .getMailInbox: return 3502
    case .getThreadsByID: return 3503
    case .pushThreadForNewMail: return 3504
    case .updateMailStatus: return 3505
    case .cloneDriveFile: return 3506
    case .mailAddChange: return 3507
    case .getFilteredThreads: return 3508
    case .getThreadsByIDWithMeta: return 3509
    case .createOutgoingMail: return 3510
    case .mailApplyRule: return 3511
    case .mailGetMessagesByThreadIdsForSearch: return 3512
    case .mailNewMessagesRequest: return 3513
    case .markAllAsReadRequest: return 3514
    case .mailGetRawMessages: return 3515
    case .mailInitSync: return 3600
    case .getMailThreadMeta: return 3601
    case .getMailMessages: return 3602
    case .mailPushChange: return 3603
    case .getMailThreadMetaV2: return 3604
    case .getLabelListByUser: return 3605
    case .getMailMessageMeta: return 3606
    case .getMailMessageMetaWithFolderDisable: return 3607
    case .getMailMessageGroups: return 3608
    case .mailAtContact: return 3650
    case .mailSimpleSearchRequest: return 3651
    case .mailSimpleSearchResponse: return 3652
    case .mailGetSearchHistoryRequest: return 3653
    case .mailStoreSearchHistoryKeyword: return 3654
    case .mailDeleteSearchHistory: return 3655
    case .mailRulePreviewSearchRequest: return 3656
    case .mailContactSearch: return 3657
    case .mailAdvancedSearch: return 3658
    case .mailChangeAsyncResult: return 3659
    case .getUnreadMailThreadMeta: return 3660
    case .getMailThreadTimestamp: return 3661
    case .mailGetThreadMetaByThreadIds: return 3662
    case .mailGetThreadFullByThreadIds: return 3663
    case .mailGetMailMessageFullByMessageIds: return 3664
    case .mailGetMailMessageBodyByMessageIds: return 3665
    case .mailGetMailMessageSummaryByMessageIds: return 3666
    case .mailGetSyncStatus: return 3667
    case .mailGetMessageMetaByMessageIds: return 3668
    case .mailDeleteMailExternalContact: return 3669
    case .getMailSettings: return 3700
    case .updateMailSettings: return 3701
    case .pushMailSettings: return 3702
    case .mailChangeOauthStatus: return 3703
    case .pushMailOauthStatus: return 3704
    case .mailUpdateClientTabSetting: return 3705
    case .mailGetGoogleAuthURL: return 3706
    case .mailGetCanShareToExternal: return 3707
    case .mailUnbindGmailAccount: return 3708
    case .mailGetTenantDomains: return 3709
    case .pushMailUnreadCount: return 3710
    case .pullMailCard: return 3711
    case .getMailCard: return 3712
    case .sendMailCard: return 3713
    case .addMailChangeLog: return 3714
    case .deleteLargeFile: return 3715
    case .mailGetLabelThreadsCount: return 3716
    case .mailGetLongRunningTask: return 3717
    case .mailCancelLongRunningTask: return 3718
    case .mailPushClientForThirdServicePermissionConfig: return 3719
    case .mailGetConfig: return 3720
    case .mailGetUserEngagementSettings: return 3721
    case .mailUpdateUserEngagementSettings: return 3722
    case .mailSyncAlias: return 3723
    case .mailCreateRuleRequest: return 3750
    case .mailUpdateRuleRequest: return 3751
    case .mailDeleteRuleRequest: return 3752
    case .mailGetRulesRequest: return 3753
    case .mailRuleControlRequest: return 3754
    case .mailAdjustRuleOrderRequest: return 3755
    case .mailSendAutoTransferAuthMail: return 3756
    case .mailGetAutoTransferEmail: return 3757
    case .pushMailRelatedBizID: return 3778
    case .mailShareMailAttachmentRequest: return 3779
    case .mailShareCreatePermRequest: return 3780
    case .mailShareUpdatePermRequest: return 3781
    case .mailShareDeletePermRequest: return 3782
    case .mailShareGetThreadCollaboratorsInfoRequest: return 3783
    case .mailShareGetMessageFullRequest: return 3784
    case .mailShareGetShareGroupsRequest: return 3785
    case .mailShareCreateDocRequest: return 3786
    case .mailShareGetShareGroupInfoRequest: return 3787
    case .mailShareCreateShareDraftRequest: return 3788
    case .mailShareUpdateDraftRequest: return 3789
    case .mailShareGetMailSettings: return 3790
    case .mailGetMessageSummaryRequest: return 3791
    case .mailGetMessageBodyRequest: return 3792
    case .mailShareSearchMemberRequest: return 3793
    case .mailShareUpdateCollaboratorsRoleRequest: return 3794
    case .mailShareCreateGroupRequest: return 3795
    case .mailGetMigrationStatus: return 3796
    case .mailGetGroupSetting: return 3801
    case .mailSetGroupSetting: return 3802
    case .mailPushGroupSetting: return 3803
    case .mailDeleteGroupSetting: return 3804
    case .mailGetConfigRequest: return 3805
    case .mailGetManagedGroups: return 3806
    case .mailGetGroupDetail: return 3807
    case .mailUpdateGroup: return 3808
    case .mailListGroupMembers: return 3809
    case .mailListSharedEmailAccounts: return 3810
    case .mailRecallStatus: return 3811
    case .mailRecallDetail: return 3812
    case .pushMailImapMigrationStatus: return 3820
    case .mailImapMigrationGetStatus: return 3821
    default: break
    }
    switch self {
    case .mailImapMigrationUpdateToken: return 3822
    case .mailImapMigrationUpdateUids: return 3823
    case .mailImapMigrationGetOldMessageTask: return 3824
    case .mailImapMigrationUploadOldMessage: return 3825
    case .mailImapMigrationUploadNewMessage: return 3826
    case .mailImapMigrationQueryProgress: return 3827
    case .mailImapMigrationDecodeMessage: return 3828
    case .mailImapMigrationGetMailboxInfos: return 3829
    case .mailImapMigrationBlocked: return 3830
    case .pushMailImapMigrationOldestInfo: return 3831
    case .mailImapMigrationGetHistoryDoneInfo: return 3832
    case .mailImapMigrationGetAllAccountStatus: return 3833
    case .mailImapMigrationVerifyToken: return 3834
    case .mailTranslation: return 3840
    case .mailUnsubscribe: return 3843
    case .mailGetSmartReply: return 3845
    case .mailGetIsSmartInboxTargetUser: return 3846
    case .mailGetAuthorizationCodes: return 3847
    case .mailCreateAuthorizationCode: return 3848
    case .mailDeleteAuthorizationCode: return 3849
    case .mailGetExchangeAuthURL: return 3850
    case .mailGetThirdPartyClientSetting: return 3851
    case .pushMailSettingChange: return 3852
    case .mailGetMessageSendStatus: return 3853
    case .mailPullEnterpriseEmail: return 3854
    case .mailMultiCopyFile: return 3855
    case .getSharedMailSettings: return 3856
    case .updateSharedMailSettings: return 3857
    case .pushSharedMailSettingChange: return 3858
    case .mailGetClearInfoChangeList: return 3859
    case .mailCheckGroupMemberExistence: return 3860
    case .mailCheckGroupMemberInfo: return 3861
    case .mailCheckUserGroupPermission: return 3862
    case .mailCreateMailUserSignature: return 3870
    case .mailUpdateMailUserSignature: return 3871
    case .mailApplyMailSignature: return 3872
    case .mailDeleteMailUserSignature: return 3873
    case .mailQueryMailSignature: return 3874
    case .mailGetUserField: return 3875
    case .mailCheckImageTokensPermission: return 3876
    case .mailGetMailContactTypeByEmailAddress: return 3877
    case .putCryptoMessage: return 4000
    case .ackCryptoMessages: return 4001
    case .pullCryptoMessageDetailByIds: return 4002
    case .putSystemMessageForScreenshots: return 4003
    case .putCryptoP2PChat: return 4101
    case .putCryptoGroupChat: return 4102
    case .putCryptoChatChatter: return 4103
    case .deleteCryptoChatChatter: return 4104
    case .disbandCryptoChat: return 4105
    case .pushNewDeviceOnline: return 4106
    case .putCryptoBurnedTime: return 4107
    case .putCryptoMessageMain: return 4108
    case .putCryptoMessageMissingContent: return 4109
    case .putUserDeviceIpk: return 4111
    case .pushUserDeviceIpkChange: return 4112
    case .putSecretMessage: return 4113
    case .getUsersIpksByChat: return 4114
    case .pushChatDeviceIpkChange: return 4115
    case .pullEmergencyCallNumber: return 4200
    case .putEmergencyCallReason: return 4201
    case .pullAbbreviationsByIds: return 4301
    case .putAbbreviationFeedbacks: return 4302
    case .getAbbreviationCard: return 4303
    case .refreshMessageBaikeRefs: return 4304
    case .getFeedback: return 4305
    case .putChatterViaShare: return 5000
    case .pullChatsRole: return 5001
    case .pullChatApplications: return 5002
    case .pushChatApplication: return 5003
    case .processChatApplications: return 5004
    case .resetContactToken: return 5005
    case .putContactApplication: return 5006
    case .readApplications: return 5007
    case .pullPersonalContacts: return 5008
    case .pushContacts: return 5009
    case .pullUnreadChatApplicationsBadge: return 5010
    case .deleteContact: return 5011
    case .pullContactToken: return 5012
    case .pushContactToken: return 5013
    case .putContactSetting: return 5014
    case .pushContactSetting: return 5015
    case .pullContactSetting: return 5016
    case .pullUserProfile: return 5017
    case .putUserInvitation: return 5018
    case .searchUserByContactPoint: return 5019
    case .pullChatQrcodeToken: return 5020
    case .pullChatQrcodeInfo: return 5021
    case .putChatterViaQrcode: return 5022
    case .pullChatChatterByIds: return 5023
    case .pullChatSecurityConfig: return 5024
    case .pullChatNoTraceRemovedPositions: return 5025
    case .pullUserProfiles: return 5026
    case .pullChatNonDepartmentalChatters: return 5027
    case .pullChatSidebarButtons: return 5028
    case .pullChatJoinLeaveHistory: return 5029
    case .checkP2PChatsExistByUser: return 5030
    case .pullUserProfileV2: return 5031
    case .batchPullUserProfileV2: return 5032
    case .pullContactTokensForSharing: return 5033
    case .checkContactIsLinkedToUser: return 5034
    case .patchSelfUserProfile: return 5035
    case .patchUserMemo: return 5036
    case .pullUserProfileSectionTab: return 5037
    case .resetUserAvatar: return 5038
    case .putResetUserAvatarResult: return 5039
    case .pullExternalChattersInSameChatAuth: return 5040
    case .pullAlreadyInChat: return 5041
    case .pullWorkStatus: return 5050
    case .deleteWorkStatud: return 5051
    case .pullChatLinkToken: return 5055
    case .putChatterViaShareLink: return 5056
    case .pullChatLinkInfo: return 5057
    case .pullMyPromotionLink: return 5060
    case .pullPromotionRule: return 5061
    case .putBusinessInvitation: return 5062
    case .pullChatAvatarMeta: return 5070
    case .pullInvitationLink: return 5080
    case .putAdminInvitation: return 5081
    case .pullUserInvitationMessage: return 5082
    case .putBannerBeginTime: return 5083
    case .pushUserSidebarUpdateEvent: return 5090
    case .pullUserSidebar: return 5091
    case .checkUserPhoneNumber: return 5092
    case .pullUserProfileAssignedFields: return 5093
    case .authDownloadToken: return 5094
    case .putPin: return 5100
    case .pullPinsByMessageIds: return 5101
    case .pullChatPins: return 5102
    case .deletePins: return 5103
    case .pushPin: return 5104
    case .pushPinRead: return 5105
    case .pullPinReadStatus: return 5106
    case .putPinRead: return 5107
    case .pullPinByChatUpdateTime: return 5108
    case .putAllPinSetting: return 5109
    case .pushAllPinSetting: return 5110
    case .pullAllPinSetting: return 5111
    case .updateAccountUserListOrder: return 5200
    case .pushAccountUserList: return 5201
    case .pullAccountUserList: return 5202
    case .pushAccountUpdateUserEvnet: return 5203
    case .pushAccountUnregisterUserEvent: return 5204
    case .pushGlobalAccountUpdateUserEvent: return 5205
    case .pushUserListUpdateEvent: return 5206
    case .pushUserMigrateSwitchEvent: return 5207
    case .putUserName: return 5300
    case .getUserUpdateNamePermission: return 5301
    case .pushUserLogoutEvent: return 5302
    case .pullUserUpdateFieldPermission: return 5303
    case .putUserAlias: return 5400
    case .putGroupNickname: return 5401
    case .pushUserAlias: return 5402
    case .pushGroupNickname: return 5403
    case .pullMessageI18NTemplates: return 5500
    case .pullUserNames: return 5501
    case .pullChatShareHistory: return 5600
    case .putChatShareHistory: return 5601
    case .patchChatShareStatus: return 5602
    case .pullChatShareTokenInfo: return 5700
    case .createFaceToFaceApplication: return 5800
    case .pushFaceToFaceApplicants: return 5801
    case .joinFaceToFaceChat: return 5802
    case .patchChatAdminUsers: return 5900
    case .pushChatAdminUsers: return 5901
    case .pullChatAdminUsers: return 5902
    case .pullChatTabs: return 5911
    case .createChatTab: return 5912
    case .deleteChatTab: return 5913
    case .reorderChatTabs: return 5914
    case .updateChatTabs: return 5915
    case .pushChatTabs: return 5916
    case .putChatOnlineStatus: return 5921
    case .analyzeChattersSheet: return 5931
    case .pushSid: return 6000
    case .pushBackgroundNotification: return 6001
    case .pushBannerNotification: return 6002
    case .pullChatterSubscribers: return 6300
    case .pullNewestPolicies: return 6951
    case .putNewestPolicies: return 6952
    case .putDeviceNotifySetting: return 7000
    case .pushDeviceOnlineStatus: return 7001
    case .pullDevicesOnlineStatus: return 7002
    case .putDeviceNotifySettingDisableNotify: return 7003
    case .putDeviceNotifySettingStillNotifyAt: return 7004
    case .pushUserLoginStatus: return 7005
    case .pullDeviceNotifySetting: return 7006
    case .putDeviceSetting: return 7007
    case .pullDeviceSetting: return 7008
    case .pullUserSetting: return 7009
    case .patchUserSetting: return 7010
    case .pushUserSetting: return 7011
    case .putWayToFindMeSetting: return 7012
    case .pushWayToFindMeSetting: return 7013
    case .putWayToAddFriendSettingItem: return 7014
    case .pushWayToAddFriendSettingItem: return 7015
    case .pullAddFriendSetting: return 7016
    case .pushDeviceNetworkAccessEvent: return 7017
    case .pullSpellCheckWords: return 7018
    case .pushSpellCheckAddWords: return 7019
    case .putSpellCheckAddWords: return 7020
    case .pullMessageNotificationsOffDuringCalls: return 7021
    case .pullFeedFilterSetting: return 7022
    case .putFeedFilterSetting: return 7023
    case .pushFeedFilterSetting: return 7024
    case .patchUniversalUserSetting: return 7025
    case .pullUniversalUserSetting: return 7026
    case .pushUniversalUserSetting: return 7027
    case .putDeviceNotifySettingStillNotifySpecialFocus: return 7028
    case .pullDynamicEmojiResources: return 7029
    case .pullThreeColumnsSetting: return 7030
    case .patchThreeColumnsSetting: return 7031
    case .pushThreeColumnsSetting: return 7032
    case .putDeviceToken: return 7100
    case .pushAction: return 7101
    case .putDeviceBasicModeSetting: return 7102
    case .pullDeviceBasicModeSetting: return 7103
    case .pullProductGuide: return 7501
    case .deleteProductGuide: return 7504
    case .pushProductGuide: return 7505
    case .pullGuideV2: return 7506
    case .getUserGuideRequest: return 7507
    case .postUserConsumingGuideRequest: return 7508
    case .userGuideUpdatedRequest: return 7509
    case .pullIceBreakingStatus: return 7600
    case .putIceBreakingAction: return 7601
    case .putTourGuideAchieved: return 7602
    case .putUpdateTenantPackage: return 7603
    case .putTrustedMail: return 7604
    case .pullTrustedMailInfo: return 7605
    case .getAdvertiseSourceConfig: return 7606
    case .pushGuideToRateState: return 7700
    case .pullGuideToRateState: return 7701
    case .putGuideToRateEvent: return 7702
    case .pushSyncDevices: return 8001
    case .pullGeoInfoByIp: return 8002
    case .pullCertificateDecryptionKey: return 8003
    case .pullChatMemberSuppRoleApprovalSetting: return 8004
    case .putChatMemberSuppRoleApproval: return 8005
    case .pushThreads: return 8100
    case .patchThread: return 8101
    case .pullChatThreads: return 8102
    case .pullThreadMessages: return 8103
    case .pushThreadSetting: return 8104
    case .putReadThreads: return 8105
    case .pushThreadReadState: return 8106
    case .pullThreadsByPositions: return 8108
    case .pullThreadMessageByPositions: return 8109
    case .pushThreadUpdated: return 8110
    case .pullThreadsByIds: return 8111
    case .pullThreadsSetting: return 8112
    case .pushThreadsRemoved: return 8113
    case .pushThreadMutableInfo: return 8114
    case .pushThreadNoReplyCountUpdated: return 8115
    case .pullThreadCard: return 8116
    case .pushThreadStateInfo: return 8117
    case .pullFilteredThreadsByChat: return 8118
    case .pushThreadFilterUpdated: return 8119
    case .pullRecommendationsByUser: return 8120
    case .putReadMyThreads: return 8121
    case .pushMyThreadsReadState: return 8122
    case .pullThreadAnonymousQuota: return 8123
    case .pushThreadAnonymousQuota: return 8124
    case .putThreadShare: return 8125
    case .pullChatTemplateBanner: return 8126
    case .putChatTemplateBannerStatus: return 8127
    case .pushThreadUpdateInfo: return 8128
    case .putTopicsReadState: return 8300
    case .pullRecommendedTopicGroups: return 8301
    case .pullMyTopicGroups: return 8302
    case .pullTopicGroupsToPost: return 8303
    case .uninterestTopicGroupForUser: return 8310
    case .uninterestTopicForUser: return 8311
    case .uninterestUserForUser: return 8312
    case .pullTopicGroupsByIds: return 8319
    case .pushTopicMessages: return 8320
    case .putTopicGroupMemberViaRecommendation: return 8321
    case .pullTopicGroupTabNotification: return 8322
    case .pushTopicGroupSetting: return 8323
    case .pushTopicGroup: return 8324
    case .pullTopicGroupSetting: return 8325
    case .searchUser: return 11000
    case .searchMessage: return 11001
    case .searchGroupChat: return 11002
    case .search: return 11003
    case .searchChatter: return 11004
    case .smartSearch: return 11005
    case .putSearchFeedback: return 11006
    case .pullSearchHistoryEntities: return 11007
    case .deleteSearchHistoryEntity: return 11008
    case .segmentText: return 11009
    case .searchEmailMessage: return 11010
    case .searchDoc: return 11011
    case .integrationSearch: return 11012
    case .pullChatResourceMessages: return 11013
    case .putSearchMsgHistory: return 11014
    case .pullSearchMsgHistory: return 11015
    case .deleteSearchMsgHistory: return 11016
    case .pullSearchSetting: return 11017
    case .pullSearchFilter: return 11018
    case .searchCustomizeField: return 11019
    case .searchInChat: return 11020
    case .universalSearch: return 11021
    case .externalResourceSearch: return 11022
    case .pullUserSearchTabs: return 11023
    case .putUserSearchTabs: return 11024
    case .pullAvailableSearchTabs: return 11025
    case .putSearchQueryHistory: return 11026
    case .deleteSearchQueryHistory: return 11027
    case .pullClosestChatters: return 11100
    case .pullClosestChats: return 11101
    case .pullLocalSearchRankModelConfig: return 11102
    case .pullSpecialFocus: return 11103
    case .updateSpecialFocus: return 11104
    case .pushUserSpecialFocus: return 11105
    case .pullPacketsBySids: return 12001
    case .sync: return 12002
    case .pullPipelineIntervalBySid: return 12003
    case .pullOncalls: return 13001
    case .putOncallChat: return 13002
    case .pullAllOncallTags: return 13003
    case .pullOncallByTags: return 13004
    case .putFinishOncall: return 13005
    case .pullHomePageOncalls: return 13006
    case .putInviteOncall: return 13007
    case .pullOncallsByIds: return 13008
    case .pushOncalls: return 13009
    case .pullChatBots: return 13100
    case .pullChatCandidateBots: return 13101
    case .pushLogUpload: return 13102
    case .pushLogRequest: return 13103
    case .pushLogRetrieval: return 13110
    case .retryLogRetrievalTask: return 13111
    case .fetchLogRetrievalTaskStatus: return 13112
    case .patchDocPrem: return 14001
    case .pushDoc: return 14002
    case .pullDocs: return 14003
    case .pushDocFeed: return 14004
    case .pullDocFeedsByIds: return 14005
    case .pushDocs: return 14006
    case .pullDocPerms: return 14007
    case .putDocFeed: return 14008
    case .pullDocsHistory: return 14009
    case .pullConvertToken: return 14010
    case .patchDocFeedSetting: return 14011
    case .pushDocFeedSetting: return 14012
    case .pullDocFeedSettings: return 14013
    case .putReadDocMessages: return 14014
    case .pullDocByUrls: return 14015
    case .pullDocMessageReadStatus: return 14016
    case .pushDoc2: return 14017
    case .pushDocs2: return 14018
    case .pushToDoc: return 14100
    case .pushDocImageRelay: return 14101
    case .pullDocFeedMsgTmpl: return 14102
    case .sendHongbao: return 15001
    case .grabHongbao: return 15002
    case .updateHongbao: return 15003
    case .pullHongbaoInfo: return 15004
    case .pullHongbaoRecvDetail: return 15005
    case .pullWalletBalance: return 15006
    case .pullSendHongbaoRecord: return 15007
    case .pullGrabHongbaoRecord: return 15008
    case .pullHongbaoCoverList: return 15009
    case .pullMessageActionList: return 16000
    case .grabCommercialHongbao: return 18001
    case .updateCommercialHongbao: return 18002
    case .pullCommercialHongbaoInfo: return 18003
    case .pullCommercialHongbaoRecvDetail: return 18004
    case .putUrgent: return 30000
    case .putUrgentAck: return 30001
    case .pushUrgent: return 30002
    case .pushUrgentAck: return 30003
    case .pullUrgentWaitingAck: return 30004
    case .pullUrgentAckStatus: return 30005
    case .confirmUrgentAckByID: return 30006
    case .pullUrgentPhones: return 30007
    case .pushFailedUrgentNotifyResult: return 30008
    case .pullSelectUrgentChatters: return 30009
    case .pullUrgentChatChatters: return 30010
    case .pullChattersUrgentInfo: return 30011
    case .pullTtUser: return 40001
    case .putTtUser: return 40002
    case .pushAppCenterUpdate: return 40100
    case .pushMalaitaUpdate: return 40101
    case .pushAppCenterUpdateV2: return 40102
    case .pushTenantAppUpdate: return 40103
    case .pushMiniprogramUpdate: return 40104
    case .pushOpenAppFeed: return 40105
    case .pushOpenAppNotifyReadSync: return 40106
    case .pushOpenAppSettings: return 40107
    case .pushMiniprogramPreview: return 40108
    case .pushOpenCommon: return 40111
    case .pullMalaitaPreview: return 40112
    case .pullUlawaPreview: return 40113
    case .pullMalaitaNotificationUnreadCount: return 40114
    case .pullUlawaNotificationUnreadCount: return 40115
    case .setMalaitaJumpReport: return 40116
    case .pullAppChatFeed: return 40117
    case .pushAppChatFeedSettings: return 40118
    case .createAppChat: return 40119
    case .pullAppChatFeedID: return 40120
    case .setAppChatNoticeConfig: return 40121
    case .pushGadgetAppData: return 40122
    case .pullOpenAppBadgeNodes: return 40123
    case .pushOpenAppBadgeNodes: return 40124
    case .pullOpenAppBadgeSettings: return 40125
    case .pullPipeList: return 70000
    case .pullMultiPipePacketsByTypes: return 70001
    case .pullMultiPipePacketsByIds: return 70002
    case .pullUnsupportPipeTypeInfos: return 70003
    case .pullMultiPipePacketsBySupportType: return 70004
    case .pullChatChangeLists: return 70005
    case .pullMultiPipePackets: return 70006
    case .pullChangeLists: return 70007
    case .checkPipesTimeout: return 70008
    case .pullRoomInfo: return 81000
    case .submitFeedbacks: return 81030
    case .updateScheduleStatus: return 82011
    case .sketchStart: return 88001
    case .updateShareScreenSettings: return 88002
    case .fetchAllSketchData: return 88003
    case .applyByteviewAccessibility: return 88004
    case .fetchSketchDataByShapeIds: return 88005
    case .pullSketchHistory: return 88006
    case .remoteControl: return 88011
    case .updateRemoteControlSettings: return 88012
    case .getAdminSettings: return 88013
    case .uploadParticipantInfo: return 88015
    case .getAdminMediaServerSeetings: return 88016
    case .pullAllFollowStates: return 88051
    case .getFollowResources: return 88052
    case .getURLBriefs: return 88053
    case .uploadGoogleToken: return 88054
    case .getGoogleToken: return 88055
    case .revokeGoogleToken: return 88056
    case .exchangeGoogleToken: return 88057
    case .replyFollowNotice: return 88058
    case .pushVcShareMessage: return 88100
    case .operateWhiteboard: return 88101
    case .operateWhiteboardPage: return 88102
    case .uploadWhiteboard: return 88103
    case .pullWhiteboardSnapshot: return 88104
    case .saveWhiteboard: return 88105
    case .sendGrootCellsMeetingSpace: return 89000
    case .pullGrootCellsMeetingSpace: return 89001
    case .pushGrootCells: return 89002
    case .grootChannelHandshakeMeetingSpace: return 89003
    case .pushMeetingSpaceInfo: return 89004
    case .updateReadCursor: return 89005
    case .getMeetingSpaceMetaData: return 89006
    case .getMeetingSpaceAgenda: return 89007
    case .getMeetingSpaceFiles: return 89008
    case .getUniqueIDByMeetingID: return 89009
    case .grootChannelPingMeetingSpace: return 89010
    case .checkInterviewMeetingSpace: return 89011
    case .occupyInterviewCoding: return 89012
    case .sendInterviewCodingAction: return 89013
    case .updateMinutesStatus: return 89014
    case .sendGrootCells: return 89050
    case .pullGrootCells: return 89051
    case .grootChannelHandshake: return 89052
    case .grootChannelPing: return 89053
    case .pullUpstreamGrootCells: return 89054
    case .getCalendarMeetingByUids: return 89201
    case .getHistoryMeetingList: return 89202
    case .getCallHistoryList: return 89203
    case .batchGetMeetingByIds: return 89204
    case .batchGetUniqueIDByEventID: return 89205
    case .getVcTabTotalMissedCall: return 89206
    case .vcTabMissedCallConfirm: return 89207
    case .getVcTabHistoryList: return 89208
    case .getVcTabMeetingDetail: return 89209
    case .notifyVcTabMissedCalls: return 89211
    case .createVcTabMeetingStatistics: return 89212
    case .pushVcTabNotice: return 89213
    case .pushOnCallTicketNotice: return 89214
    case .getMeetingURLInfo: return 89301
    case .vcOwnerForceTransferHost: return 89302
    case .checkVcManageCapabilities: return 89303
    case .vcSearchUserInMeeting: return 89304
    case .uploadEquipmentInfo: return 89305
    case .vcLarkSearchUserInMeeting: return 89306
    case .vcGetSuiteQuota: return 89308
    case .vcPullCardInfo: return 89309
    case .keepMeeting: return 89310
    case .pushRtcStatus: return 89311
    case .refuseReply: return 89317
    case .pullAllRtcStatus: return 89312
    case .getVcLobbyParticipants: return 89321
    case .updateVcLobbyParticipant: return 89322
    case .vcLobbyHeartbeat: return 89323
    case .vcManageApply: return 89341
    case .vcManageApproval: return 89342
    case .pushVcManageNotify: return 89343
    case .pushVcManageResult: return 89344
    case .sendClientInfo: return 89349
    case .entrustServerTrack: return 89350
    case .setCalendarVcSettings: return 89351
    case .getCalendarVcSettings: return 89352
    case .getCalendarGuestList: return 89353
    default: break
    }
    switch self {
    case .getRoomStatusByShareCode: return 89354
    case .breakoutRoomInfoNotify: return 89360
    case .startMeetingBreakoutRoom: return 89361
    case .joinMeetingBreakoutRoom: return 89362
    case .pullBreakoutRoomInfo: return 89363
    case .vcCreateCalendarEvent: return 89364
    case .vcUpdateCalendarEvent: return 89365
    case .pullVcCalendarEvents: return 89366
    case .getMainCalendar: return 89367
    case .getCalendarVchatStatus: return 89370
    case .getInterviewVchatStatus: return 89371
    case .getCalendarDefaultSettings: return 89372
    case .applyPreVcSettingID: return 89373
    case .getCalendarPreSettings: return 89374
    case .closeInterviewerNotice: return 89375
    case .translateVcMessages: return 89381
    case .pushVcTranslateResults: return 89382
    case .setBreakoutRoomPreSetting: return 89390
    case .getBreakoutRoomPreSetting: return 89391
    case .getAndBindFilesVc: return 89392
    case .breakoutDownloadTemplate: return 89393
    case .breakoutUploadFile: return 89394
    case .notifyBreakoutManageResult: return 89395
    case .applyDtmf: return 89401
    case .pullParticipantInfo: return 89403
    case .getSipDomainByUniqueID: return 89404
    case .getPstnSipFc: return 89405
    case .getH323AccessByUniqueID: return 89406
    case .createEnterprisePhone: return 89450
    case .cancelEnterprisePhone: return 89451
    case .notifyEnterprisePhone: return 89452
    case .getEnterprisePhoneConfig: return 89453
    case .checkEnterprisePhoneQuota: return 89454
    case .getPhoneNumberAttribution: return 89455
    case .getMeetingUnit: return 89460
    case .getTargetUserPhoneNumber: return 89461
    case .genOnCallTicket: return 89465
    case .updateOnCallTicket: return 89466
    case .searchUsersAndChats: return 89501
    case .startSamePageMeeting: return 89601
    case .updateSamePageMeeting: return 89602
    case .initSamePageMeeting: return 89603
    case .stopShareBoxLink: return 89701
    case .shareBoxHeartbeat: return 89702
    case .pushShareLinkInfo: return 89703
    case .startShareLink: return 89704
    case .pushBoxNotice: return 89705
    case .changeShareLinkSetting: return 89706
    case .uploadVcMaterialMeta: return 89801
    case .pullVcMaterialMeta: return 89802
    case .deleteVcMaterial: return 89803
    case .pushVcMaterialMsg: return 89804
    case .mmPushReactionInfo: return 90001
    case .mmPushSummaryStatus: return 90002
    case .mmPushSummaryChange: return 90003
    case .mmPushSummaryCheck: return 90004
    case .mmPushRealtimeSubtitleSentence: return 90005
    case .mmPushDiarizationRematchStatus: return 90006
    case .voicePrintPullStatus: return 90008
    case .voicePrintPushStatus: return 90009
    case .voicePrintClear: return 90010
    case .submitNeoFeedbacks: return 91030
    case .pullLeanModeStatusAndAuthority: return 109001
    case .patchLeanModeStatus: return 109002
    case .pushLeanModeStatusAndAuthority: return 109003
    case .pullDynamicFlow: return 110001
    case .pullDynamicFlowStep: return 110002
    case .reportFlowEvent: return 110003
    case .pullDynamicResource: return 110004
    case .pushDynamicFlow: return 110005
    case .pushDynamicFlowStep: return 110006
    case .trySetUgEventState: return 110007
    case .getNewUserCreateTeamStrongGuideContext: return 110008
    case .getLdrServiceApplink: return 110009
    case .bizEventReport: return 110010
    case .pullNewFeatureMaterial: return 110050
    case .submitNewFeatureClickEvent: return 110051
    case .getMeegoSingature: return 110071
    case .ecmSubscribeEvent: return 110101
    case .ecmKeepLiveSubscribe: return 110102
    case .ecmCancelSubscribe: return 110103
    case .ecmEventBroadcast: return 110104
    case .ecmAddItemSubscribe: return 110105
    case .getLiveConfig: return 200000
    case .liveHeartbeat: return 200001
    case .getLiveInfo: return 200002
    case .updateLiveInfo: return 200003
    case .pushLiveNotice: return 200004
    case .pushLiveInfo: return 200005
    case .updateLiveStatus: return 200006
    case .pollLiveAudienceNum: return 200007
    case .createLive: return 200008
    case .createLiveScene: return 200009
    case .editLiveScene: return 200010
    case .deleteLiveScene: return 200011
    case .moveLiveScene: return 200012
    case .getSubSceneList: return 200013
    case .switchSubScene: return 200014
    case .mgetSceneByID: return 200015
    case .joinLiveRoom: return 200016
    case .inviteLiveGuest: return 200017
    case .removeLiveGuest: return 200018
    case .notifyLiveGuest: return 200019
    case .updateLiveDevice: return 200020
    case .mgetLiveUserByID: return 200021
    case .pushLiveChange: return 200022
    case .leaveLiveRoom: return 200023
    case .livePreCheck: return 200024
    case .getLiveInfoV2: return 200025
    case .updateLiveInfoV2: return 200026
    case .deleteLiveInfo: return 200027
    case .getLiveInfoList: return 200028
    case .exportLiveStatistics: return 200029
    case .liveStatisticsPush: return 200030
    case .getLiveStaticResource: return 200031
    case .uploadLiveFile: return 200032
    case .liveFileReviewResultPush: return 200033
    case .updateLiveUser: return 200034
    case .searchLiveShareCandidate: return 200035
    case .sendLiveShareMessage: return 200036
    case .pollingLiveStatistics: return 200037
    case .createLiveAccessory: return 200038
    case .deleteLiveAccessory: return 200039
    case .updateLiveAccessory: return 200040
    case .mgetLiveAccessoryByID: return 200041
    case .liveResourceRiskCheck: return 200042
    case .closeLiveWindowNotice: return 200043
    case .getLivePermissionMembers: return 200044
    case .getLivePermissionChatPaged: return 200045
    case .getAssociatedLiveStatusWithEventID: return 210000
    case .pushAssociatedLiveStatus: return 210001
    case .pushLiveAccessories: return 220000
    case .fetchLiveMessages: return 230001
    case .sendLiveMessage: return 230002
    case .deleteLiveMessage: return 230003
    case .pinLiveMessage: return 230004
    case .liveBanUser: return 230005
    case .getLiveBannedUser: return 230006
    case .getLiveList: return 240001
    case .getMoreLives: return 240002
    case .deleteLive: return 240003
    case .cmsCreateLive: return 240004
    case .cmsGetLiveInfo: return 240005
    case .updateLiveConfig: return 240006
    case .updateStream: return 240007
    case .getStreamPushInfo: return 240008
    case .checkContentText: return 240009
    case .getLiveStaticResourceV2: return 240010
    case .getLiveThemeColor: return 240011
    case .getLiveConfigCondition: return 240012
    case .whiteboardStart: return 800021
    case .whiteboardStop: return 800022
    case .fetchAllWhiteboardData: return 800023
    case .pullMessageDocPerms: return 900000
    case .pushCipherChangeEvent: return 900001
    case .pullChangedCipherKeys: return 900002
    case .translateMessageURLPreview: return 900003
    case .pullMessageLastVisibleInfo: return 900004
    case .syncCalendars: return 1000001
    case .saveCalendars: return 1000002
    case .pullCalendarUserIDRoles: return 1000003
    case .pullCalendarByIds: return 1000004
    case .pushChangedCalendarIds: return 1000005
    case .pullChatterCalendarMap: return 1000006
    case .subscribeCalendar: return 1000007
    case .unsubscribeCalendar: return 1000008
    case .getGoogleAuthURL: return 1000009
    case .revokeGoogkeToken: return 1000010
    case .subscribeAndGetLatestUpdatedCalendars: return 1000011
    case .saveCalendarSetting: return 1000012
    case .pullCalendarSetting: return 1000013
    case .searchGuests: return 1000014
    case .pullGroupsChatters: return 1000015
    case .searchMeetingRooms: return 1000016
    case .multiCalendarSearch: return 1000017
    case .pullMeetingRoomsSubscriber: return 1000018
    case .saveCalendarSettingPb: return 1000019
    case .pullCalendarSettingPb: return 1000020
    case .genPasswordForCaldav: return 1000021
    case .changePasswordForCaldav: return 1000022
    case .deleteCaldavUserPassword: return 1000023
    case .getCaldavPasswordList: return 1000024
    case .getLastUsedResources: return 1000025
    case .getLastInvitedGuests: return 1000026
    case .pullMeetingRoomViewCalendars: return 1000027
    case .subscribeMeetingRoomViewCalendars: return 1000028
    case .unsubscribeMeetingRoomViewCalendars: return 1000029
    case .msubscribeCalendars: return 1000030
    case .getMeetingRoomViewCalendars: return 1000031
    case .mgetCalendarsWithIds: return 1000032
    case .munsubscribeCalendars: return 1000033
    case .getFreeBusyAccessibleUsers: return 1000034
    case .saveCalendarUserDeviceSetting: return 1000035
    case .getPlaceByID: return 1000036
    case .getPlaceTips: return 1000037
    case .searchAttendeeInChat: return 1000038
    case .mgetCalendarUserDeviceSetting: return 1000039
    case .getUserCalendarIds: return 1000040
    case .getUserPrimaryCalendar: return 1000041
    case .mgetChatFreeBusyFavor: return 1000042
    case .setChatFreeBusyFavor: return 1000043
    case .getExternalAccountList: return 1000044
    case .saveExternalAccountSetting: return 1000045
    case .getExternalAccountByMail: return 1000046
    case .markLarkServerMailSelected: return 1000047
    case .uploadCalendarsWithCommit: return 1000048
    case .saveCalendarWithMembers: return 1000049
    case .listCalendarList: return 1000050
    case .getResourceEquipments: return 1000051
    case .filterMrviewResourceCalendar: return 1000052
    case .pullMeetingRoomStatusInformation: return 1000053
    case .getResourceCheckInInfoWithToken: return 1000054
    case .checkInByQrCode: return 1000055
    case .verifyCalendarList: return 1000056
    case .pullResourceCustomizationByContactID: return 1000057
    case .pullAllMeetingRoomsInTenant: return 1000058
    case .getCalendarEventFromApplink: return 1000059
    case .bindingExchangeAccount: return 1000060
    case .revokeExchangeAccount: return 1000061
    case .pullDepartmentsChatters: return 1000062
    case .mgetDepartmentsMemberCount: return 1000063
    case .getCalendarInfoByID: return 1000064
    case .patchCalendar: return 1000065
    case .shareCalendar: return 1000066
    case .createCalendar: return 1000067
    case .getCalendarIDByShareToken: return 1000068
    case .pullMeetingRoomAndLevelInfo: return 1000069
    case .pullAllMeetingRoomAndLevelInfo: return 1000070
    case .searchMeetingRoomsV2: return 1000071
    case .pullCalendarTenantSettingPb: return 1000072
    case .webListCalendars: return 1001001
    case .webBatchSubscribeCalendars: return 1001002
    case .webBatchUnsubscribeCalendars: return 1001003
    case .webCreateCalendar: return 1001004
    case .webDeleteCalendar: return 1001005
    case .webUpdateCalendar: return 1001006
    case .webMgetCalendarsWithIds: return 1001008
    case .webListCalendarEvents: return 1002001
    case .webPullCalendarEvents: return 1002002
    case .webCreateEvent: return 1002003
    case .webUpdateEvent: return 1002004
    case .webDeleteEvent: return 1002005
    case .webMgetEventsWithIds: return 1002006
    case .webGetGroupAttendeesByGroupIds: return 1002007
    case .webGetUserAttendeesByUserIds: return 1002008
    case .webGetAttendeesByCalendarIds: return 1002009
    case .webListOptimizedCalendarEvents: return 1002010
    case .webListFirstScreenCalendarEvents: return 1002011
    case .webShareCalendarEvent: return 1002012
    case .resourceManagementGetInstances: return 1003001
    case .resourceManagementGetEvent: return 1003002
    case .resourceManagementCreateEvent: return 1003003
    case .resourceManagementUpdateEvent: return 1003004
    case .resourceManagementDeleteEvent: return 1003005
    case .resourceManagementGetConflictEventInfo: return 1003006
    case .resourceManagementGetResourceAccessRole: return 1003007
    case .resourceManagementListBuildings: return 1003008
    case .resourceManagementListResources: return 1003009
    case .resourceManagementSearchMeetingRooms: return 1003010
    case .syncCalendarEvents: return 1010001
    case .pushCalendarEventReminder: return 1010002
    case .pullCalendarEventsWithRefIds: return 1010003
    case .pullCalendarMeetingRooms: return 1010004
    case .pullCalendarResourcesByID: return 1010005
    case .queryInstance: return 1010006
    case .mgetCalendarEventsWithIds: return 1010007
    case .searchCalendarContacts: return 1010008
    case .pullMeetingRoomBuildings: return 1010009
    case .pullMeetingRoomsInBuilding: return 1010010
    case .pullMeetingsByChatIds: return 1010011
    case .quitMeeting: return 1010012
    case .markMeetingEntered: return 1010013
    case .upgradeToMeeting: return 1010014
    case .batchQueryInstance: return 1010015
    case .joinCalendarEvent: return 1010016
    case .getCalendarEventInfo: return 1010017
    case .markScrollClicked: return 1010018
    case .batchQueryEventsDiff: return 1010019
    case .getBusyUser: return 1010020
    case .closeEventReminderCard: return 1010021
    case .transferCalendarEvent: return 1010022
    case .mgetCalendarEventsWithKey: return 1010023
    case .getResourcesByCalendarIds: return 1010024
    case .getResourcesWithToken: return 1010025
    case .seizeResource: return 1010026
    case .setWhetherPopUp: return 1010027
    case .createMeetingMinute: return 1010028
    case .meetingMinuteUpdateCheck: return 1010029
    case .getVchatByEvnet: return 1010030
    case .getVchatStatus: return 1010031
    case .getEventInfoByVchatID: return 1010032
    case .upgradeToChat: return 1010033
    case .displayTransferChatScrollCheck: return 1010034
    case .optimizedSyncCalendarEvents: return 1010035
    case .searchCalendarEvent: return 1010036
    case .getAuthorizedCalendarEventWithKey: return 1010037
    case .getUser2CalendarBotChatID: return 1010038
    case .mgetIsJoinedEventStatus: return 1010039
    case .joinMeetingChat: return 1010040
    case .getEventShareLink: return 1010041
    case .pullEventGroupAttendeeMembers: return 1010042
    case .pullEventGroupsSimpleMembers: return 1010043
    case .switchEventCalendar: return 1010044
    case .getRoomViewInstances: return 1010045
    case .getIndividualAttendeesByPage: return 1010046
    case .pullCalendarInstances: return 1010047
    case .listCalendarEvents: return 1010048
    case .saveCalendarEvents: return 1010049
    case .getEventGroupAttendeeWithKeyForCopy: return 1010050
    case .getEventIndividualAttendeeWithKeyForCopy: return 1010051
    case .sendImageToOcr: return 1011731
    case .pullPermission: return 1011741
    case .pushPermissionEvent: return 1011742
    case .updateUserRecentlyUsedEmoji: return 1011761
    case .pullSplashAd: return 1011771
    case .getAdminPermissionInfo: return 1011791
    case .getMailWebTabVisible: return 1011801
    case .pushCalendarEventInvitation: return 1020001
    case .replyCalendarEventInvitation: return 1020002
    case .pushCalendarEventSyncNotification: return 1020003
    case .pushCalendarEventCancelNotification: return 1020004
    case .pushReplyCalendarEventInvitation: return 1020005
    case .pushCalendarEventUpdateNotification: return 1020006
    case .pushCalendarEventRescheduleNotification: return 1020007
    case .pushCalendarSyncNotification: return 1020008
    case .pushBindGoogleSuccessNotification: return 1020009
    case .pushRevokeGoogleSuccessNotification: return 1020010
    case .pushCalendarSettingChangeNotification: return 1020011
    case .pushCalendarSettingPbChangeNotification: return 1020012
    case .pushMeetingInfoNotification: return 1020013
    case .pushCalendarEventWithData: return 1020014
    case .pushSharedCalendarEventChangeNotification: return 1020015
    case .pushReminderClosedNotification: return 1020016
    case .pushShowSubscribedCalendarNotification: return 1020017
    case .pushClearCalendarEventNotification: return 1020018
    case .pushScrollClosedNotification: return 1020019
    case .pushExternalAccountSettingSyncNotification: return 1020020
    case .pushGoogleBindSettingCallback: return 1020021
    case .pushCalendarEventVchatChange: return 1020022
    case .pushExternalCalendarChangeNotification: return 1020023
    case .setInstanceImportanceScoreFeedback: return 1021001
    case .getInstanceImportanceScore: return 1021002
    case .pushUploadEntityTask: return 1030000
    case .putEntity: return 1030001
    case .pushMeetingMinuteEditors: return 1030002
    case .mgetMailCalendarInfo: return 1040001
    case .getTodoHistoryCommits: return 1050003
    case .postSyncTodoCommits: return 1050004
    case .pullSyncTodoItems: return 1050005
    case .getTodoItems: return 1050006
    case .mgetTodoByGuid: return 1050007
    case .getRecommendedContents: return 1050008
    case .getTodoReferResources: return 1050009
    case .mergeMessagesAsTodoResource: return 1050010
    case .mergeTopicAsTodoResource: return 1050011
    case .followTodo: return 1050012
    case .getTodoSetting: return 1050013
    case .saveTodoSetting: return 1050014
    case .getChatTodoStatus: return 1050015
    case .getChatTodos: return 1050016
    case .getChatCompletedTodos: return 1050017
    case .listDocTodos: return 1050018
    case .getTodoMsgCardPermission: return 1050019
    case .updateTodoMsgCards: return 1050020
    case .updateTodo: return 1050100
    case .deleteTodos: return 1050101
    case .exitCollaborationTodo: return 1050102
    case .updateTodoCompleteStatus: return 1050103
    case .createTodoComment: return 1050201
    case .updateTodoComment: return 1050202
    case .deleteTodoComment: return 1050203
    case .mgetTodoComments: return 1050204
    case .mgetTodoCommentsWithPositions: return 1050205
    case .listTodoComments: return 1050206
    case .createTodoCommentReaction: return 1050207
    case .deleteTodoCommentReaction: return 1050208
    case .sendTodoHeartbeat: return 1050300
    case .pushTodoSyncNotification: return 1051001
    case .pushTodoReminderNotification: return 1051002
    case .pushTodoClearNotification: return 1051003
    case .pushTodoSettingNotification: return 1051004
    case .pushTodoCommentNotification: return 1051005
    case .pushTodoCommentReactionNotification: return 1051006
    case .momentsCreatePost: return 1055001
    case .momentsDeletePost: return 1055002
    case .momentsCreateComment: return 1055003
    case .momentsDeleteComment: return 1055004
    case .momentsCreateReaction: return 1055005
    case .momentsDeleteReaction: return 1055006
    case .momentsSharePost: return 1055007
    case .momentsFollowUser: return 1055008
    case .momentsUnfollowUser: return 1055009
    case .momentsListBroadcasts: return 1055010
    case .momentsListUserFollowers: return 1055011
    case .momentsListUserFollowings: return 1055012
    case .momentsListNotifications: return 1055013
    case .momentsAdminOperation: return 1055014
    case .momentsReport: return 1055016
    case .momentsGetUserConfigAndSettings: return 1055017
    case .momentsGetPostDetail: return 1055019
    case .momentsMgetCircles: return 1055020
    case .momentsMgetMomentUsers: return 1055021
    case .momentsMgetIsUserFollowing: return 1055022
    case .momentsPutReadNotifications: return 1055023
    case .momentsMgetPosts: return 1055024
    case .momentsMgetComments: return 1055025
    case .momentsMgetCategories: return 1055026
    case .momentsListCategories: return 1055027
    case .momentsListTabs: return 1055028
    case .momentsConfigTabs: return 1055029
    case .momentsGetCategoryDetail: return 1055030
    case .momentsListHashtagsByUserInput: return 1055031
    case .momentsGetHashtagDetail: return 1055032
    case .momentsCreateSubscriptionDraft: return 1055033
    case .momentsGetSubscriptionBackstageURL: return 1055034
    case .momentsGetBadge: return 1055101
    case .momentsGetRecommendFeed: return 1055102
    case .momentsGetFollowingFeed: return 1055103
    case .momentsGetUserProfile: return 1055105
    case .momentsListUserPosts: return 1055106
    case .momentsListComments: return 1055107
    case .momentsListReactions: return 1055108
    case .momentsPullReactionsSet: return 1055109
    case .momentsGetUserSetting: return 1055110
    case .momentsPatchUserSetting: return 1055111
    case .momentsCountOperation: return 1055112
    case .momentsGetRecommendAtList: return 1055113
    case .momentsListCategoryPosts: return 1055114
    case .momentsPushUserSetting: return 1055115
    case .momentsPullTabNotification: return 1055116
    case .momentsPutTabNotification: return 1055117
    case .momentsPushTabNotification: return 1055118
    case .momentsListHashtagPosts: return 1055119
    case .momentsGetAnonymousInfo: return 1055151
    case .momentsPullNicknames: return 1055152
    case .momentsPullNicknameAvatar: return 1055153
    case .momentsCreateNicknameUser: return 1055154
    case .momentsCheckSecretChatStatus: return 1055155
    case .momentsAskForSecretChat: return 1055156
    case .momentsAcceptSecretChat: return 1055157
    case .momentsPush: return 1055201
    case .pullNavigation: return 1060001
    case .putNavigationConfirm: return 1060002
    case .pushNavigation: return 1060003
    case .patchNavigation: return 1060004
    case .pullNavigationV2: return 1060005
    case .pullContactEntries: return 1060006
    case .pullNavigationOrder: return 1060007
    case .pullNavigationAppInfo: return 1060008
    case .pushNavigationOrder: return 1060009
    case .patchNavigationOrder: return 1060010
    case .createCommentThread: return 1070001
    case .getCommentThreads: return 1070002
    case .setCommentThreadVisibility: return 1070003
    case .deleteCommentThread: return 1070004
    case .addComment: return 1070005
    case .editComment: return 1070006
    case .deleteComment: return 1070007
    case .grantEntityPermission: return 1070008
    case .getThreadPermission: return 1070009
    case .revokePermission: return 1070010
    case .addReactionToComment: return 1070011
    case .deleteCommentReaction: return 1070012
    case .setThreadSharedStrategy: return 1070013
    case .uploadImage: return 1070014
    case .getLoginUserID: return 1070015
    case .getIsURLSupported: return 1070016
    case .searchCommentThread: return 1070017
    case .analyzeWebPage: return 1070018
    case .shareEmailToChat: return 1070019
    case .getMessage: return 1070020
    case .checkAuthPermission: return 1070021
    case .revokeAuthPermission: return 1070022
    case .getAuthEntities: return 1070023
    case .getImage: return 1070024
    case .aiTranslateImg: return 1071001
    case .getSmartCompose: return 1071002
    case .getComposerSetting: return 1071003
    case .setComposerSetting: return 1071004
    case .pushComposerSetting: return 1071005
    case .getSmartReply: return 1071006
    case .getSmartMemory: return 1071007
    case .getEnterpriseTopic: return 1071008
    case .slashCommand: return 1071009
    case .postEnterpriseTopic: return 1071010
    case .enterpriseTopicSeedUserEnroll: return 1071011
    case .enterpriseTopicRecord: return 1071012
    case .getChatCreateChattersRecommend: return 1071013
    case .getSmartWidget: return 1071014
    case .enterpriseTopicUserCardAction: return 1071015
    case .getPersonalizationSetting: return 1071016
    case .setPersonalizationSetting: return 1071017
    case .pushPersonalizationSetting: return 1071018
    case .getSmartReplySetting: return 1071019
    case .setSmartReplySetting: return 1071020
    case .pushSmartReplySetting: return 1071021
    case .pullSlashCommands: return 1071022
    case .postAsFeedback: return 1071023
    case .getSearchRecommend: return 1071024
    case .pullSearchPlaceholder: return 1071025
    default: break
    }
    switch self {
    case .pushSearchPlaceholder: return 1071026
    case .getGecSetting: return 1071027
    case .setGecSetting: return 1071028
    case .pushGecSetting: return 1071029
    case .getAiVocab: return 1071030
    case .createAiVocab: return 1071031
    case .deleteAiVocab: return 1071032
    case .getAsSetting: return 1071033
    case .setAsSetting: return 1071034
    case .pushAsSetting: return 1071035
    case .smartMosaic: return 1071036
    case .getAiTextCorrection: return 1071037
    case .getFeedbackReasonItems: return 1071038
    case .getUniversalRecommend: return 1071039
    case .postMagicShareInfo: return 1071040
    case .getActivityBanner: return 1072001
    case .getOnboardingSourceConfig: return 1072002
    case .getTimezoneByCity: return 1080001
    case .pullBanner: return 1100001
    case .setBannerStatus: return 1100002
    case .pushBanner: return 1100003
    case .mgetContactPointsUserInfo: return 1100301
    case .batchUploadContactPoints: return 1100302
    case .getChangedContactPointsUserInfo: return 1100303
    case .mgetBlockUserInfo: return 1100304
    case .mgetBlockUserNum: return 1100305
    case .setupBlockUser: return 1100308
    case .pullContactsV2: return 1100310
    case .mgetFriendship: return 1100311
    case .getUserBlockStatus: return 1100315
    case .blockStatusChangeEvent: return 1100316
    case .setupMsgAuth: return 1100317
    case .getMsgAuth: return 1100318
    case .pullUserRelation: return 1100319
    case .ignoreContactApply: return 1100320
    case .mputContactApplication: return 1100321
    case .pullAuthChatterInfo: return 1100322
    case .getUserIDAndRelation: return 1100323
    case .getContactOauthURL: return 1100801
    case .getOauthContacts: return 1100802
    case .getPendingReviewCount: return 1100803
    case .putTranslationFeedbackV2: return 1101400
    case .creationDocsNoticeNew: return 1101501
    case .creationDocsNoticeChange: return 1101502
    case .mgetTagMentionEntities: return 1101601
    case .sendInvitationToInactive: return 1101701
    case .oneKeyInviteInactive: return 1101702
    case .getInactiveParents: return 1101703
    case .getDepartmentInactiveInfo: return 1101704
    case .getDepartmentInvitationURL: return 1101705
    case .pushLanTransSenderAddrsSet: return 1101721
    case .pullUgScenario: return 1102001
    case .pullUgSdkSettings: return 1102002
    case .reportUgEvent: return 1102003
    case .pushUgScenarioInfo: return 1102004
    case .pushBlockEvent: return 1102201
    case .pushKv: return 1102202
    case .pushBlockEntityUpdate: return 1102203
    case .pushBlockExtensionUpdate: return 1102204
    case .pullNamecardProfile: return 1102400
    case .putSingleNamecard: return 1102401
    case .pullNamecardList: return 1102402
    case .updateSingleNamecard: return 1102403
    case .deleteSingleNamecard: return 1102404
    case .pullNamecardsByIds: return 1102405
    case .checkContactPointDuplicate: return 1102406
    case .createOrUpdateSingleNamecard: return 1102407
    case .pushTeleMeessage: return 1102501
    case .pushSyncMeessage: return 1102502
    case .sendSyncMeessage: return 1102503
    case .pullWatermarkConfig: return 1102601
    case .getHiddenWatermarkImage: return 1102602
    case .pushWatermarkConfig: return 1102603
    case .createTeam: return 1102701
    case .createTeamChat: return 1102702
    case .bindTeamChatPreCheck: return 1102703
    case .bindTeamChat: return 1102704
    case .unbindTeamChat: return 1102705
    case .patchTeam: return 1102706
    case .patchTeamSetting: return 1102707
    case .putTeamMembers: return 1102708
    case .deleteTeamMembers: return 1102709
    case .pullTeamsByIds: return 1102710
    case .pushTeam: return 1102711
    case .pushTeamSetting: return 1102712
    case .pushTeamBaseInfo: return 1102713
    case .checkNameAvailability: return 1102714
    case .patchTeamMembersRole: return 1102715
    case .pullTeamMembers: return 1102716
    case .pushTeamMembers: return 1102717
    case .putTeamChatChatters: return 1102718
    case .patchTeamChatByID: return 1102719
    case .putChatterViaTeamOpenChat: return 1102720
    case .pullItems: return 1102801
    case .pullItemsByIds: return 1102802
    case .reorderItems: return 1102803
    case .pushItems: return 1102804
    case .pullTeamItemIds: return 1102805
    case .patchItem: return 1102806
    case .pullItemsByEntityIds: return 1102807
    case .pullAvatarMeta: return 1102900
    case .pushSubscriptionsFeed: return 1102901
    case .pullSubscriptionsFeedsByIds: return 1102902
    case .sendEmToUser: return 1103001
    case .cancelEm: return 1103002
    case .sendEmInfo: return 1103003
    case .receiveEm: return 1103004
    case .pullEmRecords: return 1103005
    case .checkEmStatus: return 1103006
    case .existActiveEmTask: return 1103007
    case .pullDataRetentionRules: return 1103021
    case .pullOfflineSearchPermission: return 1103101
    case .pushOfflineSearchPermission: return 1103102
    case .getMeegoShowEnable: return 1103201
    case .getFeishuMeegoShowEnable: return 1103202
    case .openBannerPull: return 1103301
    case .openBannerPush: return 1103302
    case .openBannerPost: return 1103303
    case .pushChatterCustomStatus: return 1103401
    case .isAllowedCreateUserCustomStatus: return 1103402
    case .createUserCustomStatus: return 1103403
    case .updateUserCustomStatus: return 1103404
    case .pullUserCustomStatuses: return 1103405
    case .deleteUserCustomStatuses: return 1103406
    case .pullUserTypingTranslateSettings: return 1103408
    case .pushUserTypingTranslateSettings: return 1103409
    case .uploadSystemTimezone: return 1103410
    case .pushUserMedal: return 1103601
    case .getMedalList: return 1103602
    case .getMedalDetail: return 1103603
    case .setMedal: return 1103604
    case .getUserTakingMedal: return 1103605
    case .patchChatTopNotice: return 1103701
    case .pullChatTopNoticeByIds: return 1103702
    case .closeChatTopNotice: return 1103703
    case .pushChatTopNotice: return 1103704
    case .pushChatTopNoticePersonalState: return 1103705
    case .getRetentionQuestionnaire: return 1103801
    case .submitRetentionQuestionnaire: return 1103802
    case .getRetentionOperationLink: return 1103803
    case .getWidgetAppList: return 1103804
    case .getMaterialsByScene: return 1103805
    case .patchChatterExtraStates: return 1103901
    case .pushAttendanceRefreshConfig: return 1103911
    case .pushAttendanceTopSpeedClockIn: return 1103912
    case .publishVote: return 1103921
    case .vote: return 1103922
    case .pushVoteResult: return 1103923
    case .mgetVoteFirstScreenResult: return 1103924
    case .mgetVoteResult: return 1103925
    case .retransmitVote: return 1103926
    case .closeVote: return 1103927
    case .putUserStatusCalendarEvents: return 11034067
    default: break
    }

    // Can't get here, all the cases are listed in the above switches.
    // See https://github.com/apple/swift-protobuf/issues/904 for more details.
    fatalError()
  }

}

#if swift(>=4.2)

extension LarkNCExtensionPB_Improto_Command: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// IM 协议报文头中payload_type
public enum LarkNCExtensionPB_Improto_PayloadType: LarkHTTP.Enum {
  public typealias RawValue = Int
  case typeUnknown // = 0
  case pb2 // = 1
  case json // = 2

  public init() {
    self = .typeUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .typeUnknown
    case 1: self = .pb2
    case 2: self = .json
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .typeUnknown: return 0
    case .pb2: return 1
    case .json: return 2
    }
  }

}

#if swift(>=4.2)

extension LarkNCExtensionPB_Improto_PayloadType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct LarkNCExtensionPB_Improto_PipeEntity {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 管子类型 user, chat, message, doc, box, calendar...
  public var type: String {
    get {return _type ?? String()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  public mutating func clearType() {self._type = nil}

  /// 管子id，chat管子对应chat_id；user类型和不识别类型不需要传id
  public var id: Int64 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  public mutating func clearID() {self._id = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _type: String? = nil
  fileprivate var _id: Int64? = nil
}

/// Version Range describe a range of this format [start, end) for the semantic versioning.
/// In the version description, there are two special descriptions, -inf and +inf. Thus, a legal
/// version range may be [-inf, 1.2.13), [2.1, 3.0) or [3.4, +inf).
public struct LarkNCExtensionPB_Improto_VersionRange {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  public var start: String {
    get {return _start ?? String()}
    set {_start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  public var hasStart: Bool {return self._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
//  public mutating func clearStart() {self._start = nil}

  public var end: String {
    get {return _end ?? String()}
    set {_end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  public var hasEnd: Bool {return self._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
//  public mutating func clearEnd() {self._end = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public init() {}

  fileprivate var _start: String? = nil
  fileprivate var _end: String? = nil
}

public struct LarkNCExtensionPB_Improto_Packet {
  // LarkHTTP.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the LarkHTTP library for
  // methods supported on all messages.

  /// 服务端下发（push）消息时生成的唯一包id，保证递增
  public var sid: String {
    get {return _storage._sid ?? String()}
    set {_uniqueStorage()._sid = newValue}
  }
  /// Returns true if `sid` has been explicitly set.
  public var hasSid: Bool {return _storage._sid != nil}
  /// Clears the value of `sid`. Subsequent reads from it will return its default value.
//  public mutating func clearSid() {_uniqueStorage()._sid = nil}

  public var payloadType: LarkNCExtensionPB_Improto_PayloadType {
    get {return _storage._payloadType ?? .pb2}
    set {_uniqueStorage()._payloadType = newValue}
  }
  /// Returns true if `payloadType` has been explicitly set.
//  public var hasPayloadType: Bool {return _storage._payloadType != nil}
  /// Clears the value of `payloadType`. Subsequent reads from it will return its default value.
//  public mutating func clearPayloadType() {_uniqueStorage()._payloadType = nil}

  public var cmd: LarkNCExtensionPB_Improto_Command {
    get {return _storage._cmd ?? .ack}
    set {_uniqueStorage()._cmd = newValue}
  }
  /// Returns true if `cmd` has been explicitly set.
//  public var hasCmd: Bool {return _storage._cmd != nil}
  /// Clears the value of `cmd`. Subsequent reads from it will return its default value.
//  public mutating func clearCmd() {_uniqueStorage()._cmd = nil}

  /// 仅ACK包有，表示响应状态码
  public var status: UInt32 {
    get {return _storage._status ?? 200}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var payload: Data {
    get {return _storage._payload ?? LarkHTTP.Internal.emptyData}
    set {_uniqueStorage()._payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  public var hasPayload: Bool {return _storage._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
//  public mutating func clearPayload() {_uniqueStorage()._payload = nil}

  /// 客户端生成的，通讯层面的，唯一包 id，用于在客户端收到服务端发送的响应包时，判断对应的请求包是哪个
  public var cid: String {
    get {return _storage._cid ?? String()}
    set {_uniqueStorage()._cid = newValue}
  }
  /// Returns true if `cid` has been explicitly set.
//  public var hasCid: Bool {return _storage._cid != nil}
  /// Clears the value of `cid`. Subsequent reads from it will return its default value.
//  public mutating func clearCid() {_uniqueStorage()._cid = nil}

  /// 数据包所属pipe实体，只有push下发需要set，pull packet不需要set该字段
  public var pipeEntity: LarkNCExtensionPB_Improto_PipeEntity {
    get {return _storage._pipeEntity ?? LarkNCExtensionPB_Improto_PipeEntity()}
    set {_uniqueStorage()._pipeEntity = newValue}
  }
  /// Returns true if `pipeEntity` has been explicitly set.
//  public var hasPipeEntity: Bool {return _storage._pipeEntity != nil}
  /// Clears the value of `pipeEntity`. Subsequent reads from it will return its default value.
//  public mutating func clearPipeEntity() {_uniqueStorage()._pipeEntity = nil}

  /// 数据包可能包含的按版本划分的payloads
  public var versionPayloads: [LarkNCExtensionPB_Improto_Packet.VersionPayload] {
    get {return _storage._versionPayloads}
    set {_uniqueStorage()._versionPayloads = newValue}
  }

  /// pipe_entities 用于 multi pipe v2，一个 packet 可能关联多个pipe
  /// 如收到 message pipe packet，需要更新 message pipe local_sid 并联动更新 chat change list local_sid
  public var pipeEntities: [LarkNCExtensionPB_Improto_PipeEntity] {
    get {return _storage._pipeEntities}
    set {_uniqueStorage()._pipeEntities = newValue}
  }

  ///数据包重试等待时间，second计数
  public var waitRetryInterval: UInt32 {
    get {return _storage._waitRetryInterval ?? 0}
    set {_uniqueStorage()._waitRetryInterval = newValue}
  }
  /// Returns true if `waitRetryInterval` has been explicitly set.
//  public var hasWaitRetryInterval: Bool {return _storage._waitRetryInterval != nil}
  /// Clears the value of `waitRetryInterval`. Subsequent reads from it will return its default value.
//  public mutating func clearWaitRetryInterval() {_uniqueStorage()._waitRetryInterval = nil}

  /// cmd 的 int32 表示，SDK 处理给客户端的透传 push 包时使用
  public var command: Int32 {
    get {return _storage._command ?? 0}
    set {_uniqueStorage()._command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
//  public var hasCommand: Bool {return _storage._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
//  public mutating func clearCommand() {_uniqueStorage()._command = nil}

  /// 有序推送时，packet对应的cursor，保证递增。
  public var cursor: UInt64 {
    get {return _storage._cursor ?? 0}
    set {_uniqueStorage()._cursor = newValue}
  }
  /// Returns true if `cursor` has been explicitly set.
//  public var hasCursor: Bool {return _storage._cursor != nil}
  /// Clears the value of `cursor`. Subsequent reads from it will return its default value.
//  public mutating func clearCursor() {_uniqueStorage()._cursor = nil}

  public var unknownFields = LarkHTTP.UnknownStorage()

  public struct VersionPayload {
    // LarkHTTP.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the LarkHTTP library for
    // methods supported on all messages.

    public var versionRange: LarkNCExtensionPB_Improto_VersionRange {
      get {return _storage._versionRange ?? LarkNCExtensionPB_Improto_VersionRange()}
      set {_uniqueStorage()._versionRange = newValue}
    }
    /// Returns true if `versionRange` has been explicitly set.
//    public var hasVersionRange: Bool {return _storage._versionRange != nil}
    /// Clears the value of `versionRange`. Subsequent reads from it will return its default value.
//    public mutating func clearVersionRange() {_uniqueStorage()._versionRange = nil}

    public var payload: Data {
      get {return _storage._payload ?? LarkHTTP.Internal.emptyData}
      set {_uniqueStorage()._payload = newValue}
    }
    /// Returns true if `payload` has been explicitly set.
    public var hasPayload: Bool {return _storage._payload != nil}
    /// Clears the value of `payload`. Subsequent reads from it will return its default value.
//    public mutating func clearPayload() {_uniqueStorage()._payload = nil}

    public var unknownFields = LarkHTTP.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the LarkHTTP runtime.

fileprivate let _protobuf_package = "improto"

extension LarkNCExtensionPB_Improto_Command: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "ACK"),
    2: .same(proto: "CONNECT"),
    3: .same(proto: "DISCONNECT"),
    4: .same(proto: "PING"),
    5: .same(proto: "PUT_MESSAGE"),
    6: .same(proto: "PUSH_MESSAGES"),
    7: .same(proto: "PULL_CHAT_MESSAGES"),
    8: .same(proto: "PULL_MESSAGES_BY_IDS"),
    9: .same(proto: "DELETE_MESSAGE"),
    12: .same(proto: "PULL_MESSAGE_READ_STATE"),
    13: .same(proto: "PUT_CHAT"),
    18: .same(proto: "PUSH_CHATS"),
    21: .same(proto: "PUSH_USERS"),
    22: .same(proto: "PUT_USER"),
    23: .same(proto: "PULL_MESSAGE_REPLIES"),
    24: .same(proto: "PULL_REACTIONS"),
    25: .same(proto: "PUT_REACTION"),
    26: .same(proto: "DELETE_REACTION"),
    27: .same(proto: "PUSH_REACTIONS"),
    28: .same(proto: "PATCH_MESSAGE"),
    30: .same(proto: "SERVER_DISCONNET"),
    31: .same(proto: "PUT_IMAGE"),
    32: .same(proto: "SYNC_PACKETS"),
    33: .same(proto: "PULL_RECENT_CHATS"),
    37: .same(proto: "PULL_CONTACTS"),
    38: .same(proto: "PULL_BOTS"),
    39: .same(proto: "PULL_UPDATE_CHATTERS"),
    40: .same(proto: "PUT_READ_MESSAGES"),
    41: .same(proto: "PUSH_MESSAGE_READ_COUNT"),
    43: .same(proto: "PULL_MESSAGES_BY_POSITIONS"),
    44: .same(proto: "PULL_CHAT_CHATTERS"),
    45: .same(proto: "DELETE_CHAT_CHATTER"),
    46: .same(proto: "PULL_CHATTERS_BY_IDS"),
    47: .same(proto: "PUT_CHAT_CHATTER"),
    48: .same(proto: "PUSH_CHAT_CHATTERS"),
    49: .same(proto: "PUSH_CHAT_MUTABLE_INFO"),
    50: .same(proto: "PUT_P2P_CHATS"),
    51: .same(proto: "PUT_TRANSMIT_MESSAGE"),
    52: .same(proto: "PUT_TRANSMIT_ONE"),
    53: .same(proto: "BATCH_COPY_MESSAGES"),
    54: .same(proto: "BATCH_PUT_P2P_Chat_MESSAGES"),
    55: .same(proto: "PULL_MESSAGE_TRANSMIT_CHAIN"),
    56: .same(proto: "FILE_UPDATE_TO_OFFLINE_MODE"),
    57: .same(proto: "FILE_UPDATE_LAN_TRANS_STATUS"),
    58: .same(proto: "PULL_MESSAGE_ID_BY_POSITION"),
    59: .same(proto: "PUT_SHARE_AS_MESSAGE"),
    60: .same(proto: "PATCH_CHAT_SETTING"),
    61: .same(proto: "PUSH_CHAT_SETTING"),
    62: .same(proto: "PULL_CHAT_SETTINGS"),
    63: .same(proto: "PULL_ALL_CHAT_SETTINGS"),
    64: .same(proto: "PULL_CHATS_BY_IDS"),
    70: .same(proto: "PUSH_CHATTER_RESIGN"),
    71: .same(proto: "PULL_CHATTERS_RESIGN_STATUS"),
    72: .same(proto: "PATCH_GROUP_CHAT"),
    73: .same(proto: "PULL_MESSAGE_ME_READ_STATE"),
    74: .same(proto: "PUSH_GROUP_MESSAGE_READ_STATE"),
    75: .same(proto: "PULL_WANTED_AT_CHATTER"),
    77: .same(proto: "PROCESS_MULTI_PACKETS"),
    78: .same(proto: "DELETE_GROUP_MESSAGE"),
    79: .same(proto: "PULL_MESSAGE_READ_USERS"),
    80: .same(proto: "PULL_DEPARTMENT_STRUCTURE"),
    81: .same(proto: "PULL_FULL_DEPARTMENT_STRUCTURE"),
    82: .same(proto: "PULL_GROUP_CHATS"),
    83: .same(proto: "PULL_SUBORDINATE_DEPARTMENTS"),
    84: .same(proto: "PULL_UNFOLD_DEPARTMENT_STRUCTURE"),
    85: .same(proto: "PULL_MANAGED_DEPARTMENT"),
    86: .same(proto: "PUT_DEPARTMENT_CHAT"),
    87: .same(proto: "PULL_MESSAGE_UNREAD_USERS"),
    90: .same(proto: "PULL_THREAD"),
    91: .same(proto: "PATCH_THREAD_SETTING"),
    92: .same(proto: "PUSH_THREAD_REPLY_COUNT"),
    93: .same(proto: "PULL_THREAD_REPLIES"),
    94: .same(proto: "PULL_THREAD_REACTIONS"),
    95: .same(proto: "PUSH_CHATTERS"),
    96: .same(proto: "PULL_UNREAD_AT_MESSAGE_IDS"),
    97: .same(proto: "NO_TRACE_REMOVE_MESSAGE_BY_ID"),
    98: .same(proto: "PUSH_MESSAGE_NO_TRACE_REMOVE"),
    99: .same(proto: "PULL_UNREAD_SPECIAL_FOCUS_MESSAGE_IDS"),
    100: .same(proto: "PUT_STICKERS"),
    101: .same(proto: "DELETE_STICKERS"),
    102: .same(proto: "PATCH_STICKERS"),
    103: .same(proto: "PULL_STICKERS"),
    104: .same(proto: "PUSH_STICKERS"),
    105: .same(proto: "PATCH_CHATTER_PROFILE"),
    106: .same(proto: "PATCH_CHATTER"),
    107: .same(proto: "TRANSLATE_MESSAGES"),
    108: .same(proto: "PUT_TRANSLATE_FEEDBACKS"),
    109: .same(proto: "PULL_TRANSLATE_INFOS"),
    110: .same(proto: "PUSH_TRANSLATE_STATES_NOTICE"),
    111: .same(proto: "PULL_TRANSLATE_LANGUAGES"),
    112: .same(proto: "PATCH_TRANSLATE_LANGUAGE"),
    113: .same(proto: "PUSH_TRANSLATE_LANGUAGES_NOTICE"),
    114: .same(proto: "PATCH_LANGUAGES_CONFIGURATION"),
    115: .same(proto: "PUSH_LANGUAGES_CONFIGURATION_NOTICE"),
    116: .same(proto: "DISABLE_AUTO_TRANSLATE_LANGUAGE"),
    117: .same(proto: "PUSH_DISABLE_AUTO_TRANSLATE_LANGUAGE_NOTICE"),
    118: .same(proto: "PUSH_MESSAGE_FIRST_TRANSLATED_TO_SENDER_NOTICE"),
    119: .same(proto: "PULL_AUTO_TRANSLATE_GUIDANCE"),
    120: .same(proto: "PULL_MESSAGE_TRANSLATE_INFOS"),
    121: .same(proto: "PATCH_AUTO_TRANSLATE_GLOBAL_SWITCH"),
    122: .same(proto: "PUSH_AUTO_TRANSLATE_GLOBAL_SWITCH_NOTICE"),
    123: .same(proto: "PATCH_AUTO_TRANSLATE_CHAT_SWITCH"),
    124: .same(proto: "PUSH_AUTO_TRANSLATE_CHAT_SWITCH_NOTICE"),
    125: .same(proto: "PULL_AUTO_TRANSLATE_CHAT_SWITCH"),
    126: .same(proto: "TRANSLATE_MESSAGES_V2"),
    127: .same(proto: "PUSH_TRANSLATE_STATES_NOTICE_V2"),
    128: .same(proto: "PULL_REACTIONS_RESOURCE"),
    129: .same(proto: "PULL_USER_REACTIONS"),
    130: .same(proto: "PUSH_USER_REACTIONS"),
    131: .same(proto: "PULL_USED_REACTIONS"),
    132: .same(proto: "PUSH_USED_REACTIONS"),
    133: .same(proto: "PUSH_MESSAGE_STATIC_RESOURCE_DELETED"),
    134: .same(proto: "PUSH_BATCH_COPY_MESSAGES"),
    135: .same(proto: "CHECK_ENTITY_VERSION"),
    136: .same(proto: "PULL_EMOJI_RESOURCES"),
    137: .same(proto: "PUSH_REACTION_STATUS"),
    138: .same(proto: "PULL_RECOMMEND_STATUS_ICON_RESOURCES"),
    139: .same(proto: "UPDATE_USER_REACTION_SKIN"),
    140: .same(proto: "PUSH_USER_REACTION_SKIN"),
    141: .same(proto: "PULL_EMOJI_PANEL"),
    142: .same(proto: "PULL_EMOJI_RESOURCES_V2"),
    143: .same(proto: "PULL_EMOJI_RESOURCES_BY_EMOJI_KEYS"),
    150: .same(proto: "PATCH_AUTO_TRANSLATE_SCOPE"),
    151: .same(proto: "PUSH_AUTO_TRANSLATE_SCOPE_NOTICE"),
    152: .same(proto: "PULL_AUTO_TRANSLATE_FIRST_GUIDE_INFO"),
    153: .same(proto: "PUSH_AUTO_TRANSLATE_FIRST_GUIDE_INFO_NOTICE"),
    154: .same(proto: "PATCH_AUTO_TRANSLATE_FIRST_GUIDE_INFO"),
    155: .same(proto: "PULL_MESSAGE_LANGUAGE"),
    156: .same(proto: "TRANSLATE_WEB_XML"),
    157: .same(proto: "TRANSLATE_IMAGE_KEYS"),
    158: .same(proto: "PUSH_IMAGE_TRANSLATION_INFO"),
    159: .same(proto: "DETECT_TEXT_LANGUAGE"),
    160: .same(proto: "PATCH_WEB_TRANSLATION_CONFIG"),
    161: .same(proto: "PUSH_WEB_TRANSLATION_CONFIG"),
    162: .same(proto: "PATCH_LANGUAGE_AUTO_TRANSLATE_SCOPE"),
    163: .same(proto: "PUSH_LANGUAGE_AUTO_TRANSLATE_SCOPE"),
    164: .same(proto: "DETECT_IMAGE_LANGUAGE"),
    165: .same(proto: "PATCH_LANGUAGES_CONFIGURATION_V2"),
    166: .same(proto: "PUSH_LANGUAGES_CONFIGURATION_NOTICE_V2"),
    167: .same(proto: "PATCH_WEB_NOT_TRANSLATE_LANGUAGES"),
    168: .same(proto: "PUSH_WEB_NOT_TRANSLATE_LANGUAGES_NOTICE"),
    169: .same(proto: "PULL_WEB_NOT_TRANSLATE_LANGUAGES"),
    170: .same(proto: "DELETE_WEB_NOT_TRANSLATE_LANGUAGES"),
    172: .same(proto: "STREAMING_TRANSLATE_MESSAGE"),
    200: .same(proto: "PONG"),
    201: .same(proto: "PULL_APP_CONFIG"),
    202: .same(proto: "PUSH_APP_CONFIG"),
    203: .same(proto: "PUSH_SETTINGS_NOTIFICATION"),
    210: .same(proto: "PULL_APP_CONFIG_V2"),
    211: .same(proto: "PULL_STATIC_APP_CONFIG_V2"),
    251: .same(proto: "PULL_SECURITY_CONFIG"),
    252: .same(proto: "PUSH_SECURITY_CONFIG"),
    253: .same(proto: "PULL_CHAT_POST_USER"),
    254: .same(proto: "PATCH_CHAT_POST_USER"),
    255: .same(proto: "PULL_ALLOW_POST_CHAT"),
    256: .same(proto: "CHECK_PUBLIC_CHAT_NAME_EXIST"),
    257: .same(proto: "PUT_ADD_CHAT_CHATTER_APPLY"),
    258: .same(proto: "PULL_ADD_CHAT_CHATTER_APPLY"),
    259: .same(proto: "PATCH_ADD_CHAT_CHATTER_APPLY"),
    270: .same(proto: "DISABLE_CHAT_SHARED"),
    271: .same(proto: "CHECK_CHATTERS_IN_CHAT"),
    280: .same(proto: "PUT_CHAT_ANN_READ_TIME"),
    281: .same(proto: "PULL_CHATS_ANN_READ_TIME"),
    282: .same(proto: "PUSH_CHAT_ANN_READ_TIME"),
    290: .same(proto: "PUSH_MULTI_THREAD_REPLY_COUNT"),
    291: .same(proto: "PUSH_MULTI_CHAT_MUTABLE_INFO"),
    293: .same(proto: "PUSH_MULTI_GROUP_MESSAGE_READ_STATE"),
    300: .same(proto: "PULL_TENANTS_BY_IDS"),
    401: .same(proto: "PUSH_CHAT_CHATTER_TAG"),
    402: .same(proto: "PULL_CHAT_CHATTER_KICK_INFO"),
    403: .same(proto: "CHECK_WITHDRAW_PICK_ENTITIES_IN_CHAT"),
    404: .same(proto: "PULL_CHAT_MEMBER_SETTING"),
    405: .same(proto: "PULL_CHANGE_GROUP_MEMBER_AUTHORIZATION"),
    500: .same(proto: "PUT_FAVORITE"),
    501: .same(proto: "PULL_FAVORITES"),
    502: .same(proto: "REMOVE_FAVORITE"),
    503: .same(proto: "PULL_ALL_FAVORITE"),
    504: .same(proto: "PUT_MERGE_MESSAGE_FAVORITE"),
    600: .same(proto: "PULL_NEW_VERSION"),
    601: .same(proto: "PULL_VERSION_NOTE"),
    602: .same(proto: "PATCH_DOWNLOAD_STATUS"),
    700: .same(proto: "PUT_HOME_SCHOOL_CHAT"),
    701: .same(proto: "GET_HOME_SCHOOL_CHAT_CLASS"),
    702: .same(proto: "PULL_MANAGED_NODES"),
    703: .same(proto: "PULL_SCHOOL_NODE"),
    704: .same(proto: "EDU_JOIN_CHAT_PRE_CHECK"),
    705: .same(proto: "EDU_JOIN_CHAT"),
    801: .same(proto: "PULL_COLLABORATION_STRUCTURE"),
    802: .same(proto: "PULL_COLLABORATION_TENANT"),
    803: .same(proto: "AUTH_USER_COLLABORATION_VISIBLE"),
    804: .same(proto: "PULL_COLLABORATION_INVITE_QRCODE"),
    1000: .same(proto: "PULL_FEED_CARDS"),
    1001: .same(proto: "PATCH_FEED_CARDS"),
    1002: .same(proto: "PUSH_FEED_CARDS"),
    1003: .same(proto: "PULL_FEED_CARDS_FEED_TYPES"),
    1004: .same(proto: "PEAK_FEED_CARD"),
    1005: .same(proto: "PUT_FEED_CARD_DELAYED"),
    1006: .same(proto: "PUT_FEED_CARDS_INTO_BOX"),
    1007: .same(proto: "DELETE_FEED_CARDS_FROM_BOX"),
    1008: .same(proto: "PULL_FEED_CARDS_DELAYED"),
    1009: .same(proto: "PULL_FEED_CARDS_BY_IDS"),
    1010: .same(proto: "PULL_NEW_BOX_FEED_CARDS"),
    1011: .same(proto: "CLEAN_NEW_BOX_FEED_CARDS"),
    1012: .same(proto: "PUSH_CLEAN_NEW_BOX_FEED_CARDS"),
    1014: .same(proto: "PUT_USER_COLD_BOOT"),
    1015: .same(proto: "PULL_MUTE_POPUP_INFO"),
    1016: .same(proto: "PUT_SHOW_MUTE_POPUP"),
    1017: .same(proto: "PUT_BATCH_MUTE_FEED_CARDS"),
    1018: .same(proto: "CREATE_FEED_GROUP"),
    1019: .same(proto: "PULL_KEYWORDS_FEED_CARDS"),
    1020: .same(proto: "PULL_FEED_GROUPS"),
    1021: .same(proto: "PULL_ITEM_CHANGED_GROUPS"),
    1022: .same(proto: "PULL_FEED_GROUP_ITEMS"),
    1023: .same(proto: "UPDATE_FEED_GROUPS"),
    1024: .same(proto: "PUSH_FEED_GROUPS"),
    1025: .same(proto: "CONFIRM_DELETE_FEED_CARDS"),
    1026: .same(proto: "PUSH_DELETED_FEED_CARDS"),
    1027: .same(proto: "UPDATE_FLAGS"),
    1028: .same(proto: "PULL_FLAGS"),
    1029: .same(proto: "PUSH_FLAGS"),
    1100: .same(proto: "PUT_SHORTCUTS"),
    1101: .same(proto: "DELETE_SHORTCUTS"),
    1102: .same(proto: "PATCH_SHORTCUTS"),
    1103: .same(proto: "PULL_SHORTCUTS"),
    1104: .same(proto: "PUSH_SHORTCUTS"),
    1200: .same(proto: "REMOVE_MESSAGES_FROM_USER"),
    1201: .same(proto: "PUT_MERGE_FORWARD_MESSAGE"),
    1202: .same(proto: "PULL_SYSTEM_MESSAGE_TEMPLATE"),
    1203: .same(proto: "PUSH_BADGE_TO_RELATED_USERS"),
    1204: .same(proto: "PULL_RELATED_USERS_BADGE"),
    1205: .same(proto: "PUT_DIAGNOSE_MESSAGE"),
    1206: .same(proto: "DIAGNOSE_MESSAGE_CONFIG"),
    1207: .same(proto: "SEND_DIAGNOSTIC_EVENT"),
    1301: .same(proto: "DELETE_MESSAGE_URL_PREVIEW"),
    1302: .same(proto: "HIDE_AUDIO_RECOGNITION_RESULT"),
    1303: .same(proto: "PUSH_AUDIO_RECOGNITION_RESULT"),
    1304: .same(proto: "PUT_URL_PREVIEW"),
    1305: .same(proto: "PUT_SPEECH_RECOGNITION"),
    1306: .same(proto: "PUT_AUDIO_MESSAGE_RECOGNITION"),
    1307: .same(proto: "PUSH_AUDIO_MESSAGE_RECOGNITION_RESULT"),
    1310: .same(proto: "PULL_MESSAGE_PREVIEWS"),
    1311: .same(proto: "PUSH_MESSAGE_PREVIEWS"),
    1312: .same(proto: "PULL_URL_PREVIEW_CHATTERS"),
    1313: .same(proto: "GRANT_MINUTES"),
    1314: .same(proto: "PULL_URL_PREVIEW_CHATTERS_LIST"),
    1315: .same(proto: "GENERATE_URL_PREVIEW_ENTITY"),
    1316: .same(proto: "GET_URL_PREVIEW"),
    1317: .same(proto: "URL_PREVIEW_ACTION_CALLBACK"),
    1318: .same(proto: "PUSH_URL_PREVIEW"),
    1319: .same(proto: "PUSH_URL_PREVIEW_ENTRIES"),
    1320: .same(proto: "PULL_URL_PREVIEW_TEMPLATES"),
    1350: .same(proto: "PULL_VIDEO_INFO"),
    1600: .same(proto: "PUT_TOPIC_GROUP"),
    1601: .same(proto: "REGISTER_TOPIC_GROUP_FAVORITE"),
    1602: .same(proto: "CANCEL_TOPIC_GROUP_FAVORITE"),
    1603: .same(proto: "PUSH_TOPIC_GROUP_FEED_CARDS"),
    1604: .same(proto: "PUT_TOPIC_GROUP_MEMBER"),
    2000: .same(proto: "PULL_APPLIST"),
    2001: .same(proto: "PUT_RECENTAPP"),
    2002: .same(proto: "PULL_TENANT_APPCENTER"),
    2003: .same(proto: "SEARCH_APPCENTER"),
    2070: .same(proto: "CARD_JSON_TO_PB"),
    2071: .same(proto: "SEND_PREVIEW_CARD"),
    2072: .same(proto: "GADGET_DEV_TOOL_PUSH"),
    2080: .same(proto: "PUSH_EPHEMERAL_MESSAGE"),
    2081: .same(proto: "PULL_EPHEMERAL_MESSAGE"),
    2082: .same(proto: "PUSH_EPHEMERAL_MESSAGE_UPDATE"),
    2083: .same(proto: "PUSH_EPHEMERAL_MESSAGE_DELETE"),
    2098: .same(proto: "APP_SHARE_V2"),
    2099: .same(proto: "APP_SHARE"),
    2100: .same(proto: "PUT_E2EE_VOICE_CALL"),
    2101: .same(proto: "PATCH_E2EE_VOICE_CALL"),
    2102: .same(proto: "PUSH_E2EE_VOICE_CALL_NOTICE"),
    2103: .same(proto: "PULL_E2EE_VOICE_CALLS"),
    2104: .same(proto: "PUT_E2EE_VOICE_DEVICE_TOKEN"),
    2105: .same(proto: "PUT_E2EE_VOICE_FEEDBACKS"),
    2106: .same(proto: "PULL_E2EE_VOICE_CALL_BY_CALL_IDS"),
    2200: .same(proto: "PUT_VIDEO_CONF"),
    2201: .same(proto: "PATCH_VIDEO_CONF"),
    2202: .same(proto: "PUSH_VIDEO_CONF_NOTICE"),
    2203: .same(proto: "PULL_VIDEO_CONFS"),
    2204: .same(proto: "REGISTER_CLIENT_INFO"),
    2205: .same(proto: "CREATE_VIDEO_CHAT"),
    2206: .same(proto: "JOIN_VIDEO_CHAT"),
    2207: .same(proto: "UPDATE_VIDEO_CHAT"),
    2208: .same(proto: "INVITE_VIDEO_CHAT"),
    2209: .same(proto: "SHARE_VIDEO_CHAT"),
    2210: .same(proto: "NOTIFY_VIDEO_CHAT"),
    2211: .same(proto: "SEARCH_VC_CHATTERS"),
    2212: .same(proto: "GET_CHATTERS_VC_STATUS"),
    2213: .same(proto: "PULL_VIDEO_CHAT_CONFIG"),
    2214: .same(proto: "PUSH_VIDEO_CHAT_CONFIG"),
    2215: .same(proto: "PUSH_VIDEO_CHAT_NOTICE"),
    2216: .same(proto: "REPLY_VIDEO_CHAT_NOTICE"),
    2217: .same(proto: "JOIN_CALENDAR_GROUP_MEETING"),
    2218: .same(proto: "PUT_FEEDBACKS"),
    2219: .same(proto: "PULL_VIDEOCHAT_BY_SHARE_CODE"),
    2300: .same(proto: "PUT_BYTEVIEW_HEARTBEAT"),
    2306: .same(proto: "NOTIFY_VIDEO_CHAT_EXTRA"),
    2307: .same(proto: "NOTIFY_STANDALONE_VC_APPLICATION"),
    2308: .same(proto: "HOST_MANAGE"),
    2309: .same(proto: "HOST_CHANGE_SETTINGS"),
    2310: .same(proto: "PARTICIPANT_CHANGE_SETTINGS"),
    2311: .same(proto: "SHARE_SCREEN"),
    2312: .same(proto: "PULL_VIDEO_CHAT_IN_MEETING_INFO"),
    2314: .same(proto: "PREVIEW_JOIN_VIDEO_CHAT"),
    2315: .same(proto: "FORCE_LEAVE_VIDEO_CHAT"),
    2316: .same(proto: "QUERY_SELF_STATUS"),
    2317: .same(proto: "PUT_VIDEO_CHAT_FEEDBACKS"),
    2318: .same(proto: "PULL_E2EE_VOICE_CALL_CONFIG"),
    2321: .same(proto: "REJOIN_VIDEO_CHAT"),
    2323: .same(proto: "JOIN_BY_MEETING_NUMBER"),
    2324: .same(proto: "SHARE_SCREEN_TO_ROOM"),
    2325: .same(proto: "PULL_PRE_VIDEO_CHAT_SETTING"),
    2327: .same(proto: "INVITE_CALENDAR_MEETING"),
    2328: .same(proto: "GET_CALENDAR_INFO"),
    2329: .same(proto: "GET_CALENDAR_GROUP"),
    2330: .same(proto: "SHARE_FOLLOW"),
    2331: .same(proto: "SYNC_FOLLOW_ACTION"),
    2332: .same(proto: "QUERY_MEETING_JOINABLE"),
    2333: .same(proto: "JOIN_MEETING"),
    2334: .same(proto: "PUSH_ASSOCIATED_VC_STATUS"),
    2335: .same(proto: "GET_ASSOCIATED_VC"),
    2336: .same(proto: "PULL_DIAL_TEST_SUITE"),
    2337: .same(proto: "REPORT_DIAL_TEST_STATUS"),
    2338: .same(proto: "NOTIFY_DIAL_TEST_ACTION"),
    2339: .same(proto: "PULL_SUBTITLES"),
    2340: .same(proto: "GET_SHARE_CODE_INFO"),
    2341: .same(proto: "GET_ASSOCIATED_VC_STATUS"),
    2342: .same(proto: "JOIN_INTERVIEW_GROUP_MEETING"),
    2343: .same(proto: "RECORD_MEETING"),
    2344: .same(proto: "GET_CHATTERS_WITH_CI_ORDER"),
    2345: .same(proto: "SEARCH_VIEW_PARTICIPANTS"),
    2346: .same(proto: "REQUEST_FOLLOW_TOKEN"),
    2347: .same(proto: "GRANT_FOLLOW_TOKEN"),
    2348: .same(proto: "REQUEST_FOLLOW_PERM"),
    2349: .same(proto: "VC_QUERY_DOCS"),
    2350: .same(proto: "PUSH_VIDEO_CHAT_NOTICE_UPDATE"),
    2351: .same(proto: "JOIN_MEETING_PRE_CHECK"),
    2352: .same(proto: "SEND_VIDEO_CHAT_INTERACTION_MESSAGE"),
    2353: .same(proto: "PULL_VIDEO_CHAT_INTERACTION_MESSAGE"),
    2354: .same(proto: "PUSH_VIDEO_CHAT_INTERACTION_MESSAGES"),
    2360: .same(proto: "PUBLISH_MEDIA_STREAM"),
    2370: .same(proto: "SEND_UPGRADE_PLAN_NOTICE"),
    2371: .same(proto: "PUSH_VIDEO_CHAT_PROMPT"),
    2372: .same(proto: "REPLY_VIDEO_CHAT_PROMPT"),
    2373: .same(proto: "ADJUEST_MEETING_DURATION"),
    2374: .same(proto: "PULL_VIEW_USER_SETTING"),
    2375: .same(proto: "PATCH_VIEW_USER_SETTING"),
    2376: .same(proto: "PUSH_VIEW_USER_SETTING"),
    2377: .same(proto: "SUBMIT_GENERIC_FEEDBACK"),
    2378: .same(proto: "GET_RESERVATION"),
    2380: .same(proto: "LIVE_MEETING_ACTION"),
    2381: .same(proto: "LIVE_MEETING_EXTRA_INFO"),
    2382: .same(proto: "LIVE_MEETING_JOIN_PRE_CHECK"),
    2383: .same(proto: "LIVE_MEETING_ACCOUNT_BINDING_INFO"),
    2384: .same(proto: "LIVE_MEETING_STREAM_SETTING"),
    2385: .same(proto: "LIVE_MEETING_FETCH_LIVE_POLICY"),
    2386: .same(proto: "LIVE_MEETING_GET_VERIFICATION_QR_CODE"),
    2387: .same(proto: "LIVE_MEETING_POLL_VERIFICATION_STATUS"),
    2388: .same(proto: "LIVE_MEETING_GET_VERIFICATION_INFO"),
    2389: .same(proto: "LIVE_MEETING_VERIFY_TWO_ELEMENT"),
    2390: .same(proto: "LIVE_MEETING_LIVENESS_VERIFICATION_CALLBACK"),
    2391: .same(proto: "LIVE_MEETING_GET_LIVE_PERMISSION"),
    2392: .same(proto: "LIVE_MEETING_GET_VERIFICATION_TICKET"),
    2393: .same(proto: "LIVE_MEETING_PULL_SETTING"),
    2500: .same(proto: "PULL_ACCOUNT_BADGES"),
    2501: .same(proto: "PUSH_ACCOUNT_BADGES"),
    2502: .same(proto: "CLEAR_ACCOUNT_BADGE"),
    3000: .same(proto: "PUT_EMAIL"),
    3001: .same(proto: "PULL_EMAIL_MEMBERS"),
    3002: .same(proto: "PATCH_EMAIL_MEMBERS"),
    3003: .same(proto: "PUSH_EMAIL_MEMBERS"),
    3004: .same(proto: "PULL_EMAILS_BY_IDS"),
    3005: .same(proto: "PATCH_EMAIL"),
    3006: .same(proto: "PUSH_EMAIL"),
    3007: .same(proto: "PULL_EMAIL_CHATTERS"),
    3008: .same(proto: "PULL_EMAIL_ROLE"),
    3009: .same(proto: "PULL_EMAIL_WANTED_AT_CHATTERS"),
    3010: .same(proto: "MAIL_GET_SEND_EXTERNAL_LIMIT"),
    3011: .same(proto: "MAIL_GET_EML_BY_INSTANCE_CODE"),
    3100: .same(proto: "PULL_STICKER_SETS_STORE"),
    3101: .same(proto: "PULL_STICKER_SETS"),
    3102: .same(proto: "PULL_STICKER_SETS_BY_ID"),
    3103: .same(proto: "PUT_STICKER_SETS"),
    3104: .same(proto: "PATCH_STICKER_SETS"),
    3105: .same(proto: "DELETE_STICKER_SETS"),
    3106: .same(proto: "PUSH_STICKER_SETS"),
    3107: .same(proto: "PULL_STICKER_SET_CARD"),
    3108: .same(proto: "PULL_STICKER_SETS_TAB"),
    3500: .same(proto: "CREATE_MAIL"),
    3501: .same(proto: "UPDATE_MAIL_DRAFT"),
    3502: .same(proto: "GET_MAIL_INBOX"),
    3503: .same(proto: "GET_THREADS_BY_ID"),
    3504: .same(proto: "PUSH_THREAD_FOR_NEW_MAIL"),
    3505: .same(proto: "UPDATE_MAIL_STATUS"),
    3506: .same(proto: "CLONE_DRIVE_FILE"),
    3507: .same(proto: "MAIL_ADD_CHANGE"),
    3508: .same(proto: "GET_FILTERED_THREADS"),
    3509: .same(proto: "GET_THREADS_BY_ID_WITH_META"),
    3510: .same(proto: "CREATE_OUTGOING_MAIL"),
    3511: .same(proto: "MAIL_APPLY_RULE"),
    3512: .same(proto: "MAIL_GET_MESSAGES_BY_THREAD_IDS_FOR_SEARCH"),
    3513: .same(proto: "MAIL_NEW_MESSAGES_REQUEST"),
    3514: .same(proto: "MARK_ALL_AS_READ_REQUEST"),
    3515: .same(proto: "MAIL_GET_RAW_MESSAGES"),
    3600: .same(proto: "MAIL_INIT_SYNC"),
    3601: .same(proto: "GET_MAIL_THREAD_META"),
    3602: .same(proto: "GET_MAIL_MESSAGES"),
    3603: .same(proto: "MAIL_PUSH_CHANGE"),
    3604: .same(proto: "GET_MAIL_THREAD_META_V2"),
    3605: .same(proto: "GET_LABEL_LIST_BY_USER"),
    3606: .same(proto: "GET_MAIL_MESSAGE_META"),
    3607: .same(proto: "GET_MAIL_MESSAGE_META_WITH_FOLDER_DISABLE"),
    3608: .same(proto: "GET_MAIL_MESSAGE_GROUPS"),
    3650: .same(proto: "MAIL_AT_CONTACT"),
    3651: .same(proto: "MAIL_SIMPLE_SEARCH_REQUEST"),
    3652: .same(proto: "MAIL_SIMPLE_SEARCH_RESPONSE"),
    3653: .same(proto: "MAIL_GET_SEARCH_HISTORY_REQUEST"),
    3654: .same(proto: "MAIL_STORE_SEARCH_HISTORY_KEYWORD"),
    3655: .same(proto: "MAIL_DELETE_SEARCH_HISTORY"),
    3656: .same(proto: "MAIL_RULE_PREVIEW_SEARCH_REQUEST"),
    3657: .same(proto: "MAIL_CONTACT_SEARCH"),
    3658: .same(proto: "MAIL_ADVANCED_SEARCH"),
    3659: .same(proto: "MAIL_CHANGE_ASYNC_RESULT"),
    3660: .same(proto: "GET_UNREAD_MAIL_THREAD_META"),
    3661: .same(proto: "GET_MAIL_THREAD_TIMESTAMP"),
    3662: .same(proto: "MAIL_GET_THREAD_META_BY_THREAD_IDS"),
    3663: .same(proto: "MAIL_GET_THREAD_FULL_BY_THREAD_IDS"),
    3664: .same(proto: "MAIL_GET_MAIL_MESSAGE_FULL_BY_MESSAGE_IDS"),
    3665: .same(proto: "MAIL_GET_MAIL_MESSAGE_BODY_BY_MESSAGE_IDS"),
    3666: .same(proto: "MAIL_GET_MAIL_MESSAGE_SUMMARY_BY_MESSAGE_IDS"),
    3667: .same(proto: "MAIL_GET_SYNC_STATUS"),
    3668: .same(proto: "MAIL_GET_MESSAGE_META_BY_MESSAGE_IDS"),
    3669: .same(proto: "MAIL_DELETE_MAIL_EXTERNAL_CONTACT"),
    3700: .same(proto: "GET_MAIL_SETTINGS"),
    3701: .same(proto: "UPDATE_MAIL_SETTINGS"),
    3702: .same(proto: "PUSH_MAIL_SETTINGS"),
    3703: .same(proto: "MAIL_CHANGE_OAUTH_STATUS"),
    3704: .same(proto: "PUSH_MAIL_OAUTH_STATUS"),
    3705: .same(proto: "MAIL_UPDATE_CLIENT_TAB_SETTING"),
    3706: .same(proto: "MAIL_GET_GOOGLE_AUTH_URL"),
    3707: .same(proto: "MAIL_GET_CAN_SHARE_TO_EXTERNAL"),
    3708: .same(proto: "MAIL_UNBIND_GMAIL_ACCOUNT"),
    3709: .same(proto: "MAIL_GET_TENANT_DOMAINS"),
    3710: .same(proto: "PUSH_MAIL_UNREAD_COUNT"),
    3711: .same(proto: "PULL_MAIL_CARD"),
    3712: .same(proto: "GET_MAIL_CARD"),
    3713: .same(proto: "SEND_MAIL_CARD"),
    3714: .same(proto: "ADD_MAIL_CHANGE_LOG"),
    3715: .same(proto: "DELETE_LARGE_FILE"),
    3716: .same(proto: "MAIL_GET_LABEL_THREADS_COUNT"),
    3717: .same(proto: "MAIL_GET_LONG_RUNNING_TASK"),
    3718: .same(proto: "MAIL_CANCEL_LONG_RUNNING_TASK"),
    3719: .same(proto: "MAIL_PUSH_CLIENT_FOR_THIRD_SERVICE_PERMISSION_CONFIG"),
    3720: .same(proto: "MAIL_GET_CONFIG"),
    3721: .same(proto: "MAIL_GET_USER_ENGAGEMENT_SETTINGS"),
    3722: .same(proto: "MAIL_UPDATE_USER_ENGAGEMENT_SETTINGS"),
    3723: .same(proto: "MAIL_SYNC_ALIAS"),
    3750: .same(proto: "MAIL_CREATE_RULE_REQUEST"),
    3751: .same(proto: "MAIL_UPDATE_RULE_REQUEST"),
    3752: .same(proto: "MAIL_DELETE_RULE_REQUEST"),
    3753: .same(proto: "MAIL_GET_RULES_REQUEST"),
    3754: .same(proto: "MAIL_RULE_CONTROL_REQUEST"),
    3755: .same(proto: "MAIL_ADJUST_RULE_ORDER_REQUEST"),
    3756: .same(proto: "MAIL_SEND_AUTO_TRANSFER_AUTH_MAIL"),
    3757: .same(proto: "MAIL_GET_AUTO_TRANSFER_EMAIL"),
    3778: .same(proto: "PUSH_MAIL_RELATED_BIZ_ID"),
    3779: .same(proto: "MAIL_SHARE_MAIL_ATTACHMENT_REQUEST"),
    3780: .same(proto: "MAIL_SHARE_CREATE_PERM_REQUEST"),
    3781: .same(proto: "MAIL_SHARE_UPDATE_PERM_REQUEST"),
    3782: .same(proto: "MAIL_SHARE_DELETE_PERM_REQUEST"),
    3783: .same(proto: "MAIL_SHARE_GET_THREAD_COLLABORATORS_INFO_REQUEST"),
    3784: .same(proto: "MAIL_SHARE_GET_MESSAGE_FULL_REQUEST"),
    3785: .same(proto: "MAIL_SHARE_GET_SHARE_GROUPS_REQUEST"),
    3786: .same(proto: "MAIL_SHARE_CREATE_DOC_REQUEST"),
    3787: .same(proto: "MAIL_SHARE_GET_SHARE_GROUP_INFO_REQUEST"),
    3788: .same(proto: "MAIL_SHARE_CREATE_SHARE_DRAFT_REQUEST"),
    3789: .same(proto: "MAIL_SHARE_UPDATE_DRAFT_REQUEST"),
    3790: .same(proto: "MAIL_SHARE_GET_MAIL_SETTINGS"),
    3791: .same(proto: "MAIL_GET_MESSAGE_SUMMARY_REQUEST"),
    3792: .same(proto: "MAIL_GET_MESSAGE_BODY_REQUEST"),
    3793: .same(proto: "MAIL_SHARE_SEARCH_MEMBER_REQUEST"),
    3794: .same(proto: "MAIL_SHARE_UPDATE_COLLABORATORS_ROLE_REQUEST"),
    3795: .same(proto: "MAIL_SHARE_CREATE_GROUP_REQUEST"),
    3796: .same(proto: "MAIL_GET_MIGRATION_STATUS"),
    3801: .same(proto: "MAIL_GET_GROUP_SETTING"),
    3802: .same(proto: "MAIL_SET_GROUP_SETTING"),
    3803: .same(proto: "MAIL_PUSH_GROUP_SETTING"),
    3804: .same(proto: "MAIL_DELETE_GROUP_SETTING"),
    3805: .same(proto: "MAIL_GET_CONFIG_REQUEST"),
    3806: .same(proto: "MAIL_GET_MANAGED_GROUPS"),
    3807: .same(proto: "MAIL_GET_GROUP_DETAIL"),
    3808: .same(proto: "MAIL_UPDATE_GROUP"),
    3809: .same(proto: "MAIL_LIST_GROUP_MEMBERS"),
    3810: .same(proto: "MAIL_LIST_SHARED_EMAIL_ACCOUNTS"),
    3811: .same(proto: "MAIL_RECALL_STATUS"),
    3812: .same(proto: "MAIL_RECALL_DETAIL"),
    3820: .same(proto: "PUSH_MAIL_IMAP_MIGRATION_STATUS"),
    3821: .same(proto: "MAIL_IMAP_MIGRATION_GET_STATUS"),
    3822: .same(proto: "MAIL_IMAP_MIGRATION_UPDATE_TOKEN"),
    3823: .same(proto: "MAIL_IMAP_MIGRATION_UPDATE_UIDS"),
    3824: .same(proto: "MAIL_IMAP_MIGRATION_GET_OLD_MESSAGE_TASK"),
    3825: .same(proto: "MAIL_IMAP_MIGRATION_UPLOAD_OLD_MESSAGE"),
    3826: .same(proto: "MAIL_IMAP_MIGRATION_UPLOAD_NEW_MESSAGE"),
    3827: .same(proto: "MAIL_IMAP_MIGRATION_QUERY_PROGRESS"),
    3828: .same(proto: "MAIL_IMAP_MIGRATION_DECODE_MESSAGE"),
    3829: .same(proto: "MAIL_IMAP_MIGRATION_GET_MAILBOX_INFOS"),
    3830: .same(proto: "MAIL_IMAP_MIGRATION_BLOCKED"),
    3831: .same(proto: "PUSH_MAIL_IMAP_MIGRATION_OLDEST_INFO"),
    3832: .same(proto: "MAIL_IMAP_MIGRATION_GET_HISTORY_DONE_INFO"),
    3833: .same(proto: "MAIL_IMAP_MIGRATION_GET_ALL_ACCOUNT_STATUS"),
    3834: .same(proto: "MAIL_IMAP_MIGRATION_VERIFY_TOKEN"),
    3840: .same(proto: "MAIL_TRANSLATION"),
    3843: .same(proto: "MAIL_UNSUBSCRIBE"),
    3845: .same(proto: "MAIL_GET_SMART_REPLY"),
    3846: .same(proto: "MAIL_GET_IS_SMART_INBOX_TARGET_USER"),
    3847: .same(proto: "MAIL_GET_AUTHORIZATION_CODES"),
    3848: .same(proto: "MAIL_CREATE_AUTHORIZATION_CODE"),
    3849: .same(proto: "MAIL_DELETE_AUTHORIZATION_CODE"),
    3850: .same(proto: "MAIL_GET_EXCHANGE_AUTH_URL"),
    3851: .same(proto: "MAIL_GET_THIRD_PARTY_CLIENT_SETTING"),
    3852: .same(proto: "PUSH_MAIL_SETTING_CHANGE"),
    3853: .same(proto: "MAIL_GET_MESSAGE_SEND_STATUS"),
    3854: .same(proto: "MAIL_PULL_ENTERPRISE_EMAIL"),
    3855: .same(proto: "MAIL_MULTI_COPY_FILE"),
    3856: .same(proto: "GET_SHARED_MAIL_SETTINGS"),
    3857: .same(proto: "UPDATE_SHARED_MAIL_SETTINGS"),
    3858: .same(proto: "PUSH_SHARED_MAIL_SETTING_CHANGE"),
    3859: .same(proto: "MAIL_GET_CLEAR_INFO_CHANGE_LIST"),
    3860: .same(proto: "MAIL_CHECK_GROUP_MEMBER_EXISTENCE"),
    3861: .same(proto: "MAIL_CHECK_GROUP_MEMBER_INFO"),
    3862: .same(proto: "MAIL_CHECK_USER_GROUP_PERMISSION"),
    3870: .same(proto: "MAIL_CREATE_MAIL_USER_SIGNATURE"),
    3871: .same(proto: "MAIL_UPDATE_MAIL_USER_SIGNATURE"),
    3872: .same(proto: "MAIL_APPLY_MAIL_SIGNATURE"),
    3873: .same(proto: "MAIL_DELETE_MAIL_USER_SIGNATURE"),
    3874: .same(proto: "MAIL_QUERY_MAIL_SIGNATURE"),
    3875: .same(proto: "MAIL_GET_USER_FIELD"),
    3876: .same(proto: "MAIL_CHECK_IMAGE_TOKENS_PERMISSION"),
    3877: .same(proto: "MAIL_GET_MAIL_CONTACT_TYPE_BY_EMAIL_ADDRESS"),
    4000: .same(proto: "PUT_CRYPTO_MESSAGE"),
    4001: .same(proto: "ACK_CRYPTO_MESSAGES"),
    4002: .same(proto: "PULL_CRYPTO_MESSAGE_DETAIL_BY_IDS"),
    4003: .same(proto: "PUT_SYSTEM_MESSAGE_FOR_SCREENSHOTS"),
    4101: .same(proto: "PUT_CRYPTO_P2P_CHAT"),
    4102: .same(proto: "PUT_CRYPTO_GROUP_CHAT"),
    4103: .same(proto: "PUT_CRYPTO_CHAT_CHATTER"),
    4104: .same(proto: "DELETE_CRYPTO_CHAT_CHATTER"),
    4105: .same(proto: "DISBAND_CRYPTO_CHAT"),
    4106: .same(proto: "PUSH_NEW_DEVICE_ONLINE"),
    4107: .same(proto: "PUT_CRYPTO_BURNED_TIME"),
    4108: .same(proto: "PUT_CRYPTO_MESSAGE_MAIN"),
    4109: .same(proto: "PUT_CRYPTO_MESSAGE_MISSING_CONTENT"),
    4111: .same(proto: "PUT_USER_DEVICE_IPK"),
    4112: .same(proto: "PUSH_USER_DEVICE_IPK_CHANGE"),
    4113: .same(proto: "PUT_SECRET_MESSAGE"),
    4114: .same(proto: "GET_USERS_IPKS_BY_CHAT"),
    4115: .same(proto: "PUSH_CHAT_DEVICE_IPK_CHANGE"),
    4200: .same(proto: "PULL_EMERGENCY_CALL_NUMBER"),
    4201: .same(proto: "PUT_EMERGENCY_CALL_REASON"),
    4301: .same(proto: "PULL_ABBREVIATIONS_BY_IDS"),
    4302: .same(proto: "PUT_ABBREVIATION_FEEDBACKS"),
    4303: .same(proto: "GET_ABBREVIATION_CARD"),
    4304: .same(proto: "REFRESH_MESSAGE_BAIKE_REFS"),
    4305: .same(proto: "GET_FEEDBACK"),
    5000: .same(proto: "PUT_CHATTER_VIA_SHARE"),
    5001: .same(proto: "PULL_CHATS_ROLE"),
    5002: .same(proto: "PULL_CHAT_APPLICATIONS"),
    5003: .same(proto: "PUSH_CHAT_APPLICATION"),
    5004: .same(proto: "PROCESS_CHAT_APPLICATIONS"),
    5005: .same(proto: "RESET_CONTACT_TOKEN"),
    5006: .same(proto: "PUT_CONTACT_APPLICATION"),
    5007: .same(proto: "READ_APPLICATIONS"),
    5008: .same(proto: "PULL_PERSONAL_CONTACTS"),
    5009: .same(proto: "PUSH_CONTACTS"),
    5010: .same(proto: "PULL_UNREAD_CHAT_APPLICATIONS_BADGE"),
    5011: .same(proto: "DELETE_CONTACT"),
    5012: .same(proto: "PULL_CONTACT_TOKEN"),
    5013: .same(proto: "PUSH_CONTACT_TOKEN"),
    5014: .same(proto: "PUT_CONTACT_SETTING"),
    5015: .same(proto: "PUSH_CONTACT_SETTING"),
    5016: .same(proto: "PULL_CONTACT_SETTING"),
    5017: .same(proto: "PULL_USER_PROFILE"),
    5018: .same(proto: "PUT_USER_INVITATION"),
    5019: .same(proto: "SEARCH_USER_BY_CONTACT_POINT"),
    5020: .same(proto: "PULL_CHAT_QRCODE_TOKEN"),
    5021: .same(proto: "PULL_CHAT_QRCODE_INFO"),
    5022: .same(proto: "PUT_CHATTER_VIA_QRCODE"),
    5023: .same(proto: "PULL_CHAT_CHATTER_BY_IDS"),
    5024: .same(proto: "PULL_CHAT_SECURITY_CONFIG"),
    5025: .same(proto: "PULL_CHAT_NO_TRACE_REMOVED_POSITIONS"),
    5026: .same(proto: "PULL_USER_PROFILES"),
    5027: .same(proto: "PULL_CHAT_NON_DEPARTMENTAL_CHATTERS"),
    5028: .same(proto: "PULL_CHAT_SIDEBAR_BUTTONS"),
    5029: .same(proto: "PULL_CHAT_JOIN_LEAVE_HISTORY"),
    5030: .same(proto: "CHECK_P2P_CHATS_EXIST_BY_USER"),
    5031: .same(proto: "PULL_USER_PROFILE_V2"),
    5032: .same(proto: "BATCH_PULL_USER_PROFILE_V2"),
    5033: .same(proto: "PULL_CONTACT_TOKENS_FOR_SHARING"),
    5034: .same(proto: "CHECK_CONTACT_IS_LINKED_TO_USER"),
    5035: .same(proto: "PATCH_SELF_USER_PROFILE"),
    5036: .same(proto: "PATCH_USER_MEMO"),
    5037: .same(proto: "PULL_USER_PROFILE_SECTION_TAB"),
    5038: .same(proto: "RESET_USER_AVATAR"),
    5039: .same(proto: "PUT_RESET_USER_AVATAR_RESULT"),
    5040: .same(proto: "PULL_EXTERNAL_CHATTERS_IN_SAME_CHAT_AUTH"),
    5041: .same(proto: "PULL_ALREADY_IN_CHAT"),
    5050: .same(proto: "PULL_WORK_STATUS"),
    5051: .same(proto: "DELETE_WORK_STATUD"),
    5055: .same(proto: "PULL_CHAT_LINK_TOKEN"),
    5056: .same(proto: "PUT_CHATTER_VIA_SHARE_LINK"),
    5057: .same(proto: "PULL_CHAT_LINK_INFO"),
    5060: .same(proto: "PULL_MY_PROMOTION_LINK"),
    5061: .same(proto: "PULL_PROMOTION_RULE"),
    5062: .same(proto: "PUT_BUSINESS_INVITATION"),
    5070: .same(proto: "PULL_CHAT_AVATAR_META"),
    5080: .same(proto: "PULL_INVITATION_LINK"),
    5081: .same(proto: "PUT_ADMIN_INVITATION"),
    5082: .same(proto: "PULL_USER_INVITATION_MESSAGE"),
    5083: .same(proto: "PUT_BANNER_BEGIN_TIME"),
    5090: .same(proto: "PUSH_USER_SIDEBAR_UPDATE_EVENT"),
    5091: .same(proto: "PULL_USER_SIDEBAR"),
    5092: .same(proto: "CHECK_USER_PHONE_NUMBER"),
    5093: .same(proto: "PULL_USER_PROFILE_ASSIGNED_FIELDS"),
    5094: .same(proto: "AUTH_DOWNLOAD_TOKEN"),
    5100: .same(proto: "PUT_PIN"),
    5101: .same(proto: "PULL_PINS_BY_MESSAGE_IDS"),
    5102: .same(proto: "PULL_CHAT_PINS"),
    5103: .same(proto: "DELETE_PINS"),
    5104: .same(proto: "PUSH_PIN"),
    5105: .same(proto: "PUSH_PIN_READ"),
    5106: .same(proto: "PULL_PIN_READ_STATUS"),
    5107: .same(proto: "PUT_PIN_READ"),
    5108: .same(proto: "PULL_PIN_BY_CHAT_UPDATE_TIME"),
    5109: .same(proto: "PUT_ALL_PIN_SETTING"),
    5110: .same(proto: "PUSH_ALL_PIN_SETTING"),
    5111: .same(proto: "PULL_ALL_PIN_SETTING"),
    5200: .same(proto: "UPDATE_ACCOUNT_USER_LIST_ORDER"),
    5201: .same(proto: "PUSH_ACCOUNT_USER_LIST"),
    5202: .same(proto: "PULL_ACCOUNT_USER_LIST"),
    5203: .same(proto: "PUSH_ACCOUNT_UPDATE_USER_EVNET"),
    5204: .same(proto: "PUSH_ACCOUNT_UNREGISTER_USER_EVENT"),
    5205: .same(proto: "PUSH_GLOBAL_ACCOUNT_UPDATE_USER_EVENT"),
    5206: .same(proto: "PUSH_USER_LIST_UPDATE_EVENT"),
    5207: .same(proto: "PUSH_USER_MIGRATE_SWITCH_EVENT"),
    5300: .same(proto: "PUT_USER_NAME"),
    5301: .same(proto: "GET_USER_UPDATE_NAME_PERMISSION"),
    5302: .same(proto: "PUSH_USER_LOGOUT_EVENT"),
    5303: .same(proto: "PULL_USER_UPDATE_FIELD_PERMISSION"),
    5400: .same(proto: "PUT_USER_ALIAS"),
    5401: .same(proto: "PUT_GROUP_NICKNAME"),
    5402: .same(proto: "PUSH_USER_ALIAS"),
    5403: .same(proto: "PUSH_GROUP_NICKNAME"),
    5500: .same(proto: "PULL_MESSAGE_I18N_TEMPLATES"),
    5501: .same(proto: "PULL_USER_NAMES"),
    5600: .same(proto: "PULL_CHAT_SHARE_HISTORY"),
    5601: .same(proto: "PUT_CHAT_SHARE_HISTORY"),
    5602: .same(proto: "PATCH_CHAT_SHARE_STATUS"),
    5700: .same(proto: "PULL_CHAT_SHARE_TOKEN_INFO"),
    5800: .same(proto: "CREATE_FACE_TO_FACE_APPLICATION"),
    5801: .same(proto: "PUSH_FACE_TO_FACE_APPLICANTS"),
    5802: .same(proto: "JOIN_FACE_TO_FACE_CHAT"),
    5900: .same(proto: "PATCH_CHAT_ADMIN_USERS"),
    5901: .same(proto: "PUSH_CHAT_ADMIN_USERS"),
    5902: .same(proto: "PULL_CHAT_ADMIN_USERS"),
    5911: .same(proto: "PULL_CHAT_TABS"),
    5912: .same(proto: "CREATE_CHAT_TAB"),
    5913: .same(proto: "DELETE_CHAT_TAB"),
    5914: .same(proto: "REORDER_CHAT_TABS"),
    5915: .same(proto: "UPDATE_CHAT_TABS"),
    5916: .same(proto: "PUSH_CHAT_TABS"),
    5921: .same(proto: "PUT_CHAT_ONLINE_STATUS"),
    5931: .same(proto: "ANALYZE_CHATTERS_SHEET"),
    6000: .same(proto: "PUSH_SID"),
    6001: .same(proto: "PUSH_BACKGROUND_NOTIFICATION"),
    6002: .same(proto: "PUSH_BANNER_NOTIFICATION"),
    6300: .same(proto: "PULL_CHATTER_SUBSCRIBERS"),
    6951: .same(proto: "PULL_NEWEST_POLICIES"),
    6952: .same(proto: "PUT_NEWEST_POLICIES"),
    7000: .same(proto: "PUT_DEVICE_NOTIFY_SETTING"),
    7001: .same(proto: "PUSH_DEVICE_ONLINE_STATUS"),
    7002: .same(proto: "PULL_DEVICES_ONLINE_STATUS"),
    7003: .same(proto: "PUT_DEVICE_NOTIFY_SETTING_DISABLE_NOTIFY"),
    7004: .same(proto: "PUT_DEVICE_NOTIFY_SETTING_STILL_NOTIFY_AT"),
    7005: .same(proto: "PUSH_USER_LOGIN_STATUS"),
    7006: .same(proto: "PULL_DEVICE_NOTIFY_SETTING"),
    7007: .same(proto: "PUT_DEVICE_SETTING"),
    7008: .same(proto: "PULL_DEVICE_SETTING"),
    7009: .same(proto: "PULL_USER_SETTING"),
    7010: .same(proto: "PATCH_USER_SETTING"),
    7011: .same(proto: "PUSH_USER_SETTING"),
    7012: .same(proto: "PUT_WAY_TO_FIND_ME_SETTING"),
    7013: .same(proto: "PUSH_WAY_TO_FIND_ME_SETTING"),
    7014: .same(proto: "PUT_WAY_TO_ADD_FRIEND_SETTING_ITEM"),
    7015: .same(proto: "PUSH_WAY_TO_ADD_FRIEND_SETTING_ITEM"),
    7016: .same(proto: "PULL_ADD_FRIEND_SETTING"),
    7017: .same(proto: "PUSH_DEVICE_NETWORK_ACCESS_EVENT"),
    7018: .same(proto: "PULL_SPELL_CHECK_WORDS"),
    7019: .same(proto: "PUSH_SPELL_CHECK_ADD_WORDS"),
    7020: .same(proto: "PUT_SPELL_CHECK_ADD_WORDS"),
    7021: .same(proto: "PULL_MESSAGE_NOTIFICATIONS_OFF_DURING_CALLS"),
    7022: .same(proto: "PULL_FEED_FILTER_SETTING"),
    7023: .same(proto: "PUT_FEED_FILTER_SETTING"),
    7024: .same(proto: "PUSH_FEED_FILTER_SETTING"),
    7025: .same(proto: "PATCH_UNIVERSAL_USER_SETTING"),
    7026: .same(proto: "PULL_UNIVERSAL_USER_SETTING"),
    7027: .same(proto: "PUSH_UNIVERSAL_USER_SETTING"),
    7028: .same(proto: "PUT_DEVICE_NOTIFY_SETTING_STILL_NOTIFY_SPECIAL_FOCUS"),
    7029: .same(proto: "PULL_DYNAMIC_EMOJI_RESOURCES"),
    7030: .same(proto: "PULL_THREE_COLUMNS_SETTING"),
    7031: .same(proto: "PATCH_THREE_COLUMNS_SETTING"),
    7032: .same(proto: "PUSH_THREE_COLUMNS_SETTING"),
    7100: .same(proto: "PUT_DEVICE_TOKEN"),
    7101: .same(proto: "PUSH_ACTION"),
    7102: .same(proto: "PUT_DEVICE_BASIC_MODE_SETTING"),
    7103: .same(proto: "PULL_DEVICE_BASIC_MODE_SETTING"),
    7501: .same(proto: "PULL_PRODUCT_GUIDE"),
    7504: .same(proto: "DELETE_PRODUCT_GUIDE"),
    7505: .same(proto: "PUSH_PRODUCT_GUIDE"),
    7506: .same(proto: "PULL_GUIDE_V2"),
    7507: .same(proto: "GET_USER_GUIDE_REQUEST"),
    7508: .same(proto: "POST_USER_CONSUMING_GUIDE_REQUEST"),
    7509: .same(proto: "USER_GUIDE_UPDATED_REQUEST"),
    7600: .same(proto: "PULL_ICE_BREAKING_STATUS"),
    7601: .same(proto: "PUT_ICE_BREAKING_ACTION"),
    7602: .same(proto: "PUT_TOUR_GUIDE_ACHIEVED"),
    7603: .same(proto: "PUT_UPDATE_TENANT_PACKAGE"),
    7604: .same(proto: "PUT_TRUSTED_MAIL"),
    7605: .same(proto: "PULL_TRUSTED_MAIL_INFO"),
    7606: .same(proto: "GET_ADVERTISE_SOURCE_CONFIG"),
    7700: .same(proto: "PUSH_GUIDE_TO_RATE_STATE"),
    7701: .same(proto: "PULL_GUIDE_TO_RATE_STATE"),
    7702: .same(proto: "PUT_GUIDE_TO_RATE_EVENT"),
    8001: .same(proto: "PUSH_SYNC_DEVICES"),
    8002: .same(proto: "PULL_GEO_INFO_BY_IP"),
    8003: .same(proto: "PULL_CERTIFICATE_DECRYPTION_KEY"),
    8004: .same(proto: "PULL_CHAT_MEMBER_SUPP_ROLE_APPROVAL_SETTING"),
    8005: .same(proto: "PUT_CHAT_MEMBER_SUPP_ROLE_APPROVAL"),
    8100: .same(proto: "PUSH_THREADS"),
    8101: .same(proto: "PATCH_THREAD"),
    8102: .same(proto: "PULL_CHAT_THREADS"),
    8103: .same(proto: "PULL_THREAD_MESSAGES"),
    8104: .same(proto: "PUSH_THREAD_SETTING"),
    8105: .same(proto: "PUT_READ_THREADS"),
    8106: .same(proto: "PUSH_THREAD_READ_STATE"),
    8108: .same(proto: "PULL_THREADS_BY_POSITIONS"),
    8109: .same(proto: "PULL_THREAD_MESSAGE_BY_POSITIONS"),
    8110: .same(proto: "PUSH_THREAD_UPDATED"),
    8111: .same(proto: "PULL_THREADS_BY_IDS"),
    8112: .same(proto: "PULL_THREADS_SETTING"),
    8113: .same(proto: "PUSH_THREADS_REMOVED"),
    8114: .same(proto: "PUSH_THREAD_MUTABLE_INFO"),
    8115: .same(proto: "PUSH_THREAD_NO_REPLY_COUNT_UPDATED"),
    8116: .same(proto: "PULL_THREAD_CARD"),
    8117: .same(proto: "PUSH_THREAD_STATE_INFO"),
    8118: .same(proto: "PULL_FILTERED_THREADS_BY_CHAT"),
    8119: .same(proto: "PUSH_THREAD_FILTER_UPDATED"),
    8120: .same(proto: "PULL_RECOMMENDATIONS_BY_USER"),
    8121: .same(proto: "PUT_READ_MY_THREADS"),
    8122: .same(proto: "PUSH_MY_THREADS_READ_STATE"),
    8123: .same(proto: "PULL_THREAD_ANONYMOUS_QUOTA"),
    8124: .same(proto: "PUSH_THREAD_ANONYMOUS_QUOTA"),
    8125: .same(proto: "PUT_THREAD_SHARE"),
    8126: .same(proto: "PULL_CHAT_TEMPLATE_BANNER"),
    8127: .same(proto: "PUT_CHAT_TEMPLATE_BANNER_STATUS"),
    8128: .same(proto: "PUSH_THREAD_UPDATE_INFO"),
    8300: .same(proto: "PUT_TOPICS_READ_STATE"),
    8301: .same(proto: "PULL_RECOMMENDED_TOPIC_GROUPS"),
    8302: .same(proto: "PULL_MY_TOPIC_GROUPS"),
    8303: .same(proto: "PULL_TOPIC_GROUPS_TO_POST"),
    8310: .same(proto: "UNINTEREST_TOPIC_GROUP_FOR_USER"),
    8311: .same(proto: "UNINTEREST_TOPIC_FOR_USER"),
    8312: .same(proto: "UNINTEREST_USER_FOR_USER"),
    8319: .same(proto: "PULL_TOPIC_GROUPS_BY_IDS"),
    8320: .same(proto: "PUSH_TOPIC_MESSAGES"),
    8321: .same(proto: "PUT_TOPIC_GROUP_MEMBER_VIA_RECOMMENDATION"),
    8322: .same(proto: "PULL_TOPIC_GROUP_TAB_NOTIFICATION"),
    8323: .same(proto: "PUSH_TOPIC_GROUP_SETTING"),
    8324: .same(proto: "PUSH_TOPIC_GROUP"),
    8325: .same(proto: "PULL_TOPIC_GROUP_SETTING"),
    11000: .same(proto: "SEARCH_USER"),
    11001: .same(proto: "SEARCH_MESSAGE"),
    11002: .same(proto: "SEARCH_GROUP_CHAT"),
    11003: .same(proto: "SEARCH"),
    11004: .same(proto: "SEARCH_CHATTER"),
    11005: .same(proto: "SMART_SEARCH"),
    11006: .same(proto: "PUT_SEARCH_FEEDBACK"),
    11007: .same(proto: "PULL_SEARCH_HISTORY_ENTITIES"),
    11008: .same(proto: "DELETE_SEARCH_HISTORY_ENTITY"),
    11009: .same(proto: "SEGMENT_TEXT"),
    11010: .same(proto: "SEARCH_EMAIL_MESSAGE"),
    11011: .same(proto: "SEARCH_DOC"),
    11012: .same(proto: "INTEGRATION_SEARCH"),
    11013: .same(proto: "PULL_CHAT_RESOURCE_MESSAGES"),
    11014: .same(proto: "PUT_SEARCH_MSG_HISTORY"),
    11015: .same(proto: "PULL_SEARCH_MSG_HISTORY"),
    11016: .same(proto: "DELETE_SEARCH_MSG_HISTORY"),
    11017: .same(proto: "PULL_SEARCH_SETTING"),
    11018: .same(proto: "PULL_SEARCH_FILTER"),
    11019: .same(proto: "SEARCH_CUSTOMIZE_FIELD"),
    11020: .same(proto: "SEARCH_IN_CHAT"),
    11021: .same(proto: "UNIVERSAL_SEARCH"),
    11022: .same(proto: "EXTERNAL_RESOURCE_SEARCH"),
    11023: .same(proto: "PULL_USER_SEARCH_TABS"),
    11024: .same(proto: "PUT_USER_SEARCH_TABS"),
    11025: .same(proto: "PULL_AVAILABLE_SEARCH_TABS"),
    11026: .same(proto: "PUT_SEARCH_QUERY_HISTORY"),
    11027: .same(proto: "DELETE_SEARCH_QUERY_HISTORY"),
    11100: .same(proto: "PULL_CLOSEST_CHATTERS"),
    11101: .same(proto: "PULL_CLOSEST_CHATS"),
    11102: .same(proto: "PULL_LOCAL_SEARCH_RANK_MODEL_CONFIG"),
    11103: .same(proto: "PULL_SPECIAL_FOCUS"),
    11104: .same(proto: "UPDATE_SPECIAL_FOCUS"),
    11105: .same(proto: "PUSH_USER_SPECIAL_FOCUS"),
    12001: .same(proto: "PULL_PACKETS_BY_SIDS"),
    12002: .same(proto: "SYNC"),
    12003: .same(proto: "PULL_PIPELINE_INTERVAL_BY_SID"),
    13001: .same(proto: "PULL_ONCALLS"),
    13002: .same(proto: "PUT_ONCALL_CHAT"),
    13003: .same(proto: "PULL_ALL_ONCALL_TAGS"),
    13004: .same(proto: "PULL_ONCALL_BY_TAGS"),
    13005: .same(proto: "PUT_FINISH_ONCALL"),
    13006: .same(proto: "PULL_HOME_PAGE_ONCALLS"),
    13007: .same(proto: "PUT_INVITE_ONCALL"),
    13008: .same(proto: "PULL_ONCALLS_BY_IDS"),
    13009: .same(proto: "PUSH_ONCALLS"),
    13100: .same(proto: "PULL_CHAT_BOTS"),
    13101: .same(proto: "PULL_CHAT_CANDIDATE_BOTS"),
    13102: .same(proto: "PUSH_LOG_UPLOAD"),
    13103: .same(proto: "PUSH_LOG_REQUEST"),
    13110: .same(proto: "PUSH_LOG_RETRIEVAL"),
    13111: .same(proto: "RETRY_LOG_RETRIEVAL_TASK"),
    13112: .same(proto: "FETCH_LOG_RETRIEVAL_TASK_STATUS"),
    14001: .same(proto: "PATCH_DOC_PREM"),
    14002: .same(proto: "PUSH_DOC"),
    14003: .same(proto: "PULL_DOCS"),
    14004: .same(proto: "PUSH_DOC_FEED"),
    14005: .same(proto: "PULL_DOC_FEEDS_BY_IDS"),
    14006: .same(proto: "PUSH_DOCS"),
    14007: .same(proto: "PULL_DOC_PERMS"),
    14008: .same(proto: "PUT_DOC_FEED"),
    14009: .same(proto: "PULL_DOCS_HISTORY"),
    14010: .same(proto: "PULL_CONVERT_TOKEN"),
    14011: .same(proto: "PATCH_DOC_FEED_SETTING"),
    14012: .same(proto: "PUSH_DOC_FEED_SETTING"),
    14013: .same(proto: "PULL_DOC_FEED_SETTINGS"),
    14014: .same(proto: "PUT_READ_DOC_MESSAGES"),
    14015: .same(proto: "PULL_DOC_BY_URLS"),
    14016: .same(proto: "PULL_DOC_MESSAGE_READ_STATUS"),
    14017: .same(proto: "PUSH_DOC2"),
    14018: .same(proto: "PUSH_DOCS2"),
    14100: .same(proto: "PUSH_TO_DOC"),
    14101: .same(proto: "PUSH_DOC_IMAGE_RELAY"),
    14102: .same(proto: "PULL_DOC_FEED_MSG_TMPL"),
    15001: .same(proto: "SEND_HONGBAO"),
    15002: .same(proto: "GRAB_HONGBAO"),
    15003: .same(proto: "UPDATE_HONGBAO"),
    15004: .same(proto: "PULL_HONGBAO_INFO"),
    15005: .same(proto: "PULL_HONGBAO_RECV_DETAIL"),
    15006: .same(proto: "PULL_WALLET_BALANCE"),
    15007: .same(proto: "PULL_SEND_HONGBAO_RECORD"),
    15008: .same(proto: "PULL_GRAB_HONGBAO_RECORD"),
    15009: .same(proto: "PULL_HONGBAO_COVER_LIST"),
    16000: .same(proto: "PULL_MESSAGE_ACTION_LIST"),
    18001: .same(proto: "GRAB_COMMERCIAL_HONGBAO"),
    18002: .same(proto: "UPDATE_COMMERCIAL_HONGBAO"),
    18003: .same(proto: "PULL_COMMERCIAL_HONGBAO_INFO"),
    18004: .same(proto: "PULL_COMMERCIAL_HONGBAO_RECV_DETAIL"),
    30000: .same(proto: "PUT_URGENT"),
    30001: .same(proto: "PUT_URGENT_ACK"),
    30002: .same(proto: "PUSH_URGENT"),
    30003: .same(proto: "PUSH_URGENT_ACK"),
    30004: .same(proto: "PULL_URGENT_WAITING_ACK"),
    30005: .same(proto: "PULL_URGENT_ACK_STATUS"),
    30006: .same(proto: "CONFIRM_URGENT_ACK_BY_ID"),
    30007: .same(proto: "PULL_URGENT_PHONES"),
    30008: .same(proto: "PUSH_FAILED_URGENT_NOTIFY_RESULT"),
    30009: .same(proto: "PULL_SELECT_URGENT_CHATTERS"),
    30010: .same(proto: "PULL_URGENT_CHAT_CHATTERS"),
    30011: .same(proto: "PULL_CHATTERS_URGENT_INFO"),
    40001: .same(proto: "PULL_TT_USER"),
    40002: .same(proto: "PUT_TT_USER"),
    40100: .same(proto: "PUSH_APP_CENTER_UPDATE"),
    40101: .same(proto: "PUSH_MALAITA_UPDATE"),
    40102: .same(proto: "PUSH_APP_CENTER_UPDATE_V2"),
    40103: .same(proto: "PUSH_TENANT_APP_UPDATE"),
    40104: .same(proto: "PUSH_MINIPROGRAM_UPDATE"),
    40105: .same(proto: "PUSH_OPEN_APP_FEED"),
    40106: .same(proto: "PUSH_OPEN_APP_NOTIFY_READ_SYNC"),
    40107: .same(proto: "PUSH_OPEN_APP_SETTINGS"),
    40108: .same(proto: "PUSH_MINIPROGRAM_PREVIEW"),
    40111: .same(proto: "PUSH_OPEN_COMMON"),
    40112: .same(proto: "PULL_MALAITA_PREVIEW"),
    40113: .same(proto: "PULL_ULAWA_PREVIEW"),
    40114: .same(proto: "PULL_MALAITA_NOTIFICATION_UNREAD_COUNT"),
    40115: .same(proto: "PULL_ULAWA_NOTIFICATION_UNREAD_COUNT"),
    40116: .same(proto: "SET_MALAITA_JUMP_REPORT"),
    40117: .same(proto: "PULL_APP_CHAT_FEED"),
    40118: .same(proto: "PUSH_APP_CHAT_FEED_SETTINGS"),
    40119: .same(proto: "CREATE_APP_CHAT"),
    40120: .same(proto: "PULL_APP_CHAT_FEED_ID"),
    40121: .same(proto: "SET_APP_CHAT_NOTICE_CONFIG"),
    40122: .same(proto: "PUSH_GADGET_APP_DATA"),
    40123: .same(proto: "PULL_OPEN_APP_BADGE_NODES"),
    40124: .same(proto: "PUSH_OPEN_APP_BADGE_NODES"),
    40125: .same(proto: "PULL_OPEN_APP_BADGE_SETTINGS"),
    70000: .same(proto: "PULL_PIPE_LIST"),
    70001: .same(proto: "PULL_MULTI_PIPE_PACKETS_BY_TYPES"),
    70002: .same(proto: "PULL_MULTI_PIPE_PACKETS_BY_IDS"),
    70003: .same(proto: "PULL_UNSUPPORT_PIPE_TYPE_INFOS"),
    70004: .same(proto: "PULL_MULTI_PIPE_PACKETS_BY_SUPPORT_TYPE"),
    70005: .same(proto: "PULL_CHAT_CHANGE_LISTS"),
    70006: .same(proto: "PULL_MULTI_PIPE_PACKETS"),
    70007: .same(proto: "PULL_CHANGE_LISTS"),
    70008: .same(proto: "CHECK_PIPES_TIMEOUT"),
    81000: .same(proto: "PULL_ROOM_INFO"),
    81030: .same(proto: "SUBMIT_FEEDBACKS"),
    82011: .same(proto: "UPDATE_SCHEDULE_STATUS"),
    88001: .same(proto: "SKETCH_START"),
    88002: .same(proto: "UPDATE_SHARE_SCREEN_SETTINGS"),
    88003: .same(proto: "FETCH_ALL_SKETCH_DATA"),
    88004: .same(proto: "APPLY_BYTEVIEW_ACCESSIBILITY"),
    88005: .same(proto: "FETCH_SKETCH_DATA_BY_SHAPE_IDS"),
    88006: .same(proto: "PULL_SKETCH_HISTORY"),
    88011: .same(proto: "REMOTE_CONTROL"),
    88012: .same(proto: "UPDATE_REMOTE_CONTROL_SETTINGS"),
    88013: .same(proto: "GET_ADMIN_SETTINGS"),
    88015: .same(proto: "UPLOAD_PARTICIPANT_INFO"),
    88016: .same(proto: "GET_ADMIN_MEDIA_SERVER_SEETINGS"),
    88051: .same(proto: "PULL_ALL_FOLLOW_STATES"),
    88052: .same(proto: "GET_FOLLOW_RESOURCES"),
    88053: .same(proto: "GET_URL_BRIEFS"),
    88054: .same(proto: "UPLOAD_GOOGLE_TOKEN"),
    88055: .same(proto: "GET_GOOGLE_TOKEN"),
    88056: .same(proto: "REVOKE_GOOGLE_TOKEN"),
    88057: .same(proto: "EXCHANGE_GOOGLE_TOKEN"),
    88058: .same(proto: "REPLY_FOLLOW_NOTICE"),
    88100: .same(proto: "PUSH_VC_SHARE_MESSAGE"),
    88101: .same(proto: "OPERATE_WHITEBOARD"),
    88102: .same(proto: "OPERATE_WHITEBOARD_PAGE"),
    88103: .same(proto: "UPLOAD_WHITEBOARD"),
    88104: .same(proto: "PULL_WHITEBOARD_SNAPSHOT"),
    88105: .same(proto: "SAVE_WHITEBOARD"),
    89000: .same(proto: "SEND_GROOT_CELLS_MEETING_SPACE"),
    89001: .same(proto: "PULL_GROOT_CELLS_MEETING_SPACE"),
    89002: .same(proto: "PUSH_GROOT_CELLS"),
    89003: .same(proto: "GROOT_CHANNEL_HANDSHAKE_MEETING_SPACE"),
    89004: .same(proto: "PUSH_MEETING_SPACE_INFO"),
    89005: .same(proto: "UPDATE_READ_CURSOR"),
    89006: .same(proto: "GET_MEETING_SPACE_META_DATA"),
    89007: .same(proto: "GET_MEETING_SPACE_AGENDA"),
    89008: .same(proto: "GET_MEETING_SPACE_FILES"),
    89009: .same(proto: "GET_UNIQUE_ID_BY_MEETING_ID"),
    89010: .same(proto: "GROOT_CHANNEL_PING_MEETING_SPACE"),
    89011: .same(proto: "CHECK_INTERVIEW_MEETING_SPACE"),
    89012: .same(proto: "OCCUPY_INTERVIEW_CODING"),
    89013: .same(proto: "SEND_INTERVIEW_CODING_ACTION"),
    89014: .same(proto: "UPDATE_MINUTES_STATUS"),
    89050: .same(proto: "SEND_GROOT_CELLS"),
    89051: .same(proto: "PULL_GROOT_CELLS"),
    89052: .same(proto: "GROOT_CHANNEL_HANDSHAKE"),
    89053: .same(proto: "GROOT_CHANNEL_PING"),
    89054: .same(proto: "PULL_UPSTREAM_GROOT_CELLS"),
    89201: .same(proto: "GET_CALENDAR_MEETING_BY_UIDS"),
    89202: .same(proto: "GET_HISTORY_MEETING_LIST"),
    89203: .same(proto: "GET_CALL_HISTORY_LIST"),
    89204: .same(proto: "BATCH_GET_MEETING_BY_IDS"),
    89205: .same(proto: "BATCH_GET_UNIQUE_ID_BY_EVENT_ID"),
    89206: .same(proto: "GET_VC_TAB_TOTAL_MISSED_CALL"),
    89207: .same(proto: "VC_TAB_MISSED_CALL_CONFIRM"),
    89208: .same(proto: "GET_VC_TAB_HISTORY_LIST"),
    89209: .same(proto: "GET_VC_TAB_MEETING_DETAIL"),
    89211: .same(proto: "NOTIFY_VC_TAB_MISSED_CALLS"),
    89212: .same(proto: "CREATE_VC_TAB_MEETING_STATISTICS"),
    89213: .same(proto: "PUSH_VC_TAB_NOTICE"),
    89214: .same(proto: "PUSH_ON_CALL_TICKET_NOTICE"),
    89301: .same(proto: "GET_MEETING_URL_INFO"),
    89302: .same(proto: "VC_OWNER_FORCE_TRANSFER_HOST"),
    89303: .same(proto: "CHECK_VC_MANAGE_CAPABILITIES"),
    89304: .same(proto: "VC_SEARCH_USER_IN_MEETING"),
    89305: .same(proto: "UPLOAD_EQUIPMENT_INFO"),
    89306: .same(proto: "VC_LARK_SEARCH_USER_IN_MEETING"),
    89308: .same(proto: "VC_GET_SUITE_QUOTA"),
    89309: .same(proto: "VC_PULL_CARD_INFO"),
    89310: .same(proto: "KEEP_MEETING"),
    89311: .same(proto: "PUSH_RTC_STATUS"),
    89312: .same(proto: "PULL_ALL_RTC_STATUS"),
    89317: .same(proto: "REFUSE_REPLY"),
    89321: .same(proto: "GET_VC_LOBBY_PARTICIPANTS"),
    89322: .same(proto: "UPDATE_VC_LOBBY_PARTICIPANT"),
    89323: .same(proto: "VC_LOBBY_HEARTBEAT"),
    89341: .same(proto: "VC_MANAGE_APPLY"),
    89342: .same(proto: "VC_MANAGE_APPROVAL"),
    89343: .same(proto: "PUSH_VC_MANAGE_NOTIFY"),
    89344: .same(proto: "PUSH_VC_MANAGE_RESULT"),
    89349: .same(proto: "SEND_CLIENT_INFO"),
    89350: .same(proto: "ENTRUST_SERVER_TRACK"),
    89351: .same(proto: "SET_CALENDAR_VC_SETTINGS"),
    89352: .same(proto: "GET_CALENDAR_VC_SETTINGS"),
    89353: .same(proto: "GET_CALENDAR_GUEST_LIST"),
    89354: .same(proto: "GET_ROOM_STATUS_BY_SHARE_CODE"),
    89360: .same(proto: "BREAKOUT_ROOM_INFO_NOTIFY"),
    89361: .same(proto: "START_MEETING_BREAKOUT_ROOM"),
    89362: .same(proto: "JOIN_MEETING_BREAKOUT_ROOM"),
    89363: .same(proto: "PULL_BREAKOUT_ROOM_INFO"),
    89364: .same(proto: "VC_CREATE_CALENDAR_EVENT"),
    89365: .same(proto: "VC_UPDATE_CALENDAR_EVENT"),
    89366: .same(proto: "PULL_VC_CALENDAR_EVENTS"),
    89367: .same(proto: "GET_MAIN_CALENDAR"),
    89370: .same(proto: "GET_CALENDAR_VCHAT_STATUS"),
    89371: .same(proto: "GET_INTERVIEW_VCHAT_STATUS"),
    89372: .same(proto: "GET_CALENDAR_DEFAULT_SETTINGS"),
    89373: .same(proto: "APPLY_PRE_VC_SETTING_ID"),
    89374: .same(proto: "GET_CALENDAR_PRE_SETTINGS"),
    89375: .same(proto: "CLOSE_INTERVIEWER_NOTICE"),
    89381: .same(proto: "TRANSLATE_VC_MESSAGES"),
    89382: .same(proto: "PUSH_VC_TRANSLATE_RESULTS"),
    89390: .same(proto: "SET_BREAKOUT_ROOM_PRE_SETTING"),
    89391: .same(proto: "GET_BREAKOUT_ROOM_PRE_SETTING"),
    89392: .same(proto: "GET_AND_BIND_FILES_VC"),
    89393: .same(proto: "BREAKOUT_DOWNLOAD_TEMPLATE"),
    89394: .same(proto: "BREAKOUT_UPLOAD_FILE"),
    89395: .same(proto: "NOTIFY_BREAKOUT_MANAGE_RESULT"),
    89401: .same(proto: "APPLY_DTMF"),
    89403: .same(proto: "PULL_PARTICIPANT_INFO"),
    89404: .same(proto: "GET_SIP_DOMAIN_BY_UNIQUE_ID"),
    89405: .same(proto: "GET_PSTN_SIP_FC"),
    89406: .same(proto: "GET_H323_ACCESS_BY_UNIQUE_ID"),
    89450: .same(proto: "CREATE_ENTERPRISE_PHONE"),
    89451: .same(proto: "CANCEL_ENTERPRISE_PHONE"),
    89452: .same(proto: "NOTIFY_ENTERPRISE_PHONE"),
    89453: .same(proto: "GET_ENTERPRISE_PHONE_CONFIG"),
    89454: .same(proto: "CHECK_ENTERPRISE_PHONE_QUOTA"),
    89455: .same(proto: "GET_PHONE_NUMBER_ATTRIBUTION"),
    89460: .same(proto: "GET_MEETING_UNIT"),
    89461: .same(proto: "GET_TARGET_USER_PHONE_NUMBER"),
    89465: .same(proto: "GEN_ON_CALL_TICKET"),
    89466: .same(proto: "UPDATE_ON_CALL_TICKET"),
    89501: .same(proto: "SEARCH_USERS_AND_CHATS"),
    89601: .same(proto: "START_SAME_PAGE_MEETING"),
    89602: .same(proto: "UPDATE_SAME_PAGE_MEETING"),
    89603: .same(proto: "INIT_SAME_PAGE_MEETING"),
    89701: .same(proto: "STOP_SHARE_BOX_LINK"),
    89702: .same(proto: "SHARE_BOX_HEARTBEAT"),
    89703: .same(proto: "PUSH_SHARE_LINK_INFO"),
    89704: .same(proto: "START_SHARE_LINK"),
    89705: .same(proto: "PUSH_BOX_NOTICE"),
    89706: .same(proto: "CHANGE_SHARE_LINK_SETTING"),
    89801: .same(proto: "UPLOAD_VC_MATERIAL_META"),
    89802: .same(proto: "PULL_VC_MATERIAL_META"),
    89803: .same(proto: "DELETE_VC_MATERIAL"),
    89804: .same(proto: "PUSH_VC_MATERIAL_MSG"),
    90001: .same(proto: "MM_PUSH_REACTION_INFO"),
    90002: .same(proto: "MM_PUSH_SUMMARY_STATUS"),
    90003: .same(proto: "MM_PUSH_SUMMARY_CHANGE"),
    90004: .same(proto: "MM_PUSH_SUMMARY_CHECK"),
    90005: .same(proto: "MM_PUSH_REALTIME_SUBTITLE_SENTENCE"),
    90006: .same(proto: "MM_PUSH_DIARIZATION_REMATCH_STATUS"),
    90008: .same(proto: "VOICE_PRINT_PULL_STATUS"),
    90009: .same(proto: "VOICE_PRINT_PUSH_STATUS"),
    90010: .same(proto: "VOICE_PRINT_CLEAR"),
    91030: .same(proto: "SUBMIT_NEO_FEEDBACKS"),
    109001: .same(proto: "PULL_LEAN_MODE_STATUS_AND_AUTHORITY"),
    109002: .same(proto: "PATCH_LEAN_MODE_STATUS"),
    109003: .same(proto: "PUSH_LEAN_MODE_STATUS_AND_AUTHORITY"),
    110001: .same(proto: "PULL_DYNAMIC_FLOW"),
    110002: .same(proto: "PULL_DYNAMIC_FLOW_STEP"),
    110003: .same(proto: "REPORT_FLOW_EVENT"),
    110004: .same(proto: "PULL_DYNAMIC_RESOURCE"),
    110005: .same(proto: "PUSH_DYNAMIC_FLOW"),
    110006: .same(proto: "PUSH_DYNAMIC_FLOW_STEP"),
    110007: .same(proto: "TRY_SET_UG_EVENT_STATE"),
    110008: .same(proto: "GET_NEW_USER_CREATE_TEAM_STRONG_GUIDE_CONTEXT"),
    110009: .same(proto: "GET_LDR_SERVICE_APPLINK"),
    110010: .same(proto: "BIZ_EVENT_REPORT"),
    110050: .same(proto: "PULL_NEW_FEATURE_MATERIAL"),
    110051: .same(proto: "SUBMIT_NEW_FEATURE_CLICK_EVENT"),
    110071: .same(proto: "GET_MEEGO_SINGATURE"),
    110101: .same(proto: "ECM_SUBSCRIBE_EVENT"),
    110102: .same(proto: "ECM_KEEP_LIVE_SUBSCRIBE"),
    110103: .same(proto: "ECM_CANCEL_SUBSCRIBE"),
    110104: .same(proto: "ECM_EVENT_BROADCAST"),
    110105: .same(proto: "ECM_ADD_ITEM_SUBSCRIBE"),
    200000: .same(proto: "GET_LIVE_CONFIG"),
    200001: .same(proto: "LIVE_HEARTBEAT"),
    200002: .same(proto: "GET_LIVE_INFO"),
    200003: .same(proto: "UPDATE_LIVE_INFO"),
    200004: .same(proto: "PUSH_LIVE_NOTICE"),
    200005: .same(proto: "PUSH_LIVE_INFO"),
    200006: .same(proto: "UPDATE_LIVE_STATUS"),
    200007: .same(proto: "POLL_LIVE_AUDIENCE_NUM"),
    200008: .same(proto: "CREATE_LIVE"),
    200009: .same(proto: "CREATE_LIVE_SCENE"),
    200010: .same(proto: "EDIT_LIVE_SCENE"),
    200011: .same(proto: "DELETE_LIVE_SCENE"),
    200012: .same(proto: "MOVE_LIVE_SCENE"),
    200013: .same(proto: "GET_SUB_SCENE_LIST"),
    200014: .same(proto: "SWITCH_SUB_SCENE"),
    200015: .same(proto: "MGET_SCENE_BY_ID"),
    200016: .same(proto: "JOIN_LIVE_ROOM"),
    200017: .same(proto: "INVITE_LIVE_GUEST"),
    200018: .same(proto: "REMOVE_LIVE_GUEST"),
    200019: .same(proto: "NOTIFY_LIVE_GUEST"),
    200020: .same(proto: "UPDATE_LIVE_DEVICE"),
    200021: .same(proto: "MGET_LIVE_USER_BY_ID"),
    200022: .same(proto: "PUSH_LIVE_CHANGE"),
    200023: .same(proto: "LEAVE_LIVE_ROOM"),
    200024: .same(proto: "LIVE_PRE_CHECK"),
    200025: .same(proto: "GET_LIVE_INFO_V2"),
    200026: .same(proto: "UPDATE_LIVE_INFO_V2"),
    200027: .same(proto: "DELETE_LIVE_INFO"),
    200028: .same(proto: "GET_LIVE_INFO_LIST"),
    200029: .same(proto: "EXPORT_LIVE_STATISTICS"),
    200030: .same(proto: "LIVE_STATISTICS_PUSH"),
    200031: .same(proto: "GET_LIVE_STATIC_RESOURCE"),
    200032: .same(proto: "UPLOAD_LIVE_FILE"),
    200033: .same(proto: "LIVE_FILE_REVIEW_RESULT_PUSH"),
    200034: .same(proto: "UPDATE_LIVE_USER"),
    200035: .same(proto: "SEARCH_LIVE_SHARE_CANDIDATE"),
    200036: .same(proto: "SEND_LIVE_SHARE_MESSAGE"),
    200037: .same(proto: "POLLING_LIVE_STATISTICS"),
    200038: .same(proto: "CREATE_LIVE_ACCESSORY"),
    200039: .same(proto: "DELETE_LIVE_ACCESSORY"),
    200040: .same(proto: "UPDATE_LIVE_ACCESSORY"),
    200041: .same(proto: "MGET_LIVE_ACCESSORY_BY_ID"),
    200042: .same(proto: "LIVE_RESOURCE_RISK_CHECK"),
    200043: .same(proto: "CLOSE_LIVE_WINDOW_NOTICE"),
    200044: .same(proto: "GET_LIVE_PERMISSION_MEMBERS"),
    200045: .same(proto: "GET_LIVE_PERMISSION_CHAT_PAGED"),
    210000: .same(proto: "GET_ASSOCIATED_LIVE_STATUS_WITH_EVENT_ID"),
    210001: .same(proto: "PUSH_ASSOCIATED_LIVE_STATUS"),
    220000: .same(proto: "PUSH_LIVE_ACCESSORIES"),
    230001: .same(proto: "FETCH_LIVE_MESSAGES"),
    230002: .same(proto: "SEND_LIVE_MESSAGE"),
    230003: .same(proto: "DELETE_LIVE_MESSAGE"),
    230004: .same(proto: "PIN_LIVE_MESSAGE"),
    230005: .same(proto: "LIVE_BAN_USER"),
    230006: .same(proto: "GET_LIVE_BANNED_USER"),
    240001: .same(proto: "GET_LIVE_LIST"),
    240002: .same(proto: "GET_MORE_LIVES"),
    240003: .same(proto: "DELETE_LIVE"),
    240004: .same(proto: "CMS_CREATE_LIVE"),
    240005: .same(proto: "CMS_GET_LIVE_INFO"),
    240006: .same(proto: "UPDATE_LIVE_CONFIG"),
    240007: .same(proto: "UPDATE_STREAM"),
    240008: .same(proto: "GET_STREAM_PUSH_INFO"),
    240009: .same(proto: "CHECK_CONTENT_TEXT"),
    240010: .same(proto: "GET_LIVE_STATIC_RESOURCE_V2"),
    240011: .same(proto: "GET_LIVE_THEME_COLOR"),
    240012: .same(proto: "GET_LIVE_CONFIG_CONDITION"),
    800021: .same(proto: "WHITEBOARD_START"),
    800022: .same(proto: "WHITEBOARD_STOP"),
    800023: .same(proto: "FETCH_ALL_WHITEBOARD_DATA"),
    900000: .same(proto: "PULL_MESSAGE_DOC_PERMS"),
    900001: .same(proto: "PUSH_CIPHER_CHANGE_EVENT"),
    900002: .same(proto: "PULL_CHANGED_CIPHER_KEYS"),
    900003: .same(proto: "TRANSLATE_MESSAGE_URL_PREVIEW"),
    900004: .same(proto: "PULL_MESSAGE_LAST_VISIBLE_INFO"),
    1000001: .same(proto: "SYNC_CALENDARS"),
    1000002: .same(proto: "SAVE_CALENDARS"),
    1000003: .same(proto: "PULL_CALENDAR_USER_ID_ROLES"),
    1000004: .same(proto: "PULL_CALENDAR_BY_IDS"),
    1000005: .same(proto: "PUSH_CHANGED_CALENDAR_IDS"),
    1000006: .same(proto: "PULL_CHATTER_CALENDAR_MAP"),
    1000007: .same(proto: "SUBSCRIBE_CALENDAR"),
    1000008: .same(proto: "UNSUBSCRIBE_CALENDAR"),
    1000009: .same(proto: "GET_GOOGLE_AUTH_URL"),
    1000010: .same(proto: "REVOKE_GOOGKE_TOKEN"),
    1000011: .same(proto: "SUBSCRIBE_AND_GET_LATEST_UPDATED_CALENDARS"),
    1000012: .same(proto: "SAVE_CALENDAR_SETTING"),
    1000013: .same(proto: "PULL_CALENDAR_SETTING"),
    1000014: .same(proto: "SEARCH_GUESTS"),
    1000015: .same(proto: "PULL_GROUPS_CHATTERS"),
    1000016: .same(proto: "SEARCH_MEETING_ROOMS"),
    1000017: .same(proto: "MULTI_CALENDAR_SEARCH"),
    1000018: .same(proto: "PULL_MEETING_ROOMS_SUBSCRIBER"),
    1000019: .same(proto: "SAVE_CALENDAR_SETTING_PB"),
    1000020: .same(proto: "PULL_CALENDAR_SETTING_PB"),
    1000021: .same(proto: "GEN_PASSWORD_FOR_CALDAV"),
    1000022: .same(proto: "CHANGE_PASSWORD_FOR_CALDAV"),
    1000023: .same(proto: "DELETE_CALDAV_USER_PASSWORD"),
    1000024: .same(proto: "GET_CALDAV_PASSWORD_LIST"),
    1000025: .same(proto: "GET_LAST_USED_RESOURCES"),
    1000026: .same(proto: "GET_LAST_INVITED_GUESTS"),
    1000027: .same(proto: "PULL_MEETING_ROOM_VIEW_CALENDARS"),
    1000028: .same(proto: "SUBSCRIBE_MEETING_ROOM_VIEW_CALENDARS"),
    1000029: .same(proto: "UNSUBSCRIBE_MEETING_ROOM_VIEW_CALENDARS"),
    1000030: .same(proto: "MSUBSCRIBE_CALENDARS"),
    1000031: .same(proto: "GET_MEETING_ROOM_VIEW_CALENDARS"),
    1000032: .same(proto: "MGET_CALENDARS_WITH_IDS"),
    1000033: .same(proto: "MUNSUBSCRIBE_CALENDARS"),
    1000034: .same(proto: "GET_FREE_BUSY_ACCESSIBLE_USERS"),
    1000035: .same(proto: "SAVE_CALENDAR_USER_DEVICE_SETTING"),
    1000036: .same(proto: "GET_PLACE_BY_ID"),
    1000037: .same(proto: "GET_PLACE_TIPS"),
    1000038: .same(proto: "SEARCH_ATTENDEE_IN_CHAT"),
    1000039: .same(proto: "MGET_CALENDAR_USER_DEVICE_SETTING"),
    1000040: .same(proto: "GET_USER_CALENDAR_IDS"),
    1000041: .same(proto: "GET_USER_PRIMARY_CALENDAR"),
    1000042: .same(proto: "MGET_CHAT_FREE_BUSY_FAVOR"),
    1000043: .same(proto: "SET_CHAT_FREE_BUSY_FAVOR"),
    1000044: .same(proto: "GET_EXTERNAL_ACCOUNT_LIST"),
    1000045: .same(proto: "SAVE_EXTERNAL_ACCOUNT_SETTING"),
    1000046: .same(proto: "GET_EXTERNAL_ACCOUNT_BY_MAIL"),
    1000047: .same(proto: "MARK_LARK_SERVER_MAIL_SELECTED"),
    1000048: .same(proto: "UPLOAD_CALENDARS_WITH_COMMIT"),
    1000049: .same(proto: "SAVE_CALENDAR_WITH_MEMBERS"),
    1000050: .same(proto: "LIST_CALENDAR_LIST"),
    1000051: .same(proto: "GET_RESOURCE_EQUIPMENTS"),
    1000052: .same(proto: "FILTER_MRVIEW_RESOURCE_CALENDAR"),
    1000053: .same(proto: "PULL_MEETING_ROOM_STATUS_INFORMATION"),
    1000054: .same(proto: "GET_RESOURCE_CHECK_IN_INFO_WITH_TOKEN"),
    1000055: .same(proto: "CHECK_IN_BY_QR_CODE"),
    1000056: .same(proto: "VERIFY_CALENDAR_LIST"),
    1000057: .same(proto: "PULL_RESOURCE_CUSTOMIZATION_BY_CONTACT_ID"),
    1000058: .same(proto: "PULL_ALL_MEETING_ROOMS_IN_TENANT"),
    1000059: .same(proto: "GET_CALENDAR_EVENT_FROM_APPLINK"),
    1000060: .same(proto: "BINDING_EXCHANGE_ACCOUNT"),
    1000061: .same(proto: "REVOKE_EXCHANGE_ACCOUNT"),
    1000062: .same(proto: "PULL_DEPARTMENTS_CHATTERS"),
    1000063: .same(proto: "MGET_DEPARTMENTS_MEMBER_COUNT"),
    1000064: .same(proto: "GET_CALENDAR_INFO_BY_ID"),
    1000065: .same(proto: "PATCH_CALENDAR"),
    1000066: .same(proto: "SHARE_CALENDAR"),
    1000067: .same(proto: "CREATE_CALENDAR"),
    1000068: .same(proto: "GET_CALENDAR_ID_BY_SHARE_TOKEN"),
    1000069: .same(proto: "PULL_MEETING_ROOM_AND_LEVEL_INFO"),
    1000070: .same(proto: "PULL_ALL_MEETING_ROOM_AND_LEVEL_INFO"),
    1000071: .same(proto: "SEARCH_MEETING_ROOMS_V2"),
    1000072: .same(proto: "PULL_CALENDAR_TENANT_SETTING_PB"),
    1001001: .same(proto: "WEB_LIST_CALENDARS"),
    1001002: .same(proto: "WEB_BATCH_SUBSCRIBE_CALENDARS"),
    1001003: .same(proto: "WEB_BATCH_UNSUBSCRIBE_CALENDARS"),
    1001004: .same(proto: "WEB_CREATE_CALENDAR"),
    1001005: .same(proto: "WEB_DELETE_CALENDAR"),
    1001006: .same(proto: "WEB_UPDATE_CALENDAR"),
    1001008: .same(proto: "WEB_MGET_CALENDARS_WITH_IDS"),
    1002001: .same(proto: "WEB_LIST_CALENDAR_EVENTS"),
    1002002: .same(proto: "WEB_PULL_CALENDAR_EVENTS"),
    1002003: .same(proto: "WEB_CREATE_EVENT"),
    1002004: .same(proto: "WEB_UPDATE_EVENT"),
    1002005: .same(proto: "WEB_DELETE_EVENT"),
    1002006: .same(proto: "WEB_MGET_EVENTS_WITH_IDS"),
    1002007: .same(proto: "WEB_GET_GROUP_ATTENDEES_BY_GROUP_IDS"),
    1002008: .same(proto: "WEB_GET_USER_ATTENDEES_BY_USER_IDS"),
    1002009: .same(proto: "WEB_GET_ATTENDEES_BY_CALENDAR_IDS"),
    1002010: .same(proto: "WEB_LIST_OPTIMIZED_CALENDAR_EVENTS"),
    1002011: .same(proto: "WEB_LIST_FIRST_SCREEN_CALENDAR_EVENTS"),
    1002012: .same(proto: "WEB_SHARE_CALENDAR_EVENT"),
    1003001: .same(proto: "RESOURCE_MANAGEMENT_GET_INSTANCES"),
    1003002: .same(proto: "RESOURCE_MANAGEMENT_GET_EVENT"),
    1003003: .same(proto: "RESOURCE_MANAGEMENT_CREATE_EVENT"),
    1003004: .same(proto: "RESOURCE_MANAGEMENT_UPDATE_EVENT"),
    1003005: .same(proto: "RESOURCE_MANAGEMENT_DELETE_EVENT"),
    1003006: .same(proto: "RESOURCE_MANAGEMENT_GET_CONFLICT_EVENT_INFO"),
    1003007: .same(proto: "RESOURCE_MANAGEMENT_GET_RESOURCE_ACCESS_ROLE"),
    1003008: .same(proto: "RESOURCE_MANAGEMENT_LIST_BUILDINGS"),
    1003009: .same(proto: "RESOURCE_MANAGEMENT_LIST_RESOURCES"),
    1003010: .same(proto: "RESOURCE_MANAGEMENT_SEARCH_MEETING_ROOMS"),
    1010001: .same(proto: "SYNC_CALENDAR_EVENTS"),
    1010002: .same(proto: "PUSH_CALENDAR_EVENT_REMINDER"),
    1010003: .same(proto: "PULL_CALENDAR_EVENTS_WITH_REF_IDS"),
    1010004: .same(proto: "PULL_CALENDAR_MEETING_ROOMS"),
    1010005: .same(proto: "PULL_CALENDAR_RESOURCES_BY_ID"),
    1010006: .same(proto: "QUERY_INSTANCE"),
    1010007: .same(proto: "MGET_CALENDAR_EVENTS_WITH_IDS"),
    1010008: .same(proto: "SEARCH_CALENDAR_CONTACTS"),
    1010009: .same(proto: "PULL_MEETING_ROOM_BUILDINGS"),
    1010010: .same(proto: "PULL_MEETING_ROOMS_IN_BUILDING"),
    1010011: .same(proto: "PULL_MEETINGS_BY_CHAT_IDS"),
    1010012: .same(proto: "QUIT_MEETING"),
    1010013: .same(proto: "MARK_MEETING_ENTERED"),
    1010014: .same(proto: "UPGRADE_TO_MEETING"),
    1010015: .same(proto: "BATCH_QUERY_INSTANCE"),
    1010016: .same(proto: "JOIN_CALENDAR_EVENT"),
    1010017: .same(proto: "GET_CALENDAR_EVENT_INFO"),
    1010018: .same(proto: "MARK_SCROLL_CLICKED"),
    1010019: .same(proto: "BATCH_QUERY_EVENTS_DIFF"),
    1010020: .same(proto: "GET_BUSY_USER"),
    1010021: .same(proto: "CLOSE_EVENT_REMINDER_CARD"),
    1010022: .same(proto: "TRANSFER_CALENDAR_EVENT"),
    1010023: .same(proto: "MGET_CALENDAR_EVENTS_WITH_KEY"),
    1010024: .same(proto: "GET_RESOURCES_BY_CALENDAR_IDS"),
    1010025: .same(proto: "GET_RESOURCES_WITH_TOKEN"),
    1010026: .same(proto: "SEIZE_RESOURCE"),
    1010027: .same(proto: "Set_Whether_Pop_Up"),
    1010028: .same(proto: "CREATE_MEETING_MINUTE"),
    1010029: .same(proto: "MEETING_MINUTE_UPDATE_CHECK"),
    1010030: .same(proto: "GET_VCHAT_BY_EVNET"),
    1010031: .same(proto: "GET_VCHAT_STATUS"),
    1010032: .same(proto: "GET_EVENT_INFO_BY_VCHAT_ID"),
    1010033: .same(proto: "UPGRADE_TO_CHAT"),
    1010034: .same(proto: "DISPLAY_TRANSFER_CHAT_SCROLL_CHECK"),
    1010035: .same(proto: "OPTIMIZED_SYNC_CALENDAR_EVENTS"),
    1010036: .same(proto: "SEARCH_CALENDAR_EVENT"),
    1010037: .same(proto: "GET_AUTHORIZED_CALENDAR_EVENT_WITH_KEY"),
    1010038: .same(proto: "GET_USER_2_CALENDAR_BOT_CHAT_ID"),
    1010039: .same(proto: "MGET_IS_JOINED_EVENT_STATUS"),
    1010040: .same(proto: "JOIN_MEETING_CHAT"),
    1010041: .same(proto: "GET_EVENT_SHARE_LINK"),
    1010042: .same(proto: "PULL_EVENT_GROUP_ATTENDEE_MEMBERS"),
    1010043: .same(proto: "PULL_EVENT_GROUPS_SIMPLE_MEMBERS"),
    1010044: .same(proto: "SWITCH_EVENT_CALENDAR"),
    1010045: .same(proto: "GET_ROOM_VIEW_INSTANCES"),
    1010046: .same(proto: "GET_INDIVIDUAL_ATTENDEES_BY_PAGE"),
    1010047: .same(proto: "PULL_CALENDAR_INSTANCES"),
    1010048: .same(proto: "LIST_CALENDAR_EVENTS"),
    1010049: .same(proto: "SAVE_CALENDAR_EVENTS"),
    1010050: .same(proto: "GET_EVENT_GROUP_ATTENDEE_WITH_KEY_FOR_COPY"),
    1010051: .same(proto: "GET_EVENT_INDIVIDUAL_ATTENDEE_WITH_KEY_FOR_COPY"),
    1011731: .same(proto: "SEND_IMAGE_TO_OCR"),
    1011741: .same(proto: "PULL_PERMISSION"),
    1011742: .same(proto: "PUSH_PERMISSION_EVENT"),
    1011761: .same(proto: "UPDATE_USER_RECENTLY_USED_EMOJI"),
    1011771: .same(proto: "PULL_SPLASH_AD"),
    1011791: .same(proto: "GET_ADMIN_PERMISSION_INFO"),
    1011801: .same(proto: "GET_MAIL_WEB_TAB_VISIBLE"),
    1020001: .same(proto: "PUSH_CALENDAR_EVENT_INVITATION"),
    1020002: .same(proto: "REPLY_CALENDAR_EVENT_INVITATION"),
    1020003: .same(proto: "PUSH_CALENDAR_EVENT_SYNC_NOTIFICATION"),
    1020004: .same(proto: "PUSH_CALENDAR_EVENT_CANCEL_NOTIFICATION"),
    1020005: .same(proto: "PUSH_REPLY_CALENDAR_EVENT_INVITATION"),
    1020006: .same(proto: "PUSH_CALENDAR_EVENT_UPDATE_NOTIFICATION"),
    1020007: .same(proto: "PUSH_CALENDAR_EVENT_RESCHEDULE_NOTIFICATION"),
    1020008: .same(proto: "PUSH_CALENDAR_SYNC_NOTIFICATION"),
    1020009: .same(proto: "PUSH_BIND_GOOGLE_SUCCESS_NOTIFICATION"),
    1020010: .same(proto: "PUSH_REVOKE_GOOGLE_SUCCESS_NOTIFICATION"),
    1020011: .same(proto: "PUSH_CALENDAR_SETTING_CHANGE_NOTIFICATION"),
    1020012: .same(proto: "PUSH_CALENDAR_SETTING_PB_CHANGE_NOTIFICATION"),
    1020013: .same(proto: "PUSH_MEETING_INFO_NOTIFICATION"),
    1020014: .same(proto: "PUSH_CALENDAR_EVENT_WITH_DATA"),
    1020015: .same(proto: "PUSH_SHARED_CALENDAR_EVENT_CHANGE_NOTIFICATION"),
    1020016: .same(proto: "PUSH_REMINDER_CLOSED_NOTIFICATION"),
    1020017: .same(proto: "PUSH_SHOW_SUBSCRIBED_CALENDAR_NOTIFICATION"),
    1020018: .same(proto: "PUSH_CLEAR_CALENDAR_EVENT_NOTIFICATION"),
    1020019: .same(proto: "PUSH_SCROLL_CLOSED_NOTIFICATION"),
    1020020: .same(proto: "PUSH_EXTERNAL_ACCOUNT_SETTING_SYNC_NOTIFICATION"),
    1020021: .same(proto: "PUSH_GOOGLE_BIND_SETTING_CALLBACK"),
    1020022: .same(proto: "PUSH_CALENDAR_EVENT_VCHAT_CHANGE"),
    1020023: .same(proto: "PUSH_EXTERNAL_CALENDAR_CHANGE_NOTIFICATION"),
    1021001: .same(proto: "SET_INSTANCE_IMPORTANCE_SCORE_FEEDBACK"),
    1021002: .same(proto: "GET_INSTANCE_IMPORTANCE_SCORE"),
    1030000: .same(proto: "PUSH_UPLOAD_ENTITY_TASK"),
    1030001: .same(proto: "PUT_ENTITY"),
    1030002: .same(proto: "PUSH_MEETING_MINUTE_EDITORS"),
    1040001: .same(proto: "MGET_MAIL_CALENDAR_INFO"),
    1050003: .same(proto: "GET_TODO_HISTORY_COMMITS"),
    1050004: .same(proto: "POST_SYNC_TODO_COMMITS"),
    1050005: .same(proto: "PULL_SYNC_TODO_ITEMS"),
    1050006: .same(proto: "GET_TODO_ITEMS"),
    1050007: .same(proto: "MGET_TODO_BY_GUID"),
    1050008: .same(proto: "GET_RECOMMENDED_CONTENTS"),
    1050009: .same(proto: "GET_TODO_REFER_RESOURCES"),
    1050010: .same(proto: "MERGE_MESSAGES_AS_TODO_RESOURCE"),
    1050011: .same(proto: "MERGE_TOPIC_AS_TODO_RESOURCE"),
    1050012: .same(proto: "FOLLOW_TODO"),
    1050013: .same(proto: "GET_TODO_SETTING"),
    1050014: .same(proto: "SAVE_TODO_SETTING"),
    1050015: .same(proto: "GET_CHAT_TODO_STATUS"),
    1050016: .same(proto: "GET_CHAT_TODOS"),
    1050017: .same(proto: "GET_CHAT_COMPLETED_TODOS"),
    1050018: .same(proto: "LIST_DOC_TODOS"),
    1050019: .same(proto: "GET_TODO_MSG_CARD_PERMISSION"),
    1050020: .same(proto: "UPDATE_TODO_MSG_CARDS"),
    1050100: .same(proto: "UPDATE_TODO"),
    1050101: .same(proto: "DELETE_TODOS"),
    1050102: .same(proto: "EXIT_COLLABORATION_TODO"),
    1050103: .same(proto: "UPDATE_TODO_COMPLETE_STATUS"),
    1050201: .same(proto: "CREATE_TODO_COMMENT"),
    1050202: .same(proto: "UPDATE_TODO_COMMENT"),
    1050203: .same(proto: "DELETE_TODO_COMMENT"),
    1050204: .same(proto: "MGET_TODO_COMMENTS"),
    1050205: .same(proto: "MGET_TODO_COMMENTS_WITH_POSITIONS"),
    1050206: .same(proto: "LIST_TODO_COMMENTS"),
    1050207: .same(proto: "CREATE_TODO_COMMENT_REACTION"),
    1050208: .same(proto: "DELETE_TODO_COMMENT_REACTION"),
    1050300: .same(proto: "SEND_TODO_HEARTBEAT"),
    1051001: .same(proto: "PUSH_TODO_SYNC_NOTIFICATION"),
    1051002: .same(proto: "PUSH_TODO_REMINDER_NOTIFICATION"),
    1051003: .same(proto: "PUSH_TODO_CLEAR_NOTIFICATION"),
    1051004: .same(proto: "PUSH_TODO_SETTING_NOTIFICATION"),
    1051005: .same(proto: "PUSH_TODO_COMMENT_NOTIFICATION"),
    1051006: .same(proto: "PUSH_TODO_COMMENT_REACTION_NOTIFICATION"),
    1055001: .same(proto: "MOMENTS_CREATE_POST"),
    1055002: .same(proto: "MOMENTS_DELETE_POST"),
    1055003: .same(proto: "MOMENTS_CREATE_COMMENT"),
    1055004: .same(proto: "MOMENTS_DELETE_COMMENT"),
    1055005: .same(proto: "MOMENTS_CREATE_REACTION"),
    1055006: .same(proto: "MOMENTS_DELETE_REACTION"),
    1055007: .same(proto: "MOMENTS_SHARE_POST"),
    1055008: .same(proto: "MOMENTS_FOLLOW_USER"),
    1055009: .same(proto: "MOMENTS_UNFOLLOW_USER"),
    1055010: .same(proto: "MOMENTS_LIST_BROADCASTS"),
    1055011: .same(proto: "MOMENTS_LIST_USER_FOLLOWERS"),
    1055012: .same(proto: "MOMENTS_LIST_USER_FOLLOWINGS"),
    1055013: .same(proto: "MOMENTS_LIST_NOTIFICATIONS"),
    1055014: .same(proto: "MOMENTS_ADMIN_OPERATION"),
    1055016: .same(proto: "MOMENTS_REPORT"),
    1055017: .same(proto: "MOMENTS_GET_USER_CONFIG_AND_SETTINGS"),
    1055019: .same(proto: "MOMENTS_GET_POST_DETAIL"),
    1055020: .same(proto: "MOMENTS_MGET_CIRCLES"),
    1055021: .same(proto: "MOMENTS_MGET_MOMENT_USERS"),
    1055022: .same(proto: "MOMENTS_MGET_IS_USER_FOLLOWING"),
    1055023: .same(proto: "MOMENTS_PUT_READ_NOTIFICATIONS"),
    1055024: .same(proto: "MOMENTS_MGET_POSTS"),
    1055025: .same(proto: "MOMENTS_MGET_COMMENTS"),
    1055026: .same(proto: "MOMENTS_MGET_CATEGORIES"),
    1055027: .same(proto: "MOMENTS_LIST_CATEGORIES"),
    1055028: .same(proto: "MOMENTS_LIST_TABS"),
    1055029: .same(proto: "MOMENTS_CONFIG_TABS"),
    1055030: .same(proto: "MOMENTS_GET_CATEGORY_DETAIL"),
    1055031: .same(proto: "MOMENTS_LIST_HASHTAGS_BY_USER_INPUT"),
    1055032: .same(proto: "MOMENTS_GET_HASHTAG_DETAIL"),
    1055033: .same(proto: "MOMENTS_CREATE_SUBSCRIPTION_DRAFT"),
    1055034: .same(proto: "MOMENTS_GET_SUBSCRIPTION_BACKSTAGE_URL"),
    1055101: .same(proto: "MOMENTS_GET_BADGE"),
    1055102: .same(proto: "MOMENTS_GET_RECOMMEND_FEED"),
    1055103: .same(proto: "MOMENTS_GET_FOLLOWING_FEED"),
    1055105: .same(proto: "MOMENTS_GET_USER_PROFILE"),
    1055106: .same(proto: "MOMENTS_LIST_USER_POSTS"),
    1055107: .same(proto: "MOMENTS_LIST_COMMENTS"),
    1055108: .same(proto: "MOMENTS_LIST_REACTIONS"),
    1055109: .same(proto: "MOMENTS_PULL_REACTIONS_SET"),
    1055110: .same(proto: "MOMENTS_GET_USER_SETTING"),
    1055111: .same(proto: "MOMENTS_PATCH_USER_SETTING"),
    1055112: .same(proto: "MOMENTS_COUNT_OPERATION"),
    1055113: .same(proto: "MOMENTS_GET_RECOMMEND_AT_LIST"),
    1055114: .same(proto: "MOMENTS_LIST_CATEGORY_POSTS"),
    1055115: .same(proto: "MOMENTS_PUSH_USER_SETTING"),
    1055116: .same(proto: "MOMENTS_PULL_TAB_NOTIFICATION"),
    1055117: .same(proto: "MOMENTS_PUT_TAB_NOTIFICATION"),
    1055118: .same(proto: "MOMENTS_PUSH_TAB_NOTIFICATION"),
    1055119: .same(proto: "MOMENTS_LIST_HASHTAG_POSTS"),
    1055151: .same(proto: "MOMENTS_GET_ANONYMOUS_INFO"),
    1055152: .same(proto: "MOMENTS_PULL_NICKNAMES"),
    1055153: .same(proto: "MOMENTS_PULL_NICKNAME_AVATAR"),
    1055154: .same(proto: "MOMENTS_CREATE_NICKNAME_USER"),
    1055155: .same(proto: "MOMENTS_CHECK_SECRET_CHAT_STATUS"),
    1055156: .same(proto: "MOMENTS_ASK_FOR_SECRET_CHAT"),
    1055157: .same(proto: "MOMENTS_ACCEPT_SECRET_CHAT"),
    1055201: .same(proto: "MOMENTS_PUSH"),
    1060001: .same(proto: "PULL_NAVIGATION"),
    1060002: .same(proto: "PUT_NAVIGATION_CONFIRM"),
    1060003: .same(proto: "PUSH_NAVIGATION"),
    1060004: .same(proto: "PATCH_NAVIGATION"),
    1060005: .same(proto: "PULL_NAVIGATION_V2"),
    1060006: .same(proto: "PULL_CONTACT_ENTRIES"),
    1060007: .same(proto: "PULL_NAVIGATION_ORDER"),
    1060008: .same(proto: "PULL_NAVIGATION_APP_INFO"),
    1060009: .same(proto: "PUSH_NAVIGATION_ORDER"),
    1060010: .same(proto: "PATCH_NAVIGATION_ORDER"),
    1070001: .same(proto: "CREATE_COMMENT_THREAD"),
    1070002: .same(proto: "GET_COMMENT_THREADS"),
    1070003: .same(proto: "SET_COMMENT_THREAD_VISIBILITY"),
    1070004: .same(proto: "DELETE_COMMENT_THREAD"),
    1070005: .same(proto: "ADD_COMMENT"),
    1070006: .same(proto: "EDIT_COMMENT"),
    1070007: .same(proto: "DELETE_COMMENT"),
    1070008: .same(proto: "GRANT_ENTITY_PERMISSION"),
    1070009: .same(proto: "GET_THREAD_PERMISSION"),
    1070010: .same(proto: "REVOKE_PERMISSION"),
    1070011: .same(proto: "ADD_REACTION_TO_COMMENT"),
    1070012: .same(proto: "DELETE_COMMENT_REACTION"),
    1070013: .same(proto: "SET_THREAD_SHARED_STRATEGY"),
    1070014: .same(proto: "UPLOAD_IMAGE"),
    1070015: .same(proto: "GET_LOGIN_USER_ID"),
    1070016: .same(proto: "GET_IS_URL_SUPPORTED"),
    1070017: .same(proto: "SEARCH_COMMENT_THREAD"),
    1070018: .same(proto: "ANALYZE_WEB_PAGE"),
    1070019: .same(proto: "SHARE_EMAIL_TO_CHAT"),
    1070020: .same(proto: "GET_MESSAGE"),
    1070021: .same(proto: "CHECK_AUTH_PERMISSION"),
    1070022: .same(proto: "REVOKE_AUTH_PERMISSION"),
    1070023: .same(proto: "GET_AUTH_ENTITIES"),
    1070024: .same(proto: "GET_IMAGE"),
    1071001: .same(proto: "AI_TRANSLATE_IMG"),
    1071002: .same(proto: "GET_SMART_COMPOSE"),
    1071003: .same(proto: "GET_COMPOSER_SETTING"),
    1071004: .same(proto: "SET_COMPOSER_SETTING"),
    1071005: .same(proto: "PUSH_COMPOSER_SETTING"),
    1071006: .same(proto: "GET_SMART_REPLY"),
    1071007: .same(proto: "GET_SMART_MEMORY"),
    1071008: .same(proto: "GET_ENTERPRISE_TOPIC"),
    1071009: .same(proto: "SLASH_COMMAND"),
    1071010: .same(proto: "POST_ENTERPRISE_TOPIC"),
    1071011: .same(proto: "ENTERPRISE_TOPIC_SEED_USER_ENROLL"),
    1071012: .same(proto: "ENTERPRISE_TOPIC_RECORD"),
    1071013: .same(proto: "GET_CHAT_CREATE_CHATTERS_RECOMMEND"),
    1071014: .same(proto: "GET_SMART_WIDGET"),
    1071015: .same(proto: "ENTERPRISE_TOPIC_USER_CARD_ACTION"),
    1071016: .same(proto: "GET_PERSONALIZATION_SETTING"),
    1071017: .same(proto: "SET_PERSONALIZATION_SETTING"),
    1071018: .same(proto: "PUSH_PERSONALIZATION_SETTING"),
    1071019: .same(proto: "GET_SMART_REPLY_SETTING"),
    1071020: .same(proto: "SET_SMART_REPLY_SETTING"),
    1071021: .same(proto: "PUSH_SMART_REPLY_SETTING"),
    1071022: .same(proto: "PULL_SLASH_COMMANDS"),
    1071023: .same(proto: "POST_AS_FEEDBACK"),
    1071024: .same(proto: "GET_SEARCH_RECOMMEND"),
    1071025: .same(proto: "PULL_SEARCH_PLACEHOLDER"),
    1071026: .same(proto: "PUSH_SEARCH_PLACEHOLDER"),
    1071027: .same(proto: "GET_GEC_SETTING"),
    1071028: .same(proto: "SET_GEC_SETTING"),
    1071029: .same(proto: "PUSH_GEC_SETTING"),
    1071030: .same(proto: "GET_AI_VOCAB"),
    1071031: .same(proto: "CREATE_AI_VOCAB"),
    1071032: .same(proto: "DELETE_AI_VOCAB"),
    1071033: .same(proto: "GET_AS_SETTING"),
    1071034: .same(proto: "SET_AS_SETTING"),
    1071035: .same(proto: "PUSH_AS_SETTING"),
    1071036: .same(proto: "SMART_MOSAIC"),
    1071037: .same(proto: "GET_AI_TEXT_CORRECTION"),
    1071038: .same(proto: "GET_FEEDBACK_REASON_ITEMS"),
    1071039: .same(proto: "GET_UNIVERSAL_RECOMMEND"),
    1071040: .same(proto: "POST_MAGIC_SHARE_INFO"),
    1072001: .same(proto: "GET_ACTIVITY_BANNER"),
    1072002: .same(proto: "GET_ONBOARDING_SOURCE_CONFIG"),
    1080001: .same(proto: "GET_TIMEZONE_BY_CITY"),
    1100001: .same(proto: "PULL_BANNER"),
    1100002: .same(proto: "SET_BANNER_STATUS"),
    1100003: .same(proto: "PUSH_BANNER"),
    1100301: .same(proto: "MGET_CONTACT_POINTS_USER_INFO"),
    1100302: .same(proto: "BATCH_UPLOAD_CONTACT_POINTS"),
    1100303: .same(proto: "GET_CHANGED_CONTACT_POINTS_USER_INFO"),
    1100304: .same(proto: "MGET_BLOCK_USER_INFO"),
    1100305: .same(proto: "MGET_BLOCK_USER_NUM"),
    1100308: .same(proto: "SETUP_BLOCK_USER"),
    1100310: .same(proto: "PULL_CONTACTS_V2"),
    1100311: .same(proto: "MGET_FRIENDSHIP"),
    1100315: .same(proto: "GET_USER_BLOCK_STATUS"),
    1100316: .same(proto: "BLOCK_STATUS_CHANGE_EVENT"),
    1100317: .same(proto: "SETUP_MSG_AUTH"),
    1100318: .same(proto: "GET_MSG_AUTH"),
    1100319: .same(proto: "PULL_USER_RELATION"),
    1100320: .same(proto: "IGNORE_CONTACT_APPLY"),
    1100321: .same(proto: "MPUT_CONTACT_APPLICATION"),
    1100322: .same(proto: "PULL_AUTH_CHATTER_INFO"),
    1100323: .same(proto: "GET_USER_ID_AND_RELATION"),
    1100801: .same(proto: "GET_CONTACT_OAUTH_URL"),
    1100802: .same(proto: "GET_OAUTH_CONTACTS"),
    1100803: .same(proto: "GET_PENDING_REVIEW_COUNT"),
    1101400: .same(proto: "PUT_TRANSLATION_FEEDBACK_V2"),
    1101501: .same(proto: "CREATION_DOCS_NOTICE_NEW"),
    1101502: .same(proto: "CREATION_DOCS_NOTICE_CHANGE"),
    1101601: .same(proto: "MGET_TAG_MENTION_ENTITIES"),
    1101701: .same(proto: "SEND_INVITATION_TO_INACTIVE"),
    1101702: .same(proto: "ONE_KEY_INVITE_INACTIVE"),
    1101703: .same(proto: "GET_INACTIVE_PARENTS"),
    1101704: .same(proto: "GET_DEPARTMENT_INACTIVE_INFO"),
    1101705: .same(proto: "GET_DEPARTMENT_INVITATION_URL"),
    1101721: .same(proto: "PUSH_LAN_TRANS_SENDER_ADDRS_SET"),
    1102001: .same(proto: "PULL_UG_SCENARIO"),
    1102002: .same(proto: "PULL_UG_SDK_SETTINGS"),
    1102003: .same(proto: "REPORT_UG_EVENT"),
    1102004: .same(proto: "PUSH_UG_SCENARIO_INFO"),
    1102201: .same(proto: "PUSH_BLOCK_EVENT"),
    1102202: .same(proto: "PUSH_KV"),
    1102203: .same(proto: "PUSH_BLOCK_ENTITY_UPDATE"),
    1102204: .same(proto: "PUSH_BLOCK_EXTENSION_UPDATE"),
    1102400: .same(proto: "PULL_NAMECARD_PROFILE"),
    1102401: .same(proto: "PUT_SINGLE_NAMECARD"),
    1102402: .same(proto: "PULL_NAMECARD_LIST"),
    1102403: .same(proto: "UPDATE_SINGLE_NAMECARD"),
    1102404: .same(proto: "DELETE_SINGLE_NAMECARD"),
    1102405: .same(proto: "PULL_NAMECARDS_BY_IDS"),
    1102406: .same(proto: "CHECK_CONTACT_POINT_DUPLICATE"),
    1102407: .same(proto: "CREATE_OR_UPDATE_SINGLE_NAMECARD"),
    1102501: .same(proto: "PUSH_TELE_MEESSAGE"),
    1102502: .same(proto: "PUSH_SYNC_MEESSAGE"),
    1102503: .same(proto: "SEND_SYNC_MEESSAGE"),
    1102601: .same(proto: "PULL_WATERMARK_CONFIG"),
    1102602: .same(proto: "GET_HIDDEN_WATERMARK_IMAGE"),
    1102603: .same(proto: "PUSH_WATERMARK_CONFIG"),
    1102701: .same(proto: "CREATE_TEAM"),
    1102702: .same(proto: "CREATE_TEAM_CHAT"),
    1102703: .same(proto: "BIND_TEAM_CHAT_PRE_CHECK"),
    1102704: .same(proto: "BIND_TEAM_CHAT"),
    1102705: .same(proto: "UNBIND_TEAM_CHAT"),
    1102706: .same(proto: "PATCH_TEAM"),
    1102707: .same(proto: "PATCH_TEAM_SETTING"),
    1102708: .same(proto: "PUT_TEAM_MEMBERS"),
    1102709: .same(proto: "DELETE_TEAM_MEMBERS"),
    1102710: .same(proto: "PULL_TEAMS_BY_IDS"),
    1102711: .same(proto: "PUSH_TEAM"),
    1102712: .same(proto: "PUSH_TEAM_SETTING"),
    1102713: .same(proto: "PUSH_TEAM_BASE_INFO"),
    1102714: .same(proto: "CHECK_NAME_AVAILABILITY"),
    1102715: .same(proto: "PATCH_TEAM_MEMBERS_ROLE"),
    1102716: .same(proto: "PULL_TEAM_MEMBERS"),
    1102717: .same(proto: "PUSH_TEAM_MEMBERS"),
    1102718: .same(proto: "PUT_TEAM_CHAT_CHATTERS"),
    1102719: .same(proto: "PATCH_TEAM_CHAT_BY_ID"),
    1102720: .same(proto: "PUT_CHATTER_VIA_TEAM_OPEN_CHAT"),
    1102801: .same(proto: "PULL_ITEMS"),
    1102802: .same(proto: "PULL_ITEMS_BY_IDS"),
    1102803: .same(proto: "REORDER_ITEMS"),
    1102804: .same(proto: "PUSH_ITEMS"),
    1102805: .same(proto: "PULL_TEAM_ITEM_IDS"),
    1102806: .same(proto: "PATCH_ITEM"),
    1102807: .same(proto: "PULL_ITEMS_BY_ENTITY_IDS"),
    1102900: .same(proto: "PULL_AVATAR_META"),
    1102901: .same(proto: "PUSH_SUBSCRIPTIONS_FEED"),
    1102902: .same(proto: "PULL_SUBSCRIPTIONS_FEEDS_BY_IDS"),
    1103001: .same(proto: "SEND_EM_TO_USER"),
    1103002: .same(proto: "CANCEL_EM"),
    1103003: .same(proto: "SEND_EM_INFO"),
    1103004: .same(proto: "RECEIVE_EM"),
    1103005: .same(proto: "PULL_EM_RECORDS"),
    1103006: .same(proto: "CHECK_EM_STATUS"),
    1103007: .same(proto: "EXIST_ACTIVE_EM_TASK"),
    1103021: .same(proto: "PULL_DATA_RETENTION_RULES"),
    1103101: .same(proto: "PULL_OFFLINE_SEARCH_PERMISSION"),
    1103102: .same(proto: "PUSH_OFFLINE_SEARCH_PERMISSION"),
    1103201: .same(proto: "GET_MEEGO_SHOW_ENABLE"),
    1103202: .same(proto: "GET_FEISHU_MEEGO_SHOW_ENABLE"),
    1103301: .same(proto: "OPEN_BANNER_PULL"),
    1103302: .same(proto: "OPEN_BANNER_PUSH"),
    1103303: .same(proto: "OPEN_BANNER_POST"),
    1103401: .same(proto: "PUSH_CHATTER_CUSTOM_STATUS"),
    1103402: .same(proto: "IS_ALLOWED_CREATE_USER_CUSTOM_STATUS"),
    1103403: .same(proto: "CREATE_USER_CUSTOM_STATUS"),
    1103404: .same(proto: "UPDATE_USER_CUSTOM_STATUS"),
    1103405: .same(proto: "PULL_USER_CUSTOM_STATUSES"),
    1103406: .same(proto: "DELETE_USER_CUSTOM_STATUSES"),
    1103408: .same(proto: "PULL_USER_TYPING_TRANSLATE_SETTINGS"),
    1103409: .same(proto: "PUSH_USER_TYPING_TRANSLATE_SETTINGS"),
    1103410: .same(proto: "UPLOAD_SYSTEM_TIMEZONE"),
    1103601: .same(proto: "PUSH_USER_MEDAL"),
    1103602: .same(proto: "GET_MEDAL_LIST"),
    1103603: .same(proto: "GET_MEDAL_DETAIL"),
    1103604: .same(proto: "SET_MEDAL"),
    1103605: .same(proto: "GET_USER_TAKING_MEDAL"),
    1103701: .same(proto: "PATCH_CHAT_TOP_NOTICE"),
    1103702: .same(proto: "PULL_CHAT_TOP_NOTICE_BY_IDS"),
    1103703: .same(proto: "CLOSE_CHAT_TOP_NOTICE"),
    1103704: .same(proto: "PUSH_CHAT_TOP_NOTICE"),
    1103705: .same(proto: "PUSH_CHAT_TOP_NOTICE_PERSONAL_STATE"),
    1103801: .same(proto: "GET_RETENTION_QUESTIONNAIRE"),
    1103802: .same(proto: "SUBMIT_RETENTION_QUESTIONNAIRE"),
    1103803: .same(proto: "GET_RETENTION_OPERATION_LINK"),
    1103804: .same(proto: "GET_WIDGET_APP_LIST"),
    1103805: .same(proto: "GET_MATERIALS_BY_SCENE"),
    1103901: .same(proto: "PATCH_CHATTER_EXTRA_STATES"),
    1103911: .same(proto: "PUSH_ATTENDANCE_REFRESH_CONFIG"),
    1103912: .same(proto: "PUSH_ATTENDANCE_TOP_SPEED_CLOCK_IN"),
    1103921: .same(proto: "PUBLISH_VOTE"),
    1103922: .same(proto: "VOTE"),
    1103923: .same(proto: "PUSH_VOTE_RESULT"),
    1103924: .same(proto: "MGET_VOTE_FIRST_SCREEN_RESULT"),
    1103925: .same(proto: "MGET_VOTE_RESULT"),
    1103926: .same(proto: "RETRANSMIT_VOTE"),
    1103927: .same(proto: "CLOSE_VOTE"),
    11034067: .same(proto: "PUT_USER_STATUS_CALENDAR_EVENTS"),
  ]
}

extension LarkNCExtensionPB_Improto_PayloadType: LarkHTTP._ProtoNameProviding {
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "PB2"),
    2: .same(proto: "JSON"),
  ]
}

extension LarkNCExtensionPB_Improto_PipeEntity: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PipeEntity"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "type"),
    3: .same(proto: "id"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._type)
      case 3: try decoder.decodeSingularInt64Field(value: &self._id)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._id {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Improto_PipeEntity, rhs: LarkNCExtensionPB_Improto_PipeEntity) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._id != rhs._id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Improto_VersionRange: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VersionRange"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
  ]

  public var isInitialized: Bool {
    if self._start == nil {return false}
    if self._end == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._start)
      case 2: try decoder.decodeSingularStringField(value: &self._end)
      default: break
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    if let v = self._start {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._end {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Improto_VersionRange, rhs: LarkNCExtensionPB_Improto_VersionRange) -> Bool {
    if lhs._start != rhs._start {return false}
    if lhs._end != rhs._end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//extension LarkNCExtensionPB_Improto_ClientAckResponse: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
//  public static let protoMessageName: String = _protobuf_package + ".ClientAckResponse"
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    1: .standard(proto: "action_type"),
//  ]
//
//  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularEnumField(value: &self._actionType)
//      default: break
//      }
//    }
//  }
//
//  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
//    if let v = self._actionType {
//      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  public static func ==(lhs: LarkNCExtensionPB_Improto_ClientAckResponse, rhs: LarkNCExtensionPB_Improto_ClientAckResponse) -> Bool {
//    if lhs._actionType != rhs._actionType {return false}
//    if lhs.unknownFields != rhs.unknownFields {return false}
//    return true
//  }
//}

//extension LarkNCExtensionPB_Improto_ClientAckResponse.ActionType: LarkHTTP._ProtoNameProviding {
//  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
//    0: .same(proto: "BeforePersist"),
//    1: .same(proto: "AfterPersist"),
//  ]
//}

extension LarkNCExtensionPB_Improto_Packet: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Packet"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .same(proto: "sid"),
    2: .standard(proto: "payload_type"),
    3: .same(proto: "cmd"),
    4: .same(proto: "status"),
    5: .same(proto: "payload"),
    6: .same(proto: "cid"),
    7: .standard(proto: "pipe_entity"),
    8: .standard(proto: "version_payloads"),
    9: .standard(proto: "pipe_entities"),
    10: .standard(proto: "wait_retry_interval"),
    11: .same(proto: "command"),
    12: .same(proto: "cursor"),
  ]

  fileprivate class _StorageClass {
    var _sid: String? = nil
    var _payloadType: LarkNCExtensionPB_Improto_PayloadType? = nil
    var _cmd: LarkNCExtensionPB_Improto_Command? = nil
    var _status: UInt32? = nil
    var _payload: Data? = nil
    var _cid: String? = nil
    var _pipeEntity: LarkNCExtensionPB_Improto_PipeEntity? = nil
    var _versionPayloads: [LarkNCExtensionPB_Improto_Packet.VersionPayload] = []
    var _pipeEntities: [LarkNCExtensionPB_Improto_PipeEntity] = []
    var _waitRetryInterval: UInt32? = nil
    var _command: Int32? = nil
    var _cursor: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sid = source._sid
      _payloadType = source._payloadType
      _cmd = source._cmd
      _status = source._status
      _payload = source._payload
      _cid = source._cid
      _pipeEntity = source._pipeEntity
      _versionPayloads = source._versionPayloads
      _pipeEntities = source._pipeEntities
      _waitRetryInterval = source._waitRetryInterval
      _command = source._command
      _cursor = source._cursor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._payloadType == nil {return false}
      if _storage._cmd == nil {return false}
      if let v = _storage._pipeEntity, !v.isInitialized {return false}
      if !LarkHTTP.Internal.areAllInitialized(_storage._versionPayloads) {return false}
      if !LarkHTTP.Internal.areAllInitialized(_storage._pipeEntities) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._sid)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._payloadType)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._cmd)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._status)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 6: try decoder.decodeSingularStringField(value: &_storage._cid)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._pipeEntity)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._versionPayloads)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._pipeEntities)
        case 10: try decoder.decodeSingularUInt32Field(value: &_storage._waitRetryInterval)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._command)
        case 12: try decoder.decodeSingularUInt64Field(value: &_storage._cursor)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._sid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._payloadType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      }
      if let v = _storage._cmd {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      }
      if let v = _storage._status {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._payload {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
      }
      if let v = _storage._cid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._pipeEntity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._versionPayloads.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._versionPayloads, fieldNumber: 8)
      }
      if !_storage._pipeEntities.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._pipeEntities, fieldNumber: 9)
      }
      if let v = _storage._waitRetryInterval {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._command {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
      }
      if let v = _storage._cursor {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Improto_Packet, rhs: LarkNCExtensionPB_Improto_Packet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sid != rhs_storage._sid {return false}
        if _storage._payloadType != rhs_storage._payloadType {return false}
        if _storage._cmd != rhs_storage._cmd {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._cid != rhs_storage._cid {return false}
        if _storage._pipeEntity != rhs_storage._pipeEntity {return false}
        if _storage._versionPayloads != rhs_storage._versionPayloads {return false}
        if _storage._pipeEntities != rhs_storage._pipeEntities {return false}
        if _storage._waitRetryInterval != rhs_storage._waitRetryInterval {return false}
        if _storage._command != rhs_storage._command {return false}
        if _storage._cursor != rhs_storage._cursor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LarkNCExtensionPB_Improto_Packet.VersionPayload: LarkHTTP.Message, LarkHTTP._MessageImplementationBase, LarkHTTP._ProtoNameProviding {
  public static let protoMessageName: String = LarkNCExtensionPB_Improto_Packet.protoMessageName + ".VersionPayload"
  public static let _protobuf_nameMap: LarkHTTP._NameMap = [
    1: .standard(proto: "version_range"),
    2: .same(proto: "payload"),
  ]

  fileprivate class _StorageClass {
    var _versionRange: LarkNCExtensionPB_Improto_VersionRange? = nil
    var _payload: Data? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _versionRange = source._versionRange
      _payload = source._payload
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._versionRange == nil {return false}
      if _storage._payload == nil {return false}
      if let v = _storage._versionRange, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: LarkHTTP.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._versionRange)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._payload)
        default: break
        }
      }
    }
  }

  public func traverse<V: LarkHTTP.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._versionRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._payload {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LarkNCExtensionPB_Improto_Packet.VersionPayload, rhs: LarkNCExtensionPB_Improto_Packet.VersionPayload) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._versionRange != rhs_storage._versionRange {return false}
        if _storage._payload != rhs_storage._payload {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
// swiftlint:enable all
