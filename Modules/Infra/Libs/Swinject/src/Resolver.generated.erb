//
//  Resolver.swift
//  Swinject
//
//  Created by CharlieSu on 4/29/20.
//  Copyright © 2020 Lark. All rights reserved.
//
// swiftlint:disable all
//
// NOTICE:
//
// Resolver.swift is generated from Resolver.erb by ERB.
// Do NOT modify Container.Arguments.swift directly.
// Instead, modify Resolver.erb and run `gencode` at the project root directory to generate the code.
//

% arg_count = 9

public extension Resolver {
    // 不提供推断serviceType的API，这样强制确认，避免出错。另外也可以通过主动写的type搜索到对应的调用

    /// 相当于resolve(type:), 但未注册，在测试阶段会崩溃, 方便提前发现集成问题
    func resolve<Service>(assert serviceType: Service.Type, name: String? = nil) throws -> Service {
        #if DEBUG || ALPHA
        do {
            let context: ResolverContext<Service, Resolver> = ResolverContext(name: name, resolver: self, arguments: {$0})
            return try _resolve(context: context)
        } catch let error as SwinjectError {
            fatalError("\(serviceType) \(name ?? "") resolve with error: \(error)")
        }
        #else
            let context: ResolverContext<Service, Resolver> = ResolverContext(name: name, resolver: self, arguments: {$0})
            return try _resolve(context: context)
        #endif
    }

// MARK: - failable API
    func resolve<Service>(type serviceType: Service.Type, name: String? = nil) throws -> Service {
        let context: ResolverContext<Service, Resolver> = ResolverContext(name: name, resolver: self, arguments: {$0})
        return try _resolve(context: context)
    }

% (1..arg_count).each do |i|
%   arg_types = (1..i).map { |n| "Arg#{n}" }.join(", ")
%   arg_param = i == 1 ? "argument arg1: Arg1" : "arguments arg1: Arg1, " + (2..i).map{ |n| "_ arg#{n}: Arg#{n}" }.join(", ")
%   arg_values = (1..i).map { |n| "arg#{n}" }.join(", ")
    func resolve<Service, <%= arg_types %>>(
        assert serviceType: Service.Type,
        name: String? = nil,
        <%= arg_param %>
    ) throws -> Service {
        #if DEBUG || ALPHA
        do {
            let context: ResolverContext<Service, (Resolver, <%= arg_types %>)> = ResolverContext(
                name: name, resolver: self, arguments: {($0, <%= arg_values %>)})
            return try _resolve(context: context)
        } catch let error as SwinjectError {
            fatalError("\(serviceType) \(name ?? "") resolve with error: \(error)")
        }
        #else
            let context: ResolverContext<Service, (Resolver, <%= arg_types %>)> = ResolverContext(
                name: name, resolver: self, arguments: {($0, <%= arg_values %>)})
            return try _resolve(context: context)
        #endif
    }
    func resolve<Service, <%= arg_types %>>(
        type serviceType: Service.Type,
        name: String? = nil,
        <%= arg_param %>
    ) throws -> Service {
        let context: ResolverContext<Service, (Resolver, <%= arg_types %>)> = ResolverContext(
            name: name, resolver: self, arguments: {($0, <%= arg_values %>)})
        return try _resolve(context: context)
    }
% end


// MARK: - Old API, return optional Service
    @available(*, deprecated, message: "resolve is deprecated. Use `resolve(type:) or resolve(assert:)` and avoid force unwrap instead.")
    func resolve<Service>(_ serviceType: Service.Type, name: String? = nil) -> Service? {
        let context: ResolverContext<Service, Resolver> = ResolverContext(name: name, resolver: self, arguments: {$0})
        context[.oldAPI] = true
        return try? _resolve(context: context)
    }
% (1..arg_count).each do |i|
%   arg_types = (1..i).map { |n| "Arg#{n}" }.join(", ")
%   arg_param = i == 1 ? "argument arg1: Arg1" : "arguments arg1: Arg1, " + (2..i).map{ |n| "_ arg#{n}: Arg#{n}" }.join(", ")
%   arg_values = (1..i).map { |n| "arg#{n}" }.join(", ")
    @available(*, deprecated, message: "resolve is deprecated. Use `resolve(type:) or resolve(assert:)` and avoid force unwrap instead.")
    func resolve<Service, <%= arg_types %>>(
        _ serviceType: Service.Type,
        name: String? = nil,
        <%= arg_param %>
    ) -> Service? {
        let context: ResolverContext<Service, (Resolver, <%= arg_types %>)> = ResolverContext(
            name: name, resolver: self, arguments: {($0, <%= arg_values %>)})
        context[.oldAPI] = true
        return try? _resolve(context: context)
    }
% end
}

// swiftlint:enable all
