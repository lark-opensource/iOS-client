//
//  BDPMetaTTCodeFactory.m
//  Timor
//
//  Created by houjihu on 2020/6/12.
//

#import "BDPMetaTTCodeFactory.h"
#import <ECOInfra/BDPLog.h>
#import <ECOInfra/BDPUtils.h>
#import <OPFoundation/EEFeatureGating.h>

@interface BDPMetaTTCodeFactory ()

/// 宿主应用周期内用同一个
@property (nonatomic, strong) BDPMetaTTCode *ttcode;
@property (nonatomic, assign) BOOL generatingTTCode;

@end

@implementation BDPMetaTTCodeFactory

/// 针对所有应用形态，APP生命周期内只需要一份单例即可
+ (instancetype)sharedInstance {
    static id instance;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        instance = [[[self class] alloc] init];
    });
    return instance;
}

#pragma mark - TTCode
+ (void)generateTTCodeIfNeeded {
    @synchronized ([self class]) {
        BDPMetaTTCodeFactory *factory = [self sharedInstance];
        if (factory.ttcode || factory.generatingTTCode) {
            return;
        }
        factory.generatingTTCode = YES;
    }

    dispatch_async(dispatch_get_global_queue(QOS_CLASS_DEFAULT, 0), ^{
        BDPMetaTTCode *code = [[BDPMetaTTCode alloc] init];
        @synchronized ([self class]) {
            BDPMetaTTCodeFactory *factory = [self sharedInstance];
            if (code) {
                factory.ttcode = code;
                BDPLogInfo(@"meta ttcode generated by generateTTCodeIfNeeded");
            } else {
                NSString *errorMessage = @"meta ttcode pregenerated is not generated";
                BDPLogError(errorMessage);
                NSAssert(NO, errorMessage);
            }
            factory.generatingTTCode = NO;
        }
    });
}

+ (BDPMetaTTCode *)fetchPreGenerateTTCode {
    return [self fetchPreGenerateTTCodeFix];
}


//修复 卡死问题 http://t.wtturl.cn/dxNv23c/ 堆栈场景是 generateTTCodeIfNeeded中子线程的生成卡死（keychain），主线程fetchPreGenerateTTCodeFix 进入锁，卡死
+ (BDPMetaTTCode *)fetchPreGenerateTTCodeFix {
    BDPMetaTTCode *code = nil;
    @synchronized ([self class]) {
        BDPMetaTTCodeFactory *factory = [self sharedInstance];
        code = factory.ttcode;
    }
    if (!code ||  BDPIsEmptyString(code.ttcode)) {
        //如果获取到的还没生成，那就先使用默认的
        code = [BDPMetaTTCode buildInAppCode];
        BDPLogInfo(@"meta ttcode use default by buildInAppCode");
    }
    return code;
}


+ (BDPMetaTTCode *)ttcode {
    BDPMetaTTCodeFactory *factory = [self sharedInstance];
    return factory.ttcode;
}

@end
