// DO NOT EDIT.
//
// Generated by the Swift generator for OPMonitorCode.
// Source: https://bytedance.feishu.cn/sheets/shtcnCCboz4CUWBUtZkdmZV0PLb?sheet=ve29xQ&table=tblhdeAY8y&view=vewDYgteNU
// Date:   2021/01/07 16:26
//
// For information on using the generated types, please see the documentation:
//  https://bytedance.feishu.cn/sheets/shtcnCCboz4CUWBUtZkdmZV0PLb

import Foundation
import LarkOPInterface

@objcMembers
public final class GDMonitorCode: OPMonitorCode {

    /// 不合法的参数
    public static let invalid_params = GDMonitorCode(code: 10000, level: OPMonitorLevelError, message: "invalid_params")

    /// init 失败
    public static let init_error = GDMonitorCode(code: 10001, level: OPMonitorLevelError, message: "init_error")

    /// 加载 page-frame.html 异常
    public static let load_page_frame_html_error = GDMonitorCode(code: 10002, level: OPMonitorLevelError, message: "load_page_frame_html_error")

    /// 加载 page-frame.js 异常
    public static let load_page_frame_script_error = GDMonitorCode(code: 10003, level: OPMonitorLevelError, message: "load_page_frame_script_error")

    /// 加载 {path}-frame.js 异常
    public static let load_path_frame_script_error = GDMonitorCode(code: 10004, level: OPMonitorLevelError, message: "load_path_frame_script_error")

    /// webview 加载异常
    public static let webview_load_exception = GDMonitorCode(code: 10005, level: OPMonitorLevelError, message: "webview_load_exception")

    /// 从文件读取js文件内容失败
    public static let read_script_content_from_file_error = GDMonitorCode(code: 10006, level: OPMonitorLevelError, message: "read_script_content_from_file_error")

    /// 批量从文件读取js文件内容失败
    public static let batch_read_script_content_from_file_error = GDMonitorCode(code: 10007, level: OPMonitorLevelError, message: "batch_read_script_content_from_file_error")

    /// 从URL加载js文件失败
    public static let load_script_from_url_error = GDMonitorCode(code: 10008, level: OPMonitorLevelError, message: "load_script_from_url_error")

    /// webview crash
    public static let webview_crash = GDMonitorCode(code: 10009, level: OPMonitorLevelError, message: "webview_crash")

    /// 执行JS异常
    public static let evaluate_javascript_error = GDMonitorCode(code: 10010, level: OPMonitorLevelWarn, message: "evaluate_javascript_error")

    /// schema 检查不通过
    public static let schema_check_error = GDMonitorCode(code: 10011, level: OPMonitorLevelError, message: "schema_check_error")

    /// js runtime 抛出异常
    public static let js_runtime_error = GDMonitorCode(code: 10012, level: OPMonitorLevelError, message: "js_runtime_error")

    /// jssdk更新失败
    public static let jssdk_download_failed = GDMonitorCode(code: 10013, level: OPMonitorLevelError, message: "jssdk_download_failed")

    /// 未知异常
    public static let unknown_error = GDMonitorCode(code: 10014, level: OPMonitorLevelError, message: "unknown_error")

    /// 获取小程序Common信息失败
    public static let invalid_common_info = GDMonitorCode(code: 10015, level: OPMonitorLevelError, message: "invalid_common_info")

    /// 图片url不合法
    public static let illegal_image_url = GDMonitorCode(code: 10016, level: OPMonitorLevelError, message: "illegal_image_url")

    /// 未实现该API
    public static let client_not_impl_the_api = GDMonitorCode(code: 10017, level: OPMonitorLevelError, message: "client_not_impl_the_api")

    /// 失败
    public static let fail = GDMonitorCode(code: 10018, level: OPMonitorLevelError, message: "fail")

    /// 取消
    public static let cancel = GDMonitorCode(code: 10019, level: OPMonitorLevelWarn, message: "cancel")

    /// 成功
    public static let success = GDMonitorCode(code: 10020, level: OPMonitorLevelNormal, message: "success")

    /// 加载 app-service.js 异常
    public static let load_app_service_script_error = GDMonitorCode(code: 10021, level: OPMonitorLevelError, message: "load_app_service_script_error")

    /// GPU内存溢出
    public static let gl_oom_error = GDMonitorCode(code: 10022, level: OPMonitorLevelError, message: "gl_oom_error")

    /// 页面闪退重试次数超过限制（iOS：最多50次）
    public static let webview_crash_overload = GDMonitorCode(code: 10023, level: OPMonitorLevelError, message: "webview_crash_overload")

    /// Socket Debug Disconnected
    public static let debug_exit = GDMonitorCode(code: 10024, level: OPMonitorLevelNormal, message: "debug_exit")

    /// Socket Debug 断点时退出
    public static let debug_hit_breakpoint_exit = GDMonitorCode(code: 10025, level: OPMonitorLevelNormal, message: "debug_hit_breakpoint_exit")

    /// 低内存被杀死
    public static let memory_warning_kill = GDMonitorCode(code: 10026, level: OPMonitorLevelError, message: "memory_warning_kill")

    /// 在Loading界面点击重新加载
    public static let loading_view_reload = GDMonitorCode(code: 10027, level: OPMonitorLevelError, message: "loading_view_reload")

    /// Loading界面debug
    public static let loading_view_debug = GDMonitorCode(code: 10028, level: OPMonitorLevelNormal, message: "loading_view_debug")

    /// 小程序白屏
    public static let blank_webview = GDMonitorCode(code: 10029, level: OPMonitorLevelError, message: "blank_webview")

    /// 用户点击按钮退出
    public static let close_button_dismiss = GDMonitorCode(code: 10030, level: OPMonitorLevelNormal, message: "close_button_dismiss")

    /// 应用 navigate back 退出小程序
    public static let navigate_back_dismiss = GDMonitorCode(code: 10031, level: OPMonitorLevelNormal, message: "navigate_back_dismiss")

    /// 自动化测试更新JSSDK时退出所有小程序
    public static let test_update_jssdk_dismiss = GDMonitorCode(code: 10032, level: OPMonitorLevelNormal, message: "test_update_jssdk_dismiss")

    /// 小程序启动失败时自动退出
    public static let auto_dismiss_when_load_failed = GDMonitorCode(code: 10033, level: OPMonitorLevelError, message: "auto_dismiss_when_load_failed")

    /// 小程序出现异常弹窗，用户点击退出
    public static let alert_dismiss_when_load_failed = GDMonitorCode(code: 10034, level: OPMonitorLevelError, message: "alert_dismiss_when_load_failed")

    /// JS 线程强制停止
    public static let js_running_thread_force_stopped = GDMonitorCode(code: 10035, level: OPMonitorLevelError, message: "js_running_thread_force_stopped")

    /// navigateBackMiniProgram 退出小程序
    public static let navigate_back_app_dismiss = GDMonitorCode(code: 10036, level: OPMonitorLevelNormal, message: "navigate_back_app_dismiss")

    /// 切换调试模式退出小程序
    public static let debug_switch_dismiss = GDMonitorCode(code: 10037, level: OPMonitorLevelNormal, message: "debug_switch_dismiss")

    /// 退出小程序的API调用
    public static let exit_app_api_dismiss = GDMonitorCode(code: 10038, level: OPMonitorLevelNormal, message: "exit_app_api_dismiss")

    /// 更新导致的重启
    public static let apply_update_reboot = GDMonitorCode(code: 10039, level: OPMonitorLevelNormal, message: "apply_update_reboot")

    /// 边缘滑动手势退出
    public static let edge_gesture_dismiss = GDMonitorCode(code: 10040, level: OPMonitorLevelNormal, message: "edge_gesture_dismiss")

    /// 生命周期接口调用关闭
    public static let life_cycle_dismiss = GDMonitorCode(code: 10041, level: OPMonitorLevelNormal, message: "life_cycle_dismiss")

    /// 关于页面重启小程序
    public static let about_restart = GDMonitorCode(code: 10042, level: OPMonitorLevelNormal, message: "about_restart")

    /// 更新连续失败次数超过限制
    public static let app_update_failed_too_many_times = GDMonitorCode(code: 10043, level: OPMonitorLevelWarn, message: "app_update_failed_too_many_times")

    /// 图片加载失败
    public static let image_load_failed = GDMonitorCode(code: 10044, level: OPMonitorLevelWarn, message: "image_load_failed")

    /// 内置 JSSDK 版本号解码失败
    public static let lib_version_decode_failed = GDMonitorCode(code: 10045, level: OPMonitorLevelError, message: "lib_version_decode_failed")

    /// 从文件解码数据失败
    public static let decode_data_from_path_failed = GDMonitorCode(code: 10046, level: OPMonitorLevelError, message: "decode_data_from_path_failed")

    /// 解压失败
    public static let unzip_file_failed = GDMonitorCode(code: 10047, level: OPMonitorLevelError, message: "unzip_file_failed")

    /// applink 路由事件
    public static let applink_route = GDMonitorCode(code: 10048, level: OPMonitorLevelNormal, message: "applink_route")

    /// 用户点击升级小程序事件
    public static let exit_app_ability_not_support = GDMonitorCode(code: 10049, level: OPMonitorLevelNormal, message: "exit_app_ability_not_support")

    /// 规则引擎，执行command失败
    public static let strategy_run_command_fail = GDMonitorCode(code: 10050, level: OPMonitorLevelError, message: "strategy_run_command_fail")

    /// JSCore 代理为空，WebView 与 JSCore 通信异常
    public static let jsruntime_delegate_empty = GDMonitorCode(code: 10051, level: OPMonitorLevelError, message: "jsruntime_delegate_empty")

    /// URLProtocol文件系统尝试获取 reader 失败
    public static let try_get_reader_failed = GDMonitorCode(code: 10052, level: OPMonitorLevelError, message: "try_get_reader_failed")

    /// 被废弃的代码超出预期运行，需要立即检查处理，否则一定会有问题
    public static let deprecated_code_runnnig = GDMonitorCode(code: 10053, level: OPMonitorLevelError, message: "deprecated_code_runnnig")

    /// schema 解析失败
    public static let parse_schem_error = GDMonitorCode(code: 10054, level: OPMonitorLevelError, message: "parse_schem_error")

    /// router 不合法
    public static let invalid_router = GDMonitorCode(code: 10055, level: OPMonitorLevelError, message: "invalid_router")
    
    /// preview实时预览自动重启
    public static let preview_restart = GDMonitorCode(code: 10057, level: OPMonitorLevelNormal, message: "preview_restart")
    
    /// 添加到多任务悬浮窗
    public static let add_to_floating_window = GDMonitorCode(code: 10058, level: OPMonitorLevelNormal, message: "add_to_floating_window")

    /// jsruntime触发documentOnReady的事件，无人来处理
    public static let jsruntime_document_ready_unconsumed = GDMonitorCode(code: 10060, level: OPMonitorLevelError, message: "jsruntime_document_ready_unconsumed")

    /// jsruntime发生Exception，无人来处理
    public static let jsruntime_exception_unconsumed = GDMonitorCode(code: 10061, level: OPMonitorLevelError, message: "jsruntime_exception_unconsumed")

    /// 小程序路由异常
    /// 包含以下情况：
    /// 1. 不能找到合适NavigationController来响应小程序路由需要弹出的页面
    /// 2. 路由弹出的VC不在一个NavigationController中
    /// 3. 路由弹出的VC在导航控制器中，导航控制器只有它一个VC，而且这个导航控制器不在辅助Scene中
    /// 4. 路由弹出的VC在导航控制器中，导航控制器只有它一个VC，而且这个导航控制器不在多Scene环境中
    /// 5. 这个VC不在SplitVC的detailVC中
    /// 6. 这个VC所属的SplitVC的detailVC不是一个NavigationController
    /// 7. 路由时找不到需要路由的viewcontroller或window
    /// 8. 路由操作发生在其他线程，不在主线程
    /// 9. 路由任务被不正确的提前销毁
    /// 10. 路由VC还在视图层级中
    /// 11. 不能找到合适模态VC来响应小程序路由需要presented弹出的页面
    /// 12. 不能找到合适SplitVC来响应小程序路由需要showDetail弹出的页面
    public static let gadgetNavigationException = GDMonitorCode(code: 10062, level: OPMonitorLevelError, message: "gadget_navigation_exception")

    /// 小程序业务调用应用更新重启
    public static let apply_update = GDMonitorCode(code: 10070, level: OPMonitorLevelNormal, message: "apply_update")

    /// 小程序页面加载时jssdk文件不存在
        public static let jssdk_file_not_exist = GDMonitorCode(code: 10071, level: OPMonitorLevelError, message: "jssdk_file_not_exist")

    /// 小程序页面webview代理通知didFail
    public static let navigation_delegate_did_fail = GDMonitorCode(code: 10072, level: OPMonitorLevelError, message: "navigation_delegate_did_fail")

    /// 小程序页面webview代理通知didFailProvisionalNavigation
    public static let navigation_delegate_did_fail_provisional = GDMonitorCode(code: 10073, level: OPMonitorLevelError, message: "navigation_delegate_did_fail_provisional")

    /// 小程序更多菜单中重新加载小程序被点击
    public static let gadget_menu_reload = GDMonitorCode(code: 10074, level: OPMonitorLevelWarn, message: "gadget_menu_reload")

    /// 小程序错误恢复系统捕获到错误
    public static let recovery_error_catch = GDMonitorCode(code: 10075, level: OPMonitorLevelWarn, message: "recovery_error_catch")

    /// 小程序错误恢复系统捕获到错误并且小程序成功开始执行重试
    public static let recovery_error_retry = GDMonitorCode(code: 10076, level: OPMonitorLevelWarn, message: "recovery_error_retry")

    /// 小程序错误恢复成功，小程序顺利启动
    public static let recovery_success = GDMonitorCode(code: 10077, level: OPMonitorLevelWarn, message: "recovery_success")

    /// 小程序错误恢复遇到未知的错误Code
    public static let recovery_unknown_error = GDMonitorCode(code: 10078, level: OPMonitorLevelWarn, message: "recovery_unknown_error")
    
    /// 启动链接带有relaunch参数，被降级为冷启动
    public static let query_force_cold_start = GDMonitorCode(code: 10079, level: OPMonitorLevelNormal, message: "query_force_cold_start")
    
    /// 统一错误重启启动应用
    public static let unify_error_restart = GDMonitorCode(code: 10080, level: OPMonitorLevelNormal, message: "unify_error_restart")
    
    /// 统一错误关闭页面
    public static let unify_error_dismiss = GDMonitorCode(code: 10081, level: OPMonitorLevelNormal, message: "unify_error_dismiss")
    
    /// 半屏蒙层滑动手势退出
    public static let mask_tap_dismiss = GDMonitorCode(code: 10082, level: OPMonitorLevelNormal, message: "mask_tap_dismiss")
    
    /// 半屏幕导航栏退出
    public static let xscreen_navi_dismiss = GDMonitorCode(code: 10083, level: OPMonitorLevelNormal, message: "xscreen_navi_dismiss")
    
    public static let iPad_temporary_close = GDMonitorCode(code: 10084, level: OPMonitorLevelNormal, message: "iPad_temporary_close")

    private init(code: Int, level: OPMonitorLevel, message: String) {
        super.init(domain: GDMonitorCode.domain, code: code, level: level, message: message)
    }

    public static let domain = "client.open_platform.gadget"
}

@objcMembers
public final class GDMonitorCodeLaunch: OPMonitorCode {

    /// 小程序启动未知异常
    public static let unknown_error = GDMonitorCodeLaunch(code: 10000, level: OPMonitorLevelError, message: "unknown_error")

    /// 小程序启动成功
    public static let success = GDMonitorCodeLaunch(code: 10001, level: OPMonitorLevelNormal, message: "success")

    /// 小程序启动取消
    public static let cancel = GDMonitorCodeLaunch(code: 10002, level: OPMonitorLevelError, message: "cancel")

    /// 小程序启动失败 - 设备类型在黑名单内
    public static let device_unavailable = GDMonitorCodeLaunch(code: 10003, level: OPMonitorLevelError, message: "device_unavailable")

    /// 小程序启动失败 - 自定义环境判断失败
    public static let environment_invalid = GDMonitorCodeLaunch(code: 10004, level: OPMonitorLevelError, message: "environment_invalid")

    /// 小程序启动失败 - 无效的appID
    public static let invalid_appid = GDMonitorCodeLaunch(code: 10005, level: OPMonitorLevelError, message: "invalid_appid")

    /// 小程序启动失败 - 无效的host
    public static let invalid_host = GDMonitorCodeLaunch(code: 10006, level: OPMonitorLevelError, message: "invalid_host")

    /// 小程序启动失败 - microapp配的小游戏的app_id
    public static let error_type_app = GDMonitorCodeLaunch(code: 10007, level: OPMonitorLevelError, message: "error_type_app")

    /// 小程序启动失败 - microgame配的小程序的app_id
    public static let error_type_game = GDMonitorCodeLaunch(code: 10008, level: OPMonitorLevelError, message: "error_type_game")

    /// 小程序启动失败 - Meta请求失败
    public static let meta_info_fail = GDMonitorCodeLaunch(code: 10009, level: OPMonitorLevelError, message: "meta_info_fail")

    /// 小程序启动失败 - 下载失败
    public static let download_fail = GDMonitorCodeLaunch(code: 10010, level: OPMonitorLevelError, message: "download_fail")

    /// 小程序启动失败 - 小程序/小游戏下架
    public static let offline = GDMonitorCodeLaunch(code: 10011, level: OPMonitorLevelError, message: "offline")

    /// 小程序启动失败 - JSSDK版本过低
    public static let jssdk_old = GDMonitorCodeLaunch(code: 10012, level: OPMonitorLevelError, message: "jssdk_old")

    /// 小程序启动失败 - 小程序/小游戏功能未开启
    public static let service_disabled = GDMonitorCodeLaunch(code: 10013, level: OPMonitorLevelError, message: "service_disabled")

    /// 小程序启动失败 - 当前用户无权限访问小程序
    public static let no_permission = GDMonitorCodeLaunch(code: 10014, level: OPMonitorLevelError, message: "no_permission")

    /// 小程序启动失败 - 小程序不支持当前宿主环境
    public static let incompatible = GDMonitorCodeLaunch(code: 10015, level: OPMonitorLevelError, message: "incompatible")

    /// 小程序启动失败 - 小程序 Settings 入口控制列表没有该小程序
    public static let entry_control_disabled = GDMonitorCodeLaunch(code: 10016, level: OPMonitorLevelError, message: "entry_control_disabled")

    /// 预览版二维码已过期（有效期1d）
    public static let preview_expired = GDMonitorCodeLaunch(code: 10017, level: OPMonitorLevelError, message: "preview_expired")

    /// 小程序启动失败 - 小程序不支持横屏
    public static let orientation_landscape_unsupport = GDMonitorCodeLaunch(code: 10018, level: OPMonitorLevelError, message: "orientation_landscape_unsupport")

    /// 小程序启动失败 - 小程序不支持竖屏
    public static let orientation_portrait_unsupport = GDMonitorCodeLaunch(code: 10019, level: OPMonitorLevelError, message: "orientation_portrait_unsupport")

    /// 小程序启动超时
    public static let timeout = GDMonitorCodeLaunch(code: 10020, level: OPMonitorLevelError, message: "timeout")

    /// 小程序启动取消 - 应用机制取消(正常逻辑取消)
    public static let app_state_cancel = GDMonitorCodeLaunch(code: 10021, level: OPMonitorLevelError, message: "app_state_cancel")

    /// 小程序启动超时 - 应用机制超时
    public static let app_state_timeout = GDMonitorCodeLaunch(code: 10022, level: OPMonitorLevelError, message: "app_state_timeout")

    /// 小程序启动超时 - 等待 ready 超时
    public static let ready_timeout = GDMonitorCodeLaunch(code: 10023, level: OPMonitorLevelError, message: "ready_timeout")

    /// 小程序启动失败 - 启动activity异常
    public static let open_mini_app_activity_failed = GDMonitorCodeLaunch(code: 10024, level: OPMonitorLevelError, message: "open_mini_app_activity_failed")

    /// 小程序启动失败 - 解析AppConfig失败
    public static let parse_app_config_failed = GDMonitorCodeLaunch(code: 10025, level: OPMonitorLevelError, message: "parse_app_config_failed")

    /// 小程序启动失败 - sandbox 创建失败
    public static let init_sandbox_failed = GDMonitorCodeLaunch(code: 10026, level: OPMonitorLevelError, message: "init_sandbox_failed")

    /// 小程序启动失败 - cookie 初始化（预加载容器cookie同步）失败
    public static let init_cookie_failed = GDMonitorCodeLaunch(code: 10027, level: OPMonitorLevelError, message: "init_cookie_failed")

    /// 小程序启动失败 - 应用机制异常导致失败
    public static let app_state_failed = GDMonitorCodeLaunch(code: 10028, level: OPMonitorLevelError, message: "app_state_failed")

    /// 小程序启动失败 - 未知异常(兼容现有)
    public static let fail = GDMonitorCodeLaunch(code: 10029, level: OPMonitorLevelError, message: "fail")

    /// 小程序启动失败 - jssdk不存在
    public static let jssdk_not_exist = GDMonitorCodeLaunch(code: 10030, level: OPMonitorLevelError, message: "jssdk_not_exist")

    /// 小程序启动失败 - 无效的小程序包
    public static let invalid_app_package = GDMonitorCodeLaunch(code: 10031, level: OPMonitorLevelError, message: "invalid_app_package")

    /// 小程序启动失败 - webRender load failed
    public static let webrender_load_fail = GDMonitorCodeLaunch(code: 10032, level: OPMonitorLevelError, message: "webrender_load_fail")

    /// 小程序启动取消 - 因为重启取消
    public static let cancel_for_reboot = GDMonitorCodeLaunch(code: 10033, level: OPMonitorLevelNormal, message: "cancel_for_reboot")

    /// 小程序启动失败 - 配置拉取失败
    public static let config_get_fail = GDMonitorCodeLaunch(code: 10034, level: OPMonitorLevelError, message: "config_get_fail")

    /// 小程序启动失败 - （only for PC）runtime 层预加载失败 （iframe/worker创建，jssdk lib 加载过程失败）
    public static let runtime_preload_error = GDMonitorCodeLaunch(code: 10035, level: OPMonitorLevelError, message: "runtime_preload_error")

    /// 小程序启动失败 - app-service.js 失败或者page-frame.js失败，导致没有document ready
    public static let on_document_ready_error = GDMonitorCodeLaunch(code: 10036, level: OPMonitorLevelError, message: "on_document_ready_error")

    /// 小程序启动失败 - 网络未连接
    public static let network_not_connected = GDMonitorCodeLaunch(code: 10037, level: OPMonitorLevelError, message: "network_not_connected")

    /// 小程序启动失败 - 大组件不可用（下载或安装失败）
    public static let component_unavailable = GDMonitorCodeLaunch(code: 10038, level: OPMonitorLevelError, message: "component_unavailable")

    /// 小程序启动失败 - 不合法的 input 参数
    public static let invalid_input = GDMonitorCodeLaunch(code: 10039, level: OPMonitorLevelError, message: "invalid_input")
    
    /// 小程序启动过程中，因为时序原因导致 onAppRoute 走到异步调用逻辑
    public static let onapproute_downgrade = GDMonitorCodeLaunch(code: 10040, level: OPMonitorLevelWarn, message:"onAppRoute_downgraded")
    
    /// onAppRoute 异步调用逻辑仍然失败
    public static let onapproute_downgrade_fail = GDMonitorCodeLaunch(code: 10041, level: OPMonitorLevelError, message:"onAppRoute_downgrade_fail")

    /// 飞书版本过低
    public static let lark_version_old = GDMonitorCodeLaunch(code: 10042, level: OPMonitorLevelError, message:"lark_version_old")

    private init(code: Int, level: OPMonitorLevel, message: String) {
        super.init(domain: GDMonitorCodeLaunch.domain, code: code, level: level, message: message)
    }

    public static let domain = "client.open_platform.gadget.launch"
}

@objcMembers
public final class GDMonitorCodeAppLoad: OPMonitorCode {

    /// 未知异常
    public static let unknown = GDMonitorCodeAppLoad(code: 10000, level: OPMonitorLevelError, message: "unknown")

    /// URL请求错误
    public static let url_request_error = GDMonitorCodeAppLoad(code: 10001, level: OPMonitorLevelError, message: "url_request_error")

    /// meta请求参数错误
    public static let meta_invalid_params = GDMonitorCodeAppLoad(code: 10002, level: OPMonitorLevelError, message: "meta_invalid_params")

    /// meta参数加解密失败
    public static let meta_encrypt_decrypt_failed = GDMonitorCodeAppLoad(code: 10003, level: OPMonitorLevelError, message: "meta_encrypt_decrypt_failed")

    /// meta请求响应服务器返回error非0
    public static let meta_server_error = GDMonitorCodeAppLoad(code: 10004, level: OPMonitorLevelError, message: "meta_server_error")

    /// 响应数据无法解析
    public static let response_invalid = GDMonitorCodeAppLoad(code: 10005, level: OPMonitorLevelError, message: "response_invalid")

    /// meta请求响应数据非法，无法解析
    public static let meta_parse_invalid = GDMonitorCodeAppLoad(code: 10006, level: OPMonitorLevelError, message: "meta_parse_invalid")

    /// pkg描述标记校验失败
    public static let pkg_mask_verified_failed = GDMonitorCodeAppLoad(code: 10007, level: OPMonitorLevelError, message: "pkg_mask_verified_failed")

    /// pkgmd5检验失败
    public static let pkg_md5_verified_failed = GDMonitorCodeAppLoad(code: 10008, level: OPMonitorLevelError, message: "pkg_md5_verified_failed")

    /// pkg下载取消
    public static let pkg_download_canceled = GDMonitorCodeAppLoad(code: 10009, level: OPMonitorLevelError, message: "pkg_download_canceled")

    /// 无pkg下载URL
    public static let no_pkg_download_url = GDMonitorCodeAppLoad(code: 10010, level: OPMonitorLevelError, message: "no_pkg_download_url")

    /// 找不到Pkg了
    public static let pkg_not_found = GDMonitorCodeAppLoad(code: 10011, level: OPMonitorLevelError, message: "pkg_not_found")

    /// 找不到Pkg内的指定文件
    public static let pkg_file_not_found = GDMonitorCodeAppLoad(code: 10012, level: OPMonitorLevelError, message: "pkg_file_not_found")

    /// 加载Pkg数据出错
    public static let pkg_data_failed = GDMonitorCodeAppLoad(code: 10013, level: OPMonitorLevelError, message: "pkg_data_failed")

    /// 加载Pkg数据超时(非请求超时, 而是api调用耗时过长)
    public static let pkg_read_timeout = GDMonitorCodeAppLoad(code: 10014, level: OPMonitorLevelError, message: "pkg_read_timeout")

    /// Pkg返回的data解析失败
    public static let pkg_data_parse_failed = GDMonitorCodeAppLoad(code: 10015, level: OPMonitorLevelError, message: "pkg_data_parse_failed")

    /// Pkg内文件非法(比如内容大小与索引大小不匹配)
    public static let pkg_file_content_invalid = GDMonitorCodeAppLoad(code: 10016, level: OPMonitorLevelError, message: "pkg_file_content_invalid")

    /// 创建pkg相关目录失败
    public static let create_dir_failed = GDMonitorCodeAppLoad(code: 10017, level: OPMonitorLevelError, message: "create_dir_failed")

    /// 加载路径参数非法
    public static let path_invalid = GDMonitorCodeAppLoad(code: 10018, level: OPMonitorLevelError, message: "path_invalid")

    /// 写入文件失败
    public static let write_data_failed = GDMonitorCodeAppLoad(code: 10019, level: OPMonitorLevelError, message: "write_data_failed")

    /// pkg版本太低
    public static let pkg_version_too_old = GDMonitorCodeAppLoad(code: 10020, level: OPMonitorLevelError, message: "pkg_version_too_old")

    /// webview加载挂了3次
    public static let webview_terminated = GDMonitorCodeAppLoad(code: 10021, level: OPMonitorLevelError, message: "webview_terminated")

    /// runtime报错
    public static let js_runtime_error = GDMonitorCodeAppLoad(code: 10022, level: OPMonitorLevelError, message: "js_runtime_error")

    /// Meta接口返回的数据校验不过, 包括type超阈值等
    public static let meta_data_invalid = GDMonitorCodeAppLoad(code: 10023, level: OPMonitorLevelError, message: "meta_data_invalid")

    /// br解码失败
    public static let pkg_br_decode_failed = GDMonitorCodeAppLoad(code: 10024, level: OPMonitorLevelError, message: "pkg_br_decode_failed")

    /// commonReady检查失败
    public static let not_ready_in_time = GDMonitorCodeAppLoad(code: 10025, level: OPMonitorLevelError, message: "not_ready_in_time")

    /// 不合法的参数
    public static let invalid_params = GDMonitorCodeAppLoad(code: 10026, level: OPMonitorLevelError, message: "invalid_params")

    /// meta类型不正确
    public static let invalid_meta_type = GDMonitorCodeAppLoad(code: 10027, level: OPMonitorLevelError, message: "invalid_meta_type")

    /// package manager return error file reader
    public static let package_manager_return_error_file_reader = GDMonitorCodeAppLoad(code: 10028, level: OPMonitorLevelError, message: "package_manager_return_error_file_reader")


    private init(code: Int, level: OPMonitorLevel, message: String) {
        super.init(domain: GDMonitorCodeAppLoad.domain, code: code, level: level, message: message)
    }

    public static let domain = "client.open_platform.gadget.app_load"
}

@objcMembers
public final class GDMonitorCodeLifecycle: OPMonitorCode {

    /// 展示进入，包括第一次进入或back导致的页面重新展示
    public static let page_appear = GDMonitorCodeLifecycle(code: 10000, level: OPMonitorLevelNormal, message: "page_appear")

    /// 页面加载完成(首次)
    public static let page_onready = GDMonitorCodeLifecycle(code: 10001, level: OPMonitorLevelNormal, message: "page_onready")

    /// 离开页面，包括进入下一级页面或back导致的离开页面
    public static let page_disappear = GDMonitorCodeLifecycle(code: 10002, level: OPMonitorLevelNormal, message: "page_disappear")

    /// 小程序进入前台
    public static let gadget_foreground = GDMonitorCodeLifecycle(code: 10003, level: OPMonitorLevelNormal, message: "gadget_foreground")

    /// 小程序进入后台
    public static let gadget_background = GDMonitorCodeLifecycle(code: 10004, level: OPMonitorLevelNormal, message: "gadget_background")

    /// 小程序获得焦点（window或sidebar 窗口获得焦点，appcenter 窗口获得焦点或切换tab）
    public static let gadget_focus = GDMonitorCodeLifecycle(code: 10005, level: OPMonitorLevelNormal, message: "gadget_focus")

    /// 小程序失去焦点（window或sidebar 窗口失去焦点，appcenter 窗口失去焦点或切换tab）
    public static let gadget_lose_focus = GDMonitorCodeLifecycle(code: 10006, level: OPMonitorLevelNormal, message: "gadget_lose_focus")

    /// 小程序关闭（手动点击关闭，可能与gadget_background存在部分重合）
    public static let gadget_close = GDMonitorCodeLifecycle(code: 10007, level: OPMonitorLevelNormal, message: "gadget_close")


    private init(code: Int, level: OPMonitorLevel, message: String) {
        super.init(domain: GDMonitorCodeLifecycle.domain, code: code, level: level, message: message)
    }

    public static let domain = "client.open_platform.gadget.lifecycle"
}

@objcMembers
public final class RealmachineDebug: OPMonitorCode {

    /// 初始化 socket 连接
    public static let realmachine_socket_init = RealmachineDebug(code: 10000, level: OPMonitorLevelNormal, message: "realmachine_socket_init")

    /// socket 连接打开
    public static let realmachine_socket_open = RealmachineDebug(code: 10001, level: OPMonitorLevelNormal, message: "realmachine_socket_open")

    /// socket 遇到错误(打开失败）
    public static let realmachine_socket_failed = RealmachineDebug(code: 10002, level: OPMonitorLevelError, message: "realmachine_socket_failed")

    /// socket 连接断开
    public static let realmachine_socket_disconnected = RealmachineDebug(code: 10003, level: OPMonitorLevelNormal, message: "realmachine_socket_disconnected")

    /// 客户端停止调试，主动断开链接
    public static let realmachine_client_finish_debug = RealmachineDebug(code: 10004, level: OPMonitorLevelNormal, message: "realmachine_client_finish_debug")

    /// 客户端发送 initWorker 消息
    public static let realmachine_init_worker = RealmachineDebug(code: 10005, level: OPMonitorLevelNormal, message: "realmachine_init_worker")


    private init(code: Int, level: OPMonitorLevel, message: String) {
        super.init(domain: RealmachineDebug.domain, code: code, level: level, message: message)
    }

    public static let domain = "client.open_platform.opdev.realmachine_debug"
}
