//
//  OpenPluginShowCardChartDetailAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/6/12 12:13:15
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import LarkOpenPluginManager
import LarkNavigator
import LarkModel
import EENavigator
import LarkContainer

// MARK: - OpenPluginShowCardChartDetailAPI
final class OpenPluginShowCardChartDetailAPI: OpenBasePlugin {
    
    func showCardChartDetail(
        params: OpenPluginShowCardChartDetailRequest,
        context: OpenAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
            guard let msgContext = context.additionalInfo["msgContext"] as? MessageCardLynxContext,
                  let bizContext = msgContext.bizContext as? MessageCardContainer.Context,
                  let translateInfo = bizContext.bizContext["translateInfo"] as? TranslateInfo,
                    let cardContent = bizContext.bizContext["content"] as? CardContent else {
                let error = OpenAPIError(errno: OpenAPICommonErrno.internalError).setMonitorMessage("showCardChartDetail API: cardContent is nil")
                callback(.failure(error: error))
                context.apiTrace.error("showCardChartDetail API: cardContent is nil")
                return
            }
            var targetElement: [String: Any] = [:]
            targetElement["elementID"] = params.elementID
            targetElement["isTranslateElement"] = params.isTranslateElement
            let transCardContent = bizContext.bizContext["translateContent"] as? CardContent
            let config = MessageCardContainer.Config(perferWidth: UIScreen.main.bounds.size.height - (Navigator.shared.mainSceneWindow?.safeAreaInsets.top ?? 0), perferHeight: UIScreen.main.bounds.size.width, isWideMode: false, actionEnable: true, isForward: false, i18nText: I18nText())
            var cardData = MessageCardContainer.ContainerData(cardID:"", version: "", content: MessageCardContainer.CardContent(origin: cardContent, translate: transCardContent), localStatus: "", contextData: MessageCardContainer.ContextData(trace: OPTraceService.default().generateTrace(), bizContext: [:], dependency: nil, host:nil, deliveryType: nil), config: config, translateInfo: translateInfo)
            let vc = ChartDetailViewController(containerData: cardData, targetElement: targetElement)
            guard let mainWindow = Navigator.shared.mainSceneWindow else {
                let error = OpenAPIError(errno: OpenAPICommonErrno.internalError).setMonitorMessage("showCardChartDetail API: mainWindow is nil")
                callback(.failure(error: error))
                assertionFailure()
                return
            }
            Navigator.shared.present(vc, from: mainWindow, animated: false)
            callback(.success(data: nil))
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandler(for: "showCardChartDetail", pluginType: Self.self, paramsType: OpenPluginShowCardChartDetailRequest.self, resultType: OpenAPIBaseResult.self) { (this, params, context, callback) in
            context.apiTrace.info("showCardChartDetail API call start")
            this.showCardChartDetail(params: params, context: context, callback: callback)
            context.apiTrace.info("showCardChartDetail API call end")
        }
    }
}
