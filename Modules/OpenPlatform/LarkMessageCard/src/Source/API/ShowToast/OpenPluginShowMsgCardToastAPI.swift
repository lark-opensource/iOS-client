//
//  OpenPluginShowMsgCardToastAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2022/12/5 02:15:55
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import LarkOpenPluginManager
import UniverseDesignToast
import EENavigator
import LarkNavigator
import LarkContainer

// MARK: -
open class OpenPluginShowMsgCardToastAPI: OpenBasePlugin {
    
    enum APIName: String {
        case showMsgCardToast
    }
    
    private func showMsgCardToast(
        params: OpenPluginShowMsgCardToastRequest,
        context: OpenAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
        context.apiTrace.info("showMsgCardToast API call start")
        if let msgContext = context.additionalInfo["msgContext"] as? MessageCardLynxContext,
           let bizContext = msgContext.bizContext as? MessageCardContainer.Context,
           let actionService = bizContext.dependency?.actionService,
           let view = Navigator.shared.mainSceneWindow {
            var text = ""
            switch params.textType {
            case .content:
                text = params.text
            case .i18n_id:
                text = BundleResources.LarkMessageCard.i18nByName(name: params.text) ?? ""
            }
            let actionContext = MessageCardActionContext(
                elementTag: params.tag,
                elementID: nil,
                bizContext: msgContext.bizContext,
                actionFrom: nil
            )
            actionService.showToast(context: actionContext, type: .info, text: text, on: view)
            callback(.success(data: nil))
        } else {
            let error = OpenAPIError(errno: OpenAPICommonErrno.internalError)
                .setMonitorMessage("mainSceneWindow is nil")
            callback(.failure(error: error))
        }
        context.apiTrace.info("showMsgCardToast API call end")
    }
    
    required public init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandler(for: APIName.showMsgCardToast.rawValue, pluginType: Self.self, paramsType: OpenPluginShowMsgCardToastRequest.self, resultType: OpenAPIBaseResult.self) { (this, params, context, callback) in
            
            this.showMsgCardToast(params: params, context: context, callback: callback)
        }
    }
}
