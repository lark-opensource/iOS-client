//
//  OpenPluginMsgCardUpdateLocalDataAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/5/15 03:31:23
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import LarkOpenPluginManager
import LarkContainer

// MARK: - OpenPluginMsgCardUpdateLocalDataAPI
final class OpenPluginMsgCardUpdateLocalDataAPI: OpenBasePlugin {
    
    enum APIName: String {
        case msgCardUpdateLocalData
    }
    
    static func updateLocalData(
        params: OpenPluginMsgCardUpdateLocalDataRequest,
        context: OpenAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenPluginMsgCardUpdateLocalDataResponse>) -> Void) {
            guard let msgContext = context.additionalInfo["msgContext"] as? MessageCardLynxContext,
                  let bizContext = msgContext.bizContext as? MessageCardContainer.Context,
                  let actionService = bizContext.dependency?.actionService else {
                let error = OpenAPIError(errno: OpenAPICommonErrno.internalError)
                    .setMonitorMessage("UpdateLocalData fail: action service is nil")
                callback(.failure(error: error))
                context.apiTrace.error("updateLocalData fail: action service is nil")
                return
            }
            let actionContext = MessageCardActionContext(
                bizContext: msgContext.bizContext
            )
            actionService.updateLocalData(
                context: actionContext,
                cardID: params.cardID,
                version: params.cardVersion,
                data: params.data
            ) { error, version, data in
                if let version = version, let data = data {
                    let response = OpenPluginMsgCardUpdateLocalDataResponse(cardVersion: version, data: data)
                    callback(.success(data: response))
                } else if let error = error{
                    let error = OpenAPIError(
                        errno: OpenAPICommonErrno.internalError
                    ).setMonitorMessage("UpdateLocalData fail error: \(error.localizedDescription)")
                    callback(.failure(error: error))
                } else {
                    let error = OpenAPIError(
                        errno: OpenAPICommonErrno.internalError
                    ).setMonitorMessage("UpdateLocalData fail version or data is nil")
                    callback(.failure(error: error))
                }
            }
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandler(
            for: APIName.msgCardUpdateLocalData.rawValue,
            pluginType: Self.self,
            paramsType: OpenPluginMsgCardUpdateLocalDataRequest.self,
            resultType: OpenPluginMsgCardUpdateLocalDataResponse.self) { ( _, params, context, callback) in
                context.apiTrace.info("updateLocalData API call start")
                Self.updateLocalData(params: params, context: context, callback: callback)
                context.apiTrace.info("updateLocalData API call end")
        }
    }
}
