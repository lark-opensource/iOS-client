//
//  OpenPluginShowMsgCardOverflowAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2022/11/15 06:01:13
//

import Foundation
import LarkOpenAPIModel
import LarkOpenPluginManager
import UniverseDesignActionPanel
import Lynx
import LarkAlertController
import EENavigator
import LarkNavigator
import LarkContainer

// MARK: -
open class OpenPluginShowMsgCardOverflowAPI: OpenBasePlugin {
    
    enum APIName: String {
        case showMsgCardOverflow
    }
    
    private func showMsgCardOverflow(
        params: OpenPluginShowMsgCardOverflowRequest,
        context: OpenAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
        context.apiTrace.info("showMsgCardOverflow API call start")
        var view: LynxView? = MsgCardAPIUtils.getLynxView(context: context)
        let overflowView = view?.find(withName: params.elementID)
        let config = UDActionSheetUIConfig(popSource: UDActionSheetSource(sourceView: overflowView ?? UIView(), sourceRect: MsgCardAPIUtils.sourceRectWithPadding(for: overflowView?.bounds ?? CGRectZero)))
        let actionSheet = UDActionSheet(config: config)
        params.options.forEach { option in
            actionSheet.addItem(UDActionSheetItem(title: option.text, action: {
                if let confirm = params.confirm {
                    let alert = LarkAlertController()
                    alert.setTitle(text: confirm.title ?? "")
                    alert.setContent(text: confirm.text ?? "")
                    alert.addSecondaryButton(text: BundleI18n.LarkMessageCard.Lark_Legacy_Cancel)
                    alert.addPrimaryButton(text: BundleI18n.LarkMessageCard.Lark_Legacy_Sure, dismissCompletion: {
                        self.doAction(option: option, context: context, params: params)
                    })
                    MsgCardAPIUtils.presentController(vc: alert, context: context)
                } else {
                    self.doAction(option: option, context: context, params: params)
                }
            }))
        }
        actionSheet.setCancelItem(text: BundleI18n.LarkMessageCard.Lark_Legacy_MsgCardCancel)
        MsgCardAPIUtils.presentController(vc: actionSheet, context: context)
        callback(.success(data: nil))
        context.apiTrace.info("showMsgCardOverflow API call end")
    }
    
    private func doAction(option: OpenPluginShowMsgCardOverflowRequest.OptionsItem, context: OpenAPIContext, params: OpenPluginShowMsgCardOverflowRequest) {
        context.apiTrace.info("showMsgCardOverflow API: send action")
        if let msgContext = context.additionalInfo["msgContext"] as? MessageCardLynxContext,
           let bizContext = msgContext.bizContext as? MessageCardContainer.Context,
           let actionService = bizContext.dependency?.actionService {
            var actionContext = MessageCardActionContext(
                elementTag: "overflow",
                elementID: params.elementID,
                bizContext: msgContext.bizContext,
                actionFrom: nil
            )
            let isMultiAction = option.actions.count > 1
            for action in option.actions {
                switch action.type {
                case .openUrl:
                    actionContext.actionFrom = .innerLink(reason: "open_link_resp_action")
                    actionService.openUrl(context: actionContext, urlStr: action.url)
                case .actionRequest:
                    let lynxView = MsgCardAPIUtils.getLynxView(context: context)
                    let updateActionState = { [weak lynxView] (_ newState: ActionState) in
                        guard let lynxView = lynxView else {
                            context.apiTrace.error("showMsgCardOverflow API: lynxView is nil")
                            return
                        }
                        let dic: [String: Any] = ["elementID": params.elementID, "eventName": newState.rawValue, "params": ["select_value": action.value ?? ""]]
                        lynxView.sendGlobalEvent("updateCardState", withParams: [dic])
                        context.apiTrace.info("showMsgCardOverflow API: send event")
                    }
                    updateActionState(.actionStart)
                    actionService.sendAction(
                        context: actionContext,
                        actionID: action.actionID ?? "",
                        params: ["selected_option": action.value ?? ""],
                        isMultiAction: isMultiAction,
                        updateActionState: updateActionState,
                        callback: nil
                    )
                default:
                    assertionFailure("should not enter here")
                }
            }
        } else {
            context.apiTrace.error("showMsgCardOverflow API: MessageCardActionService is nil")
        }
    }
    
    required public init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandler(for: APIName.showMsgCardOverflow.rawValue, pluginType: Self.self, paramsType: OpenPluginShowMsgCardOverflowRequest.self, resultType: OpenAPIBaseResult.self) { (this, params, context, callback) in
            
            this.showMsgCardOverflow(params: params, context: context, callback: callback)
        }
    }
}
