//
//  OpenPluginSetMsgCardSummaryAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/2/14 11:18:32
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import LarkOpenPluginManager
import LarkModel
import LarkContainer

// MARK: - OpenPluginSetMsgCardSummaryAPI
final class OpenPluginSetMsgCardSummaryAPI: OpenBasePlugin {
    
    func setMsgCardSummary(
        params: OpenPluginSetMsgCardSummaryRequest,
        context: OpenAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
            if let msgContext = context.additionalInfo["msgContext"] as? MessageCardLynxContext,
                let bizContext = msgContext.bizContext as? MessageCardContainer.Context, let message = bizContext.getBizContext(key: "message") as? Message {
                if var content = message.content as? CardContent {
                    content.summary  = params.summary
                    message.content = content
                }
                if var translateContent = message.translateContent as? CardContent {
                    translateContent.summary = params.translateSummary
                    message.translateContent = translateContent
                }
                bizContext.setBizContext(key: "summary", value: params.summary)
                bizContext.setBizContext(key: "translateSummary", value: params.translateSummary)
            }
            callback(.success(data: nil))
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandler(for: "setMsgCardSummary", pluginType: Self.self, paramsType: OpenPluginSetMsgCardSummaryRequest.self, resultType: OpenAPIBaseResult.self) { (this, params, context, callback) in
            context.apiTrace.info("setMsgCardSummary API call start")
            this.setMsgCardSummary(params: params, context: context, callback: callback)
            context.apiTrace.info("setMsgCardSummary API call end")
        }
    }
}
