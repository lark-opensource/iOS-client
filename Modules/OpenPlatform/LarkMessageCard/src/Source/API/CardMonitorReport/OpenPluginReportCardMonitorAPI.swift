//
//  OpenPluginReportCardMonitorAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/7/13 03:55:13
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import LarkOpenPluginManager
import LarkContainer

// MARK: - OpenPluginReportCardMonitorAPI
final class OpenPluginReportCardMonitorAPI: OpenBasePlugin {
    private static let domain = "client.open_platform.card"
    
    func reportCardMonitor(
        params: OpenPluginReportCardMonitorRequest,
        context: OpenAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
            guard let msgContext = context.additionalInfo["msgContext"] as? MessageCardLynxContext,
                  let bizContext = msgContext.bizContext as? MessageCardContainer.Context,
                  let _ = bizContext.getBizContext(key: "setNoReportMonitor") as? Bool else {
                callback(.success(data: nil))
                return
            }
            let monitorEvent = params.monitorEvents
            for event in monitorEvent {
                guard let event = event as? [String: Any] else {
                    callback(.failure(error: OpenAPIError(errno: OpenAPICommonErrno.internalError,msg: "eventDate is not dictionary") ))
                    return
                }
                guard let eventName = event["event_name"] as? String,
                      let categories = event["categories"] as? [String: Any],
                      let code = categories["monitor_code"] as? Int,
                      let message = categories["monitor_message"] as? String else {
                    callback(.failure(error: OpenAPIError(errno: OpenAPICommonErrno.internalError,msg: "event_name or categories is nil")))
                    return
                }
                let cardCode = OPMonitorCodeBase(domain: Self.domain, code: code, level: OPMonitorLevelNormal, message: message)
                let monitor = OPMonitor(name: eventName, code: cardCode)
                monitor.addMap(categories)
                monitor.flush()
            }
            callback(.success(data: nil))
    }

    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandler(for: "reportCardMonitor", pluginType: Self.self, paramsType: OpenPluginReportCardMonitorRequest.self, resultType: OpenAPIBaseResult.self) { (this, params, context, callback) in
            context.apiTrace.info("reportCardMonitor API call start")
            this.reportCardMonitor(params: params, context: context, callback: callback)
            context.apiTrace.info("reportCardMonitor API call end")
        }
    }
}
