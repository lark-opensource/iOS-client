//
//  OpenPluginDoMsgCardActionAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2022/12/5 02:31:14
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import LarkOpenPluginManager
import LarkAlertController
import Lynx
import EENavigator
import LarkNavigator
import LarkContainer

// MARK: -
open class OpenPluginDoMsgCardActionAPI: OpenBasePlugin {
    
    enum APIName: String {
        case doMsgCardAction
    }
    
    private func doMsgCardAction(
        params: OpenPluginDoMsgCardActionRequest,
        context: OpenAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
        context.apiTrace.info("doMsgCardAction API call start")
        if let msgContext = context.additionalInfo["msgContext"] as? MessageCardLynxContext, let bizContext = msgContext.bizContext as? MessageCardContainer.Context, let actionService = bizContext.dependency?.actionService {
            if let confirm = params.confirm {
                let alert = LarkAlertController()
                alert.setTitle(text: confirm.title ?? "")
                alert.setContent(text: confirm.text ?? "")
                alert.addSecondaryButton(text: BundleI18n.LarkMessageCard.Lark_Legacy_Cancel, dismissCompletion: {
                    callback(.continue(event: "", data: OpenAPIMessageCardResult(.fail, resultCode: .userCancel) ))
                })
                alert.addPrimaryButton(text: BundleI18n.LarkMessageCard.Lark_Legacy_Sure, dismissCompletion: {
                    self.doAction(params: params, context: context, callback: callback, service: actionService, msgContext: msgContext)
                    context.apiTrace.info("doMsgCardAction API: send action with comfirm")
                    callback(.continue(event: "", data: OpenAPIMessageCardResult(.success, resultCode: .success) ))
                })
                self.presentController(vc: alert, context: context)
            } else {
                self.doAction(params: params, context: context, callback: callback, service: actionService, msgContext: msgContext)
                callback(.success(data: OpenAPIMessageCardResult(.success, resultCode: .success)))
            }
        } else {
            let error = OpenAPIError(errno: OpenAPICommonErrno.internalError)
            callback(.failure(error: error))
            context.apiTrace.error("doMsgCardAction API: action service is nil")
        }
        context.apiTrace.info("doMsgCardAction API call end")
    }
    
    private func presentController(vc: UIViewController, context: OpenAPIContext) {
        if let fromVC = Navigator.shared.mainSceneWindow?.fromViewController {
            Navigator.shared.present(vc, wrap: nil, from: fromVC, prepare: { controller in
                #if canImport(CryptoKit)
                if #available(iOS 13.0, *) {
                    if controller.modalPresentationStyle == .automatic {
                        controller.modalPresentationStyle = .fullScreen
                    }
                }
                #endif
            })
        } else {
            context.apiTrace.error("doMsgCardAction API: fromVC is nil")
        }
    }
    
    private func doAction(
        params: OpenPluginDoMsgCardActionRequest,
        context: OpenAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void,
        service: MessageCardActionService,
        msgContext: MessageCardLynxContext
    ) {
        var actionContext = MessageCardActionContext(
            elementTag: params.tag,
            elementID: params.elementID,
            bizContext: msgContext.bizContext,
            actionFrom: nil
        )
        switch params.action.type {
        case .open_url:
            actionContext.actionFrom = .innerLink()
            service.openUrl(context: actionContext, urlStr: params.action.url)
        case .action_request:
            if let actionID = params.action.actionID {
                let lynxView = MsgCardAPIUtils.getLynxView(context: context)
                let updateActionState = { [weak lynxView] (_ newState: ActionState) in
                    guard let lynxView = lynxView else {
                        context.apiTrace.error("showMsgCardOverflow API: lynxView is nil")
                        return
                    }
                    let dic = ["elementID": params.elementID, "eventName": newState.rawValue]
                    lynxView.sendGlobalEvent("updateCardState", withParams: [dic])
                    context.apiTrace.info("doMsgCardAction API: send event")
                }
                updateActionState(.actionStart)
                service.sendAction(context: actionContext,
                                   actionID: actionID,
                                   params: nil,
                                   isMultiAction: params.isMultiAction ?? false,
                                   updateActionState: updateActionState,
                                   callback: nil
                )
                
            } else {
                let error = OpenAPIError(errno: OpenAPICommonErrno.invalidParam(.invalidParam(param: "actionID")))
                    .setMonitorMessage("actionID invalid patam: \(params.action.actionID)")
                callback(.failure(error: error))
            }
        }
    }
    
    required public init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandler(for: APIName.doMsgCardAction.rawValue, pluginType: Self.self, paramsType: OpenPluginDoMsgCardActionRequest.self, resultType: OpenAPIBaseResult.self) { (this, params, context, callback) in
            
            this.doMsgCardAction(params: params, context: context, callback: callback)
        }
    }
}
