//
//  OpenPluginMsgCardShowSelectMenuAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2022/11/16 06:57:38
//

import Foundation
import LarkOpenAPIModel
import LarkOpenPluginManager
import SelectMenu
import UniverseDesignPopover
import LarkNavigator
import EENavigator
import LarkMessengerInterface
import LarkAlertController
import Lynx
import LarkUIKit
import LarkModel
import UniverseDesignIcon
import UniverseDesignColor
import RustPB
import ByteWebImage
import UniverseDesignActionPanel
import LarkContainer

//TODO: call
// MARK: -
final class OpenPluginMsgCardShowSelectMenuAPI: OpenBasePlugin {
    private var popover: UDPopoverTransition?
    
    enum APIName: String {
        case msgCardShowSelectMenu
    }

    private static func createSelectItem(
        _ items: [OpenPluginMsgCardShowSelectMenuRequest.OptionsItem],
        images: Dictionary<String,Basic_V1_RichTextElement.ImageProperty>?
    ) -> [SelectMenuViewModel.Item] {
        return items.map { option in
            var imageKey = ""
            var icon: SelectMenuViewModel.Icon? = nil
            if let iconProps = option.icon {
                if let imageID = iconProps.imageID, let imageProperty = images?[imageID] {
                    imageKey = ImageItemSet.transform(imageProperty:imageProperty).generatePostMessageKey(forceOrigin: false)
                }
                var color: UIColor?
                if let colorToken = iconProps.color, let token = iconProps.token, !token.contains("_colorful") {
                    color = UDColor.getValueByBizToken(token: colorToken)
                }
                icon = SelectMenuViewModel.Icon(imgKey: imageKey, udToken: iconProps.token, color: color)
            }
            return SelectMenuViewModel.Item(name: option.text ?? "", value: option.value, icon: icon)
        }
    }
    
    private func showSelectMenu(
        params: OpenPluginMsgCardShowSelectMenuRequest,
        context: OpenAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenPluginMsgCardShowSelectMenuResponse>) -> Void) {
            context.apiTrace.info("showMsgCardSelectMenu API: type:\(params.type.rawValue)")
            switch(params.type) {
            case .select_person:
                showSelectPersons(params: params, isMulti: false, context: context, callback: callback)
            case .select_static:
                showSelectOptions(params: params, isMulti: false, context: context, callback: callback)
            case .multi_select_person:
                showSelectPersons(params: params, isMulti: true, context: context, callback: callback)
            case .multi_select_static:
                showSelectOptions(params: params, isMulti: true, context: context, callback: callback)
            }
            context.apiTrace.info("showMsgCardSelectMenu API call end")
    }
    
    private func showSelectPersons(
        params: OpenPluginMsgCardShowSelectMenuRequest,
        isMulti: Bool,
        context: OpenAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenPluginMsgCardShowSelectMenuResponse>) -> Void
    ) {
        context.apiTrace.info("showSelectPersons: type:\(params.type.rawValue)")
        guard let sourceVC = MsgCardAPIUtils.sourceVC(context: context) else {
            let error = OpenAPIError(errno: OpenAPICommonErrno.internalError).setMonitorMessage("MsgCardShowSelectMenuAPI: sourceVC is nil")
            callback(.failure(error: error))
            return
        }
        var chatID: String = ""
        var chatterIDs: [String] = []
        if let msgContext = context.additionalInfo["msgContext"] as? MessageCardLynxContext,
            let bizContext = msgContext.bizContext as? MessageCardContainer.Context,
            let actionService = bizContext.dependency?.actionService {
            chatID = actionService.chat().id
        }
        if let msgContext = context.additionalInfo["msgContext"] as? MessageCardLynxContext,
            let bizContext = msgContext.bizContext as? MessageCardContainer.Context,
            let message = bizContext.bizContext["message"] as? Message {
            var cardContent: LarkModel.CardContent?
            if params.isTranslateElement ?? false {
                cardContent = message.translateContent as? LarkModel.CardContent
            } else {
                cardContent = message.content as? LarkModel.CardContent
            }
            for option in params.options {
                if let userID = cardContent?.jsonAttachment?.optionUsers[option.value]?.userID {
                    chatterIDs.append(userID)
                }
            }
        }
        var body = SearchChatterPickerBody(
            chatID: chatID,
            navibarTitle: BundleI18n.LarkMessageCard.Lark_Legacy_MsgCardSelect,
            chatterIDs: chatterIDs,
            preSelectIDs: params.initialOptions,
            isMulti: isMulti
        ) { selectedChatters in
            var results: [OpenPluginMsgCardShowSelectMenuResponse.SelectedValuesItem] = []
            for chatter in selectedChatters {
                let res = OpenPluginMsgCardShowSelectMenuResponse.SelectedValuesItem(text: chatter.localizedName, value: chatter.id)
                results.append(res)
            }
            callback(.success(data: OpenPluginMsgCardShowSelectMenuResponse(selectedValues: results)))
        }
        switch chatterIDs.count {
        case 1...7:
            body.isPopup = true
            if let elementID = params.elementID,
               let lynxView = MsgCardAPIUtils.getLynxView(context: context),
               let selectMenuView = lynxView.find(withName: elementID) {
                let popover = UDPopoverTransition(
                    sourceView: selectMenuView,
                    sourceRect: MsgCardAPIUtils.sourceRectWithPadding(for: selectMenuView.bounds),
                    permittedArrowDirections: [.up, .down]
                )
                self.popover = popover
                Navigator.shared.present(body: body, from: sourceVC) { [weak self] vc in
                    vc.modalPresentationStyle = .custom
                    vc.transitioningDelegate = self?.popover
                }
            } else {
                let error = OpenAPIError(errno: OpenAPICommonErrno.internalError).setMonitorMessage("MsgCardShowSelectMenuAPI: lynxView not found")
                callback(.failure(error: error))
            }
        default:
            Navigator.shared.present(body: body, from: sourceVC)
        }
    }
    
    private func showSelectOptions(
        params: OpenPluginMsgCardShowSelectMenuRequest,
        isMulti: Bool,
        context: OpenAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenPluginMsgCardShowSelectMenuResponse>) -> Void
    ) {
        context.apiTrace.info("showSelectStatic: type:\(params.type.rawValue)")
        var images: Dictionary<String,Basic_V1_RichTextElement.ImageProperty>?
        if let msgContext = context.additionalInfo["msgContext"] as? MessageCardLynxContext,
           let cardContext = msgContext.bizContext as? MessageCardContainer.Context,
           let cardContent = (cardContext.getBizContext(key: "message") as? Message)?.content as? LarkModel.CardContent {
            images = cardContent.jsonAttachment?.images
        }
        switch params.options.count {
        case 1...7:
            let selectMenuController = SelectMenuCompactController(
                items: Self.createSelectItem(params.options, images: images),
                selectedValues: params.initialOptions,
                isMulti: isMulti
            )
            selectMenuController.selectConfirm = { selectedItems in
                var results: [OpenPluginMsgCardShowSelectMenuResponse.SelectedValuesItem] = []
                for item in selectedItems {
                    let res = OpenPluginMsgCardShowSelectMenuResponse.SelectedValuesItem(text: item.name, value: item.value)
                    results.append(res)
                }
                callback(.success(data: OpenPluginMsgCardShowSelectMenuResponse(selectedValues: results)))
            }
            if let elementID = params.elementID,
               let lynxView = MsgCardAPIUtils.getLynxView(context: context),
               let selectMenuView = lynxView.find(withName: elementID) {
                let popover = UDPopoverTransition(
                    sourceView: selectMenuView,
                    sourceRect: MsgCardAPIUtils.sourceRectWithPadding(for: selectMenuView.bounds),
                    permittedArrowDirections: [.up, .down]
                )
                popover.presentStypeInCompact = .overFullScreen
                selectMenuController.modalPresentationStyle = .custom
                self.popover = popover
                selectMenuController.transitioningDelegate = popover
            }
            MsgCardAPIUtils.presentController(vc: selectMenuController, context: context)
        case 8...:
            let selectMenuController = SelectMenuController(
                items: Self.createSelectItem(params.options, images: images),
                selectedValues: params.initialOptions,
                isMulti: isMulti
            )
            selectMenuController.selectConfirm = { selectedItems in
                var results: [OpenPluginMsgCardShowSelectMenuResponse.SelectedValuesItem] = []
                for item in selectedItems {
                    let res = OpenPluginMsgCardShowSelectMenuResponse.SelectedValuesItem(text: item.name, value: item.value)
                    results.append(res)
                }
                callback(.success(data: OpenPluginMsgCardShowSelectMenuResponse(selectedValues: results)))
            }
            MsgCardAPIUtils.presentController(vc: selectMenuController, context: context)
       default:
           callback(.success(data: nil))
           break
       }
    }
    
    required public init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandler(
            for: APIName.msgCardShowSelectMenu.rawValue,
            pluginType: Self.self,
            paramsType: OpenPluginMsgCardShowSelectMenuRequest.self,
            resultType: OpenPluginMsgCardShowSelectMenuResponse.self
        ) { (this, params, context, callback) in
            this.showSelectMenu(params: params, context: context, callback: callback)
        }
    }

}
