//
//  OpenAPICommonErrno.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE. DO NOT MODIFY!!!
//  TICKETID: 29122
//  

/// 通用错误域Errno
public enum OpenAPICommonErrno: OpenAPIErrnoProtocol {
    // 成功，success 时返回
    case ok
    // API 业务未知错误
    case unknown
    // API 基础框架未知错误
    case unhandledException
    // API 内部错误
    case internalError
    // API 不可用
    case unable
    // 非法参数<@param>，值不合法
    case invalidParam(_ type: InvalidParamType)
    // 鉴权失败
    case authenFail
    // 系统拒绝授权
    case systemAuthDeny
    // 用户拒绝授权
    case userAuthDeny
    // 无组织权限
    case organizationAuthDeny
    // 文件无读权限
    case readPermissionDenied(filePath: String)
    // 文件无写权限
    case writePermissionDenied(filePath: String)
    // 文件不存在
    case fileNotExists(filePath: String)
    // 文件已存在
    case fileAlreadyExists(filePath: String)
    // 文件夹非空
    case directoryNotEmpty(filePath: String)
    // 不是文件夹
    case fileIsNotDirectory(filePath: String)
    // 不是文件
    case fileIsNotRegularFile(filePath: String)
    // 写入大小限制
    case totalSizeLimitExceeded
    // 不能同时操作路径和它的子路径
    case cannotOperatePathAndSubPathAtTheSameTime
    // 读取的文件内容大小超过阈值
    case readDataExceedsSizeLimit
    // 加解密禁用操作
    case securityPermissionDenied
    // 写入的文件内容大小超过阈值
    case writeDataExceedsSizeLimit
    // 不合法的文件路径
    case invalidFilePath(filePath: String)
    // 文件名过长
    case fileNameTooLong(msg: String)
    // 网络请求取消
    case networkRequestCancelled
    // 网络超时
    case connectionTimeout
    // 网络断网
    case noNetworkConnection
    // rust libnet 错误
    case networkSdkError
    // 网络失败
    case networkFail
    // 文件下载失败
    case networkSdkDownloadFailed(detail: String)
    // 网络 sdk 内部透出的参数错误
    case networkSdkParameterError(detail: String)

    public var bizDomain: Int { 0 }
    public var funcDomain: Int { 0 }

    public var rawValue: Int {
        switch self {
        case .ok:
            return 0
        case .unknown:
            return 100
        case .unhandledException:
            return 101
        case .internalError:
            return 102
        case .unable:
            return 103
        case .invalidParam:
            return 104
        case .authenFail:
            return 105
        case .systemAuthDeny:
            return 106
        case .userAuthDeny:
            return 107
        case .organizationAuthDeny:
            return 108
        case .readPermissionDenied:
            return 201
        case .writePermissionDenied:
            return 202
        case .fileNotExists:
            return 203
        case .fileAlreadyExists:
            return 204
        case .directoryNotEmpty:
            return 205
        case .fileIsNotDirectory:
            return 206
        case .fileIsNotRegularFile:
            return 207
        case .totalSizeLimitExceeded:
            return 208
        case .cannotOperatePathAndSubPathAtTheSameTime:
            return 209
        case .readDataExceedsSizeLimit:
            return 210
        case .securityPermissionDenied:
            return 211
        case .writeDataExceedsSizeLimit:
            return 212
        case .invalidFilePath:
            return 213
        case .fileNameTooLong:
            return 214
        case .networkRequestCancelled:
            return 301
        case .connectionTimeout:
            return 302
        case .noNetworkConnection:
            return 303
        case .networkSdkError:
            return 304
        case .networkFail:
            return 305
        case .networkSdkDownloadFailed:
            return 306
        case .networkSdkParameterError:
            return 307
        }
    }
    
    public var errString: String {
        switch self {
        case .ok:
            return "ok"
        case .unknown:
            return "Unknown error"
        case .unhandledException:
            return "Unhandled exception"
        case .internalError:
            return "Internal error"
        case .unable:
            return "API not available"
        case .invalidParam(let type):
            return type.errString
        case .authenFail:
            return "Authentication failed"
        case .systemAuthDeny:
            return "System permission denied"
        case .userAuthDeny:
            return "User permission denied"
        case .organizationAuthDeny:
            return "Organization permission denied"
        case .readPermissionDenied(let filePath):
            return "No read permission for \(filePath)"
        case .writePermissionDenied(let filePath):
            return "No write permission for \(filePath)"
        case .fileNotExists(let filePath):
            return "File \(filePath) does not exist "
        case .fileAlreadyExists(let filePath):
            return "File \(filePath) already exists"
        case .directoryNotEmpty(let filePath):
            return "Directory \(filePath) not empty"
        case .fileIsNotDirectory(let filePath):
            return "\(filePath) is not directory"
        case .fileIsNotRegularFile(let filePath):
            return "\(filePath) is not file"
        case .totalSizeLimitExceeded:
            return "Total size limit exceeded"
        case .cannotOperatePathAndSubPathAtTheSameTime:
            return "Unable to operate on a path and its subpath at the same time"
        case .readDataExceedsSizeLimit:
            return "Data to read exceeds size limit"
        case .securityPermissionDenied:
            return "No permission to encrypt or decrypt"
        case .writeDataExceedsSizeLimit:
            return "Data to write exceeds size limit"
        case .invalidFilePath(let filePath):
            return "\(filePath) is invalid filePath"
        case .fileNameTooLong(let msg):
            return "File name too long: \(msg)"
        case .networkRequestCancelled:
            return "Network request cancelled"
        case .connectionTimeout:
            return "Connection timed out"
        case .noNetworkConnection:
            return "No network connection"
        case .networkSdkError:
            return "Internal error in network SDK"
        case .networkFail:
            return "Network failure"
        case .networkSdkDownloadFailed(let detail):
            return "Unable to download file. \(detail)"
        case .networkSdkParameterError(let detail):
            return "Parameter error in network SDK. \(detail)"
        }
    }
}
public enum InvalidParamType {
    case invalidParam(param: String)
    case paramCannotEmpty(param: String)
    case paramWrongType(param: String)
    
    public var errString: String {
        switch self {
        case .invalidParam(let param):
            return "Parameter error. Invalid value for \(param)"
        case .paramCannotEmpty(let param):
            return "Parameter error. \(param) cannot be empty"
        case .paramWrongType(let param):
            return "Parameter error. \(param) is of wrong type"
        }
    }
}
