//
//  OpenAPINetworkPrefetchErrno.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE. DO NOT MODIFY!!!
//  TICKETID: 26543
//

/// 网络-prefetchErrno
public enum OpenAPINetworkPrefetchErrno: OpenAPIErrnoProtocol {
    // 本地无任何缓存
    case noPrefetch
    // host 不匹配
    case hostMismatch(url: String, cacheUrlList: String)
    // path 不匹配
    case pathMismatch(url: String, cacheUrlList: String)
    // query 不匹配
    case queryMismatch(url: String, cacheUrlList: String)
    // url 不匹配，非 host，path，query 其他原因导致的 url 不匹配。
    case urlNormalMismatch(url: String, cacheUrlList: String)
    // method 不匹配
    case methodMismatch(method: String, cacheMethod: String)
    // header 不匹配
    case headerMismatch(header: String, cacheHeader: String)
    // responseType 不匹配
    case responseTypeMismatch(responseType: String, cacheResponseType: String)
    // data 不匹配
    case dataMismatch(data: String, cacheData: String)
    // prefetch 请求失败
    case prefetchRequestFailed
    // app.json 中配置的 prefetch 超过数量
    case prefetchExceedLimit(limit: String)
    // 对应的 Prefetch 请求因为 key 未匹配成功未发出，
    case prefetchNoSend(keyName: String)

    public var bizDomain: Int { 16 }
    public var funcDomain: Int { 5 }

    public var rawValue: Int {
        switch self {
        case .noPrefetch:
            return 0
        case .hostMismatch:
            return 1
        case .pathMismatch:
            return 2
        case .queryMismatch:
            return 3
        case .urlNormalMismatch:
            return 4
        case .methodMismatch:
            return 5
        case .headerMismatch:
            return 6
        case .responseTypeMismatch:
            return 7
        case .dataMismatch:
            return 8
        case .prefetchRequestFailed:
            return 9
        case .prefetchExceedLimit:
            return 10
        case .prefetchNoSend:
            return 11
        }
    }

    public var errString: String {
        switch self {
        case .noPrefetch:
            return "Unable to prefetch, as there are no prefetched caches locally. Please check configurations in  app.json."
        case .hostMismatch(let url, let cacheUrlList):
            return "Unable to prefetch, as no local cache matches the request's \(url). The cached URLs: \(cacheUrlList)"
        case .pathMismatch(let url, let cacheUrlList):
            return "Unable to prefetch, as URL path match failed. Please check if the key in URL path is configured correctly, or if the custom key is passed in correctly via query or storage. The request's URL: \(url); the cached URLs: \(cacheUrlList)."
        case .queryMismatch(let url, let cacheUrlList):
            return "Unable to prefetch, as URL query match failed. Please check if the key in URL query is configured correctly, or if the custom key is passed in correctly via query or storage. The request's URL: \(url); the cached URLs: \(cacheUrlList)."
        case .urlNormalMismatch(let url, let cacheUrlList):
            return "Unable to prefetch, as URL match failed. Please check if the key in URL is configured correctly, or if the custom key is passed in correctly via query or storage. The request's URL: \(url); the cached URLs: \(cacheUrlList)."
        case .methodMismatch(let method, let cacheMethod):
            return "Unable to prefetch, as method match failed. Please check if the method configured in prefetch is identical to the request's method. The request's method: \(method); the cached method: \(cacheMethod)."
        case .headerMismatch(let header, let cacheHeader):
            return "Unable to prefetch, as header match failed. Please check if the key in header is configured correctly, or if the custom key is passed in correctly via query or storage. The request's header: \(header); the cached header: \(cacheHeader)."
        case .responseTypeMismatch(let responseType, let cacheResponseType):
            return "Unable to prefetch, as responseType match failed. Please check if the responseType configured in prefetch is identical to the request's responseType. The request's responseType: \(responseType); the cached responseType: \(cacheResponseType)."
        case .dataMismatch(let data, let cacheData):
            return "Unable to prefetch, as data match failed. Please check if the key in data is configured correctly, or if the custom key is passed in correctly via query or storage. The request's data: \(data); the cached data: \(cacheData)."
        case .prefetchRequestFailed:
            return "Unable to prefetch, as network request failed"
        case .prefetchExceedLimit(let limit):
            return "Unable to prefetch, as prefetch requests exceed the upper limit of \(limit). Please check if there are too many prefetch rules configured in app.json."
        case .prefetchNoSend(let keyName):
            return "Unable to prefetch, as key \(keyName) could not be matched"
        }
    }
}
