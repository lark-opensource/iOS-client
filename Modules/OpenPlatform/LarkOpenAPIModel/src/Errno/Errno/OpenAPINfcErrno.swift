//
//  OpenAPINfcErrno.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE. DO NOT MODIFY!!!
//  TICKETID: 24386
//

/// NFCErrno
public enum OpenAPINfcErrno: OpenAPIErrnoProtocol {
    // 当前设备NFC已连接
    case techAlreadyConnected
    // 当前设备NFC未连接
    case techNotConnected
    // 系统未发现NFC标签
    case techNotDiscovered
    // 当前NFC标签不支持该tech
    case techNotSupport
    // 当前设备不支持该NFC能力
    case techFuncNotSupport
    // 基础数据传输参数错误
    case dataIsNull
    // array buffer数据传输参数错误
    case arrayBufferEmpty
    // base64数据传输参数错误
    case base64ValueEmpty
    // base64数据解码失败
    case base64DecodeError
    // 数据传输协议报错，导致result为空
    case transceiveError
    // NFC标签为空
    case typeEmpty
    // NFC服务已断开
    case serviceDead
    // 设备正在扫描
    case isDiscovering
    // 当前设备不支持NFC
    case notAvailable
    // 当前设备未开启NFC
    case notOpened

    public var bizDomain: Int { 15 }
    public var funcDomain: Int { 4 }

    public var rawValue: Int {
        switch self {
        case .techAlreadyConnected:
            return 204
        case .techNotConnected:
            return 205
        case .techNotDiscovered:
            return 206
        case .techNotSupport:
            return 208
        case .techFuncNotSupport:
            return 209
        case .dataIsNull:
            return 211
        case .arrayBufferEmpty:
            return 212
        case .base64ValueEmpty:
            return 213
        case .base64DecodeError:
            return 214
        case .transceiveError:
            return 215
        case .typeEmpty:
            return 216
        case .serviceDead:
            return 217
        case .isDiscovering:
            return 218
        case .notAvailable:
            return 1
        case .notOpened:
            return 3
        }
    }
    
    public var errString: String {
        switch self {
        case .techAlreadyConnected:
            return "NFC connected already"
        case .techNotConnected:
            return "NFC not connected yet"
        case .techNotDiscovered:
            return "NFC tag not found"
        case .techNotSupport:
            return "Tech type not supported by the current NFC tag"
        case .techFuncNotSupport:
            return "NFC function not supported"
        case .dataIsNull:
            return "Data is null"
        case .arrayBufferEmpty:
            return "Array buffer is empty"
        case .base64ValueEmpty:
            return "Base64 value is empty"
        case .base64DecodeError:
            return "Base64 decode failed"
        case .transceiveError:
            return "Failed to transceive data"
        case .typeEmpty:
            return "NFC type is empty"
        case .serviceDead:
            return "NFC disconnected"
        case .isDiscovering:
            return "NFC is polling"
        case .notAvailable:
            return "NFC not supported on the current device"
        case .notOpened:
            return "NFC not enabled yet on the device"
        }
    }
}
