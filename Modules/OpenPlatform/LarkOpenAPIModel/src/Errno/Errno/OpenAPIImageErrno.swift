//
//  OpenAPIImageErrno.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE. DO NOT MODIFY!!!
//  TICKETID: 29557
//  

/// 媒体-图片Errno
public enum OpenAPIImageErrno: Int, OpenAPIErrnoProtocol {
    // 用户取消
    case useCanceled = 1
    // 打开相册失败
    case unableOpenAlbum = 2
    // 压缩图片失败
    case unableCompressImg = 3
    // 非法的文件类型，目前仅支持 JPG 格式的图片
    case invalidFileType = 4
    // urls和requests不能同时为空
    case urlsAndRequestsAllEmpty = 5
    // urls和requests不能同时存在
    case urlsAndRequestsMutuallyExclusive = 6
    // 网络图片加载失败
    case UnableToLoadImage = 7
    // 图片大小不合法
    case InvalidImageSize = 8
    // 无效的图片数据
    case InvalidImageData = 9
    // 抱歉，由于你所在组织的安全配置，该文件不能被保存到本地
    case SecurityPermissionDenied = 10
    // 不支持的图片格式
    case ImageFormatNotSupported = 11
    // 系统保存图片失败
    case UnableToSaveImage = 12
    // 开始拍摄硬件资源抢占失败（有更高优先级业务占用）
    case startShootHigherPriorityFailed = 13

    public var bizDomain: Int { 13 }
    public var funcDomain: Int { 0 }
    
    public var errString: String {
        switch self {
        case .useCanceled:
            return "User canceled the operation"
        case .unableOpenAlbum:
            return "Unable to open album"
        case .unableCompressImg:
            return "Unable to compress image"
        case .invalidFileType:
            return "Invalid file type. Only .JPG images are supported currently."
        case .urlsAndRequestsAllEmpty:
            return "Urls and requests cannot both be empty"
        case .urlsAndRequestsMutuallyExclusive:
            return "Urls and requests cannot both exist"
        case .UnableToLoadImage:
            return "Unable to load image"
        case .InvalidImageSize:
            return "Invalid image size"
        case .InvalidImageData:
            return "Invalid image data"
        case .SecurityPermissionDenied:
            return "Unable to save locally due to your organization's security configuration"
        case .ImageFormatNotSupported:
            return "Image format not supported"
        case .UnableToSaveImage:
            return "Unable to save image"
        case .startShootHigherPriorityFailed:
            return "Unable to capture photo, as the resources required are currently in use"
        }
    }
}
