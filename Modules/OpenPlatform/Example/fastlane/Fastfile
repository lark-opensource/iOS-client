# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
__root='../../../..'
require_relative "#{__root}/fastlane/remove_unused_pb_common"

# 并发时xcodebuild极容易超时，设置一个长一点的超时，增加稳定性
ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] ||= '60'

default_platform(:ios)

platform :ios do

 lane :build_verify do |options|
    puts options

    # 执行 SwiftLint 并记录结果
    has_lint = run_swift_lint()
    puts "Run swiftlint with result #{has_lint}"

    merge_policy = lambda do |key, o, n|
      if o.is_a? Hash and n.is_a? Hash
        o.merge!(n, &merge_policy)
      elsif Fastlane::Actions::XcodebuildAction::ARGS_MAP.include? key and n == 'false'
        nil # remove action
      else
        n
      end
    end
    options = {
      workspace: 'Ecosystem.xcworkspace',
      scheme: 'Ecosystem',
      configuration: 'Debug',
      clean: true,
      build: true,
      raw_buildlog: false, # show output from script like swiftlint
      destination: 'generic/platform=iOS Simulator',
      build_settings: {
        'CODE_SIGNING_REQUIRED' => 'NO',
        'VALID_ARCHS' => 'x86_64'
      },
      derivedDataPath: ENV['DERIVED_DATA_PATH'],
      result_bundle_path: ENV['RESULT_DATA_PATH']
    }.merge!(options, &merge_policy)
    xcodebuild options
  end

  desc "自定义打包"
  desc "@param: output_directory 必选参数"
  desc "@param: derived_data_path, 默认值: output_directory/DerivedData"
  desc "@param: configuration, 默认值 Release"
  desc "@param: sdk, 默认值 iphoneos"
  desc "@param: export_method, 默认值: enterprise"
  desc "@param: iCloud_container_environment, 默认值: Production"
  desc "@param: CUSTOM_BLOCK"
  lane :build_package do |options|
    configuration = options[:configuration]
    configuration ||= 'Release'

    sdk = options[:sdk]
    sdk ||= 'iphoneos'

    derived_data_path = options[:derived_data_path]
    derived_data_path = "#{options[:output_directory]}/DerivedData"

    export_method = options[:export_method]
    export_method ||= 'enterprise'

    iCloud_container_environment = options[:iCloud_container_environment]
    iCloud_container_environment ||= 'Production'

    skip_for_simulator = false
    if sdk == 'iphonesimulator'
      skip_for_simulator = true
    end

    consume_build_channel(options)
    execute_cocoapods

    custom_block = options[:CUSTOM_BLOCK]
    custom_block&.call options

    gym(
      scheme: 'Ecosystem',
      clean: true,
      silent: true,
      sdk: sdk,
      skip_archive: skip_for_simulator,
      skip_codesigning: skip_for_simulator,
      configuration: configuration,
      export_method: export_method,
      export_options: {
        iCloudContainerEnvironment: iCloud_container_environment
      },
      output_directory: options[:output_directory],
      derived_data_path: options[:derived_data_path],
      include_symbols: false,
      xcargs: "LD_GENERATE_MAP_FILE='1' LD_MAP_FILE_PATH='#{options[:output_directory]}/lark_link_map.txt'"
    )
  end

  desc 'Execute Cocoapods'
  lane :execute_cocoapods do |options|
    pod_options = options.delete(:incremental) ? '' : '--clean-install'
    pod_options += options.delete(:verbose) ? '' : ' --verbose'

    begin
      # eesc 0.1.130 deals some compatible issue, so may not need to full install
      # when dev pod add international resources, generate new i18n auto.bundle, cache has problem
      # The release package is still --clean-installl, since it is fully compiled.
      sh "bundle exec pod install #{pod_options} || bundle exec pod update LarkSQLCipher #{pod_options} --no-repo-update"
    rescue
      puts 'Execute Pod Repo Update!'
      sh "bundle exec pod update LarkSQLCipher #{pod_options}"
    end
  end

  # consume the build_channel, so only execute once
  def consume_build_channel(options)
    if (build_channel = options.delete(:build_channel))
      sh "cd .. && ./BuildScript/XcodeEdit ./ BuildScript/config.json #{build_channel}"
    end
  end

  # swift lint
  def get_lint_file_paths()
    # find all changed files
    change_file_list = `git diff --name-only --diff-filter=ACMRTX HEAD~1..HEAD`.split("\n")

    # get included config
    included = YAML.load(File.open("../../.swiftlint.yml"))["included"].map { |path| path.to_s }

    # filter all swift file
    lint_file_list = change_file_list.find_all { |name|
      name.end_with?(".swift") && (included.any? { |e| name.start_with?(e) })
    }

    return [lint_file_list, change_file_list, included]
  end

  def get_swift_lint_executable_path()
    fastlane_path = File::dirname(File.expand_path(__FILE__))
    # Pods 下的 SwiftLint 文件路径
    executable_path = File.join(File::dirname(fastlane_path), "Pods/SwiftLint/swiftlint")

    # 有则说明命中了缓存，直接返回
    if File::exist?(executable_path)
      return executable_path
    else
      # 没有则去TOS下载可执行文件
      executable_zip_path = "#{fastlane_path}/swiftlint.zip"
      executable_path = "#{fastlane_path}/swiftlint"
      executable_zip_url = "http://tosv.byted.org/obj/ee-infra-ios/swiftlint_0.40.3.zip"
      sh "curl #{executable_zip_url} --output #{executable_zip_path}; unzip -o #{executable_zip_path}"

      return executable_path
    end
  end

  # 执行 swift lint
  def run_swift_lint()
    lint_file_list, change_file_list, included = get_lint_file_paths()
    puts "lint files:\n#{lint_file_list.join("\n")}\n\nchange files:\n$#{change_file_list.join("\n")}\n\nincluded:\n#{included.join("\n")}"

    # swiftlint 的执行路径在 Example，需要转换到根目录
    lint_swift_file = lint_file_list.map { |path| "../#{path}" }

    executable_path = get_swift_lint_executable_path().to_s

    if File::exist?(executable_path) && lint_swift_file.length > 0
      swiftlint(
        config_file: "../.swiftlint.yml",
        strict: true,
        files: lint_swift_file,
        executable: executable_path
      )
    else
      puts "Skip swiftlint"
    end

    return true
  end

  lane :revert_remove_unused_pb do |options|
    _revert_remove_unused_pb(options)
  end

  lane :remove_unused_pb do |options|
    # 删除无用pb message（文档：https://bytedance.feishu.cn/wiki/wikcnSevDX5Izu7OSlfmAmVxrle）
    options['REMOVE_PB_PROEJCT_DIR'] = __root
    _remove_unused_pb(options)
  end
end