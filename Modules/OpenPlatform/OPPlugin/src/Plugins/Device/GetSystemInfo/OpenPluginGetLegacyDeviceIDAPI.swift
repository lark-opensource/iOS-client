//
//  OpenPluginGetLegacyDeviceIDAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/3/6 09:31:19
//

import Foundation
import LarkOpenAPIModel
import OPPluginManagerAdapter
import LarkOpenPluginManager
import LarkAccountInterface
import LarkContainer
import OPFoundation

// MARK: - OpenPluginGetLegacyDeviceIDAPI
final class OpenPluginGetLegacyDeviceIDAPI: OpenBasePlugin {
    
    @Provider private var passportService: PassportService // Global
    
    func getLegacyDeviceID(
        params: OpenAPIBaseParams,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext) -> OpenAPIBaseResponse<OpenPluginGetLegacyDeviceIDResponse> {
            
            let uniqueID = gadgetContext.uniqueID
            var orgAuthMap = [:] as [AnyHashable: Any]
            if let authorization = gadgetContext.authorization {
                orgAuthMap = authorization.source.orgAuthMap
            } else {
                context.apiTrace.info("authorization is nil")
            }
            let orgAuthMapState: EMAOrgAuthorizationMapState = BDPIsEmptyDictionary(orgAuthMap) ? .empty : .notEmpty
            
            let hasAuth = EMAOrgAuthorization.orgAuth(withAuthScopes: orgAuthMap, invokeName: "getLegacyDeviceID")
            OPMonitor(kEventName_mp_organization_api_invoke)
                .setUniqueID(uniqueID)
                .addCategoryValue("api_name", "getLegacyDeviceID")
                .addCategoryValue("auth_name", "deviceID")
                .addCategoryValue("has_auth", hasAuth ? 1 : 0)
                .addCategoryValue("org_auth_map", "\(orgAuthMapState.rawValue)")
                .flush()
            guard hasAuth else {
                context.apiTrace.error("no deviceID authorization")
                let error = OpenAPIError(code: GetDeviceIDErrorCode.authDeny)
                    .setOuterMessage("no deviceID authorization")
                return .failure(error: error)
            }
            context.apiTrace.info("has permission to getLegacyDeviceID")
            
            guard let legacyDeviceID = passportService.getLegacyDeviceId(),
                  !legacyDeviceID.isEmpty else {
                return .success(data: OpenPluginGetLegacyDeviceIDResponse(legacyDeviceID: nil))
            }
            /*
             1、Passport提供did为不加密数据，加密逻辑开平侧处理
             2、OpenPluginGetLegacyDeviceIDAPI为短期兜底API
             3、开平侧对于did加密没有一个通用处理api，同时评估did加密算法未来不会变动
             本次代码修改不扩大影响范围，在api内保持跟getDeviceID一致的加密逻辑。
            */
            let salt = "littleapp"
            let shaLegacyDeviceID = (legacyDeviceID + salt).sha256()
            return .success(data: OpenPluginGetLegacyDeviceIDResponse(legacyDeviceID: shaLegacyDeviceID))
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceSyncHandlerGadget(for: "getLegacyDeviceID", pluginType: Self.self, paramsType: OpenAPIBaseParams.self, resultType: OpenPluginGetLegacyDeviceIDResponse.self) { (this, params, context, gadgetContext) -> OpenAPIBaseResponse<OpenPluginGetLegacyDeviceIDResponse> in
            return this.getLegacyDeviceID(params: params, context: context, gadgetContext: gadgetContext)
        }
    }
}
