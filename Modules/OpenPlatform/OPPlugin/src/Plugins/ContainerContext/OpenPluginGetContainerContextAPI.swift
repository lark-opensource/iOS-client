//
//  OpenPluginGetContainerContextAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/4/10 08:12:24
//

import Foundation
import LarkOpenAPIModel
import OPPluginManagerAdapter
import LarkOpenPluginManager
import WebBrowser
import LarkContainer

// MARK: - OpenPluginGetContainerContextAPI
final class OpenPluginGetContainerContextAPI: OpenBasePlugin {
    
    func getContainerContext(
        params: OpenAPIBaseParams,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenPluginGetContainerContextResponse>) -> Void) {
            guard let browser = context.controller as? WebBrowser else {
                let error = OpenAPIError(errno: OpenAPICommonErrno.unknown)
                    .setMonitorMessage("apiContext.controller is not WebBrowser")
                context.apiTrace.error("apiContext.controller is not WebBrowser")
                return callback(.failure(error: error))
            }
            let mode = browser.configuration.scene.rawValue
            let fromScene = browser.configuration.fromScene.rawValue
            callback(.success(data: OpenPluginGetContainerContextResponse(mode: mode, fromScene: fromScene)))
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: "getContainerContext", pluginType: Self.self, paramsType: OpenAPIBaseParams.self, resultType: OpenPluginGetContainerContextResponse.self) { (this, params, context, gadgetContext, callback) in
            context.apiTrace.info("getContainerContext API call start")
            this.getContainerContext(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
            context.apiTrace.info("getContainerContext API call end")
        }
    }
}
