//
//  OpenPluginSetPageOrientationAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2022/10/25 08:18:38
//  DO NOT MODIFY!!!
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import OPPluginManagerAdapter
import LarkOpenPluginManager
import LarkContainer

// MARK: - 设置小程序页面方向接口
final class OpenPluginSetPageOrientationAPI: OpenBasePlugin {
    
    enum APIName: String {
        case setPageOrientation
    }
    
    func setPageOrientation(
        params: OpenPluginSetPageOrientationRequest,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
            guard OPSDKFeatureGating.gadgetSetPageOrientationEnable(), OPSDKFeatureGating.enablePageOrientation() else {
                let error = OpenAPIError(errno: OpenAPICommonErrno.unable).setMonitorMessage("FG unable")
                callback(.failure(error: error))
                return
            }
            
            // 该API在iPad上不生效(FG不会对iPad打开, 但是这边需要兜底处理一下)
            guard !OPGadgetRotationHelper.isPad() else {
                let error = OpenAPIError(errno: OpenAPICommonErrno.unable).setMonitorMessage("current device is iPad, not support")
                callback(.failure(error: error))
                return
            }

            // 主导航小程序不支持该API
            guard !OPGadgetRotationHelper.isTabGadget(gadgetContext.uniqueID) else {
                let error = OpenAPIError(errno: OpenAPIUiWindowErrno.tabGadgetNotSupport)
                callback(.failure(error: error))
                return
            }

            // 半屏小程序不支持该API
            guard !BDPXScreenManager.isXScreenMode(gadgetContext.uniqueID) else {
                let error = OpenAPIError(errno: OpenAPIUiWindowErrno.xScreenNotSupport)
                callback(.failure(error: error))
                return
            }

            // 小程序在后台则API不生效
            // Note: 不要去获取BDPInterruptionManager.shared().didEnterBackground属性和系统的applicationState
            // 因为API侧resume被挂起API调用是通过监听BDPInterruptionManager通知,这个时机是早于上面提到的2个属性的修改时机.
            guard gadgetContext.isVCActive else {
                let error = OpenAPIError(errno: OpenAPIUiWindowErrno.background).setMonitorMessage("gadget in background")
                callback(.failure(error: error))
                return
            }
            
            // 获取一下小程序的页面VC用于后面逻辑旋转
            guard let appVC = gadgetContext.controller as? BDPAppController, let pageVC = appVC.currentAppPage() else {
                let error = OpenAPIError(errno: OpenAPICommonErrno.internalError).setMonitorMessage("can not get gadget page")
                callback(.failure(error: error))
                return
            }

            // 有控件弹出时, 该API也不会生效(这边与Android表现不同, 因为双端系统的的旋转机制不同)
            guard appVC.presentedViewController == nil && pageVC.presentedViewController == nil else {
                let error = OpenAPIError(errno: OpenAPIUiWindowErrno.appPresenting)
                callback(.failure(error: error))
                return
            }

            // 设置BDPAppPageController的页面方向
            let orientation = OPGadgetRotationHelper.convertOritation(params.orientation.rawValue)
            pageVC.pageOrientation = orientation
            if #available(iOS 16.0, *) {
                //iOS16这边旋转不需要再调用UIDevice的方法,而是更新当前VC的所支持方向.
                pageVC.setNeedsUpdateOfSupportedInterfaceOrientations()
            } else {
                pageVC.adjustInterfaceOrientation()
            }

            callback(.success(data: nil))
        }

    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: APIName.setPageOrientation.rawValue, pluginType: Self.self, paramsType: OpenPluginSetPageOrientationRequest.self, resultType: OpenAPIBaseResult.self) { (this, params, context, gadgetContext, callback) in
            context.apiTrace.info("setPageOrientation API call start")
            this.setPageOrientation(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
            context.apiTrace.info("setPageOrientation API call end")
        }
    }
}
