//
//  OpenPluginChooseChatModel.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE. DO NOT MODIFY!!!
//  TICKETID: 27402
//
//  类型声明默认为internal, 如需被外部Module引用, 请在上行添加
//  /** anycode-lint-ignore */
//  public
//  /** anycode-lint-ignore */

import Foundation
import LarkOpenAPIModel


// MARK: - OpenPluginChooseChatRequest
final class OpenPluginChooseChatRequest: OpenAPIBaseParams {

    /// description: 是否允许在选择会话列表支持创建群组返回
    @OpenAPIRequiredParam(
            userOptionWithJsonKey: "allowCreateGroup",
            defaultValue: true)
    public var allowCreateGroup: Bool

    /// description: 是否可以多选(默认最多可选10个)
    @OpenAPIRequiredParam(
            userOptionWithJsonKey: "multiSelect",
            defaultValue: false)
    public var multiSelect: Bool

    /// description: 是否在会话列表过滤掉自己
    @OpenAPIRequiredParam(
            userOptionWithJsonKey: "ignoreSelf",
            defaultValue: false)
    public var ignoreSelf: Bool

    /// description: 是否在会话列表过滤掉机器人
    @OpenAPIRequiredParam(
            userOptionWithJsonKey: "ignoreBot",
            defaultValue: false)
    public var ignoreBot: Bool

    /// description: 选择模式
    /// selectType = 0 选择单聊或群聊
    /// selectType = 1 只选择群聊
    /// selectType = 2 只选择单聊（此 type 下 allowCreateGroup 设置为 true 无效）
    @OpenAPIRequiredParam(
            userOptionWithJsonKey: "selectType",
            defaultValue: .zero)
    public var selectType: SelectTypeEnum

    /// description: 确认弹框的标题
    @OpenAPIOptionalParam(
            jsonKey: "confirmTitle")
    public var confirmTitle: String?

    /// description: 确认弹框描述，空的时候不展示
    @OpenAPIOptionalParam(
            jsonKey: "confirmDesc")
    public var confirmDesc: String?

    /// description: 确认弹框的确认按钮文案
    @OpenAPIOptionalParam(
            jsonKey: "confirmText")
    public var confirmText: String?

    /// description: 选择的会话是否包含外部会话，默认包含
    @OpenAPIRequiredParam(
            userOptionWithJsonKey: "externalChat",
            defaultValue: true)
    public var externalChat: Bool

    /// description: 确认弹框是否显示留言输入框。
    @OpenAPIRequiredParam(
            userOptionWithJsonKey: "showMessageInput",
            defaultValue: false)
    public var showMessageInput: Bool

    /// description: 指定已选取的open_id数组，不为空时默认为多选
    @OpenAPIOptionalParam(
            jsonKey: "chosenOpenIds")
    public var chosenOpenIds: [String]?

    /// description: 指定已选取的open_chat_id数组，不为空时默认为多选
    @OpenAPIOptionalParam(
            jsonKey: "chosenOpenChatIds")
    public var chosenOpenChatIds: [String]?

    public override var autoCheckProperties: [OpenAPIParamPropertyProtocol] {
        return [_allowCreateGroup, _multiSelect, _ignoreSelf, _ignoreBot, _selectType, _confirmTitle, _confirmDesc, _confirmText, _externalChat, _showMessageInput, _chosenOpenIds, _chosenOpenChatIds]
    }

    // MARK: SelectTypeEnum
    enum SelectTypeEnum: Int, OpenAPIEnum {

        /// description: 选择单聊或群聊
        case zero = 0

        /// description: 只选择群聊
        case one = 1

        /// description: 只选择单聊（此 type 下 allowCreateGroup 设置为 true 无效）
        case two = 2

    }
}

// MARK: - OpenPluginChooseChatResponse
final class OpenPluginChooseChatResponse: OpenAPIBaseResult {

    /// description: 选择会话列表
    public let data: [DataItem]?

    /// description: 用户输入的留言(showMessageInput为true时才会有值)
    public let message: String?

    public init(data: [DataItem]?, message: String?) {
        self.data = data
        self.message = message
        super.init()
    }

    public override func toJSONDict() -> [AnyHashable : Any] {
        var result: [AnyHashable : Any] = [:]
        result["data"] = data?.map({ $0.toJSONDict() })
        result["message"] = message
        return result
    }

    // MARK: DataItem
    final class DataItem: OpenAPIBaseResult {

        /// description: 会话ID（chat_id）
        public let id: String?

        /// description: 会话类型
        /// chatType = 0 单聊
        /// chatType = 1 群聊
        public let chatType: ChatTypeEnum?

        /// description: 单聊用户类型
        /// userType = 0 普通用户
        /// userType = 1 机器人(仅在chatType为0时返回此参数)
        public let userType: UserTypeEnum?

        /// description: 会话的头像url数组，包含多种图片分辨率
        public let avatarUrls: [String]?

        /// description: 会话名称
        public let name: String?

        /// description: 国际化会话名
        public let i18nNames: I18nNamesObject?

        public init(id: String?, chatType: ChatTypeEnum?, userType: UserTypeEnum?, avatarUrls: [String]?, name: String?, i18nNames: I18nNamesObject?) {
            self.id = id
            self.chatType = chatType
            self.userType = userType
            self.avatarUrls = avatarUrls
            self.name = name
            self.i18nNames = i18nNames
            super.init()
        }

        public override func toJSONDict() -> [AnyHashable : Any] {
            var result: [AnyHashable : Any] = [:]
            result["id"] = id
            result["chatType"] = chatType?.rawValue
            result["userType"] = userType?.rawValue
            result["avatarUrls"] = avatarUrls
            result["name"] = name
            result["i18nNames"] = i18nNames?.toJSONDict()
            return result
        }
    }

    // MARK: ChatTypeEnum
    enum ChatTypeEnum: Int, OpenAPIEnum {

        /// description: 单聊
        case chatTypeP2p = 0

        /// description: 群聊
        case chatTypeGroup = 1

    }

    // MARK: UserTypeEnum
    enum UserTypeEnum: Int, OpenAPIEnum {

        /// description: 普通用户
        case userTypeUser = 0

        /// description: 机器人(仅在chatType为0时返回此参数)
        case userTypeBot = 1

    }

    // MARK: I18nNamesObject
    final class I18nNamesObject: OpenAPIBaseResult {

        /// description: 中文名，可能为空
        public let zh_cn: String?

        /// description: 英文名，可能为空
        public let en_us: String?

        /// description: 日文名，可能为空
        public let ja_jp: String?

        public init(zh_cn: String?, en_us: String?, ja_jp: String?) {
            self.zh_cn = zh_cn
            self.en_us = en_us
            self.ja_jp = ja_jp
            super.init()
        }

        public override func toJSONDict() -> [AnyHashable : Any] {
            var result: [AnyHashable : Any] = [:]
            result["zh_cn"] = zh_cn
            result["en_us"] = en_us
            result["ja_jp"] = ja_jp
            return result
        }
    }
}
