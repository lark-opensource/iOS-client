//
//  OpenPluginOpenMyAIAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/6/8 06:47:32
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import WebBrowser
import LarkOPInterface
import LarkOpenPluginManager
import LarkContainer

// MARK: - OpenPluginOpenMyAIAPI
final class OpenPluginOpenMyAIAPI: OpenBasePlugin {
    
    func openMyAI(
        params: OpenAPIBaseParams,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
            guard let browser = context.controller as? WebBrowser else {
                let error = OpenAPIError(errno: OpenAPICommonErrno.unknown)
                    .setMonitorMessage("apiContext.controller is not WebBrowser")
                context.apiTrace.error("apiContext.controller is not WebBrowser")
                return callback(.failure(error: error))
            }
            let unableError = OpenAPIError(errno: OpenAPICommonErrno.unable)
                .setMonitorMessage("apiContext.controller is not WebBrowser")
            context.apiTrace.error("apiContext.controller is not WebBrowser")
            return callback(.failure(error: unableError))
            //browser.launchMyAI()
//            callback(.success(data: OpenAPIBaseResult()))
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: "openMyAI", pluginType: Self.self, paramsType: OpenAPIBaseParams.self, resultType: OpenAPIBaseResult.self) { (this, params, context, gadgetContext, callback) in
            context.apiTrace.info("openMyAI API call start")
            this.openMyAI(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
            context.apiTrace.info("openMyAI API call end")
        }
    }
}
