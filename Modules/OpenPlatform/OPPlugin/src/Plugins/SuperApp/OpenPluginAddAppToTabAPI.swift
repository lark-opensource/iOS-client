//
//  OpenPluginAddAppToTabAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/7/4 03:19:04
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import LarkOpenPluginManager
import LarkQuickLaunchInterface
import LarkContainer
import RxSwift
import LarkTab

// MARK: - OpenPluginAddAppToTabAPI
final class OpenPluginAddAppToTabAPI: OpenBasePlugin {
    
    @InjectedUnsafeLazy var quickLaunchService: QuickLaunchService
    
    private let disposeBag = DisposeBag()
    
    
    /// langTitle 是否有效，如果langTitle 内容为空，或者所有的值为空，为无效，否则有效
    /// - Parameter langTitle: 有效语言title
    /// - Returns: true / false
    func isEmpty(langTitle: [String: String]) -> Bool {
        if langTitle.isEmpty {
            return true
        }
        for (_, titleStr) in langTitle {
            if !titleStr.isEmpty {
                return false
            }
        }
        return true
    }
    
    func addAppToTab(
        params: OpenPluginAddAppToTabRequest,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
            guard OpenPluginAppTabUtil.checkAppTabAPI(apiName: "addAppToTab", uniqueID:gadgetContext.uniqueID) else {
                let error = OpenAPIError(errno: OpenAPICommonErrno.unable)
                callback(.failure(error: error))
                return
            }
            guard let appTypeNum = params.appType?.rawValue, let appType = CustomBizType(rawValue: appTypeNum) else {
                context.apiTrace.error("appToTab add failed: appType invalidParam ")
                let error = OpenAPIError(errno: OpenAPICommonErrno.invalidParam(.invalidParam(param: "appType")))
                callback(.failure(error: error))
                return
            }
            guard let languageTitle = params.title as? [String: String] else {
                context.apiTrace.error("appToTab add failed: title invalidParam ")
                let error = OpenAPIError(errno: OpenAPICommonErrno.invalidParam(.invalidParam(param: "title")))
                callback(.failure(error: error))
                return
            }
            
            if isEmpty(langTitle: languageTitle) {
                context.apiTrace.error("appToTab add failed: title can't empty ")
                let error = OpenAPIError(errno: OpenAPICommonErrno.invalidParam(.paramCannotEmpty(param: "title")))
                callback(.failure(error: error))
                return
            }
            
            quickLaunchService.pinToQuickLaunchWindow(id: params.appID, tabBizID: params.appID, tabBizType: appType, tabIcon: .urlString(params.logoUrl), tabTitle:"", tabURL: params.url, tabMultiLanguageTitle: languageTitle).subscribe(onNext: { _ in
                callback(.success(data: nil))
            }, onError: {error in
                context.apiTrace.error("appToTab add failed: \(error)")
                let callbackError = OpenPluginAppTabUtil.processError(error: error)
                callback(.failure(error: callbackError))
            }).disposed(by: self.disposeBag)
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: "addAppToTab", pluginType: Self.self, paramsType: OpenPluginAddAppToTabRequest.self, resultType: OpenAPIBaseResult.self) { (this, params, context, gadgetContext, callback) in
            context.apiTrace.info("addAppToTab API call start")
            this.addAppToTab(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
            context.apiTrace.info("addAppToTab API call end")
        }
    }
}
