//
//  OpenPluginRemoveAppFromTabAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/7/4 03:12:45
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import LarkOpenPluginManager
import LarkQuickLaunchInterface
import LarkContainer
import RxSwift
import LarkTab

// MARK: - OpenPluginRemoveAppFromTabAPI
final class OpenPluginRemoveAppFromTabAPI: OpenBasePlugin {
    
    @InjectedUnsafeLazy var quickLaunchService: QuickLaunchService
    
    private let disposeBag = DisposeBag()
    
    func removeAppFromTab(
        params: OpenPluginRemoveAppFromTabRequest,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
            guard OpenPluginAppTabUtil.checkAppTabAPI(apiName: "removeAppFromTab", uniqueID:gadgetContext.uniqueID) else {
                let error = OpenAPIError(errno: OpenAPICommonErrno.unable)
                callback(.failure(error: error))
                return
            }
            guard let appTypeNum = params.appType?.rawValue, let appType = CustomBizType(rawValue: appTypeNum) else {
                context.apiTrace.error("appToTab remove failed: appType invalidParam ")
                let error = OpenAPIError(errno: OpenAPICommonErrno.invalidParam(.invalidParam(param: "appType")))
                callback(.failure(error: error))
                return
            }
            quickLaunchService.unPinFromQuickLaunchWindow(appId: params.appID, tabBizType: appType).subscribe(onNext: { _ in
                callback(.success(data: nil))
            }, onError: { error in
                context.apiTrace.error("appToTab remove failed: \(error)")
                let callbackError = OpenPluginAppTabUtil.processError(error: error)
                callback(.failure(error: callbackError))
            }).disposed(by: self.disposeBag)
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: "removeAppFromTab", pluginType: Self.self, paramsType: OpenPluginRemoveAppFromTabRequest.self, resultType: OpenAPIBaseResult.self) { (this, params, context, gadgetContext, callback) in
            context.apiTrace.info("removeAppFromTab API call start")
            this.removeAppFromTab(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
            context.apiTrace.info("removeAppFromTab API call end")
        }
    }
}
