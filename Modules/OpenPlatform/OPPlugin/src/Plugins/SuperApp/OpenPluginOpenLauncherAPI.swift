//
//  OpenPluginOpenLauncherAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/5/22 07:08:30
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import LarkOpenPluginManager
import LarkContainer
import LarkQuickLaunchInterface
import LarkTraitCollection

// MARK: - OpenPluginOpenLauncherAPI
final class OpenPluginOpenLauncherAPI: OpenBasePlugin {

    @InjectedUnsafeLazy var quickLaunchService: QuickLaunchService

    func openLauncher(
        params: OpenAPIBaseParams,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
            
            if quickLaunchService.isQuickLauncherEnabled {
                guard !BDPXScreenManager.isXScreenMode(gadgetContext.uniqueID) else {
                    let error = OpenAPIError(errno: OpenAPICommonErrno.unable)
                    callback(.failure(error: error))
                    return
                }
                
                // iPad R视图下不能调用
                if UIDevice.current.userInterfaceIdiom == .pad,
                   let controller = gadgetContext.controller,
                   let window = controller.view.window,
                   TraitCollectionKit.customTraitCollection(window.traitCollection, window.op_size).horizontalSizeClass == .regular {
                    let error = OpenAPIError(errno: OpenAPICommonErrno.unable)
                    callback(.failure(error: error))
                    return
                }
                
                quickLaunchService.showQuickLaunchWindow(from: nil)
                callback(.success(data: nil))
            } else {
                let error = OpenAPIError(errno: OpenAPICommonErrno.unable)
                callback(.failure(error: error))
            }

    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: "openLauncher", pluginType: Self.self, paramsType: OpenAPIBaseParams.self, resultType: OpenAPIBaseResult.self) { (this, params, context, gadgetContext, callback) in
            this.openLauncher(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
        }
    }
}
