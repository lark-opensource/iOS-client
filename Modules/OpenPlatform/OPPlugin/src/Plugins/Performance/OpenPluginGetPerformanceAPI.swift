//
//  OpenPluginGetPerformanceAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/6/27 08:19:51
//

import Foundation
import LarkOpenAPIModel
import OPPluginManagerAdapter
import TTMicroApp
import LarkOpenPluginManager
import LarkContainer

final class OpenPluginGetPerformanceAPIResult: OpenAPIBaseResult {
    private let data: [AnyHashable : Any]
    
    init(data: [AnyHashable : Any]) {
        self.data = data
    }
    override func toJSONDict() -> [AnyHashable : Any] { data }
}

// MARK: - OpenPluginGetPerformanceAPI
final class OpenPluginGetPerformanceAPI: OpenBasePlugin {
    
    // 只有小程序可调用
    func getPerformance(
        params: OpenAPIBaseParams,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext) -> OpenAPIBaseResponse<OpenPluginGetPerformanceAPIResult> {
            
            guard let gadgetController = gadgetContext.controller else {
                let error = OpenAPIError(code: OpenAPICommonErrorCode.unknown).setMonitorMessage("gadgetController is nil")
                return .failure(error: error)
            }
            
            var data: [AnyHashable: Any] = [:]
            
            let fps = BDPFPSMonitor.fps()
            let cpuUsage = BDPCPUMonitor.cpuUsage()
            let usedMemoryInB = BDPMemoryMonitor.currentMemoryUsageInBytes()
            let performanceData: [String : Any] = [
                "cpu": cpuUsage / 100,
                "fps": fps,
                "memory": usedMemoryInB / (1024 * 1024),
            ]
            data.merge(performanceData) { $1 }
            
            var performanceArray: [BDPPerformanceMonitor] = []
            
            if let vc = BDPAppController.currentAppPageController(gadgetController, fixForPopover: false) {
                let task = BDPTaskManager.shared().getTaskWith(gadgetContext.uniqueID)
                
                if let taskPerformanceMonitor = task?.performanceMonitor {
                    performanceArray.append(taskPerformanceMonitor)
                }
                if let vcPerformanceMonitor = OPUnsafeObject(vc.performanceMonitor) {
                    performanceArray.append(vcPerformanceMonitor)
                }
                if let pagePerformanceMonitor = vc.appPage?.bwv_performanceMonitor {
                    performanceArray.append(pagePerformanceMonitor)
                }
            }
            
            var timing: [AnyHashable: Any] = [:]
            performanceArray.forEach { manager in
                if let timingData = manager.timingData() {
                    timing.merge(timingData) { $1 }
                }
                if let performanceData = manager.performanceData() {
                    data.merge(performanceData) { $1 }
                }
            }
            
            data["timing"] = timing

            return .success(data: .init(data: data))
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceSyncHandlerGadget(
            for: "getPerformance",
            pluginType: Self.self,
            resultType: OpenPluginGetPerformanceAPIResult.self) { (this, params, context, gadgetContext) in
            return this.getPerformance(params: params, context: context, gadgetContext: gadgetContext)
        }
    }
}
