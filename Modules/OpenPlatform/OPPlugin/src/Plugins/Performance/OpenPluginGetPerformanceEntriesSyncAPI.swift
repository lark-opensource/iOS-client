//
//  OpenPluginGetPerformanceEntriesSyncAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/4/26 09:37:05
//

import Foundation
import LarkOpenAPIModel
import OPPluginManagerAdapter
import LarkOpenPluginManager
import LarkContainer
import TTMicroApp

// MARK: - OpenPluginGetPerformanceEntriesSyncAPI
final class OpenPluginGetPerformanceEntriesSyncAPI: OpenBasePlugin {
    
    func getPerformanceEntriesSync(
        params: OpenAPIBaseParams,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext) -> OpenAPIBaseResponse<OpenPluginGetPerformanceEntriesSyncResponse> {
            let uniqueID = gadgetContext.uniqueID
            let entries = BDPPerformanceProfileManager.sharedInstance().getPerformanceEntries(by: uniqueID)
            var entryItems = [OpenPluginGetPerformanceEntriesSyncResponse.EntriesItem]()
            for entry in entries {
                guard let entry = entry as? BDPGetPerformanceEntry else {
                    break
                }
                let entryItem = OpenPluginGetPerformanceEntriesSyncResponse.EntriesItem.init(name: entry.name, entryType: entry.convertEntryType(), startTime: entry.startTime, duration: entry.duration, fileName: entry.fileName == "" ? nil : entry.fileName, isPreload: entry.isPreload, webviewId: entry.webviewId > 0 ? entry.webviewId : nil)
                entryItems.append(entryItem)
            }
            return .success(data: OpenPluginGetPerformanceEntriesSyncResponse(entries: entryItems))
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceSyncHandlerGadget(for: "getPerformanceEntriesSync", pluginType: Self.self, paramsType: OpenAPIBaseParams.self, resultType: OpenPluginGetPerformanceEntriesSyncResponse.self) { (this, params, context, gadgetContext) -> OpenAPIBaseResponse<OpenPluginGetPerformanceEntriesSyncResponse> in
            return this.getPerformanceEntriesSync(params: params, context: context, gadgetContext: gadgetContext)
        }
    }
}
