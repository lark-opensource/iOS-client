//
//  OpenPluginClearWebStorageAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2022/12/12 07:40:04
//  DO NOT MODIFY!!!
//

import Foundation
import LarkOpenAPIModel
import OPPluginManagerAdapter
import LarkOpenPluginManager
import LarkContainer

// MARK: - 
final class OpenPluginClearWebStorageAPI: OpenBasePlugin {
    
    enum APIName: String {
        case clearWebStorage
    }
    
    func clearWebStorage(
        params: OpenAPIBaseParams,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
            WKWebsiteDataStore.default().removeData(ofTypes: [WKWebsiteDataTypeLocalStorage, WKWebsiteDataTypeWebSQLDatabases,WKWebsiteDataTypeIndexedDBDatabases], modifiedSince: Date(timeIntervalSince1970: 0)) {
                context.apiTrace.info("clearWebStorage finished")
            }
            callback(.success(data: nil))
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: APIName.clearWebStorage.rawValue, pluginType: Self.self, paramsType: OpenAPIBaseParams.self, resultType: OpenAPIBaseResult.self) { (this, params, context, gadgetContext, callback) in
            context.apiTrace.info("clearWebStorage API call start")
            this.clearWebStorage(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
            context.apiTrace.info("clearWebStorage API call end")
        }
    }
}
