//
//  OpenPluginReverseGeocodeAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2022/8/2 20:49:08
//  DO NOT MODIFY!!!
//

import LarkLocationPicker
import LarkOpenAPIModel
import LarkOpenPluginManager
import OPPluginManagerAdapter
import LarkContainer

// MARK: -

final class OpenPluginReverseGeocodeAPI: OpenBasePlugin {
    private let searchManager = ReverseGeocodeManager()
    enum APIName: String {
        case reverseGeocode
    }

    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: APIName.reverseGeocode.rawValue, pluginType: Self.self, paramsType: OpenPluginReverseGeocodeRequest.self, resultType: OpenPluginReverseGeocodeResponse.self) { this, params, context, gadgetContext, callback in
            context.apiTrace.info("reverseGeocode API call start")
            this.reverseGeocode(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
            context.apiTrace.info("reverseGeocode API call end")
        }
    }
}

extension OpenPluginReverseGeocodeAPI {
    func reverseGeocode(params: OpenPluginReverseGeocodeRequest,
                        context: OpenAPIContext,
                        gadgetContext: GadgetAPIContext,
                        callback: @escaping (OpenAPIBaseResponse<OpenPluginReverseGeocodeResponse>) -> Void)
    {
        let coordinate = CLLocationCoordinate2D(latitude: params.latitude, longitude: params.longitude)
        let needExtendedInfo = params.needExtendedInfo
        context.apiTrace.info("reverseGeocode coordinate: <\(coordinate.longitude),\(coordinate.latitude)>, needExtendedInfo:\(needExtendedInfo)")
        searchManager.reverseGeocode(coordinate: coordinate) { error in
            context.apiTrace.error("reverseGeocode failed error:\(error)")
            callback(.failure(error: OpenAPIError(errno: OpenAPILocationErrno.queryFails)))
        } successCallback: { data in
            if let result = data.reverseGeocodeData(needExtendedInfo: needExtendedInfo) {
                context.apiTrace.info("reverseGeocode success")
                callback(.success(data: result))
            } else {
                context.apiTrace.error("reverseGeocode failed data.addressComponent is nil, data.address = \(data.address)")
                callback(.failure(error: OpenAPIError(errno: OpenAPILocationErrno.queryFails)))
            }
        }
    }
}

private extension LarkLocationPicker.LocationData {

    func reverseGeocodeData(needExtendedInfo: Bool) -> OpenPluginReverseGeocodeResponse? {
        let country = addressComponent?.country ?? ""
        let province = addressComponent?.province ?? ""
        let city = addressComponent?.city ?? ""
        let district = addressComponent?.district ?? ""
        let township = addressComponent?.township ?? ""
        let neighborhood = addressComponent?.neighborhood ?? ""
        let building = addressComponent?.building ?? ""
        let address = addressComponent?.address ?? ""
        
        let aois = createAoisItems(needExtendedInfo: needExtendedInfo, aois: addressComponent?.aois)
        let pois = createPoisItems(needExtendedInfo: needExtendedInfo, pois: addressComponent?.pois)
        let streetNumberInfo = createStreetNumberItems(needExtendedInfo: needExtendedInfo, streetNumber: addressComponent?.streetNumberInfo)
        
        if country.isEmpty,
           province.isEmpty,
           city.isEmpty,
           district.isEmpty,
           township.isEmpty,
           neighborhood.isEmpty,
           building.isEmpty
        {
            return nil
        }
        return OpenPluginReverseGeocodeResponse(country: country,
                                                province: province,
                                                city: city,
                                                district: district,
                                                township: township,
                                                neighborhood: neighborhood,
                                                building: building,
                                                address: address,
                                                aois: aois,
                                                pois: pois,
                                                streetNumberInfo: streetNumberInfo)

    }
    
    func createAoisItems(needExtendedInfo: Bool, aois: [AoiItemInfo]?) -> [OpenPluginReverseGeocodeResponse.AoisItem]?{
        guard let aois = aois, needExtendedInfo else {
            return nil
        }
        return aois.map { info in
            OpenPluginReverseGeocodeResponse.AoisItem(adCode: info.adCode, aoiArea: info.aoiArea, latitude: info.latitude, longitude: info.longitude, aioId: info.aioId, aoiName: info.aoiName)
        }
    }
    
    func createPoisItems(needExtendedInfo: Bool, pois: [PoiItemInfo]?) -> [OpenPluginReverseGeocodeResponse.PoisItem]?{
        guard let pois = pois, needExtendedInfo else {
            return nil
        }
        return pois.map { info in
            OpenPluginReverseGeocodeResponse.PoisItem(poiId: info.poiId, title: info.title, typeCode: info.typeCode, typeDes: info.typeDes, latitude: info.latitude, longitude: info.longitude, snippet: info.snippet, tel: info.tel, distance: Double(info.distance), parkingType: info.parkingType, businessArea: info.businessArea)
        }
    }
    
    func createStreetNumberItems(needExtendedInfo: Bool, streetNumber: StreetNumberInfo?) -> OpenPluginReverseGeocodeResponse.StreetNumberInfoObject?{
        guard let info = streetNumber, needExtendedInfo else {
            return nil
        }
        return OpenPluginReverseGeocodeResponse.StreetNumberInfoObject(direction: info.direction, distance: Double(info.distance), latitude: info.latitude, longitude: info.longitude, number: info.number, street: info.street)
        
    }
    
}
