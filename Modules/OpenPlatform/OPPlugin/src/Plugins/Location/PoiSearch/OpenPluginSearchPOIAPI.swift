//
//  OpenPluginSearchPOIAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/12/13 08:39:53
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import LarkOpenPluginManager
import LarkContainer

// MARK: - OpenPluginSearchPOIAPI
final class OpenPluginSearchPOIAPI: OpenBasePlugin {
    @InjectedSafeLazy var searchProvider: OpenPluginSearchPoiProxy

    func searchPOI(
        params: OpenPluginSearchPOIRequest,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenPluginSearchPOIResponse>) -> Void) {
            guard let radius = params.radius else {//这个参数在iOS必传
                callback(.failure(error: OpenAPIError(errno: OpenAPICommonErrno.invalidParam(.paramCannotEmpty(param: "radius")))))
                return
            }
            context.apiTrace.info("searchPOI coordinate: <\(params.longitude),\(params.latitude)>, radius:\(String(describing: params.radius)), keyword:\(String(describing: params.keyword)), maxCount:\(params.maxCount)")
            searchProvider.searchPOI(coordinate: CLLocationCoordinate2D(latitude: params.latitude, longitude: params.longitude),
                                     radius: radius,
                                     maxCount: params.maxCount,
                                     keyword: params.keyword) { error in
                context.apiTrace.error("searchPOI failed error:\(error)")
                callback(.failure(error: OpenAPIError(errno: OpenAPILocationErrno.retrievePoiFailed)))
            } successCallback: { datas in
                context.apiTrace.info("searchPOI success data.count:\(datas.count)")
                let list = datas.map { data in
                    OpenPluginSearchPOIResponse.PoiListItem(latitude: data.rawLocation.latitude, longitude: data.rawLocation.longitude, locationName: data.name, locationAddress: data.address)
                }
                callback(.success(data: OpenPluginSearchPOIResponse(poiList: list)))
            }
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: "searchPOI", pluginType: Self.self, paramsType: OpenPluginSearchPOIRequest.self, resultType: OpenPluginSearchPOIResponse.self) { (this, params, context, gadgetContext, callback) in
            context.apiTrace.info("searchPOI API call start")
            this.searchPOI(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
            context.apiTrace.info("searchPOI API call end")
        }
    }
}
