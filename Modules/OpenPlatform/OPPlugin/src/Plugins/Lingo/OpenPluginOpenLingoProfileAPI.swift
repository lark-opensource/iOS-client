//
//  OpenPluginOpenLingoProfileAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/2/3 03:52:33
//

import Foundation
import LarkOpenAPIModel
import OPPluginManagerAdapter
import LarkOpenPluginManager
import EENavigator
import LarkAppLinkSDK
import LarkContainer

// MARK: - OpenPluginOpenLingoProfileAPI
final class OpenPluginOpenLingoProfileAPI: OpenBasePlugin {
    
    func openLingoProfile(
        params: OpenPluginOpenLingoProfileRequest,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
            if (params.id ?? "").isEmpty, (params.query ?? "").isEmpty {
                callback(.failure(error: OpenAPIError(errno: OpenAPILingoErrno.idAndQueryBothEmpty)))
                return
            }
            
            var applinkComponents = URLComponents()
            applinkComponents.scheme = Navigator.shared.defaultSchemesBlock().first // Global
            applinkComponents.host = AppLinkBody.domains?.first ?? ""
            applinkComponents.path = "/client/abbreviation/open"
            var applinkQueryItems = [
                URLQueryItem(name: "abbrId", value: params.id),
                URLQueryItem(name: "query", value: params.query)
            ]
            if let analysisParams = params.analysisParams {
                do {
                    let analysis = try analysisParams.convertToJsonStr()
                    applinkQueryItems.append(URLQueryItem(name: "analysisParams", value: analysis))
                } catch {
                    context.apiTrace.error("JSON stringfy encount error: \(error.localizedDescription)")
                }
            }
            applinkComponents.queryItems = applinkQueryItems
            
            if let url = applinkComponents.url {
                DispatchQueue.main.async { [weak self] in
                    guard let controller = gadgetContext.controller ?? OPNavigatorHelper.topMostAppController(window: context.uniqueID?.window) else {
                        callback(.failure(error: OpenAPIError(errno: OpenAPICommonErrno.internalError).setMonitorMessage("controller is nil")))
                        return
                    }
                    
                    self?.userResolver.navigator.open(url, from: controller)
                    callback(.success(data: nil))
                }
            } else {
                callback(.failure(error: OpenAPIError(errno: OpenAPICommonErrno.internalError).setMonitorMessage("applink url invalid")))
            }
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: "openLingoProfile", pluginType: Self.self, paramsType: OpenPluginOpenLingoProfileRequest.self, resultType: OpenAPIBaseResult.self) { (this, params, context, gadgetContext, callback) in
            this.openLingoProfile(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
        }
    }
}
