//
//  OpenPluginCheckMFAAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/8/23 06:41:04
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import LarkOpenPluginManager
import LarkAccountInterface
import LarkContainer

// MARK: - OpenPluginCheckMFAAPI
final class OpenPluginCheckMFAAPI: OpenBasePlugin {
    @Provider var dependency: AccountServiceNewMFA

    func checkMFA(
        params: OpenPluginCheckMFARequest,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenPluginCheckMFAResponse>) -> Void) {
            let mfaScope = params.mfaScope
            let mfaToken = params.mfaToken
            context.apiTrace.info("checkMFA API call start mfaScope.length:\(mfaScope.count), mfaToken.length:\(mfaToken.count)")
            dependency.checkNewMFAStatus(token: mfaToken, scope: mfaScope) { tokenStatus in
                print("checkMFA success tokenStatus:\(tokenStatus)")
                context.apiTrace.info("checkMFA success tokenStatus:\(tokenStatus)")
                switch tokenStatus {
                case .valid:
                    callback(.success(data: OpenPluginCheckMFAResponse(status: .valid)))
                case .invalid:
                    callback(.success(data: OpenPluginCheckMFAResponse(status: .invalid)))
                @unknown default:
                    let apiError = OpenAPIError(errno: OpenAPICommonErrno.internalError)
                    callback(.failure(error: apiError))
                }
            } onError: { error in
                let apiError = OpenAPIError(errno: OpenAPIMfaErrno.mfaFail)
                    .setMonitorMessage("checkMFA error:\(error)")
                callback(.failure(error: apiError))
            }
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: "checkMFA", pluginType: Self.self, paramsType: OpenPluginCheckMFARequest.self, resultType: OpenPluginCheckMFAResponse.self) { (this, params, context, gadgetContext, callback) in
            this.checkMFA(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
            context.apiTrace.info("checkMFA API call end")
        }
    }
}
