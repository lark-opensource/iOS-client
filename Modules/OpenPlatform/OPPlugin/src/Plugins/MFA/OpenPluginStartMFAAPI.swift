//
//  OpenPluginStartMFAAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/8/26 02:18:03
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import LarkOpenPluginManager
import LarkAccountInterface
import LarkContainer

// MARK: - OpenPluginStartMFAAPI
final class OpenPluginStartMFAAPI: OpenBasePlugin {
    @Provider var dependency: AccountServiceNewMFA
    
    func startMFA(
        params: OpenPluginStartMFARequest,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenPluginStartMFAResponse>) -> Void) {
            guard let controller = gadgetContext.getControllerElseFailure(context.apiTrace, callback) else {
                return
            }
            let mfaScope = params.mfaScope
            context.apiTrace.info("startMFA API call start mfaScope.length:\(mfaScope.count)")
            dependency.startNewMFA(scope: mfaScope, from: controller) { mfaToken in
                context.apiTrace.info("startNewMFA success mfaToken.length:\(mfaToken.count)")
                callback(.success(data: OpenPluginStartMFAResponse(mfaToken: mfaToken)))
            } onError: { error in
                let apiError = OpenAPIError(errno: OpenAPIMfaErrno.mfaFail)
                    .setMonitorMessage("startNewMFA error:\(error)")
                callback(.failure(error: apiError))
            }
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: "startMFA", pluginType: Self.self, paramsType: OpenPluginStartMFARequest.self, resultType: OpenPluginStartMFAResponse.self) { (this, params, context, gadgetContext, callback) in
            this.startMFA(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
            context.apiTrace.info("startMFA API call end")
        }
    }
}
