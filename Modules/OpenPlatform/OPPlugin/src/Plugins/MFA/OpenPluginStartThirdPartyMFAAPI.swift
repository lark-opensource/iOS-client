//
//  OpenPluginStartThirdPartyMFAAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/8/17 03:35:44
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import LarkOpenPluginManager
import LarkAccountInterface
import LarkContainer

// MARK: - OpenPluginStartThirdPartyMFAAPI
final class OpenPluginStartThirdPartyMFAAPI: OpenBasePlugin {
    @Provider var dependency: AccountServiceNewMFA

    func startThirdPartyMFA(
        params: OpenPluginStartThirdPartyMFARequest,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenPluginStartThirdPartyMFAResponse>) -> Void) {
            guard let controller = gadgetContext.getControllerElseFailure(context.apiTrace, callback) else {
                return
            }
            let mfaKey = params.mfaKey
            context.apiTrace.info("startThirdPartyMFA API call start mfaKey.length:\(mfaKey.count)")
            dependency.startThirdPartyNewMFA(key: mfaKey, from: controller) { mfaCode in
                context.apiTrace.info("startThirdPartyMFA success mfaCode.length:\(mfaCode.count)")
                callback(.success(data: OpenPluginStartThirdPartyMFAResponse(mfaCode: mfaCode)))
            } onError: { error in
                let apiError = OpenAPIError(errno: OpenAPIMfaErrno.mfaFail)
                    .setMonitorMessage("startThirdPartyMFA error:\(error)")
                callback(.failure(error: apiError))
            }
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: "startThirdPartyMFA", pluginType: Self.self, paramsType: OpenPluginStartThirdPartyMFARequest.self, resultType: OpenPluginStartThirdPartyMFAResponse.self) { (this, params, context, gadgetContext, callback) in
            this.startThirdPartyMFA(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
            context.apiTrace.info("startThirdPartyMFA API call end")
        }
    }
}
