//
//  OpenPluginGetInternalFeatureGatingAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2022/12/12 07:49:49
//  DO NOT MODIFY!!!
//

import Foundation
import LarkOpenAPIModel
import OPPluginManagerAdapter
import LarkOpenPluginManager
import LarkSetting
import LarkFeatureGating
import LarkContainer

// MARK: - 
final class OpenPluginGetInternalFeatureGatingAPI: OpenBasePlugin {
    
    enum APIName: String {
        case getInternalFeatureGating
    }
    
    func getInternalFeatureGating(params: OpenPluginGetInternalFeatureGatingRequest,
                                  context: OpenAPIContext,
                                  gadgetContext: GadgetAPIContext,
                                  callback: @escaping (OpenAPIBaseResponse<OpenPluginGetInternalFeatureGatingResponse>) -> Void) {
        let fg = userResolver.fg.dynamicFeatureGatingValue(with: FeatureGatingManager.Key(stringLiteral: params.fg_name))
        let response = OpenPluginGetInternalFeatureGatingResponse(fg_value: fg)
        callback(.success(data: response))
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: APIName.getInternalFeatureGating.rawValue, pluginType: Self.self, paramsType: OpenPluginGetInternalFeatureGatingRequest.self, resultType: OpenPluginGetInternalFeatureGatingResponse.self) { (this, params, context, gadgetContext, callback) in
            context.apiTrace.info("getInternalFeatureGating API call start")
            this.getInternalFeatureGating(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
            context.apiTrace.info("getInternalFeatureGating API call end")
        }
    }
}
