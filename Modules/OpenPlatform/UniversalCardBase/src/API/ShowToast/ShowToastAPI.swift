//
//  UniversalCardShowToastAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2022/12/5 02:15:55
//

import Foundation
import LarkOpenAPIModel
import LarkOpenPluginManager
import UniverseDesignToast
import EENavigator
import LarkNavigator
import UniversalCardInterface
import LarkContainer

// MARK: -
open class UniversalCardShowToastAPI: UniversalCardAPIPlugin {
    
    enum APIName: String {
        case UniversalCardShowToast
    }
    
    private func showMsgCardToast(
        params: UniversalCardShowToastRequest,
        context: UniversalCardAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
            context.apiTrace.info("showMsgCardToast API call start")
            if let actionService = context.cardContext.dependency?.actionService,
                let view = userResolver.navigator.mainSceneWindow {
                var text = ""
                switch params.textType {
                case .content:
                    text = params.text
                case .i18n_id:
                    text = BundleResources.UniversalCardBase.i18nByName(name: params.text) ?? ""
                }
                let actionContext = UniversalCardActionContext(
                    trace: context.cardContext.renderingTrace?.subTrace() ?? context.cardContext.trace.subTrace(),
                    elementTag: params.tag,
                    elementID: nil,
                    bizContext: context.cardContext.bizContext,
                    actionFrom: nil
                )
                actionService.showToast(context: actionContext, type: .info, text: text, on: view)
                callback(.success(data: nil))
            } else {
                let error = OpenAPIError(errno: OpenAPICommonErrno.internalError)
                    .setMonitorMessage("mainSceneWindow is nil")
                callback(.failure(error: error))
            }
            context.apiTrace.info("showMsgCardToast API call end")
    }
    
    required public init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerCardAsyncHandler(for: APIName.UniversalCardShowToast.rawValue, pluginType: Self.self, paramsType: UniversalCardShowToastRequest.self, resultType: OpenAPIBaseResult.self) { (this, params, context, callback) in
            
            this.showMsgCardToast(params: params, context: context, callback: callback)
        }
    }
}
