//
//  OpenPluginUniversalCardShowSelectMenuModel.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE. DO NOT MODIFY!!!
//  TICKETID: 30506
//
//  类型声明默认为internal, 如需被外部Module引用, 请在上行添加
//  /** anycode-lint-ignore */
//  public
//  /** anycode-lint-ignore */

import Foundation
import LarkOpenAPIModel


// MARK: - OpenPluginUniversalCardShowSelectMenuRequest
final class OpenPluginUniversalCardShowSelectMenuRequest: OpenAPIBaseParams {
    
    /// description: 组件ID
    @OpenAPIOptionalParam(
            jsonKey: "elementID")
    var elementID: String?
    
    /// description: 组件 tag
    @OpenAPIRequiredParam(
            userRequiredWithJsonKey: "tag")
    var tag: String
    
    /// description: 组件 name
    @OpenAPIOptionalParam(
            jsonKey: "name")
    var name: String?
    
    /// description: 是否翻译组件
    @OpenAPIOptionalParam(
            jsonKey: "isTranslateElement")
    var isTranslateElement: Bool?
    
    /// description: 弹出的 SelectMenu 类型
    /// type = multi_select_static 多选选项
    /// type = multi_select_person 多选选人
    /// type = select_static 选项单选
    /// type = select_person 选人单选
    @OpenAPIRequiredParam(
            userRequiredWithJsonKey: "type")
    var type: TypeEnum
    
    /// description: 选项列表
    @OpenAPIRequiredParam(
            userRequiredWithJsonKey: "options")
    var options: [OptionsItem]
    
    /// description: 初始值
    @OpenAPIOptionalParam(
            jsonKey: "initialOptions")
    var initialOptions: [String]?
    
    override var autoCheckProperties: [OpenAPIParamPropertyProtocol] {
        return [_elementID, _tag, _name, _isTranslateElement, _type, _options, _initialOptions]
    }

    // MARK: TypeEnum
    enum TypeEnum: String, OpenAPIEnum {

        /// description: 多选选项
        case multi_select_static = "multi_select_static"

        /// description: 多选选人
        case multi_select_person = "multi_select_person"

        /// description: 选项单选
        case select_static = "select_static"

        /// description: 选人单选
        case select_person = "select_person"

    }

    // MARK: OptionsItem
    final class OptionsItem: OpenAPIBaseParams {

        /// description: 选项文本
        @OpenAPIOptionalParam(
            jsonKey: "text")
        var text: String?

        /// description: 选项值
        @OpenAPIRequiredParam(
            userRequiredWithJsonKey: "value")
        var value: String

        /// description: 选项 icon
        @OpenAPIOptionalParam(
            jsonKey: "icon")
        var icon: IconObject?

        override var autoCheckProperties: [OpenAPIParamPropertyProtocol] {
            return [_text, _value, _icon]
        }
    }

    // MARK: IconObject
    final class IconObject: OpenAPIBaseParams {

        /// description: ImageIcon
        @OpenAPIOptionalParam(
            jsonKey: "imageID")
        var imageID: String?

        /// description: UDIcon
        @OpenAPIOptionalParam(
            jsonKey: "token")
        var token: String?

        /// description: UDIcon
        @OpenAPIOptionalParam(
            jsonKey: "color")
        var color: String?

        override var autoCheckProperties: [OpenAPIParamPropertyProtocol] {
            return [_imageID, _token, _color]
        }
    }
}

// MARK: - OpenPluginUniversalCardShowSelectMenuResponse
final class OpenPluginUniversalCardShowSelectMenuResponse: OpenAPIBaseResult {
    
    /// description: 选择的选项
    let selectedValues: [SelectedValuesItem]?
    
    init(selectedValues: [SelectedValuesItem]?) {
        self.selectedValues = selectedValues
        super.init()
    }
    
    override func toJSONDict() -> [AnyHashable : Any] {
        var result: [AnyHashable : Any] = [:]
        result["selectedValues"] = selectedValues?.map({ $0.toJSONDict() })
        return result
    }

    // MARK: SelectedValuesItem
    final class SelectedValuesItem: OpenAPIBaseResult {

        let text: String?

        let value: String?

        init(text: String?, value: String?) {
            self.text = text
            self.value = value
            super.init()
        }

        override func toJSONDict() -> [AnyHashable : Any] {
            var result: [AnyHashable : Any] = [:]
            result["text"] = text
            result["value"] = value
            return result
        }
    }
}
