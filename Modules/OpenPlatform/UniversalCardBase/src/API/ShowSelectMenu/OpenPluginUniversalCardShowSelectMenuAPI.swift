//
//  OpenPluginUniversalCardShowSelectMenuAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/9/27 06:57:58
//

import Foundation
import LarkOpenAPIModel
import LarkOpenPluginManager
import LarkMessengerInterface
import SelectMenu
import RustPB
import ByteWebImage
import EENavigator
import Lynx
import UniverseDesignPopover
import UniverseDesignColor
import LarkContainer

// MARK: - OpenPluginUniversalCardShowSelectMenuAPI
final class OpenPluginUniversalCardShowSelectMenuAPI: UniversalCardAPIPlugin {
    private var popover: UDPopoverTransition?
    
    enum APIName: String {
        case universalCardShowSelectMenu
    }
    
    private static func createSelectItem(
        _ items: [OpenPluginUniversalCardShowSelectMenuRequest.OptionsItem],
        images: Dictionary<String, Basic_V1_RichTextElement.ImageProperty>?
    ) -> [SelectMenuViewModel.Item] {
        return items.map { option in
            var imageKey = ""
            var icon: SelectMenuViewModel.Icon? = nil
            if let iconProps = option.icon {
                if let imageID = iconProps.imageID, let imageProperty = images?[imageID] {
                    imageKey = ImageItemSet.transform(imageProperty:imageProperty).generatePostMessageKey(forceOrigin: false)
                }
                var color: UIColor?
                if let colorToken = iconProps.color, let token = iconProps.token, !token.contains("_colorful") {
                    color = UDColor.getValueByBizToken(token: colorToken)
                }
                icon = SelectMenuViewModel.Icon(imgKey: imageKey, udToken: iconProps.token, color: color)
            }
            return SelectMenuViewModel.Item(name: option.text ?? "", value: option.value, icon: icon)
        }
    }
    
    private func showSelectMenu(
        params: OpenPluginUniversalCardShowSelectMenuRequest,
        context: UniversalCardAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenPluginUniversalCardShowSelectMenuResponse>) -> Void) {
            context.apiTrace.info("UniversalCardShowSelectMenuAPI: type:\(params.type.rawValue)")
            switch(params.type) {
            case .select_person:
                showSelectPersons(params: params, isMulti: false, context: context, callback: callback)
            case .select_static:
                showSelectOptions(params: params, isMulti: false, context: context, callback: callback)
            case .multi_select_person:
                showSelectPersons(params: params, isMulti: true, context: context, callback: callback)
            case .multi_select_static:
                showSelectOptions(params: params, isMulti: true, context: context, callback: callback)
            }
            context.apiTrace.info("UniversalCardShowSelectMenuAPI call end")
    }
    
    private func showSelectPersons(
        params: OpenPluginUniversalCardShowSelectMenuRequest,
        isMulti: Bool,
        context: UniversalCardAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenPluginUniversalCardShowSelectMenuResponse>) -> Void
    ) {
        guard let actionServices = context.cardContext.dependency?.actionService,
              let sourceVC = context.cardContext.sourceVC,
              let chatID = actionServices.getChatID() else {
            context.apiTrace.error("UniversalCardShowSelectMenuAPI: actionServices or sourceVC or chatID is nil")
            let error = OpenAPIError(errno: OpenAPICommonErrno.internalError).setMonitorMessage("internalError: actionServices or sourceVC or chatID is nil")
            callback(.failure(error: error))
            return
        }
        
        var chatterIDs: [String] = []
        for option in params.options {
            if let chatterID = context.cardContext.sourceData?.cardContent.attachment.characters[option.value]?.id {
                chatterIDs.append(chatterID)
            }
        }
        var body = SearchChatterPickerBody(
            chatID: chatID,
            navibarTitle: BundleI18n.UniversalCardBase.Lark_Legacy_MsgCardSelect,
            chatterIDs: chatterIDs,
            preSelectIDs: params.initialOptions,
            isMulti: isMulti
        ) { selectedChatters in
            var results: [OpenPluginUniversalCardShowSelectMenuResponse.SelectedValuesItem] = []
            for chatter in selectedChatters {
                let res = OpenPluginUniversalCardShowSelectMenuResponse.SelectedValuesItem(text: chatter.localizedName, value: chatter.id)
                results.append(res)
            }
            callback(.success(data: OpenPluginUniversalCardShowSelectMenuResponse(selectedValues: results)))
        }
        switch chatterIDs.count {
        case 1...7:
            body.isPopup = true
            if let elementID = params.elementID,
               let lynxView = context.lynxContext.getLynxView(),
               let selectMenuView = lynxView.find(withName: elementID) {
                let popover = UDPopoverTransition(
                    sourceView: selectMenuView,
                    sourceRect: selectMenuView.bounds.inset(by: Self.PopoverDefaultEdges),
                    permittedArrowDirections: [.up, .down]
                )
                self.popover = popover
                userResolver.navigator.present(body: body, from: sourceVC) { [weak self] vc in
                    vc.modalPresentationStyle = .custom
                    vc.transitioningDelegate = self?.popover
                }
            } else {
                context.apiTrace.error("UniversalCardShowSelectMenuAPI: lynxView not found")
                let error = OpenAPIError(errno: OpenAPICommonErrno.internalError).setMonitorMessage("UniversalCardShowSelectMenuAPI: lynxView not found")
                callback(.failure(error: error))
            }
        default:
            userResolver.navigator.present(body: body, from: sourceVC)
        }
    }
    
    private func showSelectOptions(
        params: OpenPluginUniversalCardShowSelectMenuRequest,
        isMulti: Bool,
        context: UniversalCardAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenPluginUniversalCardShowSelectMenuResponse>) -> Void
    ) {
        let images = context.cardContext.sourceData?.cardContent.attachment.images
        switch params.options.count {
        case 1...7:
            let selectMenuController = SelectMenuCompactController(
                items: Self.createSelectItem(params.options, images: images),
                selectedValues: params.initialOptions,
                isMulti: isMulti
            )
            selectMenuController.selectConfirm = { selectedItems in
                var results: [OpenPluginUniversalCardShowSelectMenuResponse.SelectedValuesItem] = []
                for item in selectedItems {
                    let res = OpenPluginUniversalCardShowSelectMenuResponse.SelectedValuesItem(text: item.name, value: item.value)
                    results.append(res)
                }
                callback(.success(data: OpenPluginUniversalCardShowSelectMenuResponse(selectedValues: results)))
            }
            if let elementID = params.elementID,
               let lynxView = context.lynxContext.getLynxView(),
               let selectMenuView = lynxView.find(withName: elementID) {
                let popover = UDPopoverTransition(
                    sourceView: selectMenuView,
                    sourceRect: selectMenuView.bounds.inset(by: Self.PopoverDefaultEdges),
                    permittedArrowDirections: [.up, .down]
                )
                self.popover = popover
                selectMenuController.modalPresentationStyle = .custom
                selectMenuController.transitioningDelegate = self.popover
            }
            presentController(vc: selectMenuController, context: context)
        case 8...:
            let selectMenuController = SelectMenuController(
                items: Self.createSelectItem(params.options, images: images),
                selectedValues: params.initialOptions,
                isMulti: isMulti
            )
            selectMenuController.selectConfirm = { selectedItems in
                var results: [OpenPluginUniversalCardShowSelectMenuResponse.SelectedValuesItem] = []
                for item in selectedItems {
                    let res = OpenPluginUniversalCardShowSelectMenuResponse.SelectedValuesItem(text: item.name, value: item.value)
                    results.append(res)
                }
                callback(.success(data: OpenPluginUniversalCardShowSelectMenuResponse(selectedValues: results)))
            }
            presentController(vc: selectMenuController, context: context)
        default:
            callback(.success(data: nil))
        }
    }
    
    required public init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerCardAsyncHandler(
            for: APIName.universalCardShowSelectMenu.rawValue,
            pluginType: Self.self,
            paramsType: OpenPluginUniversalCardShowSelectMenuRequest.self,
            resultType: OpenPluginUniversalCardShowSelectMenuResponse.self
        ) { (this, params, context, callback) in
            this.showSelectMenu(params: params, context: context, callback: callback)
        }
    }
}
