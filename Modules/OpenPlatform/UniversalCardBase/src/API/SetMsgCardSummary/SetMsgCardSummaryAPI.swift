//
//  OpenPluginSetMsgCardSummaryAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/2/14 11:18:32
//

import Foundation
import LarkOpenAPIModel
import LarkOpenPluginManager
import LarkContainer
import UniversalCardInterface

// MARK: - OpenPluginSetMsgCardSummaryAPI
final class UniversalCardSetSummaryAPI: UniversalCardAPIPlugin {
    
    func setMsgCardSummary(
        params: UniversalCardSetSummaryRequest,
        context: UniversalCardAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
            guard let actionService = context.cardContext.dependency?.actionService else {
                callback(.success(data: nil))
                context.apiTrace.error("setMsgCardSummary API: action service is nil")
                return
            }
            let actionContext = UniversalCardActionContext(
                trace: context.cardContext.renderingTrace?.subTrace() ?? context.cardContext.trace.subTrace(),
                bizContext: context.cardContext.bizContext)
            actionService.updateSummary(context: actionContext, original: params.summary, translation: params.translateSummary)
            callback(.success(data: nil))
        }
    
    required public init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerCardAsyncHandler(for: "UniversalCardSetSummary", pluginType: Self.self, paramsType: UniversalCardSetSummaryRequest.self, resultType: OpenAPIBaseResult.self) { (this, params, context, callback) in
            context.apiTrace.info("setMsgCardSummary API call start")
            this.setMsgCardSummary(params: params, context: context, callback: callback)
            context.apiTrace.info("setMsgCardSummary API call end")
        }
    }
}
