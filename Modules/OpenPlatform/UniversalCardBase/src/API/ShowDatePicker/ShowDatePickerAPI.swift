//
//  OpenPluginShowMsgCardDateTimePickerAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2022/11/14 13:11:38
//

import Foundation
import LarkOpenAPIModel
import LarkOpenPluginManager
import LarkDatePickerView
import Lynx
import UniverseDesignPopover
import EENavigator
import LarkNavigator
import LarkAlertController
import CryptoKit
import LarkContainer

open class UniversalCardShowDatePickerAPI: UniversalCardAPIPlugin {
    
    enum APIName: String {
        case UniversalCardShowDatePicker
    }
    
    enum DateType {
        case value
        case text
    }
    
    private var popover: UDPopoverTransition?
    
    private static func dateString(dateType: DateType, date: Date, tag: String) -> String {
        switch dateType {
        case .value:
            let dateFormatter = DateFormatter()
            dateFormatter.locale = Locale.current
            dateFormatter.dateFormat = "yyyy-MM-dd' 'XXXX"
            if tag == "picker_time" {
                dateFormatter.dateFormat = "HH:mm' 'XXXX"
            } else if tag == "picker_datetime" {
                dateFormatter.dateFormat = "yyyy-MM-dd HH:mm' 'XXXX"
            }
            return dateFormatter.string(from: date)
        case .text:
            let eventDateFormatter = DateFormatter()
            eventDateFormatter.locale = Locale.current
            eventDateFormatter.dateFormat = "yyyy-MM-dd"
            if tag == "picker_time" {
                eventDateFormatter.dateFormat = "HH:mm"
            } else if tag == "picker_datetime" {
                eventDateFormatter.dateFormat = "yyyy-MM-dd HH:mm"
            }
            return eventDateFormatter.string(from: date)
        }
    }
    
    private static func dateOption(pickerType: String?) -> DatePickerType {
        var datePickerType: DatePickerType = .onlyDate
        if pickerType == "picker_time" {
            datePickerType = .onlyeTime
        } else if pickerType == "picker_datetime" {
            datePickerType = .dateTime
        }
        return datePickerType
    }
    
    private func showDatePicker(
        params: UniversalCardShowDatePickerRequest,
        context: UniversalCardAPIContext,
        callback: @escaping (OpenAPIBaseResponse<UniversalCardShowDatePickerResponse>) -> Void) {
            context.apiTrace.info("showDatePicker API call start")
            let datePickerController = DatePickerController(
                initialDate: params.initialDate,
                pickType: Self.dateOption(pickerType: params.tag)
            )
            datePickerController.cancel = { [weak datePickerController] in
                datePickerController?.dismiss(animated: true, completion: nil)
                callback(.failure(error: OpenAPIError(errno: OpenAPIMsgCardErrno.userCancel)))
            }
            datePickerController.confirm = { [weak datePickerController] type, date in
                datePickerController?.dismiss(animated: true, completion: {
                    callback(.success(data: UniversalCardShowDatePickerResponse(
                        selectValue: Self.dateString(dateType: .value, date: date, tag: params.tag),
                        selectText:  Self.dateString(dateType: .text, date: date, tag: params.tag),
                        timezone: TimeZone.current.identifier
                    )))
                })
            }

            if let lynxView = context.lynxContext.getLynxView(), let datePickerView = lynxView.find(withName: params.elementID) {
                let popover = UDPopoverTransition(
                    sourceView: datePickerView,
                    sourceRect: datePickerView.bounds.inset(by: Self.PopoverDefaultEdges),
                    permittedArrowDirections: [.up, .down]
                )
                popover.presentStypeInCompact = .overFullScreen
                self.popover = popover
                datePickerController.transitioningDelegate = popover
            }
            datePickerController.modalPresentationStyle = .custom
            presentController(vc: datePickerController, context: context)
            context.apiTrace.info("showDatePicker API call end")
    }
    
    required public init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerCardAsyncHandler(
            for: APIName.UniversalCardShowDatePicker.rawValue,
            pluginType: Self.self,
            paramsType: UniversalCardShowDatePickerRequest.self,
            resultType: UniversalCardShowDatePickerResponse.self) { (this, params, context, callback) in
            this.showDatePicker(params: params, context: context, callback: callback)
        }
    }
}
