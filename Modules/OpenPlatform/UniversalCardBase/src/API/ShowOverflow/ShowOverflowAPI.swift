//
//  OpenPluginShowMsgCardOverflowAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2022/11/15 06:01:13
//

import Foundation
import LarkOpenAPIModel
import LarkOpenPluginManager
import UniverseDesignActionPanel
import Lynx
import LarkAlertController
import EENavigator
import LarkNavigator
import UniversalCardInterface
import LarkContainer

// MARK: -
open class UniversalCardOverflowAPI: UniversalCardAPIPlugin {
    
    enum APIName: String {
        case UniversalCardShowOverflow
    }
    
    private func showOverflow(
        params: UniversalCardShowOverflowRequest,
        context: UniversalCardAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
            context.apiTrace.info("showOverflow API call start")
            let view = context.lynxContext.getLynxView()
            let overflowView = view?.find(withName: params.elementID) ?? UIView()
            let config = UDActionSheetUIConfig(popSource: UDActionSheetSource(sourceView: overflowView, sourceRect:overflowView.bounds.inset(by: Self.PopoverDefaultEdges)))
            let actionSheet = UDActionSheet(config: config)
            params.options.forEach { option in
                actionSheet.addItem(UDActionSheetItem(title: option.text, action: {
                    callback(.success(data: UniversalCardShowOverflowResponse(actions: option.actions)))
                }))
            }
            actionSheet.setCancelItem(text: BundleI18n.UniversalCardBase.Lark_Legacy_MsgCardCancel) {
                callback(.failure(error: OpenAPIError(errno: OpenAPIMsgCardErrno.userCancel)))
            }
            presentController(vc: actionSheet, context: context)
            context.apiTrace.info("showOverflow API call end")
    }
    
    required public init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerCardAsyncHandler(for: APIName.UniversalCardShowOverflow.rawValue, pluginType: Self.self, paramsType: UniversalCardShowOverflowRequest.self, resultType: OpenAPIBaseResult.self) { (this, params, context, callback) in
            this.showOverflow(params: params, context: context, callback: callback)
        }
    }
}
