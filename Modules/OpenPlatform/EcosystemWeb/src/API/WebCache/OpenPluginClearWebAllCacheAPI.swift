//
//  OpenPluginClearWebAllCacheAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/6/8 06:10:59
//

import Foundation
import TTMicroApp
import LarkOpenPluginManager
import LarkOpenAPIModel
import LarkSetting
import WebBrowser
import LarkContainer

// MARK: - OpenPluginClearWebAllCacheAPI
final class OpenPluginClearWebAllCacheAPI: OpenBasePlugin {
    
    func clearWebAllCache(
        params: OpenAPIBaseParams,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
        
        //清除Web容器内嵌下载文件集合
        if let webBrowser = context.controller as? WebBrowser {
            webBrowser.removeAllDownloadFiles()
            context.apiTrace.info("clear all download files finished")
        }
            
        //清理WKWebView缓存
        WKWebsiteDataStore.default().removeData(ofTypes: WKWebsiteDataStore.allWebsiteDataTypes(), modifiedSince: Date(timeIntervalSince1970: 0)) {
            context.apiTrace.info("clear webview cache finished")
        }
    }

    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: "clearWebAllCache", pluginType: Self.self, paramsType: OpenAPIBaseParams.self, resultType: OpenAPIBaseResult.self) { (this, params, context, gadgetContext, callback) in
            context.apiTrace.info("clearWebAllCache API call start")
            let enable = FeatureGatingManager.shared.featureGatingValue(with: FeatureGatingManager.Key(stringLiteral: "openplatform.web.clear_all_cache_enable"))// user:global
            if enable {
                this.clearWebAllCache(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
            } else {
                context.apiTrace.info("clearWebAllCache API empty implement")
            }
            context.apiTrace.info("clearWebAllCache API call end")
            callback(.success(data: nil))
        }
    }
}
