//
//  OpenPluginCloseWebDebugConnectionAPI.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE on 2023/9/6 03:50:37
//

import Foundation
import LarkOpenAPIModel
import TTMicroApp
import LarkOpenPluginManager
import LarkContainer
import WebBrowser

// MARK: - OpenPluginCloseWebDebugConnectionRequest
final class OpenPluginCloseWebDebugConnectionRequest: OpenAPIBaseParams {
    
    /// description: 应用ID
    @OpenAPIRequiredParam(
            userRequiredWithJsonKey: "appId")
    var appId: String
    
    /// description: 长连接ID
    @OpenAPIRequiredParam(
            userRequiredWithJsonKey: "connId")
    var connId: String
    
    /// description: 调试session
    @OpenAPIRequiredParam(
            userRequiredWithJsonKey: "debugSession")
    var debugSession: String
    
    /// description: 调试页面地址
    @OpenAPIOptionalParam(
                jsonKey: "debugPageUrl")
    var debugPageUrl: String?
    
    override var autoCheckProperties: [OpenAPIParamPropertyProtocol] {
        return [_appId, _connId, _debugSession, _debugPageUrl]
    }
}

// MARK: - OpenPluginCloseWebDebugConnectionAPI
final class OpenPluginCloseWebDebugConnectionAPI: OpenBasePlugin {
        
    func closeWebDebugConnection(
        params: OpenPluginCloseWebDebugConnectionRequest,
        context: OpenAPIContext,
        gadgetContext: GadgetAPIContext,
        callback: @escaping (OpenAPIBaseResponse<OpenAPIBaseResult>) -> Void) {
            
        guard let apiContext = context.additionalInfo["gadgetContext"] as? OPAPIContextProtocol,
            let browser = apiContext.controller as? WebBrowser else {
            let error = OpenAPIError(errno: OpenAPICommonErrno.internalError)
                .setMonitorMessage("can not get WebBrowser")
            context.apiTrace.error("can not get WebBrowser")
            callback(.failure(error: error))
            return
        }
    
        if params.appId.isEmpty || params.connId.isEmpty || params.debugSession.isEmpty  {
            let error = OpenAPIError(errno: OpenAPICommonErrno.invalidParam(.paramWrongType(param: "some params missing")))
                .setMonitorMessage("some params missing")
            context.apiTrace.error("some params missing")
            callback(.failure(error: error))
            return
        }
        
        //关闭调试连接
        let networkContext = OpenECONetworkWebContext(trace: browser.getTrace(), source: .web)
        WebOnlineInspectNetwork.closeConnection(appId: params.appId, connId: params.connId, debugSession: params.debugSession, debugScene: 1, context: networkContext) { result in
            switch result {
            case .success(let isSuccess):
                context.apiTrace.info("closeWebDebugConnection reponse success: value \(isSuccess)")
                callback(.success(data: nil))
            case .failure(let err):
                let errorMsg = "closeWebDebugConnection failure:\(err.localizedDescription)"
                let error = OpenAPIError(errno: OpenAPICommonErrno.internalError)
                    .setMonitorMessage(errorMsg)
                context.apiTrace.error(errorMsg)
                callback(.failure(error: error))
            }
        }
    }
    
    required init(resolver: UserResolver) {
        super.init(resolver: resolver)
        registerInstanceAsyncHandlerGadget(for: "closeWebDebugConnection", pluginType: Self.self, paramsType: OpenPluginCloseWebDebugConnectionRequest.self, resultType: OpenAPIBaseResult.self) { (this, params, context, gadgetContext, callback) in
            context.apiTrace.info("closeWebDebugConnection API call start")
            if OPUserScope.userResolver().fg.staticFeatureGatingValue(with: "openplatform.browser.remote.debug.client_enable") {
                context.apiTrace.info("closeWebDebugConnection API impl exec")
                this.closeWebDebugConnection(params: params, context: context, gadgetContext: gadgetContext, callback: callback)
            }
            context.apiTrace.info("closeWebDebugConnection API call end")
        }
    }
}
