//
//  OpenPluginGetCookieFromURLModel.swift
//  LarkOpenApis
//
//  GENERATED BY ANYCODE. DO NOT MODIFY!!!
//  TICKETID: 25769
//  

import Foundation
import LarkOpenAPIModel


// MARK: - OpenPluginGetCookieFromURLRequest
public final class OpenPluginGetCookieFromURLRequest: OpenAPIBaseParams {
    
    /// description: 要查询的 url
    @OpenAPIRequiredParam(
            userRequiredWithJsonKey: "url")
    public var url: String
    
    public override var autoCheckProperties: [OpenAPIParamPropertyProtocol] {
        return [_url]
    }
}

// MARK: - OpenPluginGetCookieFromURLResponse
public final class OpenPluginGetCookieFromURLResponse: OpenAPIBaseResult {
    
    /// description: 
    public let data: [DataItem]
    
    /// description: 查询结果说明
    public let msg: String?
    
    public init(data: [DataItem], msg: String?) {
        self.data = data
        self.msg = msg
        super.init()
    }
    
    public override func toJSONDict() -> [AnyHashable : Any] {
        var result: [AnyHashable : Any] = [:]
        result["data"] = data.map({ $0.toJSONDict() })
        result["msg"] = msg
        return result
    }

    // MARK: DataItem
    public final class DataItem: OpenAPIBaseResult {

        /// description: cookie 字段名
        public let key: String

        /// description: cookie 值，掩码形式返回
        public let value: String

        public let domain: String?

        public let expires: String?

        public let maxAge: String?

        public let path: String?

        public let secure: String?

        public let httpOnly: String?

        public let sameSite: String?

        public init(key: String, value: String, domain: String?, expires: String?, maxAge: String?, path: String?, secure: String?, httpOnly: String?, sameSite: String?) {
            self.key = key
            self.value = value
            self.domain = domain
            self.expires = expires
            self.maxAge = maxAge
            self.path = path
            self.secure = secure
            self.httpOnly = httpOnly
            self.sameSite = sameSite
            super.init()
        }

        public override func toJSONDict() -> [AnyHashable : Any] {
            var result: [AnyHashable : Any] = [:]
            result["key"] = key
            result["value"] = value
            result["domain"] = domain
            result["expires"] = expires
            result["maxAge"] = maxAge
            result["path"] = path
            result["secure"] = secure
            result["httpOnly"] = httpOnly
            result["sameSite"] = sameSite
            return result
        }
    }
}
