debug_dependency 'LarkAccountInterface', "3.40.6"
debug_dependency 'EENavigator', '0.10.27'
debug_dependency 'LarkWebViewController', '0.1.36', :subspecs => ['Core']
debug_dependency 'LKCommonsLogging', '0.4.11'
debug_dependency 'RxSwift', "5.1.1"
debug_dependency 'RxCocoa', "5.1.1"
debug_dependency 'SnapKit', "5.0.1"
debug_dependency 'CryptoSwift', '1.1.3'
debug_dependency 'SwiftyJSON', '4.1.0'

debug_dependency 'Alamofire', '4.7.3'


debug_dependency 'LarkAlertController', '0.11.2'
debug_dependency 'RoundedHUD', '1.20.1'
debug_dependency 'ReachabilitySwift', '4.3.0'
debug_dependency 'ABRInterface', '0.3.2'
debug_dependency 'RichLabel', '0.21.0'
debug_dependency 'AsyncComponent', '0.1.15' #:path => '../../EE/EEFoundation/Libs/AsyncComponent'

debug_dependency 'LarkAppConfig', '3.40.3', :inhibit_warnings => false
debug_dependency 'LarkPerf', '3.41.1', :inhibit_warnings => false
debug_dependency 'Heimdallr', '0.7.23-rc.6',
  :source => 'git@code.byted.org:iOS_Library/privatethird_source_repo.git',
  :subspecs => [
    'HMDANR'
  ]

debug_dependency 'LarkUIKit', '1.34.2', :subspecs => ['Base', 'Common', 'LoadPlaceholder', 'NaviProtocol']
debug_dependency 'Kingfisher', '5.3.1-lark.19'
debug_dependency 'KingfisherWebP', '0.6.0-lark.0'
debug_dependency 'libwebp', '0.6.1.1-binary'
debug_dependency 'YYCache', '4.11.1'


debug_dependency 'EEImageService', '0.23.5'
debug_dependency 'AppReciableSDK', '0.1.5' #:path => '../appreciable_sdk/iOS/AppReciableSDK/'
debug_dependency 'LarkExtensions', '0.21.2'

debug_dependency 'LarkCache', '0.12.1', :subspecs => ['Core', 'Crypto']
debug_dependency 'LarkAppResources', '3.34.1'
debug_dependency 'LarkContainer', '1.4.1'
debug_dependency 'LarkFeatureGating', '3.41.3', :inhibit_warnings => false

debug_dependency 'LarkInterface', :path => '../../Libs/LarkInterface', :inhibit_warnings => false
debug_dependency 'LarkAudioKit', '0.19.1'
debug_dependency 'LarkNavigation', '3.41.3'

debug_dependency 'LarkRustClient', '3.41.1'
debug_dependency 'LarkRustHTTP', '0.12.1'
debug_dependency 'RustPB', '3.41.0-alpha.38-alpha'
debug_dependency 'libPhoneNumber-iOS', '0.9.15'
debug_dependency 'MBProgressHUD', '1.1.0'
debug_dependency 'BDWebImage', '0.2.4',
  :source => 'git@code.byted.org:ee/pods_specs.git',
  :subspecs => ['Core', 'Download','Decoder']
debug_dependency 'QRCode', '100.11.1'

debug_dependency 'LarkSnsShare', '2.8.0'
debug_dependency 'BDUGShare', '2.1.2-rc.3', :subspecs => [
    'BDUGShareBasic/BDUGUtil',
    'BDUGShareBasic/BDUGWeChatShare',
    'BDUGShareBasic/BDUGWeiboShare',
    'BDUGShareBasic/BDUGQQShare'
  ]
debug_dependency 'WechatSDK', '0.3.3', :source => 'git@code.byted.org:iOS_Library/privatethird_source_repo.git'
debug_dependency 'WeiboSDK', '3.2.5-rc.1'
debug_dependency 'TencentQQSDK', '1.1.0-rc.0.1.binary'

debug_dependency 'LarkAddressBookSelector', '0.16.1'
debug_dependency 'LarkModel', '3.41.4', :inhibit_warnings => false
debug_dependency 'KeychainAccess', '3.1.2'
debug_dependency 'Logger', '1.4.11'

debug_dependency 'LarkMessengerInterface', '3.41.1'  # 请不要手动修改Messenger业务库的版本号，使用bits多仓MR集成功能
debug_dependency 'LarkSDKInterface', '3.41.1'  # 请不要手动修改Messenger业务库的版本号，使用bits多仓MR集成功能

debug_dependency 'EEMicroAppSDK', '3.42.1'
debug_dependency 'OPBlock', '3.42.1'
debug_dependency 'OPSDK', '3.42.1'
debug_dependency 'OPGadget', '3.42.1'
debug_dependency 'Timor', '3.42.1', :subspecs => ['Core', 'App', 'Networking', 'Card']
debug_dependency 'LarkOPInterface', '3.42.1'

debug_dependency 'TTNetworkManager', '2.2.8.53.1', :source => 'git@code.byted.org:ee/pods_specs.git' #branch: lark_without_cronet
debug_dependency 'ConfigCenter', '3.42.1'#原来是在EEMicroAppSDK的podspec依赖的，现在统一放在这里管理，并非是新加pod
debug_dependency 'LarkActionSheet', '0.22.2'
debug_dependency 'LarkActivityIndicatorView', '1.18.1'
debug_dependency 'LarkAssetsBrowser', '0.3.2'
debug_dependency 'LarkImageEditor', '0.2.1'
debug_dependency 'LarkTag', '0.23.3'

debug_dependency 'TTPlayerSDK', '2.8.53.2'
debug_dependency 'TTVideoEngine', '1.9.53.3' # 不用能binary，miss modulemap
debug_dependency 'smash',
    '4.8.3.1-binary',
    :subspecs => [
      'qrcode',
    ]
debug_dependency 'mobilecv2', '1.7.4.1-binary'

debug_dependency 'espresso', '2.6.6.1-binary'
debug_dependency 'Yoga', '1.9.0'
debug_dependency 'FMDB', '2.7.7'
debug_dependency 'Lynx',
  :git => 'git@code.byted.org:lynx/template-assembler.git',
  :branch => 'card_engine_1.3.24',
  :subspecs => [
    'Framework',
    'Native',
    'JSRuntime',
    'ReleaseResource',
  ]

#END_PODSPEC_GENERATE

debug_cocoapods do
  ruby_code "do binary patch", <<-'CUSTOM_PATCH'
  patch do
    use_binary_repo 'git@code.byted.org:ee/pods_specs.git'
    binary 'RustPB'
    binary 'ServerPB'
    binary 'SwiftProtobuf'
  end
  CUSTOM_PATCH

  pre_install "patch build settings", <<-'PRE_INSTALL'
  use_whold_module = false
  # fix: add search path for these cross module include headers
  should_fix_include_headers = {
    'IESVideoEditor' => ['EffectSDK_iOS', 'KVOController', 'Heimdallr'],
    'TTVideoEngine' => ['TTPlayerSDK', 'TTVideoSetting'],
    'ConfigCenter' => ['FMDB'],
    'AFgzipRequestSerializer' => ['AFNetworking', 'Godzippa'],
    'Heimdallr' => ['BDAlogProtocol', 'TTMacroManager'],
    'TTInstallService' => ['Godzippa'],
    'Timor' => true,
    'CJPay' => true,
    'CJComponents' => true,
    'SAMKeychain' => true,
    'LarkFinance' => true,
    'EEMicroAppSDK' => true, # 直接头文件和模块混用，需要改代码, 光改搜索路径还不行
    'JsSDK' => true, # 依赖了EEMicroAppSDK
    'LarkMicroApp' => true,
    # indirect dependency
    'TTNetworkManager' => ['AFNetworking', 'Godzippa'],
    'LarkWeb' => true,
    'LarkOpenPlatform' => true,
    'TTBaseLib' => ['OpenUDID'],
    'BDUGShare' => ['TTBaseLib', 'BDUGImageMark', 'SDWebImage'],
    'LarkContact' => ['BDUGShare'],
    'QRCode' => ['smash'],
    'byted_cert' => true,
  }

  fix_modular_include = Set[
    'TTNetworkManager',
    'EEMicroAppSDK',
    'JsSDK',
    'LarkMicroApp',
    'LarkWeb',
    'LarkOpenPlatform',
    'WeiboSDK',
    'WechatSDK',
    'TencentQQSDK',
    'BDUGShare',
    'LarkContact',
    'BDABTestSDK',
    'LarkFinance',
    'CJPay',
    'CJComponents',
    'SAMKeychain',
    'IESVideoEditor',
    'QRCode',
    'byted_cert'
  ]

  tobsdk_flags = Set[
    'TTInstallService',
    'TTTracker',
    'LarkTracker'
  ]
  mail_target = Set[
    'MailSDK'
  ]

  # @type [Hash{String => Pod::PodTarget}]
  pod_targets_by_name = installer.pod_targets.group_by(&:pod_name)
  header_search_paths_of_pods = lambda do |pod_target|
    return unless config = should_fix_include_headers[pod_target.name]
    # use true to represent all dependency
    included_targets = case config
                       when true then pod_target.recursive_dependent_targets
                       when Hash then
                         pod_targets_by_name.values_at(*config[:recursive]).compact.flatten(1)
                           .flat_map {|pt| [pt] + pt.recursive_dependent_targets}
                           .uniq
                       when Array then
                         pod_targets_by_name.values_at(*config).compact.flatten(1)
                       else
                         raise "unsupported"
                       end
    return nil if included_targets.empty?

    headers = []
    # @param pt [Pod::PodTarget]
    included_targets.each do |pt|
      if pt.requires_frameworks? && pt.should_build?
        headers.push pt.build_settings.framework_header_search_path
      else
        # the above code use direct include header, not <module/header.h>
        headers.push "${PODS_ROOT}/Headers/Public"
        headers.push "${PODS_ROOT}/Headers/Public/#{pt.pod_name}"
        # append vendored frameworks header
        headers.concat(pt.build_settings.file_accessors.flat_map(&:vendored_frameworks).map { |f|
          File.join '${PODS_ROOT}', f.relative_path_from(pt.sandbox.root), "Headers"
        })
      end
    end
    headers.uniq
  end

  # lint: if generate multiple scoped pod_target, downstream pod don't know choose which
  duplicate_pod_targets = pod_targets_by_name.values.select { |a| a.length > 1 }
  duplicate_pod_targets.each do |a|
    Pod::UI.warn "Duplicate Pod target with different subspecs, defined in:"
    a.each do |pod_target|
      Pod::UI.warn "  - #{pod_target.name}(#{pod_target.specs.map(&:name).join(", ")}) contained in: #{pod_target.target_definitions.map(&:name).join(', ')}"
    end
  end
  raise "Currently Not Support Duplicate Pod Targets" unless duplicate_pod_targets.empty?

  if ENV['BUILD_PRODUCT_TYPE'] == 'SIMPLE'
  # 添加 SIMPLE 宏
    first_target = installer.pod_targets[0]
    attributes_hash = first_target.root_spec.attributes_hash
    user_target_xcconfig = (attributes_hash['user_target_xcconfig'] ||= {})
    user_target_xcconfig['GCC_PREPROCESSOR_DEFINITIONS'] ||= ''
    user_target_xcconfig['GCC_PREPROCESSOR_DEFINITIONS'] += ' SIMPLE=1'
    user_target_xcconfig['SWIFT_ACTIVE_COMPILATION_CONDITIONS'] ||= '$(inherited)'
    user_target_xcconfig['SWIFT_ACTIVE_COMPILATION_CONDITIONS'] += ' SIMPLE'
  end

  installer.pod_targets.each do |pod_target|
    attributes_hash = pod_target.root_spec.attributes_hash
    pod_target_xcconfig = (attributes_hash['pod_target_xcconfig'] ||= {})

    pod_target_xcconfig['SWIFT_VERSION'] = '5.1'
    pod_target_xcconfig['IPHONEOS_DEPLOYMENT_TARGET'] = '11.0'
    pod_target_xcconfig['WARNING_CFLAGS'] ||= []
    pod_target_xcconfig['WARNING_CFLAGS'] += ['-Wno-nullability-completeness', '-Wno-nonnull']
    pod_target_xcconfig['CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED'] = 'NO'
    pod_target_xcconfig['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'NO'
    pod_target_xcconfig['GCC_PREPROCESSOR_DEFINITIONS'] ||= ''
    pod_target_xcconfig['GCC_PREPROCESSOR_DEFINITIONS'] += ' ALPHA=1'
    pod_target_xcconfig['SWIFT_ACTIVE_COMPILATION_CONDITIONS'] ||= '$(inherited)'
    pod_target_xcconfig['SWIFT_ACTIVE_COMPILATION_CONDITIONS'] += ' ALPHA'

    if ENV['BUILD_PRODUCT_TYPE'] == 'SIMPLE'
      # 添加 SIMPLE 宏
        pod_target_xcconfig['GCC_PREPROCESSOR_DEFINITIONS'] ||= ''
        pod_target_xcconfig['GCC_PREPROCESSOR_DEFINITIONS'] += ' SIMPLE=1'
        pod_target_xcconfig['SWIFT_ACTIVE_COMPILATION_CONDITIONS'] ||= '$(inherited)'
        pod_target_xcconfig['SWIFT_ACTIVE_COMPILATION_CONDITIONS'] += ' SIMPLE'
    end

    if use_whold_module == true
      pod_target_xcconfig['SWIFT_WHOLE_MODULE_OPTIMIZATION'] = "YES"
    end

    if headers = header_search_paths_of_pods[pod_target]
      pod_target_xcconfig['SYSTEM_HEADER_SEARCH_PATHS'] = headers.join(' ')
    end
    if fix_modular_include.include? pod_target.name
      pod_target_xcconfig['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = "YES"
    end
    if tobsdk_flags.include? pod_target.name
      pod_target_xcconfig['GCC_PREPROCESSOR_DEFINITIONS'] ||= ''
      pod_target_xcconfig['GCC_PREPROCESSOR_DEFINITIONS'] += ' TOBSDK=1'
    end
    if pod_target.name == 'IESGeckoKit'
      pod_target_xcconfig['GCC_PREPROCESSOR_DEFINITIONS'] ||= '$(inherited)'
      pod_target_xcconfig['GCC_PREPROCESSOR_DEFINITIONS'] += ' GURD_DEBUG_ENABLED=1'
    end
  end
  PRE_INSTALL

  post_install "post patch build settings", <<-'POST_INSTALL'
  installer.generated_projects.each do |project|
    project.build_configurations.each do |config|
      config.build_settings['SWIFT_VERSION'] = '5.1'
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '11.0'
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
    end
    project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings.delete 'SWIFT_VERSION'
        config.build_settings.delete 'IPHONEOS_DEPLOYMENT_TARGET'
        config.build_settings.delete 'EXCLUDED_ARCHS'
      end
    end
  end
  POST_INSTALL
end

# https://bytedance.feishu.cn/docs/doccn1s2myse9iowwFdHJC47xqb
debug_fastlane do
lane :verify_all, <<-'LANE'
    # build SaaS
    build_verify
    # podfile中添加KA subspec依赖
    sh %{sed -i '' -Ee "/eepod [\\"']LarkAccount\\/C/a\\\\\n  \\\\  eepod 'LarkAccount/KA'" ../Podfile}
    # assert Podfile 添加KA 成功
    sh %{if grep -q "LarkAccount/KA" ../Podfile; then echo "Verify KA"; else echo "error: repalce Podfile to KA fail, please check fastlane in .patch file"; exit 1; fi}
    sh %{pod install}
    # build KA
    build_verify
LANE
end

