#!/usr/bin/env ruby
# frozen_string_literal: true

# 此脚本用于将 LarkStorageDemo 中的的文件以软链的方式同步到 LarkStorage/app 中，方便 CI File

require 'pathname'
require 'fileutils'

def do_sync(pod_root_path)  # pod_root_path: Path
  app_dir = pod_root_path.join('app/app')
  test_dir = pod_root_path.join('app/test')

  #### 同步内容到 LarkStorage/app/app 中 ####
  link_app_files = {
    'LarkStorageDev/Info.plist' => '',
    'LarkStorageDev/Demo.swift' => 'src',
    'LarkStorageDev/main.swift' => 'src',
    'AutoGenerated/BaseAssembly.swift' => 'src'
  }
  # 1. empty app_dir
  FileUtils.rm_rf Dir.glob("#{app_dir}/*") if app_dir.exist?
  FileUtils.mkdir_p app_dir unless app_dir.exist?
  # 2. do link
  link_app_files.each do |key, val|
    source = Pathname(File.expand_path(key))
    target = val.empty? ? app_dir : app_dir.join(val)
    FileUtils.mkdir_p(target) unless target.exist?
    FileUtils.ln_sf source.relative_path_from(target), target
  end

  #### 同步内容到 LarkStorage/app/test 中 ####
  # 1. empty test_dir
  test_src_dir = test_dir.join('src')
  if test_src_dir.exist?
    FileUtils.rm_rf Dir.glob("#{test_src_dir}/*")
  else
    FileUtils.mkdir_p test_src_dir unless test_src_dir.exist?
  end
  # 2. do link
  Dir.glob('LarkStorageDevTests/**/*').each do |str|
    source = Pathname(File.expand_path(str))
    next unless source.file?
    target = test_src_dir.join(str.gsub('LarkStorageDevTests/', '')).parent
    FileUtils.mkdir_p(target) unless target.exist?
    FileUtils.ln_sf source.relative_path_from(target), target
  end
end

do_sync(Pathname(__dir__).join('../../Libs/LarkStorage'))
do_sync(Pathname(__dir__).join('../../Libs/LarkStorageCore'))