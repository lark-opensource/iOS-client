//
//  PerformaneceTest.swift
//  EENavigatorDevEEUnitTest
//
// *** GENERATED BY ERB, DON'T MODIFY THIS FILE DIRECTLY ***
// erb -T- % > %:r

// swiftlint:disable all
/// change to true to enable performace test
#if false

import XCTest
@testable import EENavigator
import LarkContainer

class PerformaneceTest: XCTestCase {
    func test_wrapFactory_performance() {
        self.measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
            Navigator.resetSharedNavigator()
            self.startMeasuring()
            registerWrapFactory()
            self.stopMeasuring()
        }
    }

    func test_register_performance() {
        self.measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
            Navigator.resetSharedNavigator()
            self.startMeasuring()
            (0..<1000).forEach { i in
                Navigator.shared.registerRoute(pattern: "\(i)") { (_, _) in

                }
            }
            self.stopMeasuring()
        }
    }
    func test_old_register_build_performance() {
        // self.measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
             Navigator.resetSharedNavigator()
        let start = CACurrentMediaTime(); defer { print(#function, CACurrentMediaTime() - start) }
        //     self.startMeasuring()
            registerBuilder2()
        //     self.stopMeasuring()
        // }
    }
    func test_register_build_performance() {
        // self.measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
            Navigator.resetSharedNavigator()
        let start = CACurrentMediaTime(); defer { print(#function, CACurrentMediaTime() - start) }
            //self.startMeasuring()
            registerBuilder()
            //self.stopMeasuring()
        // }
    }

    func test_normalize_performance() {
        self.measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
            Navigator.resetSharedNavigator()
            self.startMeasuring()
            (0..<1000).forEach { i in
                _ = Navigator.shared.normalize("\(i)")
            }
            self.stopMeasuring()
        }
    }

    func test_initialize_Middleware_Performance() {
        self.measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
            Navigator.resetSharedNavigator()
            self.startMeasuring()
            (0..<1000).forEach { i in
                _ = Middleware(
                    pattern: "\(i)",
                    tester: defaultTester,
                    handler: { _, _ in }
                )
            }
            self.stopMeasuring()
        }
    }

    func test_append_route_performance() {
        self.measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
            Navigator.resetSharedNavigator()
            let middlewares = (0..<1000).map { i in
                Middleware(
                    pattern: "\(i)",
                    tester: defaultTester,
                    handler: { _, _ in })
            }
            self.startMeasuring()
            (0..<1000).forEach { i in
                Navigator.shared.append(middlewares[i], with: .default)
            }
            self.stopMeasuring()
        }
    }
}

<%
$generate_class_count = 999
class << self
  attr_accessor :name
  def each_wrap_name
    $generate_class_count.times do |i|
      self.name = "A#{i}"
      yield
    end
  end
  def each_body
    $generate_class_count.times do |i|
      self.name = "B#{i}"
      yield
    end
  end
end
%>

var resolver: UserResolver!
func registerBuilder2() {
% each_body do
    _ = Navigator.shared.registerRoute_(type: <%= name %>.self, { <%= name %>TH().handle($0, req: $1, res: $2) })
%#    _ = Navigator.shared.registerRoute_(type: <%= name %>.self) { (body, req, res) in
%#        try! <%= name %>Handler.init(resolver: resolver).handle(body, req: req, res: res)
%#    }
% end
}
func registerBuilder() {
% each_body do
    Navigator.shared.registerRoute.type(<%= name %>.self).factory(<%= name %>Handler.init(resolver:))
% end
}

% each_body do
public final class <%= name %>Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: <%= name %>, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class <%= name %>TH: TypedRouterHandler<<%= name %>> {}
public struct <%= name %>: Body {
    private static let prefix = "//client/chat/info/group/setting/<%= name %>"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(<%= name %>.prefix)/\(chatId)")!
    }
    public let chatId: String
}
% end

func registerWrapFactory() {
% each_wrap_name do
    _ = Navigator.shared.wrapFactory({ () -> <%= name %> in <%= name %>() }, cacheHandler: true)
% end
}

% each_wrap_name do
class <%= name %> {}
% end

#endif
