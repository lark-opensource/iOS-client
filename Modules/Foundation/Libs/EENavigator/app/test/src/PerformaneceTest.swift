//
//  PerformaneceTest.swift
//  EENavigatorDevEEUnitTest
//
// *** GENERATED BY ERB, DON'T MODIFY THIS FILE DIRECTLY ***
// erb -T- % > %:r

// swiftlint:disable all
/// change to true to enable performace test
import UIKit
import Foundation
#if false

import XCTest
@testable import EENavigator
import LarkContainer

class PerformaneceTest: XCTestCase {
    func test_wrapFactory_performance() {
        self.measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
            Navigator.resetSharedNavigator()
            self.startMeasuring()
            registerWrapFactory()
            self.stopMeasuring()
        }
    }

    func test_register_performance() {
        self.measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
            Navigator.resetSharedNavigator()
            self.startMeasuring()
            (0..<1000).forEach { i in
                Navigator.shared.registerRoute(pattern: "\(i)") { (_, _) in

                }
            }
            self.stopMeasuring()
        }
    }
    func test_old_register_build_performance() {
        // self.measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
             Navigator.resetSharedNavigator()
        let start = CACurrentMediaTime(); defer { print(#function, CACurrentMediaTime() - start) }
        //     self.startMeasuring()
            registerBuilder2()
        //     self.stopMeasuring()
        // }
    }
    func test_register_build_performance() {
        // self.measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
            Navigator.resetSharedNavigator()
        let start = CACurrentMediaTime(); defer { print(#function, CACurrentMediaTime() - start) }
            //self.startMeasuring()
            registerBuilder()
            //self.stopMeasuring()
        // }
    }

    func test_normalize_performance() {
        self.measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
            Navigator.resetSharedNavigator()
            self.startMeasuring()
            (0..<1000).forEach { i in
                _ = Navigator.shared.normalize("\(i)")
            }
            self.stopMeasuring()
        }
    }

    func test_initialize_Middleware_Performance() {
        self.measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
            Navigator.resetSharedNavigator()
            self.startMeasuring()
            (0..<1000).forEach { i in
                _ = Middleware(
                    pattern: "\(i)",
                    tester: defaultTester,
                    handler: { _, _ in }
                )
            }
            self.stopMeasuring()
        }
    }

    func test_append_route_performance() {
        self.measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
            Navigator.resetSharedNavigator()
            let middlewares = (0..<1000).map { i in
                Middleware(
                    pattern: "\(i)",
                    tester: defaultTester,
                    handler: { _, _ in })
            }
            self.startMeasuring()
            (0..<1000).forEach { i in
                Navigator.shared.append(middlewares[i], with: .default)
            }
            self.stopMeasuring()
        }
    }
}



var resolver: UserResolver!
func registerBuilder2() {
    _ = Navigator.shared.registerRoute_(type: B0.self, { B0TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B1.self, { B1TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B2.self, { B2TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B3.self, { B3TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B4.self, { B4TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B5.self, { B5TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B6.self, { B6TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B7.self, { B7TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B8.self, { B8TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B9.self, { B9TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B10.self, { B10TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B11.self, { B11TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B12.self, { B12TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B13.self, { B13TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B14.self, { B14TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B15.self, { B15TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B16.self, { B16TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B17.self, { B17TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B18.self, { B18TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B19.self, { B19TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B20.self, { B20TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B21.self, { B21TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B22.self, { B22TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B23.self, { B23TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B24.self, { B24TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B25.self, { B25TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B26.self, { B26TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B27.self, { B27TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B28.self, { B28TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B29.self, { B29TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B30.self, { B30TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B31.self, { B31TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B32.self, { B32TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B33.self, { B33TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B34.self, { B34TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B35.self, { B35TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B36.self, { B36TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B37.self, { B37TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B38.self, { B38TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B39.self, { B39TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B40.self, { B40TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B41.self, { B41TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B42.self, { B42TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B43.self, { B43TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B44.self, { B44TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B45.self, { B45TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B46.self, { B46TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B47.self, { B47TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B48.self, { B48TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B49.self, { B49TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B50.self, { B50TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B51.self, { B51TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B52.self, { B52TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B53.self, { B53TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B54.self, { B54TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B55.self, { B55TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B56.self, { B56TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B57.self, { B57TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B58.self, { B58TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B59.self, { B59TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B60.self, { B60TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B61.self, { B61TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B62.self, { B62TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B63.self, { B63TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B64.self, { B64TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B65.self, { B65TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B66.self, { B66TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B67.self, { B67TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B68.self, { B68TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B69.self, { B69TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B70.self, { B70TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B71.self, { B71TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B72.self, { B72TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B73.self, { B73TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B74.self, { B74TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B75.self, { B75TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B76.self, { B76TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B77.self, { B77TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B78.self, { B78TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B79.self, { B79TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B80.self, { B80TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B81.self, { B81TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B82.self, { B82TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B83.self, { B83TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B84.self, { B84TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B85.self, { B85TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B86.self, { B86TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B87.self, { B87TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B88.self, { B88TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B89.self, { B89TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B90.self, { B90TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B91.self, { B91TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B92.self, { B92TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B93.self, { B93TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B94.self, { B94TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B95.self, { B95TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B96.self, { B96TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B97.self, { B97TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B98.self, { B98TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B99.self, { B99TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B100.self, { B100TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B101.self, { B101TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B102.self, { B102TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B103.self, { B103TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B104.self, { B104TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B105.self, { B105TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B106.self, { B106TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B107.self, { B107TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B108.self, { B108TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B109.self, { B109TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B110.self, { B110TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B111.self, { B111TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B112.self, { B112TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B113.self, { B113TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B114.self, { B114TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B115.self, { B115TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B116.self, { B116TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B117.self, { B117TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B118.self, { B118TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B119.self, { B119TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B120.self, { B120TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B121.self, { B121TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B122.self, { B122TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B123.self, { B123TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B124.self, { B124TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B125.self, { B125TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B126.self, { B126TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B127.self, { B127TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B128.self, { B128TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B129.self, { B129TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B130.self, { B130TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B131.self, { B131TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B132.self, { B132TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B133.self, { B133TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B134.self, { B134TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B135.self, { B135TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B136.self, { B136TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B137.self, { B137TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B138.self, { B138TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B139.self, { B139TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B140.self, { B140TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B141.self, { B141TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B142.self, { B142TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B143.self, { B143TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B144.self, { B144TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B145.self, { B145TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B146.self, { B146TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B147.self, { B147TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B148.self, { B148TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B149.self, { B149TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B150.self, { B150TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B151.self, { B151TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B152.self, { B152TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B153.self, { B153TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B154.self, { B154TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B155.self, { B155TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B156.self, { B156TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B157.self, { B157TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B158.self, { B158TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B159.self, { B159TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B160.self, { B160TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B161.self, { B161TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B162.self, { B162TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B163.self, { B163TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B164.self, { B164TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B165.self, { B165TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B166.self, { B166TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B167.self, { B167TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B168.self, { B168TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B169.self, { B169TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B170.self, { B170TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B171.self, { B171TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B172.self, { B172TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B173.self, { B173TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B174.self, { B174TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B175.self, { B175TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B176.self, { B176TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B177.self, { B177TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B178.self, { B178TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B179.self, { B179TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B180.self, { B180TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B181.self, { B181TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B182.self, { B182TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B183.self, { B183TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B184.self, { B184TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B185.self, { B185TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B186.self, { B186TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B187.self, { B187TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B188.self, { B188TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B189.self, { B189TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B190.self, { B190TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B191.self, { B191TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B192.self, { B192TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B193.self, { B193TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B194.self, { B194TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B195.self, { B195TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B196.self, { B196TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B197.self, { B197TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B198.self, { B198TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B199.self, { B199TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B200.self, { B200TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B201.self, { B201TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B202.self, { B202TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B203.self, { B203TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B204.self, { B204TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B205.self, { B205TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B206.self, { B206TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B207.self, { B207TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B208.self, { B208TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B209.self, { B209TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B210.self, { B210TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B211.self, { B211TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B212.self, { B212TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B213.self, { B213TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B214.self, { B214TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B215.self, { B215TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B216.self, { B216TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B217.self, { B217TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B218.self, { B218TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B219.self, { B219TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B220.self, { B220TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B221.self, { B221TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B222.self, { B222TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B223.self, { B223TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B224.self, { B224TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B225.self, { B225TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B226.self, { B226TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B227.self, { B227TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B228.self, { B228TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B229.self, { B229TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B230.self, { B230TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B231.self, { B231TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B232.self, { B232TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B233.self, { B233TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B234.self, { B234TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B235.self, { B235TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B236.self, { B236TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B237.self, { B237TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B238.self, { B238TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B239.self, { B239TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B240.self, { B240TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B241.self, { B241TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B242.self, { B242TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B243.self, { B243TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B244.self, { B244TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B245.self, { B245TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B246.self, { B246TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B247.self, { B247TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B248.self, { B248TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B249.self, { B249TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B250.self, { B250TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B251.self, { B251TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B252.self, { B252TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B253.self, { B253TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B254.self, { B254TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B255.self, { B255TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B256.self, { B256TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B257.self, { B257TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B258.self, { B258TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B259.self, { B259TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B260.self, { B260TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B261.self, { B261TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B262.self, { B262TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B263.self, { B263TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B264.self, { B264TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B265.self, { B265TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B266.self, { B266TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B267.self, { B267TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B268.self, { B268TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B269.self, { B269TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B270.self, { B270TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B271.self, { B271TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B272.self, { B272TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B273.self, { B273TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B274.self, { B274TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B275.self, { B275TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B276.self, { B276TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B277.self, { B277TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B278.self, { B278TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B279.self, { B279TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B280.self, { B280TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B281.self, { B281TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B282.self, { B282TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B283.self, { B283TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B284.self, { B284TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B285.self, { B285TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B286.self, { B286TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B287.self, { B287TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B288.self, { B288TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B289.self, { B289TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B290.self, { B290TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B291.self, { B291TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B292.self, { B292TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B293.self, { B293TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B294.self, { B294TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B295.self, { B295TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B296.self, { B296TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B297.self, { B297TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B298.self, { B298TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B299.self, { B299TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B300.self, { B300TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B301.self, { B301TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B302.self, { B302TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B303.self, { B303TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B304.self, { B304TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B305.self, { B305TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B306.self, { B306TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B307.self, { B307TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B308.self, { B308TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B309.self, { B309TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B310.self, { B310TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B311.self, { B311TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B312.self, { B312TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B313.self, { B313TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B314.self, { B314TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B315.self, { B315TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B316.self, { B316TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B317.self, { B317TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B318.self, { B318TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B319.self, { B319TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B320.self, { B320TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B321.self, { B321TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B322.self, { B322TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B323.self, { B323TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B324.self, { B324TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B325.self, { B325TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B326.self, { B326TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B327.self, { B327TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B328.self, { B328TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B329.self, { B329TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B330.self, { B330TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B331.self, { B331TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B332.self, { B332TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B333.self, { B333TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B334.self, { B334TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B335.self, { B335TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B336.self, { B336TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B337.self, { B337TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B338.self, { B338TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B339.self, { B339TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B340.self, { B340TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B341.self, { B341TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B342.self, { B342TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B343.self, { B343TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B344.self, { B344TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B345.self, { B345TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B346.self, { B346TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B347.self, { B347TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B348.self, { B348TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B349.self, { B349TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B350.self, { B350TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B351.self, { B351TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B352.self, { B352TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B353.self, { B353TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B354.self, { B354TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B355.self, { B355TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B356.self, { B356TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B357.self, { B357TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B358.self, { B358TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B359.self, { B359TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B360.self, { B360TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B361.self, { B361TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B362.self, { B362TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B363.self, { B363TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B364.self, { B364TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B365.self, { B365TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B366.self, { B366TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B367.self, { B367TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B368.self, { B368TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B369.self, { B369TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B370.self, { B370TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B371.self, { B371TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B372.self, { B372TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B373.self, { B373TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B374.self, { B374TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B375.self, { B375TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B376.self, { B376TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B377.self, { B377TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B378.self, { B378TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B379.self, { B379TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B380.self, { B380TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B381.self, { B381TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B382.self, { B382TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B383.self, { B383TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B384.self, { B384TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B385.self, { B385TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B386.self, { B386TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B387.self, { B387TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B388.self, { B388TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B389.self, { B389TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B390.self, { B390TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B391.self, { B391TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B392.self, { B392TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B393.self, { B393TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B394.self, { B394TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B395.self, { B395TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B396.self, { B396TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B397.self, { B397TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B398.self, { B398TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B399.self, { B399TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B400.self, { B400TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B401.self, { B401TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B402.self, { B402TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B403.self, { B403TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B404.self, { B404TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B405.self, { B405TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B406.self, { B406TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B407.self, { B407TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B408.self, { B408TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B409.self, { B409TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B410.self, { B410TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B411.self, { B411TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B412.self, { B412TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B413.self, { B413TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B414.self, { B414TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B415.self, { B415TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B416.self, { B416TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B417.self, { B417TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B418.self, { B418TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B419.self, { B419TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B420.self, { B420TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B421.self, { B421TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B422.self, { B422TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B423.self, { B423TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B424.self, { B424TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B425.self, { B425TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B426.self, { B426TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B427.self, { B427TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B428.self, { B428TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B429.self, { B429TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B430.self, { B430TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B431.self, { B431TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B432.self, { B432TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B433.self, { B433TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B434.self, { B434TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B435.self, { B435TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B436.self, { B436TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B437.self, { B437TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B438.self, { B438TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B439.self, { B439TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B440.self, { B440TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B441.self, { B441TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B442.self, { B442TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B443.self, { B443TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B444.self, { B444TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B445.self, { B445TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B446.self, { B446TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B447.self, { B447TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B448.self, { B448TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B449.self, { B449TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B450.self, { B450TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B451.self, { B451TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B452.self, { B452TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B453.self, { B453TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B454.self, { B454TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B455.self, { B455TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B456.self, { B456TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B457.self, { B457TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B458.self, { B458TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B459.self, { B459TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B460.self, { B460TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B461.self, { B461TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B462.self, { B462TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B463.self, { B463TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B464.self, { B464TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B465.self, { B465TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B466.self, { B466TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B467.self, { B467TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B468.self, { B468TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B469.self, { B469TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B470.self, { B470TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B471.self, { B471TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B472.self, { B472TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B473.self, { B473TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B474.self, { B474TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B475.self, { B475TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B476.self, { B476TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B477.self, { B477TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B478.self, { B478TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B479.self, { B479TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B480.self, { B480TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B481.self, { B481TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B482.self, { B482TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B483.self, { B483TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B484.self, { B484TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B485.self, { B485TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B486.self, { B486TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B487.self, { B487TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B488.self, { B488TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B489.self, { B489TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B490.self, { B490TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B491.self, { B491TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B492.self, { B492TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B493.self, { B493TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B494.self, { B494TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B495.self, { B495TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B496.self, { B496TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B497.self, { B497TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B498.self, { B498TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B499.self, { B499TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: colorfulBlue.self, { colorfulBlueTH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B501.self, { B501TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B502.self, { B502TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B503.self, { B503TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B504.self, { B504TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B505.self, { B505TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B506.self, { B506TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B507.self, { B507TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B508.self, { B508TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B509.self, { B509TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B510.self, { B510TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B511.self, { B511TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B512.self, { B512TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B513.self, { B513TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B514.self, { B514TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B515.self, { B515TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B516.self, { B516TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B517.self, { B517TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B518.self, { B518TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B519.self, { B519TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B520.self, { B520TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B521.self, { B521TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B522.self, { B522TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B523.self, { B523TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B524.self, { B524TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B525.self, { B525TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B526.self, { B526TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B527.self, { B527TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B528.self, { B528TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B529.self, { B529TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B530.self, { B530TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B531.self, { B531TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B532.self, { B532TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B533.self, { B533TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B534.self, { B534TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B535.self, { B535TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B536.self, { B536TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B537.self, { B537TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B538.self, { B538TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B539.self, { B539TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B540.self, { B540TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B541.self, { B541TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B542.self, { B542TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B543.self, { B543TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B544.self, { B544TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B545.self, { B545TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B546.self, { B546TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B547.self, { B547TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B548.self, { B548TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B549.self, { B549TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B550.self, { B550TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B551.self, { B551TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B552.self, { B552TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B553.self, { B553TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B554.self, { B554TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B555.self, { B555TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B556.self, { B556TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B557.self, { B557TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B558.self, { B558TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B559.self, { B559TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B560.self, { B560TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B561.self, { B561TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B562.self, { B562TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B563.self, { B563TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B564.self, { B564TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B565.self, { B565TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B566.self, { B566TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B567.self, { B567TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B568.self, { B568TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B569.self, { B569TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B570.self, { B570TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B571.self, { B571TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B572.self, { B572TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B573.self, { B573TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B574.self, { B574TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B575.self, { B575TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B576.self, { B576TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B577.self, { B577TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B578.self, { B578TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B579.self, { B579TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B580.self, { B580TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B581.self, { B581TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B582.self, { B582TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B583.self, { B583TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B584.self, { B584TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B585.self, { B585TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B586.self, { B586TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B587.self, { B587TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B588.self, { B588TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B589.self, { B589TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B590.self, { B590TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B591.self, { B591TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B592.self, { B592TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B593.self, { B593TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B594.self, { B594TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B595.self, { B595TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B596.self, { B596TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B597.self, { B597TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B598.self, { B598TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B599.self, { B599TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B600.self, { B600TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B601.self, { B601TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B602.self, { B602TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B603.self, { B603TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B604.self, { B604TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B605.self, { B605TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B606.self, { B606TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B607.self, { B607TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B608.self, { B608TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B609.self, { B609TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B610.self, { B610TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B611.self, { B611TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B612.self, { B612TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B613.self, { B613TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B614.self, { B614TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B615.self, { B615TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B616.self, { B616TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B617.self, { B617TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B618.self, { B618TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B619.self, { B619TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B620.self, { B620TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B621.self, { B621TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B622.self, { B622TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B623.self, { B623TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B624.self, { B624TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B625.self, { B625TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B626.self, { B626TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B627.self, { B627TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B628.self, { B628TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B629.self, { B629TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B630.self, { B630TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B631.self, { B631TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B632.self, { B632TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B633.self, { B633TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B634.self, { B634TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B635.self, { B635TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B636.self, { B636TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B637.self, { B637TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B638.self, { B638TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B639.self, { B639TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B640.self, { B640TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B641.self, { B641TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B642.self, { B642TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B643.self, { B643TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B644.self, { B644TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B645.self, { B645TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B646.self, { B646TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B647.self, { B647TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B648.self, { B648TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B649.self, { B649TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B650.self, { B650TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B651.self, { B651TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B652.self, { B652TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B653.self, { B653TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B654.self, { B654TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B655.self, { B655TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B656.self, { B656TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B657.self, { B657TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B658.self, { B658TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B659.self, { B659TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B660.self, { B660TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B661.self, { B661TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B662.self, { B662TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B663.self, { B663TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B664.self, { B664TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B665.self, { B665TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B666.self, { B666TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B667.self, { B667TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B668.self, { B668TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B669.self, { B669TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B670.self, { B670TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B671.self, { B671TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B672.self, { B672TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B673.self, { B673TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B674.self, { B674TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B675.self, { B675TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B676.self, { B676TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B677.self, { B677TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B678.self, { B678TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B679.self, { B679TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B680.self, { B680TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B681.self, { B681TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B682.self, { B682TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B683.self, { B683TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B684.self, { B684TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B685.self, { B685TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B686.self, { B686TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B687.self, { B687TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B688.self, { B688TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B689.self, { B689TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B690.self, { B690TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B691.self, { B691TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B692.self, { B692TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B693.self, { B693TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B694.self, { B694TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B695.self, { B695TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B696.self, { B696TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B697.self, { B697TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B698.self, { B698TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B699.self, { B699TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B700.self, { B700TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B701.self, { B701TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B702.self, { B702TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B703.self, { B703TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B704.self, { B704TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B705.self, { B705TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B706.self, { B706TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B707.self, { B707TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B708.self, { B708TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B709.self, { B709TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B710.self, { B710TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B711.self, { B711TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B712.self, { B712TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B713.self, { B713TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B714.self, { B714TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B715.self, { B715TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B716.self, { B716TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B717.self, { B717TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B718.self, { B718TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B719.self, { B719TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B720.self, { B720TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B721.self, { B721TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B722.self, { B722TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B723.self, { B723TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B724.self, { B724TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B725.self, { B725TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B726.self, { B726TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B727.self, { B727TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B728.self, { B728TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B729.self, { B729TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B730.self, { B730TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B731.self, { B731TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B732.self, { B732TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B733.self, { B733TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B734.self, { B734TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B735.self, { B735TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B736.self, { B736TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B737.self, { B737TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B738.self, { B738TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B739.self, { B739TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B740.self, { B740TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B741.self, { B741TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B742.self, { B742TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B743.self, { B743TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B744.self, { B744TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B745.self, { B745TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B746.self, { B746TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B747.self, { B747TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B748.self, { B748TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B749.self, { B749TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B750.self, { B750TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B751.self, { B751TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B752.self, { B752TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B753.self, { B753TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B754.self, { B754TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B755.self, { B755TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B756.self, { B756TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B757.self, { B757TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B758.self, { B758TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B759.self, { B759TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B760.self, { B760TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B761.self, { B761TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B762.self, { B762TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B763.self, { B763TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B764.self, { B764TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B765.self, { B765TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B766.self, { B766TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B767.self, { B767TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B768.self, { B768TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B769.self, { B769TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B770.self, { B770TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B771.self, { B771TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B772.self, { B772TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B773.self, { B773TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B774.self, { B774TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B775.self, { B775TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B776.self, { B776TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B777.self, { B777TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B778.self, { B778TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B779.self, { B779TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B780.self, { B780TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B781.self, { B781TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B782.self, { B782TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B783.self, { B783TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B784.self, { B784TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B785.self, { B785TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B786.self, { B786TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B787.self, { B787TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B788.self, { B788TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B789.self, { B789TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B790.self, { B790TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B791.self, { B791TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B792.self, { B792TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B793.self, { B793TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B794.self, { B794TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B795.self, { B795TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B796.self, { B796TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B797.self, { B797TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B798.self, { B798TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B799.self, { B799TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B800.self, { B800TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B801.self, { B801TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B802.self, { B802TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B803.self, { B803TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B804.self, { B804TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B805.self, { B805TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B806.self, { B806TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B807.self, { B807TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B808.self, { B808TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B809.self, { B809TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B810.self, { B810TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B811.self, { B811TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B812.self, { B812TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B813.self, { B813TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B814.self, { B814TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B815.self, { B815TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B816.self, { B816TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B817.self, { B817TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B818.self, { B818TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B819.self, { B819TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B820.self, { B820TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B821.self, { B821TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B822.self, { B822TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B823.self, { B823TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B824.self, { B824TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B825.self, { B825TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B826.self, { B826TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B827.self, { B827TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B828.self, { B828TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B829.self, { B829TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B830.self, { B830TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B831.self, { B831TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B832.self, { B832TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B833.self, { B833TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B834.self, { B834TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B835.self, { B835TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B836.self, { B836TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B837.self, { B837TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B838.self, { B838TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B839.self, { B839TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B840.self, { B840TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B841.self, { B841TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B842.self, { B842TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B843.self, { B843TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B844.self, { B844TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B845.self, { B845TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B846.self, { B846TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B847.self, { B847TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B848.self, { B848TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B849.self, { B849TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B850.self, { B850TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B851.self, { B851TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B852.self, { B852TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B853.self, { B853TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B854.self, { B854TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B855.self, { B855TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B856.self, { B856TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B857.self, { B857TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B858.self, { B858TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B859.self, { B859TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B860.self, { B860TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B861.self, { B861TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B862.self, { B862TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B863.self, { B863TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B864.self, { B864TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B865.self, { B865TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B866.self, { B866TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B867.self, { B867TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B868.self, { B868TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B869.self, { B869TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B870.self, { B870TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B871.self, { B871TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B872.self, { B872TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B873.self, { B873TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B874.self, { B874TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B875.self, { B875TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B876.self, { B876TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B877.self, { B877TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B878.self, { B878TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B879.self, { B879TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B880.self, { B880TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B881.self, { B881TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B882.self, { B882TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B883.self, { B883TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B884.self, { B884TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B885.self, { B885TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B886.self, { B886TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B887.self, { B887TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B888.self, { B888TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B889.self, { B889TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B890.self, { B890TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B891.self, { B891TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B892.self, { B892TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B893.self, { B893TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B894.self, { B894TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B895.self, { B895TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B896.self, { B896TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B897.self, { B897TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B898.self, { B898TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B899.self, { B899TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B900.self, { B900TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B901.self, { B901TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B902.self, { B902TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B903.self, { B903TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B904.self, { B904TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B905.self, { B905TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B906.self, { B906TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B907.self, { B907TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B908.self, { B908TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B909.self, { B909TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B910.self, { B910TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B911.self, { B911TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B912.self, { B912TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B913.self, { B913TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B914.self, { B914TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B915.self, { B915TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B916.self, { B916TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B917.self, { B917TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B918.self, { B918TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B919.self, { B919TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B920.self, { B920TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B921.self, { B921TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B922.self, { B922TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B923.self, { B923TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B924.self, { B924TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B925.self, { B925TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B926.self, { B926TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B927.self, { B927TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B928.self, { B928TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B929.self, { B929TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B930.self, { B930TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B931.self, { B931TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B932.self, { B932TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B933.self, { B933TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B934.self, { B934TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B935.self, { B935TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B936.self, { B936TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B937.self, { B937TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B938.self, { B938TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B939.self, { B939TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B940.self, { B940TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B941.self, { B941TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B942.self, { B942TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B943.self, { B943TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B944.self, { B944TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B945.self, { B945TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B946.self, { B946TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B947.self, { B947TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B948.self, { B948TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B949.self, { B949TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B950.self, { B950TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B951.self, { B951TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B952.self, { B952TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B953.self, { B953TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B954.self, { B954TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B955.self, { B955TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B956.self, { B956TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B957.self, { B957TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B958.self, { B958TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B959.self, { B959TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B960.self, { B960TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B961.self, { B961TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B962.self, { B962TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B963.self, { B963TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B964.self, { B964TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B965.self, { B965TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B966.self, { B966TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B967.self, { B967TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B968.self, { B968TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B969.self, { B969TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B970.self, { B970TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B971.self, { B971TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B972.self, { B972TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B973.self, { B973TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B974.self, { B974TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B975.self, { B975TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B976.self, { B976TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B977.self, { B977TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B978.self, { B978TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B979.self, { B979TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B980.self, { B980TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B981.self, { B981TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B982.self, { B982TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B983.self, { B983TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B984.self, { B984TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B985.self, { B985TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B986.self, { B986TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B987.self, { B987TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B988.self, { B988TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B989.self, { B989TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B990.self, { B990TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B991.self, { B991TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B992.self, { B992TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B993.self, { B993TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B994.self, { B994TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B995.self, { B995TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B996.self, { B996TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B997.self, { B997TH().handle($0, req: $1, res: $2) })
    _ = Navigator.shared.registerRoute_(type: B998.self, { B998TH().handle($0, req: $1, res: $2) })
}
func registerBuilder() {
    Navigator.shared.registerRoute.type(B0.self).factory(B0Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B1.self).factory(B1Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B2.self).factory(B2Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B3.self).factory(B3Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B4.self).factory(B4Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B5.self).factory(B5Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B6.self).factory(B6Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B7.self).factory(B7Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B8.self).factory(B8Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B9.self).factory(B9Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B10.self).factory(B10Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B11.self).factory(B11Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B12.self).factory(B12Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B13.self).factory(B13Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B14.self).factory(B14Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B15.self).factory(B15Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B16.self).factory(B16Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B17.self).factory(B17Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B18.self).factory(B18Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B19.self).factory(B19Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B20.self).factory(B20Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B21.self).factory(B21Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B22.self).factory(B22Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B23.self).factory(B23Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B24.self).factory(B24Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B25.self).factory(B25Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B26.self).factory(B26Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B27.self).factory(B27Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B28.self).factory(B28Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B29.self).factory(B29Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B30.self).factory(B30Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B31.self).factory(B31Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B32.self).factory(B32Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B33.self).factory(B33Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B34.self).factory(B34Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B35.self).factory(B35Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B36.self).factory(B36Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B37.self).factory(B37Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B38.self).factory(B38Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B39.self).factory(B39Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B40.self).factory(B40Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B41.self).factory(B41Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B42.self).factory(B42Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B43.self).factory(B43Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B44.self).factory(B44Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B45.self).factory(B45Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B46.self).factory(B46Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B47.self).factory(B47Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B48.self).factory(B48Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B49.self).factory(B49Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B50.self).factory(B50Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B51.self).factory(B51Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B52.self).factory(B52Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B53.self).factory(B53Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B54.self).factory(B54Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B55.self).factory(B55Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B56.self).factory(B56Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B57.self).factory(B57Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B58.self).factory(B58Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B59.self).factory(B59Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B60.self).factory(B60Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B61.self).factory(B61Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B62.self).factory(B62Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B63.self).factory(B63Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B64.self).factory(B64Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B65.self).factory(B65Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B66.self).factory(B66Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B67.self).factory(B67Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B68.self).factory(B68Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B69.self).factory(B69Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B70.self).factory(B70Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B71.self).factory(B71Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B72.self).factory(B72Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B73.self).factory(B73Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B74.self).factory(B74Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B75.self).factory(B75Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B76.self).factory(B76Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B77.self).factory(B77Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B78.self).factory(B78Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B79.self).factory(B79Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B80.self).factory(B80Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B81.self).factory(B81Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B82.self).factory(B82Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B83.self).factory(B83Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B84.self).factory(B84Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B85.self).factory(B85Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B86.self).factory(B86Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B87.self).factory(B87Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B88.self).factory(B88Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B89.self).factory(B89Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B90.self).factory(B90Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B91.self).factory(B91Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B92.self).factory(B92Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B93.self).factory(B93Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B94.self).factory(B94Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B95.self).factory(B95Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B96.self).factory(B96Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B97.self).factory(B97Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B98.self).factory(B98Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B99.self).factory(B99Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B100.self).factory(B100Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B101.self).factory(B101Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B102.self).factory(B102Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B103.self).factory(B103Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B104.self).factory(B104Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B105.self).factory(B105Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B106.self).factory(B106Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B107.self).factory(B107Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B108.self).factory(B108Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B109.self).factory(B109Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B110.self).factory(B110Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B111.self).factory(B111Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B112.self).factory(B112Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B113.self).factory(B113Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B114.self).factory(B114Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B115.self).factory(B115Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B116.self).factory(B116Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B117.self).factory(B117Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B118.self).factory(B118Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B119.self).factory(B119Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B120.self).factory(B120Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B121.self).factory(B121Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B122.self).factory(B122Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B123.self).factory(B123Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B124.self).factory(B124Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B125.self).factory(B125Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B126.self).factory(B126Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B127.self).factory(B127Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B128.self).factory(B128Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B129.self).factory(B129Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B130.self).factory(B130Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B131.self).factory(B131Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B132.self).factory(B132Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B133.self).factory(B133Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B134.self).factory(B134Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B135.self).factory(B135Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B136.self).factory(B136Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B137.self).factory(B137Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B138.self).factory(B138Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B139.self).factory(B139Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B140.self).factory(B140Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B141.self).factory(B141Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B142.self).factory(B142Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B143.self).factory(B143Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B144.self).factory(B144Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B145.self).factory(B145Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B146.self).factory(B146Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B147.self).factory(B147Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B148.self).factory(B148Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B149.self).factory(B149Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B150.self).factory(B150Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B151.self).factory(B151Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B152.self).factory(B152Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B153.self).factory(B153Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B154.self).factory(B154Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B155.self).factory(B155Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B156.self).factory(B156Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B157.self).factory(B157Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B158.self).factory(B158Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B159.self).factory(B159Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B160.self).factory(B160Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B161.self).factory(B161Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B162.self).factory(B162Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B163.self).factory(B163Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B164.self).factory(B164Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B165.self).factory(B165Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B166.self).factory(B166Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B167.self).factory(B167Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B168.self).factory(B168Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B169.self).factory(B169Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B170.self).factory(B170Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B171.self).factory(B171Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B172.self).factory(B172Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B173.self).factory(B173Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B174.self).factory(B174Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B175.self).factory(B175Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B176.self).factory(B176Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B177.self).factory(B177Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B178.self).factory(B178Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B179.self).factory(B179Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B180.self).factory(B180Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B181.self).factory(B181Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B182.self).factory(B182Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B183.self).factory(B183Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B184.self).factory(B184Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B185.self).factory(B185Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B186.self).factory(B186Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B187.self).factory(B187Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B188.self).factory(B188Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B189.self).factory(B189Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B190.self).factory(B190Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B191.self).factory(B191Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B192.self).factory(B192Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B193.self).factory(B193Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B194.self).factory(B194Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B195.self).factory(B195Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B196.self).factory(B196Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B197.self).factory(B197Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B198.self).factory(B198Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B199.self).factory(B199Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B200.self).factory(B200Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B201.self).factory(B201Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B202.self).factory(B202Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B203.self).factory(B203Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B204.self).factory(B204Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B205.self).factory(B205Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B206.self).factory(B206Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B207.self).factory(B207Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B208.self).factory(B208Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B209.self).factory(B209Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B210.self).factory(B210Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B211.self).factory(B211Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B212.self).factory(B212Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B213.self).factory(B213Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B214.self).factory(B214Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B215.self).factory(B215Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B216.self).factory(B216Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B217.self).factory(B217Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B218.self).factory(B218Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B219.self).factory(B219Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B220.self).factory(B220Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B221.self).factory(B221Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B222.self).factory(B222Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B223.self).factory(B223Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B224.self).factory(B224Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B225.self).factory(B225Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B226.self).factory(B226Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B227.self).factory(B227Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B228.self).factory(B228Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B229.self).factory(B229Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B230.self).factory(B230Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B231.self).factory(B231Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B232.self).factory(B232Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B233.self).factory(B233Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B234.self).factory(B234Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B235.self).factory(B235Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B236.self).factory(B236Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B237.self).factory(B237Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B238.self).factory(B238Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B239.self).factory(B239Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B240.self).factory(B240Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B241.self).factory(B241Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B242.self).factory(B242Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B243.self).factory(B243Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B244.self).factory(B244Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B245.self).factory(B245Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B246.self).factory(B246Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B247.self).factory(B247Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B248.self).factory(B248Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B249.self).factory(B249Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B250.self).factory(B250Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B251.self).factory(B251Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B252.self).factory(B252Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B253.self).factory(B253Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B254.self).factory(B254Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B255.self).factory(B255Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B256.self).factory(B256Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B257.self).factory(B257Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B258.self).factory(B258Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B259.self).factory(B259Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B260.self).factory(B260Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B261.self).factory(B261Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B262.self).factory(B262Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B263.self).factory(B263Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B264.self).factory(B264Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B265.self).factory(B265Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B266.self).factory(B266Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B267.self).factory(B267Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B268.self).factory(B268Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B269.self).factory(B269Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B270.self).factory(B270Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B271.self).factory(B271Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B272.self).factory(B272Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B273.self).factory(B273Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B274.self).factory(B274Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B275.self).factory(B275Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B276.self).factory(B276Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B277.self).factory(B277Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B278.self).factory(B278Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B279.self).factory(B279Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B280.self).factory(B280Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B281.self).factory(B281Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B282.self).factory(B282Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B283.self).factory(B283Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B284.self).factory(B284Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B285.self).factory(B285Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B286.self).factory(B286Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B287.self).factory(B287Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B288.self).factory(B288Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B289.self).factory(B289Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B290.self).factory(B290Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B291.self).factory(B291Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B292.self).factory(B292Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B293.self).factory(B293Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B294.self).factory(B294Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B295.self).factory(B295Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B296.self).factory(B296Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B297.self).factory(B297Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B298.self).factory(B298Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B299.self).factory(B299Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B300.self).factory(B300Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B301.self).factory(B301Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B302.self).factory(B302Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B303.self).factory(B303Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B304.self).factory(B304Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B305.self).factory(B305Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B306.self).factory(B306Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B307.self).factory(B307Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B308.self).factory(B308Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B309.self).factory(B309Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B310.self).factory(B310Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B311.self).factory(B311Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B312.self).factory(B312Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B313.self).factory(B313Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B314.self).factory(B314Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B315.self).factory(B315Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B316.self).factory(B316Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B317.self).factory(B317Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B318.self).factory(B318Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B319.self).factory(B319Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B320.self).factory(B320Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B321.self).factory(B321Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B322.self).factory(B322Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B323.self).factory(B323Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B324.self).factory(B324Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B325.self).factory(B325Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B326.self).factory(B326Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B327.self).factory(B327Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B328.self).factory(B328Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B329.self).factory(B329Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B330.self).factory(B330Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B331.self).factory(B331Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B332.self).factory(B332Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B333.self).factory(B333Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B334.self).factory(B334Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B335.self).factory(B335Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B336.self).factory(B336Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B337.self).factory(B337Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B338.self).factory(B338Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B339.self).factory(B339Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B340.self).factory(B340Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B341.self).factory(B341Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B342.self).factory(B342Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B343.self).factory(B343Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B344.self).factory(B344Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B345.self).factory(B345Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B346.self).factory(B346Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B347.self).factory(B347Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B348.self).factory(B348Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B349.self).factory(B349Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B350.self).factory(B350Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B351.self).factory(B351Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B352.self).factory(B352Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B353.self).factory(B353Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B354.self).factory(B354Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B355.self).factory(B355Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B356.self).factory(B356Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B357.self).factory(B357Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B358.self).factory(B358Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B359.self).factory(B359Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B360.self).factory(B360Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B361.self).factory(B361Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B362.self).factory(B362Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B363.self).factory(B363Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B364.self).factory(B364Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B365.self).factory(B365Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B366.self).factory(B366Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B367.self).factory(B367Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B368.self).factory(B368Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B369.self).factory(B369Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B370.self).factory(B370Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B371.self).factory(B371Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B372.self).factory(B372Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B373.self).factory(B373Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B374.self).factory(B374Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B375.self).factory(B375Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B376.self).factory(B376Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B377.self).factory(B377Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B378.self).factory(B378Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B379.self).factory(B379Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B380.self).factory(B380Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B381.self).factory(B381Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B382.self).factory(B382Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B383.self).factory(B383Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B384.self).factory(B384Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B385.self).factory(B385Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B386.self).factory(B386Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B387.self).factory(B387Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B388.self).factory(B388Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B389.self).factory(B389Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B390.self).factory(B390Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B391.self).factory(B391Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B392.self).factory(B392Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B393.self).factory(B393Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B394.self).factory(B394Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B395.self).factory(B395Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B396.self).factory(B396Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B397.self).factory(B397Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B398.self).factory(B398Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B399.self).factory(B399Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B400.self).factory(B400Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B401.self).factory(B401Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B402.self).factory(B402Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B403.self).factory(B403Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B404.self).factory(B404Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B405.self).factory(B405Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B406.self).factory(B406Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B407.self).factory(B407Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B408.self).factory(B408Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B409.self).factory(B409Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B410.self).factory(B410Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B411.self).factory(B411Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B412.self).factory(B412Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B413.self).factory(B413Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B414.self).factory(B414Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B415.self).factory(B415Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B416.self).factory(B416Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B417.self).factory(B417Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B418.self).factory(B418Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B419.self).factory(B419Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B420.self).factory(B420Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B421.self).factory(B421Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B422.self).factory(B422Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B423.self).factory(B423Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B424.self).factory(B424Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B425.self).factory(B425Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B426.self).factory(B426Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B427.self).factory(B427Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B428.self).factory(B428Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B429.self).factory(B429Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B430.self).factory(B430Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B431.self).factory(B431Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B432.self).factory(B432Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B433.self).factory(B433Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B434.self).factory(B434Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B435.self).factory(B435Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B436.self).factory(B436Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B437.self).factory(B437Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B438.self).factory(B438Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B439.self).factory(B439Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B440.self).factory(B440Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B441.self).factory(B441Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B442.self).factory(B442Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B443.self).factory(B443Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B444.self).factory(B444Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B445.self).factory(B445Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B446.self).factory(B446Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B447.self).factory(B447Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B448.self).factory(B448Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B449.self).factory(B449Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B450.self).factory(B450Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B451.self).factory(B451Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B452.self).factory(B452Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B453.self).factory(B453Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B454.self).factory(B454Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B455.self).factory(B455Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B456.self).factory(B456Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B457.self).factory(B457Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B458.self).factory(B458Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B459.self).factory(B459Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B460.self).factory(B460Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B461.self).factory(B461Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B462.self).factory(B462Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B463.self).factory(B463Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B464.self).factory(B464Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B465.self).factory(B465Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B466.self).factory(B466Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B467.self).factory(B467Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B468.self).factory(B468Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B469.self).factory(B469Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B470.self).factory(B470Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B471.self).factory(B471Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B472.self).factory(B472Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B473.self).factory(B473Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B474.self).factory(B474Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B475.self).factory(B475Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B476.self).factory(B476Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B477.self).factory(B477Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B478.self).factory(B478Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B479.self).factory(B479Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B480.self).factory(B480Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B481.self).factory(B481Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B482.self).factory(B482Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B483.self).factory(B483Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B484.self).factory(B484Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B485.self).factory(B485Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B486.self).factory(B486Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B487.self).factory(B487Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B488.self).factory(B488Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B489.self).factory(B489Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B490.self).factory(B490Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B491.self).factory(B491Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B492.self).factory(B492Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B493.self).factory(B493Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B494.self).factory(B494Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B495.self).factory(B495Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B496.self).factory(B496Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B497.self).factory(B497Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B498.self).factory(B498Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B499.self).factory(B499Handler.init(resolver:))
    Navigator.shared.registerRoute.type(colorfulBlue.self).factory(colorfulBlueHandler.init(resolver:))
    Navigator.shared.registerRoute.type(B501.self).factory(B501Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B502.self).factory(B502Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B503.self).factory(B503Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B504.self).factory(B504Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B505.self).factory(B505Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B506.self).factory(B506Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B507.self).factory(B507Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B508.self).factory(B508Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B509.self).factory(B509Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B510.self).factory(B510Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B511.self).factory(B511Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B512.self).factory(B512Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B513.self).factory(B513Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B514.self).factory(B514Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B515.self).factory(B515Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B516.self).factory(B516Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B517.self).factory(B517Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B518.self).factory(B518Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B519.self).factory(B519Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B520.self).factory(B520Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B521.self).factory(B521Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B522.self).factory(B522Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B523.self).factory(B523Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B524.self).factory(B524Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B525.self).factory(B525Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B526.self).factory(B526Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B527.self).factory(B527Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B528.self).factory(B528Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B529.self).factory(B529Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B530.self).factory(B530Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B531.self).factory(B531Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B532.self).factory(B532Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B533.self).factory(B533Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B534.self).factory(B534Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B535.self).factory(B535Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B536.self).factory(B536Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B537.self).factory(B537Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B538.self).factory(B538Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B539.self).factory(B539Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B540.self).factory(B540Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B541.self).factory(B541Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B542.self).factory(B542Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B543.self).factory(B543Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B544.self).factory(B544Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B545.self).factory(B545Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B546.self).factory(B546Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B547.self).factory(B547Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B548.self).factory(B548Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B549.self).factory(B549Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B550.self).factory(B550Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B551.self).factory(B551Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B552.self).factory(B552Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B553.self).factory(B553Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B554.self).factory(B554Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B555.self).factory(B555Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B556.self).factory(B556Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B557.self).factory(B557Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B558.self).factory(B558Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B559.self).factory(B559Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B560.self).factory(B560Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B561.self).factory(B561Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B562.self).factory(B562Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B563.self).factory(B563Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B564.self).factory(B564Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B565.self).factory(B565Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B566.self).factory(B566Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B567.self).factory(B567Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B568.self).factory(B568Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B569.self).factory(B569Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B570.self).factory(B570Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B571.self).factory(B571Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B572.self).factory(B572Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B573.self).factory(B573Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B574.self).factory(B574Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B575.self).factory(B575Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B576.self).factory(B576Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B577.self).factory(B577Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B578.self).factory(B578Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B579.self).factory(B579Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B580.self).factory(B580Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B581.self).factory(B581Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B582.self).factory(B582Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B583.self).factory(B583Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B584.self).factory(B584Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B585.self).factory(B585Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B586.self).factory(B586Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B587.self).factory(B587Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B588.self).factory(B588Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B589.self).factory(B589Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B590.self).factory(B590Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B591.self).factory(B591Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B592.self).factory(B592Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B593.self).factory(B593Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B594.self).factory(B594Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B595.self).factory(B595Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B596.self).factory(B596Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B597.self).factory(B597Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B598.self).factory(B598Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B599.self).factory(B599Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B600.self).factory(B600Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B601.self).factory(B601Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B602.self).factory(B602Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B603.self).factory(B603Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B604.self).factory(B604Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B605.self).factory(B605Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B606.self).factory(B606Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B607.self).factory(B607Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B608.self).factory(B608Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B609.self).factory(B609Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B610.self).factory(B610Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B611.self).factory(B611Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B612.self).factory(B612Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B613.self).factory(B613Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B614.self).factory(B614Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B615.self).factory(B615Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B616.self).factory(B616Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B617.self).factory(B617Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B618.self).factory(B618Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B619.self).factory(B619Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B620.self).factory(B620Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B621.self).factory(B621Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B622.self).factory(B622Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B623.self).factory(B623Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B624.self).factory(B624Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B625.self).factory(B625Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B626.self).factory(B626Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B627.self).factory(B627Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B628.self).factory(B628Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B629.self).factory(B629Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B630.self).factory(B630Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B631.self).factory(B631Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B632.self).factory(B632Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B633.self).factory(B633Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B634.self).factory(B634Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B635.self).factory(B635Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B636.self).factory(B636Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B637.self).factory(B637Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B638.self).factory(B638Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B639.self).factory(B639Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B640.self).factory(B640Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B641.self).factory(B641Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B642.self).factory(B642Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B643.self).factory(B643Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B644.self).factory(B644Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B645.self).factory(B645Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B646.self).factory(B646Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B647.self).factory(B647Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B648.self).factory(B648Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B649.self).factory(B649Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B650.self).factory(B650Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B651.self).factory(B651Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B652.self).factory(B652Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B653.self).factory(B653Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B654.self).factory(B654Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B655.self).factory(B655Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B656.self).factory(B656Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B657.self).factory(B657Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B658.self).factory(B658Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B659.self).factory(B659Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B660.self).factory(B660Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B661.self).factory(B661Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B662.self).factory(B662Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B663.self).factory(B663Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B664.self).factory(B664Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B665.self).factory(B665Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B666.self).factory(B666Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B667.self).factory(B667Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B668.self).factory(B668Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B669.self).factory(B669Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B670.self).factory(B670Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B671.self).factory(B671Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B672.self).factory(B672Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B673.self).factory(B673Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B674.self).factory(B674Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B675.self).factory(B675Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B676.self).factory(B676Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B677.self).factory(B677Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B678.self).factory(B678Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B679.self).factory(B679Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B680.self).factory(B680Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B681.self).factory(B681Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B682.self).factory(B682Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B683.self).factory(B683Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B684.self).factory(B684Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B685.self).factory(B685Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B686.self).factory(B686Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B687.self).factory(B687Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B688.self).factory(B688Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B689.self).factory(B689Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B690.self).factory(B690Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B691.self).factory(B691Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B692.self).factory(B692Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B693.self).factory(B693Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B694.self).factory(B694Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B695.self).factory(B695Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B696.self).factory(B696Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B697.self).factory(B697Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B698.self).factory(B698Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B699.self).factory(B699Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B700.self).factory(B700Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B701.self).factory(B701Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B702.self).factory(B702Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B703.self).factory(B703Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B704.self).factory(B704Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B705.self).factory(B705Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B706.self).factory(B706Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B707.self).factory(B707Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B708.self).factory(B708Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B709.self).factory(B709Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B710.self).factory(B710Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B711.self).factory(B711Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B712.self).factory(B712Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B713.self).factory(B713Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B714.self).factory(B714Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B715.self).factory(B715Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B716.self).factory(B716Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B717.self).factory(B717Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B718.self).factory(B718Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B719.self).factory(B719Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B720.self).factory(B720Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B721.self).factory(B721Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B722.self).factory(B722Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B723.self).factory(B723Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B724.self).factory(B724Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B725.self).factory(B725Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B726.self).factory(B726Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B727.self).factory(B727Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B728.self).factory(B728Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B729.self).factory(B729Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B730.self).factory(B730Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B731.self).factory(B731Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B732.self).factory(B732Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B733.self).factory(B733Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B734.self).factory(B734Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B735.self).factory(B735Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B736.self).factory(B736Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B737.self).factory(B737Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B738.self).factory(B738Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B739.self).factory(B739Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B740.self).factory(B740Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B741.self).factory(B741Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B742.self).factory(B742Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B743.self).factory(B743Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B744.self).factory(B744Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B745.self).factory(B745Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B746.self).factory(B746Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B747.self).factory(B747Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B748.self).factory(B748Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B749.self).factory(B749Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B750.self).factory(B750Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B751.self).factory(B751Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B752.self).factory(B752Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B753.self).factory(B753Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B754.self).factory(B754Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B755.self).factory(B755Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B756.self).factory(B756Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B757.self).factory(B757Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B758.self).factory(B758Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B759.self).factory(B759Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B760.self).factory(B760Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B761.self).factory(B761Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B762.self).factory(B762Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B763.self).factory(B763Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B764.self).factory(B764Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B765.self).factory(B765Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B766.self).factory(B766Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B767.self).factory(B767Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B768.self).factory(B768Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B769.self).factory(B769Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B770.self).factory(B770Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B771.self).factory(B771Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B772.self).factory(B772Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B773.self).factory(B773Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B774.self).factory(B774Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B775.self).factory(B775Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B776.self).factory(B776Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B777.self).factory(B777Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B778.self).factory(B778Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B779.self).factory(B779Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B780.self).factory(B780Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B781.self).factory(B781Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B782.self).factory(B782Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B783.self).factory(B783Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B784.self).factory(B784Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B785.self).factory(B785Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B786.self).factory(B786Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B787.self).factory(B787Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B788.self).factory(B788Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B789.self).factory(B789Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B790.self).factory(B790Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B791.self).factory(B791Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B792.self).factory(B792Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B793.self).factory(B793Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B794.self).factory(B794Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B795.self).factory(B795Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B796.self).factory(B796Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B797.self).factory(B797Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B798.self).factory(B798Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B799.self).factory(B799Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B800.self).factory(B800Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B801.self).factory(B801Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B802.self).factory(B802Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B803.self).factory(B803Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B804.self).factory(B804Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B805.self).factory(B805Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B806.self).factory(B806Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B807.self).factory(B807Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B808.self).factory(B808Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B809.self).factory(B809Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B810.self).factory(B810Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B811.self).factory(B811Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B812.self).factory(B812Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B813.self).factory(B813Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B814.self).factory(B814Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B815.self).factory(B815Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B816.self).factory(B816Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B817.self).factory(B817Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B818.self).factory(B818Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B819.self).factory(B819Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B820.self).factory(B820Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B821.self).factory(B821Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B822.self).factory(B822Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B823.self).factory(B823Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B824.self).factory(B824Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B825.self).factory(B825Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B826.self).factory(B826Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B827.self).factory(B827Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B828.self).factory(B828Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B829.self).factory(B829Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B830.self).factory(B830Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B831.self).factory(B831Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B832.self).factory(B832Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B833.self).factory(B833Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B834.self).factory(B834Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B835.self).factory(B835Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B836.self).factory(B836Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B837.self).factory(B837Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B838.self).factory(B838Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B839.self).factory(B839Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B840.self).factory(B840Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B841.self).factory(B841Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B842.self).factory(B842Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B843.self).factory(B843Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B844.self).factory(B844Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B845.self).factory(B845Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B846.self).factory(B846Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B847.self).factory(B847Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B848.self).factory(B848Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B849.self).factory(B849Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B850.self).factory(B850Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B851.self).factory(B851Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B852.self).factory(B852Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B853.self).factory(B853Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B854.self).factory(B854Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B855.self).factory(B855Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B856.self).factory(B856Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B857.self).factory(B857Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B858.self).factory(B858Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B859.self).factory(B859Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B860.self).factory(B860Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B861.self).factory(B861Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B862.self).factory(B862Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B863.self).factory(B863Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B864.self).factory(B864Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B865.self).factory(B865Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B866.self).factory(B866Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B867.self).factory(B867Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B868.self).factory(B868Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B869.self).factory(B869Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B870.self).factory(B870Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B871.self).factory(B871Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B872.self).factory(B872Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B873.self).factory(B873Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B874.self).factory(B874Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B875.self).factory(B875Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B876.self).factory(B876Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B877.self).factory(B877Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B878.self).factory(B878Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B879.self).factory(B879Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B880.self).factory(B880Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B881.self).factory(B881Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B882.self).factory(B882Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B883.self).factory(B883Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B884.self).factory(B884Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B885.self).factory(B885Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B886.self).factory(B886Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B887.self).factory(B887Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B888.self).factory(B888Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B889.self).factory(B889Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B890.self).factory(B890Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B891.self).factory(B891Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B892.self).factory(B892Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B893.self).factory(B893Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B894.self).factory(B894Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B895.self).factory(B895Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B896.self).factory(B896Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B897.self).factory(B897Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B898.self).factory(B898Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B899.self).factory(B899Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B900.self).factory(B900Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B901.self).factory(B901Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B902.self).factory(B902Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B903.self).factory(B903Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B904.self).factory(B904Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B905.self).factory(B905Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B906.self).factory(B906Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B907.self).factory(B907Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B908.self).factory(B908Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B909.self).factory(B909Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B910.self).factory(B910Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B911.self).factory(B911Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B912.self).factory(B912Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B913.self).factory(B913Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B914.self).factory(B914Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B915.self).factory(B915Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B916.self).factory(B916Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B917.self).factory(B917Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B918.self).factory(B918Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B919.self).factory(B919Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B920.self).factory(B920Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B921.self).factory(B921Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B922.self).factory(B922Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B923.self).factory(B923Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B924.self).factory(B924Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B925.self).factory(B925Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B926.self).factory(B926Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B927.self).factory(B927Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B928.self).factory(B928Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B929.self).factory(B929Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B930.self).factory(B930Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B931.self).factory(B931Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B932.self).factory(B932Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B933.self).factory(B933Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B934.self).factory(B934Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B935.self).factory(B935Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B936.self).factory(B936Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B937.self).factory(B937Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B938.self).factory(B938Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B939.self).factory(B939Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B940.self).factory(B940Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B941.self).factory(B941Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B942.self).factory(B942Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B943.self).factory(B943Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B944.self).factory(B944Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B945.self).factory(B945Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B946.self).factory(B946Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B947.self).factory(B947Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B948.self).factory(B948Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B949.self).factory(B949Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B950.self).factory(B950Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B951.self).factory(B951Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B952.self).factory(B952Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B953.self).factory(B953Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B954.self).factory(B954Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B955.self).factory(B955Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B956.self).factory(B956Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B957.self).factory(B957Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B958.self).factory(B958Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B959.self).factory(B959Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B960.self).factory(B960Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B961.self).factory(B961Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B962.self).factory(B962Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B963.self).factory(B963Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B964.self).factory(B964Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B965.self).factory(B965Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B966.self).factory(B966Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B967.self).factory(B967Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B968.self).factory(B968Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B969.self).factory(B969Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B970.self).factory(B970Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B971.self).factory(B971Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B972.self).factory(B972Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B973.self).factory(B973Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B974.self).factory(B974Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B975.self).factory(B975Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B976.self).factory(B976Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B977.self).factory(B977Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B978.self).factory(B978Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B979.self).factory(B979Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B980.self).factory(B980Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B981.self).factory(B981Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B982.self).factory(B982Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B983.self).factory(B983Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B984.self).factory(B984Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B985.self).factory(B985Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B986.self).factory(B986Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B987.self).factory(B987Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B988.self).factory(B988Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B989.self).factory(B989Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B990.self).factory(B990Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B991.self).factory(B991Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B992.self).factory(B992Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B993.self).factory(B993Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B994.self).factory(B994Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B995.self).factory(B995Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B996.self).factory(B996Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B997.self).factory(B997Handler.init(resolver:))
    Navigator.shared.registerRoute.type(B998.self).factory(B998Handler.init(resolver:))
}

public final class B0Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B0, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B0TH: TypedRouterHandler<B0> {}
public struct B0: Body {
    private static let prefix = "//client/chat/info/group/setting/B0"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B0.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B1Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B1, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B1TH: TypedRouterHandler<B1> {}
public struct B1: Body {
    private static let prefix = "//client/chat/info/group/setting/B1"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B1.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B2Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B2, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B2TH: TypedRouterHandler<B2> {}
public struct B2: Body {
    private static let prefix = "//client/chat/info/group/setting/B2"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B2.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B3Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B3, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B3TH: TypedRouterHandler<B3> {}
public struct B3: Body {
    private static let prefix = "//client/chat/info/group/setting/B3"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B3.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B4Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B4, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B4TH: TypedRouterHandler<B4> {}
public struct B4: Body {
    private static let prefix = "//client/chat/info/group/setting/B4"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B4.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B5Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B5, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B5TH: TypedRouterHandler<B5> {}
public struct B5: Body {
    private static let prefix = "//client/chat/info/group/setting/B5"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B5.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B6Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B6, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B6TH: TypedRouterHandler<B6> {}
public struct B6: Body {
    private static let prefix = "//client/chat/info/group/setting/B6"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B6.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B7Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B7, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B7TH: TypedRouterHandler<B7> {}
public struct B7: Body {
    private static let prefix = "//client/chat/info/group/setting/B7"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B7.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B8Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B8, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B8TH: TypedRouterHandler<B8> {}
public struct B8: Body {
    private static let prefix = "//client/chat/info/group/setting/B8"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B8.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B9Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B9, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B9TH: TypedRouterHandler<B9> {}
public struct B9: Body {
    private static let prefix = "//client/chat/info/group/setting/B9"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B9.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B10Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B10, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B10TH: TypedRouterHandler<B10> {}
public struct B10: Body {
    private static let prefix = "//client/chat/info/group/setting/B10"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B10.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B11Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B11, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B11TH: TypedRouterHandler<B11> {}
public struct B11: Body {
    private static let prefix = "//client/chat/info/group/setting/B11"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B11.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B12Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B12, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B12TH: TypedRouterHandler<B12> {}
public struct B12: Body {
    private static let prefix = "//client/chat/info/group/setting/B12"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B12.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B13Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B13, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B13TH: TypedRouterHandler<B13> {}
public struct B13: Body {
    private static let prefix = "//client/chat/info/group/setting/B13"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B13.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B14Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B14, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B14TH: TypedRouterHandler<B14> {}
public struct B14: Body {
    private static let prefix = "//client/chat/info/group/setting/B14"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B14.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B15Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B15, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B15TH: TypedRouterHandler<B15> {}
public struct B15: Body {
    private static let prefix = "//client/chat/info/group/setting/B15"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B15.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B16Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B16, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B16TH: TypedRouterHandler<B16> {}
public struct B16: Body {
    private static let prefix = "//client/chat/info/group/setting/B16"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B16.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B17Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B17, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B17TH: TypedRouterHandler<B17> {}
public struct B17: Body {
    private static let prefix = "//client/chat/info/group/setting/B17"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B17.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B18Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B18, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B18TH: TypedRouterHandler<B18> {}
public struct B18: Body {
    private static let prefix = "//client/chat/info/group/setting/B18"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B18.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B19Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B19, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B19TH: TypedRouterHandler<B19> {}
public struct B19: Body {
    private static let prefix = "//client/chat/info/group/setting/B19"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B19.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B20Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B20, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B20TH: TypedRouterHandler<B20> {}
public struct B20: Body {
    private static let prefix = "//client/chat/info/group/setting/B20"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B20.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B21Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B21, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B21TH: TypedRouterHandler<B21> {}
public struct B21: Body {
    private static let prefix = "//client/chat/info/group/setting/B21"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B21.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B22Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B22, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B22TH: TypedRouterHandler<B22> {}
public struct B22: Body {
    private static let prefix = "//client/chat/info/group/setting/B22"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B22.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B23Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B23, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B23TH: TypedRouterHandler<B23> {}
public struct B23: Body {
    private static let prefix = "//client/chat/info/group/setting/B23"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B23.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B24Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B24, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B24TH: TypedRouterHandler<B24> {}
public struct B24: Body {
    private static let prefix = "//client/chat/info/group/setting/B24"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B24.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B25Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B25, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B25TH: TypedRouterHandler<B25> {}
public struct B25: Body {
    private static let prefix = "//client/chat/info/group/setting/B25"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B25.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B26Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B26, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B26TH: TypedRouterHandler<B26> {}
public struct B26: Body {
    private static let prefix = "//client/chat/info/group/setting/B26"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B26.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B27Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B27, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B27TH: TypedRouterHandler<B27> {}
public struct B27: Body {
    private static let prefix = "//client/chat/info/group/setting/B27"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B27.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B28Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B28, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B28TH: TypedRouterHandler<B28> {}
public struct B28: Body {
    private static let prefix = "//client/chat/info/group/setting/B28"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B28.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B29Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B29, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B29TH: TypedRouterHandler<B29> {}
public struct B29: Body {
    private static let prefix = "//client/chat/info/group/setting/B29"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B29.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B30Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B30, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B30TH: TypedRouterHandler<B30> {}
public struct B30: Body {
    private static let prefix = "//client/chat/info/group/setting/B30"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B30.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B31Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B31, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B31TH: TypedRouterHandler<B31> {}
public struct B31: Body {
    private static let prefix = "//client/chat/info/group/setting/B31"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B31.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B32Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B32, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B32TH: TypedRouterHandler<B32> {}
public struct B32: Body {
    private static let prefix = "//client/chat/info/group/setting/B32"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B32.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B33Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B33, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B33TH: TypedRouterHandler<B33> {}
public struct B33: Body {
    private static let prefix = "//client/chat/info/group/setting/B33"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B33.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B34Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B34, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B34TH: TypedRouterHandler<B34> {}
public struct B34: Body {
    private static let prefix = "//client/chat/info/group/setting/B34"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B34.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B35Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B35, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B35TH: TypedRouterHandler<B35> {}
public struct B35: Body {
    private static let prefix = "//client/chat/info/group/setting/B35"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B35.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B36Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B36, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B36TH: TypedRouterHandler<B36> {}
public struct B36: Body {
    private static let prefix = "//client/chat/info/group/setting/B36"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B36.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B37Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B37, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B37TH: TypedRouterHandler<B37> {}
public struct B37: Body {
    private static let prefix = "//client/chat/info/group/setting/B37"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B37.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B38Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B38, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B38TH: TypedRouterHandler<B38> {}
public struct B38: Body {
    private static let prefix = "//client/chat/info/group/setting/B38"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B38.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B39Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B39, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B39TH: TypedRouterHandler<B39> {}
public struct B39: Body {
    private static let prefix = "//client/chat/info/group/setting/B39"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B39.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B40Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B40, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B40TH: TypedRouterHandler<B40> {}
public struct B40: Body {
    private static let prefix = "//client/chat/info/group/setting/B40"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B40.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B41Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B41, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B41TH: TypedRouterHandler<B41> {}
public struct B41: Body {
    private static let prefix = "//client/chat/info/group/setting/B41"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B41.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B42Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B42, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B42TH: TypedRouterHandler<B42> {}
public struct B42: Body {
    private static let prefix = "//client/chat/info/group/setting/B42"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B42.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B43Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B43, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B43TH: TypedRouterHandler<B43> {}
public struct B43: Body {
    private static let prefix = "//client/chat/info/group/setting/B43"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B43.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B44Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B44, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B44TH: TypedRouterHandler<B44> {}
public struct B44: Body {
    private static let prefix = "//client/chat/info/group/setting/B44"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B44.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B45Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B45, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B45TH: TypedRouterHandler<B45> {}
public struct B45: Body {
    private static let prefix = "//client/chat/info/group/setting/B45"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B45.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B46Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B46, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B46TH: TypedRouterHandler<B46> {}
public struct B46: Body {
    private static let prefix = "//client/chat/info/group/setting/B46"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B46.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B47Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B47, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B47TH: TypedRouterHandler<B47> {}
public struct B47: Body {
    private static let prefix = "//client/chat/info/group/setting/B47"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B47.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B48Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B48, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B48TH: TypedRouterHandler<B48> {}
public struct B48: Body {
    private static let prefix = "//client/chat/info/group/setting/B48"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B48.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B49Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B49, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B49TH: TypedRouterHandler<B49> {}
public struct B49: Body {
    private static let prefix = "//client/chat/info/group/setting/B49"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B49.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B50Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B50, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B50TH: TypedRouterHandler<B50> {}
public struct B50: Body {
    private static let prefix = "//client/chat/info/group/setting/B50"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B50.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B51Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B51, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B51TH: TypedRouterHandler<B51> {}
public struct B51: Body {
    private static let prefix = "//client/chat/info/group/setting/B51"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B51.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B52Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B52, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B52TH: TypedRouterHandler<B52> {}
public struct B52: Body {
    private static let prefix = "//client/chat/info/group/setting/B52"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B52.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B53Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B53, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B53TH: TypedRouterHandler<B53> {}
public struct B53: Body {
    private static let prefix = "//client/chat/info/group/setting/B53"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B53.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B54Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B54, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B54TH: TypedRouterHandler<B54> {}
public struct B54: Body {
    private static let prefix = "//client/chat/info/group/setting/B54"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B54.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B55Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B55, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B55TH: TypedRouterHandler<B55> {}
public struct B55: Body {
    private static let prefix = "//client/chat/info/group/setting/B55"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B55.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B56Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B56, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B56TH: TypedRouterHandler<B56> {}
public struct B56: Body {
    private static let prefix = "//client/chat/info/group/setting/B56"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B56.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B57Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B57, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B57TH: TypedRouterHandler<B57> {}
public struct B57: Body {
    private static let prefix = "//client/chat/info/group/setting/B57"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B57.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B58Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B58, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B58TH: TypedRouterHandler<B58> {}
public struct B58: Body {
    private static let prefix = "//client/chat/info/group/setting/B58"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B58.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B59Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B59, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B59TH: TypedRouterHandler<B59> {}
public struct B59: Body {
    private static let prefix = "//client/chat/info/group/setting/B59"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B59.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B60Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B60, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B60TH: TypedRouterHandler<B60> {}
public struct B60: Body {
    private static let prefix = "//client/chat/info/group/setting/B60"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B60.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B61Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B61, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B61TH: TypedRouterHandler<B61> {}
public struct B61: Body {
    private static let prefix = "//client/chat/info/group/setting/B61"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B61.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B62Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B62, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B62TH: TypedRouterHandler<B62> {}
public struct B62: Body {
    private static let prefix = "//client/chat/info/group/setting/B62"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B62.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B63Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B63, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B63TH: TypedRouterHandler<B63> {}
public struct B63: Body {
    private static let prefix = "//client/chat/info/group/setting/B63"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B63.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B64Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B64, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B64TH: TypedRouterHandler<B64> {}
public struct B64: Body {
    private static let prefix = "//client/chat/info/group/setting/B64"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B64.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B65Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B65, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B65TH: TypedRouterHandler<B65> {}
public struct B65: Body {
    private static let prefix = "//client/chat/info/group/setting/B65"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B65.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B66Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B66, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B66TH: TypedRouterHandler<B66> {}
public struct B66: Body {
    private static let prefix = "//client/chat/info/group/setting/B66"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B66.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B67Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B67, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B67TH: TypedRouterHandler<B67> {}
public struct B67: Body {
    private static let prefix = "//client/chat/info/group/setting/B67"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B67.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B68Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B68, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B68TH: TypedRouterHandler<B68> {}
public struct B68: Body {
    private static let prefix = "//client/chat/info/group/setting/B68"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B68.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B69Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B69, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B69TH: TypedRouterHandler<B69> {}
public struct B69: Body {
    private static let prefix = "//client/chat/info/group/setting/B69"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B69.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B70Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B70, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B70TH: TypedRouterHandler<B70> {}
public struct B70: Body {
    private static let prefix = "//client/chat/info/group/setting/B70"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B70.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B71Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B71, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B71TH: TypedRouterHandler<B71> {}
public struct B71: Body {
    private static let prefix = "//client/chat/info/group/setting/B71"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B71.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B72Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B72, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B72TH: TypedRouterHandler<B72> {}
public struct B72: Body {
    private static let prefix = "//client/chat/info/group/setting/B72"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B72.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B73Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B73, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B73TH: TypedRouterHandler<B73> {}
public struct B73: Body {
    private static let prefix = "//client/chat/info/group/setting/B73"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B73.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B74Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B74, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B74TH: TypedRouterHandler<B74> {}
public struct B74: Body {
    private static let prefix = "//client/chat/info/group/setting/B74"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B74.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B75Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B75, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B75TH: TypedRouterHandler<B75> {}
public struct B75: Body {
    private static let prefix = "//client/chat/info/group/setting/B75"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B75.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B76Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B76, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B76TH: TypedRouterHandler<B76> {}
public struct B76: Body {
    private static let prefix = "//client/chat/info/group/setting/B76"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B76.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B77Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B77, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B77TH: TypedRouterHandler<B77> {}
public struct B77: Body {
    private static let prefix = "//client/chat/info/group/setting/B77"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B77.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B78Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B78, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B78TH: TypedRouterHandler<B78> {}
public struct B78: Body {
    private static let prefix = "//client/chat/info/group/setting/B78"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B78.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B79Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B79, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B79TH: TypedRouterHandler<B79> {}
public struct B79: Body {
    private static let prefix = "//client/chat/info/group/setting/B79"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B79.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B80Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B80, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B80TH: TypedRouterHandler<B80> {}
public struct B80: Body {
    private static let prefix = "//client/chat/info/group/setting/B80"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B80.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B81Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B81, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B81TH: TypedRouterHandler<B81> {}
public struct B81: Body {
    private static let prefix = "//client/chat/info/group/setting/B81"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B81.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B82Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B82, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B82TH: TypedRouterHandler<B82> {}
public struct B82: Body {
    private static let prefix = "//client/chat/info/group/setting/B82"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B82.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B83Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B83, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B83TH: TypedRouterHandler<B83> {}
public struct B83: Body {
    private static let prefix = "//client/chat/info/group/setting/B83"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B83.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B84Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B84, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B84TH: TypedRouterHandler<B84> {}
public struct B84: Body {
    private static let prefix = "//client/chat/info/group/setting/B84"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B84.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B85Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B85, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B85TH: TypedRouterHandler<B85> {}
public struct B85: Body {
    private static let prefix = "//client/chat/info/group/setting/B85"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B85.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B86Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B86, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B86TH: TypedRouterHandler<B86> {}
public struct B86: Body {
    private static let prefix = "//client/chat/info/group/setting/B86"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B86.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B87Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B87, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B87TH: TypedRouterHandler<B87> {}
public struct B87: Body {
    private static let prefix = "//client/chat/info/group/setting/B87"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B87.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B88Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B88, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B88TH: TypedRouterHandler<B88> {}
public struct B88: Body {
    private static let prefix = "//client/chat/info/group/setting/B88"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B88.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B89Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B89, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B89TH: TypedRouterHandler<B89> {}
public struct B89: Body {
    private static let prefix = "//client/chat/info/group/setting/B89"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B89.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B90Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B90, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B90TH: TypedRouterHandler<B90> {}
public struct B90: Body {
    private static let prefix = "//client/chat/info/group/setting/B90"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B90.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B91Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B91, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B91TH: TypedRouterHandler<B91> {}
public struct B91: Body {
    private static let prefix = "//client/chat/info/group/setting/B91"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B91.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B92Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B92, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B92TH: TypedRouterHandler<B92> {}
public struct B92: Body {
    private static let prefix = "//client/chat/info/group/setting/B92"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B92.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B93Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B93, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B93TH: TypedRouterHandler<B93> {}
public struct B93: Body {
    private static let prefix = "//client/chat/info/group/setting/B93"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B93.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B94Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B94, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B94TH: TypedRouterHandler<B94> {}
public struct B94: Body {
    private static let prefix = "//client/chat/info/group/setting/B94"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B94.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B95Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B95, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B95TH: TypedRouterHandler<B95> {}
public struct B95: Body {
    private static let prefix = "//client/chat/info/group/setting/B95"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B95.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B96Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B96, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B96TH: TypedRouterHandler<B96> {}
public struct B96: Body {
    private static let prefix = "//client/chat/info/group/setting/B96"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B96.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B97Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B97, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B97TH: TypedRouterHandler<B97> {}
public struct B97: Body {
    private static let prefix = "//client/chat/info/group/setting/B97"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B97.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B98Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B98, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B98TH: TypedRouterHandler<B98> {}
public struct B98: Body {
    private static let prefix = "//client/chat/info/group/setting/B98"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B98.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B99Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B99, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B99TH: TypedRouterHandler<B99> {}
public struct B99: Body {
    private static let prefix = "//client/chat/info/group/setting/B99"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B99.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B100Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B100, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B100TH: TypedRouterHandler<B100> {}
public struct B100: Body {
    private static let prefix = "//client/chat/info/group/setting/B100"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B100.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B101Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B101, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B101TH: TypedRouterHandler<B101> {}
public struct B101: Body {
    private static let prefix = "//client/chat/info/group/setting/B101"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B101.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B102Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B102, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B102TH: TypedRouterHandler<B102> {}
public struct B102: Body {
    private static let prefix = "//client/chat/info/group/setting/B102"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B102.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B103Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B103, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B103TH: TypedRouterHandler<B103> {}
public struct B103: Body {
    private static let prefix = "//client/chat/info/group/setting/B103"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B103.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B104Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B104, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B104TH: TypedRouterHandler<B104> {}
public struct B104: Body {
    private static let prefix = "//client/chat/info/group/setting/B104"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B104.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B105Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B105, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B105TH: TypedRouterHandler<B105> {}
public struct B105: Body {
    private static let prefix = "//client/chat/info/group/setting/B105"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B105.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B106Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B106, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B106TH: TypedRouterHandler<B106> {}
public struct B106: Body {
    private static let prefix = "//client/chat/info/group/setting/B106"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B106.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B107Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B107, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B107TH: TypedRouterHandler<B107> {}
public struct B107: Body {
    private static let prefix = "//client/chat/info/group/setting/B107"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B107.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B108Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B108, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B108TH: TypedRouterHandler<B108> {}
public struct B108: Body {
    private static let prefix = "//client/chat/info/group/setting/B108"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B108.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B109Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B109, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B109TH: TypedRouterHandler<B109> {}
public struct B109: Body {
    private static let prefix = "//client/chat/info/group/setting/B109"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B109.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B110Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B110, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B110TH: TypedRouterHandler<B110> {}
public struct B110: Body {
    private static let prefix = "//client/chat/info/group/setting/B110"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B110.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B111Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B111, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B111TH: TypedRouterHandler<B111> {}
public struct B111: Body {
    private static let prefix = "//client/chat/info/group/setting/B111"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B111.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B112Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B112, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B112TH: TypedRouterHandler<B112> {}
public struct B112: Body {
    private static let prefix = "//client/chat/info/group/setting/B112"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B112.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B113Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B113, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B113TH: TypedRouterHandler<B113> {}
public struct B113: Body {
    private static let prefix = "//client/chat/info/group/setting/B113"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B113.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B114Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B114, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B114TH: TypedRouterHandler<B114> {}
public struct B114: Body {
    private static let prefix = "//client/chat/info/group/setting/B114"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B114.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B115Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B115, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B115TH: TypedRouterHandler<B115> {}
public struct B115: Body {
    private static let prefix = "//client/chat/info/group/setting/B115"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B115.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B116Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B116, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B116TH: TypedRouterHandler<B116> {}
public struct B116: Body {
    private static let prefix = "//client/chat/info/group/setting/B116"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B116.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B117Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B117, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B117TH: TypedRouterHandler<B117> {}
public struct B117: Body {
    private static let prefix = "//client/chat/info/group/setting/B117"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B117.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B118Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B118, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B118TH: TypedRouterHandler<B118> {}
public struct B118: Body {
    private static let prefix = "//client/chat/info/group/setting/B118"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B118.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B119Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B119, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B119TH: TypedRouterHandler<B119> {}
public struct B119: Body {
    private static let prefix = "//client/chat/info/group/setting/B119"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B119.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B120Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B120, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B120TH: TypedRouterHandler<B120> {}
public struct B120: Body {
    private static let prefix = "//client/chat/info/group/setting/B120"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B120.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B121Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B121, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B121TH: TypedRouterHandler<B121> {}
public struct B121: Body {
    private static let prefix = "//client/chat/info/group/setting/B121"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B121.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B122Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B122, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B122TH: TypedRouterHandler<B122> {}
public struct B122: Body {
    private static let prefix = "//client/chat/info/group/setting/B122"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B122.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B123Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B123, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B123TH: TypedRouterHandler<B123> {}
public struct B123: Body {
    private static let prefix = "//client/chat/info/group/setting/B123"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B123.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B124Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B124, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B124TH: TypedRouterHandler<B124> {}
public struct B124: Body {
    private static let prefix = "//client/chat/info/group/setting/B124"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B124.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B125Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B125, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B125TH: TypedRouterHandler<B125> {}
public struct B125: Body {
    private static let prefix = "//client/chat/info/group/setting/B125"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B125.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B126Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B126, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B126TH: TypedRouterHandler<B126> {}
public struct B126: Body {
    private static let prefix = "//client/chat/info/group/setting/B126"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B126.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B127Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B127, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B127TH: TypedRouterHandler<B127> {}
public struct B127: Body {
    private static let prefix = "//client/chat/info/group/setting/B127"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B127.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B128Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B128, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B128TH: TypedRouterHandler<B128> {}
public struct B128: Body {
    private static let prefix = "//client/chat/info/group/setting/B128"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B128.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B129Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B129, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B129TH: TypedRouterHandler<B129> {}
public struct B129: Body {
    private static let prefix = "//client/chat/info/group/setting/B129"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B129.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B130Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B130, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B130TH: TypedRouterHandler<B130> {}
public struct B130: Body {
    private static let prefix = "//client/chat/info/group/setting/B130"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B130.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B131Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B131, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B131TH: TypedRouterHandler<B131> {}
public struct B131: Body {
    private static let prefix = "//client/chat/info/group/setting/B131"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B131.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B132Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B132, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B132TH: TypedRouterHandler<B132> {}
public struct B132: Body {
    private static let prefix = "//client/chat/info/group/setting/B132"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B132.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B133Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B133, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B133TH: TypedRouterHandler<B133> {}
public struct B133: Body {
    private static let prefix = "//client/chat/info/group/setting/B133"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B133.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B134Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B134, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B134TH: TypedRouterHandler<B134> {}
public struct B134: Body {
    private static let prefix = "//client/chat/info/group/setting/B134"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B134.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B135Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B135, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B135TH: TypedRouterHandler<B135> {}
public struct B135: Body {
    private static let prefix = "//client/chat/info/group/setting/B135"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B135.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B136Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B136, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B136TH: TypedRouterHandler<B136> {}
public struct B136: Body {
    private static let prefix = "//client/chat/info/group/setting/B136"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B136.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B137Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B137, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B137TH: TypedRouterHandler<B137> {}
public struct B137: Body {
    private static let prefix = "//client/chat/info/group/setting/B137"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B137.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B138Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B138, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B138TH: TypedRouterHandler<B138> {}
public struct B138: Body {
    private static let prefix = "//client/chat/info/group/setting/B138"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B138.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B139Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B139, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B139TH: TypedRouterHandler<B139> {}
public struct B139: Body {
    private static let prefix = "//client/chat/info/group/setting/B139"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B139.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B140Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B140, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B140TH: TypedRouterHandler<B140> {}
public struct B140: Body {
    private static let prefix = "//client/chat/info/group/setting/B140"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B140.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B141Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B141, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B141TH: TypedRouterHandler<B141> {}
public struct B141: Body {
    private static let prefix = "//client/chat/info/group/setting/B141"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B141.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B142Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B142, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B142TH: TypedRouterHandler<B142> {}
public struct B142: Body {
    private static let prefix = "//client/chat/info/group/setting/B142"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B142.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B143Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B143, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B143TH: TypedRouterHandler<B143> {}
public struct B143: Body {
    private static let prefix = "//client/chat/info/group/setting/B143"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B143.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B144Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B144, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B144TH: TypedRouterHandler<B144> {}
public struct B144: Body {
    private static let prefix = "//client/chat/info/group/setting/B144"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B144.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B145Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B145, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B145TH: TypedRouterHandler<B145> {}
public struct B145: Body {
    private static let prefix = "//client/chat/info/group/setting/B145"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B145.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B146Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B146, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B146TH: TypedRouterHandler<B146> {}
public struct B146: Body {
    private static let prefix = "//client/chat/info/group/setting/B146"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B146.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B147Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B147, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B147TH: TypedRouterHandler<B147> {}
public struct B147: Body {
    private static let prefix = "//client/chat/info/group/setting/B147"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B147.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B148Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B148, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B148TH: TypedRouterHandler<B148> {}
public struct B148: Body {
    private static let prefix = "//client/chat/info/group/setting/B148"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B148.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B149Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B149, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B149TH: TypedRouterHandler<B149> {}
public struct B149: Body {
    private static let prefix = "//client/chat/info/group/setting/B149"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B149.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B150Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B150, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B150TH: TypedRouterHandler<B150> {}
public struct B150: Body {
    private static let prefix = "//client/chat/info/group/setting/B150"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B150.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B151Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B151, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B151TH: TypedRouterHandler<B151> {}
public struct B151: Body {
    private static let prefix = "//client/chat/info/group/setting/B151"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B151.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B152Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B152, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B152TH: TypedRouterHandler<B152> {}
public struct B152: Body {
    private static let prefix = "//client/chat/info/group/setting/B152"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B152.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B153Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B153, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B153TH: TypedRouterHandler<B153> {}
public struct B153: Body {
    private static let prefix = "//client/chat/info/group/setting/B153"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B153.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B154Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B154, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B154TH: TypedRouterHandler<B154> {}
public struct B154: Body {
    private static let prefix = "//client/chat/info/group/setting/B154"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B154.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B155Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B155, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B155TH: TypedRouterHandler<B155> {}
public struct B155: Body {
    private static let prefix = "//client/chat/info/group/setting/B155"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B155.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B156Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B156, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B156TH: TypedRouterHandler<B156> {}
public struct B156: Body {
    private static let prefix = "//client/chat/info/group/setting/B156"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B156.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B157Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B157, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B157TH: TypedRouterHandler<B157> {}
public struct B157: Body {
    private static let prefix = "//client/chat/info/group/setting/B157"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B157.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B158Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B158, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B158TH: TypedRouterHandler<B158> {}
public struct B158: Body {
    private static let prefix = "//client/chat/info/group/setting/B158"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B158.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B159Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B159, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B159TH: TypedRouterHandler<B159> {}
public struct B159: Body {
    private static let prefix = "//client/chat/info/group/setting/B159"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B159.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B160Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B160, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B160TH: TypedRouterHandler<B160> {}
public struct B160: Body {
    private static let prefix = "//client/chat/info/group/setting/B160"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B160.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B161Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B161, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B161TH: TypedRouterHandler<B161> {}
public struct B161: Body {
    private static let prefix = "//client/chat/info/group/setting/B161"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B161.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B162Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B162, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B162TH: TypedRouterHandler<B162> {}
public struct B162: Body {
    private static let prefix = "//client/chat/info/group/setting/B162"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B162.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B163Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B163, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B163TH: TypedRouterHandler<B163> {}
public struct B163: Body {
    private static let prefix = "//client/chat/info/group/setting/B163"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B163.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B164Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B164, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B164TH: TypedRouterHandler<B164> {}
public struct B164: Body {
    private static let prefix = "//client/chat/info/group/setting/B164"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B164.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B165Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B165, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B165TH: TypedRouterHandler<B165> {}
public struct B165: Body {
    private static let prefix = "//client/chat/info/group/setting/B165"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B165.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B166Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B166, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B166TH: TypedRouterHandler<B166> {}
public struct B166: Body {
    private static let prefix = "//client/chat/info/group/setting/B166"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B166.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B167Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B167, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B167TH: TypedRouterHandler<B167> {}
public struct B167: Body {
    private static let prefix = "//client/chat/info/group/setting/B167"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B167.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B168Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B168, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B168TH: TypedRouterHandler<B168> {}
public struct B168: Body {
    private static let prefix = "//client/chat/info/group/setting/B168"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B168.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B169Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B169, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B169TH: TypedRouterHandler<B169> {}
public struct B169: Body {
    private static let prefix = "//client/chat/info/group/setting/B169"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B169.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B170Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B170, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B170TH: TypedRouterHandler<B170> {}
public struct B170: Body {
    private static let prefix = "//client/chat/info/group/setting/B170"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B170.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B171Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B171, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B171TH: TypedRouterHandler<B171> {}
public struct B171: Body {
    private static let prefix = "//client/chat/info/group/setting/B171"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B171.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B172Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B172, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B172TH: TypedRouterHandler<B172> {}
public struct B172: Body {
    private static let prefix = "//client/chat/info/group/setting/B172"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B172.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B173Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B173, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B173TH: TypedRouterHandler<B173> {}
public struct B173: Body {
    private static let prefix = "//client/chat/info/group/setting/B173"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B173.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B174Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B174, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B174TH: TypedRouterHandler<B174> {}
public struct B174: Body {
    private static let prefix = "//client/chat/info/group/setting/B174"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B174.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B175Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B175, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B175TH: TypedRouterHandler<B175> {}
public struct B175: Body {
    private static let prefix = "//client/chat/info/group/setting/B175"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B175.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B176Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B176, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B176TH: TypedRouterHandler<B176> {}
public struct B176: Body {
    private static let prefix = "//client/chat/info/group/setting/B176"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B176.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B177Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B177, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B177TH: TypedRouterHandler<B177> {}
public struct B177: Body {
    private static let prefix = "//client/chat/info/group/setting/B177"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B177.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B178Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B178, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B178TH: TypedRouterHandler<B178> {}
public struct B178: Body {
    private static let prefix = "//client/chat/info/group/setting/B178"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B178.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B179Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B179, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B179TH: TypedRouterHandler<B179> {}
public struct B179: Body {
    private static let prefix = "//client/chat/info/group/setting/B179"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B179.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B180Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B180, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B180TH: TypedRouterHandler<B180> {}
public struct B180: Body {
    private static let prefix = "//client/chat/info/group/setting/B180"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B180.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B181Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B181, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B181TH: TypedRouterHandler<B181> {}
public struct B181: Body {
    private static let prefix = "//client/chat/info/group/setting/B181"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B181.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B182Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B182, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B182TH: TypedRouterHandler<B182> {}
public struct B182: Body {
    private static let prefix = "//client/chat/info/group/setting/B182"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B182.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B183Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B183, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B183TH: TypedRouterHandler<B183> {}
public struct B183: Body {
    private static let prefix = "//client/chat/info/group/setting/B183"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B183.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B184Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B184, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B184TH: TypedRouterHandler<B184> {}
public struct B184: Body {
    private static let prefix = "//client/chat/info/group/setting/B184"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B184.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B185Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B185, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B185TH: TypedRouterHandler<B185> {}
public struct B185: Body {
    private static let prefix = "//client/chat/info/group/setting/B185"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B185.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B186Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B186, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B186TH: TypedRouterHandler<B186> {}
public struct B186: Body {
    private static let prefix = "//client/chat/info/group/setting/B186"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B186.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B187Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B187, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B187TH: TypedRouterHandler<B187> {}
public struct B187: Body {
    private static let prefix = "//client/chat/info/group/setting/B187"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B187.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B188Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B188, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B188TH: TypedRouterHandler<B188> {}
public struct B188: Body {
    private static let prefix = "//client/chat/info/group/setting/B188"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B188.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B189Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B189, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B189TH: TypedRouterHandler<B189> {}
public struct B189: Body {
    private static let prefix = "//client/chat/info/group/setting/B189"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B189.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B190Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B190, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B190TH: TypedRouterHandler<B190> {}
public struct B190: Body {
    private static let prefix = "//client/chat/info/group/setting/B190"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B190.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B191Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B191, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B191TH: TypedRouterHandler<B191> {}
public struct B191: Body {
    private static let prefix = "//client/chat/info/group/setting/B191"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B191.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B192Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B192, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B192TH: TypedRouterHandler<B192> {}
public struct B192: Body {
    private static let prefix = "//client/chat/info/group/setting/B192"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B192.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B193Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B193, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B193TH: TypedRouterHandler<B193> {}
public struct B193: Body {
    private static let prefix = "//client/chat/info/group/setting/B193"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B193.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B194Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B194, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B194TH: TypedRouterHandler<B194> {}
public struct B194: Body {
    private static let prefix = "//client/chat/info/group/setting/B194"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B194.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B195Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B195, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B195TH: TypedRouterHandler<B195> {}
public struct B195: Body {
    private static let prefix = "//client/chat/info/group/setting/B195"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B195.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B196Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B196, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B196TH: TypedRouterHandler<B196> {}
public struct B196: Body {
    private static let prefix = "//client/chat/info/group/setting/B196"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B196.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B197Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B197, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B197TH: TypedRouterHandler<B197> {}
public struct B197: Body {
    private static let prefix = "//client/chat/info/group/setting/B197"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B197.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B198Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B198, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B198TH: TypedRouterHandler<B198> {}
public struct B198: Body {
    private static let prefix = "//client/chat/info/group/setting/B198"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B198.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B199Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B199, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B199TH: TypedRouterHandler<B199> {}
public struct B199: Body {
    private static let prefix = "//client/chat/info/group/setting/B199"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B199.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B200Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B200, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B200TH: TypedRouterHandler<B200> {}
public struct B200: Body {
    private static let prefix = "//client/chat/info/group/setting/B200"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B200.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B201Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B201, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B201TH: TypedRouterHandler<B201> {}
public struct B201: Body {
    private static let prefix = "//client/chat/info/group/setting/B201"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B201.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B202Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B202, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B202TH: TypedRouterHandler<B202> {}
public struct B202: Body {
    private static let prefix = "//client/chat/info/group/setting/B202"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B202.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B203Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B203, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B203TH: TypedRouterHandler<B203> {}
public struct B203: Body {
    private static let prefix = "//client/chat/info/group/setting/B203"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B203.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B204Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B204, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B204TH: TypedRouterHandler<B204> {}
public struct B204: Body {
    private static let prefix = "//client/chat/info/group/setting/B204"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B204.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B205Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B205, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B205TH: TypedRouterHandler<B205> {}
public struct B205: Body {
    private static let prefix = "//client/chat/info/group/setting/B205"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B205.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B206Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B206, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B206TH: TypedRouterHandler<B206> {}
public struct B206: Body {
    private static let prefix = "//client/chat/info/group/setting/B206"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B206.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B207Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B207, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B207TH: TypedRouterHandler<B207> {}
public struct B207: Body {
    private static let prefix = "//client/chat/info/group/setting/B207"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B207.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B208Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B208, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B208TH: TypedRouterHandler<B208> {}
public struct B208: Body {
    private static let prefix = "//client/chat/info/group/setting/B208"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B208.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B209Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B209, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B209TH: TypedRouterHandler<B209> {}
public struct B209: Body {
    private static let prefix = "//client/chat/info/group/setting/B209"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B209.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B210Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B210, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B210TH: TypedRouterHandler<B210> {}
public struct B210: Body {
    private static let prefix = "//client/chat/info/group/setting/B210"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B210.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B211Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B211, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B211TH: TypedRouterHandler<B211> {}
public struct B211: Body {
    private static let prefix = "//client/chat/info/group/setting/B211"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B211.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B212Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B212, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B212TH: TypedRouterHandler<B212> {}
public struct B212: Body {
    private static let prefix = "//client/chat/info/group/setting/B212"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B212.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B213Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B213, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B213TH: TypedRouterHandler<B213> {}
public struct B213: Body {
    private static let prefix = "//client/chat/info/group/setting/B213"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B213.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B214Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B214, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B214TH: TypedRouterHandler<B214> {}
public struct B214: Body {
    private static let prefix = "//client/chat/info/group/setting/B214"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B214.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B215Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B215, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B215TH: TypedRouterHandler<B215> {}
public struct B215: Body {
    private static let prefix = "//client/chat/info/group/setting/B215"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B215.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B216Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B216, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B216TH: TypedRouterHandler<B216> {}
public struct B216: Body {
    private static let prefix = "//client/chat/info/group/setting/B216"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B216.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B217Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B217, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B217TH: TypedRouterHandler<B217> {}
public struct B217: Body {
    private static let prefix = "//client/chat/info/group/setting/B217"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B217.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B218Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B218, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B218TH: TypedRouterHandler<B218> {}
public struct B218: Body {
    private static let prefix = "//client/chat/info/group/setting/B218"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B218.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B219Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B219, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B219TH: TypedRouterHandler<B219> {}
public struct B219: Body {
    private static let prefix = "//client/chat/info/group/setting/B219"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B219.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B220Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B220, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B220TH: TypedRouterHandler<B220> {}
public struct B220: Body {
    private static let prefix = "//client/chat/info/group/setting/B220"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B220.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B221Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B221, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B221TH: TypedRouterHandler<B221> {}
public struct B221: Body {
    private static let prefix = "//client/chat/info/group/setting/B221"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B221.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B222Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B222, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B222TH: TypedRouterHandler<B222> {}
public struct B222: Body {
    private static let prefix = "//client/chat/info/group/setting/B222"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B222.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B223Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B223, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B223TH: TypedRouterHandler<B223> {}
public struct B223: Body {
    private static let prefix = "//client/chat/info/group/setting/B223"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B223.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B224Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B224, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B224TH: TypedRouterHandler<B224> {}
public struct B224: Body {
    private static let prefix = "//client/chat/info/group/setting/B224"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B224.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B225Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B225, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B225TH: TypedRouterHandler<B225> {}
public struct B225: Body {
    private static let prefix = "//client/chat/info/group/setting/B225"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B225.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B226Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B226, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B226TH: TypedRouterHandler<B226> {}
public struct B226: Body {
    private static let prefix = "//client/chat/info/group/setting/B226"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B226.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B227Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B227, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B227TH: TypedRouterHandler<B227> {}
public struct B227: Body {
    private static let prefix = "//client/chat/info/group/setting/B227"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B227.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B228Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B228, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B228TH: TypedRouterHandler<B228> {}
public struct B228: Body {
    private static let prefix = "//client/chat/info/group/setting/B228"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B228.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B229Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B229, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B229TH: TypedRouterHandler<B229> {}
public struct B229: Body {
    private static let prefix = "//client/chat/info/group/setting/B229"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B229.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B230Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B230, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B230TH: TypedRouterHandler<B230> {}
public struct B230: Body {
    private static let prefix = "//client/chat/info/group/setting/B230"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B230.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B231Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B231, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B231TH: TypedRouterHandler<B231> {}
public struct B231: Body {
    private static let prefix = "//client/chat/info/group/setting/B231"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B231.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B232Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B232, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B232TH: TypedRouterHandler<B232> {}
public struct B232: Body {
    private static let prefix = "//client/chat/info/group/setting/B232"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B232.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B233Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B233, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B233TH: TypedRouterHandler<B233> {}
public struct B233: Body {
    private static let prefix = "//client/chat/info/group/setting/B233"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B233.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B234Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B234, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B234TH: TypedRouterHandler<B234> {}
public struct B234: Body {
    private static let prefix = "//client/chat/info/group/setting/B234"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B234.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B235Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B235, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B235TH: TypedRouterHandler<B235> {}
public struct B235: Body {
    private static let prefix = "//client/chat/info/group/setting/B235"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B235.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B236Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B236, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B236TH: TypedRouterHandler<B236> {}
public struct B236: Body {
    private static let prefix = "//client/chat/info/group/setting/B236"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B236.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B237Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B237, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B237TH: TypedRouterHandler<B237> {}
public struct B237: Body {
    private static let prefix = "//client/chat/info/group/setting/B237"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B237.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B238Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B238, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B238TH: TypedRouterHandler<B238> {}
public struct B238: Body {
    private static let prefix = "//client/chat/info/group/setting/B238"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B238.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B239Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B239, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B239TH: TypedRouterHandler<B239> {}
public struct B239: Body {
    private static let prefix = "//client/chat/info/group/setting/B239"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B239.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B240Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B240, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B240TH: TypedRouterHandler<B240> {}
public struct B240: Body {
    private static let prefix = "//client/chat/info/group/setting/B240"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B240.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B241Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B241, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B241TH: TypedRouterHandler<B241> {}
public struct B241: Body {
    private static let prefix = "//client/chat/info/group/setting/B241"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B241.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B242Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B242, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B242TH: TypedRouterHandler<B242> {}
public struct B242: Body {
    private static let prefix = "//client/chat/info/group/setting/B242"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B242.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B243Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B243, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B243TH: TypedRouterHandler<B243> {}
public struct B243: Body {
    private static let prefix = "//client/chat/info/group/setting/B243"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B243.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B244Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B244, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B244TH: TypedRouterHandler<B244> {}
public struct B244: Body {
    private static let prefix = "//client/chat/info/group/setting/B244"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B244.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B245Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B245, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B245TH: TypedRouterHandler<B245> {}
public struct B245: Body {
    private static let prefix = "//client/chat/info/group/setting/B245"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B245.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B246Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B246, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B246TH: TypedRouterHandler<B246> {}
public struct B246: Body {
    private static let prefix = "//client/chat/info/group/setting/B246"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B246.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B247Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B247, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B247TH: TypedRouterHandler<B247> {}
public struct B247: Body {
    private static let prefix = "//client/chat/info/group/setting/B247"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B247.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B248Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B248, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B248TH: TypedRouterHandler<B248> {}
public struct B248: Body {
    private static let prefix = "//client/chat/info/group/setting/B248"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B248.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B249Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B249, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B249TH: TypedRouterHandler<B249> {}
public struct B249: Body {
    private static let prefix = "//client/chat/info/group/setting/B249"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B249.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B250Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B250, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B250TH: TypedRouterHandler<B250> {}
public struct B250: Body {
    private static let prefix = "//client/chat/info/group/setting/B250"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B250.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B251Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B251, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B251TH: TypedRouterHandler<B251> {}
public struct B251: Body {
    private static let prefix = "//client/chat/info/group/setting/B251"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B251.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B252Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B252, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B252TH: TypedRouterHandler<B252> {}
public struct B252: Body {
    private static let prefix = "//client/chat/info/group/setting/B252"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B252.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B253Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B253, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B253TH: TypedRouterHandler<B253> {}
public struct B253: Body {
    private static let prefix = "//client/chat/info/group/setting/B253"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B253.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B254Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B254, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B254TH: TypedRouterHandler<B254> {}
public struct B254: Body {
    private static let prefix = "//client/chat/info/group/setting/B254"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B254.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B255Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B255, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B255TH: TypedRouterHandler<B255> {}
public struct B255: Body {
    private static let prefix = "//client/chat/info/group/setting/B255"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B255.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B256Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B256, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B256TH: TypedRouterHandler<B256> {}
public struct B256: Body {
    private static let prefix = "//client/chat/info/group/setting/B256"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B256.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B257Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B257, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B257TH: TypedRouterHandler<B257> {}
public struct B257: Body {
    private static let prefix = "//client/chat/info/group/setting/B257"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B257.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B258Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B258, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B258TH: TypedRouterHandler<B258> {}
public struct B258: Body {
    private static let prefix = "//client/chat/info/group/setting/B258"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B258.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B259Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B259, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B259TH: TypedRouterHandler<B259> {}
public struct B259: Body {
    private static let prefix = "//client/chat/info/group/setting/B259"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B259.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B260Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B260, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B260TH: TypedRouterHandler<B260> {}
public struct B260: Body {
    private static let prefix = "//client/chat/info/group/setting/B260"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B260.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B261Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B261, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B261TH: TypedRouterHandler<B261> {}
public struct B261: Body {
    private static let prefix = "//client/chat/info/group/setting/B261"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B261.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B262Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B262, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B262TH: TypedRouterHandler<B262> {}
public struct B262: Body {
    private static let prefix = "//client/chat/info/group/setting/B262"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B262.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B263Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B263, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B263TH: TypedRouterHandler<B263> {}
public struct B263: Body {
    private static let prefix = "//client/chat/info/group/setting/B263"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B263.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B264Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B264, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B264TH: TypedRouterHandler<B264> {}
public struct B264: Body {
    private static let prefix = "//client/chat/info/group/setting/B264"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B264.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B265Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B265, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B265TH: TypedRouterHandler<B265> {}
public struct B265: Body {
    private static let prefix = "//client/chat/info/group/setting/B265"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B265.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B266Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B266, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B266TH: TypedRouterHandler<B266> {}
public struct B266: Body {
    private static let prefix = "//client/chat/info/group/setting/B266"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B266.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B267Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B267, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B267TH: TypedRouterHandler<B267> {}
public struct B267: Body {
    private static let prefix = "//client/chat/info/group/setting/B267"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B267.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B268Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B268, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B268TH: TypedRouterHandler<B268> {}
public struct B268: Body {
    private static let prefix = "//client/chat/info/group/setting/B268"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B268.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B269Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B269, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B269TH: TypedRouterHandler<B269> {}
public struct B269: Body {
    private static let prefix = "//client/chat/info/group/setting/B269"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B269.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B270Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B270, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B270TH: TypedRouterHandler<B270> {}
public struct B270: Body {
    private static let prefix = "//client/chat/info/group/setting/B270"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B270.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B271Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B271, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B271TH: TypedRouterHandler<B271> {}
public struct B271: Body {
    private static let prefix = "//client/chat/info/group/setting/B271"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B271.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B272Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B272, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B272TH: TypedRouterHandler<B272> {}
public struct B272: Body {
    private static let prefix = "//client/chat/info/group/setting/B272"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B272.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B273Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B273, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B273TH: TypedRouterHandler<B273> {}
public struct B273: Body {
    private static let prefix = "//client/chat/info/group/setting/B273"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B273.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B274Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B274, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B274TH: TypedRouterHandler<B274> {}
public struct B274: Body {
    private static let prefix = "//client/chat/info/group/setting/B274"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B274.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B275Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B275, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B275TH: TypedRouterHandler<B275> {}
public struct B275: Body {
    private static let prefix = "//client/chat/info/group/setting/B275"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B275.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B276Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B276, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B276TH: TypedRouterHandler<B276> {}
public struct B276: Body {
    private static let prefix = "//client/chat/info/group/setting/B276"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B276.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B277Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B277, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B277TH: TypedRouterHandler<B277> {}
public struct B277: Body {
    private static let prefix = "//client/chat/info/group/setting/B277"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B277.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B278Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B278, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B278TH: TypedRouterHandler<B278> {}
public struct B278: Body {
    private static let prefix = "//client/chat/info/group/setting/B278"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B278.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B279Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B279, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B279TH: TypedRouterHandler<B279> {}
public struct B279: Body {
    private static let prefix = "//client/chat/info/group/setting/B279"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B279.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B280Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B280, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B280TH: TypedRouterHandler<B280> {}
public struct B280: Body {
    private static let prefix = "//client/chat/info/group/setting/B280"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B280.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B281Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B281, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B281TH: TypedRouterHandler<B281> {}
public struct B281: Body {
    private static let prefix = "//client/chat/info/group/setting/B281"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B281.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B282Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B282, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B282TH: TypedRouterHandler<B282> {}
public struct B282: Body {
    private static let prefix = "//client/chat/info/group/setting/B282"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B282.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B283Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B283, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B283TH: TypedRouterHandler<B283> {}
public struct B283: Body {
    private static let prefix = "//client/chat/info/group/setting/B283"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B283.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B284Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B284, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B284TH: TypedRouterHandler<B284> {}
public struct B284: Body {
    private static let prefix = "//client/chat/info/group/setting/B284"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B284.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B285Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B285, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B285TH: TypedRouterHandler<B285> {}
public struct B285: Body {
    private static let prefix = "//client/chat/info/group/setting/B285"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B285.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B286Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B286, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B286TH: TypedRouterHandler<B286> {}
public struct B286: Body {
    private static let prefix = "//client/chat/info/group/setting/B286"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B286.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B287Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B287, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B287TH: TypedRouterHandler<B287> {}
public struct B287: Body {
    private static let prefix = "//client/chat/info/group/setting/B287"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B287.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B288Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B288, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B288TH: TypedRouterHandler<B288> {}
public struct B288: Body {
    private static let prefix = "//client/chat/info/group/setting/B288"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B288.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B289Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B289, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B289TH: TypedRouterHandler<B289> {}
public struct B289: Body {
    private static let prefix = "//client/chat/info/group/setting/B289"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B289.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B290Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B290, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B290TH: TypedRouterHandler<B290> {}
public struct B290: Body {
    private static let prefix = "//client/chat/info/group/setting/B290"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B290.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B291Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B291, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B291TH: TypedRouterHandler<B291> {}
public struct B291: Body {
    private static let prefix = "//client/chat/info/group/setting/B291"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B291.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B292Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B292, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B292TH: TypedRouterHandler<B292> {}
public struct B292: Body {
    private static let prefix = "//client/chat/info/group/setting/B292"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B292.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B293Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B293, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B293TH: TypedRouterHandler<B293> {}
public struct B293: Body {
    private static let prefix = "//client/chat/info/group/setting/B293"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B293.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B294Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B294, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B294TH: TypedRouterHandler<B294> {}
public struct B294: Body {
    private static let prefix = "//client/chat/info/group/setting/B294"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B294.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B295Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B295, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B295TH: TypedRouterHandler<B295> {}
public struct B295: Body {
    private static let prefix = "//client/chat/info/group/setting/B295"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B295.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B296Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B296, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B296TH: TypedRouterHandler<B296> {}
public struct B296: Body {
    private static let prefix = "//client/chat/info/group/setting/B296"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B296.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B297Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B297, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B297TH: TypedRouterHandler<B297> {}
public struct B297: Body {
    private static let prefix = "//client/chat/info/group/setting/B297"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B297.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B298Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B298, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B298TH: TypedRouterHandler<B298> {}
public struct B298: Body {
    private static let prefix = "//client/chat/info/group/setting/B298"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B298.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B299Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B299, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B299TH: TypedRouterHandler<B299> {}
public struct B299: Body {
    private static let prefix = "//client/chat/info/group/setting/B299"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B299.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B300Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B300, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B300TH: TypedRouterHandler<B300> {}
public struct B300: Body {
    private static let prefix = "//client/chat/info/group/setting/B300"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B300.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B301Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B301, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B301TH: TypedRouterHandler<B301> {}
public struct B301: Body {
    private static let prefix = "//client/chat/info/group/setting/B301"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B301.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B302Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B302, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B302TH: TypedRouterHandler<B302> {}
public struct B302: Body {
    private static let prefix = "//client/chat/info/group/setting/B302"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B302.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B303Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B303, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B303TH: TypedRouterHandler<B303> {}
public struct B303: Body {
    private static let prefix = "//client/chat/info/group/setting/B303"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B303.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B304Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B304, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B304TH: TypedRouterHandler<B304> {}
public struct B304: Body {
    private static let prefix = "//client/chat/info/group/setting/B304"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B304.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B305Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B305, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B305TH: TypedRouterHandler<B305> {}
public struct B305: Body {
    private static let prefix = "//client/chat/info/group/setting/B305"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B305.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B306Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B306, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B306TH: TypedRouterHandler<B306> {}
public struct B306: Body {
    private static let prefix = "//client/chat/info/group/setting/B306"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B306.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B307Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B307, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B307TH: TypedRouterHandler<B307> {}
public struct B307: Body {
    private static let prefix = "//client/chat/info/group/setting/B307"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B307.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B308Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B308, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B308TH: TypedRouterHandler<B308> {}
public struct B308: Body {
    private static let prefix = "//client/chat/info/group/setting/B308"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B308.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B309Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B309, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B309TH: TypedRouterHandler<B309> {}
public struct B309: Body {
    private static let prefix = "//client/chat/info/group/setting/B309"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B309.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B310Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B310, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B310TH: TypedRouterHandler<B310> {}
public struct B310: Body {
    private static let prefix = "//client/chat/info/group/setting/B310"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B310.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B311Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B311, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B311TH: TypedRouterHandler<B311> {}
public struct B311: Body {
    private static let prefix = "//client/chat/info/group/setting/B311"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B311.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B312Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B312, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B312TH: TypedRouterHandler<B312> {}
public struct B312: Body {
    private static let prefix = "//client/chat/info/group/setting/B312"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B312.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B313Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B313, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B313TH: TypedRouterHandler<B313> {}
public struct B313: Body {
    private static let prefix = "//client/chat/info/group/setting/B313"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B313.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B314Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B314, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B314TH: TypedRouterHandler<B314> {}
public struct B314: Body {
    private static let prefix = "//client/chat/info/group/setting/B314"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B314.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B315Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B315, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B315TH: TypedRouterHandler<B315> {}
public struct B315: Body {
    private static let prefix = "//client/chat/info/group/setting/B315"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B315.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B316Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B316, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B316TH: TypedRouterHandler<B316> {}
public struct B316: Body {
    private static let prefix = "//client/chat/info/group/setting/B316"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B316.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B317Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B317, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B317TH: TypedRouterHandler<B317> {}
public struct B317: Body {
    private static let prefix = "//client/chat/info/group/setting/B317"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B317.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B318Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B318, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B318TH: TypedRouterHandler<B318> {}
public struct B318: Body {
    private static let prefix = "//client/chat/info/group/setting/B318"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B318.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B319Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B319, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B319TH: TypedRouterHandler<B319> {}
public struct B319: Body {
    private static let prefix = "//client/chat/info/group/setting/B319"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B319.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B320Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B320, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B320TH: TypedRouterHandler<B320> {}
public struct B320: Body {
    private static let prefix = "//client/chat/info/group/setting/B320"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B320.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B321Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B321, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B321TH: TypedRouterHandler<B321> {}
public struct B321: Body {
    private static let prefix = "//client/chat/info/group/setting/B321"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B321.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B322Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B322, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B322TH: TypedRouterHandler<B322> {}
public struct B322: Body {
    private static let prefix = "//client/chat/info/group/setting/B322"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B322.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B323Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B323, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B323TH: TypedRouterHandler<B323> {}
public struct B323: Body {
    private static let prefix = "//client/chat/info/group/setting/B323"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B323.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B324Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B324, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B324TH: TypedRouterHandler<B324> {}
public struct B324: Body {
    private static let prefix = "//client/chat/info/group/setting/B324"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B324.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B325Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B325, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B325TH: TypedRouterHandler<B325> {}
public struct B325: Body {
    private static let prefix = "//client/chat/info/group/setting/B325"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B325.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B326Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B326, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B326TH: TypedRouterHandler<B326> {}
public struct B326: Body {
    private static let prefix = "//client/chat/info/group/setting/B326"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B326.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B327Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B327, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B327TH: TypedRouterHandler<B327> {}
public struct B327: Body {
    private static let prefix = "//client/chat/info/group/setting/B327"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B327.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B328Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B328, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B328TH: TypedRouterHandler<B328> {}
public struct B328: Body {
    private static let prefix = "//client/chat/info/group/setting/B328"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B328.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B329Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B329, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B329TH: TypedRouterHandler<B329> {}
public struct B329: Body {
    private static let prefix = "//client/chat/info/group/setting/B329"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B329.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B330Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B330, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B330TH: TypedRouterHandler<B330> {}
public struct B330: Body {
    private static let prefix = "//client/chat/info/group/setting/B330"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B330.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B331Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B331, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B331TH: TypedRouterHandler<B331> {}
public struct B331: Body {
    private static let prefix = "//client/chat/info/group/setting/B331"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B331.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B332Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B332, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B332TH: TypedRouterHandler<B332> {}
public struct B332: Body {
    private static let prefix = "//client/chat/info/group/setting/B332"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B332.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B333Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B333, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B333TH: TypedRouterHandler<B333> {}
public struct B333: Body {
    private static let prefix = "//client/chat/info/group/setting/B333"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B333.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B334Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B334, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B334TH: TypedRouterHandler<B334> {}
public struct B334: Body {
    private static let prefix = "//client/chat/info/group/setting/B334"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B334.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B335Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B335, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B335TH: TypedRouterHandler<B335> {}
public struct B335: Body {
    private static let prefix = "//client/chat/info/group/setting/B335"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B335.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B336Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B336, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B336TH: TypedRouterHandler<B336> {}
public struct B336: Body {
    private static let prefix = "//client/chat/info/group/setting/B336"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B336.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B337Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B337, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B337TH: TypedRouterHandler<B337> {}
public struct B337: Body {
    private static let prefix = "//client/chat/info/group/setting/B337"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B337.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B338Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B338, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B338TH: TypedRouterHandler<B338> {}
public struct B338: Body {
    private static let prefix = "//client/chat/info/group/setting/B338"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B338.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B339Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B339, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B339TH: TypedRouterHandler<B339> {}
public struct B339: Body {
    private static let prefix = "//client/chat/info/group/setting/B339"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B339.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B340Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B340, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B340TH: TypedRouterHandler<B340> {}
public struct B340: Body {
    private static let prefix = "//client/chat/info/group/setting/B340"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B340.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B341Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B341, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B341TH: TypedRouterHandler<B341> {}
public struct B341: Body {
    private static let prefix = "//client/chat/info/group/setting/B341"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B341.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B342Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B342, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B342TH: TypedRouterHandler<B342> {}
public struct B342: Body {
    private static let prefix = "//client/chat/info/group/setting/B342"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B342.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B343Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B343, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B343TH: TypedRouterHandler<B343> {}
public struct B343: Body {
    private static let prefix = "//client/chat/info/group/setting/B343"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B343.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B344Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B344, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B344TH: TypedRouterHandler<B344> {}
public struct B344: Body {
    private static let prefix = "//client/chat/info/group/setting/B344"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B344.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B345Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B345, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B345TH: TypedRouterHandler<B345> {}
public struct B345: Body {
    private static let prefix = "//client/chat/info/group/setting/B345"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B345.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B346Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B346, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B346TH: TypedRouterHandler<B346> {}
public struct B346: Body {
    private static let prefix = "//client/chat/info/group/setting/B346"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B346.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B347Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B347, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B347TH: TypedRouterHandler<B347> {}
public struct B347: Body {
    private static let prefix = "//client/chat/info/group/setting/B347"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B347.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B348Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B348, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B348TH: TypedRouterHandler<B348> {}
public struct B348: Body {
    private static let prefix = "//client/chat/info/group/setting/B348"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B348.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B349Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B349, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B349TH: TypedRouterHandler<B349> {}
public struct B349: Body {
    private static let prefix = "//client/chat/info/group/setting/B349"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B349.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B350Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B350, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B350TH: TypedRouterHandler<B350> {}
public struct B350: Body {
    private static let prefix = "//client/chat/info/group/setting/B350"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B350.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B351Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B351, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B351TH: TypedRouterHandler<B351> {}
public struct B351: Body {
    private static let prefix = "//client/chat/info/group/setting/B351"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B351.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B352Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B352, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B352TH: TypedRouterHandler<B352> {}
public struct B352: Body {
    private static let prefix = "//client/chat/info/group/setting/B352"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B352.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B353Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B353, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B353TH: TypedRouterHandler<B353> {}
public struct B353: Body {
    private static let prefix = "//client/chat/info/group/setting/B353"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B353.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B354Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B354, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B354TH: TypedRouterHandler<B354> {}
public struct B354: Body {
    private static let prefix = "//client/chat/info/group/setting/B354"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B354.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B355Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B355, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B355TH: TypedRouterHandler<B355> {}
public struct B355: Body {
    private static let prefix = "//client/chat/info/group/setting/B355"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B355.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B356Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B356, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B356TH: TypedRouterHandler<B356> {}
public struct B356: Body {
    private static let prefix = "//client/chat/info/group/setting/B356"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B356.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B357Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B357, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B357TH: TypedRouterHandler<B357> {}
public struct B357: Body {
    private static let prefix = "//client/chat/info/group/setting/B357"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B357.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B358Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B358, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B358TH: TypedRouterHandler<B358> {}
public struct B358: Body {
    private static let prefix = "//client/chat/info/group/setting/B358"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B358.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B359Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B359, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B359TH: TypedRouterHandler<B359> {}
public struct B359: Body {
    private static let prefix = "//client/chat/info/group/setting/B359"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B359.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B360Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B360, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B360TH: TypedRouterHandler<B360> {}
public struct B360: Body {
    private static let prefix = "//client/chat/info/group/setting/B360"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B360.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B361Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B361, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B361TH: TypedRouterHandler<B361> {}
public struct B361: Body {
    private static let prefix = "//client/chat/info/group/setting/B361"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B361.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B362Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B362, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B362TH: TypedRouterHandler<B362> {}
public struct B362: Body {
    private static let prefix = "//client/chat/info/group/setting/B362"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B362.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B363Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B363, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B363TH: TypedRouterHandler<B363> {}
public struct B363: Body {
    private static let prefix = "//client/chat/info/group/setting/B363"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B363.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B364Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B364, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B364TH: TypedRouterHandler<B364> {}
public struct B364: Body {
    private static let prefix = "//client/chat/info/group/setting/B364"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B364.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B365Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B365, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B365TH: TypedRouterHandler<B365> {}
public struct B365: Body {
    private static let prefix = "//client/chat/info/group/setting/B365"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B365.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B366Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B366, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B366TH: TypedRouterHandler<B366> {}
public struct B366: Body {
    private static let prefix = "//client/chat/info/group/setting/B366"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B366.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B367Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B367, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B367TH: TypedRouterHandler<B367> {}
public struct B367: Body {
    private static let prefix = "//client/chat/info/group/setting/B367"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B367.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B368Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B368, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B368TH: TypedRouterHandler<B368> {}
public struct B368: Body {
    private static let prefix = "//client/chat/info/group/setting/B368"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B368.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B369Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B369, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B369TH: TypedRouterHandler<B369> {}
public struct B369: Body {
    private static let prefix = "//client/chat/info/group/setting/B369"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B369.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B370Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B370, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B370TH: TypedRouterHandler<B370> {}
public struct B370: Body {
    private static let prefix = "//client/chat/info/group/setting/B370"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B370.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B371Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B371, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B371TH: TypedRouterHandler<B371> {}
public struct B371: Body {
    private static let prefix = "//client/chat/info/group/setting/B371"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B371.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B372Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B372, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B372TH: TypedRouterHandler<B372> {}
public struct B372: Body {
    private static let prefix = "//client/chat/info/group/setting/B372"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B372.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B373Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B373, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B373TH: TypedRouterHandler<B373> {}
public struct B373: Body {
    private static let prefix = "//client/chat/info/group/setting/B373"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B373.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B374Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B374, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B374TH: TypedRouterHandler<B374> {}
public struct B374: Body {
    private static let prefix = "//client/chat/info/group/setting/B374"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B374.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B375Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B375, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B375TH: TypedRouterHandler<B375> {}
public struct B375: Body {
    private static let prefix = "//client/chat/info/group/setting/B375"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B375.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B376Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B376, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B376TH: TypedRouterHandler<B376> {}
public struct B376: Body {
    private static let prefix = "//client/chat/info/group/setting/B376"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B376.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B377Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B377, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B377TH: TypedRouterHandler<B377> {}
public struct B377: Body {
    private static let prefix = "//client/chat/info/group/setting/B377"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B377.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B378Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B378, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B378TH: TypedRouterHandler<B378> {}
public struct B378: Body {
    private static let prefix = "//client/chat/info/group/setting/B378"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B378.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B379Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B379, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B379TH: TypedRouterHandler<B379> {}
public struct B379: Body {
    private static let prefix = "//client/chat/info/group/setting/B379"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B379.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B380Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B380, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B380TH: TypedRouterHandler<B380> {}
public struct B380: Body {
    private static let prefix = "//client/chat/info/group/setting/B380"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B380.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B381Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B381, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B381TH: TypedRouterHandler<B381> {}
public struct B381: Body {
    private static let prefix = "//client/chat/info/group/setting/B381"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B381.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B382Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B382, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B382TH: TypedRouterHandler<B382> {}
public struct B382: Body {
    private static let prefix = "//client/chat/info/group/setting/B382"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B382.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B383Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B383, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B383TH: TypedRouterHandler<B383> {}
public struct B383: Body {
    private static let prefix = "//client/chat/info/group/setting/B383"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B383.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B384Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B384, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B384TH: TypedRouterHandler<B384> {}
public struct B384: Body {
    private static let prefix = "//client/chat/info/group/setting/B384"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B384.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B385Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B385, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B385TH: TypedRouterHandler<B385> {}
public struct B385: Body {
    private static let prefix = "//client/chat/info/group/setting/B385"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B385.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B386Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B386, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B386TH: TypedRouterHandler<B386> {}
public struct B386: Body {
    private static let prefix = "//client/chat/info/group/setting/B386"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B386.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B387Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B387, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B387TH: TypedRouterHandler<B387> {}
public struct B387: Body {
    private static let prefix = "//client/chat/info/group/setting/B387"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B387.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B388Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B388, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B388TH: TypedRouterHandler<B388> {}
public struct B388: Body {
    private static let prefix = "//client/chat/info/group/setting/B388"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B388.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B389Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B389, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B389TH: TypedRouterHandler<B389> {}
public struct B389: Body {
    private static let prefix = "//client/chat/info/group/setting/B389"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B389.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B390Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B390, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B390TH: TypedRouterHandler<B390> {}
public struct B390: Body {
    private static let prefix = "//client/chat/info/group/setting/B390"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B390.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B391Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B391, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B391TH: TypedRouterHandler<B391> {}
public struct B391: Body {
    private static let prefix = "//client/chat/info/group/setting/B391"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B391.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B392Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B392, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B392TH: TypedRouterHandler<B392> {}
public struct B392: Body {
    private static let prefix = "//client/chat/info/group/setting/B392"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B392.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B393Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B393, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B393TH: TypedRouterHandler<B393> {}
public struct B393: Body {
    private static let prefix = "//client/chat/info/group/setting/B393"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B393.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B394Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B394, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B394TH: TypedRouterHandler<B394> {}
public struct B394: Body {
    private static let prefix = "//client/chat/info/group/setting/B394"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B394.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B395Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B395, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B395TH: TypedRouterHandler<B395> {}
public struct B395: Body {
    private static let prefix = "//client/chat/info/group/setting/B395"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B395.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B396Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B396, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B396TH: TypedRouterHandler<B396> {}
public struct B396: Body {
    private static let prefix = "//client/chat/info/group/setting/B396"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B396.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B397Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B397, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B397TH: TypedRouterHandler<B397> {}
public struct B397: Body {
    private static let prefix = "//client/chat/info/group/setting/B397"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B397.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B398Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B398, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B398TH: TypedRouterHandler<B398> {}
public struct B398: Body {
    private static let prefix = "//client/chat/info/group/setting/B398"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B398.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B399Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B399, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B399TH: TypedRouterHandler<B399> {}
public struct B399: Body {
    private static let prefix = "//client/chat/info/group/setting/B399"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B399.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B400Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B400, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B400TH: TypedRouterHandler<B400> {}
public struct B400: Body {
    private static let prefix = "//client/chat/info/group/setting/B400"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B400.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B401Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B401, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B401TH: TypedRouterHandler<B401> {}
public struct B401: Body {
    private static let prefix = "//client/chat/info/group/setting/B401"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B401.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B402Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B402, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B402TH: TypedRouterHandler<B402> {}
public struct B402: Body {
    private static let prefix = "//client/chat/info/group/setting/B402"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B402.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B403Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B403, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B403TH: TypedRouterHandler<B403> {}
public struct B403: Body {
    private static let prefix = "//client/chat/info/group/setting/B403"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B403.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B404Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B404, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B404TH: TypedRouterHandler<B404> {}
public struct B404: Body {
    private static let prefix = "//client/chat/info/group/setting/B404"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B404.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B405Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B405, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B405TH: TypedRouterHandler<B405> {}
public struct B405: Body {
    private static let prefix = "//client/chat/info/group/setting/B405"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B405.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B406Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B406, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B406TH: TypedRouterHandler<B406> {}
public struct B406: Body {
    private static let prefix = "//client/chat/info/group/setting/B406"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B406.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B407Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B407, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B407TH: TypedRouterHandler<B407> {}
public struct B407: Body {
    private static let prefix = "//client/chat/info/group/setting/B407"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B407.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B408Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B408, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B408TH: TypedRouterHandler<B408> {}
public struct B408: Body {
    private static let prefix = "//client/chat/info/group/setting/B408"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B408.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B409Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B409, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B409TH: TypedRouterHandler<B409> {}
public struct B409: Body {
    private static let prefix = "//client/chat/info/group/setting/B409"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B409.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B410Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B410, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B410TH: TypedRouterHandler<B410> {}
public struct B410: Body {
    private static let prefix = "//client/chat/info/group/setting/B410"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B410.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B411Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B411, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B411TH: TypedRouterHandler<B411> {}
public struct B411: Body {
    private static let prefix = "//client/chat/info/group/setting/B411"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B411.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B412Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B412, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B412TH: TypedRouterHandler<B412> {}
public struct B412: Body {
    private static let prefix = "//client/chat/info/group/setting/B412"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B412.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B413Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B413, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B413TH: TypedRouterHandler<B413> {}
public struct B413: Body {
    private static let prefix = "//client/chat/info/group/setting/B413"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B413.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B414Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B414, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B414TH: TypedRouterHandler<B414> {}
public struct B414: Body {
    private static let prefix = "//client/chat/info/group/setting/B414"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B414.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B415Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B415, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B415TH: TypedRouterHandler<B415> {}
public struct B415: Body {
    private static let prefix = "//client/chat/info/group/setting/B415"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B415.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B416Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B416, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B416TH: TypedRouterHandler<B416> {}
public struct B416: Body {
    private static let prefix = "//client/chat/info/group/setting/B416"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B416.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B417Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B417, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B417TH: TypedRouterHandler<B417> {}
public struct B417: Body {
    private static let prefix = "//client/chat/info/group/setting/B417"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B417.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B418Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B418, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B418TH: TypedRouterHandler<B418> {}
public struct B418: Body {
    private static let prefix = "//client/chat/info/group/setting/B418"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B418.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B419Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B419, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B419TH: TypedRouterHandler<B419> {}
public struct B419: Body {
    private static let prefix = "//client/chat/info/group/setting/B419"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B419.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B420Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B420, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B420TH: TypedRouterHandler<B420> {}
public struct B420: Body {
    private static let prefix = "//client/chat/info/group/setting/B420"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B420.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B421Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B421, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B421TH: TypedRouterHandler<B421> {}
public struct B421: Body {
    private static let prefix = "//client/chat/info/group/setting/B421"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B421.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B422Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B422, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B422TH: TypedRouterHandler<B422> {}
public struct B422: Body {
    private static let prefix = "//client/chat/info/group/setting/B422"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B422.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B423Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B423, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B423TH: TypedRouterHandler<B423> {}
public struct B423: Body {
    private static let prefix = "//client/chat/info/group/setting/B423"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B423.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B424Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B424, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B424TH: TypedRouterHandler<B424> {}
public struct B424: Body {
    private static let prefix = "//client/chat/info/group/setting/B424"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B424.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B425Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B425, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B425TH: TypedRouterHandler<B425> {}
public struct B425: Body {
    private static let prefix = "//client/chat/info/group/setting/B425"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B425.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B426Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B426, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B426TH: TypedRouterHandler<B426> {}
public struct B426: Body {
    private static let prefix = "//client/chat/info/group/setting/B426"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B426.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B427Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B427, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B427TH: TypedRouterHandler<B427> {}
public struct B427: Body {
    private static let prefix = "//client/chat/info/group/setting/B427"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B427.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B428Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B428, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B428TH: TypedRouterHandler<B428> {}
public struct B428: Body {
    private static let prefix = "//client/chat/info/group/setting/B428"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B428.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B429Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B429, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B429TH: TypedRouterHandler<B429> {}
public struct B429: Body {
    private static let prefix = "//client/chat/info/group/setting/B429"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B429.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B430Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B430, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B430TH: TypedRouterHandler<B430> {}
public struct B430: Body {
    private static let prefix = "//client/chat/info/group/setting/B430"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B430.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B431Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B431, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B431TH: TypedRouterHandler<B431> {}
public struct B431: Body {
    private static let prefix = "//client/chat/info/group/setting/B431"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B431.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B432Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B432, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B432TH: TypedRouterHandler<B432> {}
public struct B432: Body {
    private static let prefix = "//client/chat/info/group/setting/B432"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B432.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B433Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B433, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B433TH: TypedRouterHandler<B433> {}
public struct B433: Body {
    private static let prefix = "//client/chat/info/group/setting/B433"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B433.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B434Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B434, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B434TH: TypedRouterHandler<B434> {}
public struct B434: Body {
    private static let prefix = "//client/chat/info/group/setting/B434"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B434.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B435Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B435, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B435TH: TypedRouterHandler<B435> {}
public struct B435: Body {
    private static let prefix = "//client/chat/info/group/setting/B435"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B435.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B436Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B436, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B436TH: TypedRouterHandler<B436> {}
public struct B436: Body {
    private static let prefix = "//client/chat/info/group/setting/B436"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B436.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B437Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B437, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B437TH: TypedRouterHandler<B437> {}
public struct B437: Body {
    private static let prefix = "//client/chat/info/group/setting/B437"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B437.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B438Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B438, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B438TH: TypedRouterHandler<B438> {}
public struct B438: Body {
    private static let prefix = "//client/chat/info/group/setting/B438"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B438.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B439Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B439, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B439TH: TypedRouterHandler<B439> {}
public struct B439: Body {
    private static let prefix = "//client/chat/info/group/setting/B439"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B439.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B440Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B440, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B440TH: TypedRouterHandler<B440> {}
public struct B440: Body {
    private static let prefix = "//client/chat/info/group/setting/B440"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B440.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B441Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B441, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B441TH: TypedRouterHandler<B441> {}
public struct B441: Body {
    private static let prefix = "//client/chat/info/group/setting/B441"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B441.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B442Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B442, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B442TH: TypedRouterHandler<B442> {}
public struct B442: Body {
    private static let prefix = "//client/chat/info/group/setting/B442"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B442.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B443Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B443, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B443TH: TypedRouterHandler<B443> {}
public struct B443: Body {
    private static let prefix = "//client/chat/info/group/setting/B443"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B443.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B444Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B444, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B444TH: TypedRouterHandler<B444> {}
public struct B444: Body {
    private static let prefix = "//client/chat/info/group/setting/B444"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B444.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B445Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B445, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B445TH: TypedRouterHandler<B445> {}
public struct B445: Body {
    private static let prefix = "//client/chat/info/group/setting/B445"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B445.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B446Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B446, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B446TH: TypedRouterHandler<B446> {}
public struct B446: Body {
    private static let prefix = "//client/chat/info/group/setting/B446"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B446.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B447Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B447, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B447TH: TypedRouterHandler<B447> {}
public struct B447: Body {
    private static let prefix = "//client/chat/info/group/setting/B447"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B447.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B448Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B448, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B448TH: TypedRouterHandler<B448> {}
public struct B448: Body {
    private static let prefix = "//client/chat/info/group/setting/B448"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B448.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B449Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B449, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B449TH: TypedRouterHandler<B449> {}
public struct B449: Body {
    private static let prefix = "//client/chat/info/group/setting/B449"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B449.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B450Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B450, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B450TH: TypedRouterHandler<B450> {}
public struct B450: Body {
    private static let prefix = "//client/chat/info/group/setting/B450"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B450.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B451Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B451, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B451TH: TypedRouterHandler<B451> {}
public struct B451: Body {
    private static let prefix = "//client/chat/info/group/setting/B451"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B451.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B452Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B452, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B452TH: TypedRouterHandler<B452> {}
public struct B452: Body {
    private static let prefix = "//client/chat/info/group/setting/B452"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B452.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B453Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B453, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B453TH: TypedRouterHandler<B453> {}
public struct B453: Body {
    private static let prefix = "//client/chat/info/group/setting/B453"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B453.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B454Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B454, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B454TH: TypedRouterHandler<B454> {}
public struct B454: Body {
    private static let prefix = "//client/chat/info/group/setting/B454"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B454.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B455Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B455, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B455TH: TypedRouterHandler<B455> {}
public struct B455: Body {
    private static let prefix = "//client/chat/info/group/setting/B455"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B455.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B456Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B456, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B456TH: TypedRouterHandler<B456> {}
public struct B456: Body {
    private static let prefix = "//client/chat/info/group/setting/B456"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B456.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B457Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B457, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B457TH: TypedRouterHandler<B457> {}
public struct B457: Body {
    private static let prefix = "//client/chat/info/group/setting/B457"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B457.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B458Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B458, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B458TH: TypedRouterHandler<B458> {}
public struct B458: Body {
    private static let prefix = "//client/chat/info/group/setting/B458"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B458.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B459Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B459, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B459TH: TypedRouterHandler<B459> {}
public struct B459: Body {
    private static let prefix = "//client/chat/info/group/setting/B459"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B459.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B460Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B460, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B460TH: TypedRouterHandler<B460> {}
public struct B460: Body {
    private static let prefix = "//client/chat/info/group/setting/B460"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B460.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B461Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B461, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B461TH: TypedRouterHandler<B461> {}
public struct B461: Body {
    private static let prefix = "//client/chat/info/group/setting/B461"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B461.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B462Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B462, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B462TH: TypedRouterHandler<B462> {}
public struct B462: Body {
    private static let prefix = "//client/chat/info/group/setting/B462"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B462.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B463Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B463, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B463TH: TypedRouterHandler<B463> {}
public struct B463: Body {
    private static let prefix = "//client/chat/info/group/setting/B463"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B463.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B464Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B464, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B464TH: TypedRouterHandler<B464> {}
public struct B464: Body {
    private static let prefix = "//client/chat/info/group/setting/B464"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B464.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B465Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B465, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B465TH: TypedRouterHandler<B465> {}
public struct B465: Body {
    private static let prefix = "//client/chat/info/group/setting/B465"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B465.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B466Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B466, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B466TH: TypedRouterHandler<B466> {}
public struct B466: Body {
    private static let prefix = "//client/chat/info/group/setting/B466"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B466.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B467Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B467, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B467TH: TypedRouterHandler<B467> {}
public struct B467: Body {
    private static let prefix = "//client/chat/info/group/setting/B467"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B467.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B468Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B468, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B468TH: TypedRouterHandler<B468> {}
public struct B468: Body {
    private static let prefix = "//client/chat/info/group/setting/B468"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B468.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B469Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B469, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B469TH: TypedRouterHandler<B469> {}
public struct B469: Body {
    private static let prefix = "//client/chat/info/group/setting/B469"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B469.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B470Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B470, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B470TH: TypedRouterHandler<B470> {}
public struct B470: Body {
    private static let prefix = "//client/chat/info/group/setting/B470"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B470.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B471Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B471, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B471TH: TypedRouterHandler<B471> {}
public struct B471: Body {
    private static let prefix = "//client/chat/info/group/setting/B471"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B471.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B472Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B472, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B472TH: TypedRouterHandler<B472> {}
public struct B472: Body {
    private static let prefix = "//client/chat/info/group/setting/B472"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B472.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B473Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B473, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B473TH: TypedRouterHandler<B473> {}
public struct B473: Body {
    private static let prefix = "//client/chat/info/group/setting/B473"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B473.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B474Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B474, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B474TH: TypedRouterHandler<B474> {}
public struct B474: Body {
    private static let prefix = "//client/chat/info/group/setting/B474"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B474.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B475Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B475, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B475TH: TypedRouterHandler<B475> {}
public struct B475: Body {
    private static let prefix = "//client/chat/info/group/setting/B475"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B475.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B476Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B476, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B476TH: TypedRouterHandler<B476> {}
public struct B476: Body {
    private static let prefix = "//client/chat/info/group/setting/B476"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B476.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B477Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B477, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B477TH: TypedRouterHandler<B477> {}
public struct B477: Body {
    private static let prefix = "//client/chat/info/group/setting/B477"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B477.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B478Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B478, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B478TH: TypedRouterHandler<B478> {}
public struct B478: Body {
    private static let prefix = "//client/chat/info/group/setting/B478"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B478.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B479Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B479, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B479TH: TypedRouterHandler<B479> {}
public struct B479: Body {
    private static let prefix = "//client/chat/info/group/setting/B479"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B479.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B480Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B480, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B480TH: TypedRouterHandler<B480> {}
public struct B480: Body {
    private static let prefix = "//client/chat/info/group/setting/B480"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B480.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B481Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B481, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B481TH: TypedRouterHandler<B481> {}
public struct B481: Body {
    private static let prefix = "//client/chat/info/group/setting/B481"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B481.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B482Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B482, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B482TH: TypedRouterHandler<B482> {}
public struct B482: Body {
    private static let prefix = "//client/chat/info/group/setting/B482"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B482.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B483Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B483, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B483TH: TypedRouterHandler<B483> {}
public struct B483: Body {
    private static let prefix = "//client/chat/info/group/setting/B483"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B483.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B484Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B484, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B484TH: TypedRouterHandler<B484> {}
public struct B484: Body {
    private static let prefix = "//client/chat/info/group/setting/B484"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B484.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B485Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B485, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B485TH: TypedRouterHandler<B485> {}
public struct B485: Body {
    private static let prefix = "//client/chat/info/group/setting/B485"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B485.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B486Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B486, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B486TH: TypedRouterHandler<B486> {}
public struct B486: Body {
    private static let prefix = "//client/chat/info/group/setting/B486"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B486.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B487Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B487, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B487TH: TypedRouterHandler<B487> {}
public struct B487: Body {
    private static let prefix = "//client/chat/info/group/setting/B487"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B487.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B488Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B488, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B488TH: TypedRouterHandler<B488> {}
public struct B488: Body {
    private static let prefix = "//client/chat/info/group/setting/B488"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B488.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B489Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B489, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B489TH: TypedRouterHandler<B489> {}
public struct B489: Body {
    private static let prefix = "//client/chat/info/group/setting/B489"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B489.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B490Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B490, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B490TH: TypedRouterHandler<B490> {}
public struct B490: Body {
    private static let prefix = "//client/chat/info/group/setting/B490"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B490.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B491Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B491, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B491TH: TypedRouterHandler<B491> {}
public struct B491: Body {
    private static let prefix = "//client/chat/info/group/setting/B491"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B491.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B492Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B492, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B492TH: TypedRouterHandler<B492> {}
public struct B492: Body {
    private static let prefix = "//client/chat/info/group/setting/B492"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B492.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B493Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B493, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B493TH: TypedRouterHandler<B493> {}
public struct B493: Body {
    private static let prefix = "//client/chat/info/group/setting/B493"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B493.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B494Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B494, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B494TH: TypedRouterHandler<B494> {}
public struct B494: Body {
    private static let prefix = "//client/chat/info/group/setting/B494"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B494.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B495Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B495, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B495TH: TypedRouterHandler<B495> {}
public struct B495: Body {
    private static let prefix = "//client/chat/info/group/setting/B495"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B495.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B496Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B496, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B496TH: TypedRouterHandler<B496> {}
public struct B496: Body {
    private static let prefix = "//client/chat/info/group/setting/B496"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B496.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B497Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B497, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B497TH: TypedRouterHandler<B497> {}
public struct B497: Body {
    private static let prefix = "//client/chat/info/group/setting/B497"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B497.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B498Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B498, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B498TH: TypedRouterHandler<B498> {}
public struct B498: Body {
    private static let prefix = "//client/chat/info/group/setting/B498"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B498.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B499Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B499, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B499TH: TypedRouterHandler<B499> {}
public struct B499: Body {
    private static let prefix = "//client/chat/info/group/setting/B499"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B499.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class colorfulBlueHandler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: colorfulBlue, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class colorfulBlueTH: TypedRouterHandler<colorfulBlue> {}
public struct colorfulBlue: Body {
    private static let prefix = "//client/chat/info/group/setting/colorfulBlue"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(colorfulBlue.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B501Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B501, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B501TH: TypedRouterHandler<B501> {}
public struct B501: Body {
    private static let prefix = "//client/chat/info/group/setting/B501"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B501.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B502Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B502, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B502TH: TypedRouterHandler<B502> {}
public struct B502: Body {
    private static let prefix = "//client/chat/info/group/setting/B502"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B502.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B503Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B503, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B503TH: TypedRouterHandler<B503> {}
public struct B503: Body {
    private static let prefix = "//client/chat/info/group/setting/B503"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B503.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B504Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B504, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B504TH: TypedRouterHandler<B504> {}
public struct B504: Body {
    private static let prefix = "//client/chat/info/group/setting/B504"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B504.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B505Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B505, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B505TH: TypedRouterHandler<B505> {}
public struct B505: Body {
    private static let prefix = "//client/chat/info/group/setting/B505"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B505.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B506Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B506, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B506TH: TypedRouterHandler<B506> {}
public struct B506: Body {
    private static let prefix = "//client/chat/info/group/setting/B506"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B506.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B507Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B507, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B507TH: TypedRouterHandler<B507> {}
public struct B507: Body {
    private static let prefix = "//client/chat/info/group/setting/B507"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B507.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B508Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B508, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B508TH: TypedRouterHandler<B508> {}
public struct B508: Body {
    private static let prefix = "//client/chat/info/group/setting/B508"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B508.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B509Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B509, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B509TH: TypedRouterHandler<B509> {}
public struct B509: Body {
    private static let prefix = "//client/chat/info/group/setting/B509"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B509.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B510Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B510, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B510TH: TypedRouterHandler<B510> {}
public struct B510: Body {
    private static let prefix = "//client/chat/info/group/setting/B510"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B510.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B511Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B511, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B511TH: TypedRouterHandler<B511> {}
public struct B511: Body {
    private static let prefix = "//client/chat/info/group/setting/B511"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B511.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B512Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B512, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B512TH: TypedRouterHandler<B512> {}
public struct B512: Body {
    private static let prefix = "//client/chat/info/group/setting/B512"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B512.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B513Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B513, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B513TH: TypedRouterHandler<B513> {}
public struct B513: Body {
    private static let prefix = "//client/chat/info/group/setting/B513"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B513.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B514Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B514, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B514TH: TypedRouterHandler<B514> {}
public struct B514: Body {
    private static let prefix = "//client/chat/info/group/setting/B514"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B514.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B515Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B515, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B515TH: TypedRouterHandler<B515> {}
public struct B515: Body {
    private static let prefix = "//client/chat/info/group/setting/B515"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B515.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B516Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B516, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B516TH: TypedRouterHandler<B516> {}
public struct B516: Body {
    private static let prefix = "//client/chat/info/group/setting/B516"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B516.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B517Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B517, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B517TH: TypedRouterHandler<B517> {}
public struct B517: Body {
    private static let prefix = "//client/chat/info/group/setting/B517"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B517.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B518Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B518, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B518TH: TypedRouterHandler<B518> {}
public struct B518: Body {
    private static let prefix = "//client/chat/info/group/setting/B518"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B518.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B519Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B519, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B519TH: TypedRouterHandler<B519> {}
public struct B519: Body {
    private static let prefix = "//client/chat/info/group/setting/B519"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B519.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B520Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B520, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B520TH: TypedRouterHandler<B520> {}
public struct B520: Body {
    private static let prefix = "//client/chat/info/group/setting/B520"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B520.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B521Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B521, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B521TH: TypedRouterHandler<B521> {}
public struct B521: Body {
    private static let prefix = "//client/chat/info/group/setting/B521"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B521.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B522Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B522, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B522TH: TypedRouterHandler<B522> {}
public struct B522: Body {
    private static let prefix = "//client/chat/info/group/setting/B522"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B522.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B523Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B523, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B523TH: TypedRouterHandler<B523> {}
public struct B523: Body {
    private static let prefix = "//client/chat/info/group/setting/B523"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B523.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B524Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B524, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B524TH: TypedRouterHandler<B524> {}
public struct B524: Body {
    private static let prefix = "//client/chat/info/group/setting/B524"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B524.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B525Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B525, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B525TH: TypedRouterHandler<B525> {}
public struct B525: Body {
    private static let prefix = "//client/chat/info/group/setting/B525"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B525.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B526Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B526, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B526TH: TypedRouterHandler<B526> {}
public struct B526: Body {
    private static let prefix = "//client/chat/info/group/setting/B526"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B526.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B527Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B527, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B527TH: TypedRouterHandler<B527> {}
public struct B527: Body {
    private static let prefix = "//client/chat/info/group/setting/B527"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B527.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B528Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B528, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B528TH: TypedRouterHandler<B528> {}
public struct B528: Body {
    private static let prefix = "//client/chat/info/group/setting/B528"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B528.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B529Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B529, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B529TH: TypedRouterHandler<B529> {}
public struct B529: Body {
    private static let prefix = "//client/chat/info/group/setting/B529"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B529.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B530Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B530, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B530TH: TypedRouterHandler<B530> {}
public struct B530: Body {
    private static let prefix = "//client/chat/info/group/setting/B530"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B530.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B531Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B531, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B531TH: TypedRouterHandler<B531> {}
public struct B531: Body {
    private static let prefix = "//client/chat/info/group/setting/B531"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B531.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B532Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B532, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B532TH: TypedRouterHandler<B532> {}
public struct B532: Body {
    private static let prefix = "//client/chat/info/group/setting/B532"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B532.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B533Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B533, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B533TH: TypedRouterHandler<B533> {}
public struct B533: Body {
    private static let prefix = "//client/chat/info/group/setting/B533"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B533.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B534Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B534, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B534TH: TypedRouterHandler<B534> {}
public struct B534: Body {
    private static let prefix = "//client/chat/info/group/setting/B534"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B534.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B535Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B535, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B535TH: TypedRouterHandler<B535> {}
public struct B535: Body {
    private static let prefix = "//client/chat/info/group/setting/B535"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B535.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B536Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B536, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B536TH: TypedRouterHandler<B536> {}
public struct B536: Body {
    private static let prefix = "//client/chat/info/group/setting/B536"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B536.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B537Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B537, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B537TH: TypedRouterHandler<B537> {}
public struct B537: Body {
    private static let prefix = "//client/chat/info/group/setting/B537"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B537.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B538Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B538, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B538TH: TypedRouterHandler<B538> {}
public struct B538: Body {
    private static let prefix = "//client/chat/info/group/setting/B538"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B538.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B539Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B539, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B539TH: TypedRouterHandler<B539> {}
public struct B539: Body {
    private static let prefix = "//client/chat/info/group/setting/B539"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B539.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B540Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B540, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B540TH: TypedRouterHandler<B540> {}
public struct B540: Body {
    private static let prefix = "//client/chat/info/group/setting/B540"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B540.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B541Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B541, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B541TH: TypedRouterHandler<B541> {}
public struct B541: Body {
    private static let prefix = "//client/chat/info/group/setting/B541"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B541.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B542Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B542, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B542TH: TypedRouterHandler<B542> {}
public struct B542: Body {
    private static let prefix = "//client/chat/info/group/setting/B542"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B542.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B543Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B543, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B543TH: TypedRouterHandler<B543> {}
public struct B543: Body {
    private static let prefix = "//client/chat/info/group/setting/B543"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B543.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B544Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B544, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B544TH: TypedRouterHandler<B544> {}
public struct B544: Body {
    private static let prefix = "//client/chat/info/group/setting/B544"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B544.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B545Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B545, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B545TH: TypedRouterHandler<B545> {}
public struct B545: Body {
    private static let prefix = "//client/chat/info/group/setting/B545"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B545.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B546Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B546, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B546TH: TypedRouterHandler<B546> {}
public struct B546: Body {
    private static let prefix = "//client/chat/info/group/setting/B546"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B546.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B547Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B547, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B547TH: TypedRouterHandler<B547> {}
public struct B547: Body {
    private static let prefix = "//client/chat/info/group/setting/B547"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B547.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B548Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B548, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B548TH: TypedRouterHandler<B548> {}
public struct B548: Body {
    private static let prefix = "//client/chat/info/group/setting/B548"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B548.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B549Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B549, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B549TH: TypedRouterHandler<B549> {}
public struct B549: Body {
    private static let prefix = "//client/chat/info/group/setting/B549"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B549.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B550Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B550, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B550TH: TypedRouterHandler<B550> {}
public struct B550: Body {
    private static let prefix = "//client/chat/info/group/setting/B550"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B550.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B551Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B551, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B551TH: TypedRouterHandler<B551> {}
public struct B551: Body {
    private static let prefix = "//client/chat/info/group/setting/B551"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B551.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B552Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B552, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B552TH: TypedRouterHandler<B552> {}
public struct B552: Body {
    private static let prefix = "//client/chat/info/group/setting/B552"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B552.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B553Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B553, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B553TH: TypedRouterHandler<B553> {}
public struct B553: Body {
    private static let prefix = "//client/chat/info/group/setting/B553"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B553.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B554Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B554, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B554TH: TypedRouterHandler<B554> {}
public struct B554: Body {
    private static let prefix = "//client/chat/info/group/setting/B554"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B554.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B555Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B555, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B555TH: TypedRouterHandler<B555> {}
public struct B555: Body {
    private static let prefix = "//client/chat/info/group/setting/B555"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B555.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B556Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B556, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B556TH: TypedRouterHandler<B556> {}
public struct B556: Body {
    private static let prefix = "//client/chat/info/group/setting/B556"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B556.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B557Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B557, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B557TH: TypedRouterHandler<B557> {}
public struct B557: Body {
    private static let prefix = "//client/chat/info/group/setting/B557"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B557.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B558Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B558, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B558TH: TypedRouterHandler<B558> {}
public struct B558: Body {
    private static let prefix = "//client/chat/info/group/setting/B558"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B558.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B559Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B559, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B559TH: TypedRouterHandler<B559> {}
public struct B559: Body {
    private static let prefix = "//client/chat/info/group/setting/B559"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B559.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B560Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B560, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B560TH: TypedRouterHandler<B560> {}
public struct B560: Body {
    private static let prefix = "//client/chat/info/group/setting/B560"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B560.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B561Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B561, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B561TH: TypedRouterHandler<B561> {}
public struct B561: Body {
    private static let prefix = "//client/chat/info/group/setting/B561"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B561.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B562Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B562, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B562TH: TypedRouterHandler<B562> {}
public struct B562: Body {
    private static let prefix = "//client/chat/info/group/setting/B562"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B562.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B563Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B563, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B563TH: TypedRouterHandler<B563> {}
public struct B563: Body {
    private static let prefix = "//client/chat/info/group/setting/B563"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B563.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B564Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B564, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B564TH: TypedRouterHandler<B564> {}
public struct B564: Body {
    private static let prefix = "//client/chat/info/group/setting/B564"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B564.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B565Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B565, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B565TH: TypedRouterHandler<B565> {}
public struct B565: Body {
    private static let prefix = "//client/chat/info/group/setting/B565"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B565.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B566Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B566, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B566TH: TypedRouterHandler<B566> {}
public struct B566: Body {
    private static let prefix = "//client/chat/info/group/setting/B566"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B566.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B567Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B567, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B567TH: TypedRouterHandler<B567> {}
public struct B567: Body {
    private static let prefix = "//client/chat/info/group/setting/B567"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B567.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B568Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B568, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B568TH: TypedRouterHandler<B568> {}
public struct B568: Body {
    private static let prefix = "//client/chat/info/group/setting/B568"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B568.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B569Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B569, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B569TH: TypedRouterHandler<B569> {}
public struct B569: Body {
    private static let prefix = "//client/chat/info/group/setting/B569"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B569.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B570Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B570, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B570TH: TypedRouterHandler<B570> {}
public struct B570: Body {
    private static let prefix = "//client/chat/info/group/setting/B570"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B570.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B571Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B571, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B571TH: TypedRouterHandler<B571> {}
public struct B571: Body {
    private static let prefix = "//client/chat/info/group/setting/B571"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B571.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B572Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B572, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B572TH: TypedRouterHandler<B572> {}
public struct B572: Body {
    private static let prefix = "//client/chat/info/group/setting/B572"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B572.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B573Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B573, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B573TH: TypedRouterHandler<B573> {}
public struct B573: Body {
    private static let prefix = "//client/chat/info/group/setting/B573"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B573.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B574Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B574, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B574TH: TypedRouterHandler<B574> {}
public struct B574: Body {
    private static let prefix = "//client/chat/info/group/setting/B574"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B574.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B575Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B575, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B575TH: TypedRouterHandler<B575> {}
public struct B575: Body {
    private static let prefix = "//client/chat/info/group/setting/B575"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B575.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B576Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B576, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B576TH: TypedRouterHandler<B576> {}
public struct B576: Body {
    private static let prefix = "//client/chat/info/group/setting/B576"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B576.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B577Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B577, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B577TH: TypedRouterHandler<B577> {}
public struct B577: Body {
    private static let prefix = "//client/chat/info/group/setting/B577"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B577.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B578Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B578, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B578TH: TypedRouterHandler<B578> {}
public struct B578: Body {
    private static let prefix = "//client/chat/info/group/setting/B578"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B578.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B579Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B579, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B579TH: TypedRouterHandler<B579> {}
public struct B579: Body {
    private static let prefix = "//client/chat/info/group/setting/B579"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B579.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B580Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B580, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B580TH: TypedRouterHandler<B580> {}
public struct B580: Body {
    private static let prefix = "//client/chat/info/group/setting/B580"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B580.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B581Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B581, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B581TH: TypedRouterHandler<B581> {}
public struct B581: Body {
    private static let prefix = "//client/chat/info/group/setting/B581"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B581.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B582Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B582, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B582TH: TypedRouterHandler<B582> {}
public struct B582: Body {
    private static let prefix = "//client/chat/info/group/setting/B582"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B582.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B583Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B583, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B583TH: TypedRouterHandler<B583> {}
public struct B583: Body {
    private static let prefix = "//client/chat/info/group/setting/B583"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B583.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B584Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B584, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B584TH: TypedRouterHandler<B584> {}
public struct B584: Body {
    private static let prefix = "//client/chat/info/group/setting/B584"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B584.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B585Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B585, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B585TH: TypedRouterHandler<B585> {}
public struct B585: Body {
    private static let prefix = "//client/chat/info/group/setting/B585"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B585.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B586Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B586, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B586TH: TypedRouterHandler<B586> {}
public struct B586: Body {
    private static let prefix = "//client/chat/info/group/setting/B586"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B586.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B587Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B587, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B587TH: TypedRouterHandler<B587> {}
public struct B587: Body {
    private static let prefix = "//client/chat/info/group/setting/B587"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B587.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B588Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B588, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B588TH: TypedRouterHandler<B588> {}
public struct B588: Body {
    private static let prefix = "//client/chat/info/group/setting/B588"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B588.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B589Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B589, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B589TH: TypedRouterHandler<B589> {}
public struct B589: Body {
    private static let prefix = "//client/chat/info/group/setting/B589"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B589.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B590Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B590, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B590TH: TypedRouterHandler<B590> {}
public struct B590: Body {
    private static let prefix = "//client/chat/info/group/setting/B590"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B590.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B591Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B591, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B591TH: TypedRouterHandler<B591> {}
public struct B591: Body {
    private static let prefix = "//client/chat/info/group/setting/B591"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B591.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B592Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B592, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B592TH: TypedRouterHandler<B592> {}
public struct B592: Body {
    private static let prefix = "//client/chat/info/group/setting/B592"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B592.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B593Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B593, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B593TH: TypedRouterHandler<B593> {}
public struct B593: Body {
    private static let prefix = "//client/chat/info/group/setting/B593"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B593.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B594Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B594, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B594TH: TypedRouterHandler<B594> {}
public struct B594: Body {
    private static let prefix = "//client/chat/info/group/setting/B594"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B594.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B595Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B595, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B595TH: TypedRouterHandler<B595> {}
public struct B595: Body {
    private static let prefix = "//client/chat/info/group/setting/B595"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B595.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B596Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B596, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B596TH: TypedRouterHandler<B596> {}
public struct B596: Body {
    private static let prefix = "//client/chat/info/group/setting/B596"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B596.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B597Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B597, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B597TH: TypedRouterHandler<B597> {}
public struct B597: Body {
    private static let prefix = "//client/chat/info/group/setting/B597"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B597.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B598Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B598, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B598TH: TypedRouterHandler<B598> {}
public struct B598: Body {
    private static let prefix = "//client/chat/info/group/setting/B598"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B598.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B599Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B599, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B599TH: TypedRouterHandler<B599> {}
public struct B599: Body {
    private static let prefix = "//client/chat/info/group/setting/B599"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B599.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B600Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B600, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B600TH: TypedRouterHandler<B600> {}
public struct B600: Body {
    private static let prefix = "//client/chat/info/group/setting/B600"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B600.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B601Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B601, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B601TH: TypedRouterHandler<B601> {}
public struct B601: Body {
    private static let prefix = "//client/chat/info/group/setting/B601"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B601.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B602Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B602, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B602TH: TypedRouterHandler<B602> {}
public struct B602: Body {
    private static let prefix = "//client/chat/info/group/setting/B602"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B602.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B603Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B603, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B603TH: TypedRouterHandler<B603> {}
public struct B603: Body {
    private static let prefix = "//client/chat/info/group/setting/B603"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B603.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B604Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B604, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B604TH: TypedRouterHandler<B604> {}
public struct B604: Body {
    private static let prefix = "//client/chat/info/group/setting/B604"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B604.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B605Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B605, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B605TH: TypedRouterHandler<B605> {}
public struct B605: Body {
    private static let prefix = "//client/chat/info/group/setting/B605"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B605.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B606Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B606, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B606TH: TypedRouterHandler<B606> {}
public struct B606: Body {
    private static let prefix = "//client/chat/info/group/setting/B606"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B606.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B607Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B607, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B607TH: TypedRouterHandler<B607> {}
public struct B607: Body {
    private static let prefix = "//client/chat/info/group/setting/B607"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B607.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B608Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B608, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B608TH: TypedRouterHandler<B608> {}
public struct B608: Body {
    private static let prefix = "//client/chat/info/group/setting/B608"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B608.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B609Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B609, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B609TH: TypedRouterHandler<B609> {}
public struct B609: Body {
    private static let prefix = "//client/chat/info/group/setting/B609"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B609.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B610Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B610, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B610TH: TypedRouterHandler<B610> {}
public struct B610: Body {
    private static let prefix = "//client/chat/info/group/setting/B610"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B610.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B611Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B611, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B611TH: TypedRouterHandler<B611> {}
public struct B611: Body {
    private static let prefix = "//client/chat/info/group/setting/B611"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B611.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B612Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B612, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B612TH: TypedRouterHandler<B612> {}
public struct B612: Body {
    private static let prefix = "//client/chat/info/group/setting/B612"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B612.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B613Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B613, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B613TH: TypedRouterHandler<B613> {}
public struct B613: Body {
    private static let prefix = "//client/chat/info/group/setting/B613"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B613.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B614Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B614, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B614TH: TypedRouterHandler<B614> {}
public struct B614: Body {
    private static let prefix = "//client/chat/info/group/setting/B614"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B614.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B615Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B615, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B615TH: TypedRouterHandler<B615> {}
public struct B615: Body {
    private static let prefix = "//client/chat/info/group/setting/B615"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B615.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B616Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B616, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B616TH: TypedRouterHandler<B616> {}
public struct B616: Body {
    private static let prefix = "//client/chat/info/group/setting/B616"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B616.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B617Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B617, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B617TH: TypedRouterHandler<B617> {}
public struct B617: Body {
    private static let prefix = "//client/chat/info/group/setting/B617"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B617.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B618Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B618, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B618TH: TypedRouterHandler<B618> {}
public struct B618: Body {
    private static let prefix = "//client/chat/info/group/setting/B618"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B618.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B619Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B619, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B619TH: TypedRouterHandler<B619> {}
public struct B619: Body {
    private static let prefix = "//client/chat/info/group/setting/B619"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B619.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B620Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B620, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B620TH: TypedRouterHandler<B620> {}
public struct B620: Body {
    private static let prefix = "//client/chat/info/group/setting/B620"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B620.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B621Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B621, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B621TH: TypedRouterHandler<B621> {}
public struct B621: Body {
    private static let prefix = "//client/chat/info/group/setting/B621"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B621.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B622Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B622, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B622TH: TypedRouterHandler<B622> {}
public struct B622: Body {
    private static let prefix = "//client/chat/info/group/setting/B622"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B622.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B623Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B623, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B623TH: TypedRouterHandler<B623> {}
public struct B623: Body {
    private static let prefix = "//client/chat/info/group/setting/B623"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B623.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B624Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B624, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B624TH: TypedRouterHandler<B624> {}
public struct B624: Body {
    private static let prefix = "//client/chat/info/group/setting/B624"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B624.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B625Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B625, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B625TH: TypedRouterHandler<B625> {}
public struct B625: Body {
    private static let prefix = "//client/chat/info/group/setting/B625"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B625.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B626Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B626, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B626TH: TypedRouterHandler<B626> {}
public struct B626: Body {
    private static let prefix = "//client/chat/info/group/setting/B626"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B626.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B627Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B627, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B627TH: TypedRouterHandler<B627> {}
public struct B627: Body {
    private static let prefix = "//client/chat/info/group/setting/B627"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B627.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B628Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B628, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B628TH: TypedRouterHandler<B628> {}
public struct B628: Body {
    private static let prefix = "//client/chat/info/group/setting/B628"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B628.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B629Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B629, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B629TH: TypedRouterHandler<B629> {}
public struct B629: Body {
    private static let prefix = "//client/chat/info/group/setting/B629"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B629.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B630Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B630, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B630TH: TypedRouterHandler<B630> {}
public struct B630: Body {
    private static let prefix = "//client/chat/info/group/setting/B630"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B630.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B631Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B631, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B631TH: TypedRouterHandler<B631> {}
public struct B631: Body {
    private static let prefix = "//client/chat/info/group/setting/B631"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B631.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B632Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B632, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B632TH: TypedRouterHandler<B632> {}
public struct B632: Body {
    private static let prefix = "//client/chat/info/group/setting/B632"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B632.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B633Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B633, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B633TH: TypedRouterHandler<B633> {}
public struct B633: Body {
    private static let prefix = "//client/chat/info/group/setting/B633"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B633.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B634Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B634, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B634TH: TypedRouterHandler<B634> {}
public struct B634: Body {
    private static let prefix = "//client/chat/info/group/setting/B634"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B634.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B635Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B635, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B635TH: TypedRouterHandler<B635> {}
public struct B635: Body {
    private static let prefix = "//client/chat/info/group/setting/B635"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B635.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B636Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B636, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B636TH: TypedRouterHandler<B636> {}
public struct B636: Body {
    private static let prefix = "//client/chat/info/group/setting/B636"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B636.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B637Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B637, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B637TH: TypedRouterHandler<B637> {}
public struct B637: Body {
    private static let prefix = "//client/chat/info/group/setting/B637"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B637.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B638Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B638, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B638TH: TypedRouterHandler<B638> {}
public struct B638: Body {
    private static let prefix = "//client/chat/info/group/setting/B638"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B638.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B639Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B639, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B639TH: TypedRouterHandler<B639> {}
public struct B639: Body {
    private static let prefix = "//client/chat/info/group/setting/B639"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B639.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B640Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B640, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B640TH: TypedRouterHandler<B640> {}
public struct B640: Body {
    private static let prefix = "//client/chat/info/group/setting/B640"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B640.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B641Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B641, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B641TH: TypedRouterHandler<B641> {}
public struct B641: Body {
    private static let prefix = "//client/chat/info/group/setting/B641"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B641.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B642Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B642, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B642TH: TypedRouterHandler<B642> {}
public struct B642: Body {
    private static let prefix = "//client/chat/info/group/setting/B642"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B642.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B643Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B643, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B643TH: TypedRouterHandler<B643> {}
public struct B643: Body {
    private static let prefix = "//client/chat/info/group/setting/B643"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B643.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B644Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B644, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B644TH: TypedRouterHandler<B644> {}
public struct B644: Body {
    private static let prefix = "//client/chat/info/group/setting/B644"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B644.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B645Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B645, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B645TH: TypedRouterHandler<B645> {}
public struct B645: Body {
    private static let prefix = "//client/chat/info/group/setting/B645"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B645.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B646Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B646, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B646TH: TypedRouterHandler<B646> {}
public struct B646: Body {
    private static let prefix = "//client/chat/info/group/setting/B646"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B646.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B647Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B647, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B647TH: TypedRouterHandler<B647> {}
public struct B647: Body {
    private static let prefix = "//client/chat/info/group/setting/B647"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B647.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B648Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B648, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B648TH: TypedRouterHandler<B648> {}
public struct B648: Body {
    private static let prefix = "//client/chat/info/group/setting/B648"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B648.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B649Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B649, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B649TH: TypedRouterHandler<B649> {}
public struct B649: Body {
    private static let prefix = "//client/chat/info/group/setting/B649"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B649.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B650Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B650, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B650TH: TypedRouterHandler<B650> {}
public struct B650: Body {
    private static let prefix = "//client/chat/info/group/setting/B650"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B650.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B651Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B651, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B651TH: TypedRouterHandler<B651> {}
public struct B651: Body {
    private static let prefix = "//client/chat/info/group/setting/B651"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B651.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B652Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B652, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B652TH: TypedRouterHandler<B652> {}
public struct B652: Body {
    private static let prefix = "//client/chat/info/group/setting/B652"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B652.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B653Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B653, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B653TH: TypedRouterHandler<B653> {}
public struct B653: Body {
    private static let prefix = "//client/chat/info/group/setting/B653"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B653.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B654Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B654, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B654TH: TypedRouterHandler<B654> {}
public struct B654: Body {
    private static let prefix = "//client/chat/info/group/setting/B654"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B654.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B655Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B655, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B655TH: TypedRouterHandler<B655> {}
public struct B655: Body {
    private static let prefix = "//client/chat/info/group/setting/B655"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B655.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B656Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B656, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B656TH: TypedRouterHandler<B656> {}
public struct B656: Body {
    private static let prefix = "//client/chat/info/group/setting/B656"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B656.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B657Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B657, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B657TH: TypedRouterHandler<B657> {}
public struct B657: Body {
    private static let prefix = "//client/chat/info/group/setting/B657"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B657.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B658Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B658, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B658TH: TypedRouterHandler<B658> {}
public struct B658: Body {
    private static let prefix = "//client/chat/info/group/setting/B658"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B658.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B659Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B659, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B659TH: TypedRouterHandler<B659> {}
public struct B659: Body {
    private static let prefix = "//client/chat/info/group/setting/B659"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B659.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B660Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B660, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B660TH: TypedRouterHandler<B660> {}
public struct B660: Body {
    private static let prefix = "//client/chat/info/group/setting/B660"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B660.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B661Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B661, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B661TH: TypedRouterHandler<B661> {}
public struct B661: Body {
    private static let prefix = "//client/chat/info/group/setting/B661"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B661.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B662Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B662, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B662TH: TypedRouterHandler<B662> {}
public struct B662: Body {
    private static let prefix = "//client/chat/info/group/setting/B662"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B662.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B663Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B663, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B663TH: TypedRouterHandler<B663> {}
public struct B663: Body {
    private static let prefix = "//client/chat/info/group/setting/B663"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B663.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B664Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B664, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B664TH: TypedRouterHandler<B664> {}
public struct B664: Body {
    private static let prefix = "//client/chat/info/group/setting/B664"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B664.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B665Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B665, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B665TH: TypedRouterHandler<B665> {}
public struct B665: Body {
    private static let prefix = "//client/chat/info/group/setting/B665"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B665.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B666Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B666, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B666TH: TypedRouterHandler<B666> {}
public struct B666: Body {
    private static let prefix = "//client/chat/info/group/setting/B666"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B666.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B667Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B667, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B667TH: TypedRouterHandler<B667> {}
public struct B667: Body {
    private static let prefix = "//client/chat/info/group/setting/B667"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B667.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B668Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B668, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B668TH: TypedRouterHandler<B668> {}
public struct B668: Body {
    private static let prefix = "//client/chat/info/group/setting/B668"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B668.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B669Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B669, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B669TH: TypedRouterHandler<B669> {}
public struct B669: Body {
    private static let prefix = "//client/chat/info/group/setting/B669"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B669.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B670Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B670, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B670TH: TypedRouterHandler<B670> {}
public struct B670: Body {
    private static let prefix = "//client/chat/info/group/setting/B670"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B670.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B671Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B671, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B671TH: TypedRouterHandler<B671> {}
public struct B671: Body {
    private static let prefix = "//client/chat/info/group/setting/B671"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B671.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B672Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B672, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B672TH: TypedRouterHandler<B672> {}
public struct B672: Body {
    private static let prefix = "//client/chat/info/group/setting/B672"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B672.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B673Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B673, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B673TH: TypedRouterHandler<B673> {}
public struct B673: Body {
    private static let prefix = "//client/chat/info/group/setting/B673"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B673.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B674Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B674, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B674TH: TypedRouterHandler<B674> {}
public struct B674: Body {
    private static let prefix = "//client/chat/info/group/setting/B674"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B674.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B675Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B675, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B675TH: TypedRouterHandler<B675> {}
public struct B675: Body {
    private static let prefix = "//client/chat/info/group/setting/B675"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B675.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B676Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B676, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B676TH: TypedRouterHandler<B676> {}
public struct B676: Body {
    private static let prefix = "//client/chat/info/group/setting/B676"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B676.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B677Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B677, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B677TH: TypedRouterHandler<B677> {}
public struct B677: Body {
    private static let prefix = "//client/chat/info/group/setting/B677"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B677.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B678Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B678, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B678TH: TypedRouterHandler<B678> {}
public struct B678: Body {
    private static let prefix = "//client/chat/info/group/setting/B678"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B678.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B679Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B679, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B679TH: TypedRouterHandler<B679> {}
public struct B679: Body {
    private static let prefix = "//client/chat/info/group/setting/B679"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B679.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B680Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B680, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B680TH: TypedRouterHandler<B680> {}
public struct B680: Body {
    private static let prefix = "//client/chat/info/group/setting/B680"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B680.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B681Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B681, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B681TH: TypedRouterHandler<B681> {}
public struct B681: Body {
    private static let prefix = "//client/chat/info/group/setting/B681"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B681.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B682Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B682, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B682TH: TypedRouterHandler<B682> {}
public struct B682: Body {
    private static let prefix = "//client/chat/info/group/setting/B682"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B682.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B683Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B683, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B683TH: TypedRouterHandler<B683> {}
public struct B683: Body {
    private static let prefix = "//client/chat/info/group/setting/B683"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B683.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B684Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B684, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B684TH: TypedRouterHandler<B684> {}
public struct B684: Body {
    private static let prefix = "//client/chat/info/group/setting/B684"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B684.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B685Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B685, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B685TH: TypedRouterHandler<B685> {}
public struct B685: Body {
    private static let prefix = "//client/chat/info/group/setting/B685"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B685.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B686Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B686, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B686TH: TypedRouterHandler<B686> {}
public struct B686: Body {
    private static let prefix = "//client/chat/info/group/setting/B686"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B686.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B687Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B687, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B687TH: TypedRouterHandler<B687> {}
public struct B687: Body {
    private static let prefix = "//client/chat/info/group/setting/B687"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B687.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B688Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B688, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B688TH: TypedRouterHandler<B688> {}
public struct B688: Body {
    private static let prefix = "//client/chat/info/group/setting/B688"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B688.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B689Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B689, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B689TH: TypedRouterHandler<B689> {}
public struct B689: Body {
    private static let prefix = "//client/chat/info/group/setting/B689"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B689.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B690Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B690, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B690TH: TypedRouterHandler<B690> {}
public struct B690: Body {
    private static let prefix = "//client/chat/info/group/setting/B690"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B690.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B691Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B691, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B691TH: TypedRouterHandler<B691> {}
public struct B691: Body {
    private static let prefix = "//client/chat/info/group/setting/B691"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B691.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B692Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B692, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B692TH: TypedRouterHandler<B692> {}
public struct B692: Body {
    private static let prefix = "//client/chat/info/group/setting/B692"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B692.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B693Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B693, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B693TH: TypedRouterHandler<B693> {}
public struct B693: Body {
    private static let prefix = "//client/chat/info/group/setting/B693"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B693.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B694Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B694, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B694TH: TypedRouterHandler<B694> {}
public struct B694: Body {
    private static let prefix = "//client/chat/info/group/setting/B694"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B694.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B695Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B695, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B695TH: TypedRouterHandler<B695> {}
public struct B695: Body {
    private static let prefix = "//client/chat/info/group/setting/B695"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B695.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B696Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B696, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B696TH: TypedRouterHandler<B696> {}
public struct B696: Body {
    private static let prefix = "//client/chat/info/group/setting/B696"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B696.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B697Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B697, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B697TH: TypedRouterHandler<B697> {}
public struct B697: Body {
    private static let prefix = "//client/chat/info/group/setting/B697"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B697.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B698Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B698, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B698TH: TypedRouterHandler<B698> {}
public struct B698: Body {
    private static let prefix = "//client/chat/info/group/setting/B698"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B698.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B699Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B699, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B699TH: TypedRouterHandler<B699> {}
public struct B699: Body {
    private static let prefix = "//client/chat/info/group/setting/B699"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B699.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B700Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B700, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B700TH: TypedRouterHandler<B700> {}
public struct B700: Body {
    private static let prefix = "//client/chat/info/group/setting/B700"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B700.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B701Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B701, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B701TH: TypedRouterHandler<B701> {}
public struct B701: Body {
    private static let prefix = "//client/chat/info/group/setting/B701"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B701.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B702Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B702, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B702TH: TypedRouterHandler<B702> {}
public struct B702: Body {
    private static let prefix = "//client/chat/info/group/setting/B702"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B702.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B703Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B703, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B703TH: TypedRouterHandler<B703> {}
public struct B703: Body {
    private static let prefix = "//client/chat/info/group/setting/B703"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B703.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B704Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B704, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B704TH: TypedRouterHandler<B704> {}
public struct B704: Body {
    private static let prefix = "//client/chat/info/group/setting/B704"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B704.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B705Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B705, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B705TH: TypedRouterHandler<B705> {}
public struct B705: Body {
    private static let prefix = "//client/chat/info/group/setting/B705"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B705.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B706Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B706, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B706TH: TypedRouterHandler<B706> {}
public struct B706: Body {
    private static let prefix = "//client/chat/info/group/setting/B706"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B706.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B707Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B707, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B707TH: TypedRouterHandler<B707> {}
public struct B707: Body {
    private static let prefix = "//client/chat/info/group/setting/B707"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B707.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B708Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B708, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B708TH: TypedRouterHandler<B708> {}
public struct B708: Body {
    private static let prefix = "//client/chat/info/group/setting/B708"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B708.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B709Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B709, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B709TH: TypedRouterHandler<B709> {}
public struct B709: Body {
    private static let prefix = "//client/chat/info/group/setting/B709"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B709.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B710Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B710, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B710TH: TypedRouterHandler<B710> {}
public struct B710: Body {
    private static let prefix = "//client/chat/info/group/setting/B710"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B710.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B711Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B711, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B711TH: TypedRouterHandler<B711> {}
public struct B711: Body {
    private static let prefix = "//client/chat/info/group/setting/B711"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B711.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B712Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B712, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B712TH: TypedRouterHandler<B712> {}
public struct B712: Body {
    private static let prefix = "//client/chat/info/group/setting/B712"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B712.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B713Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B713, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B713TH: TypedRouterHandler<B713> {}
public struct B713: Body {
    private static let prefix = "//client/chat/info/group/setting/B713"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B713.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B714Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B714, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B714TH: TypedRouterHandler<B714> {}
public struct B714: Body {
    private static let prefix = "//client/chat/info/group/setting/B714"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B714.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B715Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B715, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B715TH: TypedRouterHandler<B715> {}
public struct B715: Body {
    private static let prefix = "//client/chat/info/group/setting/B715"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B715.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B716Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B716, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B716TH: TypedRouterHandler<B716> {}
public struct B716: Body {
    private static let prefix = "//client/chat/info/group/setting/B716"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B716.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B717Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B717, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B717TH: TypedRouterHandler<B717> {}
public struct B717: Body {
    private static let prefix = "//client/chat/info/group/setting/B717"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B717.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B718Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B718, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B718TH: TypedRouterHandler<B718> {}
public struct B718: Body {
    private static let prefix = "//client/chat/info/group/setting/B718"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B718.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B719Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B719, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B719TH: TypedRouterHandler<B719> {}
public struct B719: Body {
    private static let prefix = "//client/chat/info/group/setting/B719"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B719.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B720Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B720, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B720TH: TypedRouterHandler<B720> {}
public struct B720: Body {
    private static let prefix = "//client/chat/info/group/setting/B720"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B720.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B721Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B721, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B721TH: TypedRouterHandler<B721> {}
public struct B721: Body {
    private static let prefix = "//client/chat/info/group/setting/B721"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B721.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B722Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B722, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B722TH: TypedRouterHandler<B722> {}
public struct B722: Body {
    private static let prefix = "//client/chat/info/group/setting/B722"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B722.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B723Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B723, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B723TH: TypedRouterHandler<B723> {}
public struct B723: Body {
    private static let prefix = "//client/chat/info/group/setting/B723"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B723.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B724Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B724, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B724TH: TypedRouterHandler<B724> {}
public struct B724: Body {
    private static let prefix = "//client/chat/info/group/setting/B724"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B724.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B725Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B725, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B725TH: TypedRouterHandler<B725> {}
public struct B725: Body {
    private static let prefix = "//client/chat/info/group/setting/B725"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B725.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B726Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B726, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B726TH: TypedRouterHandler<B726> {}
public struct B726: Body {
    private static let prefix = "//client/chat/info/group/setting/B726"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B726.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B727Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B727, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B727TH: TypedRouterHandler<B727> {}
public struct B727: Body {
    private static let prefix = "//client/chat/info/group/setting/B727"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B727.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B728Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B728, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B728TH: TypedRouterHandler<B728> {}
public struct B728: Body {
    private static let prefix = "//client/chat/info/group/setting/B728"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B728.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B729Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B729, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B729TH: TypedRouterHandler<B729> {}
public struct B729: Body {
    private static let prefix = "//client/chat/info/group/setting/B729"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B729.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B730Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B730, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B730TH: TypedRouterHandler<B730> {}
public struct B730: Body {
    private static let prefix = "//client/chat/info/group/setting/B730"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B730.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B731Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B731, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B731TH: TypedRouterHandler<B731> {}
public struct B731: Body {
    private static let prefix = "//client/chat/info/group/setting/B731"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B731.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B732Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B732, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B732TH: TypedRouterHandler<B732> {}
public struct B732: Body {
    private static let prefix = "//client/chat/info/group/setting/B732"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B732.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B733Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B733, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B733TH: TypedRouterHandler<B733> {}
public struct B733: Body {
    private static let prefix = "//client/chat/info/group/setting/B733"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B733.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B734Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B734, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B734TH: TypedRouterHandler<B734> {}
public struct B734: Body {
    private static let prefix = "//client/chat/info/group/setting/B734"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B734.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B735Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B735, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B735TH: TypedRouterHandler<B735> {}
public struct B735: Body {
    private static let prefix = "//client/chat/info/group/setting/B735"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B735.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B736Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B736, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B736TH: TypedRouterHandler<B736> {}
public struct B736: Body {
    private static let prefix = "//client/chat/info/group/setting/B736"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B736.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B737Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B737, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B737TH: TypedRouterHandler<B737> {}
public struct B737: Body {
    private static let prefix = "//client/chat/info/group/setting/B737"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B737.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B738Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B738, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B738TH: TypedRouterHandler<B738> {}
public struct B738: Body {
    private static let prefix = "//client/chat/info/group/setting/B738"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B738.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B739Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B739, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B739TH: TypedRouterHandler<B739> {}
public struct B739: Body {
    private static let prefix = "//client/chat/info/group/setting/B739"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B739.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B740Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B740, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B740TH: TypedRouterHandler<B740> {}
public struct B740: Body {
    private static let prefix = "//client/chat/info/group/setting/B740"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B740.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B741Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B741, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B741TH: TypedRouterHandler<B741> {}
public struct B741: Body {
    private static let prefix = "//client/chat/info/group/setting/B741"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B741.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B742Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B742, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B742TH: TypedRouterHandler<B742> {}
public struct B742: Body {
    private static let prefix = "//client/chat/info/group/setting/B742"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B742.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B743Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B743, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B743TH: TypedRouterHandler<B743> {}
public struct B743: Body {
    private static let prefix = "//client/chat/info/group/setting/B743"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B743.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B744Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B744, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B744TH: TypedRouterHandler<B744> {}
public struct B744: Body {
    private static let prefix = "//client/chat/info/group/setting/B744"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B744.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B745Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B745, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B745TH: TypedRouterHandler<B745> {}
public struct B745: Body {
    private static let prefix = "//client/chat/info/group/setting/B745"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B745.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B746Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B746, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B746TH: TypedRouterHandler<B746> {}
public struct B746: Body {
    private static let prefix = "//client/chat/info/group/setting/B746"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B746.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B747Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B747, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B747TH: TypedRouterHandler<B747> {}
public struct B747: Body {
    private static let prefix = "//client/chat/info/group/setting/B747"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B747.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B748Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B748, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B748TH: TypedRouterHandler<B748> {}
public struct B748: Body {
    private static let prefix = "//client/chat/info/group/setting/B748"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B748.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B749Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B749, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B749TH: TypedRouterHandler<B749> {}
public struct B749: Body {
    private static let prefix = "//client/chat/info/group/setting/B749"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B749.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B750Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B750, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B750TH: TypedRouterHandler<B750> {}
public struct B750: Body {
    private static let prefix = "//client/chat/info/group/setting/B750"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B750.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B751Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B751, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B751TH: TypedRouterHandler<B751> {}
public struct B751: Body {
    private static let prefix = "//client/chat/info/group/setting/B751"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B751.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B752Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B752, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B752TH: TypedRouterHandler<B752> {}
public struct B752: Body {
    private static let prefix = "//client/chat/info/group/setting/B752"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B752.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B753Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B753, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B753TH: TypedRouterHandler<B753> {}
public struct B753: Body {
    private static let prefix = "//client/chat/info/group/setting/B753"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B753.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B754Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B754, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B754TH: TypedRouterHandler<B754> {}
public struct B754: Body {
    private static let prefix = "//client/chat/info/group/setting/B754"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B754.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B755Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B755, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B755TH: TypedRouterHandler<B755> {}
public struct B755: Body {
    private static let prefix = "//client/chat/info/group/setting/B755"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B755.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B756Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B756, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B756TH: TypedRouterHandler<B756> {}
public struct B756: Body {
    private static let prefix = "//client/chat/info/group/setting/B756"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B756.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B757Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B757, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B757TH: TypedRouterHandler<B757> {}
public struct B757: Body {
    private static let prefix = "//client/chat/info/group/setting/B757"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B757.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B758Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B758, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B758TH: TypedRouterHandler<B758> {}
public struct B758: Body {
    private static let prefix = "//client/chat/info/group/setting/B758"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B758.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B759Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B759, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B759TH: TypedRouterHandler<B759> {}
public struct B759: Body {
    private static let prefix = "//client/chat/info/group/setting/B759"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B759.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B760Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B760, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B760TH: TypedRouterHandler<B760> {}
public struct B760: Body {
    private static let prefix = "//client/chat/info/group/setting/B760"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B760.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B761Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B761, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B761TH: TypedRouterHandler<B761> {}
public struct B761: Body {
    private static let prefix = "//client/chat/info/group/setting/B761"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B761.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B762Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B762, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B762TH: TypedRouterHandler<B762> {}
public struct B762: Body {
    private static let prefix = "//client/chat/info/group/setting/B762"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B762.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B763Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B763, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B763TH: TypedRouterHandler<B763> {}
public struct B763: Body {
    private static let prefix = "//client/chat/info/group/setting/B763"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B763.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B764Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B764, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B764TH: TypedRouterHandler<B764> {}
public struct B764: Body {
    private static let prefix = "//client/chat/info/group/setting/B764"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B764.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B765Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B765, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B765TH: TypedRouterHandler<B765> {}
public struct B765: Body {
    private static let prefix = "//client/chat/info/group/setting/B765"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B765.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B766Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B766, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B766TH: TypedRouterHandler<B766> {}
public struct B766: Body {
    private static let prefix = "//client/chat/info/group/setting/B766"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B766.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B767Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B767, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B767TH: TypedRouterHandler<B767> {}
public struct B767: Body {
    private static let prefix = "//client/chat/info/group/setting/B767"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B767.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B768Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B768, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B768TH: TypedRouterHandler<B768> {}
public struct B768: Body {
    private static let prefix = "//client/chat/info/group/setting/B768"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B768.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B769Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B769, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B769TH: TypedRouterHandler<B769> {}
public struct B769: Body {
    private static let prefix = "//client/chat/info/group/setting/B769"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B769.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B770Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B770, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B770TH: TypedRouterHandler<B770> {}
public struct B770: Body {
    private static let prefix = "//client/chat/info/group/setting/B770"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B770.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B771Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B771, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B771TH: TypedRouterHandler<B771> {}
public struct B771: Body {
    private static let prefix = "//client/chat/info/group/setting/B771"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B771.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B772Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B772, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B772TH: TypedRouterHandler<B772> {}
public struct B772: Body {
    private static let prefix = "//client/chat/info/group/setting/B772"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B772.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B773Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B773, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B773TH: TypedRouterHandler<B773> {}
public struct B773: Body {
    private static let prefix = "//client/chat/info/group/setting/B773"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B773.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B774Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B774, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B774TH: TypedRouterHandler<B774> {}
public struct B774: Body {
    private static let prefix = "//client/chat/info/group/setting/B774"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B774.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B775Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B775, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B775TH: TypedRouterHandler<B775> {}
public struct B775: Body {
    private static let prefix = "//client/chat/info/group/setting/B775"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B775.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B776Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B776, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B776TH: TypedRouterHandler<B776> {}
public struct B776: Body {
    private static let prefix = "//client/chat/info/group/setting/B776"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B776.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B777Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B777, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B777TH: TypedRouterHandler<B777> {}
public struct B777: Body {
    private static let prefix = "//client/chat/info/group/setting/B777"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B777.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B778Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B778, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B778TH: TypedRouterHandler<B778> {}
public struct B778: Body {
    private static let prefix = "//client/chat/info/group/setting/B778"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B778.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B779Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B779, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B779TH: TypedRouterHandler<B779> {}
public struct B779: Body {
    private static let prefix = "//client/chat/info/group/setting/B779"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B779.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B780Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B780, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B780TH: TypedRouterHandler<B780> {}
public struct B780: Body {
    private static let prefix = "//client/chat/info/group/setting/B780"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B780.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B781Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B781, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B781TH: TypedRouterHandler<B781> {}
public struct B781: Body {
    private static let prefix = "//client/chat/info/group/setting/B781"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B781.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B782Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B782, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B782TH: TypedRouterHandler<B782> {}
public struct B782: Body {
    private static let prefix = "//client/chat/info/group/setting/B782"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B782.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B783Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B783, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B783TH: TypedRouterHandler<B783> {}
public struct B783: Body {
    private static let prefix = "//client/chat/info/group/setting/B783"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B783.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B784Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B784, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B784TH: TypedRouterHandler<B784> {}
public struct B784: Body {
    private static let prefix = "//client/chat/info/group/setting/B784"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B784.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B785Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B785, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B785TH: TypedRouterHandler<B785> {}
public struct B785: Body {
    private static let prefix = "//client/chat/info/group/setting/B785"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B785.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B786Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B786, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B786TH: TypedRouterHandler<B786> {}
public struct B786: Body {
    private static let prefix = "//client/chat/info/group/setting/B786"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B786.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B787Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B787, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B787TH: TypedRouterHandler<B787> {}
public struct B787: Body {
    private static let prefix = "//client/chat/info/group/setting/B787"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B787.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B788Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B788, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B788TH: TypedRouterHandler<B788> {}
public struct B788: Body {
    private static let prefix = "//client/chat/info/group/setting/B788"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B788.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B789Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B789, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B789TH: TypedRouterHandler<B789> {}
public struct B789: Body {
    private static let prefix = "//client/chat/info/group/setting/B789"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B789.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B790Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B790, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B790TH: TypedRouterHandler<B790> {}
public struct B790: Body {
    private static let prefix = "//client/chat/info/group/setting/B790"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B790.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B791Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B791, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B791TH: TypedRouterHandler<B791> {}
public struct B791: Body {
    private static let prefix = "//client/chat/info/group/setting/B791"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B791.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B792Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B792, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B792TH: TypedRouterHandler<B792> {}
public struct B792: Body {
    private static let prefix = "//client/chat/info/group/setting/B792"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B792.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B793Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B793, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B793TH: TypedRouterHandler<B793> {}
public struct B793: Body {
    private static let prefix = "//client/chat/info/group/setting/B793"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B793.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B794Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B794, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B794TH: TypedRouterHandler<B794> {}
public struct B794: Body {
    private static let prefix = "//client/chat/info/group/setting/B794"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B794.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B795Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B795, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B795TH: TypedRouterHandler<B795> {}
public struct B795: Body {
    private static let prefix = "//client/chat/info/group/setting/B795"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B795.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B796Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B796, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B796TH: TypedRouterHandler<B796> {}
public struct B796: Body {
    private static let prefix = "//client/chat/info/group/setting/B796"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B796.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B797Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B797, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B797TH: TypedRouterHandler<B797> {}
public struct B797: Body {
    private static let prefix = "//client/chat/info/group/setting/B797"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B797.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B798Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B798, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B798TH: TypedRouterHandler<B798> {}
public struct B798: Body {
    private static let prefix = "//client/chat/info/group/setting/B798"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B798.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B799Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B799, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B799TH: TypedRouterHandler<B799> {}
public struct B799: Body {
    private static let prefix = "//client/chat/info/group/setting/B799"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B799.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B800Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B800, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B800TH: TypedRouterHandler<B800> {}
public struct B800: Body {
    private static let prefix = "//client/chat/info/group/setting/B800"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B800.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B801Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B801, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B801TH: TypedRouterHandler<B801> {}
public struct B801: Body {
    private static let prefix = "//client/chat/info/group/setting/B801"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B801.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B802Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B802, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B802TH: TypedRouterHandler<B802> {}
public struct B802: Body {
    private static let prefix = "//client/chat/info/group/setting/B802"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B802.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B803Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B803, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B803TH: TypedRouterHandler<B803> {}
public struct B803: Body {
    private static let prefix = "//client/chat/info/group/setting/B803"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B803.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B804Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B804, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B804TH: TypedRouterHandler<B804> {}
public struct B804: Body {
    private static let prefix = "//client/chat/info/group/setting/B804"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B804.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B805Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B805, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B805TH: TypedRouterHandler<B805> {}
public struct B805: Body {
    private static let prefix = "//client/chat/info/group/setting/B805"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B805.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B806Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B806, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B806TH: TypedRouterHandler<B806> {}
public struct B806: Body {
    private static let prefix = "//client/chat/info/group/setting/B806"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B806.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B807Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B807, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B807TH: TypedRouterHandler<B807> {}
public struct B807: Body {
    private static let prefix = "//client/chat/info/group/setting/B807"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B807.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B808Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B808, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B808TH: TypedRouterHandler<B808> {}
public struct B808: Body {
    private static let prefix = "//client/chat/info/group/setting/B808"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B808.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B809Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B809, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B809TH: TypedRouterHandler<B809> {}
public struct B809: Body {
    private static let prefix = "//client/chat/info/group/setting/B809"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B809.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B810Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B810, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B810TH: TypedRouterHandler<B810> {}
public struct B810: Body {
    private static let prefix = "//client/chat/info/group/setting/B810"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B810.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B811Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B811, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B811TH: TypedRouterHandler<B811> {}
public struct B811: Body {
    private static let prefix = "//client/chat/info/group/setting/B811"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B811.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B812Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B812, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B812TH: TypedRouterHandler<B812> {}
public struct B812: Body {
    private static let prefix = "//client/chat/info/group/setting/B812"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B812.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B813Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B813, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B813TH: TypedRouterHandler<B813> {}
public struct B813: Body {
    private static let prefix = "//client/chat/info/group/setting/B813"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B813.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B814Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B814, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B814TH: TypedRouterHandler<B814> {}
public struct B814: Body {
    private static let prefix = "//client/chat/info/group/setting/B814"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B814.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B815Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B815, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B815TH: TypedRouterHandler<B815> {}
public struct B815: Body {
    private static let prefix = "//client/chat/info/group/setting/B815"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B815.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B816Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B816, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B816TH: TypedRouterHandler<B816> {}
public struct B816: Body {
    private static let prefix = "//client/chat/info/group/setting/B816"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B816.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B817Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B817, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B817TH: TypedRouterHandler<B817> {}
public struct B817: Body {
    private static let prefix = "//client/chat/info/group/setting/B817"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B817.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B818Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B818, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B818TH: TypedRouterHandler<B818> {}
public struct B818: Body {
    private static let prefix = "//client/chat/info/group/setting/B818"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B818.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B819Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B819, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B819TH: TypedRouterHandler<B819> {}
public struct B819: Body {
    private static let prefix = "//client/chat/info/group/setting/B819"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B819.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B820Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B820, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B820TH: TypedRouterHandler<B820> {}
public struct B820: Body {
    private static let prefix = "//client/chat/info/group/setting/B820"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B820.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B821Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B821, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B821TH: TypedRouterHandler<B821> {}
public struct B821: Body {
    private static let prefix = "//client/chat/info/group/setting/B821"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B821.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B822Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B822, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B822TH: TypedRouterHandler<B822> {}
public struct B822: Body {
    private static let prefix = "//client/chat/info/group/setting/B822"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B822.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B823Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B823, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B823TH: TypedRouterHandler<B823> {}
public struct B823: Body {
    private static let prefix = "//client/chat/info/group/setting/B823"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B823.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B824Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B824, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B824TH: TypedRouterHandler<B824> {}
public struct B824: Body {
    private static let prefix = "//client/chat/info/group/setting/B824"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B824.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B825Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B825, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B825TH: TypedRouterHandler<B825> {}
public struct B825: Body {
    private static let prefix = "//client/chat/info/group/setting/B825"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B825.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B826Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B826, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B826TH: TypedRouterHandler<B826> {}
public struct B826: Body {
    private static let prefix = "//client/chat/info/group/setting/B826"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B826.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B827Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B827, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B827TH: TypedRouterHandler<B827> {}
public struct B827: Body {
    private static let prefix = "//client/chat/info/group/setting/B827"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B827.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B828Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B828, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B828TH: TypedRouterHandler<B828> {}
public struct B828: Body {
    private static let prefix = "//client/chat/info/group/setting/B828"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B828.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B829Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B829, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B829TH: TypedRouterHandler<B829> {}
public struct B829: Body {
    private static let prefix = "//client/chat/info/group/setting/B829"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B829.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B830Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B830, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B830TH: TypedRouterHandler<B830> {}
public struct B830: Body {
    private static let prefix = "//client/chat/info/group/setting/B830"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B830.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B831Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B831, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B831TH: TypedRouterHandler<B831> {}
public struct B831: Body {
    private static let prefix = "//client/chat/info/group/setting/B831"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B831.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B832Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B832, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B832TH: TypedRouterHandler<B832> {}
public struct B832: Body {
    private static let prefix = "//client/chat/info/group/setting/B832"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B832.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B833Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B833, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B833TH: TypedRouterHandler<B833> {}
public struct B833: Body {
    private static let prefix = "//client/chat/info/group/setting/B833"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B833.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B834Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B834, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B834TH: TypedRouterHandler<B834> {}
public struct B834: Body {
    private static let prefix = "//client/chat/info/group/setting/B834"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B834.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B835Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B835, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B835TH: TypedRouterHandler<B835> {}
public struct B835: Body {
    private static let prefix = "//client/chat/info/group/setting/B835"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B835.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B836Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B836, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B836TH: TypedRouterHandler<B836> {}
public struct B836: Body {
    private static let prefix = "//client/chat/info/group/setting/B836"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B836.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B837Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B837, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B837TH: TypedRouterHandler<B837> {}
public struct B837: Body {
    private static let prefix = "//client/chat/info/group/setting/B837"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B837.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B838Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B838, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B838TH: TypedRouterHandler<B838> {}
public struct B838: Body {
    private static let prefix = "//client/chat/info/group/setting/B838"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B838.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B839Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B839, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B839TH: TypedRouterHandler<B839> {}
public struct B839: Body {
    private static let prefix = "//client/chat/info/group/setting/B839"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B839.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B840Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B840, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B840TH: TypedRouterHandler<B840> {}
public struct B840: Body {
    private static let prefix = "//client/chat/info/group/setting/B840"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B840.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B841Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B841, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B841TH: TypedRouterHandler<B841> {}
public struct B841: Body {
    private static let prefix = "//client/chat/info/group/setting/B841"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B841.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B842Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B842, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B842TH: TypedRouterHandler<B842> {}
public struct B842: Body {
    private static let prefix = "//client/chat/info/group/setting/B842"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B842.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B843Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B843, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B843TH: TypedRouterHandler<B843> {}
public struct B843: Body {
    private static let prefix = "//client/chat/info/group/setting/B843"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B843.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B844Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B844, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B844TH: TypedRouterHandler<B844> {}
public struct B844: Body {
    private static let prefix = "//client/chat/info/group/setting/B844"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B844.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B845Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B845, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B845TH: TypedRouterHandler<B845> {}
public struct B845: Body {
    private static let prefix = "//client/chat/info/group/setting/B845"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B845.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B846Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B846, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B846TH: TypedRouterHandler<B846> {}
public struct B846: Body {
    private static let prefix = "//client/chat/info/group/setting/B846"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B846.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B847Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B847, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B847TH: TypedRouterHandler<B847> {}
public struct B847: Body {
    private static let prefix = "//client/chat/info/group/setting/B847"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B847.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B848Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B848, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B848TH: TypedRouterHandler<B848> {}
public struct B848: Body {
    private static let prefix = "//client/chat/info/group/setting/B848"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B848.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B849Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B849, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B849TH: TypedRouterHandler<B849> {}
public struct B849: Body {
    private static let prefix = "//client/chat/info/group/setting/B849"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B849.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B850Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B850, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B850TH: TypedRouterHandler<B850> {}
public struct B850: Body {
    private static let prefix = "//client/chat/info/group/setting/B850"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B850.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B851Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B851, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B851TH: TypedRouterHandler<B851> {}
public struct B851: Body {
    private static let prefix = "//client/chat/info/group/setting/B851"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B851.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B852Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B852, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B852TH: TypedRouterHandler<B852> {}
public struct B852: Body {
    private static let prefix = "//client/chat/info/group/setting/B852"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B852.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B853Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B853, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B853TH: TypedRouterHandler<B853> {}
public struct B853: Body {
    private static let prefix = "//client/chat/info/group/setting/B853"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B853.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B854Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B854, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B854TH: TypedRouterHandler<B854> {}
public struct B854: Body {
    private static let prefix = "//client/chat/info/group/setting/B854"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B854.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B855Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B855, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B855TH: TypedRouterHandler<B855> {}
public struct B855: Body {
    private static let prefix = "//client/chat/info/group/setting/B855"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B855.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B856Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B856, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B856TH: TypedRouterHandler<B856> {}
public struct B856: Body {
    private static let prefix = "//client/chat/info/group/setting/B856"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B856.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B857Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B857, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B857TH: TypedRouterHandler<B857> {}
public struct B857: Body {
    private static let prefix = "//client/chat/info/group/setting/B857"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B857.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B858Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B858, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B858TH: TypedRouterHandler<B858> {}
public struct B858: Body {
    private static let prefix = "//client/chat/info/group/setting/B858"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B858.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B859Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B859, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B859TH: TypedRouterHandler<B859> {}
public struct B859: Body {
    private static let prefix = "//client/chat/info/group/setting/B859"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B859.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B860Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B860, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B860TH: TypedRouterHandler<B860> {}
public struct B860: Body {
    private static let prefix = "//client/chat/info/group/setting/B860"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B860.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B861Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B861, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B861TH: TypedRouterHandler<B861> {}
public struct B861: Body {
    private static let prefix = "//client/chat/info/group/setting/B861"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B861.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B862Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B862, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B862TH: TypedRouterHandler<B862> {}
public struct B862: Body {
    private static let prefix = "//client/chat/info/group/setting/B862"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B862.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B863Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B863, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B863TH: TypedRouterHandler<B863> {}
public struct B863: Body {
    private static let prefix = "//client/chat/info/group/setting/B863"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B863.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B864Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B864, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B864TH: TypedRouterHandler<B864> {}
public struct B864: Body {
    private static let prefix = "//client/chat/info/group/setting/B864"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B864.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B865Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B865, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B865TH: TypedRouterHandler<B865> {}
public struct B865: Body {
    private static let prefix = "//client/chat/info/group/setting/B865"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B865.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B866Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B866, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B866TH: TypedRouterHandler<B866> {}
public struct B866: Body {
    private static let prefix = "//client/chat/info/group/setting/B866"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B866.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B867Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B867, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B867TH: TypedRouterHandler<B867> {}
public struct B867: Body {
    private static let prefix = "//client/chat/info/group/setting/B867"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B867.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B868Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B868, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B868TH: TypedRouterHandler<B868> {}
public struct B868: Body {
    private static let prefix = "//client/chat/info/group/setting/B868"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B868.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B869Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B869, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B869TH: TypedRouterHandler<B869> {}
public struct B869: Body {
    private static let prefix = "//client/chat/info/group/setting/B869"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B869.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B870Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B870, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B870TH: TypedRouterHandler<B870> {}
public struct B870: Body {
    private static let prefix = "//client/chat/info/group/setting/B870"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B870.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B871Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B871, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B871TH: TypedRouterHandler<B871> {}
public struct B871: Body {
    private static let prefix = "//client/chat/info/group/setting/B871"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B871.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B872Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B872, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B872TH: TypedRouterHandler<B872> {}
public struct B872: Body {
    private static let prefix = "//client/chat/info/group/setting/B872"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B872.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B873Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B873, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B873TH: TypedRouterHandler<B873> {}
public struct B873: Body {
    private static let prefix = "//client/chat/info/group/setting/B873"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B873.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B874Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B874, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B874TH: TypedRouterHandler<B874> {}
public struct B874: Body {
    private static let prefix = "//client/chat/info/group/setting/B874"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B874.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B875Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B875, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B875TH: TypedRouterHandler<B875> {}
public struct B875: Body {
    private static let prefix = "//client/chat/info/group/setting/B875"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B875.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B876Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B876, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B876TH: TypedRouterHandler<B876> {}
public struct B876: Body {
    private static let prefix = "//client/chat/info/group/setting/B876"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B876.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B877Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B877, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B877TH: TypedRouterHandler<B877> {}
public struct B877: Body {
    private static let prefix = "//client/chat/info/group/setting/B877"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B877.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B878Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B878, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B878TH: TypedRouterHandler<B878> {}
public struct B878: Body {
    private static let prefix = "//client/chat/info/group/setting/B878"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B878.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B879Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B879, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B879TH: TypedRouterHandler<B879> {}
public struct B879: Body {
    private static let prefix = "//client/chat/info/group/setting/B879"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B879.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B880Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B880, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B880TH: TypedRouterHandler<B880> {}
public struct B880: Body {
    private static let prefix = "//client/chat/info/group/setting/B880"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B880.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B881Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B881, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B881TH: TypedRouterHandler<B881> {}
public struct B881: Body {
    private static let prefix = "//client/chat/info/group/setting/B881"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B881.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B882Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B882, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B882TH: TypedRouterHandler<B882> {}
public struct B882: Body {
    private static let prefix = "//client/chat/info/group/setting/B882"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B882.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B883Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B883, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B883TH: TypedRouterHandler<B883> {}
public struct B883: Body {
    private static let prefix = "//client/chat/info/group/setting/B883"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B883.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B884Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B884, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B884TH: TypedRouterHandler<B884> {}
public struct B884: Body {
    private static let prefix = "//client/chat/info/group/setting/B884"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B884.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B885Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B885, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B885TH: TypedRouterHandler<B885> {}
public struct B885: Body {
    private static let prefix = "//client/chat/info/group/setting/B885"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B885.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B886Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B886, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B886TH: TypedRouterHandler<B886> {}
public struct B886: Body {
    private static let prefix = "//client/chat/info/group/setting/B886"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B886.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B887Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B887, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B887TH: TypedRouterHandler<B887> {}
public struct B887: Body {
    private static let prefix = "//client/chat/info/group/setting/B887"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B887.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B888Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B888, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B888TH: TypedRouterHandler<B888> {}
public struct B888: Body {
    private static let prefix = "//client/chat/info/group/setting/B888"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B888.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B889Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B889, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B889TH: TypedRouterHandler<B889> {}
public struct B889: Body {
    private static let prefix = "//client/chat/info/group/setting/B889"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B889.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B890Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B890, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B890TH: TypedRouterHandler<B890> {}
public struct B890: Body {
    private static let prefix = "//client/chat/info/group/setting/B890"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B890.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B891Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B891, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B891TH: TypedRouterHandler<B891> {}
public struct B891: Body {
    private static let prefix = "//client/chat/info/group/setting/B891"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B891.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B892Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B892, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B892TH: TypedRouterHandler<B892> {}
public struct B892: Body {
    private static let prefix = "//client/chat/info/group/setting/B892"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B892.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B893Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B893, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B893TH: TypedRouterHandler<B893> {}
public struct B893: Body {
    private static let prefix = "//client/chat/info/group/setting/B893"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B893.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B894Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B894, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B894TH: TypedRouterHandler<B894> {}
public struct B894: Body {
    private static let prefix = "//client/chat/info/group/setting/B894"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B894.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B895Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B895, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B895TH: TypedRouterHandler<B895> {}
public struct B895: Body {
    private static let prefix = "//client/chat/info/group/setting/B895"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B895.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B896Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B896, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B896TH: TypedRouterHandler<B896> {}
public struct B896: Body {
    private static let prefix = "//client/chat/info/group/setting/B896"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B896.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B897Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B897, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B897TH: TypedRouterHandler<B897> {}
public struct B897: Body {
    private static let prefix = "//client/chat/info/group/setting/B897"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B897.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B898Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B898, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B898TH: TypedRouterHandler<B898> {}
public struct B898: Body {
    private static let prefix = "//client/chat/info/group/setting/B898"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B898.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B899Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B899, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B899TH: TypedRouterHandler<B899> {}
public struct B899: Body {
    private static let prefix = "//client/chat/info/group/setting/B899"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B899.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B900Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B900, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B900TH: TypedRouterHandler<B900> {}
public struct B900: Body {
    private static let prefix = "//client/chat/info/group/setting/B900"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B900.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B901Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B901, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B901TH: TypedRouterHandler<B901> {}
public struct B901: Body {
    private static let prefix = "//client/chat/info/group/setting/B901"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B901.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B902Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B902, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B902TH: TypedRouterHandler<B902> {}
public struct B902: Body {
    private static let prefix = "//client/chat/info/group/setting/B902"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B902.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B903Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B903, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B903TH: TypedRouterHandler<B903> {}
public struct B903: Body {
    private static let prefix = "//client/chat/info/group/setting/B903"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B903.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B904Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B904, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B904TH: TypedRouterHandler<B904> {}
public struct B904: Body {
    private static let prefix = "//client/chat/info/group/setting/B904"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B904.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B905Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B905, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B905TH: TypedRouterHandler<B905> {}
public struct B905: Body {
    private static let prefix = "//client/chat/info/group/setting/B905"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B905.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B906Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B906, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B906TH: TypedRouterHandler<B906> {}
public struct B906: Body {
    private static let prefix = "//client/chat/info/group/setting/B906"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B906.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B907Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B907, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B907TH: TypedRouterHandler<B907> {}
public struct B907: Body {
    private static let prefix = "//client/chat/info/group/setting/B907"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B907.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B908Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B908, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B908TH: TypedRouterHandler<B908> {}
public struct B908: Body {
    private static let prefix = "//client/chat/info/group/setting/B908"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B908.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B909Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B909, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B909TH: TypedRouterHandler<B909> {}
public struct B909: Body {
    private static let prefix = "//client/chat/info/group/setting/B909"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B909.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B910Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B910, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B910TH: TypedRouterHandler<B910> {}
public struct B910: Body {
    private static let prefix = "//client/chat/info/group/setting/B910"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B910.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B911Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B911, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B911TH: TypedRouterHandler<B911> {}
public struct B911: Body {
    private static let prefix = "//client/chat/info/group/setting/B911"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B911.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B912Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B912, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B912TH: TypedRouterHandler<B912> {}
public struct B912: Body {
    private static let prefix = "//client/chat/info/group/setting/B912"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B912.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B913Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B913, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B913TH: TypedRouterHandler<B913> {}
public struct B913: Body {
    private static let prefix = "//client/chat/info/group/setting/B913"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B913.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B914Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B914, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B914TH: TypedRouterHandler<B914> {}
public struct B914: Body {
    private static let prefix = "//client/chat/info/group/setting/B914"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B914.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B915Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B915, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B915TH: TypedRouterHandler<B915> {}
public struct B915: Body {
    private static let prefix = "//client/chat/info/group/setting/B915"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B915.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B916Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B916, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B916TH: TypedRouterHandler<B916> {}
public struct B916: Body {
    private static let prefix = "//client/chat/info/group/setting/B916"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B916.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B917Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B917, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B917TH: TypedRouterHandler<B917> {}
public struct B917: Body {
    private static let prefix = "//client/chat/info/group/setting/B917"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B917.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B918Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B918, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B918TH: TypedRouterHandler<B918> {}
public struct B918: Body {
    private static let prefix = "//client/chat/info/group/setting/B918"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B918.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B919Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B919, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B919TH: TypedRouterHandler<B919> {}
public struct B919: Body {
    private static let prefix = "//client/chat/info/group/setting/B919"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B919.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B920Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B920, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B920TH: TypedRouterHandler<B920> {}
public struct B920: Body {
    private static let prefix = "//client/chat/info/group/setting/B920"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B920.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B921Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B921, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B921TH: TypedRouterHandler<B921> {}
public struct B921: Body {
    private static let prefix = "//client/chat/info/group/setting/B921"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B921.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B922Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B922, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B922TH: TypedRouterHandler<B922> {}
public struct B922: Body {
    private static let prefix = "//client/chat/info/group/setting/B922"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B922.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B923Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B923, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B923TH: TypedRouterHandler<B923> {}
public struct B923: Body {
    private static let prefix = "//client/chat/info/group/setting/B923"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B923.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B924Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B924, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B924TH: TypedRouterHandler<B924> {}
public struct B924: Body {
    private static let prefix = "//client/chat/info/group/setting/B924"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B924.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B925Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B925, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B925TH: TypedRouterHandler<B925> {}
public struct B925: Body {
    private static let prefix = "//client/chat/info/group/setting/B925"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B925.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B926Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B926, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B926TH: TypedRouterHandler<B926> {}
public struct B926: Body {
    private static let prefix = "//client/chat/info/group/setting/B926"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B926.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B927Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B927, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B927TH: TypedRouterHandler<B927> {}
public struct B927: Body {
    private static let prefix = "//client/chat/info/group/setting/B927"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B927.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B928Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B928, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B928TH: TypedRouterHandler<B928> {}
public struct B928: Body {
    private static let prefix = "//client/chat/info/group/setting/B928"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B928.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B929Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B929, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B929TH: TypedRouterHandler<B929> {}
public struct B929: Body {
    private static let prefix = "//client/chat/info/group/setting/B929"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B929.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B930Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B930, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B930TH: TypedRouterHandler<B930> {}
public struct B930: Body {
    private static let prefix = "//client/chat/info/group/setting/B930"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B930.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B931Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B931, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B931TH: TypedRouterHandler<B931> {}
public struct B931: Body {
    private static let prefix = "//client/chat/info/group/setting/B931"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B931.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B932Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B932, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B932TH: TypedRouterHandler<B932> {}
public struct B932: Body {
    private static let prefix = "//client/chat/info/group/setting/B932"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B932.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B933Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B933, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B933TH: TypedRouterHandler<B933> {}
public struct B933: Body {
    private static let prefix = "//client/chat/info/group/setting/B933"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B933.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B934Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B934, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B934TH: TypedRouterHandler<B934> {}
public struct B934: Body {
    private static let prefix = "//client/chat/info/group/setting/B934"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B934.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B935Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B935, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B935TH: TypedRouterHandler<B935> {}
public struct B935: Body {
    private static let prefix = "//client/chat/info/group/setting/B935"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B935.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B936Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B936, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B936TH: TypedRouterHandler<B936> {}
public struct B936: Body {
    private static let prefix = "//client/chat/info/group/setting/B936"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B936.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B937Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B937, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B937TH: TypedRouterHandler<B937> {}
public struct B937: Body {
    private static let prefix = "//client/chat/info/group/setting/B937"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B937.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B938Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B938, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B938TH: TypedRouterHandler<B938> {}
public struct B938: Body {
    private static let prefix = "//client/chat/info/group/setting/B938"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B938.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B939Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B939, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B939TH: TypedRouterHandler<B939> {}
public struct B939: Body {
    private static let prefix = "//client/chat/info/group/setting/B939"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B939.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B940Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B940, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B940TH: TypedRouterHandler<B940> {}
public struct B940: Body {
    private static let prefix = "//client/chat/info/group/setting/B940"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B940.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B941Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B941, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B941TH: TypedRouterHandler<B941> {}
public struct B941: Body {
    private static let prefix = "//client/chat/info/group/setting/B941"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B941.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B942Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B942, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B942TH: TypedRouterHandler<B942> {}
public struct B942: Body {
    private static let prefix = "//client/chat/info/group/setting/B942"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B942.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B943Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B943, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B943TH: TypedRouterHandler<B943> {}
public struct B943: Body {
    private static let prefix = "//client/chat/info/group/setting/B943"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B943.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B944Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B944, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B944TH: TypedRouterHandler<B944> {}
public struct B944: Body {
    private static let prefix = "//client/chat/info/group/setting/B944"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B944.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B945Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B945, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B945TH: TypedRouterHandler<B945> {}
public struct B945: Body {
    private static let prefix = "//client/chat/info/group/setting/B945"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B945.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B946Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B946, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B946TH: TypedRouterHandler<B946> {}
public struct B946: Body {
    private static let prefix = "//client/chat/info/group/setting/B946"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B946.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B947Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B947, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B947TH: TypedRouterHandler<B947> {}
public struct B947: Body {
    private static let prefix = "//client/chat/info/group/setting/B947"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B947.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B948Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B948, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B948TH: TypedRouterHandler<B948> {}
public struct B948: Body {
    private static let prefix = "//client/chat/info/group/setting/B948"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B948.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B949Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B949, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B949TH: TypedRouterHandler<B949> {}
public struct B949: Body {
    private static let prefix = "//client/chat/info/group/setting/B949"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B949.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B950Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B950, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B950TH: TypedRouterHandler<B950> {}
public struct B950: Body {
    private static let prefix = "//client/chat/info/group/setting/B950"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B950.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B951Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B951, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B951TH: TypedRouterHandler<B951> {}
public struct B951: Body {
    private static let prefix = "//client/chat/info/group/setting/B951"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B951.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B952Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B952, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B952TH: TypedRouterHandler<B952> {}
public struct B952: Body {
    private static let prefix = "//client/chat/info/group/setting/B952"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B952.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B953Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B953, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B953TH: TypedRouterHandler<B953> {}
public struct B953: Body {
    private static let prefix = "//client/chat/info/group/setting/B953"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B953.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B954Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B954, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B954TH: TypedRouterHandler<B954> {}
public struct B954: Body {
    private static let prefix = "//client/chat/info/group/setting/B954"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B954.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B955Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B955, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B955TH: TypedRouterHandler<B955> {}
public struct B955: Body {
    private static let prefix = "//client/chat/info/group/setting/B955"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B955.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B956Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B956, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B956TH: TypedRouterHandler<B956> {}
public struct B956: Body {
    private static let prefix = "//client/chat/info/group/setting/B956"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B956.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B957Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B957, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B957TH: TypedRouterHandler<B957> {}
public struct B957: Body {
    private static let prefix = "//client/chat/info/group/setting/B957"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B957.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B958Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B958, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B958TH: TypedRouterHandler<B958> {}
public struct B958: Body {
    private static let prefix = "//client/chat/info/group/setting/B958"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B958.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B959Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B959, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B959TH: TypedRouterHandler<B959> {}
public struct B959: Body {
    private static let prefix = "//client/chat/info/group/setting/B959"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B959.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B960Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B960, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B960TH: TypedRouterHandler<B960> {}
public struct B960: Body {
    private static let prefix = "//client/chat/info/group/setting/B960"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B960.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B961Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B961, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B961TH: TypedRouterHandler<B961> {}
public struct B961: Body {
    private static let prefix = "//client/chat/info/group/setting/B961"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B961.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B962Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B962, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B962TH: TypedRouterHandler<B962> {}
public struct B962: Body {
    private static let prefix = "//client/chat/info/group/setting/B962"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B962.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B963Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B963, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B963TH: TypedRouterHandler<B963> {}
public struct B963: Body {
    private static let prefix = "//client/chat/info/group/setting/B963"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B963.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B964Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B964, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B964TH: TypedRouterHandler<B964> {}
public struct B964: Body {
    private static let prefix = "//client/chat/info/group/setting/B964"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B964.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B965Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B965, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B965TH: TypedRouterHandler<B965> {}
public struct B965: Body {
    private static let prefix = "//client/chat/info/group/setting/B965"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B965.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B966Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B966, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B966TH: TypedRouterHandler<B966> {}
public struct B966: Body {
    private static let prefix = "//client/chat/info/group/setting/B966"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B966.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B967Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B967, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B967TH: TypedRouterHandler<B967> {}
public struct B967: Body {
    private static let prefix = "//client/chat/info/group/setting/B967"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B967.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B968Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B968, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B968TH: TypedRouterHandler<B968> {}
public struct B968: Body {
    private static let prefix = "//client/chat/info/group/setting/B968"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B968.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B969Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B969, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B969TH: TypedRouterHandler<B969> {}
public struct B969: Body {
    private static let prefix = "//client/chat/info/group/setting/B969"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B969.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B970Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B970, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B970TH: TypedRouterHandler<B970> {}
public struct B970: Body {
    private static let prefix = "//client/chat/info/group/setting/B970"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B970.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B971Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B971, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B971TH: TypedRouterHandler<B971> {}
public struct B971: Body {
    private static let prefix = "//client/chat/info/group/setting/B971"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B971.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B972Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B972, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B972TH: TypedRouterHandler<B972> {}
public struct B972: Body {
    private static let prefix = "//client/chat/info/group/setting/B972"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B972.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B973Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B973, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B973TH: TypedRouterHandler<B973> {}
public struct B973: Body {
    private static let prefix = "//client/chat/info/group/setting/B973"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B973.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B974Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B974, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B974TH: TypedRouterHandler<B974> {}
public struct B974: Body {
    private static let prefix = "//client/chat/info/group/setting/B974"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B974.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B975Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B975, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B975TH: TypedRouterHandler<B975> {}
public struct B975: Body {
    private static let prefix = "//client/chat/info/group/setting/B975"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B975.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B976Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B976, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B976TH: TypedRouterHandler<B976> {}
public struct B976: Body {
    private static let prefix = "//client/chat/info/group/setting/B976"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B976.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B977Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B977, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B977TH: TypedRouterHandler<B977> {}
public struct B977: Body {
    private static let prefix = "//client/chat/info/group/setting/B977"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B977.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B978Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B978, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B978TH: TypedRouterHandler<B978> {}
public struct B978: Body {
    private static let prefix = "//client/chat/info/group/setting/B978"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B978.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B979Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B979, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B979TH: TypedRouterHandler<B979> {}
public struct B979: Body {
    private static let prefix = "//client/chat/info/group/setting/B979"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B979.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B980Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B980, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B980TH: TypedRouterHandler<B980> {}
public struct B980: Body {
    private static let prefix = "//client/chat/info/group/setting/B980"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B980.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B981Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B981, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B981TH: TypedRouterHandler<B981> {}
public struct B981: Body {
    private static let prefix = "//client/chat/info/group/setting/B981"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B981.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B982Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B982, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B982TH: TypedRouterHandler<B982> {}
public struct B982: Body {
    private static let prefix = "//client/chat/info/group/setting/B982"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B982.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B983Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B983, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B983TH: TypedRouterHandler<B983> {}
public struct B983: Body {
    private static let prefix = "//client/chat/info/group/setting/B983"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B983.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B984Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B984, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B984TH: TypedRouterHandler<B984> {}
public struct B984: Body {
    private static let prefix = "//client/chat/info/group/setting/B984"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B984.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B985Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B985, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B985TH: TypedRouterHandler<B985> {}
public struct B985: Body {
    private static let prefix = "//client/chat/info/group/setting/B985"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B985.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B986Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B986, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B986TH: TypedRouterHandler<B986> {}
public struct B986: Body {
    private static let prefix = "//client/chat/info/group/setting/B986"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B986.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B987Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B987, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B987TH: TypedRouterHandler<B987> {}
public struct B987: Body {
    private static let prefix = "//client/chat/info/group/setting/B987"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B987.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B988Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B988, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B988TH: TypedRouterHandler<B988> {}
public struct B988: Body {
    private static let prefix = "//client/chat/info/group/setting/B988"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B988.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B989Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B989, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B989TH: TypedRouterHandler<B989> {}
public struct B989: Body {
    private static let prefix = "//client/chat/info/group/setting/B989"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B989.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B990Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B990, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B990TH: TypedRouterHandler<B990> {}
public struct B990: Body {
    private static let prefix = "//client/chat/info/group/setting/B990"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B990.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B991Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B991, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B991TH: TypedRouterHandler<B991> {}
public struct B991: Body {
    private static let prefix = "//client/chat/info/group/setting/B991"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B991.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B992Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B992, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B992TH: TypedRouterHandler<B992> {}
public struct B992: Body {
    private static let prefix = "//client/chat/info/group/setting/B992"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B992.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B993Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B993, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B993TH: TypedRouterHandler<B993> {}
public struct B993: Body {
    private static let prefix = "//client/chat/info/group/setting/B993"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B993.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B994Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B994, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B994TH: TypedRouterHandler<B994> {}
public struct B994: Body {
    private static let prefix = "//client/chat/info/group/setting/B994"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B994.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B995Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B995, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B995TH: TypedRouterHandler<B995> {}
public struct B995: Body {
    private static let prefix = "//client/chat/info/group/setting/B995"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B995.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B996Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B996, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B996TH: TypedRouterHandler<B996> {}
public struct B996: Body {
    private static let prefix = "//client/chat/info/group/setting/B996"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B996.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B997Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B997, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B997TH: TypedRouterHandler<B997> {}
public struct B997: Body {
    private static let prefix = "//client/chat/info/group/setting/B997"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B997.prefix)/\(chatId)")!
    }
    public let chatId: String
}
public final class B998Handler: UserTypedRouterHandler {
    static public func compatibleMode() -> Bool { false }
    public func handle(_ body: B998, req: EENavigator.Request, res: Response) throws {
        res.end(resource: nil)
    }
}
public final class B998TH: TypedRouterHandler<B998> {}
public struct B998: Body {
    private static let prefix = "//client/chat/info/group/setting/B998"
    public static var patternConfig: PatternConfig {
        return PatternConfig(pattern: "\(prefix)/:chatId", type: .path)
    }
    public var _url: URL {
        return URL(string: "\(B998.prefix)/\(chatId)")!
    }
    public let chatId: String
}

func registerWrapFactory() {
    _ = Navigator.shared.wrapFactory({ () -> A0 in A0() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A1 in A1() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A2 in A2() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A3 in A3() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A4 in A4() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A5 in A5() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A6 in A6() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A7 in A7() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A8 in A8() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A9 in A9() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A10 in A10() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A11 in A11() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A12 in A12() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A13 in A13() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A14 in A14() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A15 in A15() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A16 in A16() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A17 in A17() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A18 in A18() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A19 in A19() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A20 in A20() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A21 in A21() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A22 in A22() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A23 in A23() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A24 in A24() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A25 in A25() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A26 in A26() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A27 in A27() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A28 in A28() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A29 in A29() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A30 in A30() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A31 in A31() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A32 in A32() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A33 in A33() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A34 in A34() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A35 in A35() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A36 in A36() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A37 in A37() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A38 in A38() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A39 in A39() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A40 in A40() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A41 in A41() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A42 in A42() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A43 in A43() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A44 in A44() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A45 in A45() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A46 in A46() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A47 in A47() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A48 in A48() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A49 in A49() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A50 in A50() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A51 in A51() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A52 in A52() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A53 in A53() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A54 in A54() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A55 in A55() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A56 in A56() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A57 in A57() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A58 in A58() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A59 in A59() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A60 in A60() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A61 in A61() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A62 in A62() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A63 in A63() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A64 in A64() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A65 in A65() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A66 in A66() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A67 in A67() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A68 in A68() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A69 in A69() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A70 in A70() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A71 in A71() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A72 in A72() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A73 in A73() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A74 in A74() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A75 in A75() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A76 in A76() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A77 in A77() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A78 in A78() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A79 in A79() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A80 in A80() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A81 in A81() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A82 in A82() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A83 in A83() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A84 in A84() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A85 in A85() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A86 in A86() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A87 in A87() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A88 in A88() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A89 in A89() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A90 in A90() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A91 in A91() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A92 in A92() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A93 in A93() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A94 in A94() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A95 in A95() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A96 in A96() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A97 in A97() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A98 in A98() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A99 in A99() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A100 in A100() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A101 in A101() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A102 in A102() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A103 in A103() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A104 in A104() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A105 in A105() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A106 in A106() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A107 in A107() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A108 in A108() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A109 in A109() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A110 in A110() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A111 in A111() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A112 in A112() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A113 in A113() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A114 in A114() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A115 in A115() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A116 in A116() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A117 in A117() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A118 in A118() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A119 in A119() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A120 in A120() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A121 in A121() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A122 in A122() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A123 in A123() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A124 in A124() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A125 in A125() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A126 in A126() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A127 in A127() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A128 in A128() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A129 in A129() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A130 in A130() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A131 in A131() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A132 in A132() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A133 in A133() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A134 in A134() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A135 in A135() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A136 in A136() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A137 in A137() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A138 in A138() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A139 in A139() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A140 in A140() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A141 in A141() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A142 in A142() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A143 in A143() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A144 in A144() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A145 in A145() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A146 in A146() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A147 in A147() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A148 in A148() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A149 in A149() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A150 in A150() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A151 in A151() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A152 in A152() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A153 in A153() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A154 in A154() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A155 in A155() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A156 in A156() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A157 in A157() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A158 in A158() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A159 in A159() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A160 in A160() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A161 in A161() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A162 in A162() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A163 in A163() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A164 in A164() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A165 in A165() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A166 in A166() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A167 in A167() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A168 in A168() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A169 in A169() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A170 in A170() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A171 in A171() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A172 in A172() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A173 in A173() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A174 in A174() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A175 in A175() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A176 in A176() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A177 in A177() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A178 in A178() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A179 in A179() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A180 in A180() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A181 in A181() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A182 in A182() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A183 in A183() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A184 in A184() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A185 in A185() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A186 in A186() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A187 in A187() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A188 in A188() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A189 in A189() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A190 in A190() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A191 in A191() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A192 in A192() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A193 in A193() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A194 in A194() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A195 in A195() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A196 in A196() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A197 in A197() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A198 in A198() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A199 in A199() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A200 in A200() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A201 in A201() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A202 in A202() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A203 in A203() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A204 in A204() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A205 in A205() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A206 in A206() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A207 in A207() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A208 in A208() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A209 in A209() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A210 in A210() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A211 in A211() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A212 in A212() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A213 in A213() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A214 in A214() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A215 in A215() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A216 in A216() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A217 in A217() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A218 in A218() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A219 in A219() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A220 in A220() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A221 in A221() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A222 in A222() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A223 in A223() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A224 in A224() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A225 in A225() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A226 in A226() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A227 in A227() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A228 in A228() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A229 in A229() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A230 in A230() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A231 in A231() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A232 in A232() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A233 in A233() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A234 in A234() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A235 in A235() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A236 in A236() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A237 in A237() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A238 in A238() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A239 in A239() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A240 in A240() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A241 in A241() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A242 in A242() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A243 in A243() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A244 in A244() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A245 in A245() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A246 in A246() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A247 in A247() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A248 in A248() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A249 in A249() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A250 in A250() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A251 in A251() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A252 in A252() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A253 in A253() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A254 in A254() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A255 in A255() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A256 in A256() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A257 in A257() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A258 in A258() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A259 in A259() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A260 in A260() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A261 in A261() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A262 in A262() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A263 in A263() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A264 in A264() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A265 in A265() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A266 in A266() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A267 in A267() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A268 in A268() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A269 in A269() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A270 in A270() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A271 in A271() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A272 in A272() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A273 in A273() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A274 in A274() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A275 in A275() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A276 in A276() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A277 in A277() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A278 in A278() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A279 in A279() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A280 in A280() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A281 in A281() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A282 in A282() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A283 in A283() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A284 in A284() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A285 in A285() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A286 in A286() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A287 in A287() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A288 in A288() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A289 in A289() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A290 in A290() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A291 in A291() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A292 in A292() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A293 in A293() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A294 in A294() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A295 in A295() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A296 in A296() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A297 in A297() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A298 in A298() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A299 in A299() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A300 in A300() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A301 in A301() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A302 in A302() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A303 in A303() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A304 in A304() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A305 in A305() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A306 in A306() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A307 in A307() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A308 in A308() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A309 in A309() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A310 in A310() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A311 in A311() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A312 in A312() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A313 in A313() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A314 in A314() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A315 in A315() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A316 in A316() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A317 in A317() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A318 in A318() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A319 in A319() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A320 in A320() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A321 in A321() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A322 in A322() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A323 in A323() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A324 in A324() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A325 in A325() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A326 in A326() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A327 in A327() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A328 in A328() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A329 in A329() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A330 in A330() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A331 in A331() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A332 in A332() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A333 in A333() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A334 in A334() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A335 in A335() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A336 in A336() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A337 in A337() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A338 in A338() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A339 in A339() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A340 in A340() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A341 in A341() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A342 in A342() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A343 in A343() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A344 in A344() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A345 in A345() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A346 in A346() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A347 in A347() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A348 in A348() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A349 in A349() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A350 in A350() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A351 in A351() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A352 in A352() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A353 in A353() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A354 in A354() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A355 in A355() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A356 in A356() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A357 in A357() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A358 in A358() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A359 in A359() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A360 in A360() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A361 in A361() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A362 in A362() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A363 in A363() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A364 in A364() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A365 in A365() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A366 in A366() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A367 in A367() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A368 in A368() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A369 in A369() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A370 in A370() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A371 in A371() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A372 in A372() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A373 in A373() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A374 in A374() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A375 in A375() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A376 in A376() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A377 in A377() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A378 in A378() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A379 in A379() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A380 in A380() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A381 in A381() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A382 in A382() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A383 in A383() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A384 in A384() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A385 in A385() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A386 in A386() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A387 in A387() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A388 in A388() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A389 in A389() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A390 in A390() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A391 in A391() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A392 in A392() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A393 in A393() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A394 in A394() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A395 in A395() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A396 in A396() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A397 in A397() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A398 in A398() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A399 in A399() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A400 in A400() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A401 in A401() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A402 in A402() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A403 in A403() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A404 in A404() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A405 in A405() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A406 in A406() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A407 in A407() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A408 in A408() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A409 in A409() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A410 in A410() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A411 in A411() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A412 in A412() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A413 in A413() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A414 in A414() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A415 in A415() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A416 in A416() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A417 in A417() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A418 in A418() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A419 in A419() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A420 in A420() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A421 in A421() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A422 in A422() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A423 in A423() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A424 in A424() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A425 in A425() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A426 in A426() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A427 in A427() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A428 in A428() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A429 in A429() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A430 in A430() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A431 in A431() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A432 in A432() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A433 in A433() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A434 in A434() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A435 in A435() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A436 in A436() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A437 in A437() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A438 in A438() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A439 in A439() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A440 in A440() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A441 in A441() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A442 in A442() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A443 in A443() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A444 in A444() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A445 in A445() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A446 in A446() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A447 in A447() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A448 in A448() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A449 in A449() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A450 in A450() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A451 in A451() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A452 in A452() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A453 in A453() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A454 in A454() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A455 in A455() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A456 in A456() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A457 in A457() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A458 in A458() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A459 in A459() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A460 in A460() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A461 in A461() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A462 in A462() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A463 in A463() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A464 in A464() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A465 in A465() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A466 in A466() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A467 in A467() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A468 in A468() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A469 in A469() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A470 in A470() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A471 in A471() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A472 in A472() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A473 in A473() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A474 in A474() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A475 in A475() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A476 in A476() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A477 in A477() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A478 in A478() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A479 in A479() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A480 in A480() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A481 in A481() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A482 in A482() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A483 in A483() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A484 in A484() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A485 in A485() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A486 in A486() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A487 in A487() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A488 in A488() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A489 in A489() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A490 in A490() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A491 in A491() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A492 in A492() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A493 in A493() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A494 in A494() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A495 in A495() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A496 in A496() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A497 in A497() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A498 in A498() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A499 in A499() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A500 in A500() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A501 in A501() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A502 in A502() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A503 in A503() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A504 in A504() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A505 in A505() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A506 in A506() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A507 in A507() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A508 in A508() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A509 in A509() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A510 in A510() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A511 in A511() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A512 in A512() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A513 in A513() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A514 in A514() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A515 in A515() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A516 in A516() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A517 in A517() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A518 in A518() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A519 in A519() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A520 in A520() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A521 in A521() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A522 in A522() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A523 in A523() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A524 in A524() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A525 in A525() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A526 in A526() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A527 in A527() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A528 in A528() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A529 in A529() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A530 in A530() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A531 in A531() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A532 in A532() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A533 in A533() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A534 in A534() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A535 in A535() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A536 in A536() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A537 in A537() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A538 in A538() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A539 in A539() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A540 in A540() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A541 in A541() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A542 in A542() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A543 in A543() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A544 in A544() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A545 in A545() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A546 in A546() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A547 in A547() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A548 in A548() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A549 in A549() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A550 in A550() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A551 in A551() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A552 in A552() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A553 in A553() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A554 in A554() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A555 in A555() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A556 in A556() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A557 in A557() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A558 in A558() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A559 in A559() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A560 in A560() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A561 in A561() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A562 in A562() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A563 in A563() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A564 in A564() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A565 in A565() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A566 in A566() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A567 in A567() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A568 in A568() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A569 in A569() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A570 in A570() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A571 in A571() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A572 in A572() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A573 in A573() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A574 in A574() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A575 in A575() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A576 in A576() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A577 in A577() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A578 in A578() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A579 in A579() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A580 in A580() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A581 in A581() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A582 in A582() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A583 in A583() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A584 in A584() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A585 in A585() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A586 in A586() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A587 in A587() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A588 in A588() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A589 in A589() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A590 in A590() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A591 in A591() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A592 in A592() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A593 in A593() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A594 in A594() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A595 in A595() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A596 in A596() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A597 in A597() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A598 in A598() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A599 in A599() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A600 in A600() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A601 in A601() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A602 in A602() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A603 in A603() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A604 in A604() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A605 in A605() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A606 in A606() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A607 in A607() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A608 in A608() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A609 in A609() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A610 in A610() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A611 in A611() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A612 in A612() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A613 in A613() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A614 in A614() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A615 in A615() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A616 in A616() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A617 in A617() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A618 in A618() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A619 in A619() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A620 in A620() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A621 in A621() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A622 in A622() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A623 in A623() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A624 in A624() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A625 in A625() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A626 in A626() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A627 in A627() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A628 in A628() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A629 in A629() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A630 in A630() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A631 in A631() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A632 in A632() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A633 in A633() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A634 in A634() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A635 in A635() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A636 in A636() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A637 in A637() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A638 in A638() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A639 in A639() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A640 in A640() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A641 in A641() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A642 in A642() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A643 in A643() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A644 in A644() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A645 in A645() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A646 in A646() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A647 in A647() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A648 in A648() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A649 in A649() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A650 in A650() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A651 in A651() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A652 in A652() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A653 in A653() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A654 in A654() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A655 in A655() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A656 in A656() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A657 in A657() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A658 in A658() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A659 in A659() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A660 in A660() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A661 in A661() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A662 in A662() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A663 in A663() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A664 in A664() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A665 in A665() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A666 in A666() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A667 in A667() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A668 in A668() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A669 in A669() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A670 in A670() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A671 in A671() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A672 in A672() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A673 in A673() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A674 in A674() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A675 in A675() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A676 in A676() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A677 in A677() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A678 in A678() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A679 in A679() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A680 in A680() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A681 in A681() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A682 in A682() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A683 in A683() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A684 in A684() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A685 in A685() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A686 in A686() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A687 in A687() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A688 in A688() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A689 in A689() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A690 in A690() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A691 in A691() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A692 in A692() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A693 in A693() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A694 in A694() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A695 in A695() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A696 in A696() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A697 in A697() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A698 in A698() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A699 in A699() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A700 in A700() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A701 in A701() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A702 in A702() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A703 in A703() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A704 in A704() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A705 in A705() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A706 in A706() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A707 in A707() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A708 in A708() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A709 in A709() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A710 in A710() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A711 in A711() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A712 in A712() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A713 in A713() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A714 in A714() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A715 in A715() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A716 in A716() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A717 in A717() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A718 in A718() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A719 in A719() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A720 in A720() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A721 in A721() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A722 in A722() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A723 in A723() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A724 in A724() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A725 in A725() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A726 in A726() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A727 in A727() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A728 in A728() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A729 in A729() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A730 in A730() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A731 in A731() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A732 in A732() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A733 in A733() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A734 in A734() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A735 in A735() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A736 in A736() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A737 in A737() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A738 in A738() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A739 in A739() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A740 in A740() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A741 in A741() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A742 in A742() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A743 in A743() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A744 in A744() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A745 in A745() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A746 in A746() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A747 in A747() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A748 in A748() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A749 in A749() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A750 in A750() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A751 in A751() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A752 in A752() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A753 in A753() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A754 in A754() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A755 in A755() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A756 in A756() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A757 in A757() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A758 in A758() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A759 in A759() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A760 in A760() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A761 in A761() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A762 in A762() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A763 in A763() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A764 in A764() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A765 in A765() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A766 in A766() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A767 in A767() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A768 in A768() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A769 in A769() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A770 in A770() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A771 in A771() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A772 in A772() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A773 in A773() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A774 in A774() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A775 in A775() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A776 in A776() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A777 in A777() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A778 in A778() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A779 in A779() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A780 in A780() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A781 in A781() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A782 in A782() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A783 in A783() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A784 in A784() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A785 in A785() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A786 in A786() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A787 in A787() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A788 in A788() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A789 in A789() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A790 in A790() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A791 in A791() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A792 in A792() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A793 in A793() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A794 in A794() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A795 in A795() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A796 in A796() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A797 in A797() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A798 in A798() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A799 in A799() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A800 in A800() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A801 in A801() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A802 in A802() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A803 in A803() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A804 in A804() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A805 in A805() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A806 in A806() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A807 in A807() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A808 in A808() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A809 in A809() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A810 in A810() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A811 in A811() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A812 in A812() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A813 in A813() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A814 in A814() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A815 in A815() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A816 in A816() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A817 in A817() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A818 in A818() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A819 in A819() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A820 in A820() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A821 in A821() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A822 in A822() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A823 in A823() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A824 in A824() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A825 in A825() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A826 in A826() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A827 in A827() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A828 in A828() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A829 in A829() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A830 in A830() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A831 in A831() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A832 in A832() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A833 in A833() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A834 in A834() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A835 in A835() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A836 in A836() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A837 in A837() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A838 in A838() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A839 in A839() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A840 in A840() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A841 in A841() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A842 in A842() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A843 in A843() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A844 in A844() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A845 in A845() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A846 in A846() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A847 in A847() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A848 in A848() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A849 in A849() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A850 in A850() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A851 in A851() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A852 in A852() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A853 in A853() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A854 in A854() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A855 in A855() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A856 in A856() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A857 in A857() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A858 in A858() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A859 in A859() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A860 in A860() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A861 in A861() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A862 in A862() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A863 in A863() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A864 in A864() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A865 in A865() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A866 in A866() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A867 in A867() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A868 in A868() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A869 in A869() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A870 in A870() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A871 in A871() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A872 in A872() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A873 in A873() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A874 in A874() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A875 in A875() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A876 in A876() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A877 in A877() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A878 in A878() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A879 in A879() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A880 in A880() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A881 in A881() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A882 in A882() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A883 in A883() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A884 in A884() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A885 in A885() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A886 in A886() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A887 in A887() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A888 in A888() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A889 in A889() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A890 in A890() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A891 in A891() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A892 in A892() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A893 in A893() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A894 in A894() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A895 in A895() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A896 in A896() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A897 in A897() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A898 in A898() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A899 in A899() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A900 in A900() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A901 in A901() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A902 in A902() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A903 in A903() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A904 in A904() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A905 in A905() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A906 in A906() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A907 in A907() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A908 in A908() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A909 in A909() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A910 in A910() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A911 in A911() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A912 in A912() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A913 in A913() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A914 in A914() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A915 in A915() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A916 in A916() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A917 in A917() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A918 in A918() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A919 in A919() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A920 in A920() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A921 in A921() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A922 in A922() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A923 in A923() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A924 in A924() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A925 in A925() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A926 in A926() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A927 in A927() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A928 in A928() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A929 in A929() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A930 in A930() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A931 in A931() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A932 in A932() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A933 in A933() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A934 in A934() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A935 in A935() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A936 in A936() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A937 in A937() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A938 in A938() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A939 in A939() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A940 in A940() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A941 in A941() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A942 in A942() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A943 in A943() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A944 in A944() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A945 in A945() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A946 in A946() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A947 in A947() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A948 in A948() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A949 in A949() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A950 in A950() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A951 in A951() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A952 in A952() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A953 in A953() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A954 in A954() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A955 in A955() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A956 in A956() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A957 in A957() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A958 in A958() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A959 in A959() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A960 in A960() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A961 in A961() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A962 in A962() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A963 in A963() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A964 in A964() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A965 in A965() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A966 in A966() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A967 in A967() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A968 in A968() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A969 in A969() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A970 in A970() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A971 in A971() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A972 in A972() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A973 in A973() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A974 in A974() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A975 in A975() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A976 in A976() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A977 in A977() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A978 in A978() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A979 in A979() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A980 in A980() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A981 in A981() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A982 in A982() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A983 in A983() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A984 in A984() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A985 in A985() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A986 in A986() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A987 in A987() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A988 in A988() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A989 in A989() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A990 in A990() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A991 in A991() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A992 in A992() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A993 in A993() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A994 in A994() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A995 in A995() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A996 in A996() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A997 in A997() }, cacheHandler: true)
    _ = Navigator.shared.wrapFactory({ () -> A998 in A998() }, cacheHandler: true)
}

class A0 {}
class A1 {}
class A2 {}
class A3 {}
class A4 {}
class A5 {}
class A6 {}
class A7 {}
class A8 {}
class A9 {}
class A10 {}
class A11 {}
class A12 {}
class A13 {}
class A14 {}
class A15 {}
class A16 {}
class A17 {}
class A18 {}
class A19 {}
class A20 {}
class A21 {}
class A22 {}
class A23 {}
class A24 {}
class A25 {}
class A26 {}
class A27 {}
class A28 {}
class A29 {}
class A30 {}
class A31 {}
class A32 {}
class A33 {}
class A34 {}
class A35 {}
class A36 {}
class A37 {}
class A38 {}
class A39 {}
class A40 {}
class A41 {}
class A42 {}
class A43 {}
class A44 {}
class A45 {}
class A46 {}
class A47 {}
class A48 {}
class A49 {}
class A50 {}
class A51 {}
class A52 {}
class A53 {}
class A54 {}
class A55 {}
class A56 {}
class A57 {}
class A58 {}
class A59 {}
class A60 {}
class A61 {}
class A62 {}
class A63 {}
class A64 {}
class A65 {}
class A66 {}
class A67 {}
class A68 {}
class A69 {}
class A70 {}
class A71 {}
class A72 {}
class A73 {}
class A74 {}
class A75 {}
class A76 {}
class A77 {}
class A78 {}
class A79 {}
class A80 {}
class A81 {}
class A82 {}
class A83 {}
class A84 {}
class A85 {}
class A86 {}
class A87 {}
class A88 {}
class A89 {}
class A90 {}
class A91 {}
class A92 {}
class A93 {}
class A94 {}
class A95 {}
class A96 {}
class A97 {}
class A98 {}
class A99 {}
class A100 {}
class A101 {}
class A102 {}
class A103 {}
class A104 {}
class A105 {}
class A106 {}
class A107 {}
class A108 {}
class A109 {}
class A110 {}
class A111 {}
class A112 {}
class A113 {}
class A114 {}
class A115 {}
class A116 {}
class A117 {}
class A118 {}
class A119 {}
class A120 {}
class A121 {}
class A122 {}
class A123 {}
class A124 {}
class A125 {}
class A126 {}
class A127 {}
class A128 {}
class A129 {}
class A130 {}
class A131 {}
class A132 {}
class A133 {}
class A134 {}
class A135 {}
class A136 {}
class A137 {}
class A138 {}
class A139 {}
class A140 {}
class A141 {}
class A142 {}
class A143 {}
class A144 {}
class A145 {}
class A146 {}
class A147 {}
class A148 {}
class A149 {}
class A150 {}
class A151 {}
class A152 {}
class A153 {}
class A154 {}
class A155 {}
class A156 {}
class A157 {}
class A158 {}
class A159 {}
class A160 {}
class A161 {}
class A162 {}
class A163 {}
class A164 {}
class A165 {}
class A166 {}
class A167 {}
class A168 {}
class A169 {}
class A170 {}
class A171 {}
class A172 {}
class A173 {}
class A174 {}
class A175 {}
class A176 {}
class A177 {}
class A178 {}
class A179 {}
class A180 {}
class A181 {}
class A182 {}
class A183 {}
class A184 {}
class A185 {}
class A186 {}
class A187 {}
class A188 {}
class A189 {}
class A190 {}
class A191 {}
class A192 {}
class A193 {}
class A194 {}
class A195 {}
class A196 {}
class A197 {}
class A198 {}
class A199 {}
class A200 {}
class A201 {}
class A202 {}
class A203 {}
class A204 {}
class A205 {}
class A206 {}
class A207 {}
class A208 {}
class A209 {}
class A210 {}
class A211 {}
class A212 {}
class A213 {}
class A214 {}
class A215 {}
class A216 {}
class A217 {}
class A218 {}
class A219 {}
class A220 {}
class A221 {}
class A222 {}
class A223 {}
class A224 {}
class A225 {}
class A226 {}
class A227 {}
class A228 {}
class A229 {}
class A230 {}
class A231 {}
class A232 {}
class A233 {}
class A234 {}
class A235 {}
class A236 {}
class A237 {}
class A238 {}
class A239 {}
class A240 {}
class A241 {}
class A242 {}
class A243 {}
class A244 {}
class A245 {}
class A246 {}
class A247 {}
class A248 {}
class A249 {}
class A250 {}
class A251 {}
class A252 {}
class A253 {}
class A254 {}
class A255 {}
class A256 {}
class A257 {}
class A258 {}
class A259 {}
class A260 {}
class A261 {}
class A262 {}
class A263 {}
class A264 {}
class A265 {}
class A266 {}
class A267 {}
class A268 {}
class A269 {}
class A270 {}
class A271 {}
class A272 {}
class A273 {}
class A274 {}
class A275 {}
class A276 {}
class A277 {}
class A278 {}
class A279 {}
class A280 {}
class A281 {}
class A282 {}
class A283 {}
class A284 {}
class A285 {}
class A286 {}
class A287 {}
class A288 {}
class A289 {}
class A290 {}
class A291 {}
class A292 {}
class A293 {}
class A294 {}
class A295 {}
class A296 {}
class A297 {}
class A298 {}
class A299 {}
class A300 {}
class A301 {}
class A302 {}
class A303 {}
class A304 {}
class A305 {}
class A306 {}
class A307 {}
class A308 {}
class A309 {}
class A310 {}
class A311 {}
class A312 {}
class A313 {}
class A314 {}
class A315 {}
class A316 {}
class A317 {}
class A318 {}
class A319 {}
class A320 {}
class A321 {}
class A322 {}
class A323 {}
class A324 {}
class A325 {}
class A326 {}
class A327 {}
class A328 {}
class A329 {}
class A330 {}
class A331 {}
class A332 {}
class A333 {}
class A334 {}
class A335 {}
class A336 {}
class A337 {}
class A338 {}
class A339 {}
class A340 {}
class A341 {}
class A342 {}
class A343 {}
class A344 {}
class A345 {}
class A346 {}
class A347 {}
class A348 {}
class A349 {}
class A350 {}
class A351 {}
class A352 {}
class A353 {}
class A354 {}
class A355 {}
class A356 {}
class A357 {}
class A358 {}
class A359 {}
class A360 {}
class A361 {}
class A362 {}
class A363 {}
class A364 {}
class A365 {}
class A366 {}
class A367 {}
class A368 {}
class A369 {}
class A370 {}
class A371 {}
class A372 {}
class A373 {}
class A374 {}
class A375 {}
class A376 {}
class A377 {}
class A378 {}
class A379 {}
class A380 {}
class A381 {}
class A382 {}
class A383 {}
class A384 {}
class A385 {}
class A386 {}
class A387 {}
class A388 {}
class A389 {}
class A390 {}
class A391 {}
class A392 {}
class A393 {}
class A394 {}
class A395 {}
class A396 {}
class A397 {}
class A398 {}
class A399 {}
class A400 {}
class A401 {}
class A402 {}
class A403 {}
class A404 {}
class A405 {}
class A406 {}
class A407 {}
class A408 {}
class A409 {}
class A410 {}
class A411 {}
class A412 {}
class A413 {}
class A414 {}
class A415 {}
class A416 {}
class A417 {}
class A418 {}
class A419 {}
class A420 {}
class A421 {}
class A422 {}
class A423 {}
class A424 {}
class A425 {}
class A426 {}
class A427 {}
class A428 {}
class A429 {}
class A430 {}
class A431 {}
class A432 {}
class A433 {}
class A434 {}
class A435 {}
class A436 {}
class A437 {}
class A438 {}
class A439 {}
class A440 {}
class A441 {}
class A442 {}
class A443 {}
class A444 {}
class A445 {}
class A446 {}
class A447 {}
class A448 {}
class A449 {}
class A450 {}
class A451 {}
class A452 {}
class A453 {}
class A454 {}
class A455 {}
class A456 {}
class A457 {}
class A458 {}
class A459 {}
class A460 {}
class A461 {}
class A462 {}
class A463 {}
class A464 {}
class A465 {}
class A466 {}
class A467 {}
class A468 {}
class A469 {}
class A470 {}
class A471 {}
class A472 {}
class A473 {}
class A474 {}
class A475 {}
class A476 {}
class A477 {}
class A478 {}
class A479 {}
class A480 {}
class A481 {}
class A482 {}
class A483 {}
class A484 {}
class A485 {}
class A486 {}
class A487 {}
class A488 {}
class A489 {}
class A490 {}
class A491 {}
class A492 {}
class A493 {}
class A494 {}
class A495 {}
class A496 {}
class A497 {}
class A498 {}
class A499 {}
class A500 {}
class A501 {}
class A502 {}
class A503 {}
class A504 {}
class A505 {}
class A506 {}
class A507 {}
class A508 {}
class A509 {}
class A510 {}
class A511 {}
class A512 {}
class A513 {}
class A514 {}
class A515 {}
class A516 {}
class A517 {}
class A518 {}
class A519 {}
class A520 {}
class A521 {}
class A522 {}
class A523 {}
class A524 {}
class A525 {}
class A526 {}
class A527 {}
class A528 {}
class A529 {}
class A530 {}
class A531 {}
class A532 {}
class A533 {}
class A534 {}
class A535 {}
class A536 {}
class A537 {}
class A538 {}
class A539 {}
class A540 {}
class A541 {}
class A542 {}
class A543 {}
class A544 {}
class A545 {}
class A546 {}
class A547 {}
class A548 {}
class A549 {}
class A550 {}
class A551 {}
class A552 {}
class A553 {}
class A554 {}
class A555 {}
class A556 {}
class A557 {}
class A558 {}
class A559 {}
class A560 {}
class A561 {}
class A562 {}
class A563 {}
class A564 {}
class A565 {}
class A566 {}
class A567 {}
class A568 {}
class A569 {}
class A570 {}
class A571 {}
class A572 {}
class A573 {}
class A574 {}
class A575 {}
class A576 {}
class A577 {}
class A578 {}
class A579 {}
class A580 {}
class A581 {}
class A582 {}
class A583 {}
class A584 {}
class A585 {}
class A586 {}
class A587 {}
class A588 {}
class A589 {}
class A590 {}
class A591 {}
class A592 {}
class A593 {}
class A594 {}
class A595 {}
class A596 {}
class A597 {}
class A598 {}
class A599 {}
class A600 {}
class A601 {}
class A602 {}
class A603 {}
class A604 {}
class A605 {}
class A606 {}
class A607 {}
class A608 {}
class A609 {}
class A610 {}
class A611 {}
class A612 {}
class A613 {}
class A614 {}
class A615 {}
class A616 {}
class A617 {}
class A618 {}
class A619 {}
class A620 {}
class A621 {}
class A622 {}
class A623 {}
class A624 {}
class A625 {}
class A626 {}
class A627 {}
class A628 {}
class A629 {}
class A630 {}
class A631 {}
class A632 {}
class A633 {}
class A634 {}
class A635 {}
class A636 {}
class A637 {}
class A638 {}
class A639 {}
class A640 {}
class A641 {}
class A642 {}
class A643 {}
class A644 {}
class A645 {}
class A646 {}
class A647 {}
class A648 {}
class A649 {}
class A650 {}
class A651 {}
class A652 {}
class A653 {}
class A654 {}
class A655 {}
class A656 {}
class A657 {}
class A658 {}
class A659 {}
class A660 {}
class A661 {}
class A662 {}
class A663 {}
class A664 {}
class A665 {}
class A666 {}
class A667 {}
class A668 {}
class A669 {}
class A670 {}
class A671 {}
class A672 {}
class A673 {}
class A674 {}
class A675 {}
class A676 {}
class A677 {}
class A678 {}
class A679 {}
class A680 {}
class A681 {}
class A682 {}
class A683 {}
class A684 {}
class A685 {}
class A686 {}
class A687 {}
class A688 {}
class A689 {}
class A690 {}
class A691 {}
class A692 {}
class A693 {}
class A694 {}
class A695 {}
class A696 {}
class A697 {}
class A698 {}
class A699 {}
class A700 {}
class A701 {}
class A702 {}
class A703 {}
class A704 {}
class A705 {}
class A706 {}
class A707 {}
class A708 {}
class A709 {}
class A710 {}
class A711 {}
class A712 {}
class A713 {}
class A714 {}
class A715 {}
class A716 {}
class A717 {}
class A718 {}
class A719 {}
class A720 {}
class A721 {}
class A722 {}
class A723 {}
class A724 {}
class A725 {}
class A726 {}
class A727 {}
class A728 {}
class A729 {}
class A730 {}
class A731 {}
class A732 {}
class A733 {}
class A734 {}
class A735 {}
class A736 {}
class A737 {}
class A738 {}
class A739 {}
class A740 {}
class A741 {}
class A742 {}
class A743 {}
class A744 {}
class A745 {}
class A746 {}
class A747 {}
class A748 {}
class A749 {}
class A750 {}
class A751 {}
class A752 {}
class A753 {}
class A754 {}
class A755 {}
class A756 {}
class A757 {}
class A758 {}
class A759 {}
class A760 {}
class A761 {}
class A762 {}
class A763 {}
class A764 {}
class A765 {}
class A766 {}
class A767 {}
class A768 {}
class A769 {}
class A770 {}
class A771 {}
class A772 {}
class A773 {}
class A774 {}
class A775 {}
class A776 {}
class A777 {}
class A778 {}
class A779 {}
class A780 {}
class A781 {}
class A782 {}
class A783 {}
class A784 {}
class A785 {}
class A786 {}
class A787 {}
class A788 {}
class A789 {}
class A790 {}
class A791 {}
class A792 {}
class A793 {}
class A794 {}
class A795 {}
class A796 {}
class A797 {}
class A798 {}
class A799 {}
class A800 {}
class A801 {}
class A802 {}
class A803 {}
class A804 {}
class A805 {}
class A806 {}
class A807 {}
class A808 {}
class A809 {}
class A810 {}
class A811 {}
class A812 {}
class A813 {}
class A814 {}
class A815 {}
class A816 {}
class A817 {}
class A818 {}
class A819 {}
class A820 {}
class A821 {}
class A822 {}
class A823 {}
class A824 {}
class A825 {}
class A826 {}
class A827 {}
class A828 {}
class A829 {}
class A830 {}
class A831 {}
class A832 {}
class A833 {}
class A834 {}
class A835 {}
class A836 {}
class A837 {}
class A838 {}
class A839 {}
class A840 {}
class A841 {}
class A842 {}
class A843 {}
class A844 {}
class A845 {}
class A846 {}
class A847 {}
class A848 {}
class A849 {}
class A850 {}
class A851 {}
class A852 {}
class A853 {}
class A854 {}
class A855 {}
class A856 {}
class A857 {}
class A858 {}
class A859 {}
class A860 {}
class A861 {}
class A862 {}
class A863 {}
class A864 {}
class A865 {}
class A866 {}
class A867 {}
class A868 {}
class A869 {}
class A870 {}
class A871 {}
class A872 {}
class A873 {}
class A874 {}
class A875 {}
class A876 {}
class A877 {}
class A878 {}
class A879 {}
class A880 {}
class A881 {}
class A882 {}
class A883 {}
class A884 {}
class A885 {}
class A886 {}
class A887 {}
class A888 {}
class A889 {}
class A890 {}
class A891 {}
class A892 {}
class A893 {}
class A894 {}
class A895 {}
class A896 {}
class A897 {}
class A898 {}
class A899 {}
class A900 {}
class A901 {}
class A902 {}
class A903 {}
class A904 {}
class A905 {}
class A906 {}
class A907 {}
class A908 {}
class A909 {}
class A910 {}
class A911 {}
class A912 {}
class A913 {}
class A914 {}
class A915 {}
class A916 {}
class A917 {}
class A918 {}
class A919 {}
class A920 {}
class A921 {}
class A922 {}
class A923 {}
class A924 {}
class A925 {}
class A926 {}
class A927 {}
class A928 {}
class A929 {}
class A930 {}
class A931 {}
class A932 {}
class A933 {}
class A934 {}
class A935 {}
class A936 {}
class A937 {}
class A938 {}
class A939 {}
class A940 {}
class A941 {}
class A942 {}
class A943 {}
class A944 {}
class A945 {}
class A946 {}
class A947 {}
class A948 {}
class A949 {}
class A950 {}
class A951 {}
class A952 {}
class A953 {}
class A954 {}
class A955 {}
class A956 {}
class A957 {}
class A958 {}
class A959 {}
class A960 {}
class A961 {}
class A962 {}
class A963 {}
class A964 {}
class A965 {}
class A966 {}
class A967 {}
class A968 {}
class A969 {}
class A970 {}
class A971 {}
class A972 {}
class A973 {}
class A974 {}
class A975 {}
class A976 {}
class A977 {}
class A978 {}
class A979 {}
class A980 {}
class A981 {}
class A982 {}
class A983 {}
class A984 {}
class A985 {}
class A986 {}
class A987 {}
class A988 {}
class A989 {}
class A990 {}
class A991 {}
class A992 {}
class A993 {}
class A994 {}
class A995 {}
class A996 {}
class A997 {}
class A998 {}

#endif
