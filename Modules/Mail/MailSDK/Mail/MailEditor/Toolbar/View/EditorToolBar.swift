//
//  EditorToolBar.swift
//  DocsSDK
//
//  Created by Ëæπ‰øäÊûó on 2019/1/9.
//

import UIKit
import LarkUIKit

protocol EditorToolBarDelegate: AnyObject {
    func EditorToolBar(_ toolBar: EditorToolBar, changeInputView inputView: UIView?)
    func EditorToolBarShouldEndEditing(_ toolBar: EditorToolBar, editMode: EditorToolBar.EditMode, byUser: Bool)
//    func EditorToolBarRequestMailInfo(_ toolBar: EditorToolBar) -> MailInfo?
    func EditorToolBarRequestInvokeScript(_ toolBar: EditorToolBar, script: String)
}

/// ÁºñËæëÂô®Â∑•ÂÖ∑Êù°
class EditorToolBar: UIView {
    weak var delegate: EditorToolBarDelegate?
    // MARK: üìïExternal Interface
    /// Â∑•ÂÖ∑Êù°Ê≠£Â∏∏ÊÉÖÂÜµ‰∏ãÁöÑÂõ∫ÊúâÈ´òÂ∫¶
    static var inherentHeight: CGFloat = Const.inherentHeight
    /// ÂÖ∂‰ªñPanel‰ΩøÁî®ÈîÆÁõòÈ´òÂ∫¶‰Ωú‰∏∫Ëá™Ë∫´È´òÂ∫¶
    var useKeyboardHeight: Bool = true
    /// ËÆæÁΩÆPanelÊúÄÂ∞èÈ´òÂ∫¶Ôºå‰ªÖÂΩìuseKeyboardHeightÂºÄÂêØÊó∂ÂèØÁî®
    var minimumPanelHeight: CGFloat = 180
    /// È¢Ñ‰º∞ÈîÆÁõòÈ´òÂ∫¶ÔºåÁî®‰∫éÂΩìÊó†Ê≥ïËé∑ÂèñÈîÆÁõòÈ´òÂ∫¶‰∏îÈúÄË¶Å‰∏Ä‰∏™Â§ßËá¥È´òÂ∫¶Êó∂
    var estimateKeyboardHeight: CGFloat = 260
    /// ÂºÄÂêØTaptic EngineÂèçÈ¶à
    var useTapticEngine: Bool = true
    /// ÂΩìÂâçÂ∑•ÂÖ∑Êù°ÁºñËæëÊ®°Âºè
    private(set) var mode: EditMode = .normal

    var willRestoreByKeyBoard: Bool = false

    // MARK: üìòData
    private weak var currentPanel: EditorSubToolBarPanel?
    private weak var currentMain: EditorMainToolBarPanel?
    private weak var currentTitleView: UIView?

    private var keyboardHeight: CGFloat = 0
    private var isJustInit: Bool = true
    private var restoreTag: String?
    private var restoreKeyboardHeight: CGFloat?

    // MARK: üìôUI Widget
    override init(frame: CGRect) {
        super.init(frame: frame)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    /// Êõ¥Êñ∞ÈîÆÁõòÁöÑÈ´òÂ∫¶ÔºåÂ∫îÂú®ÊØèÊ¨°Á≥ªÁªüÈîÆÁõòÈ´òÂ∫¶Êõ¥Êñ∞Êó∂ËÆæÁΩÆ(‰∏çÂåÖÊã¨PanelÁ±ªÂûãitemÁöÑËèúÂçï)
    func setKeyboardHeight(_ height: CGFloat) {
        keyboardHeight = height
    }
}

extension EditorToolBar {
    // MARK: üììInternal Supporting Method
    private func layoutPanel(_ panel: UIView) -> UIView {
        let panelView = panel
        var targetHeight = keyboardHeight
        if targetHeight == 0 { targetHeight = estimateKeyboardHeight }
        targetHeight = max(targetHeight, minimumPanelHeight + Display.bottomSafeAreaHeight)

        let heightConstraints = panelView.constraints.filter { ($0.firstItem === panelView) && ($0.firstAttribute == NSLayoutConstraint.Attribute.height) }
        if  !heightConstraints.isEmpty {
            let constraint = heightConstraints[0]
            constraint.constant = targetHeight
            panelView.layoutIfNeeded()
        }
        panelView.frame = CGRect(origin: .zero, size: CGSize(width: frame.width, height: targetHeight))
        return panelView
    }

    /* ‚Üì‚Üì‚Üì Compatible with Docs && Sheet ‚Üì‚Üì‚Üì */
    @inline(__always)
    private func changeInputView(_ panel: UIView?) {
    }

    @inline(__always)
    private func doEndEditing(byUser: Bool? = nil) {
        delegate?.EditorToolBarShouldEndEditing(self, editMode: mode, byUser: byUser ?? false)
    }

    override func hitTest(_ point: CGPoint, with event: UIEvent?) -> UIView? {
        if self.isHidden { return nil }
        return nil
    }
}

extension EditorToolBar {
    enum EditMode {
        /// Ê†áÂáÜÂ∑•ÂÖ∑Êù°
        case normal
    }

    struct Const {
        static let itemWidth: CGFloat = 44
        static let imageWidth: CGFloat = 24
        static let itemPadding: CGFloat = 8
        static let horPadding: CGFloat = 7
        static let staticHorPadding: CGFloat = 6
        static let separateWidth: CGFloat = 1
        static let separateVerPadding: CGFloat = 10
        static let inherentHeight: CGFloat = 44
        static let sheetInputViewHeight: CGFloat = 44
        static let iconCellId: String = "iconCellId"
    }
}

extension EditorToolBar {
    func setTitleView(_ titleView: UIView) { }

    func removeTitleView() { }
}

extension EditorToolBar: MailSubToolBarDelegate {
}
