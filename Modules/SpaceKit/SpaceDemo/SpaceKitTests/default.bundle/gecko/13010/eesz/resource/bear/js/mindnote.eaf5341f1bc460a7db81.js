(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[13],{

/***/ 1577:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _container = __webpack_require__(3617);

var _container2 = _interopRequireDefault(_container);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _container2.default;

/***/ }),

/***/ 1604:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = __webpack_require__(3661).Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(190)(module)))

/***/ }),

/***/ 1611:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _types = __webpack_require__(1724);

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _types[key];
    }
  });
});

var _teaLogger = __webpack_require__(1725);

Object.defineProperty(exports, 'CommentTeaLogger', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_teaLogger).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ 1612:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var COMMENT_REACTION_MODULE = exports.COMMENT_REACTION_MODULE = 'COMMENT_REACTION';
var OPEN_PANEL_SOURCE = exports.OPEN_PANEL_SOURCE = undefined;
(function (OPEN_PANEL_SOURCE) {
    OPEN_PANEL_SOURCE["FEED"] = "feed";
})(OPEN_PANEL_SOURCE || (exports.OPEN_PANEL_SOURCE = OPEN_PANEL_SOURCE = {}));

/***/ }),

/***/ 1624:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mobileReactionSDK = __webpack_require__(1726);

Object.keys(_mobileReactionSDK).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _mobileReactionSDK[key];
    }
  });
});

var _compatible = __webpack_require__(1668);

Object.keys(_compatible).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _compatible[key];
    }
  });
});

var _reactionServiceHelper = __webpack_require__(1727);

Object.keys(_reactionServiceHelper).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _reactionServiceHelper[key];
    }
  });
});

/***/ }),

/***/ 1626:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;

elliptic.version = __webpack_require__(3667).version;
elliptic.utils = __webpack_require__(3668);
elliptic.rand = __webpack_require__(2218);
elliptic.curve = __webpack_require__(1817);
elliptic.curves = __webpack_require__(3673);

// Protocols
elliptic.ec = __webpack_require__(3681);
elliptic.eddsa = __webpack_require__(3685);


/***/ }),

/***/ 1638:
/***/ (function(module, exports) {

module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};


/***/ }),

/***/ 1649:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(1638);
var inherits = __webpack_require__(1585);

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;


/***/ }),

/***/ 1663:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(t) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "teaUtils", function() { return teaUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HighlightColorMap", function() { return HighlightColorMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MindNoteEvent", function() { return MindNoteEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TipMessageType", function() { return TipMessageType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MindNoteEnvironment", function() { return MindNoteEnvironment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Actions", function() { return Actions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputActionTypes", function() { return InputActionTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PureActions", function() { return PureActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditActions", function() { return EditActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExecuteType", function() { return ExecuteType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewType", function() { return ViewType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HighlightColor", function() { return HighlightColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MinderStructure", function() { return MinderStructure; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MinderTheme", function() { return MinderTheme; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MinderExportType", function() { return MinderExportType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextType", function() { return TextType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MentionType", function() { return MentionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CursorType", function() { return CursorType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Observable", function() { return Observable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Locale", function() { return Locale; });
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(90);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(453);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(105);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(22);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(754);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(229);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(75);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(14);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(236);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(214);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(76);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(77);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(227);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(565);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(235);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(232);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(212);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(3886);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(352);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(3885);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(3887);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(238);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(4);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var blueimp_md5__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(568);
/* harmony import */ var blueimp_md5__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(blueimp_md5__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(312);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_24__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(127);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_25__);
/* harmony import */ var xss__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(3712);
/* harmony import */ var xss__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(xss__WEBPACK_IMPORTED_MODULE_26__);
/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(73);
/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(bowser__WEBPACK_IMPORTED_MODULE_27__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(1);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_28__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(47);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_29__);
/* harmony import */ var _byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(1854);
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(3716);
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_31__);
/* eslint-disable */












var MindNoteEvent;
(function (MindNoteEvent) {
    /**
     * 文档加载完成
     */
    MindNoteEvent["LOADED"] = "LOADED";
    /**
     * 用户编辑事件
     */
    MindNoteEvent["EDIT"] = "EDIT";
    /**
     * 文档发生改动事件
     */
    MindNoteEvent["CHANGE"] = "CHANGE";
    /**
     * 翻页钻取事件
     */
    MindNoteEvent["DRILL"] = "DRILL";
    /**
     * 当用户发生编辑添加图片行为
     * @description 这是一个零时的解决方案，不一定是长期的
     */
    MindNoteEvent["ADD_IMAGE"] = "ADD_IMAGE";
    /**
     * 若当前翻页的节点或其祖先节点被删除所触发的事件
     * @description 此时编辑器会回退到根节点
     */
    MindNoteEvent["DRILL_REMOVED"] = "DRILL_REMOVED";
    /**
     * 思维导图打开事件
     */
    MindNoteEvent["MIND_MAP_OPEN"] = "MIND_MAP_OPEN";
    /**
     * 思维导图关闭事件
     */
    MindNoteEvent["MIND_MAP_CLOSE"] = "MIND_MAP_CLOSE";
    /**
     * 思维导图导出事件，data参数格式：{name: string, base64Data: string}
     * @type {string}
     */
    MindNoteEvent["MIND_MAP_EXPORT"] = "MIND_MAP_EXPORT";
    /**
     * 演示模式打开事件
     */
    MindNoteEvent["PRESENTATION_OPEN"] = "PRESENTATION_OPEN";
    /**
     * 演示模式关闭事件
     */
    MindNoteEvent["PRESENTATION_CLOSE"] = "PRESENTATION_CLOSE";
    /**
     * 文档标题发生变化
     */
    MindNoteEvent["TITLE_CHANGE"] = "TITLE_CHANGE";
    /**
     * 需要弹出提醒信息事件
     * @type {string}
     */
    MindNoteEvent["TIP_MESSAGE"] = "TIP_MESSAGE";
    /**
     * 预览图片
     * @type {string}
     */
    MindNoteEvent["PREVIEW_IMAGE"] = "PREVIEW_IMAGE";
    /**
     * 节点的点击事件
     * @type {string}
     */
    MindNoteEvent["NODE_CLICK"] = "NODE_CLICK";
    /*
     * 输入框的focus事件
     * @type {string}
     */
    MindNoteEvent["INPUT_FOCUS"] = "INPUT_FOCUS";
    /**
     * 打点事件
     */
    MindNoteEvent["TEA_EVENT"] = "TEA_EVENT";
    /**
     * 工具栏打开事件
     */
    MindNoteEvent["TOOLBAR_OPEN"] = "TOOLBAR_OPEN";
    /**
     * 打开连接事件
     * @type {string}
     */
    MindNoteEvent["OPEN_LINK"] = "OPEN_LINK";
    /**
     * 打开/关闭/更新 mention box
     */
    MindNoteEvent["UPDATE_MENTION"] = "UPDATE_MENTION";
    /**
     * 打开 @ 人名片
     */
    MindNoteEvent["OPEN_USER_PROFILE"] = "OPEN_USER_PROFILE";
    /*
     * wrapper中的节点发生变化事件，来判断当前是否存在节点，进行相应的控制
     */
    MindNoteEvent["WRAPPER_CHANGED"] = "WRAPPER_CHANGED";
    /**
     * 添加评论
     */
    MindNoteEvent["ADD_COMMENT"] = "ADD_COMMENT";
    /**
     * 激活评论
     */
    MindNoteEvent["ACTIVE_COMMENT"] = "ACTIVE_COMMENT";
    /**
     * 重新刷新评论的布局和位置
     */
    MindNoteEvent["REFRESH_COMMENT"] = "REFRESH_COMMENT";
    /**
     * 重新刷新光标显示和隐藏
     */
    MindNoteEvent["REFRESH_CURSOR"] = "\bTOGGLE_CURSOR";
    /*
     * 显示/隐藏 mention hover popup
     */
    MindNoteEvent["SHOW_MENTION_POPUP"] = "SHOW_MENTION_POPUP";
    /**
     * 粘贴 url
     */
    MindNoteEvent["PASTE_URL"] = "PASTE_URL";
    /**
     * 思维导图主题改变
     */
    MindNoteEvent["MIND_MAP_THEME_CHANGE"] = "MIND_MAP_THEME_CHANGE";
    /**
     * 演示模式 白天跟夜间模式改变
     */
    MindNoteEvent["PRESENTATION_MODE_CHANGE"] = "PRESENTATION_MODE_CHANGE";
    /**
     * 复制被阻止
     */
    MindNoteEvent["COPY_DENIED"] = "COPY_DENIED";
    /**
     * 导出被阻止
     */
    MindNoteEvent["EXPORT_DENIED"] = "EXPORT_DENIED";
    /**
     * 粘贴了图片
     */
    MindNoteEvent["PASTE_IMAGE"] = "PASTE_IMAGE";
    /**
     * 开始拖动节点
     */
    MindNoteEvent["DRAG_NODE_START"] = "DRAG_NODE_START";
    /**
     * 结束拖动节点
     */
    MindNoteEvent["DRAG_NODE_END"] = "DRAG_NODE_END";
})(MindNoteEvent || (MindNoteEvent = {}));
var TipMessageType;
(function (TipMessageType) {
    /**
     * 复制成功
     */
    TipMessageType["COPY_SUCCESS"] = "COPY_SUCCESS";
})(TipMessageType || (TipMessageType = {}));

var MindNoteEnvironment;
(function (MindNoteEnvironment) {
    MindNoteEnvironment["PC"] = "pc";
    MindNoteEnvironment["APP"] = "app";
})(MindNoteEnvironment || (MindNoteEnvironment = {}));

/**
 * Action 类型
 */
var Actions;
(function (Actions) {
    Actions["CREATE"] = "create";
    Actions["UPDATE"] = "update";
    Actions["DELETE"] = "delete";
    Actions["STRUCTURE_CHANGE"] = "structureChanged";
    Actions["SETTING_CHANGE"] = "settingChanged";
    Actions["TITLE_CHANGE"] = "nameChanged";
    Actions["INPUT"] = "INPUT";
})(Actions || (Actions = {}));
/**
 * input 类型
 */
var InputActionTypes;
(function (InputActionTypes) {
    InputActionTypes["NOTE"] = "note";
    InputActionTypes["TEXT"] = "text";
})(InputActionTypes || (InputActionTypes = {}));
/**
 * 对文档内容不会发生改变的操作
 */
var PureActions;
(function (PureActions) {
    PureActions["DRILL"] = "drill";
})(PureActions || (PureActions = {}));
var EditActions;
(function (EditActions) {
    EditActions["BLUR"] = "blur";
    EditActions["INDENT"] = "indent";
    EditActions["OUTDENT"] = "outdent";
    EditActions["NOTE"] = "note";
    EditActions["DELETE"] = "delete";
    EditActions["FINISH"] = "finish";
    EditActions["BOLD"] = "bold";
    EditActions["ITALIC"] = "italic";
    EditActions["UNDERLINE"] = "underline";
    EditActions["HEADING"] = "heading";
    EditActions["MENTION"] = "mention";
    EditActions["HIGHLIGHT"] = "highlight";
})(EditActions || (EditActions = {}));
/**
 * 执行 action 类型
 */
var ExecuteType;
(function (ExecuteType) {
    /**
     * 执行服务端发来的 action
     */
    ExecuteType["SERVER"] = "SERVER";
    /**
     * 执行 redo action
     */
    ExecuteType["REDO"] = "REDO";
    /**
     * 支持 undo action
     */
    ExecuteType["UNDO"] = "UNDO";
})(ExecuteType || (ExecuteType = {}));
/**
 * 文档视图类型
 */
var ViewType;
(function (ViewType) {
    /**
     * 大纲视图
     */
    ViewType["OUTLINE"] = "OUTLINE";
    /**
     * 思维导图视图
     */
    ViewType["MINDMAP"] = "MINDMAP";
    /**
     * 演示模式视图
     */
    ViewType["PRESENTATION"] = "PRESENTATION";
})(ViewType || (ViewType = {}));

/**
 * 节点高亮颜色（背景色）
 */
var HighlightColor;
(function (HighlightColor) {
    HighlightColor["Red"] = "red";
    HighlightColor["Yellow"] = "yellow";
    HighlightColor["Pink"] = "pink";
    HighlightColor["Blue"] = "blue";
    HighlightColor["Cyan"] = "cyan";
    HighlightColor["Olive"] = "olive";
    HighlightColor["Grey"] = "grey";
})(HighlightColor || (HighlightColor = {}));
/**
 * 思维导图结构
 */
var MinderStructure;
(function (MinderStructure) {
    MinderStructure["DEFAULT"] = "default";
    MinderStructure["LEFT"] = "left";
    MinderStructure["RIGHT"] = "right";
    MinderStructure["ORG"] = "org";
})(MinderStructure || (MinderStructure = {}));
/**
 * 思维导图风格
 */
var MinderTheme;
(function (MinderTheme) {
    MinderTheme["DEFAULT"] = "default";
    MinderTheme["CLASSIC"] = "classic";
})(MinderTheme || (MinderTheme = {}));
/**
 * 思维导图导出格式
 */
var MinderExportType;
(function (MinderExportType) {
    MinderExportType["FREEMIND"] = "FREEMIND";
    MinderExportType["IMAGE"] = "IMAGE";
})(MinderExportType || (MinderExportType = {}));
/**
 * 文本类型
 */
var TextType;
(function (TextType) {
    TextType[TextType["Styled"] = 1] = "Styled";
    TextType[TextType["Mention"] = 2] = "Mention";
    TextType[TextType["Link"] = 3] = "Link";
    TextType[TextType["Tag"] = 4] = "Tag";
    TextType[TextType["Fake"] = 255] = "Fake";
})(TextType || (TextType = {}));
/**
 * mention 类型
 * @description 思维笔记只支持 @ 人和文档，此处数字需要与 mention box 一致
 */
var MentionType;
(function (MentionType) {
    /**
     * 人
     */
    MentionType[MentionType["USER"] = 0] = "USER";
    /**
     * doc
     */
    MentionType[MentionType["DOC"] = 1] = "DOC";
    /**
     * sheet
     */
    MentionType[MentionType["SHEET"] = 3] = "SHEET";
    /**
     * bitable
     */
    MentionType[MentionType["BITABLE"] = 8] = "BITABLE";
    /**
     * mindnote
     */
    MentionType[MentionType["MINDNOTE"] = 11] = "MINDNOTE";
    /**
     * drive
     */
    MentionType[MentionType["DRIVE"] = 12] = "DRIVE";
    /**
     * slide
     */
    MentionType[MentionType["SLIDE"] = 15] = "SLIDE";
})(MentionType || (MentionType = {}));

/**
 * 光标类型
 */
var CursorType;
(function (CursorType) {
    CursorType["TEXT"] = "TEXT";
    CursorType["NOTE"] = "NOTE";
    CursorType["NODE"] = "NODE";
    CursorType["DRILL"] = "DRILL";
    CursorType["TITLE"] = "TITLE";
})(CursorType || (CursorType = {}));

var Observable = /** @class */ (function () {
    function Observable() {
        this.handlerMap = {};
    }
    /**
     * 触发事件
     * @param type 事件类型
     * @param e 事件参数
     */
    Observable.prototype.trigger = function (type, e) {
        var handlers = this.handlerMap[type];
        if (handlers) {
            Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(handlers, function (v) {
                v(e);
            });
        }
    };
    /**
   * 注册事件
   * @param type 事件类型
   * @param callback 回调
   */
    Observable.prototype.addEventListener = function (type, callback) {
        var handlers = this.handlerMap[type];
        if (!handlers) {
            this.handlerMap[type] = [callback];
        }
        else {
            handlers.push(callback);
        }
    };
    /**
   * 注销事件
   * @param type 事件类型
   * @param callback 注册的回调
   */
    Observable.prototype.removeEventListener = function (type, callback) {
        var handlers = this.handlerMap[type];
        if (handlers) {
            var index = handlers.findIndex(function (val) {
                return val === callback;
            });
            if (index !== -1) {
                handlers.splice(index, 1);
            }
        }
    };
    return Observable;
}());

var Locale;
(function (Locale) {
    Locale["ZH"] = "zh-CN";
    Locale["EN"] = "en-US";
    Locale["JA"] = "ja-JP";
})(Locale || (Locale = {}));

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

var State = /** @class */ (function () {
    function State(props) {
        this.readonly = false;
        this.handlers = [];
        this.props = props;
        this.state = {
            eventSpace: Object(lodash_es__WEBPACK_IMPORTED_MODULE_1__["default"])('.mindnote'),
        };
    }
    /**
     * 获取 props
     */
    State.prototype.getEditorProps = function () {
        return this.props;
    };
    /**
     * 获取 state
     */
    State.prototype.getEditorState = function () {
        return this.state;
    };
    /**
     * 设置 state
     * @param newState 新 state，增量更新
     */
    State.prototype.setEditorState = function (newState) {
        this.state = Object(lodash_es__WEBPACK_IMPORTED_MODULE_2__["default"])({}, this.state, newState);
        this.triggerStateChange();
    };
    /**
     * 设置 readonly
     */
    State.prototype.setReadonly = function (readonly) {
        if (readonly !== this.readonly) {
            this.readonly = readonly;
            this.triggerStateChange();
        }
    };
    /**
     * 读取 readonly
     */
    State.prototype.getReadonly = function () {
        return this.readonly;
    };
    /**
     * 注册 StateChange 监听器
     * @param callback
     */
    State.prototype.addStateChangeListener = function (callback) {
        this.handlers.push(callback);
    };
    /**
     * 注销 StateChange 监听器
     * @param callback
     */
    State.prototype.removeStateChangeListener = function (callback) {
        var index = this.handlers.findIndex(function (val) {
            return val === callback;
        });
        if (index !== -1) {
            this.handlers.splice(index, 1);
        }
    };
    /**
     * 触发 StateChange 事件
     */
    State.prototype.triggerStateChange = function () {
        var _this = this;
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(this.handlers, function (callback) {
            callback(_this);
        });
    };
    return State;
}());

function assertNever(x) {
    console.error('Unexcepted never type: ', x);
}

var _a, _b, _c;
var KeyCode;
(function (KeyCode) {
    KeyCode[KeyCode["Backspace"] = 8] = "Backspace";
    KeyCode[KeyCode["Tab"] = 9] = "Tab";
    KeyCode[KeyCode["Enter"] = 13] = "Enter";
    KeyCode[KeyCode["Shift"] = 16] = "Shift";
    KeyCode[KeyCode["Control"] = 17] = "Control";
    KeyCode[KeyCode["Alt"] = 18] = "Alt";
    KeyCode[KeyCode["CapsLock"] = 20] = "CapsLock";
    KeyCode[KeyCode["Esc"] = 27] = "Esc";
    KeyCode[KeyCode["Space"] = 32] = "Space";
    KeyCode[KeyCode["PageUp"] = 33] = "PageUp";
    KeyCode[KeyCode["PageDown"] = 34] = "PageDown";
    KeyCode[KeyCode["End"] = 35] = "End";
    KeyCode[KeyCode["Home"] = 36] = "Home";
    KeyCode[KeyCode["ArrowLeft"] = 37] = "ArrowLeft";
    KeyCode[KeyCode["ArrowUp"] = 38] = "ArrowUp";
    KeyCode[KeyCode["ArrowRight"] = 39] = "ArrowRight";
    KeyCode[KeyCode["ArrowDown"] = 40] = "ArrowDown";
    KeyCode[KeyCode["Semicolon"] = 186] = "Semicolon";
    KeyCode[KeyCode["Colon"] = 186] = "Colon";
    KeyCode[KeyCode["EqualsSign"] = 187] = "EqualsSign";
    KeyCode[KeyCode["Plus"] = 187] = "Plus";
    KeyCode[KeyCode["Comma"] = 188] = "Comma";
    KeyCode[KeyCode["LessThanSign"] = 188] = "LessThanSign";
    KeyCode[KeyCode["Minus"] = 189] = "Minus";
    KeyCode[KeyCode["Underscore"] = 189] = "Underscore";
    KeyCode[KeyCode["Period"] = 190] = "Period";
    KeyCode[KeyCode["GreaterThanSign"] = 190] = "GreaterThanSign";
    KeyCode[KeyCode["ForwardSlash"] = 191] = "ForwardSlash";
    KeyCode[KeyCode["QuestionMark"] = 191] = "QuestionMark";
    KeyCode[KeyCode["Backtick"] = 192] = "Backtick";
    KeyCode[KeyCode["Tilde"] = 192] = "Tilde";
    KeyCode[KeyCode["OpeningSquareBracket"] = 219] = "OpeningSquareBracket";
    KeyCode[KeyCode["OpeningCurlyBrace"] = 219] = "OpeningCurlyBrace";
    KeyCode[KeyCode["Backslash"] = 220] = "Backslash";
    KeyCode[KeyCode["Pipe"] = 220] = "Pipe";
    KeyCode[KeyCode["ClosingSquareBracket"] = 221] = "ClosingSquareBracket";
    KeyCode[KeyCode["ClosingCurlyBrace"] = 221] = "ClosingCurlyBrace";
    KeyCode[KeyCode["SingleQuote"] = 222] = "SingleQuote";
    KeyCode[KeyCode["DoubleQuote"] = 222] = "DoubleQuote";
    KeyCode[KeyCode["Pause"] = 19] = "Pause";
    KeyCode[KeyCode["PrintScreen"] = 44] = "PrintScreen";
    KeyCode[KeyCode["Insert"] = 45] = "Insert";
    KeyCode[KeyCode["Delete"] = 46] = "Delete";
    KeyCode[KeyCode["Num0"] = 48] = "Num0";
    KeyCode[KeyCode["Num1"] = 49] = "Num1";
    KeyCode[KeyCode["Num2"] = 50] = "Num2";
    KeyCode[KeyCode["Num3"] = 51] = "Num3";
    KeyCode[KeyCode["Num4"] = 52] = "Num4";
    KeyCode[KeyCode["Num5"] = 53] = "Num5";
    KeyCode[KeyCode["Num6"] = 54] = "Num6";
    KeyCode[KeyCode["Num7"] = 55] = "Num7";
    KeyCode[KeyCode["Num8"] = 56] = "Num8";
    KeyCode[KeyCode["Num9"] = 57] = "Num9";
    KeyCode[KeyCode["A"] = 65] = "A";
    KeyCode[KeyCode["B"] = 66] = "B";
    KeyCode[KeyCode["C"] = 67] = "C";
    KeyCode[KeyCode["D"] = 68] = "D";
    KeyCode[KeyCode["E"] = 69] = "E";
    KeyCode[KeyCode["F"] = 70] = "F";
    KeyCode[KeyCode["G"] = 71] = "G";
    KeyCode[KeyCode["H"] = 72] = "H";
    KeyCode[KeyCode["I"] = 73] = "I";
    KeyCode[KeyCode["J"] = 74] = "J";
    KeyCode[KeyCode["K"] = 75] = "K";
    KeyCode[KeyCode["L"] = 76] = "L";
    KeyCode[KeyCode["M"] = 77] = "M";
    KeyCode[KeyCode["N"] = 78] = "N";
    KeyCode[KeyCode["O"] = 79] = "O";
    KeyCode[KeyCode["P"] = 80] = "P";
    KeyCode[KeyCode["Q"] = 81] = "Q";
    KeyCode[KeyCode["R"] = 82] = "R";
    KeyCode[KeyCode["S"] = 83] = "S";
    KeyCode[KeyCode["T"] = 84] = "T";
    KeyCode[KeyCode["U"] = 85] = "U";
    KeyCode[KeyCode["V"] = 86] = "V";
    KeyCode[KeyCode["W"] = 87] = "W";
    KeyCode[KeyCode["X"] = 88] = "X";
    KeyCode[KeyCode["Y"] = 89] = "Y";
    KeyCode[KeyCode["Z"] = 90] = "Z";
    KeyCode[KeyCode["MetaLeft"] = 91] = "MetaLeft";
    KeyCode[KeyCode["MetaRight"] = 92] = "MetaRight";
    KeyCode[KeyCode["ContextMenu"] = 93] = "ContextMenu";
    KeyCode[KeyCode["Numpad0"] = 96] = "Numpad0";
    KeyCode[KeyCode["Numpad1"] = 97] = "Numpad1";
    KeyCode[KeyCode["Numpad2"] = 98] = "Numpad2";
    KeyCode[KeyCode["Numpad3"] = 99] = "Numpad3";
    KeyCode[KeyCode["Numpad4"] = 100] = "Numpad4";
    KeyCode[KeyCode["Numpad5"] = 101] = "Numpad5";
    KeyCode[KeyCode["Numpad6"] = 102] = "Numpad6";
    KeyCode[KeyCode["Numpad7"] = 103] = "Numpad7";
    KeyCode[KeyCode["Numpad8"] = 104] = "Numpad8";
    KeyCode[KeyCode["Numpad9"] = 105] = "Numpad9";
    KeyCode[KeyCode["NumpadMultiply"] = 106] = "NumpadMultiply";
    KeyCode[KeyCode["NumpadAdd"] = 107] = "NumpadAdd";
    KeyCode[KeyCode["NumpadSubtract"] = 109] = "NumpadSubtract";
    KeyCode[KeyCode["NumpadDecimal"] = 110] = "NumpadDecimal";
    KeyCode[KeyCode["NumpadDivide"] = 111] = "NumpadDivide";
    KeyCode[KeyCode["F1"] = 112] = "F1";
    KeyCode[KeyCode["F2"] = 113] = "F2";
    KeyCode[KeyCode["F3"] = 114] = "F3";
    KeyCode[KeyCode["F4"] = 115] = "F4";
    KeyCode[KeyCode["F5"] = 116] = "F5";
    KeyCode[KeyCode["F6"] = 117] = "F6";
    KeyCode[KeyCode["F7"] = 118] = "F7";
    KeyCode[KeyCode["F8"] = 119] = "F8";
    KeyCode[KeyCode["F9"] = 120] = "F9";
    KeyCode[KeyCode["F10"] = 121] = "F10";
    KeyCode[KeyCode["F11"] = 122] = "F11";
    KeyCode[KeyCode["F12"] = 123] = "F12";
    KeyCode[KeyCode["NumLock"] = 144] = "NumLock";
    KeyCode[KeyCode["ScrollLock"] = 145] = "ScrollLock";
})(KeyCode || (KeyCode = {}));
var SuiteTitle = (_a = {},
    _a[MentionType.DOC] = t('common.unnamed_document'),
    _a[MentionType.SHEET] = t('common.unnamed_sheet'),
    _a[MentionType.BITABLE] = t('common.unnamed_bitable'),
    _a[MentionType.MINDNOTE] = t('common.unnamed_mindnote'),
    _a[MentionType.DRIVE] = t('common.unnamed_document'),
    _a[MentionType.SLIDE] = t('common.unnamed_slide'),
    _a);
var MouseButton;
(function (MouseButton) {
    /* 左键 */
    MouseButton[MouseButton["Primary"] = 0] = "Primary";
    /* 中建 */
    MouseButton[MouseButton["Auxiliary"] = 1] = "Auxiliary";
    /* 右键 */
    MouseButton[MouseButton["Secondary"] = 2] = "Secondary";
})(MouseButton || (MouseButton = {}));
/**
 * 节点高亮颜色 map
 */
var HighlightColorMap = (_b = {},
    _b[HighlightColor.Red] = '#fbbfbc',
    _b[HighlightColor.Yellow] = '#f8e6ab',
    _b[HighlightColor.Pink] = '#fdddef',
    _b[HighlightColor.Blue] = '#bacefd',
    _b[HighlightColor.Cyan] = '#a9efe6',
    _b[HighlightColor.Olive] = '#dfee96',
    _b[HighlightColor.Grey] = '#c3c6cb',
    _b);
/**
 * 高亮快捷键 keycode 与颜色 map
 */
var HighlightKeyCodeMap = (_c = {},
    _c[KeyCode.R] = HighlightColor.Red,
    _c[KeyCode.Y] = HighlightColor.Yellow,
    _c[KeyCode.P] = HighlightColor.Pink,
    _c[KeyCode.B] = HighlightColor.Blue,
    _c[KeyCode.C] = HighlightColor.Cyan,
    _c[KeyCode.O] = HighlightColor.Olive,
    _c[KeyCode.G] = HighlightColor.Grey,
    _c);
/**
 * 幕布字体颜色与思维笔记节点背景色 map
 */
var MubuFontColorMap = {
    '#dc2d1e': HighlightColor.Red,
    '#ffaf38': HighlightColor.Yellow,
    '#75c940': HighlightColor.Olive,
    '#3da8f5': HighlightColor.Cyan,
    '#797ec9': HighlightColor.Blue,
};

/**
 * 合并多个节点文本
 */
function mergeTexts(texts) {
    var result = [];
    Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(texts, function (text) {
        if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"])(text)) {
            result = result.concat(Object(lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"])(text));
        }
        else {
            result = result.concat(htmlToText(text));
        }
    });
    return result;
}
/**
 * 确保文本是 NodeText
 */
function ensureNodeText(text) {
    if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"])(text)) {
        return text;
    }
    return htmlToText(text);
}
/**
 * node text 转为 html
 * @param text node text
 * @param locale 地区
 */
function textToHtml(text, locale) {
    if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"])(text)) {
        return Object(lodash_es__WEBPACK_IMPORTED_MODULE_5__["default"])(text, function (textSegment) {
            switch (textSegment.type) {
                case TextType.Link: {
                    return linkTextToHtml(textSegment);
                }
                case TextType.Mention: {
                    return mentionTextToHtml(textSegment, locale);
                }
                case TextType.Styled: {
                    return styleTextToHtml(textSegment);
                }
                case TextType.Tag: {
                    return tagTextToHtml(textSegment);
                }
                default: {
                    assertNever(textSegment);
                    return '';
                }
            }
        }).join('');
    }
    return escapeHtml(text || '');
}
/**
 * html 转为 node text
 * @param html html
 */
function htmlToText(html) {
    var nodes = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.parseHTML(escapeHtml(html || ''));
    var segments = [];
    Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(nodes, function (node) {
        var tag;
        if (node.nodeType === Node.TEXT_NODE) {
            tag = '';
        }
        else if (node.nodeType === Node.ELEMENT_NODE) {
            tag = node.tagName.toLowerCase();
        }
        else {
            return;
        }
        var text = node.textContent || '';
        switch (tag) {
            case '': {
                segments.push({
                    type: TextType.Styled,
                    text: text,
                });
                break;
            }
            case 'a': {
                var el = node;
                var className = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.trim(el.className || '');
                // mention
                if (className.indexOf('mention') !== -1) {
                    try {
                        var json = (el.dataset && el.dataset.mention) ? el.dataset.mention : '';
                        var data = JSON.parse(decodeURIComponent(json));
                        if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_6__["default"])(data) && data.type === TextType.Mention) {
                            segments.push(data);
                        }
                    }
                    catch (e) {
                        console.error(e);
                    }
                    // link
                }
                else {
                    segments.push({
                        type: TextType.Link,
                        link: node.href,
                        text: text,
                        style: classToStyle(className),
                    });
                }
                break;
            }
            case 'span': {
                var className = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.trim(node.className || '');
                if (className.indexOf('tag') !== -1) {
                    // tag
                    segments.push({
                        type: TextType.Tag,
                        text: text,
                        style: classToStyle(className),
                    });
                }
                else {
                    // style text
                    var segment = {
                        type: TextType.Styled,
                        text: text,
                        style: classToStyle(className),
                    };
                    // at holder
                    if (className.indexOf('at-holder') !== -1) {
                        var id = node.id || '';
                        segment.atHolderId = id.replace('at-holder-', '');
                    }
                    segments.push(segment);
                }
                break;
            }
            case 'b': {
                segments.push({
                    type: TextType.Styled,
                    text: text,
                    style: {
                        bold: true,
                    },
                });
                break;
            }
            case 'i': {
                segments.push({
                    type: TextType.Styled,
                    text: text,
                    style: {
                        italic: true,
                    },
                });
                break;
            }
            case 'u': {
                segments.push({
                    type: TextType.Styled,
                    text: text,
                    style: {
                        underline: true,
                    },
                });
                break;
            }
        }
    });
    return segments;
}
/**
 * mention 转为 html
 * @param textSegment mention 块
 * @param index index
 * @param locale 地区
 */
function mentionTextToHtml(textSegment, locale) {
    var id = "mention-" + textSegment.id;
    var href = textSegment.mentionType === MentionType.USER ? 'javascript:void(0);' : escapeUrl(textSegment.link);
    var text = textSegmentToPlainText(textSegment, locale);
    var data = encodeURIComponent(JSON.stringify(textSegment));
    var className = classnames__WEBPACK_IMPORTED_MODULE_25___default()(getClassName(textSegment.style), {
        'mention-self': Object(lodash_es__WEBPACK_IMPORTED_MODULE_7__["default"])(window, ['User', 'id']) === textSegment.token
    });
    var span = "<span>" + escapeText(text) + "</span>";
    return "<a class=\"mention " + className + "\" target=\"_blank\" contenteditable=\"false\" href=\"" + href + "\" id=\"" + id + "\" data-mention=\"" + data + "\" data-type=\"" + textSegment.mentionType + "\" data-notify=\"" + (textSegment.notifyId || '') + "\">" + span + "</a>";
}
/**
 * 超链接转为 html
 * @param textSegment 超链接块
 * @param index index
 */
function linkTextToHtml(textSegment) {
    var className = getClassName(textSegment.style);
    var text = "<span class=\"content-link-text\">" + escapeText(textSegment.text) + "</span>";
    return "<a class=\"content-link " + className + "\" target=\"_blank\" rel=\"noreferrer\" href=\"" + escapeUrl(textSegment.link) + "\">" + text + "</a>";
}
/**
 * 样式文本转为 html
 * @param textSegment 样式文本块
 * @param index index
 */
function styleTextToHtml(textSegment) {
    var className = getClassName(textSegment.style);
    var atHolderId = textSegment.atHolderId ? "id=\"at-holder-" + textSegment.atHolderId + "\"" : '';
    var atHolderClass = textSegment.atHolderId ? 'at-holder' : '';
    return "<span " + atHolderId + " class=\"" + classnames__WEBPACK_IMPORTED_MODULE_25___default()(className, atHolderClass) + "\">" + escapeText(textSegment.text) + "</span>";
}
/**
 * tag 转为 html
 * @param textSegment tag 文本块
 */
function tagTextToHtml(textSegment) {
    var className = getClassName(textSegment.style);
    return "<span class=\"tag " + className + "\">" + escapeText(textSegment.text) + "</span>";
}
/**
 * style 转 class name
 */
function getClassName(style) {
    var styleObj = style || {};
    return classnames__WEBPACK_IMPORTED_MODULE_25___default()({
        bold: styleObj.bold,
        italic: styleObj.italic,
        underline: styleObj.underline,
    });
}
/**
 * text 是否为空
 */
function isTextEmpty(text, locale, trim) {
    if (trim === void 0) { trim = false; }
    var plainText = nodeTextToPlainText(text, locale);
    if (trim) {
        plainText = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.trim(plainText);
    }
    return plainText.length === 0;
}
/**
 * 获取节点的纯文本
 * @param text node text
 * @param locale 地区
 * @param escape 是否转义，默认转义
 */
function nodeTextToPlainText(text, locale, escape) {
    if (escape === void 0) { escape = true; }
    if (!Object(lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"])(text)) {
        if (escape) {
            return escapeText(htmlToPlainText(text || ''));
        }
        return htmlToPlainText(text || '');
    }
    else {
        return Object(lodash_es__WEBPACK_IMPORTED_MODULE_8__["default"])(text, function (prev, segment) {
            var str = textSegmentToPlainText(segment, locale);
            if (escape) {
                str = escapeText(str);
            }
            return prev + str;
        }, '');
    }
}
/**
 * html 转为纯文本，未转义
 * @param html html
 */
function htmlToPlainText(html) {
    var el = document.createElement('div');
    el.innerHTML = escapeHtml(html);
    return el.textContent || el.innerText || '';
}
/**
 * 获取文本块的纯文本，未转义
 * @param textSegment 文本块
 * @param locale 地区
 */
function textSegmentToPlainText(textSegment, locale) {
    if (textSegment.type === TextType.Mention) {
        if (textSegment.mentionType === MentionType.USER) {
            // 用户名中英文
            var text = locale === Locale.EN ? (textSegment.textEn || textSegment.text) : (textSegment.text || textSegment.textEn);
            return "@" + text;
        }
        else {
            // 未命名文档
            if (textSegment.text === '') {
                return SuiteTitle[textSegment.mentionType] || SuiteTitle[MentionType.DOC];
            }
        }
    }
    return textSegment.text;
}
/**
 * class 样式转为 text.style
 * @param className class
 */
function classToStyle(className) {
    var names = className.split(' ');
    var style = {};
    Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(names, function (name) {
        if (name === 'bold') {
            style.bold = true;
        }
        else if (name === 'italic') {
            style.italic = true;
        }
        else if (name === 'underline') {
            style.underline = true;
        }
    });
    return style;
}
/**
 * 转义文本
 * @param text 文本
 */
function escapeText(text) {
    return Object(xss__WEBPACK_IMPORTED_MODULE_26__["filterXSS"])(text, { whiteList: {} });
}
/**
 * 转义 html
 * @param html html
 */
function escapeHtml(html) {
    return Object(xss__WEBPACK_IMPORTED_MODULE_26__["filterXSS"])(html, {
        whiteList: {
            b: [],
            i: [],
            u: [],
            a: ['class', 'target', 'href', 'rel', 'data-mention', 'data-type', 'id'],
            span: ['class', 'id'],
        },
        onTag: function (tag) {
            // 清除部分浏览器在编辑时产生的空标签
            if (tag === 'br' || tag === 'p' || tag === 'div') {
                return '';
            }
        },
        onTagAttr: function (tag, name, value, isWhiteAttr) {
            // a 保留 contenteditable false 和 javascript:void(0); 默认会被过滤
            if (tag === 'a'
                && ((name === 'contenteditable' && value === 'false')
                    || (name === 'href' && value === 'javascript:void(0);'))) {
                return name + "=\"" + value + "\"";
            }
        },
    });
}
/**
 * 转义 url 中的 js
 * @param url url
 */
function escapeUrl(url) {
    if (url === 'javascript:void(0);') {
        return url;
    }
    if (/^\s*javascript\s*:/i.test(url)) {
        return '';
    }
    return url;
}
/**
 * 旧的节点文本改成 span 包裹，为了正确显示样式
 */
function ensureNodeTextWrap($content) {
    var content = $content[0];
    if (!content) {
        return;
    }
    Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(content.childNodes, function (node) {
        if (node.nodeType === Node.TEXT_NODE) {
            var span = document.createElement('span');
            span.textContent = node.textContent;
            content.replaceChild(span, node);
        }
    });
}

var lastGenerateIdTime = 0;
/**
 * 创建新的id，全局唯一
 */
function newId(id) {
    lastGenerateIdTime++;
    return blueimp_md5__WEBPACK_IMPORTED_MODULE_23___default()(lastGenerateIdTime + (id || '0') + Date.now() + Math.random());
}
/**
 * 递归调用
 * @param arr
 * @param func
 */
function recursive(arr, func) {
    if (!arr) {
        return;
    }
    /**
     * 递归的执行算法
     */
    var executeRecursive = function (item, parent, index, parentIndex, level, path) {
        if (jquery__WEBPACK_IMPORTED_MODULE_22___default.a.isArray(item)) {
            path = Object(lodash_es__WEBPACK_IMPORTED_MODULE_9__["default"])(path);
            path.push(index);
            for (var ai = 0; ai < item.length; ai++) {
                var childPath = Object(lodash_es__WEBPACK_IMPORTED_MODULE_9__["default"])(path);
                childPath.push(ai);
                executeRecursive(item[ai], parent, ai, parentIndex, level, childPath);
            }
        }
        else {
            path = Object(lodash_es__WEBPACK_IMPORTED_MODULE_9__["default"])(path);
            path.push(index);
            if (false === func(item, parent, index, parentIndex, level, Object(lodash_es__WEBPACK_IMPORTED_MODULE_9__["default"])(path))) {
                // 如果某一次方法，返回了false，不再递归其子节点
                return;
            }
            if (item.children && item.children.length > 0) {
                // 递归创建子节点
                for (var ci = 0; ci < item.children.length; ci++) {
                    var child = item.children[ci];
                    var childPath = Object(lodash_es__WEBPACK_IMPORTED_MODULE_9__["default"])(path);
                    childPath.push('children');
                    executeRecursive(child, item, ci, index, level + 1, childPath);
                }
            }
        }
    };
    for (var i = 0; i < arr.length; i++) {
        var item = arr[i];
        executeRecursive(item, null, i, 0, 0, []);
    }
}
function copy(obj) {
    return jquery__WEBPACK_IMPORTED_MODULE_22___default.a.extend(true, {}, obj);
}
/**
 * 是否有子节点
 * @param node
 */
function hasChildren(node) {
    return node.children && node.children.length > 0;
}
/**
 * 光标左右移动
 */
function moveCursor(content, offset) {
    var position = getCursorPosition();
    var now = offset > 0 ? position.end : position.start;
    setCursorPosition(content, { start: now + offset });
}
/**
 * 光标移到最后
 */
function moveCursorEnd(content) {
    focus(content);
    if (content.text() === '') {
        return;
    }
    if (window.getSelection) {
        // var sel = window.getSelection();//创建range
        // sel.selectAllChildren(editor);//range 选择obj下所有子内容
        // sel.collapseToEnd();//光标移至最后
        var length_1 = content.text().length;
        setCursorPosition(content, { start: length_1, end: length_1 });
    }
}
function getTextNodes(editor) {
    var childNodes = editor[0].childNodes;
    var textNodes = [];
    // 获取所有的文本节点
    function buildTextNodes(nodes) {
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node.nodeName === '#text') {
                textNodes.push(node);
            }
            else if (node.childNodes && node.childNodes.length > 0) {
                buildTextNodes(node.childNodes);
            }
        }
    }
    buildTextNodes(childNodes);
    return textNodes;
}
/**
 * 设置光标的位置
 * @param content 内容输入框
 * @param position 位置的索引
 */
function setCursorPosition(content, position) {
    focus(content);
    if (content.text() === '') {
        return;
    }
    if (!position) {
        return;
    }
    var textNodes = getTextNodes(content);
    if (window.getSelection) {
        // 开始查找光标应该在哪个元素上
        // 光标开始节点、结束节点、开始位置、结束位置
        var startNode = void 0;
        var endNode = void 0;
        var startOffset = 0;
        var endOffset = 0;
        var currentIndex = 0;
        for (var i = 0; i < textNodes.length; i++) {
            var textNode = textNodes[i];
            var textLength = textNode.nodeValue ? textNode.nodeValue.length : 0;
            if (position.start >= currentIndex && position.start <= currentIndex + textLength) {
                // 在当前行上
                startNode = textNode;
                startOffset = position.start - currentIndex;
                if (!position.end) {
                    break;
                }
            }
            if (position.end && position.end >= currentIndex && position.end <= currentIndex + textLength) {
                // 在当前行上
                endNode = textNode;
                endOffset = position.end - currentIndex;
                break;
            }
            currentIndex += textLength;
        }
        if (startNode || endNode) {
            // 重新设置选区
            var range = document.createRange();
            if (startNode) {
                range.setStart(startNode, startOffset);
            }
            if (endNode) {
                range.setEnd(endNode, endOffset);
            }
            var selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
        }
    }
}
/**
 * 获取光标位置
 */
function getCursorPosition() {
    var result = {
        start: 0,
        end: 0,
    };
    var selection = window.getSelection();
    if (selection.rangeCount === 0) {
        return result;
    }
    var range = selection.getRangeAt(0);
    var startNode = range.startContainer;
    var startObj = jquery__WEBPACK_IMPORTED_MODULE_22___default()(startNode);
    // 查找输入容器
    var contentEditor;
    if (startObj.is('div[contenteditable]')) {
        contentEditor = startObj;
    }
    else {
        contentEditor = startObj.parents('div[contenteditable]');
    }
    if (contentEditor.length === 0) {
        return result;
    }
    var preCaretRange = range.cloneRange();
    preCaretRange.selectNodeContents(contentEditor[0]);
    preCaretRange.setEnd(range.startContainer, range.startOffset);
    result.start = preCaretRange.toString().length;
    preCaretRange.setEnd(range.endContainer, range.endOffset);
    result.end = preCaretRange.toString().length;
    return result;
}
/**
 * 让输入框获取焦点
 * 不是直接的调用focus()，因为在safari或iOS webview中，界面会晃动
 * @param editor
 */
function focus(editor) {
    if (navigator.platform) {
        var plat = navigator.platform.toLowerCase();
        if (plat === 'iphone' || plat === 'ipad') {
            var range = document.createRange();
            range.setStart('length' in editor ? editor[0] : editor, 0);
            var selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
            return;
        }
    }
    editor.focus();
}
/**
 * 获取一个锚的光标信息
 * @param $target 当前光标的锚点
 * @param $parent 文本的容器（容器必须包含锚点）
 * @param offset 在当前锚点中的定位
 * @description 只适用于当前的编辑区域结构
 * @todo 优化算法，达到获取光标定位的通用性
 */
function getCursorOffset($target, $parent, offset) {
    var prevNode = null;
    /* 若目标节点是编辑区域直接子节点 */
    if ($target.parent().is($parent)) {
        prevNode = $target.get(0).previousSibling;
        /* 若目标节点是编辑区域中的样式填充节点 */
    }
    else if ($target.parent().parent().is($parent)) {
        prevNode = $target.parent().get(0).previousSibling;
    }
    while (prevNode != null) {
        if (prevNode instanceof Text) {
            offset += prevNode.wholeText.length;
        }
        else if (prevNode instanceof HTMLElement) {
            offset += prevNode.innerText.length;
        }
        prevNode = prevNode.previousSibling;
    }
    return offset;
}
/**
 * 获取内容编辑器
 * @param nodeId
 */
function getContentById(nodeId) {
    return jquery__WEBPACK_IMPORTED_MODULE_22___default()('#' + nodeId).children('.node-wrapper').children('.content-wrapper').children('.content');
}
/**
 * 获取 node wrapper
 * @param nodeId
 */
function getNodeWrapper(nodeId) {
    return jquery__WEBPACK_IMPORTED_MODULE_22___default()('#' + nodeId).children('.node-wrapper');
}
/**
 * 获取备注编辑器
 * @param nodeId
 */
function getNoteById(nodeId) {
    return jquery__WEBPACK_IMPORTED_MODULE_22___default()('#' + nodeId).children('.node-wrapper').children('.note');
}
/**
 * 获取标题编辑器
 */
function getTitleContent() {
    return jquery__WEBPACK_IMPORTED_MODULE_22___default()('.mindnote-name .mindnote-title-content');
}
/**
 * 获取内容
 * @param nodeDom
 */
function getContentByNode(nodeDom) {
    return nodeDom.children('.node-wrapper').children('.content-wrapper').children('.content');
}
/**
 * 获取节点容器
 * @param nodeId
 */
function getNodeContainer(nodeId) {
    return jquery__WEBPACK_IMPORTED_MODULE_22___default()('#' + nodeId);
}
/**
 * 取消选择
 */
function removeSelection() {
    window.getSelection().removeAllRanges();
}
/**
 * 格式化时间
 * @param time
 * @returns {string}
 */
function formatTime(time) {
    var d = new Date(time);
    var year = d.getFullYear();
    var month = d.getMonth() + 1;
    var day = d.getDate();
    var hours = d.getHours();
    var minutes = d.getMinutes();
    var appendZero = function (n) { return "" + (n < 10 ? '0' : '') + n; };
    return year + "-" + appendZero(month) + "-" + appendZero(day) + " " + appendZero(hours) + ":" + appendZero(minutes);
}
/**
 * 返回编辑的日期字符串
 * @param time 对比日期
 * @param now 当前日期
 */
function formatDate(format, time, now) {
    if (now === void 0) { now = Date.now(); }
    if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(format)) {
        var date = moment__WEBPACK_IMPORTED_MODULE_24___default()(time);
        var base = moment__WEBPACK_IMPORTED_MODULE_24___default()(now);
        if (date.isSame(base, 'day')) {
            return t('mindnote.editor.edited') + ' ' + format(time, now);
        }
        else {
            return t('mindnote.editor.edited_at') + ' ' + format(time, now);
        }
    }
    return t('mindnote.editor.edited_at') + formatTime(time);
}
function dataURItoBlob(dataURI) {
    var imageData = atob(dataURI.split(',')[1]);
    // Use typed arrays to convert the binary data to a Blob
    var arraybuffer = new ArrayBuffer(imageData.length);
    var view = new Uint8Array(arraybuffer);
    for (var i = 0; i < imageData.length; i++) {
        view[i] = imageData.charCodeAt(i) & 0xff;
    }
    var blob;
    try {
        // This is the recommended method:
        blob = new Blob([arraybuffer], { type: 'image/png' });
    }
    catch (e) {
        // The BlobBuilder API has been deprecated in favour of Blob, but older
        // browsers don't know about the Blob constructor
        // IE10 also supports BlobBuilder, but since the `Blob` constructor
        //  also works, there's no need to add `MSBlobBuilder`.
        var win = window;
        var bb = void 0;
        if (win.WebKitBlobBuilder) {
            bb = new win.WebKitBlobBuilder();
        }
        else {
            bb = new win.MozBlobBuilder();
        }
        bb.append(arraybuffer);
        blob = bb.getBlob('image/png'); // <-- Here's the Blob
    }
    return blob;
}
/**
 * 计算节点的字符数量
 * @param nodes 节点集合
 * @param containChildren 是否处理子节点
 */
function countNodeWords(nodes, containChildren, locale) {
    // 将text和note拼接
    var result = {
        wordCount: 0,
        nodeCount: 0,
    };
    var text = '';
    function executeNode(node) {
        text += nodeTextToPlainText(node.text, locale, false) + '，';
        if (node.note) {
            text += nodeTextToPlainText(node.note, locale, false) + '，';
        }
        result.nodeCount++;
    }
    if (containChildren) {
        recursive(nodes, function (node) {
            executeNode(node);
        });
    }
    else {
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodes, function (index, node) {
            executeNode(node);
        });
    }
    result.wordCount = textCount(text);
    return result;
}
/**
 *
 * 对文本进行处理并计算出数量
 * @param text
 * @returns {Number}
 */
function textCount(text) {
    // 处理至少连续2个的特殊符号，替换为一个中文逗号
    text = text.replace(/[\~|\`|\!|\@|\#|\$|\%|\^|\&|\*|\(|\)|\-|\_|\+|\=|\||\\|\[|\]|\{|\}|\;|\:|\"|\'|\,|\<|\.|\>|\/|\?]{2,}/, '，');
    // 处理空格替换为中文逗号
    text = text.replace(/[ ]/g, '，');
    // 处理单一的特殊符号替换成一个中文逗号
    var pattern = new RegExp('[`~!$*^()=|{}:;,\\[\\]<>/?~！@#￥&（）——|{}……【】·；：”“。，、_?％ % 「」『』\\u200b]');
    var rs = '';
    for (var i = 0; i < text.length; i++) {
        rs = rs + text.substr(i, 1).replace(pattern, '，');
    }
    // 处理英文字符数字，连续字母、数字、英文符号视为一个单词
    rs = rs.replace(/[\x00-\xff]/g, 'm');
    // 合并字符m，连续字母、数字、英文符号视为一个单词
    rs = rs.replace(/m+/g, '好');
    // 将中文逗号去掉
    rs = rs.replace(/，+/g, '');
    return rs.length;
}
function blurContent(editor) {
    var selection = window.getSelection();
    selection.removeAllRanges();
    if (editor) {
        editor.blur();
    }
}

/**
 * Created by morris on 16/5/6.
 * 文档实体对象
 */
var Model = /** @class */ (function () {
    function Model(editorId, define, name, root) {
        this.modelId = '';
        this.name = '';
        // 根节点
        this.rootNode = null;
        // 文档完整定义
        this.define = {
            nodes: []
        };
        // 每个节点映射
        this.mapping = {};
        /**
         * 评论 map，评论 id => 节点 id
         */
        this.commentMapping = {};
        this.modelId = editorId;
        if (define) {
            this.define = define;
        }
        if (name) {
            this.name = name;
        }
        if (root) {
            this.rootNode = root;
        }
    }
    Model.prototype.getModelId = function () {
        return this.modelId;
    };
    Model.prototype.setName = function (name) {
        this.name = name;
    };
    Model.prototype.getName = function () {
        return this.name;
    };
    Model.prototype.setDefine = function (def) {
        if (def) {
            var me = this;
            me.define = def;
            if (!me.define.nodes) {
                me.define.nodes = [];
            }
            me.buildMapping();
        }
    };
    Model.prototype.getDefine = function () {
        return this.define;
    };
    /**
     * 设置定义
     * @param nodes 节点数组
     */
    Model.prototype.setNodes = function (nodes) {
        if (nodes) {
            this.define.nodes = nodes;
            this.buildMapping();
        }
    };
    /**
     * 设置根节点
     * @param nodeId
     */
    Model.prototype.setRootNode = function (nodeId) {
        if (!nodeId) {
            this.rootNode = null;
        }
        else {
            this.rootNode = this.getById(nodeId);
        }
        return this.rootNode;
    };
    Model.prototype.getRootNode = function () {
        return this.rootNode;
    };
    Model.prototype.setSetting = function (name, value) {
        this.define[name] = value;
    };
    /**
     * 构建mapping
     */
    Model.prototype.buildMapping = function () {
        var _this = this;
        this.mapping = {};
        this.commentMapping = {};
        recursive(this.define.nodes, function (node, parentNode, index, parentIndex, level, path) {
            path.unshift('nodes');
            _this.mapping[node.id] = {
                node: node,
                parentId: parentNode ? parentNode.id : null,
                index: index,
                path: path
            };
            Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(node.comments || [], function (comment) {
                _this.commentMapping[comment.id] = node.id;
            });
        });
    };
    Model.prototype.getMapping = function () {
        return this.mapping;
    };
    /**
     * 获取评论 map
     */
    Model.prototype.getCommentMapping = function () {
        return this.commentMapping;
    };
    /**
     * 获取可见节点（drill 后)
     */
    Model.prototype.getVisibleNodes = function () {
        if (!this.rootNode) {
            return Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(this.mapping);
        }
        var nodes = [this.rootNode.id];
        recursive(this.rootNode.children || [], function (node) {
            nodes.push(node.id);
        });
        return nodes;
    };
    /**
     * OT-JSON与内置消息适配器，通过一个节点的id获取一个一个节点的path
     * @param id 节点ID，非节点操作为null
     */
    Model.prototype.getPath = function (id) {
        var path = [];
        var currentId = id;
        while (currentId !== null) {
            var nodeSet = this.mapping[currentId];
            /* 若节点的setting为空，则抛出异常 */
            if (!nodeSet) {
                throw new Error('Null id error!');
            }
            path.unshift(nodeSet.index);
            currentId = nodeSet.parentId;
            /* 若为null，则代表是根节点，否则是常规节点 */
            if (currentId === null) {
                path.unshift('nodes');
            }
            else {
                path.unshift('children');
            }
        }
        return path;
    };
    /**
     * OT-JSON与内置消息的适配器，通过path来获取节点信息
     * @param path 节点path
     */
    Model.prototype.getNodeSet = function (path) {
        var node = Object(lodash_es__WEBPACK_IMPORTED_MODULE_7__["default"])(this.define, path);
        var nodeSet = this.mapping[node.id];
        /* 若path不正确，则抛异常 */
        if (!nodeSet) {
            throw new Error('Invalid path: ' + path.join('.'));
        }
        return Object(lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"])(nodeSet);
    };
    /**
     * 获取节点总数
     */
    Model.prototype.getCount = function () {
        var count = Object.keys(this.mapping).length;
        if (!count) {
            count = 0;
        }
        return count;
    };
    /**
     * 通过id获取节点
     * @param id
     * @returns {*}
     */
    Model.prototype.getById = function (id) {
        var nodeMapping = this.mapping[id];
        if (nodeMapping) {
            return nodeMapping.node;
        }
        return null;
    };
    /**
     * 获取节点的mapping信息
     * @param {string} nodeId
     * @returns {NodeSet}
     */
    Model.prototype.getMappingById = function (nodeId) {
        return this.mapping[nodeId];
    };
    /**
     * 获取父节点
     * @param id
     */
    Model.prototype.getParent = function (id) {
        var nodeMapping = this.mapping[id];
        if (!nodeMapping) {
            // 节点已经已经不存在
            return null;
        }
        var parentId = nodeMapping.parentId;
        if (parentId) {
            return this.getById(parentId);
        }
        else {
            return null;
        }
    };
    /**
     * 判断 A 节点 是否包含 B 节点，包括等于
     * @param parentId 父级节点
     * @param childId 子节点
     */
    Model.prototype.contains = function (parentId, childId) {
        var nodeId = childId;
        while (nodeId && nodeId !== parentId) {
            var node = this.getParent(nodeId);
            nodeId = node ? node.id : '';
        }
        return nodeId && nodeId === parentId;
    };
    /**
     * 获取父级数组
     * @param nodeId
     */
    Model.prototype.getParentArray = function (nodeId) {
        var parentNode = this.getParent(nodeId);
        var targetArr = [];
        if (parentNode == null) {
            targetArr = this.define.nodes;
        }
        else {
            // 添加到父节点的children中
            targetArr = parentNode.children;
        }
        return targetArr;
    };
    /**
     * 获取节点在数组中的索引
     * @param nodeId
     */
    Model.prototype.getNodeIndex = function (nodeId) {
        var nodeMapping = this.mapping[nodeId];
        if (nodeMapping) {
            return nodeMapping.index;
        }
        return -1;
    };
    /**
     * 获取节点在数组中的索引
     * @param targetArr
     * @param nodeId
     */
    Model.prototype.getNodeIndexInArray = function (targetArr, nodeId) {
        // 查看当前节点在父数组中的索引
        for (var i = 0; i < targetArr.length; i++) {
            if (targetArr[i].id === nodeId) {
                // 是当前节点，进行删除
                return i;
            }
        }
        return -1;
    };
    /**
     * 添加节点
     * @param nodeStructures 多个节点的结构每个包含parentId，node，index
     */
    Model.prototype.addNodes = function (nodeStructures) {
        var me = this;
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodeStructures, function (index, structure) {
            var targetArr = me.define.nodes;
            if (structure.parentId) {
                var parentNode = me.getById(structure.parentId);
                if (!parentNode) {
                    // 如果本地没有元素的父节点，忽略
                    return true; // return true = continue;
                }
                if (!parentNode.children) {
                    parentNode.children = [];
                }
                targetArr = parentNode.children;
            }
            targetArr.splice(structure.index, 0, copy(structure.node));
            me.buildMapping();
        });
    };
    /**
     * 在前边添加子节点
     * @param targetId
     * @param nodes
     */
    Model.prototype.prependChildren = function (targetId, nodes) {
        var targetNode = this.getById(targetId);
        if (!targetNode.children) {
            targetNode.children = [];
        }
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodes, function (index, node) {
            node.modified = new Date().getTime();
            targetNode.children.splice(index, 0, node);
        });
        this.buildMapping();
    };
    /**
     * 在某一节点后边追加同级节点
     * @param targetId
     * @param nodes
     */
    Model.prototype.appendAfter = function (targetId, nodes) {
        var me = this;
        // 添加同级节点
        // 看需要添加到哪个位置
        var targetArr = me.getParentArray(targetId);
        var nodeIndex = me.getNodeIndex(targetId);
        // 在当前节点索引位置后边插入
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodes, function (i, node) {
            nodeIndex++;
            node.modified = new Date().getTime();
            targetArr.splice(nodeIndex, 0, node);
        });
        me.buildMapping();
    };
    /**
     * 创建新节点
     * @returns {{id: *, text: string}}
     */
    Model.prototype.createNode = function () {
        var id = this.newId();
        return {
            id: id,
            text: [],
            children: [],
            images: [],
            modified: new Date().getTime()
        };
    };
    /**
     * 创建前置同级节点
     * @param nodeId 目标节点的id
     * @param content 新建节点的内容
     */
    Model.prototype.createPrevious = function (nodeId, content) {
        var me = this;
        var newNode = me.createNode();
        if (content) {
            newNode.text = content;
        }
        var node = me.getById(nodeId);
        if (node.color) {
            newNode.color = node.color;
        }
        if (node.heading) {
            newNode.heading = node.heading;
        }
        if (node.highlight) {
            newNode.highlight = node.highlight;
        }
        // 添加同级节点
        // 要添加到的目标数组
        var targetArr = me.getParentArray(nodeId);
        // 看需要添加到哪个位置
        var index = me.getNodeIndex(nodeId);
        // 在当前节点索引位置前边插入
        targetArr.splice(index, 0, newNode);
        me.buildMapping();
        return newNode;
    };
    /**
     * 创建同级节点
     * @param nodeId 目标节点的id
     */
    Model.prototype.createNext = function (nodeId) {
        var me = this;
        var newNode = me.createNode();
        var node = me.getById(nodeId);
        if (node.color) {
            newNode.color = node.color;
        }
        if (node.heading) {
            newNode.heading = node.heading;
        }
        // 添加同级节点
        // 要添加到的目标数组
        var targetArr = me.getParentArray(nodeId);
        // 看需要添加到哪个位置
        var index = me.getNodeIndex(nodeId);
        // 在当前节点索引位置后边插入
        index++;
        targetArr.splice(index, 0, newNode);
        me.buildMapping();
        return newNode;
    };
    /**
     * 创建第一个子节点
     */
    Model.prototype.createFirstChild = function () {
        var me = this;
        var newNode = me.createNode();
        // 添加同级节点
        var targetArr = me.define.nodes;
        if (me.rootNode != null) {
            if (!me.rootNode.children) {
                me.rootNode.children = [];
            }
            targetArr = me.rootNode.children;
        }
        targetArr.splice(0, 0, newNode);
        me.buildMapping();
        return newNode;
    };
    /**
     * 创建第一个子节点
     * @param nodeId
     * @param content 新建节点的内容
     */
    Model.prototype.createChild = function (nodeId, content) {
        var me = this;
        var newNode = me.createNode();
        if (content) {
            newNode.text = content;
        }
        // 添加子级节点
        var node = me.getById(nodeId);
        if (node.color) {
            newNode.color = node.color;
        }
        if (node.heading) {
            newNode.heading = node.heading;
        }
        if (node.children == null) {
            node.children = [];
        }
        node.children.splice(0, 0, newNode);
        me.buildMapping();
        return newNode;
    };
    /**
     * 缩进node
     * @param nodeId 节点id
     * @return 添加到的父节点，如果不能调整，返回null
     */
    Model.prototype.indentNode = function (nodeId) {
        var node = this.getById(nodeId);
        node.modified = new Date().getTime();
        // 要从中删除的目标数组
        var targetArr = this.getParentArray(nodeId);
        var index = this.getNodeIndex(nodeId);
        if (index > 0) {
            // 不是第一个节点，那就放到前一个节点的children中
            var targetNode = targetArr[index - 1];
            if (!targetNode.children) {
                targetNode.children = [];
            }
            targetNode.children.push(node);
            // 同时删除自己
            targetArr.splice(index, 1);
            this.buildMapping();
            return targetNode;
        }
        return null;
    };
    /**
     * 回退node
     * @param nodeId 节点id
     * @return 添加到的父节点，如果不能调整，返回null
     */
    Model.prototype.outdentNode = function (nodeId) {
        var me = this;
        if (me.isRootSubNode(nodeId)) {
            // 是根节点，不能回退
            return null;
        }
        var parent = me.getParent(nodeId);
        var node = me.getById(nodeId);
        if (parent == null) {
            // 是根节点，不处理
            return null;
        }
        node.modified = new Date().getTime();
        // 把节点的从当前数组中删除
        me.removeNode(parent.children || [], nodeId);
        // 再向上查找一级
        var targetArr = me.getParentArray(parent.id);
        // 父级在爷级的索引
        var index = me.getNodeIndex(parent.id);
        targetArr.splice(index + 1, 0, node);
        me.buildMapping();
        return parent;
    };
    /**
     * 删除节点
     * @param nodeId
     */
    Model.prototype.deleteNode = function (nodeId) {
        var node = this.getById(nodeId);
        if (!node) {
            return;
        }
        // 要从中删除的目标数组
        var targetArr = this.getParentArray(nodeId);
        this.removeNode(targetArr || [], nodeId);
        this.buildMapping();
    };
    /**
     * 删除多个节点
     * @param nodeIds
     */
    Model.prototype.deleteNodes = function (nodeIds) {
        var me = this;
        if (!jquery__WEBPACK_IMPORTED_MODULE_22___default.a.isArray(nodeIds)) {
            nodeIds = [nodeIds];
        }
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodeIds, function (index, nodeId) {
            // 要从中删除的目标数组
            var targetArr = me.getParentArray(nodeId);
            // 查看当前节点在父数组中的索引，删除它，因为节点的索引可能会发生变化，所以每次都重新查找
            for (var i = 0; i < targetArr.length; i++) {
                if (targetArr[i].id === nodeId) {
                    // 是当前节点，进行删除
                    targetArr.splice(i, 1);
                }
            }
        });
        me.buildMapping();
    };
    /**
     * 从父节点中删除
     * @param parentArr
     * @param nodeId
     */
    Model.prototype.removeNode = function (parentArr, nodeId) {
        var index = this.getNodeIndexInArray(parentArr, nodeId);
        if (index >= 0) {
            parentArr.splice(index, 1);
        }
    };
    /**
     * 移动节点
     * @param nodeId
     * @param targetId
     * @param type 移动类型，在前还是在后，prev | next
     */
    Model.prototype.moveNode = function (nodeId, targetId, type) {
        var me = this;
        // 先删除，在查看目标的节点的索引，因为目标节点和当前节点可能是同一组
        var nodeParentArray = this.getParentArray(nodeId);
        me.removeNode(nodeParentArray, nodeId);
        // 使用重新遍历父级数组的形式取索引，因为如果两个节点在同一级的时候，索引会发生变化，不能取mapping中的index
        var targetArr = me.getParentArray(targetId);
        var index = me.getNodeIndexInArray(targetArr, targetId);
        var node = me.getById(nodeId);
        if (type === 'next') {
            index++;
        }
        node.modified = new Date().getTime();
        targetArr.splice(index, 0, node);
        me.buildMapping();
    };
    /**
     * 移动多个节点
     * @param nodeId
     * @param targetId
     * @param type 移动类型，在前还是在后，prev | next
     */
    Model.prototype.moveNodes = function (nodes, targetId, type) {
        var me = this;
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodes, function (nodeIndex, node) {
            // 先删除，在查看目标的节点的索引，因为目标节点和当前节点可能是同一组
            var nodeId = node.id;
            var nodeParentArray = me.getParentArray(nodeId);
            me.removeNode(nodeParentArray, nodeId);
            var targetArr = me.getParentArray(targetId);
            // 使用重新遍历父级数组的形式取索引，因为如果两个节点在同一级的时候，索引会发生变化，不能取mapping中的index
            var targetIndex = me.getNodeIndexInArray(targetArr, targetId);
            if (type === 'next') {
                targetIndex = targetIndex + nodeIndex + 1;
            }
            node.modified = new Date().getTime();
            targetArr.splice(targetIndex, 0, node);
        });
        me.buildMapping();
    };
    /**
     * 重新设置节点位置
     * @param parentId
     * @param index
     * @param nodeId
     */
    Model.prototype.relocateNode = function (parentId, index, nodeId) {
        var me = this;
        var node = me.getById(nodeId);
        var targetArr;
        if (parentId) {
            var parentNode = me.getById(parentId);
            if (!parentNode) {
                // 有可能parent已经不存在，比如协同消息未到达时，本地进行了删除
                return;
            }
            // 添加到父节点的children中
            if (!parentNode.children) {
                parentNode.children = [];
            }
            targetArr = parentNode.children;
        }
        else {
            targetArr = this.define.nodes;
        }
        node.modified = new Date().getTime();
        targetArr.splice(index, 0, node);
    };
    /**
     * 更新节点
     * @param node
     */
    Model.prototype.update = function (node) {
        var nodeMapping = this.mapping[node.id];
        var target = nodeMapping.node;
        if (!target) {
            // 被更新的节点可能已经不存在
            return;
        }
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_2__["default"])(target, node);
        // 因为node中可能不存在finish和collapsed属性，所以特殊处理一下
        if (!node.finish) {
            target.finish = false;
        }
        if (!node.collapsed) {
            target.collapsed = false;
        }
        target.modified = Date.now();
        this.buildMapping();
    };
    /**
     * 创建新的id
     */
    Model.prototype.newId = function () {
        return newId(this.modelId);
    };
    /**
     * 是否是顶级节点
     * @param nodeId
     */
    Model.prototype.isTopLevel = function (nodeId) {
        var me = this;
        var parentNode = me.getParent(nodeId);
        return parentNode == null || (me.rootNode != null && me.rootNode.id === nodeId);
    };
    /**
     * 是否是根节点
     * @param nodeId
     */
    Model.prototype.isRootNode = function (nodeId) {
        var me = this;
        return me.rootNode != null && me.rootNode.id === nodeId;
    };
    /**
     * 是否是一级
     * @param nodeId
     */
    Model.prototype.isRootSubNode = function (nodeId) {
        var me = this;
        var parent = me.getParent(nodeId);
        if (me.rootNode != null) {
            return parent != null && parent.id === me.rootNode.id;
        }
        else if (parent == null) {
            return true;
        }
        return false;
    };
    /**
     * 获取全部主节点，也就是在列表中的第一级节点
     */
    Model.prototype.getRootSubNodes = function () {
        var me = this;
        var rootNode = me.rootNode;
        if (rootNode == null) {
            return me.define.nodes;
        }
        else {
            return rootNode.children ? rootNode.children : [];
        }
    };
    /**
     * 获取当前的路径
     */
    Model.prototype.getDir = function (rootNode) {
        var result = [];
        var currentNode = rootNode || this.rootNode;
        if (currentNode != null) {
            while (true) {
                // 层级向上查找，并往数组后边push
                var parentNode = this.getParent(currentNode.id);
                if (parentNode == null) {
                    break;
                }
                result.push(parentNode);
                currentNode = parentNode;
            }
            result.reverse();
        }
        return result;
    };
    /**
     * 获取前面的节点（同级或父级）
     */
    Model.prototype.getPrevNode = function (nodeId) {
        var me = this;
        var nodeIndex = me.getNodeIndex(nodeId);
        if (nodeIndex > 0) {
            // 同级上一个
            var targetArr = me.getParentArray(nodeId);
            return targetArr ? targetArr[nodeIndex - 1] : null;
        }
        else {
            // 父级 node
            return this.getParent(nodeId);
        }
    };
    /**
     * 获取前边的同级节点
     * @param nodeId
     * @returns {*}
     */
    Model.prototype.getPrevSibling = function (nodeId) {
        var me = this;
        var nodeIndex = me.getNodeIndex(nodeId);
        if (nodeIndex > 0) {
            var targetArr = me.getParentArray(nodeId);
            return targetArr[nodeIndex - 1];
        }
    };
    /**
     * 获取后边的同级节点
     * @param nodeId
     * @returns {*}
     */
    Model.prototype.getNextSibling = function (nodeId) {
        var me = this;
        var nodeIndex = me.getNodeIndex(nodeId);
        var targetArr = me.getParentArray(nodeId);
        if (nodeIndex < targetArr.length - 1) {
            return targetArr[nodeIndex + 1];
        }
    };
    return Model;
}());

var SourceEvent;
(function (SourceEvent) {
    /**
     * 本地发生编辑
     */
    SourceEvent["DOC_CHANGED"] = "DOC_CHANGED";
    /**
     * 执行远端消息
     */
    SourceEvent["MESSAGE_EXECUTED"] = "MESSAGE_EXECUTED";
    /**
     * 文档标题改变
     */
    SourceEvent["TITLE_CHANGED"] = "TITLE_CHANGED";
    /**
     * 翻页钻取
     */
    SourceEvent["DRILLED"] = "DRILLED";
    /**
     * drill某个节后后，节点被其他人删除了
     * @type {string}
     */
    SourceEvent["DRILL_REMOVED"] = "DRILL_REMOVED";
    /**
     * 思维导图打开事件
     */
    SourceEvent["MIND_MAP_OPEN"] = "MIND_MAP_OPEN";
    /**
     * 思维导图关闭事件
     */
    SourceEvent["MIND_MAP_CLOSE"] = "MIND_MAP_CLOSE";
    /**
     * 思维导图导出事件，data参数格式：{name: string, base64Data: string}
     * @type {string}
     */
    SourceEvent["MIND_MAP_EXPORT"] = "MIND_MAP_EXPORT";
    /**
     * 演示模式打开事件
     */
    SourceEvent["PRESENTATION_OPEN"] = "PRESENTATION_OPEN";
    /**
     * 打开一个连接的事件，会把url地址作为data参数传入
     * @type {string}
     */
    SourceEvent["OPEN_LINK"] = "OPEN_LINK";
    /**
     * 添加图片事件
     * @type {string}
     */
    SourceEvent["ADD_IMAGE"] = "ADD_IMAGE";
    /**
     * 需要弹出提醒信息事件
     * @type {string}
     */
    SourceEvent["TIP_MESSAGE"] = "TIP_MESSAGE";
    /**
     * 预览图片
     * @type {string}
     */
    SourceEvent["PREVIEW_IMAGE"] = "PREVIEW_IMAGE";
    /**
     * 节点的点击事件
     * @type {string}
     */
    SourceEvent["NODE_CLICK"] = "NODE_CLICK";
    /*
     * 输入框的focus事件
     * @type {string}
     */
    SourceEvent["INPUT_FOCUS"] = "INPUT_FOCUS";
    /**
     * 工具栏打开事件
     */
    SourceEvent["TOOLBAR_OPEN"] = "TOOLBAR_OPEN";
    /**
     * 打开/关闭/更新 mention box
     */
    SourceEvent["UPDATE_MENTION"] = "UPDATE_MENTION";
    /**
     * 打开 @ 人名片
     */
    SourceEvent["OPEN_USER_PROFILE"] = "OPEN_USER_PROFILE";
    /*
     * wrapper中的节点发生变化事件，来判断当前是否存在节点，进行相应的控制
     */
    SourceEvent["WRAPPER_CHANGED"] = "WRAPPER_CHANGED";
    /**
     * 显示/隐藏 mention hover popup
     */
    SourceEvent["SHOW_MENTION_POPUP"] = "SHOW_MENTION_POPUP";
    /**
     * 粘贴 url
     */
    SourceEvent["PASTE_URL"] = "PASTE_URL";
    /**
     * 思维导图主题改变
     */
    SourceEvent["MIND_MAP_THEME_CHANGE"] = "MIND_MAP_THEME_CHANGE";
    /**
     * 演示模式 白天跟夜间模式改变
     */
    SourceEvent["PRESENTATION_MODE_CHANGE"] = "PRESENTATION_MODE_CHANGE";
    /**
     * 添加评论
     */
    SourceEvent["ADD_COMMENT"] = "ADD_COMMENT";
    /**
     * 激活评论
     */
    SourceEvent["ACTIVE_COMMENT"] = "ACTIVE_COMMENT";
    /**
     * 重新刷新评论的布局和位置
     */
    SourceEvent["REFRESH_COMMENT"] = "REFRESH_COMMENT";
    /**
     * 重新刷新光标显示与隐藏
     */
    SourceEvent["REFRESH_CURSOR"] = "REFRESH_CURSOR";
    /**
     * 关闭演示模式
     */
    SourceEvent["PRESENTATION_CLOSE"] = "PRESENTATION_CLOSE";
    /**
     * 复制被阻止
     */
    SourceEvent["COPY_DENIED"] = "COPY_DENIED";
    /**
     * 导出被阻止
     */
    SourceEvent["EXPORT_DENIED"] = "EXPORT_DENIED";
    /**
     * 粘贴了图片
     */
    SourceEvent["PASTE_IMAGE"] = "PASTE_IMAGE";
    /**
     * 开始拖动节点
     */
    SourceEvent["DRAG_NODE_START"] = "DRAG_NODE_START";
    /**
     * 结束拖动节点
     */
    SourceEvent["DRAG_NODE_END"] = "DRAG_NODE_END";
})(SourceEvent || (SourceEvent = {}));
/**
 * 复制一个节点，忽略children
 * @param node
 * @returns {{}}
 */
function copy$1(node) {
    var result = {};
    for (var key in node) {
        if (key === 'images') {
            // 数组类型的字段要深度拷贝
            if (node.images && node.images.length > 0) {
                result.images = [];
                jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(node.images, function (index, img) {
                    result.images.push(jquery__WEBPACK_IMPORTED_MODULE_22___default.a.extend({}, img));
                });
            }
            else {
                result.images = [];
            }
        }
        else if (key !== 'children') {
            result[key] = node[key];
        }
    }
    return result;
}
/**
 * Created by morris on 16/5/11.
 * 事件相关
 */
var EventSource = /** @class */ (function () {
    function EventSource(model, selectHolder, state, viewport) {
        this.handlers = {};
        // 记录更新之前的 model，深度拷贝版
        this.modelCopy = new Model('');
        this.nodeDefaults = {
            text: '',
            note: '',
            modified: 0,
            finish: false,
            collapsed: false,
            color: '',
            heading: 0
        };
        this.model = model;
        this.selectHolder = selectHolder;
        this.state = state;
        this.viewport = viewport;
        this.initEventListeners();
    }
    /**
     * 通过id获取
     * @param nodeId
     * @returns {*|{}}
     */
    EventSource.prototype.getNodeById = function (nodeId) {
        return copy$1(this.modelCopy.getById(nodeId));
    };
    /**
     * 获取mapping
     * @param nodeId
     */
    EventSource.prototype.getMappingById = function (nodeId) {
        return copy(this.modelCopy.getMappingById(nodeId));
    };
    /**
     * 设置节点
     * @param nodes
     */
    EventSource.prototype.setNodes = function (nodes) {
        this.modelCopy = new Model('');
        this.modelCopy.setNodes(Object(lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"])(nodes));
    };
    /**
     * 触发事件
     * @param eventName
     * @param data
     * @param extendData 扩展数据
     */
    EventSource.prototype.trigger = function (eventName, data, extendData) {
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(this.handlers[eventName], function (handler) {
            if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(handler)) {
                handler(data, extendData);
            }
        });
    };
    /**
     * 监听事件
     * @param eventName
     * @param handler
     */
    EventSource.prototype.on = function (eventName, handler) {
        var handlers = this.handlers[eventName];
        if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"])(handlers)) {
            handlers.push(handler);
        }
        else {
            this.handlers[eventName] = [handler];
        }
    };
    /**
     * 从model中同步对象定义
     */
    EventSource.prototype.synchronizeModel = function () {
        var nodes = this.model.getDefine().nodes;
        this.setNodes(nodes);
    };
    /**
     * 文档变化时
     */
    EventSource.prototype.documentChanged = function () {
        this.synchronizeModel();
    };
    /**
     * 管理wrapper，交给外部注册的监听器
     */
    EventSource.prototype.manageWrapper = function () {
        var nodeCount = this.viewport.nodeWrapper.find('.node:not(.root-node)').length;
        var data = {
            rootNode: this.model.getRootNode(),
            nodeCount: nodeCount,
            editable: !this.state.readonly
        };
        this.trigger(SourceEvent.WRAPPER_CHANGED, data);
    };
    /**
     * 视图发生变化事件，包括文档修改，drill，undo等行为
     * 会用来更新评论的位置
     */
    EventSource.prototype.refreshComment = function () {
        this.trigger(SourceEvent.REFRESH_COMMENT);
    };
    /**
     * 管理节点的展开收缩图标
     */
    EventSource.prototype.managerToggle = function () {
        var leafClass = 'mindnote-leaf';
        this.viewport.paper.find('.node').addClass(leafClass);
        this.viewport.paper.find('.children').each(function () {
            var childrenContainer = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            if (childrenContainer.children().length > 0) {
                childrenContainer.parent().removeClass(leafClass);
            }
        });
    };
    /**
     * 构建删除的消息
     * @param deletedNodes
     */
    EventSource.prototype.getDeleteAction = function (deletedNodes) {
        var _this = this;
        var result = {
            name: 'delete',
            deleted: []
        };
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(deletedNodes, function (node) {
            var nodeMapping = _this.getMappingById(node.id);
            // 因为需要包含children，从model中取
            nodeMapping.node = node;
            result.deleted.push(nodeMapping);
        });
        return result;
    };
    /**
     * 构建更新的消息
     * @param updatedNodes
     * @param updateData
     */
    EventSource.prototype.getUpdateAction = function (updatedNodes, updateData) {
        var _this = this;
        var result = {
            name: 'update',
            updated: []
        };
        // copy一下，目的是去掉children属性
        updateData = copy$1(updateData);
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(updatedNodes, function (node) {
            var originalNode = _this.getNodeById(node.id);
            var original = { id: node.id };
            Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(updateData), function (key) {
                if (key !== 'children') {
                    if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_12__["default"])(originalNode[key])) {
                        original[key] = _this.nodeDefaults[key];
                    }
                    else {
                        original[key] = originalNode[key];
                    }
                }
            });
            result.updated.push({
                updated: __assign({ id: node.id }, updateData),
                original: original,
                path: _this.modelCopy.getMappingById(node.id).path
            });
        });
        return result;
    };
    EventSource.prototype.popDocChangeActions = function (actions) {
        this.trigger(SourceEvent.DOC_CHANGED, actions);
    };
    /**
     * 初始化自带的监听器
     */
    EventSource.prototype.initEventListeners = function () {
        var _this = this;
        /**
         * 打开一页后的事件
         */
        this.on('opened', function () {
            _this.manageWrapper();
        });
        /**
         * 创建后事件
         */
        this.on('created', function (data) {
            var actions = [];
            if (data.updated) {
                // 如果删除的同时发生了更新，则添加更新的动作
                var updateAction = _this.getUpdateAction(data.updated, data.updateData);
                actions.push(updateAction);
            }
            // 创建后要先调用documentChanged来同步model，因为要获取最新的mapping
            _this.documentChanged();
            _this.manageWrapper();
            _this.managerToggle();
            _this.refreshComment();
            // 发送创建消息
            var createdNodes = data.created;
            var messageNodes = [];
            jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(createdNodes, function (index, node) {
                var messageNode = _this.getMappingById(node.id);
                messageNode.node = _this.model.getById(node.id);
                messageNodes.push(messageNode);
            });
            var createAction = {
                name: 'create',
                created: messageNodes
            };
            if (data.cursor) {
                createAction.cursor = data.cursor;
            }
            actions.push(createAction);
            actions = Object(lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"])(actions);
            _this.popDocChangeActions(actions);
        });
        /**
         * 节点删除后的事件
         */
        this.on('deleted', function (data) {
            var actions = [];
            // 删除的消息
            var deleteAction = _this.getDeleteAction(data.deleted);
            if (_this.selectHolder.getSelectIds().length > 0) {
                deleteAction.selected = _this.selectHolder.getSelectIds();
            }
            actions.push(deleteAction);
            if (data.updated) {
                // 如果删除的同时发生了更新，则添加更新的动作
                // 如在节点内容最前按backspace，本节点删除，同时将本节点的内容合并到上一节点
                var updateAction = _this.getUpdateAction(data.updated, data.updateData);
                actions.push(updateAction);
            }
            actions = Object(lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"])(actions);
            _this.documentChanged();
            _this.manageWrapper();
            _this.managerToggle();
            _this.refreshComment();
            _this.popDocChangeActions(actions);
        });
        /**
         * 节点更新后节点，设置属性(合并、完成)
         * @param updateData 扩展属性，修改的属性-值
         */
        this.on('updated', function (data, updateData) {
            var updateAction = _this.getUpdateAction(data.updated, updateData);
            if (_this.selectHolder.getSelectIds().length > 0) {
                updateAction.selected = _this.selectHolder.getSelectIds();
            }
            var actions = [updateAction];
            _this.documentChanged();
            _this.popDocChangeActions(actions);
        });
        /**
         * 节点文本更新后
         * @description text 更新走 input action，不用发 update action
         */
        this.on('updateText', function (data, updateData) {
            _this.documentChanged();
        });
        /**
         * 结构发生变化事件，indent、outdent、拖动节点
         */
        this.on('structureChanged', function (data) {
            // 发送变化的消息
            var changedNodes = data.changed;
            var messageNodes = [];
            jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(changedNodes, function (index, node) {
                // 获取原来的 node 数据
                var original = _this.modelCopy.getMappingById(node.id);
                var originalPath = Object(lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"])(original.path);
                var originalIndex = originalPath[originalPath.length - 1];
                // 从原位置删掉节点，下面要计算目标 path
                _this.modelCopy.deleteNode(node.id);
                // 获取最终的 prevNode 和 parentNode
                // 下面计算基于当前数据的 path 时，完全基于最终的 prevNode 和 parentNode，不再依赖事件里的 path
                var prevNode = _this.model.getPrevSibling(node.id);
                var parentNode = _this.model.getParent(node.id);
                // 如果有 prevNode ，新的 index 就是它加一；没有的话，就是第一个子节点
                var newIndex = prevNode ? _this.modelCopy.getMappingById(prevNode.id).index + 1 : 0;
                var parentMapping = parentNode ? _this.modelCopy.getMappingById(parentNode.id) : null;
                // 如果有 parentNode，新的 path 就是 [parentPath children index]；没有 parentNode 则是 [nodes index]
                var newPath = parentMapping
                    ? parentMapping.path.concat(['children', newIndex])
                    : ['nodes', newIndex];
                var changed = {
                    path: newPath,
                    index: newIndex,
                    parentId: parentNode ? parentNode.id : null,
                    node: __assign({}, node, { 
                        // 有可能 node.children !== original.node.children
                        // 移动时要把子节点带上，所以以原先的子节点为准
                        children: original.node.children }),
                };
                // 把节点添加到新位置
                _this.modelCopy.addNodes([changed]);
                var changedMessage = {
                    changed: changed,
                    original: __assign({}, original, { path: originalPath, index: originalIndex, 
                        // 有可能 node !== original.node ?
                        node: __assign({}, node, original.node) })
                };
                messageNodes.push(changedMessage);
            });
            var actions = [];
            if (data.updated) {
                // 如果同时发生了更新，则添加更新的动作，比如缩进时，新的父节点自动展开了
                var updateAction = _this.getUpdateAction(data.updated, data.updateData);
                actions.push(updateAction);
            }
            var action = {
                name: 'structureChanged',
                changed: messageNodes
            };
            if (data.cursor) {
                action.cursor = data.cursor;
            }
            if (_this.selectHolder.getSelectIds().length > 0) {
                action.selected = _this.selectHolder.getSelectIds();
            }
            actions.push(action);
            actions = Object(lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"])(actions);
            _this.documentChanged();
            _this.managerToggle();
            _this.refreshComment();
            _this.popDocChangeActions(actions);
        });
        /**
         * 翻页钻取事件
         */
        this.on('drilled', function (data) {
            _this.manageWrapper();
            // 发送钻取消息
            var action = {
                name: 'drill',
                viewType: data.viewType,
                from: data.from,
                to: data.to
            };
            _this.trigger(SourceEvent.DRILLED, action);
            _this.refreshComment();
        });
        /**
         * change 事件，redo/undo
         */
        this.on('changed', function (messages) {
            _this.documentChanged();
            _this.manageWrapper();
            _this.managerToggle();
            _this.refreshComment();
        });
        /**
         * 配置发生变化事件
         */
        this.on('settingChanged', function (data) {
            _this.documentChanged();
            // 只抛出事件，本地消息队列不做记录
            var action = {
                name: 'settingChanged',
                changed: data.changed,
                original: data.original
            };
            _this.popDocChangeActions([action]);
        });
        /**
         * 标题发生了变化
         */
        this.on('nameChanged', function (data) {
            _this.trigger(SourceEvent.TITLE_CHANGED, data);
        });
        /**
         * 其他编辑消息处理后，与model进行同步
         * 否则本地再操作变化的节点时，NodeHolder会没有，导致异常情况
         */
        this.on('messageExecuted', function () {
            _this.synchronizeModel();
            _this.manageWrapper();
            _this.managerToggle();
            _this.trigger(SourceEvent.MESSAGE_EXECUTED);
        });
        /**
         * 编辑器状态发生了变化，目前只有只读状态
         */
        this.on('editorStateChanged', function () {
            _this.manageWrapper();
            _this.managerToggle();
        });
    };
    return EventSource;
}());

/**
 * 是否是微信内置浏览器
 */
/**
 * 是否是手机
 * @returns {boolean}
 */
function isMobile() {
    var agent = window.navigator.userAgent;
    var keywords = ['Android', 'iPhone', 'iPod', 'iPad', 'Windows Phone', 'BlackBerry', 'MQQBrowser'];
    if (agent.indexOf('Windows NT') < 0 && agent.indexOf('Macintosh') < 0) {
        // 排除 Windows Mac 桌面系统
        for (var i = 0; i < keywords.length; i++) {
            var keyword = keywords[i];
            if (agent.indexOf(keyword) >= 0) {
                return true;
            }
        }
    }
    return false;
}
/**
 * 是否是火狐浏览器
 */
function isFirefox() {
    var ua = navigator.userAgent.toLowerCase();
    return ua.indexOf('firefox') > 0;
}
function isChrome() {
    var ua = navigator.userAgent.toLowerCase();
    return ua.indexOf('chrome') > 0 || ua.indexOf('chromium') > 0;
}
function isSafari() {
    var ua = navigator.userAgent.toLowerCase();
    return ua.indexOf('safari') > 0 && ua.indexOf('version') > 0 && ua.indexOf('chrome') < 0 && ua.indexOf('chromium') < 0;
}
function isIE() {
    var ua = navigator.userAgent.toLowerCase();
    return ua.indexOf('msie') > 0 || (ua.indexOf('rv:') > 0 && ua.indexOf('trident') > 0) || ua.indexOf('edge') > 0;
}
function isEdge() {
    var ua = navigator.userAgent.toLowerCase();
    return ua.indexOf('edge') > 0;
}
function isMac() {
    var platform = navigator.platform;
    return platform.toLowerCase().indexOf('mac') >= 0;
}

var isMobile$1 = isMobile();
var isMac$1 = isMac();
/**
 * 功能键是哪个，用来区分不同的操作系统
 */
var environment = {
    metaKey: isMac$1 ? 'metaKey' : 'ctrlKey',
    metaKeyText: isMac$1 ? '⌘' : 'Ctrl',
    downEvent: isMobile$1 ? 'touchstart' : 'mousedown',
    moveEvent: isMobile$1 ? 'touchmove' : 'mousemove',
    upEvent: isMobile$1 ? 'touchend' : 'mouseup',
    isMac: isMac$1,
    isIE: isIE(),
    isEdge: isEdge(),
    isFirefox: isFirefox(),
    isMobile: isMobile$1,
    isWebkit: isChrome() || isSafari(),
    supportsPassive: false,
};
try {
    var opts = Object.defineProperty({}, 'passive', {
        get: function () {
            environment.supportsPassive = true;
        }
    });
    window.addEventListener('testPassive', null, opts);
    window.removeEventListener('testPassive', null, opts);
}
catch (e) {
    environment.supportsPassive = false;
}

var Engine = /** @class */ (function () {
    function Engine(model, imageUploading, state, painter, viewport, eventSource) {
        var _this = this;
        this.model = model;
        this.viewport = viewport;
        this.paper = viewport.paper;
        this.state = state;
        this.wrapper = viewport.nodeWrapper;
        this.painter = painter;
        this.eventSource = eventSource;
        this.imageUploading = imageUploading;
        this.scrollContainer = viewport.scrollContainer;
        this.eventSource.on(SourceEvent.WRAPPER_CHANGED, function () {
            _this.manageWrapper();
        });
    }
    /**
     * 打开文档
     * @param definition
     * @param {string} name
     */
    Engine.prototype.open = function (definition, name) {
        this.painter.renderTitle(name);
        if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_12__["default"])(definition) || Object(lodash_es__WEBPACK_IMPORTED_MODULE_12__["default"])(definition.nodes)) {
            definition = { nodes: [] };
        }
        var nodes = definition.nodes;
        this.model.setDefine(definition);
        this.model.setName(name);
        this.eventSource.setNodes(nodes);
        this.painter.renderPaper();
        if (!environment.isMobile) {
            this.viewport.nameContainer.find('[contenteditable]').focus();
        }
        this.eventSource.trigger('opened');
    };
    Engine.prototype.getWrapper = function () {
        return this.wrapper;
    };
    Engine.prototype.getPainter = function () {
        return this.painter;
    };
    /**
     * 获取节点定义对象
     * @param nodeId
     * @returns {*}
     */
    Engine.prototype.getNode = function (nodeId) {
        return this.model.getById(nodeId);
    };
    /**
     * 是否允许新建
     */
    Engine.prototype.allowCreateNew = function (nodeCount) {
        return true;
    };
    /**
     * 创建前边的节点
     * @param nodeId
     * @param nodeContent 当前节点的文本
     * @param prevContent 前置节点的文本
     */
    Engine.prototype.createPrevious = function (nodeId, nodeContent, prevContent) {
        if (!this.allowCreateNew(1)) {
            return;
        }
        // 操作前先 blur 原先的节点，防止在 ios 下页面跳动
        var editor = getContentById(nodeId);
        blurContent(editor);
        var targetNode = this.model.getById(nodeId);
        var eventData = {
            cursor: {
                id: nodeId,
                position: getCursorPosition()
            }
        };
        if (nodeContent) {
            targetNode.text = nodeContent;
            // 更新当前节点内容
            this.model.update(targetNode);
            eventData.updated = [targetNode];
            eventData.updateData = { text: nodeContent };
        }
        var newNode = this.model.createPrevious(nodeId, prevContent);
        this.painter.renderPrevious(nodeId, newNode);
        var nodeEditor = getContentById(nodeId);
        nodeEditor.html(textToHtml(nodeContent, this.state.getEditorProps().locale));
        if (!prevContent) {
            moveCursorEnd(getContentById(newNode.id));
        }
        else {
            focus(getContentById(nodeId));
        }
        eventData.created = [newNode];
        this.eventSource.trigger('created', eventData);
    };
    /**
     * 创建后边的节点
     * @param nodeId 目标节点的id
     */
    Engine.prototype.createNext = function (nodeId) {
        if (!this.allowCreateNew(1)) {
            return;
        }
        // 操作前先 blur 原先的节点，防止在 ios 下页面跳动
        var editor = getContentById(nodeId);
        blurContent(editor);
        var newNode;
        var rootNode = this.getRootNode();
        if (rootNode && nodeId === rootNode.id) {
            // 添加为第一个子节点
            newNode = this.model.createChild(nodeId, '');
            this.painter.renderFirstChild(nodeId, newNode);
        }
        else {
            var targetNode = this.model.getById(nodeId);
            var text = nodeTextToPlainText(targetNode.text, this.state.getEditorProps().locale, false);
            if (!text && !this.model.isRootSubNode(nodeId) && !this.model.getNextSibling(nodeId)) {
                this.outdentNode(nodeId);
                return;
            }
            if (!targetNode.collapsed && hasChildren(targetNode)) {
                // 添加为第一个子节点
                newNode = this.model.createChild(nodeId, '');
                this.painter.renderFirstChild(nodeId, newNode);
            }
            else {
                // 在后边添加同级节点
                newNode = this.model.createNext(nodeId);
                this.painter.renderNext(nodeId, newNode);
            }
        }
        var newNodeContainer = getContentById(newNode.id);
        focus(newNodeContainer);
        var eventData = {
            cursor: {
                id: nodeId,
                position: getCursorPosition()
            },
            created: [newNode]
        };
        this.eventSource.trigger('created', eventData);
    };
    /**
     * 创建根节点后边的节点
     */
    Engine.prototype.createRootNext = function () {
        var newNode = this.model.createFirstChild();
        this.painter.renderNode(newNode, false);
        focus(getContentById(newNode.id));
        var eventData = {
            created: [newNode]
        };
        this.eventSource.trigger('created', eventData);
    };
    /**
     * 创建后边的一堆节点
     */
    Engine.prototype.appendNextNodes = function (targetId, nodes) {
        var _this = this;
        if (nodes.length === 0) {
            return;
        }
        var me = this;
        // 进行了创建的节点，是一维的数组结构
        var createdNodes = [];
        var lastId = '';
        var targetNode = this.model.getById(targetId);
        recursive(nodes, function (node) {
            node.id = _this.model.newId();
            if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_12__["default"])(node.children)) {
                node.children = [];
            }
            if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_12__["default"])(node.images)) {
                node.images = [];
            }
            lastId = node.id;
        });
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(nodes, function (node) {
            createdNodes.push(node);
        });
        var eventData = {
            created: createdNodes
        };
        if (this.model.isRootNode(targetId)
            || (targetNode.children && targetNode.children.length > 0)) {
            // 有子节点，将这些节点放到此节点的子节点中
            this.model.prependChildren(targetId, nodes);
            // 重新绘制子节点
            me.painter.renderChildren(targetId);
        }
        else {
            // 在当前节点后边追加同级
            if (nodeTextToPlainText(targetNode.text, this.state.getEditorProps().locale, false) === '' && !targetNode.note) {
                // 当前节点内容为空的情况下，将第一个节点的内容复制到当前节点
                var firstNode = nodes[0];
                firstNode.id = targetId;
                this.model.update(firstNode);
                // 先重绘自己，再绘制子节点
                me.painter.refreshNode(firstNode);
                me.painter.renderChildren(firstNode.id);
                eventData.updated = [firstNode];
                eventData.updateData = firstNode;
                // 删除第一个节点
                nodes.splice(0, 1);
                createdNodes.splice(0, 1);
                // 第一个节点的子节点，为新建出来的节点
                if (firstNode.children && firstNode.children.length > 0) {
                    var childIndex = firstNode.children.length - 1;
                    while (childIndex >= 0) {
                        var createdChild = firstNode.children[childIndex];
                        createdNodes.unshift(createdChild);
                        childIndex--;
                    }
                }
            }
            // 在此节点后边同级追加
            this.model.appendAfter(targetId, nodes);
            var afterId = targetId;
            // 重新绘制全部
            var index = 0;
            while (index < nodes.length) {
                var newNode = nodes[index];
                me.painter.renderNext(afterId, newNode);
                me.painter.renderChildren(newNode.id);
                afterId = newNode.id;
                index++;
            }
        }
        // 定位光标
        var lastContent = getContentById(lastId);
        if (lastContent.is(':visible')) {
            moveCursorEnd(lastContent);
        }
        // 最终抛出事件
        this.eventSource.trigger('created', eventData);
    };
    /**
     * 创建一堆节点
     */
    Engine.prototype.createNodes = function (nodes) {
        var _this = this;
        if (nodes.length === 0) {
            return;
        }
        // 进行了创建的节点，是一维的数组结构
        var createdNodes = [];
        recursive(nodes, function (node) {
            node.id = _this.model.newId();
            if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_12__["default"])(node.children)) {
                node.children = [];
            }
            if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_12__["default"])(node.images)) {
                node.images = [];
            }
            node.modified = new Date().getTime();
        });
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(nodes, function (node) {
            createdNodes.push(node);
        });
        var eventData = {
            created: createdNodes
        };
        this.model.setNodes(nodes);
        this.painter.renderPaper();
        // 定位光标
        var firstContent = this.wrapper.find('.content:eq(0)');
        if (firstContent.is(':visible')) {
            moveCursorEnd(firstContent);
        }
        // 最终抛出事件
        this.eventSource.trigger('created', eventData);
    };
    /**
     * 复制节点
     * @param nodeId
     */
    Engine.prototype.copyNode = function (nodeId) {
        var _this = this;
        var me = this;
        var sourceNode = this.model.getById(nodeId);
        if (!me.allowCreateNew(1)) {
            return;
        }
        // 构建新的对象
        var newNode = copy(sourceNode);
        var newArray = [newNode];
        recursive(newArray, function (node) {
            node.id = _this.model.newId();
            node.images = Object(lodash_es__WEBPACK_IMPORTED_MODULE_5__["default"])(node.images || [], function (img) {
                img.id = _this.model.newId();
                return img;
            });
            node.text = Object(lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"])(node.text) ? Object(lodash_es__WEBPACK_IMPORTED_MODULE_5__["default"])(node.text, function (segment) {
                if (segment.type === TextType.Mention) {
                    segment.id = _this.model.newId();
                }
                return segment;
            }) : node.text;
            // 不能复制评论
            if (node.comments) {
                delete node.comments;
            }
        });
        // 在此节点后边同级追加
        this.model.appendAfter(nodeId, newArray);
        me.painter.renderNext(nodeId, newNode);
        me.painter.renderChildren(newNode.id);
        var eventData = {
            created: newArray
        };
        this.eventSource.trigger('created', eventData);
        focus(getContentById(newNode.id));
    };
    /**
     * 删除节点
     * @param nodeId
     * @param prevId 上一节点id
     * @param preValue 上一内容
     * @param preNote 上一节点的备注
     */
    Engine.prototype.deleteNode = function (nodeId, prevId, preValue, preNote) {
        var deleted = this.model.getById(nodeId);
        this.model.deleteNode(nodeId);
        var eventData = {
            deleted: [deleted]
        };
        if (preValue && prevId) {
            var prevNode = this.model.getById(prevId);
            // 如果被删除的节点有图片，合并到上一个节点
            if (deleted.images) {
                if (!prevNode.images) {
                    prevNode.images = [];
                }
                prevNode.images = prevNode.images.concat(deleted.images);
            }
            // 如果有内容，合并到前一节点
            if (preValue && prevId) {
                prevNode.text = preValue;
                if (preNote) {
                    prevNode.note = preNote;
                }
            }
            // 更新内容
            this.model.update(prevNode);
            eventData.updated = [prevNode];
            eventData.updateData = prevNode;
            this.painter.refreshNode(prevNode);
        }
        getNodeContainer(nodeId).remove();
        this.eventSource.trigger('deleted', eventData);
    };
    /**
     * 直接删除节点
     * @param nodeIds
     */
    Engine.prototype.deleteNodeDirectly = function (nodeIds) {
        var _this = this;
        if (!jquery__WEBPACK_IMPORTED_MODULE_22___default.a.isArray(nodeIds)) {
            nodeIds = [nodeIds];
        }
        if (nodeIds.length === 0) {
            return;
        }
        var firstId = nodeIds[0];
        var prev = this.toPrevNode(firstId, false);
        if (prev == null && nodeIds.length === 1) {
            // 只有一个节点的情况下，向下控制光标
            this.toNextNode(firstId, true);
        }
        var deleted = [];
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodeIds, function (index, id) {
            var node = _this.model.getById(id);
            deleted.push(node);
            // 执行删除
            _this.model.deleteNode(id);
            getNodeContainer(id).remove();
        });
        var eventData = {
            deleted: deleted
        };
        this.eventSource.trigger('deleted', eventData);
    };
    /**
     * 缩进node
     * @param nodeId
     */
    Engine.prototype.indentNode = function (nodeId) {
        var parentNode = this.model.indentNode(nodeId);
        if (parentNode != null) {
            var cursorPos = getCursorPosition();
            // 改变了父级关系，重构dom结构
            var parentDom = getNodeContainer(parentNode.id);
            var eventData = {};
            // 操作前先 blur 原先的节点，防止在 ios 下页面跳动
            var editor = getContentById(nodeId);
            blurContent(editor);
            if (parentNode.collapsed) {
                // 目标的父节点收缩了，让其展开
                parentNode.collapsed = false;
                parentDom.removeClass('collapsed');
                eventData.updated = [parentNode];
                eventData.updateData = { collapsed: false };
            }
            var target = parentDom.children('.children');
            if (target.length === 0) {
                target = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="children"></div>').appendTo(parentDom);
            }
            var nodeContainer = getNodeContainer(nodeId);
            nodeContainer.appendTo(target);
            // 重新设置光标位置
            setCursorPosition(editor, cursorPos);
            var node = this.model.getById(nodeId);
            eventData.changed = [node];
            eventData.cursor = {
                id: nodeId,
                position: cursorPos
            };
            this.eventSource.trigger('structureChanged', eventData);
        }
    };
    /**
     * 缩进多个node
     * @param nodes 树形的节点结构
     */
    Engine.prototype.indentNodes = function (nodes) {
        var _this = this;
        var eventData = {
            updated: [],
            changed: []
        };
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodes, function (index, node) {
            var nodeId = node.id;
            var parentNode = _this.model.indentNode(nodeId);
            if (parentNode != null) {
                // 改变了父级关系，重构dom结构
                var parentDom = getNodeContainer(parentNode.id);
                if (parentNode.collapsed) {
                    // 目标的父节点收缩了，让其展开
                    parentNode.collapsed = false;
                    parentDom.removeClass('collapsed');
                    eventData.updated.push(parentNode);
                    eventData.updateData = { collapsed: false };
                }
                var target = parentDom.children('.children');
                if (target.length === 0) {
                    target = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="children"></div>').appendTo(parentDom);
                }
                var nodeContainer = getNodeContainer(nodeId);
                nodeContainer.appendTo(target);
                eventData.changed.push(node);
            }
        });
        if (eventData.changed.length > 0) {
            this.eventSource.trigger('structureChanged', eventData);
        }
    };
    /**
     * 回退node
     * @param nodeId
     */
    Engine.prototype.outdentNode = function (nodeId) {
        var parentNode = this.model.outdentNode(nodeId);
        if (parentNode != null) {
            var cursorPos = getCursorPosition();
            // 操作前先 blur 原先的节点，防止在 ios 下页面跳动
            var editor = getContentById(nodeId);
            blurContent(editor);
            // 改变了父级关系，重构dom结构
            var parentDom = getNodeContainer(parentNode.id);
            var nodeContainer = getNodeContainer(nodeId);
            parentDom.after(nodeContainer);
            // 重新设置光标位置
            setCursorPosition(editor, cursorPos);
            var node = this.model.getById(nodeId);
            var eventData = {
                changed: [node],
                cursor: {
                    id: nodeId,
                    position: cursorPos
                }
            };
            this.eventSource.trigger('structureChanged', eventData);
        }
    };
    /**
     * 回退多个node
     * @param nodes 树形的节点结构
     */
    Engine.prototype.outdentNodes = function (nodes) {
        var eventData = {
            changed: []
        };
        // 倒着去执行
        var index = nodes.length - 1;
        while (index >= 0) {
            var node = nodes[index];
            var nodeId = node.id;
            var parentNode = this.model.outdentNode(nodeId);
            if (parentNode != null) {
                // 改变了父级关系，重构dom结构
                var parentDom = getNodeContainer(parentNode.id);
                var nodeContainer = getNodeContainer(nodeId);
                parentDom.after(nodeContainer);
                // 正序的索引，添加事件信息，要正着添加
                eventData.changed.splice(0, 0, node);
            }
            index--;
        }
        if (eventData.changed.length > 0) {
            this.eventSource.trigger('structureChanged', eventData);
        }
    };
    /**
     * 移动节点
     * @param nodeId 被移动节点id
     * @param targetId 目标节点id
     * @param type 移动类型，在前还是在后，prev | next
     */
    Engine.prototype.moveNode = function (nodeId, targetId, type) {
        var nodeDom = getNodeContainer(nodeId);
        if (type === 'prev') {
            getNodeContainer(targetId).before(nodeDom);
        }
        else {
            getNodeContainer(targetId).after(nodeDom);
        }
        this.model.moveNode(nodeId, targetId, type);
        focus(getContentById(nodeId));
        var node = this.model.getById(nodeId);
        var eventData = {
            changed: [node]
        };
        this.eventSource.trigger('structureChanged', eventData);
    };
    /**
     * 移动节点
     * @param nodes 被移动的多个节点集合
     * @param targetId 目标节点id
     * @param type 移动类型，在前还是在后，prev | next
     */
    Engine.prototype.moveNodes = function (nodes, targetId, type) {
        var targetContainer = getNodeContainer(targetId);
        if (type === 'prev') {
            var index = 0;
            while (index < nodes.length) {
                var node = nodes[index];
                var nodeDom = getNodeContainer(node.id);
                targetContainer.before(nodeDom);
                index++;
            }
        }
        else {
            // 往后边添加，要倒序添加
            var index = nodes.length - 1;
            while (index >= 0) {
                var node = nodes[index];
                var nodeDom = getNodeContainer(node.id);
                targetContainer.after(nodeDom);
                index--;
            }
        }
        this.model.moveNodes(nodes, targetId, type);
        var eventData = {
            changed: nodes
        };
        this.eventSource.trigger('structureChanged', eventData);
    };
    /**
     * 获取前边节点的id
     * @param nodeId
     */
    Engine.prototype.getPrevNodeId = function (nodeId) {
        var nodeContainer = getNodeContainer(nodeId);
        var result;
        var prev = nodeContainer.prev('.node');
        if (prev.length > 0) {
            result = prev.find('.content:visible:last').data('id');
        }
        else {
            // 没有上一级，就寻找父级
            if (!this.model.isRootNode(nodeId)) {
                var parent_1 = this.model.getParent(nodeId);
                if (parent_1 != null) {
                    result = parent_1.id;
                }
            }
        }
        return result;
    };
    /**
     * 向上一个节点
     * @param nodeId
     * @param isEnd 光标是否跳到最后
     */
    Engine.prototype.toPrevNode = function (nodeId, isEnd) {
        var result;
        var prevNodeId = this.getPrevNodeId(nodeId);
        if (prevNodeId) {
            result = getContentById(prevNodeId);
            if (isEnd) {
                moveCursorEnd(result);
            }
            else {
                var cursorPos = getCursorPosition();
                if (cursorPos.start === 0) {
                    setCursorPosition(result, { start: 0 });
                }
                else {
                    moveCursorEnd(result);
                }
            }
        }
        return result;
    };
    /**
     * 向上移动当前节点
     * @param nodeId 被移动节点的id
     */
    Engine.prototype.moveNodePrev = function (nodeId) {
        var prevNodeId = this.getPrevNodeId(nodeId);
        if (prevNodeId && !this.model.isRootNode(prevNodeId)) {
            this.moveNode(nodeId, prevNodeId, 'prev');
        }
    };
    /**
     * 获取后边节点的id
     * @param nodeId
     * @param ignoreChildren 是否忽略子节点
     * @returns {*}
     */
    Engine.prototype.getNextNodeId = function (nodeId, ignoreChildren) {
        var nodeContainer = getNodeContainer(nodeId);
        var result;
        var next = null;
        if (!ignoreChildren) {
            // 先查找子节点
            next = nodeContainer.find('.node:visible:eq(0)');
        }
        if (next == null || next.length === 0) {
            // 没有子节点了，查找同级
            next = nodeContainer.next('.node:visible');
        }
        if (next == null || next.length > 0) {
            result = next.attr('id');
        }
        else {
            // 向父级一层层查找，每一层父级的下边的相邻节点
            var currentId = nodeId;
            while (true) {
                var parentNode = this.model.getParent(currentId);
                if (parentNode == null) {
                    break;
                }
                var parentContainer = getNodeContainer(parentNode.id);
                next = parentContainer.next('.node');
                if (next.length > 0) {
                    result = next.attr('id');
                    break;
                }
                currentId = parentNode.id;
            }
        }
        return result;
    };
    /**
     * 光标向下一个节点
     * @param nodeId
     * @param ignoreChildren 是否忽略子节点
     */
    Engine.prototype.toNextNode = function (nodeId, ignoreChildren) {
        if (ignoreChildren == null) {
            ignoreChildren = false;
        }
        var nextNodeId = this.getNextNodeId(nodeId, ignoreChildren);
        var result;
        if (nextNodeId) {
            result = getContentById(nextNodeId);
            var cursorPos = getCursorPosition();
            if (cursorPos.start === 0) {
                setCursorPosition(result, { start: 0 });
            }
            else {
                moveCursorEnd(result);
            }
        }
        return result;
    };
    /**
     * 向下移动当前节点
     * @param nodeId 被移动节点的id
     */
    Engine.prototype.moveNodeNext = function (nodeId) {
        var nextNodeId = this.getNextNodeId(nodeId, true);
        if (nextNodeId) {
            var targetId = nextNodeId;
            var moveType = 'next';
            var nextNode = this.model.getById(nextNodeId);
            if (true !== nextNode.collapsed && nextNode.children && nextNode.children.length > 0) {
                // 没有闭合，并且有子节点的话，就在第一个子节点前边
                targetId = nextNode.children[0].id;
                moveType = 'prev';
            }
            this.moveNode(nodeId, targetId, moveType);
        }
    };
    /**
     * 向下移动多个节点
     * @param nodes 多个节点的集合
     */
    Engine.prototype.moveNodesNext = function (nodes) {
        var lastNodeId = nodes[nodes.length - 1].id;
        var nextNodeId = this.getNextNodeId(lastNodeId, true);
        if (nextNodeId) {
            var targetId = nextNodeId;
            var moveType = 'next';
            var nextNode = this.model.getById(nextNodeId);
            if (true !== nextNode.collapsed && nextNode.children && nextNode.children.length > 0) {
                // 没有闭合，并且有子节点的话，就在第一个子节点前边
                targetId = nextNode.children[0].id;
                moveType = 'prev';
            }
            this.moveNodes(nodes, targetId, moveType);
        }
    };
    /**
     * 完成节点
     * @param nodeId
     */
    Engine.prototype.toggleFinishNode = function (nodeId) {
        var node = this.model.getById(nodeId);
        node.finish = (node.finish ? false : true);
        this.model.update(node);
        getNodeContainer(nodeId).toggleClass('finished');
        var eventData = {
            updated: [node]
        };
        this.eventSource.trigger('updated', eventData, { finish: node.finish });
        return node.finish;
    };
    /**
     * 设置多个或一个节点的完成状态
     * @param nodeIds
     * @param value
     */
    Engine.prototype.setFinishNode = function (nodeIds, value) {
        var _this = this;
        if (!Object(lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"])(nodeIds)) {
            nodeIds = [nodeIds];
        }
        var updated = [];
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodeIds, function (index, id) {
            var node = _this.model.getById(id);
            node.finish = value;
            _this.model.update(node);
            if (value) {
                getNodeContainer(id).addClass('finished');
            }
            else {
                getNodeContainer(id).removeClass('finished');
            }
            updated.push(node);
        });
        var eventData = {
            updated: updated
        };
        this.eventSource.trigger('updated', eventData, { finish: value });
    };
    /**
     * 闭合展开节点
     * @param nodeId
     */
    Engine.prototype.toggleExpand = function (nodeId) {
        var node = this.model.getById(nodeId);
        if (!node.children || node.children.length === 0) {
            // 没有子节点
            return false;
        }
        this.model.update(node);
        var container = getNodeContainer(nodeId);
        container.toggleClass('collapsed');
        /* 因为toggle的时候可能和模型不一致 */
        node.collapsed = container.hasClass('collapsed');
        var eventData = {
            updated: [node]
        };
        if (!this.state.readonly) {
            // 只读状态下，不抛出消息，因为只读状态下，也可以进行展开收缩
            this.eventSource.trigger('updated', eventData, { collapsed: node.collapsed });
        }
        else {
            this.eventSource.trigger(SourceEvent.REFRESH_CURSOR);
        }
        this.eventSource.trigger(SourceEvent.REFRESH_COMMENT);
        return node.collapsed;
    };
    /**
     * 展开收缩全部
     */
    Engine.prototype.toggleExpandAll = function () {
        var _this = this;
        var rootNode = this.model.getRootNode();
        var nodes;
        if (rootNode == null) {
            nodes = this.model.getDefine().nodes;
        }
        else {
            nodes = rootNode.children;
        }
        if (!nodes || nodes.length === 0) {
            return;
        }
        var updated = [];
        var collapsedCount = this.wrapper.find('.node.collapsed').length;
        var collapsedState = (collapsedCount === 0);
        // 有收缩的，就全部展开
        recursive(nodes, function (node) {
            var container = getNodeContainer(node.id);
            if (node.children && node.children.length > 0) {
                if (collapsedCount > 0 && node.collapsed) {
                    // 全部展开
                    node.collapsed = collapsedState;
                    container.removeClass('collapsed');
                }
                if (collapsedCount === 0) {
                    // 全部收缩
                    node.collapsed = collapsedState;
                    container.addClass('collapsed');
                }
                _this.model.update(node);
                updated.push(node);
            }
        });
        var eventData = {
            updated: updated
        };
        if (!this.state.readonly) {
            // 只读状态下，不抛出消息，因为只读状态下，也可以进行展开收缩
            this.eventSource.trigger('updated', eventData, { collapsed: collapsedState });
        }
        else {
            this.eventSource.trigger(SourceEvent.REFRESH_CURSOR);
        }
        this.eventSource.trigger(SourceEvent.REFRESH_COMMENT);
    };
    /**
     * 设置节点高亮
     */
    Engine.prototype.toggleHighlight = function (nodeIds, value) {
        var _this = this;
        if (!jquery__WEBPACK_IMPORTED_MODULE_22___default.a.isArray(nodeIds)) {
            nodeIds = [nodeIds];
        }
        var updated = [];
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodeIds, function (index, id) {
            var nodeSet = _this.model.getMappingById(id);
            var node = nodeSet.node;
            var originalNode = { id: id, highlight: node.highlight };
            var updatedNode = { id: id, highlight: value };
            // 旧的 text 格式换成新的，才能正确显示高亮样式
            if (value && !Object(lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"])(node.text)) {
                var newText = htmlToText(node.text);
                originalNode.text = node.text;
                updatedNode.text = newText;
                node.text = newText;
                ensureNodeTextWrap(getContentById(id));
            }
            node.highlight = value;
            _this.model.update(node);
            _this.painter.refreshNodeHighlight(node);
            updated.push({
                original: originalNode,
                updated: updatedNode,
                path: nodeSet.path,
            });
        });
        this.eventSource.trigger(SourceEvent.DOC_CHANGED, [{
                name: 'update',
                updated: updated,
            }]);
    };
    /**
     * 设置节点属性
     * @param nodeIds
     * @param name 属性名称
     * @param value 属性值
     */
    Engine.prototype.setNodeAttr = function (nodeIds, name, value) {
        var _this = this;
        var me = this;
        if (!jquery__WEBPACK_IMPORTED_MODULE_22___default.a.isArray(nodeIds)) {
            nodeIds = [nodeIds];
        }
        var cursorPos = getCursorPosition();
        var updated = [];
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodeIds, function (index, id) {
            var node = _this.model.getById(id);
            node[name] = value;
            _this.model.update(node);
            me.painter.refreshNode(node);
            updated.push(node);
        });
        var eventData = {
            updated: updated
        };
        if (nodeIds.length === 1) {
            // 在ios下需要重置光标
            try {
                var editor = getContentById(nodeIds[0]);
                setCursorPosition(editor, cursorPos);
            }
            catch (e) {
                // ignore
            }
        }
        var extendData = {};
        extendData[name] = value;
        this.eventSource.trigger('updated', eventData, extendData);
    };
    /**
     * 更新文本
     * @param nodeId
     * @param text
     * @param type note | text
     */
    Engine.prototype.updateText = function (nodeId, text, type) {
        var node = this.model.getById(nodeId);
        if (node != null) {
            var updateData = {};
            if (type === 'note') {
                node.note = text;
                updateData.note = text;
            }
            else {
                node.text = text;
                updateData.text = text;
            }
            this.model.update(node);
            var eventData = {
                updated: [node]
            };
            this.eventSource.trigger('updateText', eventData, updateData);
        }
    };
    /**
     * 钻取节点
     * @param nodeId，null指回到根目录
     * @param withoutEvent 不抛出事件
     */
    Engine.prototype.drillNode = function (nodeId, withoutEvent) {
        var rootNode = this.model.getRootNode();
        if (nodeId) {
            var targetNode = this.model.getById(nodeId);
            if (!targetNode) {
                // 目标节点不存在，不能执行drill
                return;
            }
        }
        if (rootNode && nodeId === rootNode.id) {
            // 相同，不执行
            return;
        }
        var eventData = {
            from: rootNode ? rootNode.id : null,
            to: nodeId ? nodeId : null,
            viewType: ViewType.OUTLINE,
        };
        var me = this;
        this.model.setRootNode(nodeId);
        me.painter.renderPaper();
        this.refreshDrillDir();
        if (!withoutEvent) {
            this.eventSource.trigger('drilled', eventData);
        }
        if (!environment.isMobile) {
            var scrollable = this.scrollContainer;
            var currentTop = scrollable.scrollTop() || 0;
            var paperTop = me.paper.position().top;
            if (currentTop > paperTop) {
                scrollable.scrollTop(paperTop);
            }
        }
        else {
            this.scrollContainer.scrollTop(0);
        }
    };
    /**
     * 刷新进入节点后的导航
     */
    Engine.prototype.refreshDrillDir = function () {
        var me = this;
        var rootNode = me.getRootNode();
        var dirContainer = this.viewport.dir;
        if (rootNode == null) {
            dirContainer.hide();
            this.viewport.nameContainer.show();
        }
        else {
            this.viewport.nameContainer.hide();
            var dir = this.model.getDir();
            this.getPainter().nodePainter.renderDir(dir, dirContainer);
        }
        dirContainer.off().on('click', '.item', function (clickEvent) {
            clickEvent.preventDefault();
            var item = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            var nodeId = item.data('node-id');
            me.drillNode(nodeId, false);
        });
    };
    /**
     * 向后钻取
     */
    Engine.prototype.backDrillNode = function () {
        var rootNode = this.model.getRootNode();
        if (rootNode != null) {
            var currentRootId = rootNode.id;
            var nodeId = '';
            var dir = this.model.getDir();
            if (dir.length > 0) {
                nodeId = dir[dir.length - 1].id;
            }
            this.drillNode(nodeId, false);
            moveCursorEnd(getContentById(currentRootId));
        }
    };
    /**
     * 获取根节点
     * @returns {null|*}
     */
    Engine.prototype.getRootNode = function () {
        return this.model.getRootNode();
    };
    /**
     * 设置标题
     * @param {string} name
     * @description 通常是协作修改，会还原光标
     */
    Engine.prototype.setTitle = function (name) {
        this.model.setName(name);
        this.painter.setTitle(name);
    };
    /**
     * 编辑标题
     * @param name
     */
    Engine.prototype.editName = function (name, prevPos, nextPos) {
        var action = {
            name: 'nameChanged',
            original: this.model.getName(),
            title: name,
            prevPos: prevPos,
            nextPos: nextPos,
        };
        this.model.setName(name);
        this.eventSource.trigger('nameChanged', action);
    };
    /**
     * 提供给UI获取文档标题
     * @returns {string}
     */
    Engine.prototype.getName = function () {
        return this.model.getName();
    };
    /**
     * 获取文档定义
     */
    Engine.prototype.getDocumentDefine = function () {
        return this.model.getDefine();
    };
    /**
     * 设置文档的配置
     */
    Engine.prototype.setSetting = function (name, value) {
        var changeData = {
            changed: {},
            original: {}
        };
        changeData.changed[name] = value;
        changeData.original[name] = this.model.getDefine()[name];
        this.model.setSetting(name, value);
        this.eventSource.trigger('settingChanged', changeData);
    };
    /**
     * 插入图片
     * @param nodeId
     * @param image
     */
    Engine.prototype.insertImage = function (nodeId, image) {
        var me = this;
        var updated = [];
        var node = this.model.getById(nodeId);
        if (!node) {
            return false;
        }
        if (!node.images) {
            node.images = [];
        }
        if (!image.id) {
            image.id = newId(this.model.getModelId());
        }
        node.images.push(image);
        this.model.update(node);
        this.imageUploading.remove(node.id, image.id);
        me.painter.refreshNode(node);
        updated.push(node);
        var eventData = {
            updated: updated
        };
        this.eventSource.trigger('updated', eventData, { images: node.images });
    };
    /**
     * 插入上传中的图片，不会触发保存
     * @param nodeId
     * @param image
     */
    Engine.prototype.insertUploadingImage = function (nodeId, image) {
        image = Object(lodash_es__WEBPACK_IMPORTED_MODULE_9__["default"])(image);
        // 标识正在上传中
        image.uploading = true;
        if (!image.id) {
            image.id = newId(this.model.getModelId());
        }
        this.imageUploading.add(nodeId, image);
        var node = this.model.getById(nodeId);
        // 刷新节点，会绘制出正在上传中的图片
        this.painter.refreshNode(node);
    };
    /**
     * 删除正在上传中的图片，用于上传失败后
     * @param imageId
     */
    Engine.prototype.removeUploadingImage = function (nodeId, imageId) {
        var result = this.imageUploading.remove(nodeId, imageId);
        if (result) {
            var node = this.model.getById(nodeId);
            // 刷新节点，会绘制出正在上传中的图片
            this.painter.refreshNode(node);
        }
    };
    /**
     * 缩放某个图片
     * @param nodeId
     * @param imageIndex
     * @param width
     */
    Engine.prototype.resizeImage = function (nodeId, imageIndex, width) {
        var updated = [];
        var node = this.model.getById(nodeId);
        if (!node || !node.images || node.images.length <= imageIndex) {
            return false;
        }
        node.images[imageIndex].w = width;
        this.model.update(node);
        updated.push(node);
        var eventData = {
            updated: updated
        };
        this.eventSource.trigger('updated', eventData, { images: node.images });
    };
    /**
     * 删除图片
     * @param nodeId
     * @param imageId
     */
    Engine.prototype.removeImageById = function (nodeId, imageId) {
        var node = this.model.getById(nodeId);
        if (node.images && node.images.length > 0) {
            var i = Object(lodash_es__WEBPACK_IMPORTED_MODULE_13__["default"])(node.images, function (image) { return image.id === imageId; });
            if (i !== -1) {
                this.removeImage(nodeId, i);
            }
        }
    };
    /**
     * 删除图片
     * @param nodeId
     * @param imageIndex
     */
    Engine.prototype.removeImage = function (nodeId, imageIndex) {
        var updated = [];
        var node = this.model.getById(nodeId);
        if (!node || !node.images || node.images.length <= imageIndex) {
            return false;
        }
        node.images.splice(imageIndex, 1);
        this.model.update(node);
        this.painter.refreshNode(node);
        updated.push(node);
        var eventData = {
            updated: updated
        };
        this.eventSource.trigger('updated', eventData, { images: node.images });
    };
    /**
     * 节点是否可以缩进或回退
     * @param nodeId
     * @param type indent 或者 outdent
     */
    Engine.prototype.canIndent = function (nodeId, type) {
        if (type === 'indent') {
            var index = this.model.getNodeIndex(nodeId);
            return index > 0;
        }
        else {
            if (this.model.isRootSubNode(nodeId)) {
                // 是根节点，不能回退
                return false;
            }
            var parent_2 = this.model.getParent(nodeId);
            return parent_2 != null;
        }
    };
    /**
     * 设置只读状态
     * @param readonly
     */
    Engine.prototype.setReadOnly = function (readonly) {
        // 将只读状态保存在全局state中，
        // 很多操作也会根据此状态来进行控制
        // 包括圆点菜单，多选后的菜单，wrapper的加号控制（新建第一个节点），全局设置（思维导图），撤销恢复，相关快捷键操作
        this.state.readonly = readonly;
        var contenteditable = 'contenteditable';
        var paper = this.paper;
        if (readonly) {
            // 只读
            paper.find("div[" + contenteditable + "]").attr(contenteditable, 'false');
            jquery__WEBPACK_IMPORTED_MODULE_22___default()('.menu-container').hide(); // 让所有菜单隐藏
            paper.addClass('readonly'); // 目的是让note可以自动收缩
            this.viewport.controlHolder.find('.mind-item-readonly-hide').hide();
        }
        else {
            // 激活所有输入框
            paper.find("div[" + contenteditable + "]").attr(contenteditable, 'true');
            paper.removeClass('readonly'); // 目的是让note可以自动收缩
            this.viewport.controlHolder.find('.mind-item-readonly-hide').show();
        }
        this.eventSource.trigger('editorStateChanged');
    };
    Engine.prototype.getReadOnly = function () {
        return this.state.readonly;
    };
    /**
     * 发出预览图片的消息
     * @param {string} nodeId
     * @param {string} imageId
     */
    Engine.prototype.previewImage = function (nodeId, imageId) {
        var nodes = this.model.getDefine().nodes;
        var data = {
            index: 0,
            imageList: []
        };
        var totalIndex = 0;
        recursive(nodes, function (node) {
            if (node.images) {
                Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(node.images, function (img) {
                    if (node.id === nodeId && img.id === imageId) {
                        data.index = totalIndex;
                    }
                    var previewImg = Object(lodash_es__WEBPACK_IMPORTED_MODULE_9__["default"])(img);
                    previewImg.nodeId = node.id;
                    data.imageList.push(previewImg);
                    totalIndex++;
                });
            }
        });
        this.eventSource.trigger(SourceEvent.PREVIEW_IMAGE, data);
    };
    /**
     * 管理画布
     */
    Engine.prototype.manageWrapper = function () {
        var nodes = this.wrapper.find('.node:not(.root-node)');
        this.wrapper.find('.mindnote-placeholder').remove();
        this.wrapper.off('click.firstNode');
        var engine = this;
        if (nodes.length === 0 && !this.state.readonly) {
            this.wrapper.append('<span class="mindnote-placeholder">' + this.state.getEditorProps().contentPlaceholder + '</span>');
            this.wrapper.on('click.firstNode', function (e) {
                // 在根节点的主题或标题上点击，不生效
                var target = jquery__WEBPACK_IMPORTED_MODULE_22___default()(e.target);
                if (target.hasClass('content') || target.hasClass('note')) {
                    return;
                }
                target = target.parent();
                if (target.hasClass('content') || target.hasClass('note')) {
                    return;
                }
                engine.createRootNext();
            });
        }
        var nodeCountLabel = jquery__WEBPACK_IMPORTED_MODULE_22___default()('#node-count-text');
        if (nodeCountLabel.length > 0) {
            nodeCountLabel.text(Object.keys(this.model.getMapping()).length);
        }
    };
    return Engine;
}());

/**
 * 是否有子节点
 * @param nodeId
 * @returns {boolean}
 */
function hasChildren$1(nodeId) {
    return jquery__WEBPACK_IMPORTED_MODULE_22___default()('#' + nodeId).children('.children').children('.node').length > 0;
}
/**
 * 获取第一个子节点
 * @param nodeId
 */
function getFirstChild(nodeId) {
    return jquery__WEBPACK_IMPORTED_MODULE_22___default()('#' + nodeId).children('.children').children('.node:eq(0)');
}

/**
 * 绑定一个方法的 this 指针
 */
function Bind() {
    return function (target, name, descriptor) {
        var fn = descriptor.value;
        if (!Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(fn)) {
            return descriptor;
        }
        // In IE11 calling Object.defineProperty has a side-effect of evaluating the
        // getter for the property which is being replaced. This causes infinite
        // recursion and an "Out of stack space" error.
        var definingProperty = false;
        return {
            configurable: true,
            get: function () {
                if (definingProperty) {
                    return fn;
                }
                var value = fn.bind(this);
                definingProperty = true;
                Object.defineProperty(this, name, {
                    value: value,
                    configurable: true,
                    writable: true
                });
                definingProperty = false;
                return value;
            }
        };
    };
}

/**
 * 打点器管理中心
 */
var TeaManager = /** @class */ (function () {
    function TeaManager() {
    }
    TeaManager.collectEvent = function (event, params) {
        if (params === void 0) { params = {}; }
        console.warn('Log:', event, params);
    };
    /**
     * 设置打点器
     * @param collector 打点器
     */
    TeaManager.setLogger = function (collector) {
        if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(collector)) {
            TeaManager.collectEvent = collector;
        }
    };
    /**
     * 获取打点装饰器
     */
    TeaManager.getDecorator = function () {
        return TeaManager.logger;
    };
    /**
     * 获取打点器
     */
    TeaManager.getLogger = function () {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            try {
                TeaManager.collectEvent.apply(TeaManager, args);
            }
            catch (error) {
                console.warn(error);
            }
        };
    };
    TeaManager.logger = function (event, getParams) {
        return function (target, name, descriptor) {
            var fn = descriptor.value;
            if (!Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(fn)) {
                return descriptor;
            }
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                /* 打点失败不影响程序正常执行 */
                try {
                    var params = {};
                    if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(getParams)) {
                        params = getParams.call(this, { args: args, context: this });
                    }
                    TeaManager.collectEvent(event, params);
                }
                catch (error) {
                    console.warn('Tea log error: ', error);
                }
                return fn.apply(this, args);
            };
            return descriptor;
        };
    };
    return TeaManager;
}());

/**
 * 返回当前页面所在的层级
 * @param view 当前视图类型
 */
function getCurrentLevel(view) {
    if (view === void 0) { view = 'paper'; }
    var $dir;
    if (view === 'paper') {
        $dir = jquery__WEBPACK_IMPORTED_MODULE_22___default()('.mindnote-paper .mindnote-dir');
    }
    else if (view === 'minder') {
        $dir = jquery__WEBPACK_IMPORTED_MODULE_22___default()('#mind-screen .mind-dir');
    }
    else {
        $dir = jquery__WEBPACK_IMPORTED_MODULE_22___default()('.mindnote-demo-screen .mindnote-dir');
    }
    /* 若不显示则为0 */
    if (!$dir.is(':visible')) {
        return 0;
    }
    return $dir.find('.item').length;
}
/**
 * 获取当前的 select_type 用于打点
 */
function getCurrentSelectType() {
    var selection = window.getSelection();
    var $paper = jquery__WEBPACK_IMPORTED_MODULE_22___default()('.mindnote-paper');
    if (selection.anchorNode) {
        var paper = $paper.get(0);
        if (paper.contains(selection.anchorNode) && selection.anchorOffset !== selection.focusOffset) {
            return 'text';
        }
        return null;
    }
    var $selected = $paper.find('.node.selected');
    if ($selected.length > 0) {
        return 'many';
    }
    return null;
}

var teaUtils = /*#__PURE__*/Object.freeze({
	getCurrentLevel: getCurrentLevel,
	getCurrentSelectType: getCurrentSelectType
});

var TeaLogger = TeaManager.getDecorator();
var isIE$1 = environment.isIE && !environment.isEdge;
var EditorOperate = /** @class */ (function () {
    function EditorOperate(props) {
        this.titleStatus = 'normal';
        this.KEY_CONTENT_EVENT = 'keydown.content';
        var editorUI = props.editorUI, selector = props.selector, engine = props.engine, textEditor = props.textEditor, state = props.state, imageEditor = props.imageEditor, viewport = props.viewport, eventSource = props.eventSource, model = props.model;
        this.editorUI = editorUI;
        this.engine = engine;
        this.textEditor = textEditor;
        this.selector = selector;
        this.state = state;
        this.imageEditor = imageEditor;
        this.viewport = viewport;
        this.eventSource = eventSource;
        this.model = model;
    }
    EditorOperate.prototype.init = function () {
        this.initNameEdit();
        this.initTextEdit();
        this.initHotKey();
    };
    EditorOperate.prototype.getTitleStatus = function () {
        return this.titleStatus;
    };
    /**
     * 初始化文本编辑
     */
    EditorOperate.prototype.initTextEdit = function () {
        var _this = this;
        // 初始化文本编辑
        this.textEditor.init({
            // input
            onPopAction: function (action) {
                var nodeSet = _this.model.getMappingById(action.id);
                /* 更新模型 */
                _this.engine.updateText(action.id, action.nextContent, action.type);
                // 发出 input 事件
                if (nodeSet) {
                    var inputAction = __assign({}, action, { path: nodeSet.path, modified: _this.model.getById(action.id).modified });
                    _this.eventSource.trigger(SourceEvent.DOC_CHANGED, [inputAction]);
                }
            },
            onPasteMultiNodes: function (targetId, nodes) {
                _this.engine.appendNextNodes(targetId, nodes);
            }
        });
    };
    /**
     * 编辑标题
     */
    EditorOperate.prototype.initNameEdit = function () {
        /**
         * 记录之前的光标位置
         */
        var cursorPosition = { start: 0, end: 0 };
        var enterDownValue = '';
        var me = this;
        // ie 不支持 input 事件，用定时器模拟
        var timer = null;
        var startListenTextChange = function (el) {
            var startContent = el.text();
            stopListenTextChange();
            timer = window.setInterval(function () {
                var newContent = el.text();
                if (newContent !== startContent) {
                    update(newContent);
                    startContent = newContent;
                }
            }, 50);
        };
        var stopListenTextChange = function () {
            if (timer) {
                window.clearInterval(timer);
                timer = null;
            }
        };
        var update = function (title) {
            var newCursorPosition = getCursorPosition();
            me.engine.editName(title, cursorPosition, newCursorPosition);
            // 记录光标位置
            cursorPosition = newCursorPosition;
        };
        this.viewport.nameContainer.find('.mindnote-title-content').on('input', function (e) {
            update(jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).text());
        }).on('compositionstart', function (e) {
            /* 输入法开始时 */
            me.titleStatus = 'composition';
        }).on('compositionend', function (e) {
            /* 输入法结束时 */
            me.titleStatus = 'normal';
        }).on('keydown', function (e) {
            var code = e.keyCode;
            var metaKey = e[environment.metaKey];
            if (code === KeyCode.Enter) {
                // 记录回车按下的值
                enterDownValue = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).text() || '';
                /* 禁止默认换行 */
                e.preventDefault();
            }
            else if (metaKey && (code === KeyCode.B || code === KeyCode.I || code === KeyCode.U)) {
                /* 禁止所有样式快捷键 */
                e.preventDefault();
            }
        }).on('keyup', function (e) {
            jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).find('div,br,p').remove();
            if (e.keyCode === KeyCode.ArrowDown || (e.keyCode === KeyCode.Enter && jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).text() === enterDownValue)) {
                // 如果回车抬起和回车按下的值是一样的，才执行，因为在输入法状态，回车是直接输入英文
                // 不能直接使用keydown事件来处理，因为focus子元素后，会出现换行
                var paper = me.viewport.paper;
                var firstContent = paper.find('.content:first');
                if (firstContent.length === 0) {
                    // 没有主题，回车，创建第一个节点
                    me.engine.createRootNext();
                }
                else {
                    // 有主题，让第一个主题focus
                    moveCursorEnd(firstContent);
                }
            }
        }).on('paste', function (e) {
            /* 禁止浏览器的默认粘贴行为 */
            e.preventDefault();
            var event = e.originalEvent;
            var text = event.clipboardData.getData('text/plain');
            /* 使用 temp 元素过滤 tag */
            var temp = document.createElement('div');
            /* 再次清洗空白元素 */
            temp.innerText = text.trim();
            document.execCommand('insertText', false, temp.innerText);
        }).on('blur', function (e) {
            if (isIE$1) {
                stopListenTextChange();
            }
        }).on('focus', function (e) {
            if (isIE$1) {
                startListenTextChange(jquery__WEBPACK_IMPORTED_MODULE_22___default()(this));
            }
        });
    };
    /**
     * 初始化快捷键
     */
    EditorOperate.prototype.initHotKey = function () {
        var paper = this.viewport.paper;
        var me = this;
        // 快捷键相关
        paper.on(this.KEY_CONTENT_EVENT, '.content', function (e) {
            if (me.state.readonly) {
                return;
            }
            var content = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            var id = content.data('id');
            var container = getNodeContainer(id);
            var code = e.keyCode;
            var cursorPosition = null;
            /* command/ctrl + enter */
            if (code === KeyCode.Enter && e[environment.metaKey]) {
                e.preventDefault();
                me.handleEnterAndMeta(id);
            }
            else if (code === KeyCode.Enter && e.shiftKey) {
                e.preventDefault();
                me.handleEnterAndShift(id);
            }
            else if (code === KeyCode.Enter && e.altKey) {
                e.preventDefault();
                me.handleEnterAndAlt(id);
            }
            else if (code === KeyCode.Enter && (environment.isMobile || !me.state.getEditorState().isMentionActive)) {
                e.preventDefault();
                if (environment.isMobile && me.state.getEditorState().isMentionActive) {
                    me.textEditor.quitAtSearch();
                }
                me.handleEnter(id);
            }
            else if (code === KeyCode.Delete) {
                // delete向右删除，如果光标到了当前行的最后边，删除下一个节点
                cursorPosition = getCursorPosition();
                if (cursorPosition.start === cursorPosition.end
                    && cursorPosition.end === content.text().length) {
                    var nextNode = container.next('.node');
                    if (nextNode.length > 0) {
                        e.preventDefault();
                        var nextId = nextNode.attr('id');
                        if (!hasChildren$1(nextId)) ;
                    }
                }
            }
            else if (code === KeyCode.Backspace) {
                if (e[environment.metaKey] && e.shiftKey) {
                    e.preventDefault();
                    me.handleBackspaceAndMetaAndShift(id);
                    return;
                }
                // Backspace, 删除
                if (hasChildren$1(id) || container.hasClass('root-node')) {
                    // 有子节点，或者是根节点，不能删
                    return;
                }
                cursorPosition = getCursorPosition();
                if (content.text() === '' || (cursorPosition.start === 0 && cursorPosition.end === 0)) {
                    e.preventDefault();
                    // 没内容，直接删除
                    me.editorUI.deleteNode(id);
                }
            }
            else if (code === KeyCode.Tab && e.shiftKey) {
                e.preventDefault();
                me.handleTabAndShift(id);
            }
            else if (code === KeyCode.Tab && !e.shiftKey) {
                e.preventDefault();
                me.handleTab(id);
            }
            else if (code === KeyCode.ArrowLeft && !e.metaKey && !e.ctrlKey && !e.shiftKey) {
                // 向左，如果光标到了当前行的最前边，则移动到上一节点的最后边
                cursorPosition = getCursorPosition();
                if (cursorPosition.start === 0) {
                    var preNodeContent = me.engine.toPrevNode(id, false);
                    if (preNodeContent) {
                        moveCursorEnd(preNodeContent);
                        e.preventDefault();
                    }
                }
            }
            else if (code === KeyCode.ArrowUp) {
                if (e.shiftKey && e[environment.metaKey]) {
                    // cmd + shift + 向上，向上移动节点
                    e.preventDefault();
                    me.handleUpAndShiftAndMeta(id);
                }
                else if (!e.shiftKey && !me.state.getEditorState().isMentionActive) {
                    // 光标向上
                    if ((content.height() || 0) > parseInt(content.css('line-height'))) {
                        // 有多行的情况，光标在前边，才向上
                        cursorPosition = getCursorPosition();
                        if (cursorPosition.start !== 0) {
                            return;
                        }
                    }
                    e.preventDefault();
                    me.engine.toPrevNode(id, false);
                }
            }
            else if (code === KeyCode.ArrowRight && !e.metaKey && !e.ctrlKey && !e.shiftKey) {
                // 向右，如果光标到了当前行的最后边，则移动到下一节点的最前边
                cursorPosition = getCursorPosition();
                if (cursorPosition.start === cursorPosition.end
                    && cursorPosition.end === content.text().length) {
                    var nextNodeContent = me.engine.toNextNode(id, false);
                    if (nextNodeContent) {
                        setCursorPosition(nextNodeContent, { start: 0 });
                        e.preventDefault();
                    }
                }
            }
            else if (code === KeyCode.ArrowDown) {
                if (e.shiftKey && e[environment.metaKey]) {
                    // cmd + shift + 向下，向下移动节点
                    e.preventDefault();
                    me.handleDownAndShiftAndMeta(id);
                }
                else if (!e.shiftKey && !me.state.getEditorState().isMentionActive) {
                    // 光标向下
                    if ((content.height() || 0) > parseInt(content.css('line-height'))) {
                        // 有多行的情况，光标在最后，才向下
                        cursorPosition = getCursorPosition();
                        if (cursorPosition.end < content.text().length) {
                            return;
                        }
                    }
                    e.preventDefault();
                    me.engine.toNextNode(id, false);
                }
            }
            else if (code === KeyCode.D && e[environment.metaKey]) {
                // cmd + d 复用
                e.preventDefault();
                me.handleDAndMeta(id);
            }
            else if (code === KeyCode.ClosingSquareBracket && e[environment.metaKey]) {
                // cmd + ] 钻取
                e.preventDefault();
                me.handleClosingSquareBracketAndMeta(id);
            }
            else if (code === KeyCode.OpeningSquareBracket && e[environment.metaKey]) {
                // cmd + [ 返回一级
                e.preventDefault();
                me.handleOpeningSquareBracketAndMeta();
            }
            else if ((code === KeyCode.Period || code === KeyCode.NumpadDecimal) && (e.metaKey || e.altKey) && !e.shiftKey) {
                // cmd + . 展开、收缩，110是小键盘
                // windows下是alt + .
                // 在windows10下，按键码竟然是229
                e.preventDefault();
                me.handleMetaAndPeriod(id);
            }
            else if (code >= KeyCode.Num1 && code <= KeyCode.Num4 && e.altKey) {
                // cmd + shift + 1 2 3 4，设置标题样式
                e.preventDefault();
                var heading = code - KeyCode.Num0;
                me.handleNumAndAlt(id, heading);
            }
            else if (code >= KeyCode.Numpad1 && code <= KeyCode.Numpad4 && e.altKey) {
                // cmd + shift + （小键盘）1 2 3 4，设置标题样式
                e.preventDefault();
                var heading = code - 96;
                me.handleNumAndAlt(id, heading);
            }
            else if (e.altKey && Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(HighlightKeyCodeMap).find(function (key) { return +key === code; })) {
                // 节点高亮
                e.preventDefault();
                me.handleHighlight(id, HighlightKeyCodeMap[code]);
            }
        });
        // 全局快捷键，绑定到document上
        var eventSpace = me.state.getEditorState().eventSpace;
        jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).on("keydown.mindnote-hotkey" + eventSpace, function (e) {
            var code = e.keyCode;
            var target = jquery__WEBPACK_IMPORTED_MODULE_22___default()(e.target);
            if (code === KeyCode.S && e[environment.metaKey]) {
                // 阻止cmd + s保存网页
                e.preventDefault();
            }
            else if ((code === KeyCode.Period || code === KeyCode.NumpadDecimal) && (e.metaKey || e.altKey) && e.shiftKey) {
                // cmd + shift + . 展开、收缩全部
                // 在windows10下，alt + shift + .
                me.engine.toggleExpandAll();
                e.preventDefault();
            }
            else if (e.keyCode === KeyCode.Backspace) {
                // 回退
                if (!target.is('input, textarea, [contenteditable]')) {
                    e.preventDefault();
                }
            }
            else if (e.keyCode === KeyCode.Esc) {
                // esc 取消选择
                me.selector.cancel();
            }
        });
        // 在编辑备注时的特殊快捷键
        paper.on('keydown.hotkey_note', '.note', function (e) {
            if (me.state.readonly) {
                return;
            }
            var note = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            var id = note.parent().parent().attr('id') || '';
            var code = e.keyCode;
            var targetContent;
            var cursorPosition;
            if (code === KeyCode.ArrowUp && !me.state.getEditorState().isMentionActive) {
                cursorPosition = getCursorPosition();
                if (cursorPosition.start === 0) {
                    e.preventDefault();
                    // 向上，让节点选中
                    getContentById(id).focus();
                }
            }
            else if (code === KeyCode.ArrowDown && !me.state.getEditorState().isMentionActive) {
                cursorPosition = getCursorPosition();
                if (cursorPosition.end >= note.text().length) {
                    e.preventDefault();
                    // 向下
                    me.engine.toNextNode(id, false);
                }
            }
            else if (code === KeyCode.Backspace) {
                // Backspace, 删除
                var value = nodeTextToPlainText(note.text(), me.state.getEditorProps().locale);
                if (value === '') {
                    e.preventDefault();
                    // 没文本才可以删除
                    me.engine.updateText(id, '', 'note');
                    targetContent = getContentById(id);
                    moveCursorEnd(targetContent);
                    // 不需要删除他，因为会触发他的blur，会对他进行删除
                    if (note.length > 0) {
                        note.remove();
                    }
                }
            }
            else if (code === KeyCode.Enter && e.shiftKey) {
                // shift + enter, 返回节点
                e.preventDefault();
                var content = getContentById(id);
                moveCursorEnd(content);
            }
        });
    };
    /**
     * Toggle 一个节点的完成状态
     * @param id 节点ID
     */
    EditorOperate.prototype.handleEnterAndMeta = function (id) {
        var finished = this.engine.toggleFinishNode(id);
        if (finished) {
            this.engine.toNextNode(id, false);
        }
    };
    /**
     * 触发编辑描述
     * @param id 节点ID
     */
    EditorOperate.prototype.handleEnterAndShift = function (id) {
        this.editorUI.editNote(id);
    };
    /**
     * 触发添加图片
     * @param id 节点ID
     */
    EditorOperate.prototype.handleEnterAndAlt = function (id) {
        this.imageEditor.insert(id);
    };
    /**
     * 向目标节点下创建节点
     * @param id 目标节点ID
     */
    EditorOperate.prototype.handleEnter = function (id) {
        this.editorUI.createNext(id);
    };
    /**
     * 缩进一个节点
     * @param id 节点ID
     */
    EditorOperate.prototype.handleTab = function (id) {
        this.engine.indentNode(id);
    };
    /**
     * 回退一个节点
     * @param id 节点ID
     */
    EditorOperate.prototype.handleTabAndShift = function (id) {
        this.engine.outdentNode(id);
    };
    /**
     * 向上移动节点
     * @param id 节点ID
     */
    EditorOperate.prototype.handleUpAndShiftAndMeta = function (id) {
        this.engine.moveNodePrev(id);
    };
    /**
     * 向下移动节点
     * @param id 节点ID
     */
    EditorOperate.prototype.handleDownAndShiftAndMeta = function (id) {
        this.engine.moveNodeNext(id);
    };
    /**
     * 拷贝一个节点
     * @param id 节点ID
     */
    EditorOperate.prototype.handleDAndMeta = function (id) {
        this.engine.copyNode(id);
    };
    /**
     * 翻页钻取一个节点
     * @param id 节点ID
     */
    EditorOperate.prototype.handleClosingSquareBracketAndMeta = function (id) {
        this.engine.drillNode(id, false);
    };
    /**
     * 回退一级钻取节点
     */
    EditorOperate.prototype.handleOpeningSquareBracketAndMeta = function () {
        this.engine.backDrillNode();
    };
    /**
     * 展开/收起一个主题
     * @param id 节点ID
     */
    EditorOperate.prototype.handleMetaAndPeriod = function (id) {
        this.engine.toggleExpand(id);
    };
    /**
     * 处理 Heading 操作
     * @param id 节点ID
     * @param heading 操作时的 heading 值
     */
    EditorOperate.prototype.handleNumAndAlt = function (id, heading) {
        /* 为 4 的时候是正文 */
        var node = this.model.getById(id);
        if (heading === node.heading || heading === 4) {
            heading = 0;
        }
        this.engine.setNodeAttr(id, 'heading', heading);
    };
    /**
     * 处理高亮操作
     * @param highlight 高亮颜色
     */
    EditorOperate.prototype.handleHighlight = function (id, highlight) {
        if (!this.state.getEditorState().highlightEnabled) {
            return;
        }
        var node = this.model.getById(id);
        if (highlight === node.highlight) {
            highlight = undefined;
        }
        this.engine.toggleHighlight(id, highlight);
    };
    /**
     * 删除节点
     * @param id 节点ID
     */
    EditorOperate.prototype.handleBackspaceAndMetaAndShift = function (id) {
        if (!getNodeContainer(id).hasClass('root-node')) {
            this.engine.deleteNodeDirectly(id);
        }
    };
    __decorate([
        Bind(),
        TeaLogger('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var id = args[0];
            var node = context.model.getById(id);
            var action = node.finish ? 'activate' : 'complete';
            return {
                action: action,
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorOperate.prototype, "handleEnterAndMeta", null);
    __decorate([
        Bind(),
        TeaLogger('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'edit_note',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorOperate.prototype, "handleEnterAndShift", null);
    __decorate([
        Bind(),
        TeaLogger('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'add_image',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorOperate.prototype, "handleEnterAndAlt", null);
    __decorate([
        Bind(),
        TeaLogger('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'tab',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorOperate.prototype, "handleTab", null);
    __decorate([
        Bind(),
        TeaLogger('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'shift_tab',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorOperate.prototype, "handleTabAndShift", null);
    __decorate([
        Bind(),
        TeaLogger('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'move_item_up',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorOperate.prototype, "handleUpAndShiftAndMeta", null);
    __decorate([
        Bind(),
        TeaLogger('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'move_item_down',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorOperate.prototype, "handleDownAndShiftAndMeta", null);
    __decorate([
        Bind(),
        TeaLogger('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'copy_item',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorOperate.prototype, "handleDAndMeta", null);
    __decorate([
        Bind(),
        TeaLogger('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'enter_item',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'content',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorOperate.prototype, "handleClosingSquareBracketAndMeta", null);
    __decorate([
        Bind(),
        TeaLogger('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var id = args[0];
            var node = context.model.getById(id);
            var action = node.collapsed ? 'expand' : 'collapse';
            return {
                action: action,
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'content',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorOperate.prototype, "handleMetaAndPeriod", null);
    __decorate([
        Bind(),
        TeaLogger('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var id = args[0], h = args[1];
            var node = context.model.getById(id);
            var action = (h === 1 && 'heading-h1') || (h === 2 && 'heading-h2') || (h === 3 && 'heading-h3') || 'set_as_text';
            var attr_op_status = h === node.heading && h !== 4 ? 'cancel' : 'effective';
            return {
                action: action,
                attr_op_status: attr_op_status,
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorOperate.prototype, "handleNumAndAlt", null);
    __decorate([
        Bind(),
        TeaLogger('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var id = args[0], highlight = args[1];
            var action = "highlight_" + highlight;
            var node = context.model.getById(id);
            var attr_op_status = highlight === node.highlight ? 'cancel' : 'effective';
            return {
                action: action,
                attr_op_status: attr_op_status,
                eventType: 'shortkey',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType(),
            };
        })
    ], EditorOperate.prototype, "handleHighlight", null);
    __decorate([
        Bind(),
        TeaLogger('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'delete_item',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorOperate.prototype, "handleBackspaceAndMetaAndShift", null);
    return EditorOperate;
}());

var shakeMap = {
    light: {
        strength: 10,
        time: 50,
        grade: 'light',
    },
    medium: {
        strength: 20,
        time: 100,
        grade: 'medium',
    },
    heavy: {
        strength: 30,
        time: 200,
        grade: 'heavy',
    },
};
/**
 * Lark Mobile 端震动
 * @param grade 震动强度
 */
function vibrate(grade) {
    var shake = Object(lodash_es__WEBPACK_IMPORTED_MODULE_7__["default"])(window, 'lark.biz.util.triggerShake');
    if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(shake)) {
        var args = shakeMap[grade];
        shake(args);
    }
}

var TeaLogger$1 = TeaManager.getDecorator();
var Dragger = /** @class */ (function () {
    function Dragger(props) {
        this.sourceId = '';
        this.selectedNodes = null;
        // 记录节点的特殊情况
        this.special = {};
        this.dragControl = null;
        this.dragWrapper = null;
        this.dragCount = 0;
        // 可以放置的位置
        this.dropPosition = [];
        this.dropResult = null;
        this.prevNodeId = '';
        this.autoScrollTimer = null;
        this.autoScrollStep = 7;
        this.autoScrollSpeed = 25;
        this.contentDragging = null;
        // 边界的偏移量
        this.boundaryOffset = 50;
        var model = props.model, engine = props.engine, selector = props.selector, viewport = props.viewport, state = props.state, eventSource = props.eventSource;
        this.model = model;
        this.engine = engine;
        this.selector = selector;
        this.paper = viewport.paper;
        this.scroller = viewport.scrollContainer;
        this.viewport = viewport;
        this.state = state;
        this.eventSource = eventSource;
    }
    /**
     * 重置拖动
     */
    Dragger.prototype.resetDrag = function () {
        this.selectedNodes = null;
        this.special = {};
        this.dragControl = null;
        this.dragWrapper = null;
        this.dragCount = 0;
        this.dropPosition = [];
        this.dropResult = null;
        this.contentDragging = null;
    };
    /**
     * 设置节点排除情况
     */
    Dragger.prototype.addToSpecial = function (nodeId, key, value) {
        if (!this.special[nodeId]) {
            this.special[nodeId] = {};
        }
        var nodeSpecial = this.special[nodeId];
        nodeSpecial[key] = value;
    };
    /**
     * 设置一些节点的特例情况
     */
    Dragger.prototype.setSpecial = function () {
        var _this = this;
        var selectedNodes = this.selectedNodes;
        // 递归处理，所有被选中的节点都排除
        recursive(selectedNodes, function (node) {
            _this.dragCount++;
            _this.addToSpecial(node.id, 'exclude', true);
        });
        var firstContainer = getNodeContainer(selectedNodes[0].id);
        var lastContainer = getNodeContainer(selectedNodes[selectedNodes.length - 1].id);
        // 相邻的后边节点不响应prev
        var nextNode = lastContainer.next('.node');
        if (nextNode.length) {
            var nextId = nextNode.attr('id');
            this.addToSpecial(nextId, 'excludePrev', true);
        }
        // 相邻的其那边节点，不响应next
        var prevNode = firstContainer.prev('.node');
        if (prevNode.length > 0) {
            var prevId = prevNode.attr('id');
            this.prevNodeId = prevId;
            if (!hasChildren$1(prevId) || prevNode.hasClass('collapsed')) {
                // 上边的节点，没有子节点，不可以响应next
                this.addToSpecial(prevId, 'excludeNext', true);
            }
        }
        // 如果是第一个子节点，那他的父节点也不能响应next
        if (prevNode.length === 0 && firstContainer.parent().is('.children')) {
            var parentNode = firstContainer.parent().parent();
            var parentId = parentNode.attr('id');
            this.addToSpecial(parentId, 'excludeNext', true);
        }
        var rootNode = this.engine.getRootNode();
        if (rootNode) {
            this.addToSpecial(rootNode.id, 'excludePrev', true);
            this.addToSpecial(rootNode.id, 'excludeNext', true);
        }
    };
    /**
     * 每次拖动，初始化相关组件
     */
    Dragger.prototype.initControls = function () {
        // 开始构建相关的dom
        this.dragControl = this.viewport.controlHolder.find('.mindnote-drag-control');
        if (this.dragControl.length === 0) {
            this.dragControl = jquery__WEBPACK_IMPORTED_MODULE_22___default()("\n\t\t\t\t<div class=\"mindnote-drag-control\">\n\t\t\t\t\t" + (!environment.isMobile ? '<div class="mindnote-bullet-drag-wrapper"><div class="bullet"></div></div>' : '') + "\n\t\t\t\t\t<div id=\"bullet-drag-mask\"></div>\n\t\t\t\t</div>\n\t\t\t").appendTo(this.viewport.controlHolder);
        }
        this.dragWrapper = this.viewport.controlHolder.find('.mindnote-bullet-drag-wrapper');
        // 设置移动端拖动时的状态
        if (environment.isMobile) {
            var sourceContainer = getNodeContainer(this.sourceId);
            var sourceWrapper = sourceContainer.children('.node-wrapper').children('.content-wrapper');
            this.contentDragging = sourceWrapper.clone();
            this.contentDragging.addClass('content-dragging');
            this.contentDragging.find('.toggle').remove();
            this.contentDragging.appendTo(this.viewport.nodeWrapper);
            sourceContainer.removeClass('node-mobile-pre-dragging');
        }
        else {
            // 添加多个圆点，最多4个
            this.dragWrapper.children('.children').remove();
            var bulletIndex = 1;
            while (bulletIndex < this.dragCount && bulletIndex <= 4) {
                this.dragWrapper.append("<div class=\"bullet children\" style=\"z-index: " + -bulletIndex + "; opacity: " + (1 - bulletIndex * 0.18) + ";\"></div>");
                bulletIndex++;
            }
        }
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('.menu-container').hide();
        this.dragControl.show();
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('.mindnote-drop-line').remove();
    };
    /**
     * 初始化所有可以放置节点的坐标
     */
    Dragger.prototype.initDropPosition = function () {
        var scrollerTop = this.scroller.scrollTop() || 0;
        var me = this;
        this.paper.find('.node:visible').each(function () {
            var nodeDom = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            var nodeId = nodeDom.attr('id');
            var content = getContentById(nodeId);
            var nodeSpecial = me.special[nodeId];
            if (!(nodeSpecial && nodeSpecial.exclude)) {
                // 在滚动条为0的情况下的绝对坐标
                var nodeOffset = content.offset();
                var nodeTop = nodeOffset.top;
                if (!me.viewport.scrollContainerIsWindow) {
                    // 如果页面滚动容器不是window，那nodeTop需要加上scrollTop，才是node的绝对位置
                    // 如果滚动容器是window，那nodeTop已经是元素的绝对位置，不需要再加
                    nodeTop += scrollerTop;
                }
                var nodeWrapper = nodeDom.children('.node-wrapper');
                var nodeHeight = content.outerHeight() || 0;
                var imageList = nodeWrapper.children('.attach-image-list');
                if (imageList.length) {
                    nodeHeight += imageList.outerHeight() || 0;
                }
                var noteEditor = nodeWrapper.children('.note');
                if (noteEditor.length) {
                    nodeHeight += noteEditor.outerHeight() || 0;
                }
                var nodeHalf = nodeHeight / 2;
                if (!nodeSpecial || !nodeSpecial.excludePrev) {
                    // 没有排除上级
                    var prevPosition = {
                        id: nodeId,
                        y: nodeTop,
                        h: nodeHalf,
                        type: 'prev'
                    };
                    me.dropPosition.push(prevPosition);
                }
                if (!nodeSpecial || !nodeSpecial.excludeNext) {
                    // 没有排除下级
                    var pos = {
                        id: nodeId,
                        y: nodeTop + nodeHalf,
                        h: nodeHalf,
                        type: 'next'
                    };
                    me.dropPosition.push(pos);
                    // 如果有子节点，那么再构建一个响应，响应可以放在这个节点的后边，位置在children元素最下边
                    if (hasChildren$1(nodeId) && nodeId !== me.prevNodeId) {
                        var childPos = {
                            id: nodeId,
                            y: nodeTop + (nodeDom.height() || 0) - 4,
                            h: 4,
                            type: 'next',
                            afterChildren: true
                        };
                        me.dropPosition.push(childPos);
                    }
                }
            }
        });
    };
    /**
     * 通过鼠标的Y坐标，查找可以放置的位置
     * @param currentY
     */
    Dragger.prototype.findDrop = function (currentY) {
        var result = null;
        currentY += this.scroller.scrollTop() || 0;
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(this.dropPosition, function (index, pos) {
            if (currentY >= pos.y && currentY < pos.y + pos.h) {
                result = pos;
                // break;
                return false;
            }
        });
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('.mindnote-drop-line').remove();
        if (result) {
            result = result;
            var targetNodeDom = getNodeContainer(result.id);
            var lineWidth = (targetNodeDom.width() || 0) - 14;
            var targetOffset = targetNodeDom.offset();
            var paperOffset = this.viewport.paper.offset();
            var left = targetOffset.left + 14;
            var top_1;
            if (result.afterChildren) {
                top_1 = result.y + result.h - 1;
            }
            else if (result.type === 'prev') {
                top_1 = result.y - 1;
            }
            else {
                top_1 = result.y + result.h - 1;
                if (hasChildren$1(result.id) && !targetNodeDom.hasClass('collapsed')) {
                    // 在这个节点的下边，并且有子节点，那就放到他第一个子节点
                    var firstChild = getFirstChild(result.id);
                    result = {
                        type: 'prev',
                        id: firstChild.attr('id')
                    };
                    lineWidth -= 31;
                    left += 31;
                }
            }
            left -= paperOffset.left;
            top_1 -= paperOffset.top;
            var dropLine = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="mindnote-drop-line"></div>').appendTo(this.dragControl);
            dropLine.css({
                'width': lineWidth,
                'top': top_1,
                'left': left
            });
        }
        this.dropResult = result;
    };
    /**
     * 设置拖动时的样式
     */
    Dragger.prototype.setDragStyle = function () {
        this.selectedNodes = this.selector.getNodes();
        if (this.selectedNodes.length === 0) {
            // 没有发生选择的情况下，视当前拖动的元素为选择元素
            var sourceNode = this.model.getById(this.sourceId);
            this.selectedNodes = [sourceNode];
            // 加深背景色
            var nodeContainer = getNodeContainer(this.sourceId);
            nodeContainer.addClass('node-dragging');
            if (environment.isMobile) {
                nodeContainer.addClass('node-mobile-pre-dragging');
            }
        }
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('body').addClass('select-disable').off('selectstart').on('selectstart', function (e) {
            e.preventDefault();
            window.getSelection().removeAllRanges();
            return false;
        });
    };
    Dragger.prototype.clearDragStyle = function () {
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('.node-dragging').removeClass('node-dragging mobile-active node-mobile-pre-dragging');
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('body').removeClass('select-disable').off('selectstart');
    };
    /**
     * 拖动时开始初始化
     */
    Dragger.prototype.initDrag = function () {
        this.setDragStyle();
        // 设置特例
        this.setSpecial();
        this.initControls();
        this.initDropPosition();
    };
    /**
     * 初始化拖动
     */
    Dragger.prototype.init = function () {
        var me = this;
        /**
         * 开始拖动
         * @param downE
         * @param source
         */
        function beginDrag(downE, source) {
            if (downE.button === 2) {
                // 按的右键，不处理
                return;
            }
            me.resetDrag();
            var downPosEvent = downE;
            if (downE.originalEvent.touches) {
                // 移动端的拖动
                downPosEvent = downE.originalEvent.touches[0];
            }
            var sourceOffset = source.offset();
            var offset = {
                x: downPosEvent.pageX - sourceOffset.left,
                y: downPosEvent.pageY - sourceOffset.top
            };
            if (!environment.isMobile) {
                // 通过坐标计算是否是点在了圆点上，因为可能是点在了菜单上，也会冒泡到圆点上
                if (offset.x < 0 || offset.x > 16 || offset.y > 16) {
                    return;
                }
            }
            if (bowser__WEBPACK_IMPORTED_MODULE_27___default.a.ios) {
                /* 移动端震动，Android 长按会自动触发震动 */
                vibrate('light');
            }
            me.eventSource.trigger(SourceEvent.DRAG_NODE_START);
            var sourceContainer = getNodeContainer(me.sourceId);
            // 记录是否发生了拖动，来判断是点击还是拖动操作
            var dragged = false;
            if (sourceContainer.hasClass('selected')) {
                // 已经被选中了，进行多个拖动，阻止取消选择
                downE.stopPropagation();
            }
            var doc = jquery__WEBPACK_IMPORTED_MODULE_22___default()(document);
            var moveHandler = function (moveE) {
                window.getSelection().removeAllRanges();
                var movePosEvent;
                if ('touches' in moveE) {
                    // 移动端的拖动
                    movePosEvent = moveE.touches[0];
                }
                else {
                    movePosEvent = moveE;
                }
                if (environment.isMobile) {
                    // 手机端要阻止默认的事件，防止页面滚动，无法准确拖动
                    moveE.preventDefault();
                }
                if (movePosEvent.clientY > (jquery__WEBPACK_IMPORTED_MODULE_22___default()(window).height() || 0) - me.boundaryOffset) {
                    // 拖动到了页面底部
                    me.autoScroll(1);
                }
                else if (movePosEvent.clientY < me.boundaryOffset) {
                    // 拖动到了页面顶部
                    me.autoScroll(-1);
                }
                else if (me.autoScrollTimer) {
                    window.clearInterval(me.autoScrollTimer);
                    me.autoScrollTimer = null;
                }
                if (!dragged) {
                    if (Math.abs(movePosEvent.pageX - downPosEvent.pageX) < 5
                        && Math.abs(movePosEvent.pageY - downPosEvent.pageY) < 5) {
                        return;
                    }
                    dragged = true;
                    // 开始初始化拖动
                    me.initDrag();
                }
                if (environment.isMobile) {
                    if (me.contentDragging) {
                        me.contentDragging.css({
                            left: movePosEvent.pageX - 15,
                            top: movePosEvent.pageY - (me.contentDragging.outerHeight() || 0) / 2
                        });
                    }
                }
                else {
                    if (me.dragWrapper) {
                        me.dragWrapper.css({
                            left: movePosEvent.clientX - offset.x,
                            top: movePosEvent.clientY - offset.y
                        });
                    }
                }
                me.findDrop(movePosEvent.clientY);
            };
            document.addEventListener(environment.moveEvent, moveHandler, environment.supportsPassive ? { passive: false } : false);
            doc.on(environment.upEvent + '.drag_node', function () {
                document.removeEventListener(environment.moveEvent, moveHandler);
                doc.off(environment.upEvent + '.drag_node');
                doc.off('keydown.drag_node');
                if (me.dragControl) {
                    me.dragControl.hide();
                }
                if (me.contentDragging) {
                    me.contentDragging.remove();
                }
                me.clearDragStyle();
                me.eventSource.trigger(SourceEvent.DRAG_NODE_END);
                var sourceId = sourceContainer.attr('id');
                if (!dragged && !environment.isMobile) {
                    // 移动端，不根据拖动的情况来进行内钻
                    if (me.selector.getNodes().length === 0) {
                        me.drillNode(sourceId);
                    }
                }
                else if (me.dropResult) {
                    me.handleMoveNodes(me.selectedNodes || [], me.dropResult.id, me.dropResult.type);
                }
                if (me.autoScrollTimer) {
                    window.clearInterval(me.autoScrollTimer);
                    me.autoScrollTimer = null;
                }
                me.resetDrag();
            });
            // ESC取消
            doc.on('keydown.drag_node', function (downEvent) {
                if (downEvent.keyCode === 27) {
                    me.dropResult = null;
                    dragged = true;
                    jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).trigger(environment.upEvent + '.drag_node');
                }
            });
        }
        // 只读状态，mousedown失效，通过click来控制drill行为
        me.paper.on('click.readonly_drill_node', '.bullet', function () {
            if (me.state.readonly || environment.isMobile) {
                var source = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
                me.sourceId = source.data('id');
                var delay = environment.isMobile ? 100 : 0;
                var $container = getNodeContainer(me.sourceId);
                $container.addClass('active');
                setTimeout(function () {
                    // 加一点延迟，否则会触发新渲染的内容的点击，导致让内容focus或者创建了新节点
                    me.drillNode(me.sourceId);
                }, delay);
            }
        });
        if (environment.isMobile) {
            // 阻止掉系统菜单，否则会和长按冲突
            me.paper.on('contextmenu.drag_node', '.bullet', function (e) {
                e.preventDefault();
                return false;
            });
            // 手机端的拖动
            me.paper.on(environment.downEvent + '.drag_node', '.bullet', function (downE) {
                var source = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
                me.sourceId = source.data('id');
                var rootNode = me.model.getRootNode();
                if (rootNode && rootNode.id === me.sourceId) {
                    return;
                }
                if (me.state.readonly) {
                    return;
                }
                // 手机端采用延迟启用拖动的方式，直接启用，可能在滑动整个页面的时候，触发了拖动
                var upEvent = environment.upEvent + '.drag_delay';
                var moveEvent = environment.moveEvent + '.drag_delay';
                var doc = jquery__WEBPACK_IMPORTED_MODULE_22___default()(document);
                var delayTimer = null;
                // 清除长按拖动前的等待
                var cancelDragWaiting = function () {
                    if (delayTimer) {
                        window.clearTimeout(delayTimer);
                        delayTimer = null;
                    }
                    source.off(upEvent);
                    doc.off(moveEvent);
                    doc.off(upEvent);
                };
                var downPosEvent = downE;
                if (downE.originalEvent.touches) {
                    // 移动端的拖动
                    downPosEvent = downE.originalEvent.touches[0];
                }
                // 启动长按的等待
                delayTimer = window.setTimeout(function () {
                    // 可以开始拖动
                    cancelDragWaiting();
                    // 做一个小动画提示
                    var animateCls = 'mobile-active';
                    getNodeContainer(me.sourceId).addClass(animateCls);
                    // 隐藏键盘
                    var focusNode = me.paper.find('div:focus, input:focus');
                    if (focusNode) {
                        focusNode.blur();
                    }
                    window.getSelection().removeAllRanges();
                    // 手机端立即设置点中效果
                    me.setDragStyle();
                    beginDrag(downE, source);
                }, 400);
                // 移动事件，判断是否要取消拖动长按的等待
                // 如果发生了一定偏移量的拖动，就取消拖动，并取消点击
                doc.on(moveEvent, function (moveE) {
                    var movePosEvent = moveE;
                    if (moveE.originalEvent.touches) {
                        // 移动端的拖动
                        movePosEvent = moveE.originalEvent.touches[0];
                    }
                    if (Math.abs(movePosEvent.pageX - downPosEvent.pageX) > 10
                        || Math.abs(movePosEvent.pageY - downPosEvent.pageY) > 10) {
                        cancelDragWaiting();
                    }
                });
                // 为了确保事件被卸载，在up的时候再执行一次
                doc.on(upEvent, function () {
                    me.clearDragStyle();
                    cancelDragWaiting();
                });
            });
        }
        else {
            // PC端的拖动
            // 圆点可以拖动
            me.paper.on(environment.downEvent + '.drag_node', '.bullet', function (downE) {
                var source = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
                me.sourceId = source.data('id');
                if (me.state.readonly) {
                    return;
                }
                beginDrag(downE, source);
            });
        }
    };
    /**
     * 点击钻取节点
     * @param id 节点ID
     */
    Dragger.prototype.drillNode = function (id) {
        this.engine.drillNode(id, false);
    };
    /**
     * 移动节点
     * @param nodes 选中的节点
     * @param targetId 目标节点ID
     * @param type prev | next
     */
    Dragger.prototype.handleMoveNodes = function (nodes, targetId, type) {
        this.engine.moveNodes(nodes, targetId, type);
    };
    /**
     * 让页面自动滚动
     * @param direction
     */
    Dragger.prototype.autoScroll = function (direction) {
        var _this = this;
        var containerHeight = this.viewport.scrollContainer.height();
        var paperHeight = this.viewport.paper.height();
        if (!this.autoScrollTimer) {
            this.autoScrollTimer = window.setInterval(function () {
                var curTop = _this.scroller.scrollTop() || 0;
                var nextTop = direction > 0 ? curTop + _this.autoScrollStep : curTop - _this.autoScrollStep;
                // 如果已经滚动到底部就不继续滚动了，这里是为了修复 iOS 下会无限往下滚动
                if ((nextTop + containerHeight / 2) > paperHeight) {
                    window.clearInterval(_this.autoScrollTimer);
                    return;
                }
                _this.scroller.scrollTop(nextTop);
            }, this.autoScrollSpeed);
        }
    };
    __decorate([
        Bind(),
        TeaLogger$1('toggle_attribute', function () {
            return {
                action: 'enter_item',
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: 'content',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], Dragger.prototype, "drillNode", null);
    __decorate([
        Bind(),
        TeaLogger$1('toggle_attribute', function () {
            return {
                action: 'move_item',
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: 'outline_toolbar',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], Dragger.prototype, "handleMoveNodes", null);
    return Dragger;
}());

/**
 * 是否正在复制
 */
var isCoping = false;
/**
 * 将字符串复制到剪贴板
 * @param str
 * @param successHandler 成功事件
 * @param errorHandler 错误事件
 */
function copy$2(str, successHandler, errorHandler) {
    // 正在复制则退出，避免循环调用
    if (isCoping) {
        return;
    }
    var copyResult = false;
    if (window.clipboardData) {
        // Internet Explorer
        window.clipboardData.setData('text', str);
        copyResult = true;
    }
    else {
        isCoping = true;
        var copyImg = jquery__WEBPACK_IMPORTED_MODULE_22___default()("<div id=\"mindnote-copy-container\" contenteditable=\"true\" style=\"position: fixed; left: -500; top: -100;\">" + str + "</div>").appendTo('body');
        var range = document.createRange();
        range.selectNodeContents(copyImg[0]);
        var selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
        try {
            copyResult = document.execCommand('copy');
        }
        catch (err) {
            copyResult = false;
        }
        window.getSelection().removeAllRanges();
        copyImg.remove();
        isCoping = false;
    }
    if (copyResult) {
        successHandler();
    }
    else {
        errorHandler();
    }
}
/**
 * 拼接要写入剪切板的复制图片的 html
 */
function getCopyImageHtml(img, urlWithHost) {
    var data = encodeURIComponent(JSON.stringify(img));
    // data-mindnote 属性标志代表内部复制
    return "<img src=\"" + urlWithHost + "\" data-mindnote=\"" + data + "\" style=\"width: " + img.w + "px\"/>";
}
/**
 * 检查剪切板的 html 是不是有图片信息
 */
function isCopyImageHtml(html) {
    var reg = /<img.*?src="(.*?)"/;
    return reg.test(html);
}
/**
 * 尝试从剪切板的 html 里获取内部数据
 */
function getDataFromCopyImageHtml(html) {
    // data-mindnote 属性标志代表内部复制
    var res = /<img.*?data-mindnote="(.*?)"/.exec(html);
    if (!res) {
        return null;
    }
    try {
        return JSON.parse(decodeURIComponent(res[1]));
    }
    catch (e) {
        return null;
    }
}
/**
 * ie 复制文档内图片时，就是一个 img 标签
 */
function isIECopyImage(text) {
    var reg = /^<img.*?data-mindnote="(.*?)"/;
    return reg.test(text);
}
/**
 * 从剪切板的 html 里获取图片 url
 */
function getUrlFromCopyImageHtml(html) {
    var res = /<img.*?src="(.*?)"/.exec(html);
    return res ? res[1] : '';
}

/**
 * 获取图片显示 url
 * @param prefix url 前缀
 * @param path path
 */
function getImageUrl(prefix, path) {
    var customUrl;
    // 有协议名，则直接使用该url
    if (/^[a-z]+?\:/i.test(path || '')) {
        customUrl = path;
        // 否则需拼接协议名
    }
    else {
        customUrl = "" + (prefix || '') + (path || '');
    }
    return customUrl;
    /**
     * 如果为 ios 且为 docsource 协议，则所有图片都使用 docsource 进行请求，以方便 ios 拦截
     * 注意：
     * 	此处已在 editor 混杂业务逻辑，并不建议，但为兼容 ios，此处添加成本较低。
     */
    // if (browser.ios && isDocsourceProtocol()) {
    // 	return customUrl.replace(/^https?/, 'docsource');
    // } else {
    // 	return customUrl;
    // }
}
/**
 * xhr 请求回来的文本数据转为 blob
 */
function textToBlob(text) {
    var len = text.length;
    var arrayBuffer = new ArrayBuffer(len);
    var view = new Uint8Array(arrayBuffer);
    for (var i = 0; i < len; i++) {
        view[i] = text.charCodeAt(i) & 0xff;
    }
    return new Blob([arrayBuffer]);
}
/**
 * 图片 url（外链）转为 blob
 */
function urlToBlob(url) {
    if (window.fetch) {
        // 优先使用 fetch 直接得到 blob
        return fetch(url, { credentials: 'include' }).then(function (res) { return res.blob(); });
    }
    else {
        // 请求为 text，再把 text 转为 blob
        return new Promise(function (resolve, reject) {
            jquery__WEBPACK_IMPORTED_MODULE_22___default.a.ajax({
                url: url,
                crossDomain: true,
                beforeSend: function (xhr) {
                    // 使用自定义 mime type 避免浏览器处理数据，得到原始数据
                    xhr.overrideMimeType('text/plain; charset=x-user-defined');
                },
                success: function (text) {
                    try {
                        resolve(textToBlob(text));
                    }
                    catch (e) {
                        reject(e);
                    }
                },
                error: function (e) {
                    reject(e);
                },
            });
        });
    }
}

/**
 * Created by morris on 2017/7/12.
 * 图片预览组件
 */
var ImagePreview = /** @class */ (function () {
    function ImagePreview(props) {
        var engine = props.engine, viewport = props.viewport, state = props.state, eventSource = props.eventSource;
        this.engine = engine;
        this.viewport = viewport;
        this.state = state;
        this.eventSource = eventSource;
    }
    /**
     * 初始化预览
     */
    ImagePreview.prototype.initPreview = function () {
        var eventSpace = this.state.getEditorState().eventSpace;
        var papers = this.viewport.paper;
        var me = this;
        // 最小宽度
        var minWidth = 50;
        var img;
        var clickSource = 'wrapper';
        var eventNameSpace = '.mindnote-preview-image';
        papers.on('mousedown' + eventNameSpace, '.image-wrapper', function () {
            clickSource = 'wrapper';
        });
        /**
         * 初始化图片预览
         */
        papers.on('click' + eventNameSpace, '.image-wrapper', function () {
            if (clickSource === 'resize') {
                // 用一个clickSource变量来控制用户点击的触发源，
                // 因为在拖动resize的时候，鼠标移动到wrapper上再up，会触发wrapper的click，引起preview图片
                return;
            }
            var imgWrapper = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            var target = imgWrapper.children('.attach-img');
            var imgItem = imgWrapper.parent();
            var isUploading = imgItem.hasClass('uploading');
            if (me.state.getEditorProps().env === MindNoteEnvironment.APP) {
                // APP调用engine，给外部发消息
                var nodeId = target.data('nodeid');
                var imageId = imgWrapper.parent().attr('fid');
                me.engine.previewImage(nodeId, imageId);
                return;
            }
            if (imgWrapper.hasClass('active') || target.hasClass('readonly')) {
                // 已经被选中，再次点击为查看大图
                if (!isUploading) {
                    // 上传中的图片，不能预览
                    var nodeId = target.data('nodeid');
                    var imageId = imgWrapper.parent().attr('fid');
                    me.engine.previewImage(nodeId, imageId);
                }
            }
            else {
                jquery__WEBPACK_IMPORTED_MODULE_22___default()('.image-wrapper.active').removeClass('active');
                imgWrapper.addClass('active');
                var win = jquery__WEBPACK_IMPORTED_MODULE_22___default()(window);
                win.off(eventNameSpace);
                win.on('keydown' + eventNameSpace + eventSpace, function (e) {
                    var ctrl = e[environment.metaKey];
                    if (e.keyCode === KeyCode.Backspace || e.keyCode === KeyCode.Delete) {
                        // delete | backspace
                        imgWrapper.find('.attach-remove').trigger('click');
                    }
                    else if (!isUploading && ctrl && e.keyCode === KeyCode.C) {
                        // ctrl c
                        imgWrapper.find('.attach-copy').trigger('click');
                    }
                    else if (!isUploading && ctrl && e.keyCode === KeyCode.X) {
                        // ctrl x
                        imgWrapper.find('.attach-copy').trigger('click');
                        imgWrapper.find('.attach-remove').trigger('click');
                    }
                });
            }
        });
        /**
         * 按下拖动按钮时 绑定全局的抬起事件 和 编辑区域的移动事件
         */
        papers.on('mousedown' + eventNameSpace, '.attach-resize', function () {
            img = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).parent().find('img');
            var nodeId = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).data('nodeid');
            var nodeIndex = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).parent().parent().index();
            // 禁止选中文字
            jquery__WEBPACK_IMPORTED_MODULE_22___default()('body').addClass('select-disable').on('selectstart', function () {
                return false;
            });
            jquery__WEBPACK_IMPORTED_MODULE_22___default()(window).on('mouseup' + eventNameSpace + eventSpace, function () {
                var imgWidth = img.width() || 0;
                me.engine.resizeImage(nodeId, nodeIndex, imgWidth);
                jquery__WEBPACK_IMPORTED_MODULE_22___default()(window).off('mouseup' + eventNameSpace).off('mousemove' + eventNameSpace);
                jquery__WEBPACK_IMPORTED_MODULE_22___default()('body').removeClass('select-disable').off('selectstart');
            });
            jquery__WEBPACK_IMPORTED_MODULE_22___default()(window).on('mousemove' + eventNameSpace + eventSpace, function (e) {
                var newW = Math.round(e.pageX - img.offset().left);
                if (newW <= minWidth) {
                    newW = minWidth;
                }
                img.width(newW);
            });
        });
        /**
         * 阻止resize的冒泡，否则会触发图片的预览
         */
        papers.on('mousedown.remove-img', '.attach-resize', function (e) {
            e.stopPropagation();
            clickSource = 'resize';
        });
        /**
         * 删除图片
         */
        papers.on('click.remove-img', '.attach-remove', function (clickEvent) {
            clickEvent.stopPropagation();
            var target = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            var nodeId = target.data('nodeid');
            var imgItem = target.parent().parent();
            if (imgItem.hasClass('uploading')) {
                // 删除上传中的图片
                var imageId = imgItem.attr('fid');
                me.engine.removeUploadingImage(nodeId, imageId);
            }
            else {
                var imageIndex = target.parent().parent().prevAll('div:not(.uploading)').length;
                me.engine.removeImage(nodeId, imageIndex);
            }
        });
        /**
         * 复制图片
         */
        papers.on('click.remove-img', '.attach-copy', function (clickEvent) {
            clickEvent.stopPropagation();
            var state = me.state.getEditorState();
            if (!state.copyEnabled) {
                me.eventSource.trigger(SourceEvent.COPY_DENIED);
                return;
            }
            var target = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            var nodeId = target.data('nodeid');
            var imageIndex = target.parent().parent().prevAll('div:not(.uploading)').length;
            var node = me.engine.getNode(nodeId);
            var imageObj = node.images[imageIndex];
            var urlWithHost = getImageUrl(me.state.getEditorProps().imageUrlPrefix, imageObj.uri || '');
            var str = getCopyImageHtml(imageObj, urlWithHost);
            var success = function () {
                // $.toast('复制成功，您可以到相应的主题下进行粘贴');
            };
            var error = function () {
                // $.toast('复制失败，无法访问您的剪贴板');
            };
            copy$2(str, success, error);
        });
        /**
         * 阻止冒泡
         */
        papers.on('mousedown' + eventNameSpace, '.image-wrapper', function (clickEvent) {
            clickEvent.stopPropagation();
        });
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('body').on('mousedown' + eventNameSpace + eventSpace, function () {
            me.viewport.paper.find('.image-wrapper.active').removeClass('active');
            var win = jquery__WEBPACK_IMPORTED_MODULE_22___default()(window);
            win.off(eventNameSpace);
        });
    };
    return ImagePreview;
}());

/**
 * tag 左右的间隔符
 */
var TAG_GAP = '[(),\\.!?\';:（），。！？“”"；：\\/\\[\\]\\u200B]';
/**
 * 日文
 */
var TAG_JA = '\\u3000-\\u303F\\u3040-\\u309F\\u30A0-\\u30FF\\uFF00-\\uFFEF\\u4E00-\\u9FAF\\u2605-\\u2606\\u2190-\\u2195';
/**
 * 韩文
 */
var TAG_KO = '\\u3130-\\u318F\\uAC00-\\uD7AF';
/**
 * 中文
 */
var TAG_ZH = '\\u4e00-\\u9fa5';
/**
 * tag 正则
 */
var TAG_REG = new RegExp("(^|\\s|" + TAG_GAP + ")(#[a-z0-9" + TAG_JA + TAG_KO + TAG_ZH + "][a-z0-9" + TAG_JA + TAG_KO + TAG_ZH + "_-]*)(?=$|\\s|" + TAG_GAP + ")", 'ig');
/**
 * url 协议
 */
var URL_SCHEMA = '(https?:\\/\\/)?';
/**
 * ip
 */
var URL_IP = '(?:(?:[0-9]{1,3}\\.){3}[0-9]{1,3})';
/**
 * 次级域名
 */
var URL_SUB_DOMAIN = '(?:(?:[0-9a-z][0-9a-z-]{0,63})?[0-9a-z]\\.){1,127}';
/**
 * 顶级域名后缀列表
 * @see https://data.iana.org/TLD/tlds-alpha-by-domain.txt
 * @description $('pre').innerText.split('\n').filter(s => s.match(/^[a-z]+$/i)).map(s => s.toLowerCase()).join('|')
 */
var URL_TOP_DOMAIN_LIST = 'aaa|aarp|abarth|abb|abbott|abbvie|abc|able|abogado|abudhabi|ac|academy|accenture|accountant|accountants|aco|actor|ad|adac|ads|adult|ae|aeg|aero|aetna|af|afamilycompany|afl|africa|ag|agakhan|agency|ai|aig|aigo|airbus|airforce|airtel|akdn|al|alfaromeo|alibaba|alipay|allfinanz|allstate|ally|alsace|alstom|am|americanexpress|americanfamily|amex|amfam|amica|amsterdam|analytics|android|anquan|anz|ao|aol|apartments|app|apple|aq|aquarelle|ar|arab|aramco|archi|army|arpa|art|arte|as|asda|asia|associates|at|athleta|attorney|au|auction|audi|audible|audio|auspost|author|auto|autos|avianca|aw|aws|ax|axa|az|azure|ba|baby|baidu|banamex|bananarepublic|band|bank|bar|barcelona|barclaycard|barclays|barefoot|bargains|baseball|basketball|bauhaus|bayern|bb|bbc|bbt|bbva|bcg|bcn|bd|be|beats|beauty|beer|bentley|berlin|best|bestbuy|bet|bf|bg|bh|bharti|bi|bible|bid|bike|bing|bingo|bio|biz|bj|black|blackfriday|blockbuster|blog|bloomberg|blue|bm|bms|bmw|bn|bnl|bnpparibas|bo|boats|boehringer|bofa|bom|bond|boo|book|booking|bosch|bostik|boston|bot|boutique|box|br|bradesco|bridgestone|broadway|broker|brother|brussels|bs|bt|budapest|bugatti|build|builders|business|buy|buzz|bv|bw|by|bz|bzh|ca|cab|cafe|cal|call|calvinklein|cam|camera|camp|cancerresearch|canon|capetown|capital|capitalone|car|caravan|cards|care|career|careers|cars|cartier|casa|case|caseih|cash|casino|cat|catering|catholic|cba|cbn|cbre|cbs|cc|cd|ceb|center|ceo|cern|cf|cfa|cfd|cg|ch|chanel|channel|charity|chase|chat|cheap|chintai|christmas|chrome|chrysler|church|ci|cipriani|circle|cisco|citadel|citi|citic|city|cityeats|ck|cl|claims|cleaning|click|clinic|clinique|clothing|cloud|club|clubmed|cm|cn|co|coach|codes|coffee|college|cologne|com|comcast|commbank|community|company|compare|computer|comsec|condos|construction|consulting|contact|contractors|cooking|cookingchannel|cool|coop|corsica|country|coupon|coupons|courses|cr|credit|creditcard|creditunion|cricket|crown|crs|cruise|cruises|csc|cu|cuisinella|cv|cw|cx|cy|cymru|cyou|cz|dabur|dad|dance|data|date|dating|datsun|day|dclk|dds|de|deal|dealer|deals|degree|delivery|dell|deloitte|delta|democrat|dental|dentist|desi|design|dev|dhl|diamonds|diet|digital|direct|directory|discount|discover|dish|diy|dj|dk|dm|dnp|do|docs|doctor|dodge|dog|domains|dot|download|drive|dtv|dubai|duck|dunlop|duns|dupont|durban|dvag|dvr|dz|earth|eat|ec|eco|edeka|edu|education|ee|eg|email|emerck|energy|engineer|engineering|enterprises|epson|equipment|er|ericsson|erni|es|esq|estate|esurance|et|etisalat|eu|eurovision|eus|events|everbank|exchange|expert|exposed|express|extraspace|fage|fail|fairwinds|faith|family|fan|fans|farm|farmers|fashion|fast|fedex|feedback|ferrari|ferrero|fi|fiat|fidelity|fido|film|final|finance|financial|fire|firestone|firmdale|fish|fishing|fit|fitness|fj|fk|flickr|flights|flir|florist|flowers|fly|fm|fo|foo|food|foodnetwork|football|ford|forex|forsale|forum|foundation|fox|fr|free|fresenius|frl|frogans|frontdoor|frontier|ftr|fujitsu|fujixerox|fun|fund|furniture|futbol|fyi|ga|gal|gallery|gallo|gallup|game|games|gap|garden|gb|gbiz|gd|gdn|ge|gea|gent|genting|george|gf|gg|ggee|gh|gi|gift|gifts|gives|giving|gl|glade|glass|gle|global|globo|gm|gmail|gmbh|gmo|gmx|gn|godaddy|gold|goldpoint|golf|goo|goodyear|goog|google|gop|got|gov|gp|gq|gr|grainger|graphics|gratis|green|gripe|grocery|group|gs|gt|gu|guardian|gucci|guge|guide|guitars|guru|gw|gy|hair|hamburg|hangout|haus|hbo|hdfc|hdfcbank|health|healthcare|help|helsinki|here|hermes|hgtv|hiphop|hisamitsu|hitachi|hiv|hk|hkt|hm|hn|hockey|holdings|holiday|homedepot|homegoods|homes|homesense|honda|honeywell|horse|hospital|host|hosting|hot|hoteles|hotels|hotmail|house|how|hr|hsbc|ht|hu|hughes|hyatt|hyundai|ibm|icbc|ice|icu|id|ie|ieee|ifm|ikano|il|im|imamat|imdb|immo|immobilien|in|inc|industries|infiniti|info|ing|ink|institute|insurance|insure|int|intel|international|intuit|investments|io|ipiranga|iq|ir|irish|is|iselect|ismaili|ist|istanbul|it|itau|itv|iveco|jaguar|java|jcb|jcp|je|jeep|jetzt|jewelry|jio|jll|jm|jmp|jnj|jo|jobs|joburg|jot|joy|jp|jpmorgan|jprs|juegos|juniper|kaufen|kddi|ke|kerryhotels|kerrylogistics|kerryproperties|kfh|kg|kh|ki|kia|kim|kinder|kindle|kitchen|kiwi|km|kn|koeln|komatsu|kosher|kp|kpmg|kpn|kr|krd|kred|kuokgroup|kw|ky|kyoto|kz|la|lacaixa|ladbrokes|lamborghini|lamer|lancaster|lancia|lancome|land|landrover|lanxess|lasalle|lat|latino|latrobe|law|lawyer|lb|lc|lds|lease|leclerc|lefrak|legal|lego|lexus|lgbt|li|liaison|lidl|life|lifeinsurance|lifestyle|lighting|like|lilly|limited|limo|lincoln|linde|link|lipsy|live|living|lixil|lk|llc|loan|loans|locker|locus|loft|lol|london|lotte|lotto|love|lpl|lplfinancial|lr|ls|lt|ltd|ltda|lu|lundbeck|lupin|luxe|luxury|lv|ly|ma|macys|madrid|maif|maison|makeup|man|management|mango|map|market|marketing|markets|marriott|marshalls|maserati|mattel|mba|mc|mckinsey|md|me|med|media|meet|melbourne|meme|memorial|men|menu|merckmsd|metlife|mg|mh|miami|microsoft|mil|mini|mint|mit|mitsubishi|mk|ml|mlb|mls|mm|mma|mn|mo|mobi|mobile|mobily|moda|moe|moi|mom|monash|money|monster|mopar|mormon|mortgage|moscow|moto|motorcycles|mov|movie|movistar|mp|mq|mr|ms|msd|mt|mtn|mtr|mu|museum|mutual|mv|mw|mx|my|mz|na|nab|nadex|nagoya|name|nationwide|natura|navy|nba|nc|ne|nec|net|netbank|netflix|network|neustar|new|newholland|news|next|nextdirect|nexus|nf|nfl|ng|ngo|nhk|ni|nico|nike|nikon|ninja|nissan|nissay|nl|no|nokia|northwesternmutual|norton|now|nowruz|nowtv|np|nr|nra|nrw|ntt|nu|nyc|nz|obi|observer|off|office|okinawa|olayan|olayangroup|oldnavy|ollo|om|omega|one|ong|onl|online|onyourside|ooo|open|oracle|orange|org|organic|origins|osaka|otsuka|ott|ovh|pa|page|panasonic|paris|pars|partners|parts|party|passagens|pay|pccw|pe|pet|pf|pfizer|pg|ph|pharmacy|phd|philips|phone|photo|photography|photos|physio|piaget|pics|pictet|pictures|pid|pin|ping|pink|pioneer|pizza|pk|pl|place|play|playstation|plumbing|plus|pm|pn|pnc|pohl|poker|politie|porn|post|pr|pramerica|praxi|press|prime|pro|prod|productions|prof|progressive|promo|properties|property|protection|pru|prudential|ps|pt|pub|pw|pwc|py|qa|qpon|quebec|quest|qvc|racing|radio|raid|re|read|realestate|realtor|realty|recipes|red|redstone|redumbrella|rehab|reise|reisen|reit|reliance|ren|rent|rentals|repair|report|republican|rest|restaurant|review|reviews|rexroth|rich|richardli|ricoh|rightathome|ril|rio|rip|rmit|ro|rocher|rocks|rodeo|rogers|room|rs|rsvp|ru|rugby|ruhr|run|rw|rwe|ryukyu|sa|saarland|safe|safety|sakura|sale|salon|samsclub|samsung|sandvik|sandvikcoromant|sanofi|sap|sarl|sas|save|saxo|sb|sbi|sbs|sc|sca|scb|schaeffler|schmidt|scholarships|school|schule|schwarz|science|scjohnson|scor|scot|sd|se|search|seat|secure|security|seek|select|sener|services|ses|seven|sew|sex|sexy|sfr|sg|sh|shangrila|sharp|shaw|shell|shia|shiksha|shoes|shop|shopping|shouji|show|showtime|shriram|si|silk|sina|singles|site|sj|sk|ski|skin|sky|skype|sl|sling|sm|smart|smile|sn|sncf|so|soccer|social|softbank|software|sohu|solar|solutions|song|sony|soy|space|sport|spot|spreadbetting|sr|srl|srt|ss|st|stada|staples|star|starhub|statebank|statefarm|stc|stcgroup|stockholm|storage|store|stream|studio|study|style|su|sucks|supplies|supply|support|surf|surgery|suzuki|sv|swatch|swiftcover|swiss|sx|sy|sydney|symantec|systems|sz|tab|taipei|talk|taobao|target|tatamotors|tatar|tattoo|tax|taxi|tc|tci|td|tdk|team|tech|technology|tel|telefonica|temasek|tennis|teva|tf|tg|th|thd|theater|theatre|tiaa|tickets|tienda|tiffany|tips|tires|tirol|tj|tjmaxx|tjx|tk|tkmaxx|tl|tm|tmall|tn|to|today|tokyo|tools|top|toray|toshiba|total|tours|town|toyota|toys|tr|trade|trading|training|travel|travelchannel|travelers|travelersinsurance|trust|trv|tt|tube|tui|tunes|tushu|tv|tvs|tw|tz|ua|ubank|ubs|uconnect|ug|uk|unicom|university|uno|uol|ups|us|uy|uz|va|vacations|vana|vanguard|vc|ve|vegas|ventures|verisign|versicherung|vet|vg|vi|viajes|video|vig|viking|villas|vin|vip|virgin|visa|vision|vistaprint|viva|vivo|vlaanderen|vn|vodka|volkswagen|volvo|vote|voting|voto|voyage|vu|vuelos|wales|walmart|walter|wang|wanggou|warman|watch|watches|weather|weatherchannel|webcam|weber|website|wed|wedding|weibo|weir|wf|whoswho|wien|wiki|williamhill|win|windows|wine|winners|wme|wolterskluwer|woodside|work|works|world|wow|ws|wtc|wtf|xbox|xerox|xfinity|xihuan|xin|xxx|xyz|yachts|yahoo|yamaxun|yandex|ye|yodobashi|yoga|yokohama|you|youtube|yt|yun|za|zappos|zara|zero|zip|zm|zone|zuerich|zw';
/**
 * 顶级域名
 */
var URL_TOP_DOMAIN = "(?:" + URL_TOP_DOMAIN_LIST + ")(?![0-9a-z_\\.])";
/**
 * port
 */
var URL_PORT = '(?::[0-9]{1,4})?';
/**
 * path query hash
 */
var URL_PATH_QUERY_HASH = '(?:\\/[0-9a-z_!~*()\\[\\]\'\\\\/.;?:@&=+$,%#-]*)?';
/**
 * url 正则
 */
var URL_REG = new RegExp(URL_SCHEMA + "(?:" + URL_IP + "|(?:" + URL_SUB_DOMAIN + URL_TOP_DOMAIN + ")|(?:localhost))" + URL_PORT + URL_PATH_QUERY_HASH, 'ig');
/**
 * 解析文本里面的 url 和 tag
 * @param segments node text
 */
function parseText(segments) {
    var result = Object(lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"])(segments);
    // 先解析 url
    result = parseUrl(result);
    // 再解析 tag
    result = parseTag(result);
    return result;
}
/**
 * 解析 url
 * @param segments node text
 */
function parseUrl(segments) {
    var _a = getTextAndCharIndexMap(segments, false), text = _a.text, map = _a.map;
    parseByReg(URL_REG, text, function (start, res) {
        // url 后文字，分裂一次，取右半部分
        if (res === null) {
            splitSegmentText(map, start, text, false, false);
            return;
        }
        // url 前的文字，可能分裂两次，依次取右部分和左部分
        splitSegmentText(map, start, text, false, false);
        splitSegmentText(map, res.index - 1, text, true, false);
        // url，继承 style
        resetMapSegment(map, __assign({}, map[res.index], { type: TextType.Link, 
            // res[0] 为匹配到的整个 url
            text: res[0], 
            // res[1] 为协议头，没协议头就补 http://
            link: res[1] ? res[0] : "http://" + res[0] }), res.index, res.index + res[0].length);
    });
    return getSegmentsByMap(map, text);
}
/**
 * 解析 tag
 * @param segments node text
 */
function parseTag(segments) {
    var _a = getTextAndCharIndexMap(segments, true), text = _a.text, map = _a.map;
    parseByReg(TAG_REG, text, function (start, res) {
        // tag 后文字，分裂一次，取右半部分
        if (res === null) {
            splitSegmentText(map, start, text, false, true);
            return;
        }
        // res[1] 为 tag 前的间隔字符，可能为空
        var index = res.index + res[1].length;
        // tag 前的文字，可能分裂两次，依次取右部分和左部分
        splitSegmentText(map, start, text, false, true);
        splitSegmentText(map, index - 1, text, true, true);
        // tag，继承 style
        resetMapSegment(map, __assign({}, map[index], { type: TextType.Tag, 
            // res[2] 为匹配到的 tag
            text: res[2] }), index, index + res[2].length);
    });
    return getSegmentsByMap(map, text);
}
/**
 * 用正则解析文本
 */
function parseByReg(reg, text, handler) {
    var length = text.length;
    // 重置正则的 index
    reg.lastIndex = 0;
    // match
    var start = reg.lastIndex;
    var res = reg.exec(text);
    while (start < length && res) {
        // 处理匹配到的 text
        handler(start, res);
        // 更新条件
        start = reg.lastIndex;
        res = reg.exec(text);
    }
    // 处理未匹配的 text
    handler(start, null);
}
/**
 * 获取用于匹配的纯文本和字符 index 与 segment index 的映射 map
 */
function getTextAndCharIndexMap(segments, isForMatchTag) {
    var now = 0;
    var text = '';
    var map = {};
    Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(segments, function (segment) {
        // 只保留样式
        var textSegment;
        if (segment.type === TextType.Styled
            || segment.type === TextType.Mention
            || (isForMatchTag && segment.type === TextType.Link)) {
            textSegment = segment;
        }
        else {
            textSegment = {
                type: TextType.Styled,
                text: segment.text,
                style: segment.style || {},
            };
        }
        // 特殊处理
        var length = 0;
        if (segment.type === TextType.Mention || (isForMatchTag && segment.type === TextType.Link)) {
            // mention 和 link (匹配 tag 时) 不参与匹配，特殊处理
            length = 1;
            text += ' ';
        }
        else {
            length = segment.text.length;
            text += segment.text;
        }
        // map
        var indexRange = Object(lodash_es__WEBPACK_IMPORTED_MODULE_14__["default"])(now, now + length);
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(indexRange, function (charIndex) {
            map[charIndex] = textSegment;
        });
        now += length;
    });
    return {
        map: map,
        text: text,
    };
}
/**
 * 分裂文本块
 */
function splitSegmentText(map, index, text, left, isForMatchTag) {
    var segment = map[index];
    if (!segment || segment.type === TextType.Mention || (isForMatchTag && segment.type === TextType.Link)) {
        return;
    }
    var startOrEnd = index;
    while (map[startOrEnd] === segment) {
        if (left) {
            startOrEnd -= 1;
        }
        else {
            startOrEnd += 1;
        }
    }
    var start = left ? startOrEnd + 1 : index;
    var end = left ? index + 1 : startOrEnd;
    resetMapSegment(map, __assign({}, segment, { text: text.slice(start, end) }), start, end);
}
/**
 * 更新 map
 */
function resetMapSegment(map, segment, start, end) {
    for (var i = start; i < end; i++) {
        map[i] = segment;
    }
}
/**
 * 从 map 拼出 segments
 */
function getSegmentsByMap(map, text) {
    var length = text.length;
    var result = [];
    for (var i = 0; i < length; i++) {
        if (map[i] !== result[result.length - 1]) {
            result.push(map[i]);
        }
    }
    return result;
}

/**
 * 文本处理类
 */
var ContentText = /** @class */ (function () {
    /**
     * 文本处理类
     * @param nodeText node text
     * @param state state
     * @param needParse 是否需要重新解析 url 和 tag
     */
    function ContentText(nodeText, state, needParse) {
        if (needParse === void 0) { needParse = false; }
        /**
         * 文本 index 与文本块 index 的映射 map
         */
        this.positionMap = {};
        /**
         * 节点纯文本
         */
        this.plainText = '';
        if (!nodeText) {
            this.nodeText = [];
        }
        else if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"])(nodeText)) {
            this.nodeText = Object(lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"])(nodeText);
        }
        else if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_15__["default"])(nodeText)) {
            this.nodeText = htmlToText(nodeText);
        }
        else if ('jquery' in nodeText) {
            this.nodeText = htmlToText(nodeText.html());
        }
        else {
            this.nodeText = [];
        }
        if (needParse) {
            this.nodeText = parseText(this.nodeText);
        }
        this.state = state;
        this.locale = state.getEditorProps().locale;
        this.init();
    }
    /**
     * 初始化
     */
    ContentText.prototype.init = function () {
        this.positionMap = this.initPositionMap();
        this.plainText = nodeTextToPlainText(this.nodeText, this.locale, false);
    };
    /**
     * 根据整体文本内的 index 获取分块文本内的 index
     */
    ContentText.prototype.getSegmentTextIndex = function (charIndex) {
        var segmentIndex = this.positionMap[charIndex];
        if (segmentIndex === undefined) {
            return -1;
        }
        var now = charIndex;
        while (now > 0 && this.positionMap[now - 1] === segmentIndex) {
            now -= 1;
        }
        return charIndex - now;
    };
    /**
     * 初始化位置 map
     */
    ContentText.prototype.initPositionMap = function () {
        var _this = this;
        var res = {};
        var now = 0;
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(this.nodeText, function (segment, index) {
            var length = textSegmentToPlainText(segment, _this.locale).length;
            var indexRange = Object(lodash_es__WEBPACK_IMPORTED_MODULE_14__["default"])(now, now + length);
            Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(indexRange, function (charIndex) {
                res[charIndex] = index;
            });
            now += length;
        });
        return res;
    };
    /**
     * position 是否合法
     */
    ContentText.prototype.isPositionValid = function (position) {
        var length = this.getTextLength();
        return position.start <= length && position.start <= position.end;
    };
    /**
     * 文本块是被某个区间包含
     */
    ContentText.prototype.isSegmentAllInPosition = function (segmentIndex, textStart, textEnd) {
        var startIndex = this.positionMap[textStart - 1];
        var endIndex = this.positionMap[textEnd + 1];
        return (startIndex === undefined || startIndex !== segmentIndex)
            && (endIndex === undefined || endIndex !== segmentIndex);
    };
    /**
     * 设置 style
     */
    ContentText.prototype.toggleStyle = function (style, key, value) {
        var newStyle = style ? __assign({}, style) : {};
        if (value) {
            newStyle[key] = true;
        }
        else {
            delete newStyle[key];
        }
        return newStyle;
    };
    /**
     * 获取纯文本长度
     */
    ContentText.prototype.getTextLength = function () {
        return this.plainText.length;
    };
    /**
     * 获取纯文本，未转义
     */
    ContentText.prototype.getPlainText = function () {
        return this.plainText;
    };
    /**
     * 获取 node text
     */
    ContentText.prototype.getNodeText = function () {
        return this.nodeText;
    };
    /**
     * 获取内容html
     */
    ContentText.prototype.getContentHtml = function () {
        return textToHtml(this.nodeText, this.locale);
    };
    /**
     * 是否处于某个样式 flag 中
     * @param flagName
     * @param position
     */
    ContentText.prototype.inTextFormatFlag = function (flagName, position) {
        if (!this.isPositionValid(position) || this.getTextLength() === 0) {
            return false;
        }
        var start = position.start, end = position.end;
        if (start === end) {
            if (end === this.getTextLength()) {
                start -= 1;
            }
            else {
                end += 1;
            }
        }
        // 选中的字符里，只要有一个字符不是这种样式，就返回 false
        for (var i = start; i < end; i++) {
            var index = this.positionMap[i];
            var segment = this.nodeText[index];
            if (!Object(lodash_es__WEBPACK_IMPORTED_MODULE_7__["default"])(segment, ['style', flagName])) {
                return false;
            }
        }
        return true;
    };
    /**
     * 切换样式标识
     * @param flagName
     * @param position
     */
    ContentText.prototype.toggleTextFormatFlag = function (flagName, position) {
        var _a;
        if (!this.isPositionValid(position) || this.getTextLength() === 0) {
            return;
        }
        // 如果之前就是这个样式，就是关闭，否则是打开
        var newFlagOn = !this.inTextFormatFlag(flagName, position);
        var lastIndex = -1;
        var start = position.start;
        var end = position.end;
        // 光标没多选就是整个节点设置样式
        if (position.start === position.end) {
            start = 0;
            end = this.getTextLength();
        }
        for (var i = start; i < end; i++) {
            // 如果文本块已经设置过样式，跳过
            var index = this.positionMap[i];
            if (lastIndex === index) {
                continue;
            }
            lastIndex = index;
            var segment = this.nodeText[index];
            var path = ['style', flagName];
            var oldFlagOn = !!Object(lodash_es__WEBPACK_IMPORTED_MODULE_7__["default"])(segment, path);
            // 新旧样式相同，不动
            if (newFlagOn === oldFlagOn) {
                continue;
            }
            // 如果文本块没有完全包含在选区中，分裂
            // 超链接、tag、mention 暂时不支持分裂，整块设置样式即可
            if (segment.type === TextType.Styled && !this.isSegmentAllInPosition(index, start, end - 1)) {
                var segTextIndex = this.getSegmentTextIndex(i === start ? i : end);
                var oldStyle = segment.style || {};
                var newStyle = this.toggleStyle(oldStyle, flagName, newFlagOn);
                var splited = void 0;
                if (this.positionMap[start] === this.positionMap[end - 1]) {
                    // 开始与结束在同一个块中，分裂成三块
                    splited = [
                        {
                            type: TextType.Styled,
                            style: oldStyle,
                            text: segment.text.slice(0, segTextIndex),
                        },
                        {
                            type: TextType.Styled,
                            style: newStyle,
                            text: segment.text.slice(segTextIndex, segTextIndex + (end - start)),
                        },
                        {
                            type: TextType.Styled,
                            style: oldStyle,
                            text: segment.text.slice(segTextIndex + (end - start)),
                        },
                    ];
                }
                else {
                    // 开始与结束不在同一块，开头/结尾各分裂成两块
                    splited = [
                        {
                            type: TextType.Styled,
                            style: i === start ? oldStyle : newStyle,
                            text: segment.text.slice(0, segTextIndex),
                        },
                        {
                            type: TextType.Styled,
                            style: i === start ? newStyle : oldStyle,
                            text: segment.text.slice(segTextIndex),
                        }
                    ];
                }
                (_a = this.nodeText).splice.apply(_a, [index, 1].concat(splited));
                this.positionMap = this.initPositionMap();
                lastIndex += splited.length - 1;
            }
            else {
                segment.style = this.toggleStyle(segment.style, flagName, newFlagOn);
            }
        }
    };
    /**
     * 以一个区间分隔内容
     * @param start 区间的开始索引
     * @param end 区间的结束索引
     */
    ContentText.prototype.split = function (start, end) {
        if (!this.isPositionValid({ start: start, end: end })) {
            return [
                new ContentText([], this.state),
                new ContentText([], this.state),
            ];
        }
        // 开始光标位置比字符 index 大一
        start -= 1;
        var length = this.getTextLength();
        var startIndex = this.positionMap[start];
        var endIndex = this.positionMap[end];
        var startSegments = start > 0 ? this.nodeText.slice(0, startIndex) : [];
        var endSegments = end < length - 1 ? this.nodeText.slice(endIndex + 1) : [];
        // 左半部分
        // mention 不支持分裂，正常来说选区不应该出现在 mention 中间
        // 如果出现这种情况，mention 分给左半部分
        var segment = this.nodeText[startIndex];
        if (segment) {
            if (segment.type !== TextType.Mention) {
                startSegments.push({
                    type: TextType.Styled,
                    style: segment.style || {},
                    text: segment.text.slice(0, this.getSegmentTextIndex(start) + 1),
                });
            }
            else {
                startSegments.push(segment);
            }
        }
        // 右半部分
        segment = this.nodeText[endIndex];
        if (segment) {
            if (segment.type !== TextType.Mention) {
                endSegments.unshift({
                    type: TextType.Styled,
                    style: segment.style || {},
                    text: segment.text.slice(this.getSegmentTextIndex(end)),
                });
            }
            else if (startIndex !== endIndex) {
                endSegments.unshift(segment);
            }
        }
        return [
            new ContentText(startSegments, this.state, true),
            new ContentText(endSegments, this.state, true),
        ];
    };
    /**
     * 合并多个内容
     */
    ContentText.prototype.merge = function (contentTexts) {
        var nodeText = this.nodeText;
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(contentTexts, function (text) {
            nodeText = nodeText.concat(text.getNodeText());
        });
        return new ContentText(nodeText, this.state, true);
    };
    return ContentText;
}());

var REACT_HOLDER_IDEN = '__REACT_HOLDER__';
var ReactHolder = /** @class */ (function () {
    function ReactHolder(props) {
        this.container = document.createElement('div');
        this.state = {};
        this.props = props || {};
        this.container[REACT_HOLDER_IDEN] = this;
    }
    ReactHolder.getHolder = function (dom) {
        if (!dom) {
            return null;
        }
        var holder = dom[REACT_HOLDER_IDEN];
        if (holder instanceof ReactHolder) {
            return holder;
        }
        return null;
    };
    ReactHolder.prototype.mount = function () {
        Object(react_dom__WEBPACK_IMPORTED_MODULE_29__["render"])(this.render(), this.container);
        return this;
    };
    /**
     * 挂载进某一个节点下面
     * @param target 目标节点
     */
    ReactHolder.prototype.mountTo = function (target) {
        jquery__WEBPACK_IMPORTED_MODULE_22___default()(this.container).appendTo(target);
        this.mount();
        return this;
    };
    /**
     * 获取 DOM 节点
     */
    ReactHolder.prototype.getContainer = function () {
        return this.container;
    };
    /**
     * 获取组件参数
     */
    ReactHolder.prototype.getProps = function () {
        return this.props;
    };
    /**
     * 更新组件参数
     * @param props 组件参数
     */
    ReactHolder.prototype.update = function (props) {
        this.props = __assign({}, this.props, props);
        this.mount();
    };
    /**
     * 更新组件状态
     * @param state 组件状态
     */
    ReactHolder.prototype.setState = function (state) {
        this.state = __assign({}, this.state, state);
        this.mount();
    };
    /**
     * 卸载组件
     */
    ReactHolder.prototype.destroy = function () {
        Object(react_dom__WEBPACK_IMPORTED_MODULE_29__["unmountComponentAtNode"])(this.container);
        jquery__WEBPACK_IMPORTED_MODULE_22___default()(this.container).remove();
        if (this.container[REACT_HOLDER_IDEN] === this) {
            delete this.container[REACT_HOLDER_IDEN];
        }
    };
    return ReactHolder;
}());

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _objectWithoutProperties(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}
var H1Svg = (function (_ref) {
  var _ref$styles = _ref.styles,
      props = _objectWithoutProperties(_ref, ["styles"]);

  return react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("svg", _extends({
    xmlns: "http://www.w3.org/2000/svg",
    width: "40",
    height: "40",
    viewBox: "0 0 40 40"
  }, props), react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("path", {
    d: "M0 0h40v40H0z"
  }), react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("path", {
    d: "M30.1 30.553v-8.776h-.05l-1.66 1.518a.4.4 0 0 1-.67-.296v-1.385a.8.8 0 0 1 .255-.586l1.887-1.755a.8.8 0 0 1 .545-.214h1.463a.8.8 0 0 1 .8.8v10.694a.8.8 0 0 1-.8.8h-.97a.8.8 0 0 1-.8-.8zm-7.322.5a.5.5 0 0 0 .5-.5V9.8a.5.5 0 0 0-.5-.5h-1.9a.5.5 0 0 0-.5.5v8.95H9.2V9.8a.5.5 0 0 0-.5-.5H6.8a.5.5 0 0 0-.5.5v20.753a.5.5 0 0 0 .5.5h1.9a.5.5 0 0 0 .5-.5v-9.399h11.178v9.399a.5.5 0 0 0 .5.5h1.9z",
    fill: "currentColor",
    fillRule: "nonzero"
  })));
});

var _extends$1 = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _objectWithoutProperties$1(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}
var H2Svg = (function (_ref) {
  var _ref$styles = _ref.styles,
      props = _objectWithoutProperties$1(_ref, ["styles"]);

  return react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("svg", _extends$1({
    xmlns: "http://www.w3.org/2000/svg",
    width: "40",
    height: "40",
    viewBox: "0 0 40 40"
  }, props), react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("path", {
    d: "M0 0h40v40H0z"
  }), react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("path", {
    d: "M24.769 23.188c.326-1.791 1.914-2.983 4.072-2.983 2.396 0 3.978 1.406 3.978 3.281 0 1.383-.675 2.235-2.567 4.055l-2.35 2.266v.047h4.272a.8.8 0 0 1 .8.8v.275a.8.8 0 0 1-.8.8h-6.535a.8.8 0 0 1-.8-.8v-.475a.8.8 0 0 1 .248-.58l3.715-3.544c1.419-1.375 1.737-1.914 1.737-2.695 0-.906-.69-1.594-1.698-1.594-.936 0-1.682.532-1.898 1.344-.067.25 0 .5-.407.5h-1.342c-.507 0-.507-.25-.425-.697zm-3.433 8.341a.6.6 0 0 0 .6-.6V12.8a.6.6 0 0 0-.6-.6h-1.44a.6.6 0 0 0-.6.6v7.74H9.84V12.8a.6.6 0 0 0-.6-.6H7.8a.6.6 0 0 0-.6.6v18.129a.6.6 0 0 0 .6.6h1.44a.6.6 0 0 0 .6-.6v-8.137h9.456v8.137a.6.6 0 0 0 .6.6h1.44z",
    fill: "currentColor",
    fillRule: "nonzero"
  })));
});

var _extends$2 = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _objectWithoutProperties$2(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}
var H3Svg = (function (_ref) {
  var _ref$styles = _ref.styles,
      props = _objectWithoutProperties$2(_ref, ["styles"]);

  return react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("svg", _extends$2({
    xmlns: "http://www.w3.org/2000/svg",
    width: "40",
    height: "40",
    viewBox: "0 0 40 40"
  }, props), react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("path", {
    d: "M0 0h40v40H0z"
  }), react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("path", {
    d: "M25.593 26.633v-.684c0-.214.173-.388.388-.388h.707c1.028 0 1.695-.557 1.695-1.358 0-.802-.552-1.311-1.531-1.311-.843 0-1.463.392-1.648 1.055-.008.028-.008.31-.276.31h-1.312c-.242 0-.36-.054-.311-.356.26-1.588 1.631-2.585 3.547-2.585 2.075 0 3.477 1.026 3.477 2.595 0 1.25-.892 2.057-2.049 2.295v.04c1.457.137 2.41 1 2.41 2.344 0 1.78-1.545 2.961-3.825 2.961-2.107 0-3.576-1.08-3.793-2.73-.03-.231 0-.265.332-.265h1.324c.2 0 .242 0 .34.306.203.63.86 1.039 1.797 1.039 1.028 0 1.735-.57 1.735-1.4.007-.95-.694-1.48-1.885-1.48h-.734a.388.388 0 0 1-.388-.388zm-5.885 4.601a.676.676 0 0 0 .676-.676V15.776a.676.676 0 0 0-.676-.676h-.988a.676.676 0 0 0-.676.676v6.129l-.1.1H10.54l-.1-.1v-6.129a.676.676 0 0 0-.676-.676h-.988a.676.676 0 0 0-.676.676v14.782c0 .373.303.676.676.676h.988a.676.676 0 0 0 .676-.676V24.1l.1-.1h7.404l.1.1v6.457c0 .373.302.676.676.676h.988z",
    fill: "currentColor",
    fillRule: "nonzero"
  })));
});

var _extends$3 = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _objectWithoutProperties$3(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}
var DeleteSvg = (function (_ref) {
  var _ref$styles = _ref.styles,
      props = _objectWithoutProperties$3(_ref, ["styles"]);

  return react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("svg", _extends$3({
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("path", {
    d: "M2 2h20v20H2z"
  }), react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("path", {
    d: "M8.667 5.333V4.5c0-.46.373-.833.833-.833h5c.46 0 .833.373.833.833v.833H19.8c.186 0 .253.02.321.056.068.036.121.09.158.157.036.068.055.136.055.321v.599c0 .186-.019.253-.055.32a.379.379 0 0 1-.158.158c-.068.037-.135.056-.32.056h-1.133v12.5c0 .46-.373.833-.834.833H6.167a.833.833 0 0 1-.834-.833V7H4.201c-.186 0-.253-.02-.321-.056a.379.379 0 0 1-.158-.157c-.036-.068-.055-.135-.055-.321v-.599c0-.185.019-.253.055-.32a.379.379 0 0 1 .158-.158c.068-.036.135-.056.32-.056h4.467zM7 7v11.667h10V7H7zm2.917 2.5h.833c.23 0 .417.187.417.417v5.833c0 .23-.187.417-.417.417h-.833a.417.417 0 0 1-.417-.417V9.917c0-.23.187-.417.417-.417zm3.333 0h.833c.23 0 .417.187.417.417v5.833c0 .23-.187.417-.417.417h-.833a.417.417 0 0 1-.417-.417V9.917c0-.23.187-.417.417-.417z",
    fill: "#2B2F36"
  })));
});

var _extends$4 = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _objectWithoutProperties$4(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}
var DoneSvg = (function (_ref) {
  var _ref$styles = _ref.styles,
      props = _objectWithoutProperties$4(_ref, ["styles"]);

  return react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("svg", _extends$4({
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("path", {
    d: "M2 2h20v20H2z"
  }), react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("path", {
    d: "M12 19.5a7.5 7.5 0 1 0 0-15 7.5 7.5 0 0 0 0 15zm0 1.667a9.167 9.167 0 1 1 0-18.334 9.167 9.167 0 0 1 0 18.334zm-.967-7.267l4.42-4.42a.417.417 0 0 1 .589 0l.59.59a.417.417 0 0 1 0 .589l-5.304 5.303a.417.417 0 0 1-.59 0l-.103-.104-2.947-2.946a.417.417 0 0 1 0-.59l.59-.589a.417.417 0 0 1 .589 0l2.166 2.167z",
    fill: "#2B2F36"
  })));
});

var _extends$5 = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _objectWithoutProperties$5(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}
var NoteSvg = (function (_ref) {
  var _ref$styles = _ref.styles,
      props = _objectWithoutProperties$5(_ref, ["styles"]);

  return react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("svg", _extends$5({
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("path", {
    d: "M2 2h20v20H2z",
    fillRule: "nonzero"
  }), react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("path", {
    d: "M12.235 7.102l1.68 1.679 1.427-1.43-1.687-1.696-1.42 1.447zm.501 2.858l-1.668-1.668-5.708 5.82v.002l1.613 1.613h.002l5.761-5.767zm3.906-1.503L7.678 17.42H4.5a.833.833 0 0 1-.833-.833v-3.178l8.84-8.908-.003-.003.588-.587a.833.833 0 0 1 1.18.001l2.862 2.877a.833.833 0 0 1-.002 1.177l-.49.49zM4.083 19.087h15.834c.23 0 .416.187.416.417v.833c0 .23-.186.417-.416.417H4.083a.417.417 0 0 1-.416-.417v-.833c0-.23.186-.417.416-.417z",
    fill: "#2B2F36"
  })));
});

var _extends$6 = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _objectWithoutProperties$6(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}
var ImageSvg = (function (_ref) {
  var _ref$styles = _ref.styles,
      props = _objectWithoutProperties$6(_ref, ["styles"]);

  return react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("svg", _extends$6({
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("path", {
    d: "M2 2h20v20H2z",
    fillRule: "nonzero"
  }), react__WEBPACK_IMPORTED_MODULE_28___default.a.createElement("path", {
    d: "M10.45 16.99l-3.562-.008a.25.25 0 0 1-.176-.427l3.444-3.444c.13-.13.341-.13.471 0l1.59 1.59 4.214-4.215a.333.333 0 0 1 .569.235v6.029a.25.25 0 0 1-.25.25h-6.23a.25.25 0 0 1-.07-.01zM4.5 20.333a.833.833 0 0 1-.833-.833v-15c0-.46.373-.833.833-.833h15c.46 0 .833.373.833.833v15c0 .46-.373.833-.833.833h-15zm.833-1.666h13.334V5.333H5.333v13.334zM7.417 7h1.666c.23 0 .417.187.417.417v1.666c0 .23-.187.417-.417.417H7.417A.417.417 0 0 1 7 9.083V7.417c0-.23.187-.417.417-.417z",
    fill: "#2B2F36"
  })));
});

var ToolbarAction;
(function (ToolbarAction) {
    ToolbarAction["FINISH"] = "FINISH";
    ToolbarAction["EDIT_NOTE"] = "EDIT_NOTE";
    ToolbarAction["INSERT_IMAGE"] = "INSERT_IMAGE";
    ToolbarAction["DELETE"] = "DELETE";
    ToolbarAction["HEADING"] = "HEADING";
    ToolbarAction["HIGHLIGHT"] = "HIGHLIGHT";
})(ToolbarAction || (ToolbarAction = {}));
var META_KEY = bowser__WEBPACK_IMPORTED_MODULE_27___default.a.mac ? '⌘' : 'Ctrl';
var OPTION_KEY = bowser__WEBPACK_IMPORTED_MODULE_27___default.a.mac ? 'Option' : 'Alt';
/**
 * 编辑器工具栏组件，具体需要显示哪些按钮可自行配置
 */
var Toolbar = /** @class */ (function (_super) {
    __extends(Toolbar, _super);
    function Toolbar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.menuRef = null;
        _this.handleClick = function (e) {
            if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(_this.props.onClick)) {
                _this.props.onClick(e);
            }
            var $target = jquery__WEBPACK_IMPORTED_MODULE_22___default()(e.target);
            var $action = $target.add($target.parentsUntil(_this.menuRef)).filter('[data-action]');
            /* 若不存在按钮，则不处理 */
            if ($action.length <= 0) {
                return;
            }
            var attrs = _this.props.attrs;
            var action = $action.attr('data-action');
            switch (action) {
                case ToolbarAction.FINISH:
                    if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(_this.props.onFinish)) {
                        _this.props.onFinish(!!attrs.finish);
                    }
                    break;
                case ToolbarAction.EDIT_NOTE:
                    if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(_this.props.onEditNote)) {
                        _this.props.onEditNote();
                    }
                    break;
                case ToolbarAction.INSERT_IMAGE:
                    if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(_this.props.onAddImage)) {
                        _this.props.onAddImage();
                    }
                    break;
                case ToolbarAction.DELETE:
                    if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(_this.props.onDelete)) {
                        _this.props.onDelete();
                    }
                    break;
                case ToolbarAction.HEADING:
                    if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(_this.props.onHeading)) {
                        var level = Number($action.attr('data-level'));
                        _this.props.onHeading(level);
                    }
                    break;
                case ToolbarAction.HIGHLIGHT:
                    if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(_this.props.onHighlight)) {
                        var type = $action.attr('data-type');
                        _this.props.onHighlight(type);
                    }
                    break;
                default:
                    break;
            }
        };
        _this.handleMouseDown = function (e) {
            if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(_this.props.onMouseDown)) {
                _this.props.onMouseDown(e);
            }
        };
        return _this;
    }
    Toolbar.prototype.render = function () {
        var _this = this;
        var props = this.props;
        var attrs = props.attrs;
        var _a = attrs.heading, heading = _a === void 0 ? 0 : _a, highlight = attrs.highlight;
        return (Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("ul", { className: "mindnote-toolbar-menu", onClick: this.handleClick, onMouseDown: this.handleMouseDown, ref: function (ref) { return _this.menuRef = ref; } },
            props.heading && Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { className: "mindnote-toolbar-basket" },
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { className: classnames__WEBPACK_IMPORTED_MODULE_25___default()('mindnote-toolbar-basket__item', heading === 1 && 'mindnote-item-active'), "data-action": ToolbarAction.HEADING, "data-level": 1, title: OPTION_KEY + " + 1" },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(H1Svg, null)),
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { className: classnames__WEBPACK_IMPORTED_MODULE_25___default()('mindnote-toolbar-basket__item', heading === 2 && 'mindnote-item-active'), "data-action": ToolbarAction.HEADING, "data-level": 2, title: OPTION_KEY + " + 2" },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(H2Svg, null)),
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { className: classnames__WEBPACK_IMPORTED_MODULE_25___default()('mindnote-toolbar-basket__item', heading === 3 && 'mindnote-item-active'), "data-action": ToolbarAction.HEADING, "data-level": 3, title: OPTION_KEY + " + 3" },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(H3Svg, null))),
            props.highlight && Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { className: "mindnote-toolbar-basket mindnote-toolbar-highlight" }, Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(HighlightColorMap).map(function (type, index) { return (Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { className: classnames__WEBPACK_IMPORTED_MODULE_25___default()('mindnote-toolbar-basket__item', highlight === type && 'mindnote-item-active', type), "data-action": ToolbarAction.HIGHLIGHT, "data-type": type, title: OPTION_KEY + " + " + type[0].toUpperCase(), key: index })); })),
            (props.heading || props.highlight) && Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("hr", { className: "mindnote-toolbar-divider" }),
            props.finish && Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { className: "mindnote-toolbar-line", "data-action": ToolbarAction.FINISH, title: META_KEY + " + Enter" },
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("span", { className: "mindnote-toolbar-action__icon" },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(DoneSvg, null)),
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("span", { className: "mindnote-toolbar-action__text" }, attrs.finish ? t('mindnote.editor.activate') : t('mindnote.editor.finish'))),
            props.note && Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { className: "mindnote-toolbar-line", "data-action": ToolbarAction.EDIT_NOTE, title: "Shift + Ener" },
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("span", { className: "mindnote-toolbar-action__icon" },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(NoteSvg, null)),
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("span", { className: "mindnote-toolbar-action__text" }, t('mindnote.editor.edit_note'))),
            props.addImage && Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { className: "mindnote-toolbar-line", "data-action": ToolbarAction.INSERT_IMAGE, title: OPTION_KEY + " + Enter" },
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("span", { className: "mindnote-toolbar-action__icon" },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(ImageSvg, null)),
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("span", { className: "mindnote-toolbar-action__text" }, t('mindnote.editor.add_image'))),
            props.delete && Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("hr", { className: "mindnote-toolbar-divider" }),
            props.delete && Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { className: "mindnote-toolbar-line", "data-action": ToolbarAction.DELETE, title: META_KEY + " + Shift + Backspace" },
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("span", { className: "mindnote-toolbar-action__icon" },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(DeleteSvg, null)),
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("span", { className: "mindnote-toolbar-action__text" }, t('mindnote.editor.delete'))),
            props.count && Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("hr", { className: "mindnote-toolbar-divider" }),
            props.count && Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { className: "mindnote-toolbar-count" },
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { className: "mindnote-toolbar-count__line" }, t('mindnote.editor.selected_items', attrs.itemsCount, attrs.itemsCount > 1 ? 's' : '')),
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { className: "mindnote-toolbar-count__line" }, t('mindnote.editor.selected_words', attrs.wordsCount, attrs.wordsCount > 1 ? 's' : '')))));
    };
    Toolbar.defaultProps = {
        finish: true,
        note: true,
        addImage: true,
        delete: true,
        heading: true,
        highlight: false,
    };
    return Toolbar;
}(react__WEBPACK_IMPORTED_MODULE_28__["Component"]));

var TeaLogger$2 = TeaManager.getDecorator();
/**
 * Hover 圆点浮出的工具栏
 * @description 对于单个节点的鼠标操作打点在工具栏内部封装
 */
var ToolbarTriggerHolder = /** @class */ (function (_super) {
    __extends(ToolbarTriggerHolder, _super);
    function ToolbarTriggerHolder(props) {
        var _this = _super.call(this, props) || this;
        /**
         * 展开收缩按钮点击穿透
         */
        _this.handleToggleClick = function () {
            var _a = _this.props, node = _a.node, editorUI = _a.editorUI;
            editorUI.toggleNodeExpand(node.id);
        };
        _this.state = {
            heading: props.node.heading || 0,
            highlight: props.node.highlight,
        };
        _this.container.setAttribute('class', 'mindnote-toolbar-holder');
        return _this;
    }
    /**
     * 更新 props 时更新 state
     */
    ToolbarTriggerHolder.prototype.update = function (props) {
        this.props = __assign({}, this.props, props);
        this.state = {
            heading: this.props.node.heading || 0,
            highlight: this.props.node.highlight,
        };
        this.mount();
    };
    ToolbarTriggerHolder.prototype.handleFinish = function () {
        var _a = this.props, node = _a.node, engine = _a.engine;
        engine.toggleFinishNode(node.id);
        this.unMount();
    };
    ToolbarTriggerHolder.prototype.handleEditNote = function () {
        var _a = this.props, node = _a.node, editorUI = _a.editorUI;
        editorUI.editNote(node.id);
        this.unMount();
    };
    ToolbarTriggerHolder.prototype.handleAddImage = function () {
        var _a = this.props, node = _a.node, imageEditor = _a.imageEditor;
        imageEditor.insert(node.id);
        this.unMount();
    };
    ToolbarTriggerHolder.prototype.handleDelete = function () {
        var _a = this.props, node = _a.node, engine = _a.engine;
        engine.deleteNodeDirectly(node.id);
        this.unMount();
    };
    ToolbarTriggerHolder.prototype.handleHeading = function (heading) {
        var _a = this.props, node = _a.node, engine = _a.engine;
        if (heading === this.state.heading) {
            heading = 0;
        }
        engine.setNodeAttr(node.id, 'heading', heading);
        this.setState({
            heading: heading
        });
    };
    ToolbarTriggerHolder.prototype.handleHighlight = function (highlight) {
        var _a = this.props, node = _a.node, engine = _a.engine;
        if (highlight === this.state.highlight) {
            highlight = undefined;
        }
        engine.toggleHighlight(node.id, highlight);
        this.setState({
            highlight: highlight,
        });
    };
    ToolbarTriggerHolder.prototype.unMount = function () {
        this.destroy();
        this.props.onDestroy();
    };
    ToolbarTriggerHolder.prototype.render = function () {
        var _this = this;
        return (Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Popover"], { className: "mindnote-toolbar", adjustOverflow: true, adjustPlacements: ['bottom', 'bottomLeft', 'bottomRight'], placement: "bottom", visible: this.props.visible, destroyAfterClose: true, arrowAtCenter: true, getContainer: function () { return _this.props.engine.viewport.scrollContainer[0]; }, onPopoverMouseEnter: this.props.onPopoverMouseEnter, onPopoverMouseLeave: this.props.onPopoverMouseLeave, content: (Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(Toolbar, { highlight: this.props.highlight, onFinish: this.handleFinish, onEditNote: this.handleEditNote, onAddImage: this.handleAddImage, onDelete: this.handleDelete, onHeading: this.handleHeading, onHighlight: this.handleHighlight, attrs: {
                    finish: this.props.node.finish,
                    heading: this.state.heading,
                    highlight: this.state.highlight,
                } })) },
            Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { className: classnames__WEBPACK_IMPORTED_MODULE_25___default()('mindnote-toobar-trigger', !this.props.visible && 'hidden') },
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { className: "mindnote-toobar-trigger__toggle", onClick: this.handleToggleClick }))));
    };
    __decorate([
        Bind(),
        TeaLogger$2('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var finish = args[0];
            var action = !finish ? 'complete' : 'activate';
            return {
                action: action,
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: 'outline_toolbar',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], ToolbarTriggerHolder.prototype, "handleFinish", null);
    __decorate([
        Bind(),
        TeaLogger$2('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'edit_note',
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: 'outline_toolbar',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], ToolbarTriggerHolder.prototype, "handleEditNote", null);
    __decorate([
        Bind(),
        TeaLogger$2('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'add_image',
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: 'outline_toolbar',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], ToolbarTriggerHolder.prototype, "handleAddImage", null);
    __decorate([
        Bind(),
        TeaLogger$2('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'delete_item',
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: 'outline_toolbar',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], ToolbarTriggerHolder.prototype, "handleDelete", null);
    __decorate([
        Bind(),
        TeaLogger$2('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var heading = args[0];
            var action = (heading === 1 && 'heading-h1') || (heading === 2 && 'heading-h2') || 'heading-h3';
            var attr_op_status = heading === context.state.heading ? 'cancel' : 'effective';
            return {
                action: action,
                attr_op_status: attr_op_status,
                eventType: 'mouseclick',
                source: 'outline_toolbar',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], ToolbarTriggerHolder.prototype, "handleHeading", null);
    __decorate([
        Bind(),
        TeaLogger$2('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var highlight = args[0];
            var action = "highlight_" + highlight;
            var attr_op_status = highlight === context.state.highlight ? 'cancel' : 'effective';
            return {
                action: action,
                attr_op_status: attr_op_status,
                eventType: 'mouseclick',
                source: 'outline_toolbar',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType(),
            };
        })
    ], ToolbarTriggerHolder.prototype, "handleHighlight", null);
    return ToolbarTriggerHolder;
}(ReactHolder));

/**
 * 多选区工具栏
 */
var ToolbarHolder = /** @class */ (function (_super) {
    __extends(ToolbarHolder, _super);
    function ToolbarHolder(props) {
        var _this = _super.call(this, props) || this;
        var finish = props.finish, heading = props.heading;
        _this.state = {
            finish: finish,
            heading: heading,
        };
        _this.container.setAttribute('class', 'mindnote-selector-toolbar__holder');
        return _this;
    }
    ToolbarHolder.prototype.render = function () {
        var _a = this.props, finish = _a.finish, heading = _a.heading, itemsCount = _a.itemsCount, wordsCount = _a.wordsCount, onFinish = _a.onFinish, onDelete = _a.onDelete, onHeading = _a.onHeading, onHighlight = _a.onHighlight, highlight = _a.highlight, highlightEnabled = _a.highlightEnabled;
        return (Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { className: "mindnote-toolbar" },
            Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(Toolbar, { finish: true, highlight: highlightEnabled, onFinish: onFinish, onDelete: onDelete, onHeading: onHeading, onHighlight: onHighlight, note: false, addImage: false, count: true, attrs: {
                    finish: finish,
                    heading: heading,
                    itemsCount: itemsCount,
                    wordsCount: wordsCount,
                    highlight: highlight,
                } })));
    };
    return ToolbarHolder;
}(ReactHolder));

var TeaLogger$3 = TeaManager.getDecorator();
/**
 * Created by morris on 16/5/6.
 * UI模块
 */
var EditorUI = /** @class */ (function () {
    function EditorUI(props) {
        var _this = this;
        /**
         * 工具栏选择器
         */
        this.TOOLBAR_MENU_SEL = 'mindnote-editor-toolbar';
        var model = props.model, engine = props.engine, state = props.state, selector = props.selector, imageEditor = props.imageEditor, textEditor = props.textEditor, viewport = props.viewport, eventSource = props.eventSource;
        this.engine = engine;
        this.state = state;
        this.selector = selector;
        this.model = model;
        this.editorOperate = new EditorOperate({
            editorUI: this,
            selector: selector,
            engine: engine,
            textEditor: textEditor,
            state: state,
            imageEditor: imageEditor,
            viewport: viewport,
            eventSource: eventSource,
            model: model
        });
        this.imageEditor = imageEditor;
        this.viewport = viewport;
        this.textEditor = textEditor;
        this.eventSource = eventSource;
        this.dragger = new Dragger({
            model: model,
            engine: engine,
            selector: selector,
            viewport: viewport,
            state: this.state,
            eventSource: this.eventSource,
        });
        var preview = new ImagePreview({
            engine: this.engine,
            viewport: this.viewport,
            state: state,
            eventSource: this.eventSource
        });
        preview.initPreview();
        // 初始化图片上传组件
        this.imageEditor.init({
            onInsertCopy: function (data) {
                var imageData = {
                    id: data.id,
                    uri: data.uri,
                    ow: data.ow,
                    oh: data.oh
                };
                if (data.w) {
                    imageData.w = data.w;
                }
                engine.insertImage(data.nodeId, imageData);
                // 发出粘贴图片事件
                if (data.uri) {
                    _this.eventSource.trigger(SourceEvent.PASTE_IMAGE, [data.uri]);
                }
            }
        });
    }
    /**
     * 初始化入口
     */
    EditorUI.prototype.init = function () {
        var _this = this;
        this.initMenu();
        this.editorOperate.init();
        this.dragger.init();
        this.selector.init();
        this.imageEditor.initImageDrop();
        this.initToolkit();
        this.viewport.paper.on('click.click-message', '.content,.note', function () {
            _this.eventSource.trigger(SourceEvent.NODE_CLICK);
        });
        this.viewport.paper.on('click.mindnote', '.item', function (e) {
            e.preventDefault();
            var item = jquery__WEBPACK_IMPORTED_MODULE_22___default()(e.target);
            var nodeId = item.data('node-id');
            _this.engine.drillNode(nodeId, false);
            _this.collectEvent('click_bit');
        });
        if (environment.isMobile) {
            this.viewport.paper.addClass('mobile-style');
        }
    };
    /**
     * 打开文档
     * @param definition
     * @param {string} name
     */
    EditorUI.prototype.openDocument = function (definition, name) {
        this.engine.open(definition, name);
    };
    /**
     *	初始化bullet菜单
     */
    EditorUI.prototype.initMenu = function () {
        var paper = this.viewport.paper;
        var me = this;
        /* Hover Bullet 显示工具栏菜单 */
        paper.on('mouseenter', '.bullet', function (e) {
            // 移动端不需要这个菜单，否则有的时候点击可能会增加了选中样式
            if (environment.isMobile) {
                return;
            }
            var $bullet = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            if ($bullet.hasClass('selecting')) {
                return;
            }
            var nodeId = $bullet.data('id');
            var $container = getNodeContainer(nodeId);
            // 被选择的时候，不出现菜单
            if ($container.hasClass('selected')) {
                return;
            }
            var targetNode = me.engine.getNode(nodeId);
            /* 如果 Node 不存在，则不处理 */
            if (!targetNode) {
                return;
            }
            me.clearTimer($bullet);
            /* 显示修改事件 */
            if (targetNode.modified || me.hasNoteOrText(targetNode)) {
                var modifiedTip = $bullet.children('.modified-hotspot');
                if (modifiedTip.length === 0) {
                    modifiedTip = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="modified-hotspot"></div>').appendTo($bullet);
                    modifiedTip.on('mouseleave', function () {
                        jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).empty();
                        me.clearTimer($bullet);
                    });
                }
                modifiedTip.show();
            }
            else {
                $bullet.children('.modified-hotspot').remove();
            }
            // 当前是只读状态，则不处理
            if (me.state.readonly) {
                return;
            }
            /* 延迟显示菜单 */
            var menuShowTimer = window.setTimeout(function () {
                /* 若延迟过程中发生了钻取，则节点不存在 */
                if ($bullet.is(':visible')) {
                    me.handleBulletHover($bullet, targetNode);
                }
            }, 300);
            $bullet.data('menuShowTimer', menuShowTimer);
        });
        /* 鼠标移出的时候关闭工具栏 */
        paper.on('mouseleave click mousedown', '.bullet', function (e) {
            var $bullet = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            me.clearTimer($bullet);
            var menu = $bullet.children("[data-sel=" + me.TOOLBAR_MENU_SEL + "]").get(0);
            if (!menu) {
                return;
            }
            var menuHideTimer = window.setTimeout(function () {
                me.destroyToolbarMenu($bullet);
            }, 300);
            $bullet.data('menuHideTimer', menuHideTimer);
        });
        /**
         * 编辑时间提示
         */
        paper.on('mouseenter', '.modified-hotspot', function () {
            var spot = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            var $bullet = spot.parent();
            var nodeId = $bullet.data('id');
            var modifyTipTimer = window.setTimeout(function () {
                var targetNode = me.engine.getNode(nodeId);
                var content = '';
                if (targetNode.modified) {
                    content += formatDate(me.state.getEditorProps().dateFormat, targetNode.modified);
                }
                if (me.hasNoteOrText(targetNode)) {
                    if (content) {
                        content += '<br>';
                    }
                    var countResult = countNodeWords([targetNode], false, me.state.getEditorProps().locale);
                    /* 这里使用了两个词条，分为单数和复数 */
                    content += countResult.wordCount > 1
                        ? t('mindnote.editor.item_words', countResult.wordCount)
                        : t('mindnote.editor.item_word', countResult.wordCount);
                }
                if (content) {
                    spot.append('<div>' + content + '</div>');
                }
            }, 1200);
            $bullet.data('modifyTipTimer', modifyTipTimer);
        });
        // 控制展开收缩等小操作，用mousedown + mouseup来控制，目的是为了preventDefault，来阻止输入框的blur
        paper.on(environment.downEvent, '.toggle', function (e) {
            e.stopPropagation();
            e.preventDefault();
            jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).on(environment.upEvent, function () {
                jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).off(environment.upEvent);
                var wrapper = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).parent();
                var nodeWrapper = wrapper.parent();
                var container = nodeWrapper.parent();
                var expandNodeId = container.attr('id');
                me.toggleNodeExpand(expandNodeId);
            });
        });
    };
    /**
     * 清理工具弹框 弹出/消失 延迟
     * 清理修改时间tip 弹出 延迟
     * @param $bullet 圆点对象
     */
    EditorUI.prototype.clearTimer = function ($bullet) {
        window.clearTimeout($bullet.data('menuShowTimer'));
        window.clearTimeout($bullet.data('menuHideTimer'));
        window.clearTimeout($bullet.data('modifyTipTimer'));
    };
    /**
     * 销毁圆点弹出的工具栏
     * @param $bullet 圆点对象
     */
    EditorUI.prototype.destroyToolbarMenu = function ($bullet) {
        var menu = $bullet.children("[data-sel=" + this.TOOLBAR_MENU_SEL + "]").get(0);
        var holder = ReactHolder.getHolder(menu);
        if (holder) {
            /* 为了保持隐藏时的动画，这里保持组件不卸载 */
            holder.update({ visible: false });
        }
        var nodeId = $bullet.data('id');
        var $container = getNodeContainer(nodeId);
        $container.removeClass('active');
        $bullet.children('.modified-hotspot').empty().hide();
    };
    /**
     * 鼠标 Hover Bullet 触发工具栏
     * @param $bullet 圆点对象
     * @param targetNode 节点对象
     */
    EditorUI.prototype.handleBulletHover = function ($bullet, targetNode) {
        var _this = this;
        var $container = getNodeContainer(targetNode.id);
        $container.addClass('active');
        var menu = $bullet.children("[data-sel=" + this.TOOLBAR_MENU_SEL + "]").get(0);
        var highlight = this.state.getEditorState().highlightEnabled;
        if (menu) {
            /* 若工具栏已经挂载，则更新状态 */
            var holder = ReactHolder.getHolder(menu);
            holder.update({ visible: true, node: targetNode, highlight: highlight });
        }
        else {
            /* 若工具栏还未挂载，则挂载工具栏 */
            var toolbarHolder = new ToolbarTriggerHolder({
                node: targetNode,
                engine: this.engine,
                editorUI: this,
                imageEditor: this.imageEditor,
                visible: true,
                highlight: highlight,
                onDestroy: function () { return _this.destroyToolbarMenu($bullet); },
                onPopoverMouseEnter: function () {
                    _this.clearTimer($bullet);
                },
                onPopoverMouseLeave: function () { return _this.destroyToolbarMenu($bullet); },
            });
            toolbarHolder.getContainer().setAttribute('data-sel', this.TOOLBAR_MENU_SEL);
            toolbarHolder.mountTo($bullet);
        }
        this.eventSource.trigger(SourceEvent.TOOLBAR_OPEN);
    };
    /**
     * 展开/收缩节点
     * @param id 节点ID
     */
    EditorUI.prototype.toggleNodeExpand = function (id) {
        this.engine.toggleExpand(id);
    };
    /**
     * 删除节点
     * @param {string} nodeId
     */
    EditorUI.prototype.deleteNode = function (nodeId) {
        var container = getNodeContainer(nodeId);
        var currentContent = getContentById(nodeId);
        var text = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.trim(currentContent.text());
        var currentNoteDom = container.children('.node-wrapper').children('.note');
        var currentNoteText = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.trim(currentNoteDom.text());
        if (text === '' && currentNoteText === '') {
            // 没内容，直接删除
            this.engine.toPrevNode(nodeId, true);
            this.engine.deleteNode(nodeId);
        }
        else {
            // 有内容，查看同级上一节点有没有子节点，是否可以合并
            var prevNodeDom = container.prev('.node');
            var prevId = prevNodeDom.attr('id');
            if (prevNodeDom.length === 0 || hasChildren$1(prevId)) {
                // 没有同级上一个节点或者上一节点有子主题，不能删除
                return;
            }
            var preNoteDom = prevNodeDom.children('.node-wrapper').children('.note');
            var preNoteText = preNoteDom.text();
            if (preNoteText !== '') {
                // 前边节点有备注，不能合并
                return;
            }
            // 设置合并节点的内容并格式化
            var currentNode = this.engine.getNode(nodeId);
            var prevNode = this.engine.getNode(prevId);
            var preContent = getContentById(prevId);
            var preEnd = preContent.text().length;
            var formatValue = parseText(mergeTexts([prevNode.text, currentNode.text]));
            this.engine.deleteNode(nodeId, prevId, formatValue, currentNode.note);
            // 把光标设置到上一节点原来结尾的位置
            setCursorPosition(preContent, { start: preEnd });
        }
    };
    /**
     * 创建同一级
     * @param nodeId
     */
    EditorUI.prototype.createNext = function (nodeId) {
        var rootNode = this.engine.getRootNode();
        if (rootNode && nodeId === rootNode.id) {
            this.engine.createNext(rootNode.id);
            return;
        }
        var cursorPosition = getCursorPosition();
        var node = this.engine.getNode(nodeId);
        var nodeSplited = this.textEditor.getSplitText(node.text, cursorPosition);
        if (nodeTextToPlainText(nodeSplited[1], this.state.getEditorProps().locale) === '') {
            // 没有选择文本，并且光标在文本最后
            this.engine.createNext(nodeId);
        }
        else {
            // 创建节点的文本
            // 当前节点的文本
            this.engine.createPrevious(nodeId, nodeSplited[1], nodeSplited[0]);
        }
    };
    /**
     * 添加备注
     * @param nodeId 节点id
     */
    EditorUI.prototype.editNote = function (nodeId) {
        var container = jquery__WEBPACK_IMPORTED_MODULE_22___default()('#' + nodeId);
        var nodeWrapper = container.children('.node-wrapper');
        var note = nodeWrapper.children('.note');
        var exists = true;
        if (note.length === 0) {
            exists = false;
            note = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="note" contenteditable>\u200B</div>');
            var imageList = nodeWrapper.children('.attach-image-list');
            if (imageList.length > 0) {
                // 如果存在图片，在图片后边添加
                imageList.after(note);
            }
            else {
                nodeWrapper.children('.content-wrapper').after(note);
            }
        }
        focus(note);
        moveCursorEnd(note);
        if (!exists) {
            note.text('');
        }
    };
    EditorUI.prototype.hasNoteOrText = function (node) {
        var locale = this.state.getEditorProps().locale;
        return jquery__WEBPACK_IMPORTED_MODULE_22___default.a.trim(nodeTextToPlainText(node.text, locale)) !== ''
            || jquery__WEBPACK_IMPORTED_MODULE_22___default.a.trim(nodeTextToPlainText(node.note, locale)) !== '';
    };
    /**
     * 初始化底部工具箱
     */
    EditorUI.prototype.initToolkit = function () {
        if (!environment.isMobile) {
            return;
        }
        var paper = this.viewport.paper;
        var me = this;
        // 给RN发消息，以控制工具栏
        paper.on('focus.toolkit', '.content', function () {
            var data = {
                type: 'content'
            };
            me.eventSource.trigger(SourceEvent.INPUT_FOCUS, data);
        });
        paper.on('focus.toolkit', '.note', function () {
            var data = {
                type: 'note',
            };
            me.eventSource.trigger(SourceEvent.INPUT_FOCUS, data);
        });
        paper.on('focus.toolkit', '.mindnote-title-content', function () {
            var data = {
                type: 'title',
            };
            me.eventSource.trigger(SourceEvent.INPUT_FOCUS, data);
        });
    };
    EditorUI.prototype.executeEditAction = function (actionObj) {
        var paper = this.viewport.paper;
        var focusNode = paper.find(':focus');
        var actionName = actionObj.action;
        if (focusNode.length !== 0) {
            var focusNodeId = focusNode.parents('.node').attr('id');
            if (actionName === EditActions.BLUR) {
                paper.find('div[contenteditable]:focus').blur();
                paper.find('input').blur();
                window.getSelection().removeAllRanges();
            }
            else if (actionName === EditActions.INDENT) {
                this.engine.indentNode(focusNodeId);
                this.collectEvent('tab');
            }
            else if (actionName === EditActions.OUTDENT) {
                this.engine.outdentNode(focusNodeId);
                this.collectEvent('shift_tab');
            }
            else if (actionName === EditActions.NOTE) {
                this.editNote(focusNodeId);
                this.collectEvent('edit_note');
            }
            else if (actionName === EditActions.DELETE) {
                this.collectEvent('delete_item');
                this.engine.deleteNodeDirectly(focusNodeId);
            }
            else if (actionName === EditActions.FINISH) {
                this.engine.toggleFinishNode(focusNodeId);
                var node = this.model.getById(focusNodeId);
                if (node) {
                    var finish = node.finish;
                    var action = finish ? 'complete' : 'activate';
                    this.collectEvent(action);
                }
            }
            else if (actionName === EditActions.BOLD || actionName === EditActions.ITALIC || actionName === EditActions.UNDERLINE) {
                this.textEditor.executeFormatAction(focusNode, actionName);
                this.collectEvent(actionName);
            }
            else if (actionName === EditActions.HEADING) {
                var node = this.engine.getNode(focusNodeId);
                if (node) {
                    var headingValue = actionObj.value;
                    if (headingValue === node.heading) {
                        headingValue = 0;
                    }
                    this.engine.setNodeAttr(focusNodeId, 'heading', headingValue);
                    var action = headingValue === 0 ? 'set_as_text' : "heading-" + headingValue;
                    this.collectEvent(action);
                }
            }
            else if (actionName === EditActions.MENTION) {
                this.textEditor.initAtSearch(focusNode, true);
            }
            else if (actionName === EditActions.HIGHLIGHT) {
                var node = this.engine.getNode(focusNodeId);
                if (node) {
                    var value = actionObj.value;
                    if (value === node.highlight) {
                        value = undefined;
                    }
                    this.engine.toggleHighlight(focusNodeId, value);
                }
            }
        }
    };
    EditorUI.prototype.collectEvent = function (action) {
        var params = {
            action: action,
            attr_op_status: 'effective',
            eventType: 'keydown',
            source: 'outline_toolbar',
            mode: 'outline',
            view_level: getCurrentLevel(),
            select_type: getCurrentSelectType()
        };
        TeaManager.collectEvent('toggle_attribute', params);
    };
    EditorUI.prototype.getFocusNode = function () {
        var focusNode = this.viewport.paper.find('.content:focus');
        if (focusNode.length === 0) {
            return null;
        }
        var focusNodeId = focusNode.data('id');
        var node = this.engine.getNode(focusNodeId);
        var canIndent = this.engine.canIndent(node.id, 'indent');
        var canOutdent = this.engine.canIndent(node.id, 'outdent');
        var cursorPosition = getCursorPosition();
        var contentText = new ContentText(node.text, this.state);
        var bold = contentText.inTextFormatFlag('bold', cursorPosition);
        var italic = contentText.inTextFormatFlag('italic', cursorPosition);
        var underline = contentText.inTextFormatFlag('underline', cursorPosition);
        return {
            bold: bold,
            italic: italic,
            underline: underline,
            node: node,
            canIndent: canIndent,
            canOutdent: canOutdent
        };
    };
    /**
     * 获取操作对象
     */
    EditorUI.prototype.getEditorOperate = function () {
        return this.editorOperate;
    };
    __decorate([
        Bind(),
        TeaLogger$3('toggle_attribute', function () {
            return {
                action: 'hover_dot',
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: 'outline_toolbar',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorUI.prototype, "handleBulletHover", null);
    __decorate([
        Bind(),
        TeaLogger$3('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var id = args[0];
            var node = context.engine.getNode(id);
            var action = node.collapsed ? 'expand' : 'collapse';
            return {
                action: action,
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: 'content',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorUI.prototype, "toggleNodeExpand", null);
    __decorate([
        Bind(),
        TeaLogger$3('toggle_attribute', function () {
            return {
                action: 'delete_item',
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: 'outline_toolbar',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], EditorUI.prototype, "deleteNode", null);
    return EditorUI;
}());

/**
 * Created by morris on 16/9/4.
 * 选择情况的暂存器，
 * 因为多个模块需要使用选择器的选中内容
 * 会出现循环依赖的问题。所以单独抽一个模块保存
 */
var SelectHolder = /** @class */ (function () {
    function SelectHolder() {
        this.selectedIds = [];
        this.selectNodes = [];
    }
    SelectHolder.prototype.setSelectIds = function (ids) {
        this.selectedIds = ids;
    };
    SelectHolder.prototype.setSelectNodes = function (nodes) {
        this.selectNodes = nodes;
    };
    SelectHolder.prototype.getSelectIds = function () {
        return this.selectedIds;
    };
    SelectHolder.prototype.getSelectNodes = function () {
        return this.selectNodes;
    };
    SelectHolder.prototype.clear = function () {
        this.selectedIds = [];
        this.selectNodes = [];
    };
    return SelectHolder;
}());

/**
 * Created by morris on 2017/12/26.
 * 图片上传中状态保存对象
 */
var ImageUploading = /** @class */ (function () {
    function ImageUploading() {
        this.imageUploading = {};
    }
    /**
     * 添加一个正在上传中的图片对象
     * @param nodeId
     * @param image
     */
    ImageUploading.prototype.add = function (nodeId, image) {
        var target = this.imageUploading[nodeId] || {};
        target[image.id] = image;
        this.imageUploading[nodeId] = target;
    };
    /**
     * 获取一个节点下正在上传的图片
     * @param nodeId
     * @returns {*|Array}
     */
    ImageUploading.prototype.getByNodeId = function (nodeId) {
        return Object(lodash_es__WEBPACK_IMPORTED_MODULE_16__["default"])(this.imageUploading[nodeId] || {});
    };
    /**
     * 判断上传中的图片是否存在
     * @param {string} nodeId
     * @param {string} imageId
     * @returns {boolean}
     */
    ImageUploading.prototype.imageExists = function (nodeId, imageId) {
        return !!(this.imageUploading[nodeId] && this.imageUploading[nodeId][imageId]);
    };
    /**
     * 删除一个节点下正在上传的图片
     * @param imageId
     * @returns {*|Array}
     */
    ImageUploading.prototype.remove = function (nodeId, imageId) {
        if (this.imageUploading[nodeId] && this.imageUploading[nodeId][imageId]) {
            delete this.imageUploading[nodeId][imageId];
            return true;
        }
        return false;
    };
    return ImageUploading;
}());

/**
 * 计算出两个字符串的差异，并抽象成操作符
 * @param str1 原始字符串
 * @param str2 更新字符串
 */
function diff(str1, str2) {
    /* 若两个字符串完全相等，则无操作符 */
    if (str1 === str2) {
        return null;
    }
    var len1Start = 0;
    var len2Start = 0;
    /* 从前向后找，找到第一个不相等的位置 */
    while (str1[len1Start] === str2[len2Start]) {
        len1Start += 1;
        len2Start += 1;
    }
    var len1End = str1.length;
    var len2End = str2.length;
    /* 从后向前找，找到第一个不相等的位置 */
    while (str1[len1End] === str2[len2End]) {
        if (len1End === len1Start || len2End === len2Start) {
            break;
        }
        len1End -= 1;
        len2End -= 1;
    }
    if (len1Start === len1End && str1.length < str2.length) {
        return {
            offset: len1Start,
            remove: '',
            insert: str2.substring(len2Start, len2End),
        };
    }
    if (len2Start === len2End && str1.length > str2.length) {
        return {
            offset: len1Start,
            remove: str1.substring(len1Start, len1End),
            insert: '',
        };
    }
    return {
        offset: len1Start,
        remove: str1.substring(len1Start, len1End + 1),
        insert: str2.substring(len2Start, len2End + 1),
    };
}
/**
 * 从两个字符串的更新操作，计算出光标的新位置
 * @param str1 原始字符串
 * @param str2 更新字符串
 * @param cursor 原始光标位置
 */
function diffCursor(str1, str2, cursor) {
    /* 获取两个字符串的差异 */
    var change = diff(str1, str2);
    /* 若无差异，则直接重置原始值 */
    if (change === null) {
        return cursor;
    }
    var _a = cursor[0], startOffset = _a === void 0 ? 0 : _a, _b = cursor[1], endOffset = _b === void 0 ? 0 : _b;
    /* 若修改的坐标小于等于起止坐标 */
    if (change.offset <= startOffset) {
        /* 计算本次修改对start光标定位的实际偏移量 */
        var moveOffset = change.insert.length - change.remove.length;
        if (moveOffset > 0) {
            /* 若是增加字符，则直接向前偏移 */
            startOffset += moveOffset;
        }
        else {
            /* 实际的偏移位置是当前光标位置距离change.offset和修改偏移量的最小值 */
            var realOffset = Math.min(startOffset - change.offset, Math.abs(moveOffset));
            startOffset -= realOffset;
        }
    }
    /* 若修改的坐标小于等于终止坐标 */
    if (change.offset <= endOffset) {
        /* 计算本次修改对start光标定位的实际偏移量 */
        var moveOffset = change.insert.length - change.remove.length;
        if (moveOffset > 0) {
            /* 若是增加字符，则直接向前偏移 */
            endOffset += moveOffset;
        }
        else {
            /* 实际的偏移位置是当前光标位置距离change.offset和修改偏移量的最小值 */
            var realOffset = Math.min(endOffset - change.offset, Math.abs(moveOffset));
            endOffset -= realOffset;
        }
    }
    return [startOffset, endOffset];
}

var EnginePainter = /** @class */ (function () {
    function EnginePainter(props) {
        var model = props.model, nodePainter = props.nodePainter, viewport = props.viewport, state = props.state, commentManager = props.commentManager;
        this.model = model;
        this.nodePainter = nodePainter;
        this.wrapper = viewport.nodeWrapper;
        this.viewport = viewport;
        this.state = state;
        this.commentManager = commentManager;
    }
    EnginePainter.prototype.renderPaper = function () {
        var _this = this;
        var rootNode = this.model.getRootNode();
        var nodes;
        if (rootNode == null) {
            nodes = this.model.getDefine().nodes;
        }
        else {
            nodes = [rootNode];
        }
        this.wrapper.empty();
        if (nodes && nodes.length > 0) {
            // 绘制节点
            recursive(nodes, function (node) {
                _this.renderNode(node);
            });
            var firstContent = jquery__WEBPACK_IMPORTED_MODULE_22___default()('.content:first');
            if (firstContent.length && !environment.isMobile) {
                moveCursorEnd(firstContent);
            }
        }
    };
    /**
     * 更新文档title，并且还原光标
     * @param {string} title
     */
    EnginePainter.prototype.setTitle = function (title) {
        var $title = this.viewport.nameContainer.find('.mindnote-title-content');
        this.resetHtml($title, title);
    };
    /**
     * 只更新 title，不处理光标
     * @param title
     */
    EnginePainter.prototype.renderTitle = function (title) {
        var $title = this.viewport.nameContainer.find('.mindnote-title-content');
        $title.empty().text(title);
    };
    /**
     * 刷新节点高亮样式
     * @param node
     */
    EnginePainter.prototype.refreshNodeHighlight = function (node) {
        var $wrapper = getNodeWrapper(node.id).children('.content-wrapper');
        $wrapper.removeClass(Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(HighlightColorMap).map(function (key) { return "highlight-" + key; }).join(' '));
        if (node.highlight) {
            $wrapper.addClass("highlight-" + node.highlight);
        }
    };
    /**
     * 刷新节点，用户节点更新时
     * @param node
     */
    EnginePainter.prototype.refreshNode = function (node) {
        var container = getNodeContainer(node.id);
        var nodeWrapper = container.children('.node-wrapper');
        // 评论
        var hasComment = this.commentManager.getNodeCommentCount(node.id) > 0;
        nodeWrapper.toggleClass('comment-node', hasComment);
        if (container.length === 0) {
            // 节点不存在，可能已经被删除了，或者当前处于drill的状态
            return;
        }
        var locale = this.state.getEditorProps().locale;
        // 样式
        container.toggleClass('finished', !!node.finish);
        container.toggleClass('collapsed', !!node.collapsed && !this.model.isRootNode(node.id));
        container.toggleClass('mindnote-leaf', !node.children || node.children.length === 0);
        container.toggleClass('root-node', this.model.isRootNode(node.id));
        var wrapper = nodeWrapper.children('.content-wrapper');
        nodeWrapper.removeClass('heading0 heading1 heading2 heading3');
        wrapper.removeClass('heading0 heading1 heading2 heading3');
        if (node.heading) {
            var heading = 'heading' + node.heading;
            nodeWrapper.addClass(heading);
            wrapper.addClass(heading);
        }
        // 高亮样式
        this.refreshNodeHighlight(node);
        var content = getContentByNode(container);
        content.css('color', node.color || '');
        // 文本
        this.resetHtml(content, textToHtml(node.text, locale));
        // 管理图片
        this.nodePainter.refreshImages(node, container);
        // 管理备注
        var noteEditor = nodeWrapper.children('.note');
        if (nodeTextToPlainText(node.note, this.state.getEditorProps().locale, false) === '') {
            /**
             * @throws Uncaught DOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?
             * @see https://stackoverflow.com/questions/21926083/failed-to-execute-removechild-on-node/22934552#22934552
             */
            try {
                noteEditor.remove();
            }
            catch (error) {
                console.warn(error);
            }
        }
        else {
            if (noteEditor.length === 0) {
                noteEditor = this.nodePainter.renderNote(node);
                nodeWrapper.append(noteEditor);
            }
            else {
                this.resetHtml(noteEditor, textToHtml(node.note, locale));
            }
        }
    };
    /**
     * 创建节点的dom对象
     */
    EnginePainter.prototype.createNodeDom = function (node) {
        return this.nodePainter.renderNode(node, this.model.isRootNode(node.id));
    };
    /**
     * 绘制节点
     * @param node
     * @param append 是否是在后边追加
     */
    EnginePainter.prototype.renderNode = function (node, append) {
        if (append == null) {
            append = true;
        }
        var target;
        var nodeDom = this.createNodeDom(node);
        var isTopLevel = this.model.isTopLevel(node.id);
        if (isTopLevel) {
            target = this.wrapper;
        }
        else {
            var parentNode = this.model.getParent(node.id);
            var parentDom = getNodeContainer(parentNode.id);
            target = this.nodePainter.getChildrenContainer(parentDom);
        }
        if (append) {
            target.append(nodeDom);
        }
        else {
            target.prepend(nodeDom);
        }
    };
    /**
     * 在某一位置插入节点
     * @param parentId
     * @param index
     * @param node
     */
    EnginePainter.prototype.insertNode = function (parentId, index, node, rootNode) {
        var target = this.wrapper;
        if (parentId) {
            var parentDom = getNodeContainer(parentId);
            if (parentDom.length === 0) {
                // 父元素不存在，可能进入了drill状态，或者在本地已经被删除了
                return;
            }
            target = this.nodePainter.getChildrenContainer(parentDom);
        }
        else if (rootNode != null) {
            // 当前进入了某个节点，而现在需要insert一个顶级节点，直接不处理
            // 否则会添加到现在的wrapper中，位置不对
            return;
        }
        var nodeDom = this.createNodeDom(node);
        if (index === 0) {
            // 第一个
            target.prepend(nodeDom);
        }
        else {
            target.children(".node:eq(" + (index - 1) + ")").after(nodeDom);
        }
    };
    /**
     * 在当前节点前边绘制节点
     * @param currentId
     * @param node
     */
    EnginePainter.prototype.renderPrevious = function (currentId, node) {
        var currentDom = getNodeContainer(currentId);
        var nodeDom = this.createNodeDom(node);
        currentDom.before(nodeDom);
    };
    /**
     * 在当前节点后边绘制节点
     * @param currentId
     * @param nextNode
     */
    EnginePainter.prototype.renderNext = function (currentId, nextNode) {
        var currentDom = getNodeContainer(currentId);
        var nodeDom = this.createNodeDom(nextNode);
        currentDom.after(nodeDom);
    };
    /**
     * 绘制第一个子节点
     * @param currentId
     * @param nextNode
     */
    EnginePainter.prototype.renderFirstChild = function (currentId, nextNode) {
        var parentDom = getNodeContainer(currentId);
        var target = this.nodePainter.getChildrenContainer(parentDom);
        var nodeDom = this.createNodeDom(nextNode);
        target.prepend(nodeDom);
    };
    /**
     * 绘制全部子节点
     * @param nodeId
     */
    EnginePainter.prototype.renderChildren = function (nodeId) {
        var _this = this;
        var node = this.model.getById(nodeId);
        if (!node.children) {
            return;
        }
        var parentDom = getNodeContainer(nodeId);
        var target = this.nodePainter.getChildrenContainer(parentDom);
        target.empty();
        // 绘制节点
        recursive(node.children, function (child) {
            _this.renderNode(child);
        });
    };
    /**
     * 删除节点
     * @param {Node} node
     */
    EnginePainter.prototype.removeNode = function (node) {
        getNodeContainer(node.id).remove();
    };
    /**
     * 重设节点内容，并且还原光标
     * @param $node 重设节点
     * @param html html内容
     */
    EnginePainter.prototype.resetHtml = function ($node, html) {
        var oText = $node.text();
        var selection = window.getSelection();
        /* 如果选区不存在，或者当前内容没有激活，则不更新光标（移动端更新光标会唤起键盘） */
        if (!selection.anchorNode || !$node.is(':focus')) {
            $node.html(html);
            return;
        }
        var oRange = selection.getRangeAt(0);
        var startOffset = getCursorOffset($node, jquery__WEBPACK_IMPORTED_MODULE_22___default()(oRange.startContainer), oRange.startOffset);
        var endOffset = getCursorOffset($node, jquery__WEBPACK_IMPORTED_MODULE_22___default()(oRange.endContainer), oRange.endOffset);
        $node.html(html);
        /* 若光标不在更新区域，则直接返回 */
        if (!$node.get(0).contains(oRange.startContainer)) {
            return;
        }
        var cText = $node.text();
        var _a = diffCursor(oText, cText, [startOffset, endOffset]), start = _a[0], end = _a[1];
        setCursorPosition($node, {
            start: start,
            end: end,
        });
    };
    return EnginePainter;
}());

/**
 * 构建节点
 * @param node
 * @param container
 */
function buildNode(node, container, state) {
    var nodeDom = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<li></li>').appendTo(container);
    var contentHtmlDom = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.parseHTML('<span class="content mubu-node">' + textToHtml(node.text, state.getEditorProps().locale) + '</span>');
    var contentDom = jquery__WEBPACK_IMPORTED_MODULE_22___default()(contentHtmlDom);
    nodeDom.append(contentDom);
    // 必须要给链接设置颜色，否则pdf中就是蓝色
    if (node.finish) {
        contentDom.addClass('finished');
        contentDom.css('text-decoration', 'line-through');
        nodeDom.css('color', '#a0a0a0');
        nodeDom.find('.content-link').css('color', '#a0a0a0');
    }
    else if (node.color) {
        contentDom.css({
            color: node.color,
        });
        contentDom.attr('color', node.color);
    }
    var lineHeight = 22;
    var minHeight = 22;
    var fontSize = 14;
    if (node.heading) {
        if (node.heading === 1) {
            lineHeight = 32;
            minHeight = 32;
            fontSize = 24;
        }
        else if (node.heading === 2) {
            lineHeight = 28;
            minHeight = 28;
            fontSize = 21;
        }
        else if (node.heading === 3) {
            lineHeight = 24;
            minHeight = 24;
            fontSize = 18;
        }
        contentDom.attr('heading', node.heading);
    }
    nodeDom.css({
        'line-height': lineHeight + 'px',
    });
    contentDom.css({
        'line-height': lineHeight + 'px',
        'min-height': minHeight + 'px',
        'font-size': fontSize + 'px',
    });
    if (node.collapsed) {
        nodeDom.addClass('collapsed');
        contentDom.addClass('collapsed');
    }
    if (node.images && node.images.length > 0) {
        contentDom.attr('images', encodeURIComponent(JSON.stringify(node.images)));
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(node.images, function (index, img) {
            var imgUrl = getImageUrl(state.getEditorProps().imageUrlPrefix, img.uri || '');
            var imgObj = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<img src="' + imgUrl + '" style="max-width: 720px;" class="attach-img"/>');
            if (img.w) {
                imgObj.css('width', img.w);
            }
            var imgContainer = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div style="padding: 3px 0"></div>');
            imgContainer.append(imgObj);
            nodeDom.append(imgContainer);
        });
    }
    if (node.note) {
        var noteContent = textToHtml(node.note, state.getEditorProps().locale);
        if (noteContent) {
            noteContent = noteContent.replace(new RegExp('\n', 'gm'), '<br/>');
        }
        var noteHtmlDom = '<span class="note">' + noteContent + '</span>';
        var noteDom = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.parseHTML(noteHtmlDom);
        nodeDom.append('<br/>');
        nodeDom.append(noteDom);
    }
    if (node.highlight) {
        contentDom.addClass("highlight-" + node.highlight);
    }
    // 构建子节点
    if (node.children && node.children.length > 0) {
        var childrenContainer_1 = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<ul class="children" style="list-style-type: disc;"></ul>').appendTo(nodeDom);
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(node.children, function (index, child) {
            buildNode(child, childrenContainer_1, state);
        });
    }
}
function convertToHtml(nodes, state) {
    var wrapper = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div></div>');
    var container = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<ul></ul>').appendTo(wrapper);
    // 构建内容
    if (nodes) {
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodes, function (index, node) {
            buildNode(node, container, state);
        });
    }
    // 设置样式，样式必须要设置在行内
    wrapper.find('ul').css({
        'list-style': 'disc',
        'list-style-position': 'outside',
    });
    wrapper.find('.content').css({
        display: 'inline-block',
        'vertical-align': 'top',
    });
    wrapper.find('.note').css({
        display: 'inline-block',
        color: '#888',
        'line-height': '18px',
        'min-height': '18px',
        'font-size': '13px',
        'padding-bottom': '2px',
    });
    wrapper.find('.children').css({
        'padding-bottom': '4px',
    });
    wrapper.find('.bold').css({
        'font-weight': 'bold',
    });
    wrapper.find('.underline').css({
        'text-decoration': 'underline',
    });
    wrapper.find('.italic').css({
        'font-style': 'italic',
    });
    wrapper.find('.tag').css({
        'text-decoration': 'underline',
        opacity: '0.6',
        color: 'inherit',
    });
    wrapper.find('.content-link').css({
        'text-decoration': 'underline',
        opacity: '0.6',
        color: 'inherit',
    });
    return wrapper.html();
}
var nodeCount = 0;
/**
 * html结构转成node定义
 * @param html
 */
function htmlToNode(html, state) {
    var result = [];
    nodeCount = 0;
    var container = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div></div>');
    if (html.indexOf('<body') >= 0 && html.indexOf('</body>') >= 0) {
        html = jquery__WEBPACK_IMPORTED_MODULE_22___default()(html).find('body').html();
    }
    container.html(html);
    // 如果有export-wrapper的节点，则是copy的幕布的内容，IE下copy的时候，会把外面的的这个div也复制上，所以这里获取他里边的内容
    var wrapper = container.find('.export-wrapper');
    if (wrapper.length) {
        html = wrapper.html();
    }
    container.html(html);
    if (container.find('.mubu-node').length > 0) {
        // 是幕布格式的html，执行幕布转换
        // 用于文档内的复制与粘贴
        if (container.children('.content').length > 0) {
            // 根目录就存在content了，说明没copy上最外层的ul，手动套一层
            container.html('<ul><li>' + html + '</li></ul>');
        }
        container.find('.content-link').removeAttr('style');
        var rootList = container.children('ul').children('li');
        buildMubuNode(rootList, result, state);
    }
    else if (container.find('.node').length > 0
        && container.find('.content-wrapper').length > 0
        && container.find('.bullet-wrapper').length > 0
        && container.find('.content[data-id]').length > 0) {
        // 是幕布文档格式的html，执行幕布转换
        if (container.children('.content-wrapper').length > 0) {
            // 根目录就存在content了，说明没copy上最外层的node，手动套一层
            container.html('<div class="node"><div class="node-wrapper">' + html + '</div></div>');
        }
        if (container.children('.node-wrapper').length > 0) {
            // 根目录就存在node-wrapper了，说明没copy上最外层的node，手动套一层
            container.html('<div class="node">' + html + '</div>');
        }
        container.find('.content-link').removeAttr('style');
        var rootList = container.children('.node');
        buildMubuDocNode(rootList, result, state);
    }
    else if (container.find('.name[data-wfid]').length > 0) {
        // 是workflowy的内容
        if (container.children('.name').length > 0) {
            // 根目录就存在content了，说明没copy上最外层的ul，手动套一层
            container.html('<ul><li>' + html + '</li></ul>');
        }
        var rootList = container.children('ul').children('li');
        buildWorkflowyNode(rootList, result);
    }
    else {
        buildNormalNode(container, result);
        // 对html文本进行转义
        recursive(result, function (resultNode) {
            resultNode.text = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.trim(resultNode.text || '');
        });
    }
    if (nodeCount === 0) {
        html = html.replace(/<br>/g, '\n').replace(/<br\/>/g, '\n');
        container.html(html);
        // 没有被html格式化成多个节点，用换行符分隔
        var lines = container.text().split('\n');
        if (lines.length > 0) {
            result = [];
            jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(lines, function (index, line) {
                if (jquery__WEBPACK_IMPORTED_MODULE_22___default.a.trim(line) !== '') {
                    nodeCount++;
                    result.push({
                        text: line,
                    });
                }
            });
        }
        // 对html文本进行转义
        recursive(result, function (resultNode) {
            resultNode.text = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.trim(resultNode.text || '');
        });
    }
    return {
        size: nodeCount,
        nodes: result,
    };
}
/**
 * 把粘贴的节点 html 转为文本数组
 */
function getTextFromPasteHtml(html, state) {
    var segments = htmlToText(html);
    // 替换粘贴进来的 mention id
    Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(segments, function (segment) {
        if (segment.type === TextType.Mention) {
            segment.id = newId(state.getEditorProps().id);
        }
    });
    return segments;
}
/**
 * 递归转换幕布导出格式的节点
 * 同样适用于对于文档内容的粘贴与复制
 * @param list
 * @param targetArr
 */
function buildMubuNode(list, targetArr, state) {
    list.each(function () {
        var item = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
        var contentBox = item.children('.content');
        var nodeObj = {
            text: getTextFromPasteHtml(contentBox.html(), state),
        };
        var noteDom = item.children('.note');
        if (noteDom.length > 0 && noteDom.text() !== '') {
            nodeObj.note = getTextFromPasteHtml(noteDom.html().replace(/<br>/g, '\n').replace(/<br\/>/g, '\n'), state);
        }
        if (contentBox.hasClass('finished')) {
            nodeObj.finish = true;
        }
        if (contentBox.hasClass('collapsed')) {
            nodeObj.collapsed = true;
        }
        if (contentBox.attr('heading')) {
            var heading = parseInt(contentBox.attr('heading') || '');
            if (heading) {
                nodeObj.heading = heading;
            }
        }
        // 把幕布的文字颜色转成背景色高亮
        var color = contentBox.attr('color');
        if (color && MubuFontColorMap[color]) {
            nodeObj.highlight = MubuFontColorMap[color];
        }
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(HighlightColorMap).forEach(function (colorName) {
            if (contentBox.hasClass("highlight-" + colorName)) {
                nodeObj.highlight = colorName;
            }
        });
        if (contentBox.attr('images')) {
            nodeObj.images = JSON.parse(decodeURIComponent(contentBox.attr('images') || ''));
            nodeObj.images = nodeObj.images.map(function (img) {
                img.id = newId(state.getEditorProps().id);
                return img;
            });
        }
        targetArr.push(nodeObj);
        nodeCount++;
        var childrenContainer = item.children('ul');
        if (childrenContainer.length > 0) {
            var childrenItems = childrenContainer.children('li');
            if (childrenItems.length > 0) {
                nodeObj.children = [];
                buildMubuNode(childrenItems, nodeObj.children, state);
            }
        }
    });
}
/**
 * 递归转换幕布源文档格式的html
 * @param list
 * @param targetArr
 */
function buildMubuDocNode(list, targetArr, state) {
    list.each(function () {
        var item = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
        var nodeWrapper = item.children('.node-wrapper');
        var contentWrapper = nodeWrapper.children('.content-wrapper');
        var contentBox = contentWrapper.children('.content');
        var nodeObj = {
            text: getTextFromPasteHtml(contentBox.html(), state),
        };
        var noteDom = nodeWrapper.children('.note');
        if (noteDom.length > 0 && noteDom.text() !== '') {
            nodeObj.note = getTextFromPasteHtml(noteDom.html(), state);
        }
        if (item.hasClass('finished')) {
            nodeObj.finish = true;
        }
        if (item.hasClass('collapsed')) {
            nodeObj.collapsed = true;
        }
        if (contentWrapper.hasClass('heading1')) {
            nodeObj.heading = 1;
        }
        if (contentWrapper.hasClass('heading2')) {
            nodeObj.heading = 2;
        }
        if (contentWrapper.hasClass('heading3')) {
            nodeObj.heading = 3;
        }
        if (contentWrapper.attr('color')) {
            nodeObj.color = contentWrapper.attr('color');
        }
        // 把幕布的文字颜色转成背景色高亮
        var color = contentBox.attr('color');
        if (color && MubuFontColorMap[color]) {
            nodeObj.highlight = MubuFontColorMap[color];
        }
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(HighlightColorMap).forEach(function (colorName) {
            if (contentWrapper.hasClass("highlight-" + colorName)) {
                nodeObj.highlight = colorName;
            }
        });
        var imageList = nodeWrapper.children('.attach-image-list');
        if (imageList.length > 0) {
            nodeObj.images = [];
            imageList.children('.attach-image-item').each(function () {
                var imgDefStr = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).attr('def');
                if (imgDefStr) {
                    var imgDef = JSON.parse(decodeURIComponent(imgDefStr));
                    nodeObj.images.push(__assign({}, imgDef, { id: newId(state.getEditorProps().id) }));
                }
            });
        }
        targetArr.push(nodeObj);
        nodeCount++;
        var childrenContainer = item.children('.children');
        if (childrenContainer.length > 0) {
            var childrenItems = childrenContainer.children('.node');
            if (childrenItems.length > 0) {
                nodeObj.children = [];
                buildMubuDocNode(childrenItems, nodeObj.children, state);
            }
        }
    });
}
/**
 * 递归转换workflowy的节点
 * @param list
 * @param targetArr
 */
function buildWorkflowyNode(list, targetArr) {
    list.each(function () {
        var item = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
        var content = item.children('.name');
        var text = content.text();
        var nodeObj = {
            text: text,
        };
        var noteDom = item.children('.note');
        if (noteDom.length > 0 && noteDom.text() !== '') {
            nodeObj.note = noteDom.text();
        }
        if (content.hasClass('done')) {
            nodeObj.finish = true;
        }
        targetArr.push(nodeObj);
        nodeCount++;
        var childrenContainer = item.children('ul');
        if (childrenContainer.length > 0) {
            var childrenItems = childrenContainer.children('li');
            if (childrenItems.length > 0) {
                nodeObj.children = [];
                buildWorkflowyNode(childrenItems, nodeObj.children);
            }
        }
    });
}
var blockSelector = 'div,p,ul,ol,li,pre,h1,h2,h3,h4,h5,h6,blockquote,table,tbody,tr';
function buildNormalNode(container, targetArr) {
    var childNodes = container[0].childNodes;
    var newLine = true;
    for (var i = 0; i < childNodes.length; i++) {
        var childNode = childNodes[i];
        var $childNode = jquery__WEBPACK_IMPORTED_MODULE_22___default()(childNode);
        var isBlock = $childNode.is(blockSelector);
        if (isBlock) {
            if ($childNode.is('li')) {
                // 是列表项目，判断下级
                var nextLevel = $childNode.children('ul,ol');
                if (nextLevel.length > 0) {
                    var copy = jquery__WEBPACK_IMPORTED_MODULE_22___default()(childNode).clone();
                    // 克隆一份，获取内容
                    copy.children('ul,ol').nextAll().remove();
                    copy.children('ul,ol').remove();
                    var eleText = copy.text();
                    var item = {
                        text: eleText,
                        children: [],
                    };
                    targetArr.push(item);
                    nodeCount++;
                    copy.empty().append(nextLevel);
                    buildNormalNode(copy, item.children);
                }
                else {
                    buildNormalNode($childNode, targetArr);
                }
            }
            else if ($childNode.is('tr')) {
                // 如果是table的tr，给每列中间加一个/t分隔文本
                $childNode.children('td').each(function (index) {
                    if (index !== 0) {
                        jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).prepend('\t');
                    }
                });
                buildNormalNode($childNode, targetArr);
            }
            else {
                buildNormalNode($childNode, targetArr);
            }
            newLine = true;
        }
        else if ($childNode.is('br')) {
            newLine = true;
        }
        else {
            var eleText = $childNode.text().replace(/\n/g, '');
            if (eleText) {
                if (newLine) {
                    if (jquery__WEBPACK_IMPORTED_MODULE_22___default.a.trim(eleText)) {
                        // 如果是新的行的开始，如果全是空格，也不添加
                        var item = {
                            text: eleText,
                        };
                        nodeCount++;
                        targetArr.push(item);
                        newLine = false;
                    }
                }
                else {
                    // 不是新的一行，向前追加内容
                    targetArr[targetArr.length - 1].text += eleText;
                    newLine = false;
                }
            }
        }
    }
}

var TeaLogger$4 = TeaManager.getDecorator();
/**
 * 用content元素来响应鼠标
 * 通过坐标的计算来判断选中了哪些主题
 * 选中的样式添加到节点上
 */
var Selector = /** @class */ (function () {
    function Selector(props) {
        var _this = this;
        this.sourceId = '';
        this.sourceIndex = -1;
        // 鼠标框选时，开始的元素，有可能是note，也有可能是content
        this.sourceBeginTarget = jquery__WEBPACK_IMPORTED_MODULE_22___default()();
        // 当前所有主题的，保存到一个数组中
        this.nodeArray = [];
        // 每一个节点的索引
        this.nodeIndex = {};
        // 选中的id数组
        this.selected = [];
        // 选中的节点对象，树形结构
        this.selectedNodes = [];
        // 是否全部完成了
        this.allFinished = true;
        this.allHeading = 0;
        this.allHighlight = undefined;
        // 复制时的内容容器
        this.copyContainer = null;
        this.totalIndex = 0;
        /**
         * 选区键盘事件
         */
        this.KEY_EVENT = 'keydown.selector-operate';
        /**
         * 选区工具栏
         */
        this.toolbarHolder = null;
        this.handleWindowMouseDown = function (e) {
            /* 点击工具栏不取消 */
            if (_this.toolbarHolder && _this.toolbarHolder.getContainer().contains(e.target)) {
                return;
            }
            _this.cancel(e.target);
        };
        /**
         * 多选快捷键
         */
        this.handleSelectorKeyDown = function (e) {
            if (_this.state.readonly) {
                return;
            }
            var code = e.keyCode || -1;
            if (code === KeyCode.Enter) {
                if (e[environment.metaKey] && !e.shiftKey) {
                    // cmd + enter 完成多条
                    _this.handleFinish(_this.allFinished, 'keydown');
                }
            }
            else if (code === KeyCode.Tab && !e.shiftKey) {
                // Tab, 缩进一级
                e.preventDefault();
                _this.handleIndent(_this.selectedNodes);
            }
            else if (code === KeyCode.Tab && e.shiftKey) {
                /* Tab + Shift，回退一级 */
                e.preventDefault();
                _this.handleOutdent(_this.selectedNodes);
            }
            else if (code >= KeyCode.Num1 && code <= KeyCode.Num4 && e.altKey) {
                // cmd + shift + 1 2 3 4，设置标题样式，heading 为 4 的时候是正文
                e.preventDefault();
                var heading = code - KeyCode.Num0;
                _this.handleHeading(heading, 'keydown');
            }
            else if (code >= KeyCode.Numpad1 && code <= KeyCode.Numpad4 && e.altKey) {
                // cmd + shift + （小键盘）1 2 3 0，设置标题样式，heading 为 4 的时候是正文
                e.preventDefault();
                var heading = code - KeyCode.Numpad0;
                _this.handleHeading(heading, 'keydown');
            }
            else if (code === KeyCode.Backspace || code === KeyCode.Delete) {
                // 删除
                var target = jquery__WEBPACK_IMPORTED_MODULE_22___default()(e.target);
                if (!target.is('input') && !target.is('textarea') && !target.is('.content, .note')) {
                    e.preventDefault();
                    _this.handleDelete('keydown');
                }
            }
            else if (e.altKey && Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(HighlightKeyCodeMap).find(function (key) { return +key === code; })) {
                // 高亮
                e.preventDefault();
                _this.handleHighlight(HighlightKeyCodeMap[code], 'keydown');
            }
        };
        var model = props.model, engine = props.engine, state = props.state, selectHolder = props.selectHolder, viewport = props.viewport, eventSource = props.eventSource;
        this.model = model;
        this.engine = engine;
        this.selectHolder = selectHolder;
        this.state = state;
        this.wrapper = viewport.nodeWrapper;
        this.eventSource = eventSource;
        window.addEventListener('mousedown', this.handleWindowMouseDown);
    }
    Selector.prototype.initNodes = function () {
        this.totalIndex = 0;
        this.nodeArray = [];
        this.nodeIndex = {};
        var nodes = this.model.getRootSubNodes();
        this.addNodeArray(nodes);
    };
    Selector.prototype.destroy = function () {
        window.removeEventListener('mousedown', this.handleWindowMouseDown);
        if (this.copyContainer) {
            this.copyContainer.remove();
        }
    };
    Selector.prototype.addNodeArray = function (nodes) {
        var me = this;
        if (nodes && nodes.length > 0) {
            jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodes, function (index, node) {
                me.nodeArray.push(node);
                me.nodeIndex[node.id] = me.totalIndex;
                if (node.id === me.sourceId) {
                    me.sourceIndex = me.totalIndex;
                }
                me.totalIndex++;
                if (!node.collapsed && node.children) {
                    me.addNodeArray(node.children);
                }
            });
        }
    };
    /**
     * 查找节点
     * 用户鼠标框选
     * @param currentY 当前鼠标Y坐标
     */
    Selector.prototype.findSelectByPosition = function (currentY) {
        var sourcePosition = this.sourceBeginTarget.offset();
        this.selected = [];
        var i;
        var testNode;
        var selfDistance = 5; // 距离自己多远，就认为选中了自己
        var siblingsDistance = 10; // 进入到旁边元素多远，就认为选中了旁边的元素
        if (currentY < sourcePosition.top - selfDistance) {
            // 鼠标在源元素的上边，向上查找
            for (i = this.sourceIndex - 1; i >= 0; i--) {
                testNode = this.nodeArray[i];
                var nodeContainer = getNodeContainer(testNode.id);
                var contentBottom = nodeContainer.offset().top;
                var nodeWrapper = nodeContainer.children('.node-wrapper');
                var contentWrapper = nodeWrapper.children('.content-wrapper');
                contentBottom += contentWrapper.outerHeight() || 0;
                var noteEditor = nodeWrapper.children('.note');
                if (noteEditor.length) {
                    contentBottom += noteEditor.outerHeight() || 0;
                }
                var imageList = nodeWrapper.children('.attach-image-list');
                if (imageList.length) {
                    contentBottom += imageList.outerHeight() || 0;
                }
                if (currentY < contentBottom - siblingsDistance) {
                    // 在范围内
                    this.selected.push(testNode.id);
                }
                else {
                    break;
                }
            }
            this.selected.reverse();
            this.selected.push(this.sourceId);
        }
        else if (currentY > sourcePosition.top + (this.sourceBeginTarget.outerHeight() || 0) + selfDistance) {
            // 鼠标在源元素的下边，向下查找
            for (i = this.sourceIndex + 1; i < this.nodeArray.length; i++) {
                testNode = this.nodeArray[i];
                var contentDom = getContentById(testNode.id);
                var contentTop = contentDom.offset().top;
                if (currentY > contentTop + siblingsDistance) {
                    // 在范围内
                    this.selected.push(testNode.id);
                }
                else {
                    break;
                }
            }
            // 将自己插入到最前边
            this.selected.splice(0, 0, this.sourceId);
        }
        this.setSelected();
    };
    /**
     * 查找sourceId到目标id范围中的所有节点
     * 用于shift + 鼠标多选
     */
    Selector.prototype.findSelectByRange = function (targetId) {
        this.initNodes();
        this.selected = [];
        var sourceIndex = this.nodeIndex[this.sourceId];
        var targetIndex = this.nodeIndex[targetId];
        var beginIndex = Math.min(sourceIndex, targetIndex);
        var endIndex = Math.max(sourceIndex, targetIndex);
        while (beginIndex <= endIndex) {
            this.selected.push(this.nodeArray[beginIndex].id);
            beginIndex++;
        }
        this.setSelected();
        this.selectChanged();
    };
    /**
     * 全选
     */
    Selector.prototype.selectAll = function () {
        this.initNodes();
        if (this.nodeArray.length) {
            this.sourceId = this.nodeArray[0].id;
        }
        this.selected = [];
        var me = this;
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(this.nodeArray, function (index, node) {
            me.selected.push(node.id);
        });
        this.setSelected();
        this.selectChanged();
    };
    /**
     * 选中同级元素
     * @param type 正负值，标示向前还是向后
     */
    Selector.prototype.selectSiblings = function (type) {
        if (this.selected.length === 0) {
            // 首先source为选中，后边的处理逻辑就可以都按已经有选中的情况处理了
            this.selected = [this.sourceId];
            this.setSelected();
        }
        else {
            var firstId = this.selected[0];
            if (type < 0) {
                // 向上
                if (firstId === this.sourceId && this.selectedNodes.length > 1) {
                    // 说明当前已经向下选择，去除最后一个节点的选择
                    this.selectedNodes.splice(this.selectedNodes.length - 1, 1);
                    this.setSelectedByNodes();
                }
                else {
                    // 向上选择
                    var firstIndex = this.nodeIndex[firstId];
                    var prependIds = []; // 向上添加选中的节点id
                    if (this.model.isRootSubNode(firstId)) {
                        // 第一个节点已经是顶级节点，向上查找顶级节点
                        var prevNode = this.model.getPrevSibling(firstId);
                        if (prevNode) {
                            prependIds.push(prevNode.id);
                        }
                    }
                    else if (firstIndex > 0) {
                        // 直接向上添加一个节点
                        prependIds.push(this.nodeArray[firstIndex - 1].id);
                    }
                    if (prependIds.length) {
                        this.selected = prependIds.concat(this.selected);
                        this.setSelected();
                    }
                }
            }
            else {
                // 向下
                if (firstId !== this.sourceId) {
                    // 说明当前已经向上选择，去除第一个节点的选择
                    if (this.selectedNodes.length > 1) {
                        // 选中了多个根节点，直接删除根节点
                        this.selectedNodes.splice(0, 1);
                        this.setSelectedByNodes();
                    }
                    else if (this.selectedNodes.length === 1) {
                        // 选中第一个子节点到source节点中间的内容
                        this.findSelectByRange(this.selectedNodes[0].children[0].id);
                        return;
                    }
                }
                else {
                    // 执行向下选择
                    var lastId = this.selectedNodes[this.selectedNodes.length - 1].id;
                    var lastIndex = this.nodeIndex[lastId];
                    var appendIds = []; // 向上添加选中的节点id
                    var nextNode = this.model.getNextSibling(lastId);
                    if (nextNode) {
                        appendIds.push(nextNode.id);
                    }
                    else if (lastIndex < this.nodeArray.length - 1) {
                        // 直接向下添加一个节点
                        appendIds.push(this.nodeArray[lastIndex + 1].id);
                    }
                    if (appendIds.length) {
                        this.selected = this.selected.concat(appendIds);
                        this.setSelected();
                    }
                }
            }
        }
        this.selectChanged();
    };
    /**
     * 设置选中样式，构造选中的节点对象
     */
    Selector.prototype.setSelected = function () {
        var me = this;
        me.allFinished = true;
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('.node.selected').removeClass('selected');
        me.selectedNodes = [];
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(me.selected, function (ind, nodeId) {
            getNodeContainer(nodeId).addClass('selected');
            var node = me.model.getById(nodeId);
            // node 可能已经在协同中被删除了
            if (!node) {
                return;
            }
            if (me.model.isRootSubNode(nodeId)) {
                // 是顶级节点，就添加
                me.selectedNodes.push(node);
            }
            else {
                // 如果父节点没被选中，视其因为第一级节点
                var parentNode = me.model.getParent(nodeId);
                if (me.selected.indexOf(parentNode.id) < 0) {
                    me.selectedNodes.push(node);
                }
            }
        });
        // 重新计算selected，因为选择主节点后，要包括所有子节点，包括没在框选范围内的子节点
        me.selected = [];
        var index = 0;
        recursive(me.selectedNodes, function (node) {
            me.selected.push(node.id);
            if (!node.finish) {
                me.allFinished = false;
            }
            var nodeHeading = (node.heading || 0);
            if (index === 0) {
                me.allHeading = nodeHeading;
                me.allHighlight = node.highlight;
            }
            else {
                if (nodeHeading !== me.allHeading) {
                    me.allHeading = -1;
                }
                if (node.highlight !== me.allHighlight) {
                    me.allHighlight = undefined;
                }
            }
            index++;
        });
    };
    /**
     * 设置选中样式，构造选中的节点对象
     */
    Selector.prototype.setSelectedByNodes = function () {
        var me = this;
        me.allFinished = true;
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('.node.selected').removeClass('selected');
        // 重新计算selected，因为选择主节点后，要包括所有子节点，包括没在框选范围内的子节点
        me.selected = [];
        recursive(me.selectedNodes, function (node) {
            me.selected.push(node.id);
            if (!node.finish) {
                me.allFinished = false;
            }
            getNodeContainer(node.id).addClass('selected');
        });
    };
    /**
     * 创建菜单
     */
    Selector.prototype.createMenu = function () {
        var _this = this;
        var me = this;
        if (me.state.readonly) {
            return;
        }
        /* 若菜单存在，则先销毁 */
        if (this.toolbarHolder) {
            this.toolbarHolder.destroy();
            this.toolbarHolder = null;
        }
        if (me.selected.length > 1) {
            /* 构建多选菜单 */
            var _a = countNodeWords(me.selectedNodes, true, me.state.getEditorProps().locale), nodeCount = _a.nodeCount, wordCount = _a.wordCount;
            this.toolbarHolder = new ToolbarHolder({
                engine: this.engine,
                selectedIds: this.selected,
                finish: this.allFinished,
                heading: this.allHeading,
                highlight: this.allHighlight,
                highlightEnabled: this.state.getEditorState().highlightEnabled,
                itemsCount: nodeCount,
                wordsCount: wordCount,
                onFinish: function (finish) { return _this.handleFinish(finish, 'mouseclick'); },
                onDelete: function () { return _this.handleDelete('mouseclick'); },
                onHeading: function (heading) { return _this.handleHeading(heading, 'mouseclick'); },
                onHighlight: function (highlight) { return _this.handleHighlight(highlight, 'mouseclick'); },
            });
            var firstId = this.selected[0];
            var firstContainer = getNodeContainer(firstId);
            this.toolbarHolder.mountTo(firstContainer);
        }
    };
    /**
     * 构建被复制的内容
     */
    Selector.prototype.setCopyContent = function () {
        var me = this;
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('.cp-content').remove();
        this.copyContainer = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<iframe class="cp-content" src="" contenteditable="true" designMode="on"></iframe>').appendTo('body');
        var copyWin = this.copyContainer[0].contentWindow;
        var copyDoc = this.copyContainer[0].contentDocument || copyWin.document;
        copyDoc.designMode = 'on';
        copyDoc.contentEditable = true;
        copyDoc.write('<html>' +
            '<head>' +
            '<style>' +
            'body{font-family: \'Helvetica Neue\',\'Hiragino Sans GB\',\'WenQuanYi Micro Hei\',\'Microsoft Yahei\',sans-serif;}' +
            '</style>' +
            '</head>' +
            '<body></body>' +
            '</html>');
        if (environment.isFirefox) {
            // 否则火狐下一直加载
            copyDoc.close();
        }
        var copyBody = copyDoc.body;
        jquery__WEBPACK_IMPORTED_MODULE_22___default()(copyBody).empty();
        var contentWrapper = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="export-wrapper"></div>').appendTo(copyBody);
        var html = convertToHtml(this.selectedNodes, this.state);
        contentWrapper.append(html);
        removeSelection();
        var range = copyDoc.createRange();
        range.selectNode(jquery__WEBPACK_IMPORTED_MODULE_22___default()(copyBody).children()[0]);
        copyWin.getSelection().addRange(range);
        copyWin.focus();
        jquery__WEBPACK_IMPORTED_MODULE_22___default()(copyDoc).off().on('keydown', function (e) {
            if (!(e[environment.metaKey] && (e.keyCode === KeyCode.C || e.keyCode === KeyCode.X))) {
                // 除复制和剪切以后，都阻止默认
                e.preventDefault();
            }
            else {
                // 没有复制和剪切权限就不处理了
                var state = me.state.getEditorState();
                if (!state.copyEnabled) {
                    me.eventSource.trigger(SourceEvent.COPY_DENIED);
                    e.preventDefault();
                    return;
                }
            }
            // 将快捷键透传给父窗口
            var eventData = {
                keyCode: e.keyCode,
                shiftKey: e.shiftKey,
                ctrlKey: e.ctrlKey,
                metaKey: e.metaKey,
                altKey: e.altKey
            };
            var event = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.Event('keydown', eventData);
            jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).trigger(event);
        }).on('cut', function () {
            var event = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.Event('cut');
            jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).trigger(event);
        });
    };
    /**
     * 选择变化后
     */
    Selector.prototype.selectChanged = function () {
        var me = this;
        this.createMenu();
        var wrapper = this.wrapper;
        var currentFocus = wrapper.find('.content:focus, .note:focus');
        if (currentFocus.length) {
            currentFocus.blur();
        }
        if (this.selected.length > 0) {
            this.setCopyContent();
            jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).off('cut.selector').on('cut.selector', function () {
                if (me.state.readonly) {
                    return;
                }
                // 多选剪切，程序删除，延迟一下，否则立即删除，就复制不到内容了
                setTimeout(function () {
                    me.delete();
                }, 100);
            });
            jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).off(this.KEY_EVENT).on(this.KEY_EVENT, this.handleSelectorKeyDown);
        }
        me.selectHolder.setSelectIds(me.selected);
        me.selectHolder.setSelectNodes(me.selectedNodes);
    };
    Selector.prototype.getEditorId = function (editor) {
        if (editor.hasClass('note')) {
            return (editor.parent().parent().attr('id') || '').toString();
        }
        else {
            return editor.data('id').toString();
        }
    };
    Selector.prototype.init = function () {
        var me = this;
        var wrapper = this.wrapper;
        var eventSpace = me.state.getEditorState().eventSpace;
        var contentSelector = '.content'; // 应用于shift+上下多选
        var editorSelector = '.content, .note'; // 应用于全选和框选，和shift多选
        // 绑定键盘快捷键选择相关
        jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).on("keydown.selector" + eventSpace, function (downE) {
            var target = jquery__WEBPACK_IMPORTED_MODULE_22___default()(downE.target);
            if (target.is('input') || target.is('textarea')) {
                return;
            }
            var code = downE.keyCode;
            if (code === KeyCode.A && downE[environment.metaKey]) {
                // cmd + a 全选
                if (me.selected.length > 0) {
                    me.selectAll();
                    downE.preventDefault();
                    return;
                }
                if (target.is(editorSelector)) {
                    // 在主题输入框中，如果已经全部选择了文本，执行全选
                    var cursor = getCursorPosition();
                    if (cursor.start === 0 && cursor.end === target.text().length) {
                        // 文字全选了，执行全部条目的全选
                        me.selectAll();
                        downE.preventDefault();
                    }
                }
                else if (!target.is('input') && !target.is('textarea') && !target.is('[contenteditable]')) {
                    // 不是在输入框中，阻止全部选择文本
                    downE.preventDefault();
                }
            }
            else if (code === KeyCode.ArrowUp || code === KeyCode.ArrowDown) {
                // shift + meta 向上向下
                if (downE[environment.metaKey] && downE.shiftKey) {
                    if (me.selectedNodes.length > 0) {
                        if (code === KeyCode.ArrowUp) {
                            // 向上移动
                            me.handleMoveNodesUp(me.selectedNodes);
                        }
                        else {
                            // 向下移动
                            me.handleMoveNodesDown(me.selectedNodes);
                        }
                    }
                }
                else if (downE.shiftKey) {
                    // shift + 上下，进行内容选择
                    var direction = code - 39;
                    if (me.selected.length > 0) {
                        me.selectSiblings(direction);
                        return;
                    }
                    if (target.is(contentSelector)) {
                        // 在主题输入框中，如果已经全部选择了文本，执行全选
                        var cursor = getCursorPosition();
                        if ((cursor.start === 0 && direction < 0)
                            || (cursor.end === target.text().length && direction > 0)) {
                            // 再输入状态下，光标已经到了起点，开始选择
                            me.sourceId = me.getEditorId(target);
                            me.initNodes();
                            me.selectSiblings(direction);
                        }
                    }
                }
                else if (!me.state.getEditorState().isMentionActive) {
                    // 没有按任何的组合键
                    if (me.selected.length > 0) {
                        me.cancel();
                        if (code === KeyCode.ArrowUp) {
                            me.engine.toPrevNode(me.sourceId, false);
                        }
                        else {
                            me.engine.toNextNode(me.sourceId, false);
                        }
                    }
                }
            }
        });
        // 开始绑定鼠标操作事件
        wrapper.on('mousedown.selector', editorSelector, function (downE) {
            if (downE.button === 2) {
                // 按的右键，不处理
                return;
            }
            var mouseTarget = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            me.sourceBeginTarget = mouseTarget;
            var clickId = me.getEditorId(mouseTarget);
            if (downE.shiftKey) {
                // 按着shift多选
                if (me.selected.length === 0) {
                    // 当前没有选择，设置sourceId
                    // 获取之前focus的元素
                    var currentFocus = wrapper.find('.content:focus, .note:focus');
                    if (currentFocus.length === 0) {
                        // 既没有选择，也没有当前的焦点元素，不执行任何操作
                        return;
                    }
                    if (me.model.isRootNode(me.sourceId) || me.model.isRootNode(clickId)) {
                        return;
                    }
                    me.sourceId = me.getEditorId(currentFocus);
                }
                if (me.sourceId !== clickId) {
                    downE.stopPropagation();
                    downE.preventDefault();
                    me.findSelectByRange(clickId);
                }
                return;
            }
            me.sourceId = clickId;
            if (me.model.isRootNode(me.sourceId)) {
                return;
            }
            // 标示圆点不响应
            jquery__WEBPACK_IMPORTED_MODULE_22___default()('.bullet').addClass('selecting');
            var begin = false; // 是否开始
            me.selected = [];
            me.selectedNodes = [];
            if (me.toolbarHolder) {
                me.toolbarHolder.destroy();
            }
            jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).on("mousemove.selector" + eventSpace, function (moveE) {
                var currentY = moveE.pageY;
                if (!begin) {
                    // 未开始，判断是否开始
                    var sourcePosition = mouseTarget.offset();
                    var bottomBounding = sourcePosition.top + (mouseTarget.outerHeight() || 0);
                    if (currentY < sourcePosition.top
                        || currentY > bottomBounding) {
                        // Y坐标已经超出了元素本身，开始选择多条
                        me.initNodes();
                        begin = true;
                    }
                }
                if (!begin) {
                    return;
                }
                // 开始查找选中了哪些几点
                me.findSelectByPosition(currentY);
            });
            jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).on("mouseup.selector" + eventSpace, function () {
                jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).off('mousemove.selector').off('mouseup.selector');
                jquery__WEBPACK_IMPORTED_MODULE_22___default()('.bullet.selecting').removeClass('selecting');
                if (me.selected.length > 0) {
                    me.selectChanged();
                }
            });
        });
    };
    Selector.prototype.cancel = function (srcElement) {
        var me = this;
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('.node.selected').removeClass('selected');
        me.nodeArray = [];
        me.nodeIndex = {};
        if (this.toolbarHolder) {
            this.toolbarHolder.destroy();
            this.toolbarHolder = null;
        }
        me.selected = [];
        me.selectedNodes = [];
        if (me.copyContainer) {
            var copyWin = me.copyContainer[0].contentWindow;
            var copyDoc = me.copyContainer[0].contentDocument || copyWin.document;
            if (environment.isIE) {
                me.copyContainer.remove();
                me.copyContainer = null;
                // 如果是IE，取消后，再次执行一次focus，否则无法编辑
                if (srcElement) {
                    if (jquery__WEBPACK_IMPORTED_MODULE_22___default()(srcElement).is('[contenteditable]')) {
                        moveCursorEnd(jquery__WEBPACK_IMPORTED_MODULE_22___default()(srcElement));
                    }
                }
            }
            else {
                var copyBody = copyDoc.body;
                jquery__WEBPACK_IMPORTED_MODULE_22___default()(copyBody).empty();
            }
        }
        jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).off('cut.selector').off(this.KEY_EVENT);
        me.selectHolder.clear();
    };
    Selector.prototype.getIds = function () {
        return this.selected;
    };
    Selector.prototype.getNodes = function () {
        return this.selectedNodes;
    };
    Selector.prototype.delete = function () {
        var topIds = [];
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(this.selectedNodes, function (index, node) {
            topIds.push(node.id);
        });
        this.engine.deleteNodeDirectly(topIds);
        this.cancel();
    };
    /**
     * 设置选中状态
     * @param ids
     */
    Selector.prototype.setSelectedIds = function (ids) {
        this.selected = ids;
        this.setSelected();
        this.selectChanged();
    };
    /**
     * 设置节点属性
     * @param name
     * @param value
     */
    Selector.prototype.setNodeAttr = function (name, value) {
        this.engine.setNodeAttr(this.selected, name, value);
    };
    /**
     * 处理 Finish 操作
     * @param finish 触发操作时的状态
     * @param type 操作类型
     */
    Selector.prototype.handleFinish = function (finish, type) {
        this.allFinished = !finish;
        this.engine.setFinishNode(this.selected, this.allFinished);
        this.setCopyContent();
        if (this.toolbarHolder) {
            this.toolbarHolder.update({ finish: this.allFinished });
        }
    };
    /**
     * 处理删除操作
     * @param selecetIds 删除项（deprecated）
     * @param type 操作类型
     */
    Selector.prototype.handleDelete = function (type) {
        this.delete();
        if (this.toolbarHolder) {
            this.toolbarHolder.destroy();
        }
    };
    /**
     * 处理 Heading 操作
     * @param heading 操作时的 heading 值
     * @type 操作类型
     */
    Selector.prototype.handleHeading = function (heading, type) {
        /* 为 4 的时候是正文 */
        if (heading === this.allHeading || heading === 4) {
            heading = 0;
        }
        this.allHeading = heading;
        this.setNodeAttr('heading', heading);
        this.setCopyContent();
        if (this.toolbarHolder) {
            this.toolbarHolder.update({ heading: heading });
        }
    };
    /**
     * 处理高亮操作
     * @param highlight 高亮颜色
     */
    Selector.prototype.handleHighlight = function (highlight, type) {
        if (!this.state.getEditorState().highlightEnabled) {
            return;
        }
        if (highlight === this.allHighlight) {
            highlight = undefined;
        }
        this.allHighlight = highlight;
        this.engine.toggleHighlight(this.selected, highlight);
        this.setCopyContent();
        if (this.toolbarHolder) {
            this.toolbarHolder.update({ highlight: highlight });
        }
    };
    /**
     * 缩进选中的节点
     * @param nodes 选中的节点
     */
    Selector.prototype.handleIndent = function (nodes) {
        this.engine.indentNodes(this.selectedNodes);
        this.setSelected();
        this.setCopyContent();
    };
    /**
     * 回退选中的节点
     * @param nodes 选中的节点
     */
    Selector.prototype.handleOutdent = function (nodes) {
        this.engine.outdentNodes(this.selectedNodes);
        this.setSelected();
        this.setCopyContent();
    };
    /**
     * 向上移动节点
     * @param nodes 移动的节点
     */
    Selector.prototype.handleMoveNodesUp = function (nodes) {
        var prevNodeId = this.engine.getPrevNodeId(nodes[0].id);
        if (prevNodeId && !this.model.isRootNode(prevNodeId)) {
            this.engine.moveNodes(nodes, prevNodeId, 'prev');
        }
    };
    /**
     * 向下移动节点
     * @param nodes 移动的节点
     */
    Selector.prototype.handleMoveNodesDown = function (nodes) {
        this.engine.moveNodesNext(nodes);
    };
    __decorate([
        Bind(),
        TeaLogger$4('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var finish = args[0], type = args[1];
            var action = finish ? 'activate' : 'complete';
            var source = type === 'mouseclick' ? 'outline_toolbar' : 'shortkey';
            return {
                action: action,
                attr_op_status: 'effective',
                eventType: type,
                source: source,
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], Selector.prototype, "handleFinish", null);
    __decorate([
        Bind(),
        TeaLogger$4('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var type = args[0];
            var source = type === 'mouseclick' ? 'outline_toolbar' : 'shortkey';
            return {
                action: 'delete_item',
                attr_op_status: 'effective',
                eventType: type,
                source: source,
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], Selector.prototype, "handleDelete", null);
    __decorate([
        Bind(),
        TeaLogger$4('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var h = args[0], type = args[1];
            var action = (h === 1 && 'heading-h1') || (h === 2 && 'heading-h2') || (h === 3 && 'heading-h3') || 'set_as_text';
            var attr_op_status = h === context.allHeading && h !== 4 ? 'cancel' : 'effective';
            var source = type === 'mouseclick' ? 'outline_toolbar' : 'shortkey';
            return {
                action: action,
                attr_op_status: attr_op_status,
                eventType: type,
                source: source,
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], Selector.prototype, "handleHeading", null);
    __decorate([
        Bind(),
        TeaLogger$4('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var highlight = args[0], type = args[1];
            var action = "highlight_" + highlight;
            var attr_op_status = highlight === context.allHighlight ? 'cancel' : 'effective';
            var source = type === 'mouseclick' ? 'outline_toolbar' : 'shortkey';
            return {
                action: action,
                attr_op_status: attr_op_status,
                eventType: type,
                source: source,
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType(),
            };
        })
    ], Selector.prototype, "handleHighlight", null);
    __decorate([
        Bind(),
        TeaLogger$4('toggle_attribute', function () {
            return {
                action: 'tab',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], Selector.prototype, "handleIndent", null);
    __decorate([
        Bind(),
        TeaLogger$4('toggle_attribute', function () {
            return {
                action: 'shift_tab',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], Selector.prototype, "handleOutdent", null);
    __decorate([
        Bind(),
        TeaLogger$4('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'move_item_up',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], Selector.prototype, "handleMoveNodesUp", null);
    __decorate([
        Bind(),
        TeaLogger$4('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'move_item_down',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], Selector.prototype, "handleMoveNodesDown", null);
    return Selector;
}());

var TeaLogger$5 = TeaManager.getDecorator();
/**
 * Created by apple on 17/3/5.
 * 图片编辑器模块
 */
var ImageEditor = /** @class */ (function () {
    function ImageEditor(editorId, eventSource, state) {
        this.editorOptions = null;
        this.editorId = editorId;
        this.eventSource = eventSource;
        this.state = state;
    }
    ImageEditor.prototype.init = function (options) {
        this.editorOptions = options;
    };
    /**
     * 笔记插入图片的方法
     * @param nodeId 父元素的nodeId
     */
    ImageEditor.prototype.insert = function (nodeId) {
        var imageId = newId(this.editorId);
        var data = {
            id: nodeId,
            imageId: imageId
        };
        this.eventSource.trigger(SourceEvent.ADD_IMAGE, data);
    };
    /**
     * 文本是否是图片名，类似xxxxx.png
     * @param text
     * @returns {*|boolean}
     * @deprecated 此处本用来检测无法上传图片时给予 Tip，但是目前暂无无法上传的 case
     */
    ImageEditor.prototype.textIsImage = function (text) {
        return text && text.length > 4 &&
            (text.indexOf('.png') === text.length - 4 ||
                text.indexOf('.jpg') === text.length - 4 ||
                text.indexOf('.gif') === text.length - 4 ||
                text.indexOf('.jpeg') === text.length - 5);
    };
    /**
     * 读取剪贴板里的图片
     * @param nodeId
     * @param clipboardData
     * @param clipboardText 剪贴板中的文本
     * @return boolean 是否剪贴板中包含图片，并且成功读取出了图片
     */
    ImageEditor.prototype.readClipboardImage = function (nodeId, clipboardData, clipboardText) {
        var _this = this;
        // 优先检测复制的文件
        if (clipboardData) {
            var items = clipboardData.items || clipboardData.files;
            var len = items.length;
            for (var i = 0; i < len; i++) {
                var item = items[i];
                // files
                if (!clipboardData.items && /image/.test(item.type)) {
                    return this.readImage(item, { nodeId: nodeId }, false);
                    // items
                }
                else if (item.kind === 'file' && /image/.test(item.type)) {
                    var file = item.getAsFile();
                    if (file) {
                        return this.readImage(file, { nodeId: nodeId }, false);
                    }
                }
            }
        }
        // 然后去解析复制的 html
        if (clipboardText) {
            // 优先解析一下是否是复制的幕布图片
            var imageData = getDataFromCopyImageHtml(clipboardText);
            if (imageData && this.editorOptions) {
                this.editorOptions.onInsertCopy(__assign({}, imageData, { nodeId: nodeId, id: newId(this.editorId) }));
                return true;
            }
            // 不是的话，拿匹配出来的图片 url 去上传
            var imageUrl = getUrlFromCopyImageHtml(clipboardText);
            if (imageUrl) {
                urlToBlob(imageUrl)
                    .then(function (blob) {
                    _this.readImage(blob, { nodeId: nodeId }, false);
                })
                    .catch(function (e) {
                    console.error(e);
                });
                return true;
            }
        }
        return false;
    };
    /**
     * 读取图片
     * @param item
     * @param extendData {Object} 扩展数据
     * @property extendData.nodeId 添加到的笔记节点id，可空
     * @property extendData.x 图片x坐标，可空
     * @property extendData.y 图片y坐标，可空
     * @param tipError 是否提示无法读取，可空
     *
     * @returns {boolean}
     */
    ImageEditor.prototype.readImage = function (item, extendData, tipError) {
        var _this = this;
        if (typeof FileReader === 'undefined' && tipError !== false) {
            /* TODO 浏览器不支持 Tip */
            return false;
        }
        var me = this;
        var reader = new FileReader();
        reader.onload = function (e) {
            var base64Url = e.target.result;
            var data = {
                id: extendData.nodeId,
                imageId: newId(me.editorId),
                base64Data: base64Url
            };
            _this.eventSource.trigger(SourceEvent.ADD_IMAGE, data);
        };
        reader.readAsDataURL(item);
        return true;
    };
    /**
     *	信息提示框
     * @param info 传入提示信息
     * @param keep 是否保持提示
     */
    ImageEditor.prototype.uploadTip = function (info, keep) {
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('.img-upload-tip').remove();
        var uploadTip = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="img-upload-tip">' + info + '</div>').appendTo('body');
        if (!keep) {
            setTimeout(function () {
                uploadTip.fadeOut(200, function () {
                    uploadTip.remove();
                });
            }, 2500);
        }
    };
    /**
     * 关闭上传提示
     */
    ImageEditor.prototype.closeUploadTip = function () {
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('.img-upload-tip').remove();
    };
    /**
     * 初始化图片拖入
     */
    ImageEditor.prototype.initImageDrop = function () {
        var containerCls = 'content';
        var me = this;
        this.initDropImage({
            onDragOver: function (e) {
                if (me.state.getReadonly()) {
                    return;
                }
                if (!jquery__WEBPACK_IMPORTED_MODULE_22___default()(e.target).hasClass(containerCls)) {
                    e.preventDefault();
                }
                me.uploadTip(t('mindnote.editor.drag_img'), true);
            },
            onDragLeave: function () {
                me.closeUploadTip();
            },
            onDrop: function (e) {
                me.closeUploadTip();
                if (me.state.getReadonly()) {
                    return false;
                }
                return jquery__WEBPACK_IMPORTED_MODULE_22___default()(e.target).hasClass(containerCls);
            }
        });
    };
    /**
     * 初始化图片的拖动
     * @param options {Object}
     * @property options.onDragOver {function}
     * @property options.onDragLeave {function}
     * @property options.onDrop {function}
     */
    ImageEditor.prototype.initDropImage = function (options) {
        var eventSpace = this.state.getEditorState().eventSpace;
        var body = jquery__WEBPACK_IMPORTED_MODULE_22___default()('body');
        var me = this;
        body.on("dragstart.mindnote" + eventSpace, function (e) {
            // 阻止页面内的拖动
            e.preventDefault();
            return false;
        });
        body.on("dragover.mindnote" + eventSpace, function (e) {
            options.onDragOver(e);
        });
        body.on("drop.mindnote" + eventSpace, function (e) {
            e.preventDefault();
            if (options.onDrop(e)) {
                // 正确拖放到了一个节点主题上
                try {
                    if (e.originalEvent.dataTransfer.files.length === 0) {
                        return;
                    }
                    var dropImg = e.originalEvent.dataTransfer.files[0];
                    var error = void 0;
                    var accept = [
                        'image/jpg', 'image/jpeg', 'image/png', 'image/x-png', 'image/gif'
                    ];
                    var index = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.inArray(dropImg.type, accept);
                    if (index === -1) {
                        error = t('mindnote.editor.img_valid_type');
                    }
                    else if (dropImg.size > 1024 * 1024 * 20) {
                        // 校验大小
                        error = t('mindnote.editor.img_size_tip');
                    }
                    if (error) {
                        me.uploadTip(error);
                    }
                    else {
                        var nodeId = jquery__WEBPACK_IMPORTED_MODULE_22___default()(e.target).data('id');
                        var data = {
                            nodeId: nodeId,
                            x: e.pageX,
                            y: e.pageY
                        };
                        me.readImage(dropImg, data);
                    }
                }
                catch (ex) {
                    me.uploadTip(t('mindnote.editor.img_process_failed'));
                }
            }
        });
        body.on("dragleave.mindnote" + eventSpace, function (e) {
            options.onDragLeave(e);
        });
    };
    __decorate([
        Bind(),
        TeaLogger$5('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'add_image',
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: 'outline_toolbar',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], ImageEditor.prototype, "insert", null);
    return ImageEditor;
}());

/**
 * 从 mention dom 获取 mention 数据
 */
function getMentionData($mention) {
    try {
        var mention = $mention.data('mention') || '';
        var data = JSON.parse(decodeURIComponent(mention));
        if (data && data.type === TextType.Mention && data.id) {
            return data;
        }
    }
    catch (e) {
        console.error(e);
    }
    return null;
}
/**
 * hover mention 处理函数
 */
function handleMentionHover($paper, eventSource) {
    var isActive = false;
    var timer = null;
    // 	展示
    var show = function (enterEvent) {
        var $target = $(enterEvent.currentTarget);
        timer = window.setTimeout(function () {
            timer = null;
            var data = getMentionData($target);
            if (data) {
                eventSource.trigger(SourceEvent.SHOW_MENTION_POPUP, data);
                isActive = true;
            }
        }, 700);
    };
    // 隐藏
    var hide = function () {
        if (timer) {
            // cancel
            window.clearTimeout(timer);
            timer = null;
        }
        else if (isActive) {
            // hide
            eventSource.trigger(SourceEvent.SHOW_MENTION_POPUP, null);
            isActive = false;
        }
    };
    $paper.on('mouseenter', '.mention', show);
    $paper.on('mouseleave', '.mention, .content', hide);
    $paper.on('click', '.mention:not([data-type="0"])', hide);
}

var TeaLogger$6 = TeaManager.getDecorator();
/**
 * content editable false 左右的零宽字符，避免光标乱飞的问题
 */
var ZERO_WIDTH_CHAR = '\u200b';
/**
 * mention 事件命名空间
 */
var MENTION_EVENT = '.mention';
var TextEditor = /** @class */ (function () {
    function TextEditor(model, imageEditor, viewport, eventSource, state) {
        var _this = this;
        this.options = {};
        this.focusNodeId = null;
        this.preventBlur = false;
        // 每一次输入开始时的光标位置
        this.startCursorOffset = null;
        // 每一次开始输入时的内容
        this.startContent = [];
        // 在IE下使用监听的方式检查文本的变化
        this.textChangeListener = null;
        this.isInternetExplorer = environment.isIE && !environment.isEdge;
        /**
         * @ 功能的 holder dom
         */
        this.atHolderId = '';
        /**
         * 是否需要激活 @
         */
        this.activeAt = false;
        /**
         * @ 搜索文字
         */
        this.atSearchWord = '';
        /**
         * 设置 mention notify id
         */
        this.setMenitonNotifyId = function (data) {
            var node = _this.model.getById(data.nodeId);
            if (!node) {
                return;
            }
            var nodeText = ensureNodeText(data.isNote ? node.note : node.text);
            Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(nodeText, function (segment) {
                if (segment.type === TextType.Mention && segment.id === data.mentionId) {
                    segment.notifyId = data.notifyId;
                }
            });
            _this.textChanged(data.nodeId, data.isNote, nodeText, true);
        };
        /**
         * 解析粘贴的 url 成功后的处理函数
         */
        this.handlePasteUrlSuccess = function (options, data) {
            var nodeId = options.nodeId, isNote = options.isNote, text = options.text;
            var node = _this.model.getById(nodeId);
            if (!node) {
                return;
            }
            var nodeText = isNote ? node.note : node.text;
            var newNodeText = [];
            Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(ensureNodeText(nodeText), function (segment) {
                // 把 link 换成 mention
                if (segment.type === TextType.Link
                    && segment.link === text
                    && segment.text === text) {
                    newNodeText.push({ type: TextType.Styled, text: ZERO_WIDTH_CHAR }, __assign({}, data, { id: _this.model.newId() }), { type: TextType.Styled, text: ZERO_WIDTH_CHAR });
                }
                else {
                    newNodeText.push(segment);
                }
            });
            var position = getCursorPosition();
            // 左右两个零宽
            var differ = data.text.length + 2 - text.length;
            var $editor = isNote ? getNoteById(nodeId) : getContentById(nodeId);
            var html = textToHtml(newNodeText, _this.state.getEditorProps().locale);
            // 链接转为 mention 之后，cursor 会变化
            _this.resetHtml($editor, html, {
                start: position.start + differ,
                end: position.end + differ,
            });
            _this.textChanged(nodeId, isNote, newNodeText);
        };
        this.model = model;
        this.imageEditor = imageEditor;
        this.viewport = viewport;
        this.eventSource = eventSource;
        this.state = state;
    }
    TextEditor.prototype.init = function (opt) {
        this.options = opt;
        this.initTextEdit();
    };
    /**
     * 以一个区间分隔内容
     */
    TextEditor.prototype.getSplitText = function (text, position) {
        var cText = new ContentText(text, this.state);
        var splitResult = cText.split(position.start, position.end);
        return [
            splitResult[0].getNodeText(),
            splitResult[1].getNodeText(),
        ];
    };
    /**
     * 在外围某些操作后，要重置inputAction事件，比如撤销
     * 否则后边的继续输入，可能inputAction已经在队列中不存在
     * @type {resetInputAction}
     */
    TextEditor.prototype.resetInputAction = function () {
        this.startCursorOffset = null;
        this.startContent = [];
    };
    /**
     * 暴露给外部接口调用，手机app中的底部菜单
     * @type {executeFormatAction}
     */
    /**
     * 设置文字的样式
     * @param editor
     * @param action
     */
    TextEditor.prototype.executeFormatAction = function (editor, action) {
        var position = getCursorPosition();
        var isNote = editor.hasClass('note');
        var nodeId = this.getEditorId(editor);
        var node = this.model.getById(nodeId);
        if (!node) {
            return;
        }
        var text = isNote ? node.note : node.text;
        // 重置输入操作，创建新的action
        this.resetInputAction();
        // 重置 @
        this.quitAtSearch();
        // 保存光标位置，与开始时的内容
        this.startCursorOffset = position;
        this.startContent = Object(lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"])(text || []);
        var contentText = new ContentText(text, this.state);
        contentText.toggleTextFormatFlag(action, position);
        this.resetHtml(editor, contentText.getContentHtml(), position);
        this.textChanged(nodeId, isNote, contentText.getNodeText(), true);
    };
    TextEditor.prototype.startListenTextChange = function (editor) {
        var _this = this;
        var startContent = editor.html();
        this.stopListenTextChange();
        this.textChangeListener = window.setInterval(function () {
            var newContent = editor.html();
            if (newContent !== startContent) {
                _this.updateContentHtmlAfterUserEdit(editor);
                startContent = newContent;
            }
        }, 50);
    };
    TextEditor.prototype.stopListenTextChange = function () {
        if (this.textChangeListener) {
            clearInterval(this.textChangeListener);
            this.textChangeListener = null;
        }
    };
    /**
     * 初始化文字编辑
     */
    TextEditor.prototype.initTextEdit = function () {
        var paper = this.viewport.paper;
        var editorSelector = '.content, .note';
        var me = this;
        paper.on('input.edit', editorSelector, function (e) {
            // 在输入法输入状态下，不执行更新
            if (!e.originalEvent.isComposing) {
                me.updateContentHtmlAfterUserEdit(jquery__WEBPACK_IMPORTED_MODULE_22___default()(this));
            }
        }).on('compositionstart.edit', editorSelector, function (e) {
            // 在IE下，因为不支持input事件，在开始输入法的片段输入时，停止监听
            if (me.isInternetExplorer) {
                me.stopListenTextChange();
            }
        }).on('compositionend.edit', editorSelector, function (e) {
            e.preventDefault();
            me.updateContentHtmlAfterUserEdit(jquery__WEBPACK_IMPORTED_MODULE_22___default()(this));
            // 在IE下，因为不支持input事件，在开始输入法的片段完成时，重启监听
            if (me.isInternetExplorer) {
                me.startListenTextChange(jquery__WEBPACK_IMPORTED_MODULE_22___default()(this));
            }
        }).on('focus.edit', editorSelector, function () {
            if (me.isInternetExplorer) {
                me.startListenTextChange(jquery__WEBPACK_IMPORTED_MODULE_22___default()(this));
            }
            var nodeId = me.getEditorId(jquery__WEBPACK_IMPORTED_MODULE_22___default()(this));
            var container = getNodeContainer(nodeId);
            // 让子节点的线条高亮显示
            var clsName = 'focus-active';
            jquery__WEBPACK_IMPORTED_MODULE_22___default()('.' + clsName).removeClass(clsName);
            container.addClass(clsName);
            if (nodeId === me.focusNodeId) {
                // 如果是相同的，不进行处理，因为比如加粗等操作，会重新设置光标，会触发focus
                return;
            }
            me.resetInputAction();
            me.focusNodeId = nodeId;
        }).on('blur.edit', editorSelector, function () {
            if (me.isInternetExplorer) {
                me.stopListenTextChange();
            }
            if (me.preventBlur) {
                return;
            }
            var editor = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            var nodeId = me.getEditorId(editor);
            getNodeContainer(nodeId).removeClass('focus-active');
            if (editor.hasClass('note') && jquery__WEBPACK_IMPORTED_MODULE_22___default.a.trim(editor.text()) === '') {
                editor.remove();
            }
            me.resetInputAction();
            me.focusNodeId = null;
        }).on('keydown.edit', editorSelector, function (e) {
            var code = e.keyCode;
            var metaKey = e[environment.metaKey];
            if ((code === KeyCode.Y || code === KeyCode.Z) && metaKey) {
                // 按的是撤销、恢复相关的，不执行textChanged
                e.preventDefault();
                return;
            }
            var editor = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            if (me.startCursorOffset == null) {
                // 设置每一次输入开始时的状态
                var isNote = editor.hasClass('note');
                var nodeId = me.getEditorId(editor);
                var node = me.model.getById(nodeId);
                me.startCursorOffset = getCursorPosition();
                me.startContent = Object(lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"])(isNote ? node.note : node.text) || [];
            }
            if (code === KeyCode.Enter
                && !me.atHolderId
                && !e.altKey
                && !e.shiftKey
                && !metaKey
                && editor.hasClass('note')) {
                // 在备注回车时，使用\n换行
                e.preventDefault();
                var selection = window.getSelection();
                var range = selection.getRangeAt(0);
                // var textDom = document.createTextNode('\n\u00a0');
                var textDom = document.createTextNode('\n\u200B');
                range.deleteContents();
                range.insertNode(textDom);
                // 创建新的range，使得TextRange可以移动到正确的位置
                var newRange = document.createRange();
                newRange.setStart(textDom, 1);
                newRange.setEnd(textDom, 2);
                newRange.collapse(true);
                selection.removeAllRanges();
                selection.addRange(newRange);
                // 更新一下内容
                me.updateContentHtmlAfterUserEdit(editor, environment.isIE);
            }
            // 快捷键
            if (metaKey) {
                if (code === KeyCode.B) {
                    // cmd + B
                    e.preventDefault();
                    me.handleBold(editor);
                }
                else if (code === KeyCode.I) {
                    // cmd + I
                    e.preventDefault();
                    me.handleItalic(editor);
                }
                else if (code === KeyCode.U) {
                    // cmd + U
                    e.preventDefault();
                    me.handleUnderline(editor);
                }
            }
            // 处理 mention 左右的零宽字符相关光标问题
            if (!metaKey && code === KeyCode.ArrowLeft) {
                // 左箭头前移
                me.tryDeleteOrJumpOverMention(e, editor, true, false);
            }
            else if (!metaKey && code === KeyCode.ArrowRight) {
                // 右箭头后移
                me.tryDeleteOrJumpOverMention(e, editor, false, false);
            }
            else if (code === KeyCode.Delete) {
                // 删除后面的字符
                me.tryDeleteOrJumpOverMention(e, editor, false, true);
            }
            else if (code === KeyCode.Backspace) {
                // 删除前面的字符
                me.tryDeleteOrJumpOverMention(e, editor, true, true);
            }
            // 按组合键时，因为松手时间不一样，有时候 keyup 检测不到 @，这里 keydown 也检测一下
            if (me.isAtKeyEvent(e)) {
                me.activeAt = true;
            }
        }).on('paste.edit', editorSelector, function (e) {
            me.updateContentHtmlAfterPaste(jquery__WEBPACK_IMPORTED_MODULE_22___default()(this), e);
        }).on('keyup.edit', editorSelector, function (e) {
            // 激活 @ 功能
            if (me.activeAt || me.isAtKeyEvent(e)) {
                me.activeAt = false;
                me.initAtSearch(jquery__WEBPACK_IMPORTED_MODULE_22___default()(this));
            }
            // 光标移动可能需要关闭 mention
            if (me.atHolderId
                && !e[environment.metaKey]
                && (e.keyCode === KeyCode.ArrowLeft || e.keyCode === KeyCode.ArrowRight)) {
                me.updateAtSearch();
            }
        });
        var openNameSpace = '.open-link';
        if (me.state.getEditorProps().env !== MindNoteEnvironment.PC) {
            // 手机端通过事件广播的方式，外围处理
            paper.on("touchstart" + openNameSpace, '.content-link, .mention', function (e) {
                var target = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
                var $focus = paper.find(':focus');
                // 移动端有时候焦点会在 mention 上，不知为何，忽略焦点在 mention 上的情况
                var isFocusing = $focus.length > 0 && !$focus.is('.mention');
                if (!isFocusing) {
                    e.preventDefault();
                    target.on("touchend" + openNameSpace, function () {
                        var href = target.attr('href');
                        var mentionData = getMentionData(target);
                        if (mentionData && mentionData.mentionType === MentionType.USER) {
                            me.eventSource.trigger(SourceEvent.OPEN_USER_PROFILE, mentionData);
                        }
                        else {
                            me.eventSource.trigger(SourceEvent.OPEN_LINK, href);
                        }
                        jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).off("touchend" + openNameSpace);
                    });
                }
                jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).on("touchend" + openNameSpace, function () {
                    // 为确保可以off touchend时间，在document up时，都会解绑
                    target.off("touchend" + openNameSpace);
                    jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).off("touchend" + openNameSpace);
                });
            });
        }
        else {
            // click link
            paper.on("click" + openNameSpace, '.content-link', function (e) {
                e.preventDefault();
                var url = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).attr('href');
                var win = window.open(url, '_blank');
                win.focus();
            });
            // 解决 note 中 mention 不能点击的问题
            paper.on("mousedown" + openNameSpace, '.mention:not([data-type="0"])', function (e) {
                e.preventDefault();
            });
            // mention hover
            handleMentionHover(paper, me.eventSource);
        }
    };
    /**
     * 光标跳过或删除零宽字符与 mention
     */
    TextEditor.prototype.tryDeleteOrJumpOverMention = function (e, content, goForward, isDelete) {
        // 有 selection ，且不是多选
        var selection = window.getSelection();
        if (!selection || !selection.isCollapsed || selection.rangeCount === 0) {
            return;
        }
        var range = selection.getRangeAt(0);
        // 光标所在 dom 需要有零宽字符
        var dom = range.startContainer.parentNode || range.startContainer;
        var text = dom.textContent || '';
        var index = range.startOffset + (goForward ? -1 : 0);
        if (!goForward && range.startOffset === text.length) {
            dom = dom.nextSibling || dom;
            text = dom.textContent || '';
            index = 0;
        }
        if (text[index] !== ZERO_WIDTH_CHAR) {
            return;
        }
        // 光标走向的下一个 dom 需要是 mention
        var mentionDom = goForward ? dom.previousSibling : dom.nextSibling;
        if (!mentionDom || !jquery__WEBPACK_IMPORTED_MODULE_22___default()(mentionDom).is('.mention')) {
            return;
        }
        // 判断 mention 的下一个 dom 是否有零宽字符
        var nextDom = goForward ? mentionDom.previousSibling : mentionDom.nextSibling;
        var nextText = nextDom ? (nextDom.textContent || '') : '';
        var jumpNext = nextText[goForward ? nextText.length - 1 : 0] === ZERO_WIDTH_CHAR;
        if (isDelete) {
            // 删除 mention 与零宽字符
            e.preventDefault();
            dom.textContent = goForward ? text.slice(1) : text.slice(0, text.length - 1);
            jquery__WEBPACK_IMPORTED_MODULE_22___default()(mentionDom).remove();
            if (jumpNext && nextDom) {
                nextDom.textContent = goForward ? nextText.slice(0, nextText.length - 1) : nextText.slice(1);
            }
            this.updateContentHtmlAfterUserEdit(content);
        }
        else {
            // 跳过 mention 与零宽字符
            e.preventDefault();
            var moveOffset = 1 + (mentionDom.textContent || '').length + (jumpNext ? 1 : 0);
            moveCursor(content, (goForward ? -1 : 1) * moveOffset);
        }
    };
    /**
     * 判断 key event 是不是要激活 @
     */
    TextEditor.prototype.isAtKeyEvent = function (e) {
        // 移动端会出现 Unidentified，用拼音输入法时会出现 Process
        return e.key === '@'
            || e.char === '@'
            || ((environment.isMobile || e.shiftKey) && (e.key === 'Unidentified' || e.key === 'Process'));
    };
    /**
     * 激活 @ 功能
     * @param editor 编辑器
     * @param force 强制添加 @ 符号唤起 @，移动端用的
     */
    TextEditor.prototype.initAtSearch = function (editor, force) {
        var _this = this;
        if (force === void 0) { force = false; }
        // 没开启 @ 功能，或者已经激活了 @ 状态，退出
        if (!this.state.getEditorState().mentionEnabled || (this.atHolderId && !force)) {
            return;
        }
        if (this.atHolderId && force) {
            this.quitAtSearch(false);
        }
        // 判断光标前面是 @，且 @ 前不能是字母数字
        var position = getCursorPosition();
        if (!force) {
            var plainText = editor.text();
            var at = plainText[position.start - 1] || '';
            var beforeAt = plainText[position.start - 2] || '';
            if (at !== '@' || beforeAt.match(/[a-z0-9]/i)) {
                return;
            }
        }
        var nodeId = this.getEditorId(editor);
        var isNote = editor.hasClass('note');
        this.atHolderId = this.model.newId();
        // 把 @ 文本转为 at-holder 块
        var contentText = new ContentText(editor, this.state);
        var splitedText = contentText.split(force ? position.start : position.start - 1, position.start);
        var newText = [].concat(splitedText[0].getNodeText(), [{
                type: TextType.Styled,
                text: '@',
                atHolderId: this.atHolderId,
            }], splitedText[1].getNodeText());
        var locale = this.state.getEditorProps().locale;
        var index = force ? position.start + 1 : position.start;
        this.resetHtml(editor, textToHtml(newText, locale), { start: index, end: index });
        this.textChanged(nodeId, isNote, newText);
        // 激活 @
        this.atSearchWord = '';
        this.viewport.nodeWrapper.on("click." + MENTION_EVENT, function () {
            // 点击可能导致失去焦点，更新一下
            _this.updateAtSearch();
        });
        this.state.setEditorState({
            isMentionActive: true,
        });
        this.eventSource.trigger(SourceEvent.UPDATE_MENTION, {
            id: this.model.newId(),
            show: true,
            nodeId: nodeId,
            isNote: isNote,
            searchWord: '',
            atHolderId: this.atHolderId,
            fromToolbar: force,
            onSelect: function (data) {
                _this.quitAtSearch();
                if (data) {
                    _this.insertMention(data);
                }
            },
            setNotifyId: this.setMenitonNotifyId,
        });
    };
    /**
     * 选择了 @ 内容，把 at-holder 替换为 mention 块
     */
    TextEditor.prototype.insertMention = function (data) {
        var node = this.model.getById(data.nodeId);
        if (!node) {
            return;
        }
        var locale = this.state.getEditorProps().locale;
        var segments = ensureNodeText(data.isNote ? node.note : node.text);
        var nodeText = [];
        var index = 0;
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(segments, function (segment, i) {
            if (segment.type === TextType.Styled && segment.atHolderId === data.atHolderId) {
                // mention 左右加上 零宽字符，避免光标问题
                var beforeSegmentText = segments[i - 1] ? segments[i - 1].text : '';
                var beforeSpace = beforeSegmentText[beforeSegmentText.length - 1] === ' ' ? '' : ' ';
                var charBefore = { type: TextType.Styled, text: beforeSpace + ZERO_WIDTH_CHAR };
                var afterSegmentText = segments[i + 1] ? segments[i + 1].text : '';
                var afterSpace = afterSegmentText[afterSegmentText.length - 1] === ' ' ? '' : ' ';
                var charAfter = { type: TextType.Styled, text: ZERO_WIDTH_CHAR + afterSpace };
                var mention = {
                    type: TextType.Mention,
                    id: data.id,
                    mentionType: data.mentionType,
                    mentionNotify: data.mentionNotify,
                    token: data.token,
                    link: data.link,
                    textEn: data.textEn,
                    text: data.text,
                };
                nodeText.push(charBefore, mention, charAfter);
                index = nodeTextToPlainText(nodeText, locale, false).length - 1;
                return;
            }
            nodeText.push(segment);
        });
        var editor = data.isNote ? getNoteById(data.nodeId) : getContentById(data.nodeId);
        this.resetHtml(editor, textToHtml(nodeText, locale), { start: index, end: index });
        this.textChanged(data.nodeId, data.isNote, nodeText, true);
    };
    /**
     * 更新 @ 的搜索文字
     */
    TextEditor.prototype.updateAtSearch = function () {
        if (!this.atHolderId) {
            return;
        }
        var $at = jquery__WEBPACK_IMPORTED_MODULE_22___default()("#at-holder-" + this.atHolderId);
        // at holder 被删了
        if ($at.length === 0) {
            this.quitAtSearch();
            return;
        }
        // @ 符号被删了
        var text = $at.text() || '';
        if (text[0] !== '@') {
            this.quitAtSearch();
            return;
        }
        // 有连续的空格
        if (text.match(/\s{2,}/)) {
            this.quitAtSearch();
            return;
        }
        // 光标不在 at 里了
        try {
            var range = window.getSelection().getRangeAt(0);
            var start = range.startContainer;
            var end = range.endContainer;
            if (!range || !jquery__WEBPACK_IMPORTED_MODULE_22___default.a.contains($at[0], start) || !jquery__WEBPACK_IMPORTED_MODULE_22___default.a.contains($at[0], end)) {
                throw new Error();
            }
        }
        catch (e) {
            this.quitAtSearch();
            return;
        }
        var searchWord = text.replace('@', '');
        if (this.atSearchWord === searchWord) {
            return;
        }
        this.atSearchWord = searchWord;
        // 更新 @ 搜索
        this.eventSource.trigger(SourceEvent.UPDATE_MENTION, { show: true, searchWord: searchWord });
    };
    /**
     * 关闭 @ 搜索
     */
    TextEditor.prototype.quitAtSearch = function (fireEvent) {
        if (fireEvent === void 0) { fireEvent = true; }
        if (!this.atHolderId) {
            return;
        }
        this.viewport.nodeWrapper.off(MENTION_EVENT);
        this.state.setEditorState({
            isMentionActive: false,
        });
        jquery__WEBPACK_IMPORTED_MODULE_22___default()("#at-holder-" + this.atHolderId).removeClass('at-holder').removeAttr('id');
        this.atHolderId = '';
        this.atSearchWord = '';
        if (fireEvent) {
            this.eventSource.trigger(SourceEvent.UPDATE_MENTION, { show: false });
        }
    };
    /**
     * 设置光标
     */
    TextEditor.prototype.resetHtml = function (content, html, position) {
        content.html(html);
        setCursorPosition(content, position);
    };
    /**
     * 获取编辑器对应的节点id
     * @param editor
     */
    TextEditor.prototype.getEditorId = function (editor) {
        if (editor.hasClass('note')) {
            return editor.parent().parent().attr('id');
        }
        else {
            return editor.data('id');
        }
    };
    /**
     * 内容发生变化时，进行保存
     * @param nodeId node id
     * @param isNote 是否是 note
     * @param text 文本内容
     * @param newAction 是否是新操作，比如粘贴，B I U等
     */
    TextEditor.prototype.textChanged = function (nodeId, isNote, text, newAction) {
        // note trim
        var locale = this.state.getEditorProps().locale;
        if (isNote && isTextEmpty(text, locale, true)) {
            text = [];
        }
        var editType = (isNote ? InputActionTypes.NOTE : InputActionTypes.TEXT);
        // 发生了编辑，添加撤销input事件
        var cursorPos = getCursorPosition();
        if (this.options.onPopAction) {
            this.options.onPopAction({
                name: Actions.INPUT,
                id: nodeId,
                type: editType,
                // 外面会填充这个 path
                path: [],
                prevContent: this.startContent,
                prevPos: this.startCursorOffset,
                nextContent: text,
                nextPos: cursorPos,
            });
        }
        this.startContent = Object(lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"])(text);
        this.startCursorOffset = cursorPos;
        if (newAction) {
            // 新消息，不执行setTimeout继续收集，并且重置
            this.resetInputAction();
        }
        // 更新 @ 搜索内容
        if (this.atHolderId) {
            this.updateAtSearch();
        }
    };
    /**
     * 用户输入后自动格式化
     * @param editor
     */
    TextEditor.prototype.updateContentHtmlAfterUserEdit = function (editor, noChange) {
        // 用户输入的原内容, 清除 div p br
        editor.find('div, br, p').remove();
        var inputHtml = editor.html();
        var isNote = editor.hasClass('note');
        var nodeId = this.getEditorId(editor);
        // 经过计算处理后的html内容
        var contentText = new ContentText(inputHtml, this.state, true);
        var formatContent = contentText.getContentHtml();
        var isChanged = true;
        if (this.isInternetExplorer || environment.isFirefox) {
            // 在IE和Firefox下不能直接比较html内容，要放到同样的div中去判断
            var temp = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div></div>');
            temp.html(inputHtml);
            // 在Firefox下，正常输入，可能会多出br
            temp.find('br').remove();
            var a = temp.html();
            temp.html(formatContent);
            isChanged = (a !== temp.html());
        }
        else {
            isChanged = (inputHtml !== formatContent);
        }
        if (isChanged && !noChange) {
            var position = getCursorPosition();
            this.resetHtml(editor, formatContent, position);
        }
        this.textChanged(nodeId, isNote, contentText.getNodeText());
    };
    /**
     * 用户粘贴后处理
     * @param sourceInput 输入源
     * @param e 粘贴事件
     */
    TextEditor.prototype.updateContentHtmlAfterPaste = function (sourceInput, e) {
        var text = '';
        var html = '';
        var isPasteImage = false;
        var clipboardData;
        var targetId = this.getEditorId(sourceInput);
        var node = this.model.getById(targetId);
        var win = window;
        // TODO: ie 不支持粘贴从其它文档复制的图片，可以考虑把光标定位到一个 div，粘贴后从里面读取 html
        if (win.clipboardData && win.clipboardData.getData) {
            // ie 只能读取 text，检查一下读出来的 text 是不是 html
            clipboardData = win.clipboardData;
            text = clipboardData.getData('text');
            if (!text || isIECopyImage(text)) {
                isPasteImage = this.imageEditor.readClipboardImage(targetId, clipboardData, text);
            }
        }
        else {
            // 粘贴图片时，只有 html，或者没有 html 也没 text；粘贴文字（和图片）时，同时有 html 和 text
            clipboardData = (e.originalEvent || e).clipboardData;
            text = clipboardData.getData('text/plain');
            html = clipboardData.getData('text/html');
            if (!text && (!html || isCopyImageHtml(html))) {
                isPasteImage = this.imageEditor.readClipboardImage(targetId, clipboardData, html);
            }
        }
        // 粘贴图片
        if (isPasteImage) {
            e.preventDefault();
            return;
        }
        // 剪贴板没有内容
        if (!text) {
            return;
        }
        // 因为粘贴时会触发blur，可能会删除note的输入框，所以阻止一下
        this.preventBlur = true;
        // 重置输入操作，创建新的action
        this.resetInputAction();
        var isContentEditor = sourceInput.hasClass('content');
        // 保存光标位置，与开始时的内容
        this.startCursorOffset = getCursorPosition();
        this.startContent = Object(lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"])(isContentEditor ? node.text : node.note) || [];
        var pasteHolder = jquery__WEBPACK_IMPORTED_MODULE_22___default()('#paste-holder');
        if (pasteHolder.length === 0) {
            pasteHolder = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div id="paste-holder" contenteditable></div>').appendTo(this.viewport.controlHolder);
        }
        pasteHolder.empty().show();
        // 为防止在手机中，由于切换光标位置导致的页面晃动，将pasteHolder放到输入框的位置
        var offset = sourceInput.offset();
        pasteHolder.css({
            top: offset.top,
            left: offset.left,
        });
        // 重新设置选区到响应粘贴的容器中
        var newRange = document.createRange();
        newRange.setStart(pasteHolder[0], 0);
        var selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(newRange);
        function getPastedContent() {
            var _this = this;
            if (pasteHolder.text() === '') {
                // 如果当前内容是空，继续20毫秒后刷新，因为粘贴后会有一个延迟，不确定什么时候会完成
                setTimeout(function () {
                    getPastedContent.call(_this);
                }, 20);
                return;
            }
            pasteHolder.hide();
            // 删除无用的或危险标签
            pasteHolder.find('noscript, script, style, link, img').remove();
            var contentHtml = pasteHolder.html();
            // 内容的纯文本是直接取剪切板里的内容，会自动包括\n换行符
            // 已经粘贴完成，开始组织内容
            // 解析html内容
            if (isContentEditor) {
                // 是在主题中粘贴，可以粘贴出多个节点
                var convertedNodes = htmlToNode(contentHtml, this.state);
                var pasteMultiNodes = false;
                if (convertedNodes.size > 1) {
                    pasteMultiNodes = true;
                }
                else if (convertedNodes.size === 1) {
                    var converted = convertedNodes.nodes[0];
                    if (converted.images || converted.note) {
                        // 当节点有图片或者描述，也当做节点进行粘贴
                        pasteMultiNodes = true;
                    }
                }
                if (pasteMultiNodes) {
                    // 多个节点才有意思，单个节点，就是普通文本粘贴的形式
                    if (this.options.onPasteMultiNodes) {
                        this.options.onPasteMultiNodes(targetId, convertedNodes.nodes);
                    }
                    // 重置 @
                    this.quitAtSearch();
                    // 发出粘贴图片事件
                    this.handlePasteImage(convertedNodes.nodes);
                    return;
                }
            }
            var cText = new ContentText(isContentEditor ? node.text : node.note, this.state);
            var splitResult = cText.split(this.startCursorOffset.start, this.startCursorOffset.end);
            // 判断是不是文档内复制的内容（可能会有 bad case）
            var isMindnoteContent = pasteHolder.children().is('span.bold, span.underline, span.italic, span.tag, a.mention, a.content-link');
            if (!isMindnoteContent) {
                if (isContentEditor) {
                    pasteHolder.html(pasteHolder.text().replace(/\n/g, ' '));
                }
                else {
                    pasteHolder.find('div,p,li').append('\n');
                    var lineBreak = pasteHolder.find('br');
                    lineBreak.after('\n');
                    lineBreak.remove();
                    // 可能会存在多个连续的换行符，替换成一个
                    pasteHolder.html(pasteHolder.text().replace(/\n+/g, '\n'));
                }
            }
            var pasteContentText = new ContentText(pasteHolder, this.state, true);
            // 修改粘贴进来的 mention id
            Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(pasteContentText.getNodeText(), function (segment) {
                if (segment.type === TextType.Mention) {
                    segment.id = _this.model.newId();
                }
            });
            // 合并三个ContentText对象
            var merged = splitResult[0].merge([pasteContentText, splitResult[1]]);
            var nodeText = merged.getNodeText();
            // 粘贴后，重新管理标签
            var newContent = merged.getContentHtml();
            var start = this.startCursorOffset.start + pasteContentText.getTextLength();
            var newCursor = { start: start, end: start };
            this.resetHtml(sourceInput, newContent, newCursor);
            this.textChanged(targetId, !isContentEditor, nodeText);
            // 发出粘贴的事件，用来解析粘贴的 url
            this.eventSource.trigger(SourceEvent.PASTE_URL, {
                nodeId: node.id,
                isNote: !isContentEditor,
                text: pasteHolder.text(),
                onSuccess: this.handlePasteUrlSuccess,
            });
        }
        this.preventBlur = false;
        getPastedContent.call(this);
    };
    /**
     * 发出粘贴图片事件
     */
    TextEditor.prototype.handlePasteImage = function (nodes) {
        var imgList = [];
        recursive(nodes, function (node) {
            if (node.images) {
                node.images.forEach(function (img) { return img.uri && imgList.push(img.uri); });
            }
        });
        if (imgList.length > 0) {
            this.eventSource.trigger(SourceEvent.PASTE_IMAGE, imgList);
        }
    };
    /**
     * 加粗快捷键
     * @param 编辑区域
     */
    TextEditor.prototype.handleBold = function ($editor) {
        this.executeFormatAction($editor, 'bold');
    };
    /**
     * 斜体快捷键
     * @param 编辑区域
     */
    TextEditor.prototype.handleItalic = function ($editor) {
        this.executeFormatAction($editor, 'italic');
    };
    /**
     * 下划线快捷键
     * @param 编辑区域
     */
    TextEditor.prototype.handleUnderline = function ($editor) {
        this.executeFormatAction($editor, 'underline');
    };
    __decorate([
        TeaLogger$6('toggle_attribute', function () {
            return {
                action: 'bold',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], TextEditor.prototype, "handleBold", null);
    __decorate([
        TeaLogger$6('toggle_attribute', function () {
            return {
                action: 'italic',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], TextEditor.prototype, "handleItalic", null);
    __decorate([
        TeaLogger$6('toggle_attribute', function () {
            return {
                action: 'underline',
                attr_op_status: 'effective',
                eventType: 'keydown',
                source: 'shortkey',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], TextEditor.prototype, "handleUnderline", null);
    return TextEditor;
}());

var MessageRunner = /** @class */ (function () {
    function MessageRunner(props) {
        var engine = props.engine, editorUI = props.editorUI, model = props.model, selector = props.selector, eventSource = props.eventSource;
        this.engine = engine;
        this.editorUI = editorUI;
        this.model = model;
        this.selector = selector;
        this.eventSource = eventSource;
    }
    /**
     * 调整结构
     * @param changed 发生变化的结构定义
     * @param type 类型 undo || redo
     */
    MessageRunner.prototype.changeStructures = function (changed) {
        var changedContainer = [];
        var rootNode = this.engine.getRootNode();
        var rootNodeChanged = false;
        var isRootNode = function (node) {
            return !!(rootNode && rootNode.id === node.id);
        };
        var me = this;
        // 先全部删除，否则如果存在多个同级的元素时，会互相受影响
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(changed, function (index, changedNode) {
            var nodeId = changedNode.changed.node.id;
            var nodeContainer = getNodeContainer(nodeId);
            // !操作model，先从之前的父级数组中删除
            var node = me.model.getById(nodeId);
            var isRoot = isRootNode(node);
            if (node && nodeContainer.length > 0 && !isRoot) {
                // 如果不是rootNode，才进行删除
                nodeContainer.remove();
                changedContainer.push(nodeContainer);
            }
            else {
                changedContainer.push(null);
            }
            if (node) {
                // 有可能node已经不存在，比如协同消息未到达时，本地进行了删除
                var currentParentArr = me.model.getParentArray(nodeId);
                me.model.removeNode(currentParentArr, nodeId);
                if (isRootNode(node)) {
                    // 如果当前进入的root节点被移动了，那要刷新导航目录
                    rootNodeChanged = true;
                }
            }
        });
        // 再次重新开始插入
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(changed, function (index, changedNode) {
            var to = changedNode.changed;
            var node = me.model.getById(to.node.id);
            if (!node) {
                // 如果当前节点已经不存在，有可能在本地进行了删除
                // continue
                return true;
            }
            var target = me.engine.getWrapper();
            var relocateModel = true;
            if (to.parentId) {
                var parentNode = me.model.getById(to.parentId);
                if (!parentNode) {
                    relocateModel = false;
                    target = null;
                }
                else {
                    var parentDom = getNodeContainer(to.parentId);
                    if (parentDom.length) {
                        target = parentDom.children('.children');
                        if (target.length === 0) {
                            target = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="children"></div>').appendTo(parentDom);
                        }
                    }
                    else {
                        // 父元素DOM在页面中不存在，有两种情况，1. 父节点在本地被删除了。2. 当前处于drill状态，进入了其他节点
                        target = null;
                    }
                }
            }
            else if (rootNode) {
                // 当移动到了根节点，但是当前已经进入了某个节点，不会进行渲染
                target = null;
            }
            if (target != null) {
                var nodeContainer = changedContainer[index];
                if (nodeContainer == null || nodeContainer.length === 0) {
                    // 节点不用存在，有可能是当前进入了其他节点，而此节点并没有展示
                    // 此时需要创建一个新的节点DOM，并添加进去
                    nodeContainer = me.engine.getPainter().createNodeDom(node);
                }
                if (to.index === 0) {
                    // 第一个
                    target.prepend(nodeContainer);
                }
                else {
                    target.children('.node:eq(' + (to.index - 1) + ')').after(nodeContainer);
                }
            }
            if (relocateModel) {
                // 调整数据结构
                me.model.relocateNode(to.parentId, to.index, to.node.id);
            }
        });
        me.model.buildMapping();
        if (rootNodeChanged) {
            me.engine.refreshDrillDir();
        }
    };
    MessageRunner.prototype.executeMessage = function (actions, type) {
        var me = this;
        var isRedoOrUndo = type === ExecuteType.REDO || type === ExecuteType.UNDO;
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(actions, function (action) {
            switch (action.name) {
                case Actions.CREATE:
                    me.model.addNodes(action.created);
                    Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(action.created, function (nodeSet) {
                        me.engine.getPainter().insertNode(nodeSet.parentId, nodeSet.index, nodeSet.node, me.model.getRootNode());
                        me.engine.getPainter().renderChildren(nodeSet.node.id);
                    });
                    // redo/undo 创建一个节点时，光标移动到节点末尾（创建多个节点时，是多选节点，不用在这处理）
                    if (action.created.length === 1 && isRedoOrUndo) {
                        var content = getContentById(action.created[action.created.length - 1].node.id);
                        if (content.is(':visible')) {
                            moveCursorEnd(content);
                        }
                    }
                    break;
                case Actions.UPDATE:
                    Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(action.updated, function (updateInfo) {
                        var updated = updateInfo.updated;
                        var currentNode = me.model.getById(updated.id);
                        // 有可能node已经在本地被删除
                        if (currentNode) {
                            var oldNode = __assign({}, currentNode);
                            var newNode = __assign({}, oldNode, updated);
                            me.model.update(newNode);
                            me.engine.getPainter().refreshNode(newNode);
                            if (oldNode.note && !newNode.note) {
                                var content = getContentById(oldNode.id);
                                moveCursorEnd(content);
                            }
                        }
                    });
                    break;
                case Actions.DELETE:
                    var rootNode_1 = me.engine.getRootNode();
                    // 上一个节点
                    var beforeNode = action.deleted.length
                        ? me.model.getPrevNode(action.deleted[0].node.id)
                        : '';
                    var rootNodeDeleted_1 = false;
                    Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(action.deleted, function (deleted) {
                        var node = deleted.node;
                        if (rootNode_1 && me.model.contains(node.id, rootNode_1.id)) {
                            // 如果删除的节点包含当前的根节点，那要回到首页
                            rootNodeDeleted_1 = true;
                        }
                        me.model.deleteNode(node.id);
                        me.engine.getPainter().removeNode(node);
                    });
                    if (rootNodeDeleted_1) {
                        me.engine.drillNode(null, true);
                        me.eventSource.trigger(SourceEvent.DRILL_REMOVED);
                    }
                    // 发生了删除，重置选区
                    me.resetSelection();
                    // redo/undo 中删除，光标移动到上一个节点最后
                    if (beforeNode && (type === ExecuteType.REDO || type === ExecuteType.UNDO)) {
                        var content = getContentById(beforeNode.id);
                        if (content.is(':visible')) {
                            moveCursorEnd(content);
                        }
                    }
                    break;
                case Actions.STRUCTURE_CHANGE:
                    me.changeStructures(action.changed);
                    break;
                case Actions.SETTING_CHANGE:
                    var setting = action.changed;
                    for (var key in setting) {
                        if (setting.hasOwnProperty(key)) {
                            var value = setting[key];
                            var define = me.model.getDefine();
                            define[key] = value;
                        }
                    }
                    break;
                // 暂时不需要处理 input action，update 处理了就行
                case Actions.INPUT:
                    break;
                default:
                    assertNever(action);
                    break;
            }
        });
        // 抛出事件
        me.eventSource.trigger('messageExecuted');
    };
    /**
     * 重置selector的选区
     */
    MessageRunner.prototype.resetSelection = function () {
        var _this = this;
        // 重置选区
        var currentSelection = this.selector.getIds();
        if (currentSelection && currentSelection.length > 0) {
            var newSelection_1 = Object(lodash_es__WEBPACK_IMPORTED_MODULE_9__["default"])(currentSelection);
            Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(currentSelection, function (id) {
                var node = _this.model.getById(id);
                if (!node) {
                    var idIndex = newSelection_1.indexOf(id);
                    newSelection_1.splice(idIndex, 1);
                }
            });
            if (currentSelection.length !== newSelection_1.length) {
                this.selector.setSelectedIds(newSelection_1);
            }
        }
    };
    return MessageRunner;
}());

var default_1 = /** @class */ (function () {
    function default_1(name, size) {
        var _a;
        this.icons = (_a = {},
            _a[IconSet.PLUS] = '<svg xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 21 21">' +
                '<path fill="currentColor" fill-rule="evenodd" d="M9,10 L9,4.5 C9,4.22385763 9.22385763,4 9.5,4 L10.5,4 C10.7761424,4 11,4.22385763 11,4.5 L11,10 L16.5,10 C16.7761424,10 17,10.2238576 17,10.5 L17,11.5 C17,11.7761424 16.7761424,12 16.5,12 L11,12 L11,17.5 C11,17.7761424 10.7761424,18 10.5,18 L9.5,18 C9.22385763,18 9,17.7761424 9,17.5 L9,12 L3.5,12 C3.22385763,12 3,11.7761424 3,11.5 L3,10.5 C3,10.2238576 3.22385763,10 3.5,10 L9,10 Z"/>' +
                '</svg>',
            _a[IconSet.MINUS] = '<svg xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 21 21">' +
                '<rect fill="currentColor" width="14" height="2" x="3" y="10" fill-rule="evenodd" rx="1"/>' +
                '</svg>',
            _a[IconSet.ZOOM_IN] = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 512 512">' +
                '<path fill="currentColor" d="M216.243 37.334q36.341 0 69.498 14.21t57.074 38.127 38.127 57.074 14.21 69.499q0 31.216-10.172 59.791t-28.964 51.871l112.905 112.75q5.746 5.746 5.746 14.132 0 8.541-5.668 14.21t-14.21 5.668q-8.387 0-14.132-5.746l-112.75-112.905q-23.296 18.791-51.871 28.964t-59.791 10.172q-36.341 0-69.499-14.21t-57.074-38.127-38.127-57.074-14.21-69.499 14.21-69.499 38.127-57.074 57.074-38.127 69.499-14.21zM216.243 77.091q-28.266 0-54.046 11.026t-44.416 29.663-29.663 44.417-11.026 54.046 11.026 54.046 29.663 44.416 44.416 29.663 54.046 11.026 54.046-11.026 44.416-29.663 29.663-44.416 11.026-54.046-11.026-54.046-29.663-44.416-44.416-29.663-54.046-11.026zM216.243 136.727q8.231 0 14.055 5.824t5.824 14.055v39.757h39.757q8.231 0 14.055 5.824t5.824 14.055-5.824 14.055-14.055 5.824h-39.757v39.758q0 8.231-5.824 14.055t-14.055 5.824-14.055-5.824-5.824-14.055v-39.757h-39.757q-8.231 0-14.055-5.824t-5.824-14.055 5.824-14.055 14.055-5.824h39.757v-39.757q0-8.231 5.824-14.055t14.055-5.824z"></path>' +
                '</svg>',
            _a[IconSet.ZOOM_OUT] = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 512 512">' +
                '<path fill="currentColor" d="M216.243 37.334q36.341 0 69.498 14.21t57.074 38.127 38.127 57.074 14.21 69.499q0 31.216-10.172 59.791t-28.964 51.871l112.905 112.75q5.746 5.746 5.746 14.132 0 8.541-5.668 14.21t-14.21 5.668q-8.387 0-14.132-5.746l-112.75-112.905q-23.296 18.791-51.871 28.964t-59.791 10.172q-36.341 0-69.499-14.21t-57.074-38.127-38.127-57.074-14.21-69.499 14.21-69.499 38.127-57.074 57.074-38.127 69.499-14.21zM216.243 77.091q-28.266 0-54.046 11.026t-44.416 29.663-29.663 44.417-11.026 54.046 11.026 54.046 29.663 44.416 44.416 29.663 54.046 11.026 54.046-11.026 44.416-29.663 29.663-44.416 11.026-54.046-11.026-54.046-29.663-44.416-44.416-29.663-54.046-11.026zM156.606 196.363h119.272q8.231 0 14.055 5.824t5.824 14.055-5.824 14.055-14.055 5.824h-119.272q-8.231 0-14.055-5.824t-5.824-14.055 5.824-14.055 14.055-5.824z"></path>' +
                '</svg>',
            _a[IconSet.MAGIC] = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 512 512">\n' +
                '<path fill="currentColor" d="M135.964 105.954l-60.018-60.018h-30.009v30.009l60.018 60.018zM165.973 15.928h30.009v60.018h-30.009zM286.009 165.973h60.018v30.009h-60.018zM316.018 75.945v-30.009h-30.009l-60.018 60.018 30.009 30.009zM15.928 165.973h60.018v30.009h-60.018zM165.973 286.009h30.009v60.018h-30.009zM45.937 286.009v30.009h30.009l60.018-60.018-30.009-30.009zM489.508 429.49l-298.271-298.271c-8.754-8.754-23.076-8.754-31.829 0l-28.189 28.189c-8.754 8.754-8.754 23.076 0 31.829l298.271 298.271c8.753 8.753 23.076 8.753 31.829 0l28.189-28.189c8.753-8.753 8.753-23.076 0-31.829zM240.995 271.005l-90.027-90.027 30.009-30.009 90.027 90.027-30.009 30.009z"></path>\n' +
                '</svg>',
            _a[IconSet.DOWNLOAD] = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 512 512">\n' +
                '<path fill="currentColor" d="M369.771 187.738h-68.262v-136.525h-91.017v136.525h-68.262l113.771 113.771 113.771-113.771zM468.478 336.367c-4.778-5.097-36.656-39.206-45.758-48.103-6.030-5.894-14.654-9.511-23.71-9.511h-39.979l69.719 68.125h-80.641c-2.321 0-4.414 1.183-5.461 3.026l-18.567 42.619h-136.161l-18.567-42.619c-1.047-1.843-3.162-3.026-5.461-3.026h-80.641l69.696-68.125h-39.957c-9.033 0-17.657 3.618-23.71 9.511-9.102 8.919-40.98 43.028-45.758 48.103-11.127 11.854-17.248 21.298-14.335 32.971l12.765 69.947c2.913 11.695 15.723 21.298 28.488 21.298h371.165c12.765 0 25.575-9.602 28.488-21.298l12.765-69.947c2.866-11.673-3.231-21.116-14.38-32.971z"></path>\n' +
                '</svg>',
            _a[IconSet.BUTTERFLY] = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 512 512">\n' +
                '<path fill="currentColor" d="M511.632 96.226v0c-3.375-10.892-20.971-17.816-39.817-19.689-23.164-2.319-52.794 2.505-78.569 13.197-19.578 8.122-37.716 18.231-56.361 32.896-29.323 23.048-44.856 41.598-52.711 51.96-6.347 8.369-7.697 17.918-13.521 22.316-0.294-2.206 0.49-8.014-3.298-10.215-1.115-0.647-2.368-1.395-3.627-2.13 1.418-5.852 8.752-33.962 20.52-50.088 14.296-19.625 30.275-30.859 32.356-32.15 2.528-1.595 5.213-1.718 6.974-2.82 1.337-0.829 2.228-4.489 1.496-4.891-2.716-1.485-5.733 1.725-7.612 3.768-1.981 2.165-22.709 16.365-35.389 34.851-11.852 17.264-19.325 44.868-20.67 50.061-2.219-1.189-4.255-2.108-5.399-2.108-1.031 0-2.782 0.749-4.714 1.739-1.548-6.013-8.977-33.029-20.566-49.947-12.683-18.48-33.416-32.429-35.399-34.595-1.857-2.043-4.883-5.253-7.591-3.768-0.762 0.4 0.138 4.062 1.476 4.891 1.775 1.102 4.438 1.225 6.984 2.82 2.069 1.29 18.042 12.279 32.346 31.889 11.524 15.798 18.781 43.27 20.447 49.952-1.506 0.859-3.034 1.762-4.363 2.526-3.753 2.202-2.981 8.012-3.288 10.215-5.253-2.82-9.488-15.105-17.179-26.501-8.173-12.161-19.716-24.727-49.017-47.775-18.681-14.662-36.804-24.774-56.373-32.896-25.775-10.694-55.415-15.517-78.579-13.197-18.87 1.876-36.486 8.799-39.819 19.689-2.588 8.447 8.977 34.648 19.698 49.868 7.971 11.316 9.636 24.393 12.574 37.296 4.193 18.44 11.801 45.956 32.708 52.8 19.144 6.292 56.56-5.024 56.56-5.024s0.821 6.7-11.744 11.729c-13.077 5.239-20.133 13.407-27.658 27.656-6.757 12.781-12.141 29.918-12.141 37.487 0 11.733 2.93 15.923 2.496 21.368-0.508 6.74 1.889 13.409 6.516 18.435 5.191 5.689 3.129 10.686 5.447 16.974 2.090 5.681 10.261 10.271 10.261 10.271s-0.924 12.857 8.386 21.373c7.521 6.906 16.045 11.418 21.584 16.329 5.634 5.041 9.846 9.026 21.986 11.327 6.998 1.329 11.325 12.717 25.98 11.882 15.906-0.91 15.865-0.265 25.999-4.413 16.322-6.696 23.623-38.304 30.575-68.829 5.464-23.897 9.645-38.725 16.87-43.743-2.050 13.988 1.011 37.233 1.011 37.233s-2.217 11.933-0.171 13.986c-0.946 6.131 0.956 14.519 1.993 14.312 0.425 5.010 3.038 14.122 6.711 14.122 3.67 0 6.292-9.114 6.692-14.122 1.064 0.207 2.941-8.179 2.005-14.312 2.041-2.052-0.167-13.986-0.167-13.986s2.824-21.827 0.945-37.542c6.452 3.288 11.471 20.156 16.917 44.052 6.971 30.526 14.262 62.134 30.603 68.829 10.111 4.149 10.083-0.065 25.978 0.842 14.666 0.837 18.986-13.038 25.978-14.351 12.161-2.308 16.352-6.286 21.998-11.319 5.564-4.923 14.041-9.43 21.598-16.341 9.275-8.519 8.363-21.38 8.363-21.38s8.215-4.606 10.293-10.269c2.27-6.283 0.222-11.285 5.423-16.971 4.614-5.022 7.024-11.695 6.493-18.433-0.413-5.45 2.536-9.643 2.536-21.368 0-7.567-5.401-18.662-12.182-31.443-7.533-14.249-14.56-22.416-27.643-27.656-12.565-5.029-11.729-11.729-11.729-11.729s37.378 11.315 56.583 5.024c20.877-6.844 28.497-34.36 32.678-52.8 2.938-12.903 4.614-25.982 12.571-37.296 10.695-15.222 22.292-41.422 19.693-49.868z"></path>\n' +
                '</svg>',
            _a[IconSet.IMAGE] = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 512 512">\n' +
                '<path fill="currentColor" d="M460.8 60.8h-409.6c-14.157 0-25.6 11.443-25.6 25.6v307.2c0 14.131 11.443 25.6 25.6 25.6h409.6c14.157 0 25.6-11.469 25.6-25.6v-307.2c0-14.131-11.443-25.6-25.6-25.6zM339.2 150.4c17.664 0 32 14.336 32 32s-14.336 32-32 32-32-14.336-32-32 14.336-32 32-32zM102.4 342.4l84.838-195.047 96.487 156.211 82.714-41.088 43.161 79.923h-307.2z"></path>\n' +
                '</svg>',
            _a[IconSet.MOON] = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 421 512">\n' +
                '<path fill="currentColor" d="M349.631 363.808q-14.303 2.384-29.137 2.384-48.209 0-89.266-23.84t-64.897-64.897-23.84-89.266q0-50.858 27.548-94.564-53.242 15.894-87.014 60.659t-33.773 101.716q0 34.435 13.509 65.824t36.157 54.036 54.036 36.157 65.824 13.509q38.144 0 72.447-16.291t58.407-45.428zM403.403 341.293q-24.899 53.772-75.095 85.956t-109.531 32.184q-41.322 0-78.936-16.158t-64.897-43.441-43.441-64.897-16.158-78.936q0-40.528 15.231-77.479t41.322-63.97 62.38-43.573 76.817-18.145q11.655-0.53 16.158 10.331 4.768 10.86-3.973 19.072-22.78 20.661-34.833 48.076t-12.053 57.877q0 39.203 19.337 72.314t52.447 52.447 72.314 19.337q31.257 0 60.394-13.509 10.861-4.768 19.072 3.443 3.709 3.709 4.635 9.007t-1.192 10.065z"></path>\n' +
                '</svg>',
            _a[IconSet.SUN] = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 512 512">\n' +
                '<path fill="currentColor" d="M256 136q32.656 0 60.235 16.094t43.672 43.672 16.094 60.234-16.094 60.235-43.672 43.672-60.235 16.094-60.234-16.094-43.672-43.672-16.094-60.235 16.094-60.234 43.672-43.672 60.234-16.094zM128.813 363.188q8.281 0 14.141 5.938t5.859 14.219q0 8.125-5.938 14.063l-28.281 28.281q-5.938 5.938-14.063 5.938-8.281 0-14.141-5.86t-5.859-14.141q0-8.438 5.781-14.219l28.281-28.281q5.938-5.938 14.219-5.938zM256 416q8.281 0 14.141 5.86t5.86 14.141v40q0 8.281-5.86 14.141t-14.141 5.86-14.141-5.86-5.859-14.141v-40q0-8.281 5.859-14.141t14.141-5.86zM36 236h40q8.281 0 14.141 5.859t5.859 14.141-5.859 14.141-14.141 5.86h-40q-8.282 0-14.141-5.86t-5.86-14.141 5.86-14.141 14.141-5.859zM256 176q-33.125 0-56.563 23.438t-23.438 56.563 23.438 56.563 56.563 23.438 56.563-23.438 23.438-56.563-23.438-56.563-56.563-23.438zM383.344 363.188q8.125 0 14.063 5.938l28.281 28.281q5.938 5.938 5.938 14.219 0 8.125-5.938 14.063t-14.063 5.938q-8.281 0-14.219-5.938l-28.281-28.281q-5.781-5.781-5.781-14.063t5.86-14.219 14.141-5.938zM100.531 80.375q8.125 0 14.063 5.938l28.281 28.281q5.938 5.938 5.938 14.063 0 8.281-5.859 14.141t-14.141 5.859q-8.438 0-14.219-5.781l-28.281-28.281q-5.781-5.781-5.781-14.219 0-8.281 5.859-14.141t14.141-5.859zM256 16q8.281 0 14.141 5.86t5.86 14.141v40q0 8.281-5.86 14.141t-14.141 5.859-14.141-5.859-5.859-14.141v-40q0-8.282 5.859-14.141t14.141-5.86zM436 236h40q8.281 0 14.141 5.859t5.86 14.141-5.86 14.141-14.141 5.86h-40q-8.281 0-14.141-5.86t-5.86-14.141 5.86-14.141 14.141-5.859zM411.625 80.375q8.125 0 14.063 5.938t5.938 14.063q0 8.281-5.938 14.219l-28.281 28.281q-5.781 5.781-14.063 5.781-8.594 0-14.297-5.703t-5.704-14.297q0-8.281 5.781-14.063l28.281-28.281q5.938-5.938 14.219-5.938z"></path>\n' +
                '</svg>',
            _a[IconSet.CHEVRON_LEFT] = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 512 512">\n' +
                '<path fill="currentColor" d="M120.060 266.632c-0.276-0.536-0.725-0.983-0.967-1.536-4.748-9.879-3.194-21.966 5.215-29.91l190.631-180.302c10.395-9.826 26.783-9.359 36.627 1.020 9.825 10.395 9.375 26.782-1.020 36.626l-171.046 161.807 170.37 164.208c10.293 9.931 10.603 26.318 0.675 36.626-5.077 5.286-11.863 7.926-18.651 7.926-6.474 0-12.951-2.416-17.976-7.252l-188.903-182.065c-0.364-0.361-0.501-0.862-0.864-1.24-0.277-0.262-0.569-0.45-0.846-0.728-1.469-1.536-2.246-3.418-3.247-5.18v0z"></path>\n' +
                '</svg>',
            _a[IconSet.MENU] = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 512 512">\n' +
                '<path fill="currentColor" d="M64.032 115.2h383.935v44.8h-383.935v-44.8zM64.032 236.8h383.935v44.8h-383.935v-44.8zM64.032 352h383.935v44.8h-383.935v-44.8z"></path>\n' +
                '</svg>',
            _a[IconSet.FINISH] = '<svg xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 24 24">\n' +
                '<path fill="currentColor" d="M12,21 C7.02943725,21 3,16.9705627 3,12 C3,7.02943725 7.02943725,3 12,3 C16.9705627,3 21,7.02943725 21,12 C21,16.9705627 16.9705627,21 12,21 Z M12,19 C15.8659932,19 19,15.8659932 19,12 C19,8.13400675 15.8659932,5 12,5 C8.13400675,5 5,8.13400675 5,12 C5,15.8659932 8.13400675,19 12,19 Z M15.6513752,8.67082536 L16.382506,9.34749775 C16.5818164,9.53196244 16.5974429,9.84179291 16.417704,10.0453753 L11.4090365,15.7187275 C11.2262734,15.9257353 10.9103016,15.9453895 10.7032937,15.7626263 C10.7032517,15.7625892 10.7032097,15.7625521 10.7031677,15.762515 L7.717111,13.1241718 C7.51189088,12.9428641 7.49069451,12.6302101 7.66956579,12.4228629 L8.32023591,11.6686076 C8.50061177,11.4595163 8.81633726,11.4362379 9.02542853,11.6166138 C9.0278636,11.6187144 9.03027833,11.6208385 9.03267241,11.6229857 L10.7331526,13.1481373 C10.8359387,13.2403255 10.9939966,13.2317343 11.0861849,13.1289483 C11.0870005,13.1280389 11.0878094,13.1271236 11.0886116,13.1262024 L14.9346777,8.70942939 C15.1160213,8.50117681 15.4318513,8.47936272 15.6401039,8.66070624 C15.6439119,8.66402218 15.6476694,8.6673956 15.6513752,8.67082536 Z"/>\n' +
                '</svg>',
            _a[IconSet.PEN_OUTLINE] = '<svg xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 24 24">\n' +
                '<path fill="currentColor" d="M7.52154419,14.3203126 L14.3219258,7.97885415 C14.5238835,7.7905255 14.8402731,7.80157407 15.0286018,8.00353182 L15.7106001,8.73488552 C15.8989288,8.93684327 15.8878802,9.25323291 15.6859225,9.44156155 L4.82055788,19.573678 C4.61860013,19.7620066 4.30221049,19.750958 4.11388185,19.5490003 L3.43188349,18.8176466 C3.40516515,18.7889947 3.38245974,18.7580396 3.36374308,18.7254737 C3.20123243,18.5919281 3.06761788,18.4248621 2.97286452,18.2342406 L1.24956975,14.767377 C1.14850641,14.5640613 1.09491676,14.3404559 1.09284057,14.1134168 L0.981121623,1.89654267 C0.97354627,1.06815018 1.63895003,0.390464343 2.46734252,0.382888989 C2.47420062,0.382836727 2.47420062,0.382836727 2.48105891,0.382826275 L5.92546154,0.382826275 C6.74853707,0.382826275 7.41787241,1.04606877 7.42539883,1.86910988 L7.53715728,14.0903041 C7.53786318,14.167497 7.53260797,14.2443875 7.52154419,14.3203126 Z M3.00589779,4.59676212 C3.01403389,4.59656666 3.02219407,4.59646836 3.0303772,4.59646836 L5.45025592,4.59646836 L5.43001296,2.38282627 L2.98565214,2.38282627 L3.00589779,4.59676212 Z M3.02418421,6.59644959 L3.0917053,13.9801267 L4.31607263,16.4432656 L5.53614514,13.9887668 L5.46854521,6.59646836 L3.0303772,6.59646836 C3.0283114,6.59646836 3.02624707,6.5964621 3.02418421,6.59644959 Z" transform="rotate(43 5.444 19.021)"/>\n' +
                '</svg>',
            _a[IconSet.IMAGE_OUTLINE] = '<svg xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 24 24">\n' +
                '<path fill="currentColor" d="M17,11.7614023 L17,7 L7,7 L7,13.2613965 L7.56253285,12.6519859 C8.4322495,11.7097929 9.85451931,11.5317985 10.9296037,12.2306034 C11.2234826,12.4216246 11.6096155,12.3883346 11.8664634,12.1498329 L13.7212973,10.4274872 C14.3283633,9.86378302 15.27746,9.89893475 15.8411642,10.5060008 L17,11.7614023 Z M17,14.7100309 L14.7147171,12.2343078 L13.2273656,13.6154199 C12.2985888,14.4778555 10.9023098,14.5982344 9.83962703,13.9074906 C9.58180145,13.739904 9.24071424,13.7825904 9.03213974,14.0085462 L7,16.2100309 L7,17 L17,17 L17,14.7100309 Z M6,5 L18,5 C18.5522847,5 19,5.44771525 19,6 L19,18 C19,18.5522847 18.5522847,19 18,19 L6,19 C5.44771525,19 5,18.5522847 5,18 L5,6 C5,5.44771525 5.44771525,5 6,5 Z M9,10 C8.44771525,10 8,9.55228475 8,9 C8,8.44771525 8.44771525,8 9,8 C9.55228475,8 10,8.44771525 10,9 C10,9.55228475 9.55228475,10 9,10 Z"/>\n' +
                '</svg>',
            _a[IconSet.EXPORT] = '<svg xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 24 24">\n' +
                '<path fill="currentColor" d="M20.7074804,12.7066928 L20.7088136,12.7080241 L20.5120916,12.9050338 L20.4169006,13.0016632 L20.4156001,13.0016666 L18.055266,15.3654536 C17.8601466,15.5608584 17.5435642,15.5610898 17.3481594,15.3659705 L16.640536,14.6593807 C16.4451312,14.4642613 16.4448998,14.1476789 16.6400191,13.9522741 L17.5818713,13.0090441 L11.5147054,13.0248396 C11.2386108,13.0255622 11.0141877,12.8023642 11.013399,12.5262697 L11.0104222,11.5262742 C11.0096333,11.2501329 11.2328505,11.0256367 11.5089918,11.0248478 L17.5878553,11.0074816 L16.6496213,10.0718057 C16.4540928,9.87681032 16.4536606,9.56022812 16.648656,9.3646996 L17.3541008,8.65732614 C17.5490962,8.46179762 17.8656784,8.46136544 18.0612069,8.65636084 C18.0614393,8.65659264 18.0616715,8.65682466 18.0619035,8.65705691 L21.0517526,11.6505222 C21.2457796,11.8447839 21.2468632,12.1591597 21.0541801,12.3547543 L20.7074804,12.7066928 Z M8,18 L12.5,18 C12.7761424,18 13,18.2238576 13,18.5 L13,19.5 C13,19.7761424 12.7761424,20 12.5,20 L7.5,20 C6.67157288,20 6,19.3284271 6,18.5 L6,5.5 C6,4.67157288 6.67157288,4 7.5,4 L12.5,4 C12.7761424,4 13,4.22385763 13,4.5 L13,5.5 C13,5.77614237 12.7761424,6 12.5,6 L8,6 L8,18 Z"/>\n' +
                '</svg>',
            _a[IconSet.DELETE] = '<svg xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 24 24">\n' +
                '<path fill="currentColor" fill-rule="evenodd" d="M15,5 L15,14.5 C15,15.3284271 14.3284271,16 13.5,16 L4.5,16 C3.67157288,16 3,15.3284271 3,14.5 L3,5 L0.5,5 C0.223857625,5 3.38176876e-17,4.77614237 0,4.5 L0,3.5 C-3.38176876e-17,3.22385763 0.223857625,3 0.5,3 L17.5,3 C17.7761424,3 18,3.22385763 18,3.5 L18,4.5 C18,4.77614237 17.7761424,5 17.5,5 L15,5 Z M13,5 L5,5 L5,14 L13,14 L13,5 Z M5.5,0 L12.5,0 C12.7761424,-5.07265313e-17 13,0.223857625 13,0.5 L13,1.5 C13,1.77614237 12.7761424,2 12.5,2 L5.5,2 C5.22385763,2 5,1.77614237 5,1.5 L5,0.5 C5,0.223857625 5.22385763,5.07265313e-17 5.5,0 Z" transform="translate(3 4)"/>\n' +
                '</svg>',
            _a[IconSet.HEADING1] = '<svg xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 24 24">\n' +
                '<path fill="currentColor" fill-rule="evenodd" d="M6,11 L11,11 L11,5.5 C11,5.22385763 11.2238576,5 11.5,5 L12.5,5 C12.7761424,5 13,5.22385763 13,5.5 L13,18.5 C13,18.7761424 12.7761424,19 12.5,19 L11.5,19 C11.2238576,19 11,18.7761424 11,18.5 L11,13 L6,13 L6,18.5 C6,18.7761424 5.77614237,19 5.5,19 L4.5,19 C4.22385763,19 4,18.7761424 4,18.5 L4,5.5 C4,5.22385763 4.22385763,5 4.5,5 L5.5,5 C5.77614237,5 6,5.22385763 6,5.5 L6,11 Z M16.3191609,13.2262431 L15.5,13.2262431 L15.5,11.5 L16.1893661,11.3514644 C16.5508383,11.2610963 16.9387737,11.1013582 17.3436375,10.8766795 C17.767548,10.6176231 18.107311,10.3543068 18.3736532,10.076867 L18.554,10 L19.86,10 L19.86,19.068 L18,19.068 L17.956,12.4622425 C17.4901956,12.7918316 16.9454178,13.0459571 16.3191609,13.2262431 Z"/>\n' +
                '</svg>',
            _a[IconSet.HEADING2] = '<svg xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 24 24">\n' +
                '<path fill="currentColor" fill-rule="evenodd" d="M6,11 L11,11 L11,5.5 C11,5.22385763 11.2238576,5 11.5,5 L12.5,5 C12.7761424,5 13,5.22385763 13,5.5 L13,18.5 C13,18.7761424 12.7761424,19 12.5,19 L11.5,19 C11.2238576,19 11,18.7761424 11,18.5 L11,13 L6,13 L6,18.5 C6,18.7761424 5.77614237,19 5.5,19 L4.5,19 C4.22385763,19 4,18.7761424 4,18.5 L4,5.5 C4,5.22385763 4.22385763,5 4.5,5 L5.5,5 C5.77614237,5 6,5.22385763 6,5.5 L6,11 Z M20.476,17.264 L20.476,19 L14,19 L14,18.75 C14,17.806858 14.3022094,16.9934646 14.9130777,16.3062674 C15.2438025,15.9246618 15.9185611,15.3854712 16.9272339,14.6927737 C17.4352966,14.3393388 17.8204483,14.0223293 18.058853,13.7722412 C18.3937624,13.3941176 18.56,12.9956751 18.56,12.582 C18.56,12.1863829 18.4564322,11.9003384 18.2702717,11.7233839 C18.0727246,11.5446509 17.762219,11.452 17.322,11.452 C16.8700612,11.452 16.5499963,11.597484 16.3305796,11.8964554 C16.1054945,12.1829273 15.9742382,12.6477935 15.9518407,13.2749229 L15.9432308,13.516 L14.0448555,13.516 L14.0480195,13.2628752 C14.0607989,12.2405252 14.360133,11.4133332 14.9525316,10.7823651 C15.5652574,10.1044556 16.3771132,9.764 17.37,9.764 C18.2570959,9.764 19.0004981,10.0248429 19.5901682,10.549015 C20.1732642,11.0791022 20.464,11.7596884 20.464,12.594 C20.464,13.3939174 20.1582478,14.125771 19.5567638,14.7925796 C19.2170027,15.1566094 18.6299213,15.6102631 17.7353516,16.2108888 C17.1412554,16.6015274 16.7158081,16.9554504 16.4591053,17.264 L20.476,17.264 Z"/>\n' +
                '</svg>',
            _a[IconSet.HEADING3] = '<svg xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 24 24">\n' +
                '<path fill="currentColor" fill-rule="evenodd" d="M6,11 L11,11 L11,5.5 C11,5.22385763 11.2238576,5 11.5,5 L12.5,5 C12.7761424,5 13,5.22385763 13,5.5 L13,18.5 C13,18.7761424 12.7761424,19 12.5,19 L11.5,19 C11.2238576,19 11,18.7761424 11,18.5 L11,13 L6,13 L6,18.5 C6,18.7761424 5.77614237,19 5.5,19 L4.5,19 C4.22385763,19 4,18.7761424 4,18.5 L4,5.5 C4,5.22385763 4.22385763,5 4.5,5 L5.5,5 C5.77614237,5 6,5.22385763 6,5.5 L6,11 Z M20.2643045,14.611909 C20.5940946,14.9829229 20.7594521,15.4617709 20.7594521,16.026 C20.7594521,16.8871255 20.4547758,17.6024526 19.8482642,18.1562088 C19.2213363,18.7178317 18.4040213,19 17.4134521,19 C16.4681928,19 15.691561,18.7530376 15.1046541,18.2574262 C14.4517951,17.7090246 14.0851843,16.9037901 14.0081523,15.8766975 L13.988,15.608 L15.9248188,15.608 L15.9352162,15.8471407 C15.9569094,16.3460843 16.1042464,16.7093462 16.3827163,16.9580172 C16.6371322,17.1920799 16.973929,17.312 17.4014521,17.312 C17.8773488,17.312 18.247994,17.1798119 18.5086754,16.9292233 C18.7415204,16.6963783 18.8554521,16.4224574 18.8554521,16.086 C18.8554521,15.6731278 18.7344041,15.3826126 18.501406,15.1980553 C18.2703224,15.0054856 17.9111648,14.908 17.4014521,14.908 L16.5514521,14.908 L16.5514521,13.352 L17.4014521,13.352 C17.8523663,13.352 18.181273,13.259495 18.3907543,13.0881858 C18.5849837,12.9217035 18.6874521,12.6667239 18.6874521,12.318 C18.6874521,11.9682244 18.5951811,11.7198025 18.4267543,11.5598142 C18.2256932,11.3874761 17.910609,11.296 17.4734521,11.296 C17.0241194,11.296 16.7015605,11.3985187 16.4740783,11.6061442 C16.2388447,11.8119736 16.0968551,12.1365213 16.0543774,12.5931558 L16.0332757,12.82 L14.1537523,12.82 L14.1763157,12.5492386 C14.2542638,11.6138611 14.6001035,10.8830302 15.2193612,10.3671477 C15.801496,9.84969447 16.552822,9.596 17.4614521,9.596 C18.3864411,9.596 19.1457869,9.81990967 19.71927,10.2761095 C20.2985396,10.7476081 20.5914521,11.3974024 20.5914521,12.21 C20.5914521,13.0477077 20.2380219,13.676061 19.556569,14.0703749 C19.8460655,14.2175973 20.0832104,14.3978165 20.2643045,14.611909 Z"/>\n' +
                '</svg>',
            _a[IconSet.PEN] = '<svg xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 24 24">\n' +
                '<path fill="currentColor" d="M14.3255436,4.06202364 L16.7651686,5.44914702 C16.9897298,5.57682821 17.0666702,5.85961199 16.9370197,6.08076228 L12.6613515,13.3739479 L9.40851816,11.5244501 L13.6841864,4.23126444 C13.8138369,4.01011414 14.1009823,3.93434245 14.3255436,4.06202364 Z M8.9390121,12.3253062 L12.1918454,14.174804 L11.2528333,15.7765161 C10.806269,15.527085 10.5045013,15.4474548 10.3475303,15.5376255 C10.1905593,15.6277963 10.0340572,15.7819212 9.87802421,16 L8,16 C8.38736209,15.4401498 8.58161243,15.0343143 8.582751,14.7824935 C8.58388958,14.5306726 8.38963924,14.2455143 8,13.9270183 L8.9390121,12.3253062 Z M5.5,17.0297727 L18.5,17.0297727 C18.7761424,17.0297727 19,17.2536303 19,17.5297727 L19,18.5297727 C19,18.8059151 18.7761424,19.0297727 18.5,19.0297727 L5.5,19.0297727 C5.22385763,19.0297727 5,18.8059151 5,18.5297727 L5,17.5297727 C5,17.2536303 5.22385763,17.0297727 5.5,17.0297727 Z"/>\n' +
                '</svg>',
            _a[IconSet.SIZE_FIT] = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 512 512">\n' +
                '<path fill="currentColor" d="M467.627 452.267h-426.666v-375.466h426.666v375.466zM75.094 418.134h358.4v-307.2h-358.4v307.2z"></path>\n' +
                '<path fill="currentColor" d="M401.067 384h-85.334v-34.134h51.2v-51.2h34.134z"></path>\n' +
                '<path fill="currentColor" d="M401.067 230.4h-34.134v-51.2h-51.2v-34.133h85.334z"></path>\n' +
                '<path fill="currentColor" d="M196.267 384h-85.334v-85.334h34.134v51.2h51.2z"></path>\n' +
                '<path fill="currentColor" d="M145.066 230.4h-34.133v-85.333h85.334v34.133h-51.2z"></path>\n' +
                '</svg>',
            _a[IconSet.SIZE_ORIGINAL] = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 512 512">\n' +
                '<path fill="currentColor" d="M402.774 384h-295.253v-238.934h293.546v238.934zM141.654 349.866h225.28v-170.667h-225.28v170.667z"></path>\n' +
                '<path fill="currentColor" d="M469.334 194.56h-34.133v-85.334h-85.334v-34.133h119.466z"></path>\n' +
                '<path fill="currentColor" d="M76.8 194.56h-34.133v-119.466h119.466v34.133h-85.334z"></path>\n' +
                '<path fill="currentColor" d="M469.334 452.267h-119.466v-34.133h85.334v-85.334h34.134z"></path>\n' +
                '<path fill="currentColor" d="M162.133 452.267h-119.466v-119.466h34.133v85.334h85.334z"></path>\n' +
                '</svg>',
            _a[IconSet.CLOSE] = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="{size}" height="{size}" viewBox="0 0 512 512">\n' +
                '<path fill="currentColor" d="M430.933 110.933l-29.866-29.867-145.067 140.8-145.066-140.8-29.867 29.867 140.8 145.066-140.8 145.067 29.867 29.866 145.066-140.8 145.067 140.8 29.866-29.866-140.8-145.067z"></path>\n' +
                '</svg>',
            _a[IconSet.COMMENT] = '<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n' +
                '<path d="M4 3h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-4.5a1 1 0 0 0-.8.4l-1.9 2.53a1 1 0 0 1-1.6 0L9.3 19.4a1 1 0 0 0-.8-.4H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2zm9.1 15.2a3 3 0 0 1 2.4-1.2h4a.5.5 0 0 0 .5-.5v-11a.5.5 0 0 0-.5-.5h-15a.5.5 0 0 0-.5.5v11c0 .28.22.5.5.5h4a3 3 0 0 1 2.4 1.2l1.1 1.47 1.1-1.47zM9 10h6a1 1 0 0 1 0 2H9a1 1 0 0 1 0-2z" fill-rule="evenodd"></path>\n' +
                '</svg>',
            _a);
        this.name = name;
        this.size = size;
    }
    default_1.prototype.toString = function () {
        var svg = this.icons[this.name];
        var reg = new RegExp('{size}', 'g');
        return svg.replace(reg, this.size.toString());
    };
    return default_1;
}());
var IconSet;
(function (IconSet) {
    IconSet["PLUS"] = "plus";
    IconSet["MINUS"] = "minus";
    IconSet["ZOOM_IN"] = "zoom_in";
    IconSet["ZOOM_OUT"] = "zoom_out";
    IconSet["MAGIC"] = "magic";
    IconSet["DOWNLOAD"] = "download";
    IconSet["BUTTERFLY"] = "butterfly";
    IconSet["IMAGE"] = "image";
    IconSet["MOON"] = "moon";
    IconSet["SUN"] = "sun";
    IconSet["CHEVRON_LEFT"] = "chevron_left";
    IconSet["MENU"] = "menu";
    IconSet["FINISH"] = "finish";
    IconSet["PEN_OUTLINE"] = "pen_outline";
    IconSet["IMAGE_OUTLINE"] = "image_outline";
    IconSet["EXPORT"] = "export";
    IconSet["DELETE"] = "delete";
    IconSet["HEADING1"] = "heading1";
    IconSet["HEADING2"] = "heading2";
    IconSet["HEADING3"] = "heading3";
    IconSet["PEN"] = "pen";
    IconSet["SIZE_ORIGINAL"] = "size_original";
    IconSet["SIZE_FIT"] = "size_fit";
    IconSet["CLOSE"] = "CLOSE";
    IconSet["COMMENT"] = "COMMENT";
})(IconSet || (IconSet = {}));

var NodePainter = /** @class */ (function () {
    function NodePainter(props) {
        var state = props.state, imageUploading = props.imageUploading, imageHolder = props.imageHolder, commentManager = props.commentManager;
        this.state = state;
        this.imageUploading = imageUploading;
        this.imageholder = imageHolder;
        this.commentManager = commentManager;
    }
    /**
     * 获取子节点挂载点
     * @param parent 父节点
     */
    NodePainter.prototype.getChildrenContainer = function (parent) {
        var $children = parent.children('.children');
        if ($children.length === 0) {
            $children = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="children"></div>').appendTo(parent);
        }
        return $children;
    };
    /**
     * 渲染面包屑
     */
    NodePainter.prototype.renderDir = function (dir, dirDom) {
        var _this = this;
        dirDom
            .empty()
            .show()
            .append("\n\t\t\t\t<span class=\"item\">" + t('mindnote.editor.home') + "</span>\n\t\t\t\t<span class=\"arrow\"></span>\n\t\t\t");
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(dir, function (node) {
            var locale = _this.state.getEditorProps().locale;
            var text = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.trim(nodeTextToPlainText(node.text, locale));
            dirDom.append("\n\t\t\t\t<span class=\"item\" data-node-id=\"" + node.id + "\">" + text + "</span>\n\t\t\t\t<span class=\"arrow\"></span>\n\t\t\t");
        });
    };
    /**
     * 渲染节点 dom
     */
    NodePainter.prototype.renderNode = function (node, isRoot, isReadonly) {
        var locale = this.state.getEditorProps().locale;
        var readonly = isReadonly || this.state.getReadonly();
        var editable = readonly ? 'false' : 'true';
        var className = classnames__WEBPACK_IMPORTED_MODULE_25___default()({
            finished: node.finish,
            collapsed: node.collapsed && !isRoot,
            'mindnote-leaf': !node.children || node.children.length === 0,
            'root-node': isRoot,
        });
        var heading = node.heading ? ('heading' + node.heading) : '';
        var commentCount = this.commentManager.getNodeCommentCount(node.id);
        var hasComment = commentCount > 0;
        var colorStyle = node.color ? "style=\"color: " + node.color + "\"" : '';
        var highlight = node.highlight ? "highlight-" + node.highlight : '';
        var $node = jquery__WEBPACK_IMPORTED_MODULE_22___default()("\n\t\t\t<div id=\"" + node.id + "\" class=\"node " + className + "\">\n\t\t\t\t<div class=\"" + classnames__WEBPACK_IMPORTED_MODULE_25___default()('node-wrapper', heading, hasComment && 'comment-node') + "\" data-id=\"" + node.id + "\">\n\t\t\t\t\t<div class=\"" + classnames__WEBPACK_IMPORTED_MODULE_25___default()('content-wrapper', heading, highlight) + "\">\n\t\t\t\t\t\t" + (!environment.isMobile ? '<div class="content-hotspot"></div>' : '') + "\n\t\t\t\t\t\t<div class=\"bullet-wrapper\">\n\t\t\t\t\t\t\t<div class=\"bullet\" data-id=\"" + node.id + "\">\n\t\t\t\t\t\t\t\t<div class=\"dot\"></div>\n\t\t\t\t\t\t\t\t" + (environment.isMobile ? '<div class="bullet-hotspot"></div>' : '') + "\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"content\" data-id=\"" + node.id + "\" spellcheck=\"false\" autocapitalize=\"off\" contenteditable=\"" + editable + "\" " + colorStyle + ">" + textToHtml(node.text, locale) + "</div>\n\t\t\t\t\t\t" + this.renderComments(commentCount) + "\n\t\t\t\t\t\t<div class=\"action-icon toggle\">\n\t\t\t\t\t\t\t" + new default_1(IconSet.PLUS, 20).toString() + "\n\t\t\t\t\t\t\t" + new default_1(IconSet.MINUS, 20).toString() + "\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t");
        var $nodeWrapper = $node.children('.node-wrapper');
        /* 渲染图片 */
        if (node.images && node.images.length > 0) {
            $nodeWrapper.append(this.renderImages(node));
        }
        /* 渲染描述 */
        if (nodeTextToPlainText(node.note, locale, false) !== '') {
            $nodeWrapper.append(this.renderNote(node, isReadonly));
        }
        return $node;
    };
    /**
     * 渲染备注
     */
    NodePainter.prototype.renderNote = function (node, isReadonly) {
        var readonly = isReadonly || this.state.getReadonly();
        var locale = this.state.getEditorProps().locale;
        return jquery__WEBPACK_IMPORTED_MODULE_22___default()("<div class=\"note\" spellcheck=\"false\" autocapitalize=\"off\" contenteditable=\"" + (readonly ? 'false' : 'true') + "\">" + textToHtml(node.note, locale) + "</div>");
    };
    /**
     * 渲染评论
     * @param node
     */
    NodePainter.prototype.renderComments = function (commentCount) {
        var count = Math.min(99, commentCount);
        var isFeed = this.state.getEditorProps().isFeed;
        var feedBubble = isFeed ? "<span class=\"feed-bubble\">" + count + "</span>" : '';
        return environment.isMobile ? "\n\t\t\t<div class=\"comment-bubble\">" + count + "</div>\n\t\t" : "\n\t\t\t<div class=\"comment-wrapper\">\n\t\t\t\t<span class=\"comment-button\">\n\t\t\t\t\t" + new default_1(IconSet.COMMENT, 20).toString() + "\n\t\t\t\t\t<div class=\"comment-tooltip\">" + t('common.comment') + "</div>\n\t\t\t\t</span>\n\t\t\t\t" + feedBubble + "\n\t\t\t</div>\n\t\t";
    };
    /**
     * 绘制节点的图片
     * @param node
     */
    NodePainter.prototype.renderImages = function (node) {
        var _this = this;
        var uploading = this.imageUploading.getByNodeId(node.id);
        var images = (node.images || []).concat(uploading);
        var $list = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="attach-image-list"></div>');
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(images, function (img) { return _this.renderImage(node, img).appendTo($list); });
        return $list;
    };
    /**
     * 渲染 node 图片
     */
    NodePainter.prototype.renderImage = function (node, image) {
        var props = this.state.getEditorProps();
        var imgInitWidth = image.w || image.ow || 100;
        var ratio = ((image.ow || 0) / (image.oh || 0)) || 1;
        var style = "width: " + imgInitWidth + "px; height: " + imgInitWidth / ratio + "px";
        var useCredentials = props.env === MindNoteEnvironment.PC && document.URL.indexOf('localhost') < 0;
        var crossorigin = useCredentials ? 'crossorigin="use-credentials"' : '';
        var readonly = this.state.getReadonly();
        var uploading = image.uploading;
        var itemClassName = classnames__WEBPACK_IMPORTED_MODULE_25___default()({
            loading: !uploading,
            uploading: uploading,
        });
        var imgClassName = classnames__WEBPACK_IMPORTED_MODULE_25___default()({
            readonly: readonly,
            loading: !uploading,
        });
        var url = getImageUrl(props.imageUrlPrefix, image.uri || '');
        var btns = readonly ? '' : "\n\t\t\t<div class=\"action attach-resize\" data-nodeid=\"" + node.id + "\"></div>\n\t\t\t<div class=\"action attach-remove\" title=\"" + t('mindnote.editor.delete') + "\" data-nodeid=\"" + node.id + "\"></div>\n\t\t\t<div class=\"action attach-copy\" title=\"" + t('mindnote.editor.copy') + "\" data-nodeid=\"" + node.id + "\"></div>\n\t\t";
        var $image = jquery__WEBPACK_IMPORTED_MODULE_22___default()("\n\t\t\t<div fid=\"" + image.id + "\" class=\"attach-image-item " + itemClassName + "\" def=\"" + (uploading ? '' : encodeURIComponent(JSON.stringify(image))) + "\">\n\t\t\t\t<div class=\"image-wrapper\">\n\t\t\t\t\t<!-- img -->\n\t\t\t\t\t" + btns + "\n\t\t\t\t\t<!-- spinner -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t");
        var $img = jquery__WEBPACK_IMPORTED_MODULE_22___default()("<img data-nodeid=\"" + node.id + "\" style=\"" + style + "\" src=\"" + url + "\" ondragstart=\"return false\" class=\"attach-img " + imgClassName + "\" " + crossorigin + "/>");
        this.bindImageEvent($img, $image, image);
        return $image;
    };
    /**
     * 监听加载图片的事件
     * @param $img img 标签
     * @param $image image 块
     * @param image 图片数据
     */
    NodePainter.prototype.bindImageEvent = function ($img, $image, image) {
        var _this = this;
        var $imageWrapper = $image.find('.image-wrapper');
        if (image.uploading) {
            // 正在上传中，直接渲染
            $img.on('load', function () {
                var holder = _this.imageholder.get(image.id);
                if (holder) {
                    var progressWidth = holder.getProps().width || 0;
                    var imgWidth = $img.width() || 0;
                    /* 若图片的宽度小于默认的进度条宽度，则取75% */
                    if (imgWidth <= progressWidth) {
                        holder.update({ width: imgWidth * 0.75 });
                    }
                    holder.mountTo($imageWrapper);
                }
                /* 图片加载成功后，需要把高度重设，使图片拖动能够正常运行 */
                $img.css('height', 'auto');
            });
        }
        else {
            var $spinner_1 = jquery__WEBPACK_IMPORTED_MODULE_22___default()("\n\t\t\t\t<div class=\"image-spinner\">\n\t\t\t\t\t<div class=\"spinner-text\">\n\t\t\t\t\t\t<div class=\"mindnote-loader\"></div>\n\t\t\t\t\t\t<div>" + t('mindnote.editor.image_loding') + "</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t");
            $imageWrapper.append($spinner_1);
            $img.on('load', function () {
                $img.removeClass('loading');
                $image.removeClass('loading');
                /* 图片加载成功后，需要把高度重设，使图片拖动能够正常运行 */
                $img.css('height', 'auto');
                // 图片显示出来后，删除loading框
                $spinner_1.remove();
            }).on('error', function (e) {
                $img.removeClass('loading');
                $image.removeClass('loading');
                $image.addClass('error');
                $spinner_1.empty().append("\n\t\t\t\t\t<div class=\"mindnote-spinner-error\">\n\t\t\t\t\t\t" + t('mindnote.editor.image_load_failed') + "\n\t\t\t\t\t</div>\n\t\t\t\t");
            });
        }
        $imageWrapper.prepend($img);
    };
    /**
     * 绘制节点的图片
     * @param node
     * @param nodeContainer 节点的顶级容器
     */
    NodePainter.prototype.refreshImages = function (node, nodeContainer) {
        var _this = this;
        var nodeWrapper = nodeContainer.children('.node-wrapper');
        var uploading = this.imageUploading.getByNodeId(node.id);
        var images = (node.images || []).concat(uploading);
        var imageContainer = nodeWrapper.children('.attach-image-list');
        // 没图片
        if (images.length === 0) {
            imageContainer.remove();
            return;
        }
        // container
        if (imageContainer.length === 0) {
            imageContainer = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="attach-image-list"></div>');
            nodeWrapper.children('.content-wrapper').after(imageContainer);
        }
        else {
            // 删除已经不存在的
            var currentImageIds_1 = Object(lodash_es__WEBPACK_IMPORTED_MODULE_8__["default"])(images, function (prev, img) {
                prev[img.id] = true;
                return prev;
            }, {});
            imageContainer.children('.attach-image-item').each(function () {
                var item = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
                var fid = item.attr('fid') || '';
                if (!currentImageIds_1[fid]) {
                    // 不存在了，执行删除
                    item.remove();
                }
            });
        }
        // 重新绘制
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(images, function (img, index) {
            var imgItem = imageContainer.children("div[fid=\"" + img.id + "\"]");
            if (imgItem.length) {
                // 已经存在，不重新创建, 但是要修改uploading状态
                if (!img.uploading) {
                    imgItem.removeClass('uploading');
                    imgItem.attr('def', encodeURIComponent(JSON.stringify(img)));
                }
                if (img.w) {
                    imgItem.find('img').css('width', img.w);
                }
                return true;
            }
            imgItem = _this.renderImage(node, img);
            if (index === 0) {
                imageContainer.prepend(imgItem);
            }
            else {
                var preImageItem = imageContainer.children(".attach-image-item:eq(" + (index - 1) + ")");
                preImageItem.after(imgItem);
            }
        });
    };
    return NodePainter;
}());

/**
 * 初始化视图区域
 */
var Viewport = /** @class */ (function () {
    function Viewport(props) {
        this.scrollContainerIsWindow = false;
        var paperContainer = props.root;
        var browserClass = classnames__WEBPACK_IMPORTED_MODULE_25___default()({
            webkit: environment.isWebkit,
            msie: environment.isIE && !environment.isEdge,
        });
        this.paper = jquery__WEBPACK_IMPORTED_MODULE_22___default()("<div class=\"mindnote-paper " + browserClass + "\"></div>").appendTo(paperContainer);
        this.paperHeader = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="mindnote-header"></div>').appendTo(this.paper);
        this.nameContainer = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="mindnote-name"></div>').appendTo(this.paperHeader);
        this.nameContainer.append("<div class=\"mindnote-title-content\" spellcheck=\"false\" autocapitalize=\"off\" contenteditable=\"true\" placeholder=\"" + props.titlePlaceholder + "\" />");
        this.dir = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="mindnote-dir"></div>').appendTo(this.paperHeader);
        this.nodeWrapper = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="mindnote-tree mindnote-wrapper"></div>').appendTo(this.paper);
        this.controlHolder = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="mindnote-control-holder"></div>').appendTo(paperContainer);
        this.demoScreen = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="mindnote-demo-screen"></div>').appendTo(paperContainer);
        // 获取scrollContainer
        this.scrollContainer = jquery__WEBPACK_IMPORTED_MODULE_22___default()('body');
        var element = jquery__WEBPACK_IMPORTED_MODULE_22___default()(paperContainer);
        while (true) {
            var parentElement = element.parent();
            if (parentElement[0].tagName.toLowerCase() === 'body') {
                this.scrollContainer = jquery__WEBPACK_IMPORTED_MODULE_22___default()(window);
                this.scrollContainerIsWindow = true;
                break;
            }
            if (parentElement.length === 0) {
                break;
            }
            var overflow = getComputedStyle(parentElement[0]).overflowY;
            if (overflow === 'auto' || overflow === 'scroll') {
                this.scrollContainer = parentElement;
                break;
            }
            element = parentElement;
        }
        // 给 mindnote-tree 设置最小高度
        if (!environment.isMobile) {
            var offset = this.nodeWrapper.offset();
            this.nodeWrapper.css({
                'min-height': window.innerHeight - offset.top - 330 + "px",
            });
        }
    }
    return Viewport;
}());

var Lifecycle = /** @class */ (function () {
    function Lifecycle(state) {
        this.state = state;
    }
    Lifecycle.prototype.destroy = function () {
        var eventSpace = this.state.getEditorState().eventSpace;
        jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).off(eventSpace).off('.drag_node');
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('body').off(eventSpace);
        jquery__WEBPACK_IMPORTED_MODULE_22___default()(this.state.getEditorProps().root).empty();
        jquery__WEBPACK_IMPORTED_MODULE_22___default()(window).off(eventSpace);
    };
    return Lifecycle;
}());

/**
 * 下载大文件blob
 * @param blob
 */
function downloadBlob(blob, fileName) {
    Object(file_saver__WEBPACK_IMPORTED_MODULE_31__["saveAs"])(blob, fileName);
}

/**
 * 获取 xml node
 */
function getXmlNode(tag) {
    return {
        tag: tag,
        attrs: {},
        children: [],
    };
}
/**
 * 获取 xml string
 */
function getXmlString(node, level) {
    if (level === void 0) { level = 0; }
    // tab，两空格当 tab
    var tab = '  ';
    var currentTab = "\n" + Object(lodash_es__WEBPACK_IMPORTED_MODULE_17__[/* default */ "a"])(tab, level);
    // attr
    var attrs = Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(node.attrs).map(function (key) { return key + "=\"" + escapeXmlEntities(node.attrs[key]) + "\""; }).join(' ');
    var attrStr = attrs === '' ? '' : " " + attrs;
    // children
    var children = node.children.map(function (child) { return getXmlString(child, level + 1); }).join('');
    return node.children.length > 0
        ? currentTab + "<" + node.tag + attrStr + ">" + children + currentTab + "</" + node.tag + ">"
        : currentTab + "<" + node.tag + attrStr + "/>";
}
/**
 * 转义 xml entities
 */
function escapeXmlEntities(text) {
    var entities = {
        '"': '&quot;',
        '\'': '&apos;',
        '&': '&amp;',
        '>': '&gt;',
        '<': '&lt;',
    };
    var reg = new RegExp(Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(entities).join('|'), 'g');
    return text.replace(reg, function (match) { return entities[match]; });
}

/**
 * 思维笔记导出模块
 */
var MinderExporter = /** @class */ (function () {
    function MinderExporter(minder, state, eventSource) {
        this.wrapper = jquery__WEBPACK_IMPORTED_MODULE_22___default()();
        this.canvas = jquery__WEBPACK_IMPORTED_MODULE_22___default()();
        this.ctx = null;
        this.resultW = 0;
        this.resultH = 0;
        this.resultSize = 0;
        this.resultScale = 1;
        this.wrapperOffset = {};
        this.zoom = 1;
        this.fontFamily = '"Helvetica Neue", -apple-system, BlinkMacSystemFont, "Segoe UI", "PingFang SC", Roboto, "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "Myriad Pro", "Hiragino Sans", "Yu Gothic", "Lucida Grande", sans-serif';
        this.freemindDownloading = false;
        this.imageDownloading = false;
        this.minder = minder;
        this.state = state;
        this.eventSource = eventSource;
    }
    MinderExporter.prototype.drawMindImage = function () {
        if (this.imageDownloading) {
            return;
        }
        this.wrapper = this.minder.getMindMap();
        this.resultW = this.wrapper.width() || 0;
        this.resultH = this.wrapper.height() || 0;
        var topicCount = this.wrapper.find('.topic:visible').length;
        this.resultSize = this.resultW * this.resultH;
        if (topicCount > 2000 || this.resultSize > 80000000) {
            // 不允许导出图片
            // $.alert({
            // 	title: '无法导出',
            // 	content: '思维导图尺寸太大，不能导出图片，图片最多支持2000条主题，您可以：<div>1. 折叠不重要的主题</div><div>2. 点击某一子主题，进入主题后，导出相应的主题</div>'
            // });
            return;
        }
        if (this.resultSize <= 8000000) {
            // 800w像素内的图片，可以保存两倍
            this.resultScale = 2;
        }
        else if (this.resultSize <= 20000000) {
            this.resultScale = 1.5;
        }
        else {
            this.resultScale = 1;
        }
        if (isMobile()) {
            // 手机端要全屏遮罩一下
            jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div id="mind-export-indicator"><div class="mindnote-loader"></div></div>').appendTo('body');
        }
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('#mind-download-image').text(t('mindnote.editor.exporting'));
        this.imageDownloading = true;
        this.canvas = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<canvas></canvas>').appendTo('body');
        this.canvas.attr({
            width: this.resultW * this.resultScale,
            height: this.resultH * this.resultScale
        });
        this.ctx = this.canvas[0].getContext('2d');
        this.wrapperOffset = this.wrapper.offset();
        this.ctx.save();
        this.ctx.scale(this.resultScale, this.resultScale);
        // 准备，画一个背景
        var bgHolder = jquery__WEBPACK_IMPORTED_MODULE_22___default()('#mind-bg-holder');
        var bgImg = bgHolder.children('img.mind-export-bg');
        if (bgImg.length) {
            // 背景图片平铺
            this.ctx.fillStyle = this.ctx.createPattern(bgImg[0], 'repeat');
        }
        else {
            this.ctx.fillStyle = bgHolder.data('color');
        }
        this.ctx.fillRect(0, 0, this.resultW, this.resultH);
        // 画水印
        var wmImg = bgHolder.children('img.mind-export-watermark');
        if (wmImg.length > 0) {
            this.ctx.fillStyle = this.ctx.createPattern(wmImg[0], 'repeat');
            this.ctx.fillRect(0, 0, this.resultW, this.resultH);
        }
        // 第一步，先画线
        this.drawLinkers();
        this.ctx.restore(); // 重置回未缩放状态
        this.drawAfterReady();
    };
    /**
     * 绘制导出的图片中的连接线
     */
    MinderExporter.prototype.drawLinkers = function () {
        var me = this;
        this.wrapper.find('.linker-container:visible').each(function () {
            var lineContainer = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            var line = lineContainer.children('svg');
            var offset = line.offset();
            // 相对于容器的坐标
            var left = (offset.left - me.wrapperOffset.left) / me.zoom;
            var top = (offset.top - me.wrapperOffset.top) / me.zoom;
            me.ctx.save();
            me.ctx.translate(left, top);
            var path = lineContainer.attr('path-d') || '';
            var reg = /[A-Z]/g; // 匹配任意字母
            var matches = path.match(reg);
            var points = path.split(reg);
            var actionIndex = 0;
            me.ctx.beginPath();
            jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(points, function (index, point) {
                point = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.trim(point);
                if (point) {
                    var action = matches[actionIndex];
                    if (action === 'M') {
                        var movePoint = point.split(',');
                        me.ctx.moveTo(+movePoint[0], +movePoint[1]);
                    }
                    else if (action === 'L') {
                        var lineToPoint = point.split(',');
                        me.ctx.lineTo(+lineToPoint[0], +lineToPoint[1]);
                    }
                    else if (action === 'C') {
                        var curvePoints = point.split(' ');
                        var control1 = curvePoints[0].split(',');
                        var control2 = curvePoints[1].split(',');
                        var endPoint = curvePoints[2].split(',');
                        me.ctx.bezierCurveTo(+control1[0], +control1[1], +control2[0], +control2[1], +endPoint[0], +endPoint[1]);
                    }
                    else if (action === 'Q') {
                        var quaPoints = point.split(' ');
                        var qua1 = quaPoints[0].split(',');
                        var quaEnd = quaPoints[1].split(',');
                        me.ctx.quadraticCurveTo(+qua1[0], +qua1[1], +quaEnd[0], +quaEnd[1]);
                    }
                    actionIndex++;
                }
            });
            me.ctx.strokeStyle = line.attr('stroke') || '';
            me.ctx.lineWidth = parseInt(line.attr('stroke-width') || '');
            me.ctx.stroke();
            // 还原位移
            me.ctx.restore();
        });
    };
    /**
     * 基础工作准备好后，背景画好，连线都画好后
     * 继续绘制其他内容
     */
    MinderExporter.prototype.drawAfterReady = function () {
        var me = this;
        this.ctx.scale(this.resultScale, this.resultScale);
        this.ctx.save();
        // 第二步，绘制展开收缩的图标，因为他的z级别是在线上边，主题下边
        var icons = this.wrapper.find('.tp-expand-box:visible');
        icons.each(function () {
            me.ctx.save();
            var icon = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            var offset = icon.offset();
            // 相对于容器的坐标
            var left = (offset.left - me.wrapperOffset.left) / me.zoom;
            var top = (offset.top - me.wrapperOffset.top) / me.zoom;
            var iconWidth = icon.width() || 0;
            if (iconWidth > 12) {
                // 如果宽度大于12，说明是左右有线的一级主题后边的图标，要画一条线
                me.ctx.strokeStyle = icon.css('background-color');
                me.ctx.lineWidth = 2;
                me.ctx.beginPath();
                me.ctx.moveTo(left, top + 1);
                me.ctx.lineTo(left + iconWidth, top + 1);
                me.ctx.stroke();
                // 图标的位置向右移动2像素
                left += 3.5;
            }
            // 展开收缩
            me.ctx.beginPath();
            var radius = 6;
            me.ctx.beginPath();
            var center = { x: left + radius, y: top + 1 };
            me.ctx.arc(center.x, center.y, radius, 0, Math.PI * 2, false);
            me.ctx.fillStyle = '#fff';
            me.ctx.fill();
            me.ctx.strokeStyle = 'rgba(0,0,0,0.1)';
            me.ctx.lineWidth = 1;
            me.ctx.stroke();
            me.ctx.strokeStyle = icon.attr('linecolor') || '';
            me.ctx.lineWidth = 1.6;
            me.ctx.beginPath();
            me.ctx.moveTo(center.x - 3, center.y);
            me.ctx.lineTo(center.x + 3, center.y);
            me.ctx.stroke();
            if (icon.parents('.tp-container').hasClass('collapsed')) {
                me.ctx.beginPath();
                me.ctx.moveTo(center.x, center.y - 3);
                me.ctx.lineTo(center.x, center.y + 3);
                me.ctx.stroke();
            }
            me.ctx.restore();
        });
        // 第三步，绘制块节点，包括中心主题和分支主题
        var topics = me.wrapper.find('.topic-text.root, .topic-text.sub');
        topics.each(function () {
            me.ctx.save();
            var topic = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            var bgColor = topic.css('background-color');
            var borderWidth = parseInt(topic.css('border-left-width'));
            me.ctx.fillStyle = bgColor;
            var offset = topic.offset();
            // 相对于容器的坐标
            var left = (offset.left - me.wrapperOffset.left) / me.zoom;
            var top = (offset.top - me.wrapperOffset.top) / me.zoom;
            var width = topic.outerWidth() || 0;
            var height = topic.outerHeight() || 0;
            var radius = topic.hasClass('sub') ? 6 : 10;
            me.ctx.beginPath();
            me.ctx.moveTo(left + radius, top);
            me.ctx.lineTo(left + width - radius, top);
            me.ctx.quadraticCurveTo(left + width, top, left + width, top + radius);
            me.ctx.lineTo(left + width, top + height - radius);
            me.ctx.quadraticCurveTo(left + width, top + height, left + width - radius, top + height);
            me.ctx.lineTo(left + radius, top + height);
            me.ctx.quadraticCurveTo(left, top + height, left, top + height - radius);
            me.ctx.lineTo(left, top + radius);
            me.ctx.quadraticCurveTo(left, top, left + radius, top);
            me.ctx.closePath();
            me.ctx.fill();
            if (borderWidth > 0) {
                me.ctx.strokeStyle = topic.css('border-left-color');
                me.ctx.lineWidth = borderWidth;
                me.ctx.stroke();
            }
            me.ctx.restore();
        });
        // 第四步，绘制文字
        var allTopics = me.wrapper.find('.topic-text:visible');
        allTopics.each(function () {
            me.ctx.save();
            var topic = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            var offset = topic.offset();
            // 计算开始写字的坐标
            var left = (offset.left - me.wrapperOffset.left) / me.zoom;
            var top = (offset.top - me.wrapperOffset.top) / me.zoom;
            var paddingLeft = 0;
            var paddingTop = 0;
            var lineHeight = 20;
            var fontSize = '14px';
            if (topic.hasClass('root')) {
                paddingLeft = 25;
                paddingTop = 10;
                lineHeight = 36;
                fontSize = '24px';
            }
            else if (topic.hasClass('sub')) {
                paddingLeft = 15;
                paddingTop = 6;
                lineHeight = 27;
                fontSize = '16px';
            }
            var borderWidth = parseInt(topic.css('border-left-width'));
            var defaultFont = fontSize + ' ' + me.fontFamily;
            me.ctx.textBaseline = 'middle';
            me.ctx.fillStyle = topic.css('color');
            var textNodes = topic[0].childNodes;
            var beginX = left + paddingLeft;
            var currentX = 0;
            var currentY = top + paddingTop + lineHeight / 2;
            if (borderWidth) {
                currentY += borderWidth;
                beginX += borderWidth;
            }
            var maxWidth = 500;
            if (textNodes.length > 0) {
                for (var i = 0; i < textNodes.length; i++) {
                    // 此处要忽略掉描述节点
                    var node = textNodes[i];
                    var text = void 0;
                    me.ctx.save();
                    var font = defaultFont;
                    if (node.nodeName === '#text') {
                        text = node.textContent || '';
                    }
                    else {
                        var $node = jquery__WEBPACK_IMPORTED_MODULE_22___default()(node);
                        text = node.innerText || $node.text();
                        if ($node.hasClass('bold')) {
                            font = 'bold ' + font;
                        }
                        if ($node.hasClass('italic')) {
                            font = 'italic ' + font;
                        }
                    }
                    me.ctx.font = font;
                    var textWidth = me.ctx.measureText(text).width;
                    if (currentX + textWidth > maxWidth) {
                        // 开始换行，一个字符一个字符的绘制
                        for (var wi = 0; wi < text.length; wi++) {
                            var ch = text[wi];
                            var chWidth = me.ctx.measureText(ch).width;
                            if (currentX + chWidth > maxWidth) {
                                // 超出，重新换行
                                currentY += lineHeight;
                                currentX = 0;
                            }
                            me.ctx.fillText(ch, currentX + beginX, currentY);
                            currentX += chWidth;
                        }
                    }
                    else {
                        me.ctx.fillText(text, currentX + beginX, currentY);
                        currentX += textWidth;
                    }
                    me.ctx.restore();
                }
            }
            if (topic.children('.topic-note').length) {
                // 包括备注，绘制一个小图标
                currentX += 5;
                if (currentX + 18 > maxWidth) {
                    currentY += lineHeight;
                    currentX = 0;
                }
                me.ctx.beginPath();
                var radius = 9;
                me.ctx.beginPath();
                var center = { x: currentX + beginX + 9, y: currentY };
                me.ctx.arc(center.x, center.y, radius, 0, Math.PI * 2, false);
                me.ctx.fillStyle = '#fff6cc';
                me.ctx.fill();
                me.ctx.strokeStyle = '#4f575d';
                me.ctx.lineWidth = 1.2;
                var lineBeginX = center.x - 5;
                var lineEndX = center.x + 5;
                me.ctx.beginPath();
                me.ctx.moveTo(lineBeginX, center.y - 3);
                me.ctx.lineTo(lineEndX, center.y - 3);
                me.ctx.moveTo(lineBeginX, center.y);
                me.ctx.lineTo(lineEndX, center.y);
                me.ctx.moveTo(lineBeginX, center.y + 3);
                me.ctx.lineTo(lineEndX, center.y + 3);
                me.ctx.stroke();
            }
            me.ctx.restore();
        });
        // 第五步，绘制文档内图片
        var attachImages = me.wrapper.find('.attach-img');
        attachImages.each(function () {
            var imgItem = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            if (imgItem.is(':visible') && !imgItem.hasClass('loading')) {
                var offset = imgItem.offset();
                // 相对于容器的坐标
                var left = (offset.left - me.wrapperOffset.left) / me.zoom;
                var top_1 = (offset.top - me.wrapperOffset.top) / me.zoom;
                var width = imgItem.width() || 0;
                var height = imgItem.height() || 0;
                me.ctx.drawImage(imgItem[0], left, top_1, width, height);
            }
        });
        var downloadName = this.getDownloadName();
        downloadName += '.png';
        try {
            var resultBase64 = me.canvas[0].toDataURL('image/png');
            if (this.state.getEditorProps().env === MindNoteEnvironment.APP) {
                var data = {
                    name: downloadName,
                    base64Data: resultBase64
                };
                this.eventSource.trigger(SourceEvent.MIND_MAP_EXPORT, data);
            }
            else {
                // PC端直接下载
                var blob = dataURItoBlob(resultBase64);
                downloadBlob(blob, downloadName);
            }
        }
        catch (e) {
            console.error(e);
        }
        me.canvas.remove();
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('#mind-download-image').text(t('mindnote.editor.image'));
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('#mind-export-indicator').remove();
        me.imageDownloading = false;
    };
    MinderExporter.prototype.getDownloadName = function () {
        var downloadName = this.wrapper.find('.topic-text.root').text();
        if (!downloadName) {
            downloadName = t('mindnote.editor.mind_export_name');
        }
        if (downloadName.length > 25) {
            downloadName = downloadName.substr(0, 25);
        }
        return downloadName;
    };
    /**
     * 构建FreeMind节点
     * @param node
     * @param container
     * @param position
     */
    MinderExporter.prototype.buildFreeMindNode = function (node, container, position) {
        var outline = getXmlNode('node');
        var text = nodeTextToPlainText(node.text, this.state.getEditorProps().locale, false);
        outline.attrs.TEXT = text;
        outline.attrs.ID = node.id;
        if (position) {
            // 如果包含position参数，说明是顶级分支主题，气泡样式
            outline.attrs.STYLE = 'bubble';
            outline.attrs.POSITION = position;
        }
        else {
            outline.attrs.STYLE = 'fork';
        }
        // 构建子节点
        var me = this;
        if (node.children && node.children.length > 0) {
            jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(node.children, function (index, child) {
                me.buildFreeMindNode(child, outline);
            });
        }
        container.children.push(outline);
    };
    /**
     * 导出思维导图图片
     */
    MinderExporter.prototype.exportMindImage = function (z) {
        this.zoom = z;
        this.drawMindImage();
    };
    /**
     * 导出FreeMind
     * @param nodes
     * @param structure
     * @returns {string}
     */
    MinderExporter.prototype.exportFreeMind = function (nodes, structure) {
        if (this.freemindDownloading) {
            return;
        }
        this.freemindDownloading = true;
        this.wrapper = this.minder.getMindMap();
        var container = getXmlNode('map');
        var rootNode = getXmlNode('node');
        rootNode.attrs.ID = 'root';
        rootNode.attrs.TEXT = this.wrapper.find('.topic-text.root').text();
        container.children.push(rootNode);
        // 构建内容
        var me = this;
        if (nodes) {
            jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodes, function (index, node) {
                var position = structure;
                if (structure === 'org' || structure === 'default') {
                    if (index + 1 > Math.ceil(nodes.length / 2)) {
                        position = 'left';
                    }
                    else {
                        position = 'right';
                    }
                }
                me.buildFreeMindNode(node, rootNode, position);
            });
        }
        var xmlContent = getXmlString(container);
        var blob = new Blob([xmlContent], { type: 'text/xml' });
        downloadBlob(blob, this.getDownloadName() + '.mm');
        this.freemindDownloading = false;
    };
    return MinderExporter;
}());

var ICON_SIZE = 24;
/**
 * 样式框
 */
var StylePanel = /** @class */ (function (_super) {
    __extends(StylePanel, _super);
    function StylePanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.structureRef = null;
        _this.styleRef = null;
        _this.handleStructureClick = function (e) {
            /* 阻止 React 冒泡 */
            e.bubbles = false;
            var $target = jquery__WEBPACK_IMPORTED_MODULE_22___default()(e.target);
            var $action = $target.add($target.parentsUntil(_this.structureRef)).filter('[data-action]');
            /* 若不存在按钮，则不处理 */
            if ($action.length <= 0) {
                return;
            }
            var action = $action.attr('data-action');
            /* 若两次操作不相等，则触发 change */
            if (action !== _this.props.structure) {
                _this.props.onStructureChange(action);
            }
        };
        _this.handleStyleClick = function (e) {
            /* 阻止 React 冒泡 */
            e.bubbles = false;
            var $target = jquery__WEBPACK_IMPORTED_MODULE_22___default()(e.target);
            var $action = $target.add($target.parentsUntil(_this.styleRef)).filter('[data-action]');
            /* 若不存在按钮，则不处理 */
            if ($action.length <= 0) {
                return;
            }
            var action = $action.attr('data-action');
            /* 若两次操作不相等，则触发 change */
            if (action !== _this.props.style) {
                _this.props.onStyleChange(action);
            }
        };
        return _this;
    }
    StylePanel.prototype.render = function () {
        var _this = this;
        var _a = this.props, structure = _a.structure, style = _a.style;
        return (Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { className: "mindnote-setting-panel" },
            Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { className: "mindnote-structure-title" }, t('mindnote.editor.structure')),
            Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("ul", { ref: function (ref) { return _this.structureRef = ref; }, className: "mindnote-structure-menu", onClick: this.handleStructureClick },
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { className: structure === MinderStructure.DEFAULT ? 'active' : '', "data-action": MinderStructure.DEFAULT },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Icon"], { type: "navigation-map", size: ICON_SIZE })),
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { className: structure === MinderStructure.RIGHT ? 'active' : '', "data-action": MinderStructure.RIGHT },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Icon"], { type: "structure-right", size: ICON_SIZE })),
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { className: structure === MinderStructure.LEFT ? 'active' : '', "data-action": MinderStructure.LEFT },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Icon"], { type: "structure-left", size: ICON_SIZE })),
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { className: structure === MinderStructure.ORG ? 'active' : '', "data-action": MinderStructure.ORG },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Icon"], { type: "structure-down", size: ICON_SIZE }))),
            Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { className: "mindnote-style-title" }, t('mindnote.editor.style')),
            Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("ul", { ref: function (ref) { return _this.styleRef = ref; }, className: "mindnote-style-menu", onClick: this.handleStyleClick },
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { className: classnames__WEBPACK_IMPORTED_MODULE_25___default()('style-light', style === MinderTheme.CLASSIC && 'active'), "data-action": MinderTheme.CLASSIC }),
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { className: classnames__WEBPACK_IMPORTED_MODULE_25___default()('style-dark', style === MinderTheme.DEFAULT && 'active'), "data-action": MinderTheme.DEFAULT }))));
    };
    StylePanel.defaultProps = {
        structure: MinderStructure.DEFAULT,
        style: MinderTheme.CLASSIC,
    };
    return StylePanel;
}(react__WEBPACK_IMPORTED_MODULE_28__["Component"]));

var Item = _byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Menu"].Item;
var TeaLogger$7 = TeaManager.getDecorator();
var ToolbarAction$1;
(function (ToolbarAction) {
    ToolbarAction["LIGHT"] = "light";
    ToolbarAction["NIGHT"] = "night";
    ToolbarAction["ZOOM_IN"] = "zoom-in";
    ToolbarAction["ZOOM_OUT"] = "zoom-out";
    ToolbarAction["DOWNLOAD"] = "download";
    ToolbarAction["EXIT"] = "exit";
})(ToolbarAction$1 || (ToolbarAction$1 = {}));
var ICON_SIZE$1 = 18;
/**
 * 展示工具栏
 */
var DemoToolbarHolder = /** @class */ (function (_super) {
    __extends(DemoToolbarHolder, _super);
    function DemoToolbarHolder(props) {
        var _this = _super.call(this, props) || this;
        _this.containerRef = null;
        _this.menuRef = null;
        /**
         * 处理菜单点击事件
         */
        _this.handleMenuClick = function (e) {
            /* popover 中的事件会冒泡上来 */
            if (!e.bubbles) {
                return;
            }
            var $target = jquery__WEBPACK_IMPORTED_MODULE_22___default()(e.target);
            var $action = $target.add($target.parentsUntil(_this.menuRef)).filter('[data-action]');
            /* 若不存在按钮，则不处理 */
            if ($action.length <= 0) {
                return;
            }
            var action = $action.attr('data-action');
            switch (action) {
                case ToolbarAction$1.ZOOM_IN:
                    _this.handleZoomIn(_this.props.zoom);
                    break;
                case ToolbarAction$1.ZOOM_OUT:
                    _this.handleZoomOut(_this.props.zoom);
                    break;
                case ToolbarAction$1.LIGHT:
                case ToolbarAction$1.NIGHT:
                    _this.handleModeChange(action);
                    break;
                case ToolbarAction$1.DOWNLOAD:
                    if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(_this.props.onExport)) {
                        _this.props.onExport(MinderExportType.IMAGE);
                    }
                    break;
                case ToolbarAction$1.EXIT:
                    _this.props.onExit(e.nativeEvent);
                    break;
                default:
                    break;
            }
        };
        return _this;
    }
    DemoToolbarHolder.prototype.handleModeChange = function (mode) {
        if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(this.props.onModeChange)) {
            this.props.onModeChange(mode);
        }
    };
    DemoToolbarHolder.prototype.handleZoomIn = function (zoom) {
        this.props.onZoomIn(this.props.zoom);
    };
    DemoToolbarHolder.prototype.handleZoomOut = function (zoom) {
        this.props.onZoomOut(this.props.zoom);
    };
    DemoToolbarHolder.prototype.handleStructureChange = function (structure) {
        if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(this.props.onStructureChange)) {
            this.props.onStructureChange(structure);
        }
    };
    DemoToolbarHolder.prototype.handleThemeChange = function (theme) {
        if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(this.props.onStyleChange)) {
            this.props.onStyleChange(theme);
        }
    };
    DemoToolbarHolder.prototype.handleExport = function (e) {
        if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_10__["default"])(this.props.onExport)) {
            this.props.onExport(e.value);
        }
    };
    DemoToolbarHolder.prototype.render = function () {
        var _this = this;
        // feed 和 移动端工具栏在右下角
        var isFeed = this.props.editorState.getEditorProps().isFeed;
        var isFeedOrMobile = isFeed || bowser__WEBPACK_IMPORTED_MODULE_27___default.a.mobile;
        var precent = Math.round(this.props.zoom * 100) + "%";
        /* web 端向左，mobile 朝上 */
        var placement = isFeedOrMobile ? 'top' : 'left';
        /* web 端在右上，mobile 在右下 */
        var offset = isFeedOrMobile ? [6, 0] : [0, 6];
        /* 是否是演示模式 */
        var isFullscreen = this.props.view === 'fullscreen';
        /* 是否是夜间模式 */
        var isNight = this.props.mode === 'night';
        return (Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { ref: function (ref) { return _this.containerRef = ref; }, className: classnames__WEBPACK_IMPORTED_MODULE_25___default()({
                'mindnote-map-toolbar__mobile': isFeedOrMobile && !isFullscreen,
                'mindnote-map-toolbar': !bowser__WEBPACK_IMPORTED_MODULE_27___default.a.mobile && !isFullscreen && !isFeed,
                'mindnote-fullscreen-toolbar': isFullscreen
            }) },
            Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("ul", { ref: function (ref) { return _this.menuRef = ref; }, className: "mindnote-toolbar-menu", onClick: this.handleMenuClick },
                isFullscreen && Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { "data-action": isNight ? ToolbarAction$1.LIGHT : ToolbarAction$1.NIGHT }, isNight ? Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Icon"], { type: "sun", size: ICON_SIZE$1 }) : Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Icon"], { type: "moon", size: ICON_SIZE$1 })),
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Popover"], { className: classnames__WEBPACK_IMPORTED_MODULE_25___default()('mindnote-map-zoom', isFullscreen && 'mindnote-night-tip'), content: precent, placement: placement, adjustOverflow: false, animate: !bowser__WEBPACK_IMPORTED_MODULE_27___default.a.mobile, arrow: false, getOffset: function () { return offset; }, getContainer: function () { return isFullscreen ? _this.props.fullscreenElement : _this.containerRef; }, destroyAfterClose: true },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { "data-action": ToolbarAction$1.ZOOM_IN, title: t('mindnote.editor.zoom_in') },
                        Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Icon"], { type: "zoom-in", size: ICON_SIZE$1 }))),
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Popover"], { className: classnames__WEBPACK_IMPORTED_MODULE_25___default()('mindnote-map-zoom', isFullscreen && 'mindnote-night-tip'), content: precent, placement: placement, adjustOverflow: false, animate: !bowser__WEBPACK_IMPORTED_MODULE_27___default.a.mobile, arrow: false, getOffset: function () { return offset; }, getContainer: function () { return isFullscreen ? _this.props.fullscreenElement : _this.containerRef; }, destroyAfterClose: true },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { "data-action": ToolbarAction$1.ZOOM_OUT, title: t('mindnote.editor.zoom_out') },
                        Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Icon"], { type: "zoom-out", size: ICON_SIZE$1 }))),
                !isFullscreen && !this.props.readonly && Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Popover"], { content: (Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(StylePanel, { structure: this.props.structure, style: this.props.style, onStructureChange: this.handleStructureChange, onStyleChange: this.handleThemeChange })), style: { padding: 0 }, placement: isFeedOrMobile ? 'topRight' : 'left', adjustOverflow: false, animate: !bowser__WEBPACK_IMPORTED_MODULE_27___default.a.mobile, arrow: false, getOffset: function () { return offset; }, zIndex: 900, showActions: bowser__WEBPACK_IMPORTED_MODULE_27___default.a.mobile ? ['onClick'] : ['onMouseEnter'], hideActions: bowser__WEBPACK_IMPORTED_MODULE_27___default.a.mobile ? ['onClick'] : ['onMouseLeave'], getContainer: function () { return isFullscreen ? null : _this.containerRef; }, destroyAfterClose: true },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { title: t('mindnote.editor.structure_and_style') },
                        Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Icon"], { type: "sparkling-stick", size: ICON_SIZE$1 }))),
                this.props.exportEnabled && !bowser__WEBPACK_IMPORTED_MODULE_27___default.a.mobile && !isFullscreen && Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Popover"], { className: "mindnote-export-menu", placement: isFeed ? 'topRight' : 'left', adjustOverflow: false, arrow: false, getOffset: function () { return offset; }, disable: /* 移动端直接下载图片 */ bowser__WEBPACK_IMPORTED_MODULE_27___default.a.mobile, getContainer: function () { return isFullscreen ? null : _this.containerRef; }, content: (Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Menu"], { mode: "context", selectable: false, onItemClick: this.handleExport },
                        Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(Item, { key: MinderExportType.FREEMIND, value: MinderExportType.FREEMIND, title: t('mindnote.editor.freemind_tips') }, "FreeMind"),
                        Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(Item, { key: MinderExportType.IMAGE, value: MinderExportType.IMAGE, title: t('mindnote.editor.image') }, t('mindnote.editor.image')))) },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { "data-action": ToolbarAction$1.DOWNLOAD, title: t('mindnote.editor.download') },
                        Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Icon"], { type: "download", size: ICON_SIZE$1 }))),
                !bowser__WEBPACK_IMPORTED_MODULE_27___default.a.mobile && !isFullscreen && Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("hr", null),
                Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Tooltip"], { title: t('mindnote.editor.exit'), placement: isFeed ? 'topRight' : 'left', adjustOverflow: false, disable: bowser__WEBPACK_IMPORTED_MODULE_27___default.a.mobile || isFullscreen, getContainer: function () { return isFullscreen ? _this.props.fullscreenElement : _this.containerRef; }, destroyAfterClose: true },
                    Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("li", { "data-action": ToolbarAction$1.EXIT },
                        Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(_byted_byted_spark__WEBPACK_IMPORTED_MODULE_30__["Icon"], { type: "close", size: ICON_SIZE$1 }))))));
    };
    __decorate([
        TeaLogger$7('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var mode = args[0];
            var action = mode === 'light' ? 'lightmode' : 'nightmode';
            return {
                action: action,
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: 'playmode_toolbar',
                mode: 'playmode',
                view_level: getCurrentLevel(context.props.view),
                select_type: null
            };
        })
    ], DemoToolbarHolder.prototype, "handleModeChange", null);
    __decorate([
        TeaLogger$7('toggle_attribute', function (_a) {
            var context = _a.context;
            var isFullscreen = context.props.view === 'fullscreen';
            var source = isFullscreen ? 'playmode_toolbar' : 'mindmap_toolbar';
            var mode = isFullscreen ? 'playmode' : 'mindmap';
            return {
                action: 'zoom-in',
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: source,
                mode: mode,
                view_level: getCurrentLevel(context.props.view),
                select_type: null
            };
        })
    ], DemoToolbarHolder.prototype, "handleZoomIn", null);
    __decorate([
        TeaLogger$7('toggle_attribute', function (_a) {
            var context = _a.context;
            var isFullscreen = context.props.view === 'fullscreen';
            var source = isFullscreen ? 'playmode_toolbar' : 'mindmap_toolbar';
            var mode = isFullscreen ? 'playmode' : 'mindmap';
            return {
                action: 'zoom-out',
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: source,
                mode: mode,
                view_level: getCurrentLevel(context.props.view),
                select_type: null
            };
        })
    ], DemoToolbarHolder.prototype, "handleZoomOut", null);
    __decorate([
        Bind(),
        TeaLogger$7('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var s = args[0];
            var action = (s === MinderStructure.DEFAULT && 'structure1') || (s === MinderStructure.LEFT && 'structure2')
                || (s === MinderStructure.RIGHT && 'structure3') || 'structure4';
            return {
                action: action,
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: 'mindmap_toolbar',
                mode: 'mindmap',
                view_level: getCurrentLevel(context.props.view),
                select_type: null
            };
        })
    ], DemoToolbarHolder.prototype, "handleStructureChange", null);
    __decorate([
        Bind(),
        TeaLogger$7('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var t = args[0];
            var action = (t === MinderTheme.CLASSIC && 'style1') || 'style2';
            return {
                action: action,
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: 'mindmap_toolbar',
                mode: 'mindmap',
                view_level: getCurrentLevel(context.props.view),
                select_type: null
            };
        })
    ], DemoToolbarHolder.prototype, "handleThemeChange", null);
    __decorate([
        Bind(),
        TeaLogger$7('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            var e = args[0];
            var type = e.value;
            var action = (type === MinderExportType.IMAGE && 'download_image') || 'download_freemind';
            return {
                action: action,
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                source: 'mindmap_toolbar',
                mode: 'mindmap',
                view_level: getCurrentLevel(context.props.view),
                select_type: null
            };
        })
    ], DemoToolbarHolder.prototype, "handleExport", null);
    return DemoToolbarHolder;
}(ReactHolder));

var TeaLogger$8 = TeaManager.getDecorator();
/**
 * 获取思维导图样式属性
 * @param style 思维导图样式
 * @default classic
 */
function getMindmapTheme(style) {
    switch (style) {
        case MinderTheme.DEFAULT:
            return {
                lineColor: '#6BA9FF',
                bgColor: '#1f2329',
                toggleIconColor: '#6BA9FF'
            };
        case MinderTheme.CLASSIC:
            return {
                lineColor: '#6BA9FF',
                bgColor: '#fff',
                toggleIconColor: '#6BA9FF'
            };
        default:
            return {
                lineColor: '#6BA9FF',
                bgColor: '#1f2329',
                toggleIconColor: '#6BA9FF'
            };
    }
}
/**
 * 检查文档主题是否兼容
 * @param def
 */
function checkTheme(def) {
    switch (def.theme) {
        case MinderTheme.DEFAULT:
        case MinderTheme.CLASSIC:
            break;
        default:
            def.theme = MinderTheme.DEFAULT;
            break;
    }
}
var Minder = /** @class */ (function () {
    function Minder(state, engine, eventSource, viewport) {
        var _this_1 = this;
        /**
         * 思维导图键盘事件命名空间
         */
        this.KEY_DOWN_HOTKEY_EVENT = 'keydown.mind';
        /**
         * 是否已经打开
         */
        this.opened = false;
        this.definition = { nodes: [] };
        this.nodeMapping = {}; // 节点的映射
        this.docName = '';
        this.rootId = '';
        this.zoom = environment.isMobile ? 0.7 : 1;
        this.mapMargin = 0;
        // 是否自动收缩子主题，在节点数量太多的情况下，会自动收缩
        this.subTopicAutoCollapsed = false;
        // 当前的风格
        this.currentTheme = getMindmapTheme();
        // 移动端状态栏的高度，在手机上，statusBar的高度，会影响导航栏的位置
        this.statusBarSpacing = 0;
        // 是否延迟定位思维导图，因为移动端需要进行隐藏statusBar，navigator等行为，所以要延迟一下，优化体验
        this.delayRelocateMindMap = false;
        this.asyncDrawing = false;
        // 异步绘制的定时器
        this.asyncChildrenLinker = null;
        this.zoomTipTimer = null;
        /**
         * 处理 zoom-in
         * @param zoom 点击时的 zoom 值
         */
        this.handleZoomIn = function (zoom) {
            var changePercent = 0.2;
            if (_this_1.zoom < 1) {
                changePercent = 0.15;
            }
            _this_1.zoomMap(changePercent);
            /* 更新工具栏数值 */
            _this_1.toolbar.update({ zoom: _this_1.zoom });
        };
        /**
         * 处理 zoom-out
         * @param zoom 点击时的 zoom 值
         */
        this.handleZoomOut = function (zoom) {
            var changePercent = 0.2;
            if (_this_1.zoom <= 1) {
                changePercent = 0.15;
            }
            _this_1.zoomMap(-changePercent);
            /* 更新工具栏数值 */
            _this_1.toolbar.update({ zoom: _this_1.zoom });
        };
        /**
         * 导出
         * @param type 导出类型
         */
        this.handleExport = function (type) {
            var state = _this_1.state.getEditorState();
            if (!state.exportEnabled) {
                _this_1.eventSource.trigger(SourceEvent.EXPORT_DENIED);
                return;
            }
            switch (type) {
                /* 导出 FreeMind */
                case MinderExportType.FREEMIND:
                    var nodes = void 0;
                    if (_this_1.rootId == null) {
                        nodes = _this_1.definition.nodes;
                    }
                    else {
                        var rootNode = _this_1.nodeMapping[_this_1.rootId].node;
                        nodes = rootNode.children;
                    }
                    _this_1.minderExporter.exportFreeMind(nodes, _this_1.definition.structure);
                    break;
                /* 导出图片 */
                case MinderExportType.IMAGE:
                    _this_1.exportImage();
                    break;
                default:
                    break;
            }
        };
        /**
         * 状态变化
         */
        this.handleStateChange = function (state) {
            var exportEnabled = state.getEditorState().exportEnabled;
            _this_1.toolbar.update({ readonly: state.getReadonly(), exportEnabled: exportEnabled });
        };
        this.state = state;
        this.engine = engine;
        this.eventSource = eventSource;
        this.mapMargin = Math.max(Math.max(screen.width, screen.height) / 2, 800);
        this.delayRelocateMindMap = this.state.getEditorProps().delayRelocateMindMap;
        this.statusBarSpacing = this.state.getEditorProps().statusBarSpacing;
        this.minderExporter = new MinderExporter(this, state, eventSource);
        this.viewport = viewport;
        var exportEnabled = !!state.getEditorState().copyEnabled;
        /* 初始化工具栏 */
        this.toolbar = new DemoToolbarHolder({
            view: 'minder',
            zoom: this.zoom,
            readonly: this.state.readonly,
            style: MinderTheme.DEFAULT,
            structure: MinderStructure.DEFAULT,
            onZoomIn: this.handleZoomIn,
            onZoomOut: this.handleZoomOut,
            onStructureChange: this.handleStructureChange,
            onStyleChange: this.handleStyleChange,
            onExport: this.handleExport,
            onExit: this.handleExit,
            exportEnabled: exportEnabled,
            editorState: this.state,
        });
        this.state.addStateChangeListener(this.handleStateChange);
    }
    Minder.prototype.destroy = function () {
        this.state.removeStateChangeListener(this.handleStateChange);
    };
    Minder.prototype.getMindMap = function () {
        return this.mindMap;
    };
    /**
     * 执行打开思维导图
     * @param def
     * @param {string} title
     * @param {string} rootNodeId
     */
    Minder.prototype.open = function (def, title, rootNodeId) {
        var _this_1 = this;
        // 避免重复初始化
        if (this.opened) {
            return;
        }
        var defaults = {
            structure: 'default',
            theme: 'default'
        };
        this.definition = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.extend(true, defaults, def);
        checkTheme(this.definition);
        this.nodeMapping = {};
        if (this.definition.nodes && this.definition.nodes.length > 0) {
            // 绘制节点
            recursive(this.definition.nodes, function (node, parentNode) {
                _this_1.nodeMapping[node.id] = {
                    node: node,
                    parent: parentNode ? parentNode : null
                };
            });
        }
        // 判断是否太大
        if (this.isTooLarge(rootNodeId)) {
            return;
        }
        this.docName = title;
        this.rootId = rootNodeId;
        this.currentTheme = getMindmapTheme(this.definition.theme);
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('#mind-screen').remove();
        this.mindScreen = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div id="mind-screen"></div>').appendTo(this.viewport.controlHolder);
        this.mindCanvas = jquery__WEBPACK_IMPORTED_MODULE_22___default()("<div class=\"mind-canvas\"></div>").appendTo(this.mindScreen);
        if (environment.isMobile) {
            this.mindScreen.addClass('mobile-style');
        }
        this.mindMap = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="mind-map"></div>').appendTo(this.mindCanvas);
        this.initMenu(def, this.state.readonly);
        this.draw();
        this.refreshDir();
        this.initOperate();
        this.mindScreen.css('opacity', 1);
        // this.autoTip();
        this.mindScreen.on('keydown', function (e) {
            e.stopPropagation();
        });
        if (this.delayRelocateMindMap) {
            setTimeout(function () {
                _this_1.locateMap();
                // ios，顶部 toolbar 消失后，页面上移，top 有时候为负数，简单 fix 一下
                var top = _this_1.mindScreen.length > 0 && _this_1.mindScreen.get(0).getBoundingClientRect().top;
                if (top && top <= -1) {
                    _this_1.viewport.scrollContainer.scrollTop(0);
                }
                _this_1.mindMap.css('opacity', 1);
            }, 400);
        }
        else {
            this.mindMap.css('opacity', 1);
        }
        this.opened = true;
        // 确保思维导图渲染了，才来触发打开事件
        this.eventSource.trigger(SourceEvent.MIND_MAP_OPEN, {
            theme: this.definition.theme,
            zoom: this.zoom,
            structure: this.definition.structure
        });
    };
    /**
     * 自动小提示
     */
    Minder.prototype.autoTip = function () {
        var _this_1 = this;
        if (!environment.isMobile && !(localStorage && localStorage.mindTip)) {
            if (localStorage) {
                localStorage.mindTip = true;
            }
            setTimeout(function () {
                jquery__WEBPACK_IMPORTED_MODULE_22___default()('.mind-tip').remove();
                var tip = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="mind-tip"></div>');
                _this_1.mindScreen.append(tip);
                tip.append("<div class=\"header\">" + t('mindnote.editor.tips') + "</div>");
                tip.append("<div class=\"body\">" + t('mindnote.editor.click_item_tips') + "</div>");
                tip.append("<div class=\"footer\"><span class=\"close\">" + t('mindnote.editor.got_it') + "</span></div>");
                tip.find('.close').on('click', function () {
                    tip.fadeOut();
                });
                tip.fadeIn();
                setTimeout(function () {
                    tip.fadeOut();
                }, 15000);
            }, 1500);
        }
        if (this.subTopicAutoCollapsed) {
            setTimeout(function () {
                var collapseTip = jquery__WEBPACK_IMPORTED_MODULE_22___default()("<div class=\"mind-collapsed-tip\">" + t('mindnote.editor.content_oversized') + "</div>").appendTo(_this_1.viewport.controlHolder);
                collapseTip.fadeIn();
                setTimeout(function () {
                    collapseTip.fadeOut(function () {
                        collapseTip.remove();
                    });
                }, 4000);
            }, 1500);
        }
    };
    /**
     * 初始化工具栏菜单和快捷键
     * @param def 文档定义
     * @param readonly 是否只读
     */
    Minder.prototype.initMenu = function (def, readonly) {
        var _this = this;
        /* 挂载工具栏 */
        this.toolbar.update({
            zoom: this.zoom,
            structure: def.structure,
            style: def.theme,
            readonly: readonly,
        });
        this.toolbar.mountTo(this.viewport.controlHolder);
        jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).on(this.KEY_DOWN_HOTKEY_EVENT, function (e) {
            var code = e.keyCode;
            if (e.keyCode === KeyCode.Esc) {
                // esc退出
                _this.handleExit(e.originalEvent);
            }
            else if ((code === KeyCode.OpeningCurlyBrace || code === KeyCode.ClosingCurlyBrace) && e[environment.metaKey]) {
                // 阻止 ctrl + [ 和 ctrl + ] 浏览器默认回退/前进
                e.preventDefault();
            }
        });
    };
    /**
     * 处理结构变化
     * @param structure
     */
    Minder.prototype.handleStructureChange = function (structure) {
        if (this.state.getReadonly()) {
            return;
        }
        this.engine.setSetting('structure', structure);
        this.setStructure(structure);
        this.toolbar.update({ structure: structure });
    };
    /**
     * 处理风格变化
     * @param style
     */
    Minder.prototype.handleStyleChange = function (style) {
        if (this.state.getReadonly()) {
            return;
        }
        this.engine.setSetting('theme', style);
        this.setTheme(style);
        this.eventSource.trigger(SourceEvent.MIND_MAP_THEME_CHANGE, {
            theme: style,
            zoom: this.zoom,
            structure: this.definition.structure,
        });
        this.toolbar.update({ style: style });
    };
    /**
     * 处理关闭思维导图事件
     */
    Minder.prototype.handleExit = function (e) {
        var _this_1 = this;
        /* 卸载工具栏 */
        this.toolbar.destroy();
        this.opened = false;
        this.mindScreen.css('opacity', 0);
        // 触发事件
        this.eventSource.trigger(SourceEvent.MIND_MAP_CLOSE);
        this.mindMap = null;
        this.clearSyncChildrenLinker();
        setTimeout(function () {
            _this_1.mindScreen.remove();
        }, 400);
        jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).off(this.KEY_DOWN_HOTKEY_EVENT);
    };
    /**
     * 执行导出图片
     */
    Minder.prototype.exportImage = function () {
        if (this.asyncDrawing) {
            // TODO: 做一个 Toast
            return;
        }
        this.minderExporter.exportMindImage(this.zoom);
    };
    /**
     * 设置结构
     * @param sturct
     */
    Minder.prototype.setStructure = function (sturct) {
        this.definition.structure = sturct;
        this.draw();
    };
    Minder.prototype.setTheme = function (th) {
        this.definition.theme = th;
        this.currentTheme = getMindmapTheme(this.definition.theme);
        this.draw(false);
        var dirDom = this.mindScreen.find('.mind-dir');
        if (dirDom.length > 0) {
            dirDom.attr('class', 'mind-dir').addClass('theme-' + this.definition.theme);
        }
    };
    Minder.prototype.resetCanvas = function () {
        // 必须设置一个宽度，否则缩放后，外围的宽度，比mindMap实际宽度还小，会挤的变形
        this.mindMap.css({
            'width': this.mindMap.width() + 20,
            'top': this.mapMargin,
            'left': this.mapMargin
        });
        this.mindCanvas.css({
            width: this.mindMap.width() * this.zoom + this.mapMargin,
            height: this.mindMap.height() * this.zoom + this.mapMargin,
            'padding-top': this.mapMargin,
            'padding-left': this.mapMargin
        });
    };
    /**
     * 执行绘制
     * @param relocate 是否重新定位视图
     */
    Minder.prototype.draw = function (relocate) {
        var _this_1 = this;
        if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_12__["default"])(relocate)) {
            relocate = true;
        }
        this.mindCanvas.attr('class', 'mind-canvas theme-' + this.definition.theme);
        // 添加一个背景图片，导出时直接使用
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('#mind-bg-holder').remove();
        var bgHolder = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div id="mind-bg-holder"></div>').appendTo(this.mindScreen);
        bgHolder.data('color', this.currentTheme.bgColor);
        var backgroundImage = this.currentTheme.bgImage;
        if (backgroundImage) {
            var bgImg = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<img class="mind-export-bg"/>').appendTo(bgHolder);
            bgImg.attr('src', 'data:image/png;base64,' + backgroundImage);
            this.mindCanvas.css({
                'background-image': 'url(data:image/png;base64,' + backgroundImage + ')',
                'background-repeat': 'repeat'
            });
        }
        else {
            this.mindCanvas.css({
                'background-image': 'none'
            });
        }
        // 设置水印图片，导出时直接使用
        var getWatermarkImage = this.state.getEditorProps().getWatermarkImage;
        if (getWatermarkImage) {
            var wmImgUrl = getWatermarkImage(this.definition.theme || MinderTheme.DEFAULT);
            jquery__WEBPACK_IMPORTED_MODULE_22___default()('<img class="mind-export-watermark"/>').attr('src', wmImgUrl).appendTo(bgHolder);
        }
        // 先设置到无限大
        this.mindCanvas.css({
            'width': 20000,
            'height': 20000,
            'background-color': this.currentTheme.bgColor
        });
        this.mindMap.css('width', 'auto');
        this.mindMap.empty();
        if (this.definition.structure && this.definition.structure === 'org') {
            this.mindMap.addClass('struct-org');
        }
        else {
            this.mindMap.removeClass('struct-org');
        }
        this.mindMap.css('transform', 'scale(' + this.zoom + ')');
        var partCenter = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="tp-part"></div>').appendTo(this.mindMap);
        // 先绘制中心节点
        var centralTopic = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="tp-container"><div class="tp-box"><div class="topic central"></div></div></div>');
        var topicEle = centralTopic.find('.topic');
        // 使用parseHTML创建元素，可以保证内部的动态内容不会被触发，如<img src=x onerror=alert(1)/>
        // parseHTML结果为原生DOM数组
        var centralTopicText = jquery__WEBPACK_IMPORTED_MODULE_22___default.a.parseHTML('<div class="topic-text root theme-' + this.definition.theme + '"></div>')[0];
        var nodes;
        if (this.rootId == null) {
            nodes = this.definition.nodes;
            // 使用text赋值，避免xss
            centralTopicText.innerText = this.docName || this.state.getEditorProps().titlePlaceholder;
        }
        else {
            var rootNode = this.nodeMapping[this.rootId].node;
            nodes = rootNode.children;
            centralTopicText.innerHTML = textToHtml(rootNode.text, this.state.getEditorProps().locale);
            topicEle.data('topic', this.rootId);
        }
        topicEle.append(centralTopicText);
        centralTopic.appendTo(partCenter);
        var struct = this.definition.structure;
        if (struct === 'default') {
            // 左右布局
            var totalCount_1 = 0;
            // 先数一下有多少个节点
            recursive(nodes, function () {
                totalCount_1++;
            });
            // 计算从哪个id开始，换到左边去
            var turnLeftFrom_1 = '';
            var overHalf_1 = false; // 是否已经超过了一半
            var currentIndex_1 = 0;
            recursive(nodes, function (node, parentNode) {
                currentIndex_1++;
                if (!overHalf_1 && (parentNode == null || parentNode.id === _this_1.rootId)) {
                    // 根节点
                    if (currentIndex_1 > Math.ceil(totalCount_1 / 2)) {
                        // 已经超过了一半，放到左边
                        turnLeftFrom_1 = node.id;
                        overHalf_1 = true;
                    }
                }
            });
            // 添加part
            var currentPart_1 = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="tp-part right"></div>').appendTo(this.mindMap);
            var partName_1 = 'right';
            recursive(nodes, function (node, parentNode) {
                if (node.id === turnLeftFrom_1) {
                    // 已经超过了一半，放到左边
                    currentPart_1 = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="tp-part left"></div>').prependTo(_this_1.mindMap);
                    partName_1 = 'left';
                }
                return _this_1.drawTopic(node, currentPart_1, partName_1);
            });
        }
        else if (struct === 'org') {
            partCenter.addClass('org-root');
            var currentPart_2 = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="org-part"></div>').appendTo(this.mindMap);
            var partName_2 = struct;
            recursive(nodes, function (node) {
                return _this_1.drawTopic(node, currentPart_2, partName_2);
            });
        }
        else {
            // 左布局 或者 右布局
            var currentPart_3;
            if (struct === 'right') {
                currentPart_3 = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="tp-part right"></div>').appendTo(this.mindMap);
            }
            else {
                currentPart_3 = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="tp-part left"></div>').prependTo(this.mindMap);
            }
            var partName_3 = struct;
            recursive(nodes, function (node) {
                return _this_1.drawTopic(node, currentPart_3, partName_3);
            });
        }
        this.resetCanvas();
        this.drawMainLinker();
        if (relocate) {
            this.locateMap();
        }
        // 定位之后，异步绘制子节点连线
        this.asyncDrawChildrenLinker(nodes);
    };
    /**
     * 绘制节点
     * @param topic
     */
    Minder.prototype.drawTopic = function (topic, part, partName) {
        var me = this;
        var topicDom = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="tp-container" id="tp-' + topic.id + '"><div class="tp-box"><div class="topic"></div></div></div>');
        topicDom.addClass(partName);
        var target;
        var parentNode = this.nodeMapping[topic.id].parent;
        var className;
        if (parentNode == null || (this.rootId && this.rootId === parentNode.id)) {
            // 一级节点
            target = part;
            className = 'sub';
            topicDom.addClass('main-container').data('topic', topic.id);
        }
        else {
            var parentDom = this.mindMap.find('#tp-' + parentNode.id);
            target = parentDom.children('.tp-children');
            className = 'child';
            if (target.length === 0) {
                target = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="tp-children"></div>').appendTo(parentDom);
            }
        }
        var topicEle = topicDom.find('.topic');
        topicEle.data('topic', topic.id);
        var topicText = jquery__WEBPACK_IMPORTED_MODULE_22___default()(jquery__WEBPACK_IMPORTED_MODULE_22___default.a.parseHTML('<div class="topic-text theme-' + this.definition.theme + ' ' + className + '">' + textToHtml(topic.text, me.state.getEditorProps().locale) + '</div>'));
        topicEle.append(topicText);
        if (topic.note) {
            var icon = new default_1(IconSet.MENU, 14);
            var noteDom = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="topic-note">' + icon.toString() + '</div>');
            noteDom.data('topic', topic.id);
            noteDom.appendTo(topicText);
        }
        // 绘制图片
        if (topic.images && topic.images.length > 0) {
            var imageContainer_1 = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="attach-image-list"></div>');
            topicText.append(imageContainer_1);
            jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(topic.images, function (index, img) {
                var imgItem = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="attach-image-item"></div>');
                var imgItemWrapper = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="image-wrapper"></div>').appendTo(imgItem);
                var imgObj = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<img class="attach-img loading" uri="' + img.uri + '"/>');
                if (me.state.getEditorProps().env === MindNoteEnvironment.PC && document.URL.indexOf('localhost') < 0) {
                    imgObj.attr('crossorigin', 'use-credentials');
                }
                // 提前计算图片尺寸并预设值好，否则在图片未加载成功的时候，会影响高度的判断，从而影响布局
                var imageWidth = img.w || img.ow || 0;
                if (imageWidth > 500) {
                    imageWidth = 500;
                }
                var imageHeight = Math.round(imageWidth / (img.ow || 0) * (img.oh || 0));
                imgObj.css({
                    width: imageWidth,
                    height: imageHeight
                });
                imgItemWrapper.append(imgObj);
                imageContainer_1.append(imgItem);
                var loadingSpinner = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="image-spinner">' +
                    '<div class="spinner-text">' +
                    '<div class="mindnote-loader"></div>' +
                    ("<div>" + t('mindnote.editor.image_loding') + "</div></div>") +
                    '</div>');
                loadingSpinner.css({
                    width: imageWidth,
                    height: imageHeight
                });
                imgItemWrapper.append(loadingSpinner);
                imgObj.on('load', function () {
                    jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).removeClass('loading');
                    loadingSpinner.remove();
                });
                var url = getImageUrl(me.state.getEditorProps().imageUrlPrefix, img.uri || '');
                imgObj.attr('src', url);
            });
        }
        target.append(topicDom);
        if (topic.collapsed || topic.autoCollapsed) {
            topicDom.addClass('collapsed');
            return false;
        }
        return true;
    };
    /**
     * 缩放
     * @param changed 变化比例
     */
    Minder.prototype.zoomMap = function (changed) {
        var newZoom = this.zoom + changed;
        var aroundPoint = {
            x: (jquery__WEBPACK_IMPORTED_MODULE_22___default()(window).width() || 0) / 2,
            y: (jquery__WEBPACK_IMPORTED_MODULE_22___default()(window).height() || 0) / 2
        };
        var mapAroundPoint = {
            x: (this.mindScreen.scrollLeft() + aroundPoint.x - this.mapMargin) / this.zoom,
            y: (this.mindScreen.scrollTop() + aroundPoint.y - this.mapMargin) / this.zoom
        };
        this.setMapZoom(newZoom, mapAroundPoint, aroundPoint);
    };
    /**
     * 设置脑图的缩放值
     * @param newZoomScale 新的缩放值
     * @param mapAroundPoint 围绕的点
     * @param screenPoint 围绕的点
     */
    Minder.prototype.setMapZoom = function (newZoomScale, mapAroundPoint, screenPoint) {
        if (newZoomScale > 5) {
            newZoomScale = 5;
        }
        if (newZoomScale < 0.3) {
            newZoomScale = 0.3;
        }
        // 先设置到无限大
        this.mindCanvas.css({
            width: 20000,
            height: 20000
        });
        this.mindMap.css('width', 'auto');
        this.zoom = newZoomScale;
        if (!isMobile()) {
            var tipper_1 = jquery__WEBPACK_IMPORTED_MODULE_22___default()('#mind-zoom-tip');
            if (tipper_1.length === 0) {
                tipper_1 = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div id="mind-zoom-tip"></div>').appendTo('.mind-menu');
            }
            tipper_1.text(Math.round(this.zoom * 100) + '%');
            tipper_1.show();
            if (this.zoomTipTimer) {
                clearTimeout(this.zoomTipTimer);
            }
            this.zoomTipTimer = window.setTimeout(function () {
                tipper_1.fadeOut(150);
            }, 1000);
        }
        this.mindMap.css('transform', 'scale(' + this.zoom + ')');
        this.resetCanvas();
        this.mindScreen.scrollLeft(mapAroundPoint.x * this.zoom + this.mapMargin - screenPoint.x);
        this.mindScreen.scrollTop(mapAroundPoint.y * this.zoom + this.mapMargin - screenPoint.y);
    };
    /**
     * 绘制主的连接线
     */
    Minder.prototype.drawMainLinker = function () {
        var _this_1 = this;
        jquery__WEBPACK_IMPORTED_MODULE_22___default()('.main-linker').remove();
        var nodes;
        if (this.rootId == null) {
            nodes = this.definition.nodes;
        }
        else {
            var rootNode = this.nodeMapping[this.rootId].node;
            nodes = rootNode.children;
        }
        if (!nodes || nodes.length === 0) {
            return;
        }
        var centralTopic = jquery__WEBPACK_IMPORTED_MODULE_22___default()('.topic.central');
        var centralPos = centralTopic.position();
        var center = {
            x: centralPos.left / this.zoom + (centralTopic.outerWidth() || 0) / 2
        };
        if (this.definition.structure === 'org') {
            // 组织机构，从底部连
            center.y = centralPos.top / this.zoom + (centralTopic.outerHeight() || 0);
        }
        else {
            center.y = centralPos.top / this.zoom + (centralTopic.outerHeight() || 0) / 2;
        }
        // 绘制节点的连线
        var drawNodeLinker = function (node) {
            var topicContainer = jquery__WEBPACK_IMPORTED_MODULE_22___default()('#tp-' + node.id);
            if (topicContainer.length === 0) {
                return true;
            }
            var linkerBox = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="linker-container main-linker"></div>');
            var topicBox = topicContainer.children('.tp-box');
            var topicPos = topicBox.position();
            if (_this_1.definition.structure === 'org') {
                // 绘制组织结构布局的折线
                // 计算主题相对于画图中心的坐标
                var pos = {
                    x: topicPos.left / _this_1.zoom + (topicBox.width() || 0) / 2 - center.x,
                    y: topicPos.top / _this_1.zoom - center.y
                };
                var linker = {
                    y: 0,
                    h: pos.y
                };
                var lineBeginX = void 0;
                var lineEndX = void 0;
                if (pos.x > 0) {
                    linker.x = 0;
                    linker.w = pos.x;
                    lineBeginX = 0;
                    lineEndX = linker.w;
                }
                else {
                    linker.x = pos.x;
                    linker.w = Math.abs(pos.x);
                    lineBeginX = linker.w;
                    lineEndX = 0;
                }
                var domWidth = linker.w > 2 ? linker.w : 2;
                var domHeight = linker.h > 2 ? linker.h : 2;
                linkerBox.css({
                    left: center.x + linker.x + 1,
                    top: center.y + linker.y,
                    width: domWidth,
                    height: domHeight
                });
                linkerBox.appendTo(_this_1.mindMap);
                var pathStr = 'M' + lineBeginX + ',0' +
                    ' L' + lineBeginX + ',' + linker.h / 2 +
                    ' L' + lineEndX + ',' + linker.h / 2 +
                    ' L' + lineEndX + ',' + linker.h;
                var svg = '<svg xmlns="http://www.w3.org/2000/svg" width="' + domWidth + '" height="' + domHeight
                    + '" '
                    + 'stroke="' + _this_1.currentTheme.lineColor + '" '
                    + 'stroke-width="2px" '
                    + 'fill="none" '
                    + 'version="1.1">'
                    + '<g>'
                    + '<path d="' + pathStr + '"></path>'
                    + '</g>'
                    + '</svg>';
                linkerBox.append(svg).attr('path-d', pathStr);
            }
            else {
                // 计算主题相对于画图中心的坐标
                var pos = {
                    x: topicPos.left / _this_1.zoom - center.x,
                    y: topicPos.top / _this_1.zoom - center.y + (topicBox.outerHeight() || 0) / 2
                };
                var linker = {};
                if (pos.x > 0) {
                    linker.x = 0;
                    linker.w = pos.x;
                }
                else {
                    linker.x = pos.x + (topicBox.width() || 0);
                    linker.w = Math.abs(pos.x + (topicBox.width() || 0));
                }
                linker.h = Math.abs(pos.y);
                // 确定连接线画布的y坐标，和绘制路径中起点和终点的y坐标
                var path = {};
                if (pos.y > 0) {
                    linker.y = 0;
                    if (pos.x > 0) {
                        path.y1 = 0;
                        path.y2 = linker.h;
                    }
                    else {
                        path.y1 = linker.h;
                        path.y2 = 0;
                    }
                }
                else {
                    linker.y = pos.y;
                    if (pos.x > 0) {
                        path.y1 = linker.h;
                        path.y2 = 0;
                    }
                    else {
                        path.y1 = 0;
                        path.y2 = linker.h;
                    }
                }
                var domWidth = linker.w > 2 ? linker.w : 2;
                var domHeight = linker.h > 2 ? linker.h : 2;
                linkerBox.css({
                    left: center.x + linker.x,
                    top: center.y + linker.y - 1,
                    width: domWidth,
                    height: domHeight
                });
                linkerBox.appendTo(_this_1.mindMap);
                var pathStr = 'M0,' + path.y1;
                if (pos.x > 0) {
                    pathStr += ' C0' + ',' + linker.h / 2 + ' ' +
                        linker.w / 2 + ',' + path.y2 + ' ' +
                        linker.w + ',' + path.y2;
                }
                else {
                    pathStr += ' C' + linker.w / 2 + ',' + path.y1 + ' ' +
                        linker.w + ',' + linker.h / 2 + ' ' +
                        linker.w + ',' + path.y2;
                }
                var svg = '<svg  xmlns="http://www.w3.org/2000/svg" width="' + domWidth + '" height="' + domHeight
                    + '" '
                    + 'stroke="' + _this_1.currentTheme.lineColor + '" '
                    + 'stroke-width="2px" '
                    + 'fill="none" '
                    + 'version="1.1">'
                    + '<g>'
                    + '<path d="' + pathStr + '"></path>'
                    + '</g>'
                    + '</svg>';
                linkerBox.append(svg).attr('path-d', pathStr);
            }
        };
        jquery__WEBPACK_IMPORTED_MODULE_22___default.a.each(nodes, function (index, node) {
            drawNodeLinker(node);
        });
    };
    Minder.prototype.clearSyncChildrenLinker = function () {
        if (!this.asyncChildrenLinker) {
            return;
        }
        if (environment.isMobile) {
            clearTimeout(this.asyncChildrenLinker);
        }
        else {
            window.clearImmediate(this.asyncChildrenLinker);
        }
        this.asyncChildrenLinker = null;
    };
    /**
     * 异步绘制子节点的连线
     */
    Minder.prototype.asyncDrawChildrenLinker = function (nodes) {
        var _this_1 = this;
        this.clearSyncChildrenLinker();
        if (!nodes || nodes.length === 0) {
            return;
        }
        var rootOffset = jquery__WEBPACK_IMPORTED_MODULE_22___default()('.topic.central').offset();
        // 先排列子节点的绘制顺序，视图区域中的优先绘制
        var ranged = [];
        var index = nodes.length - 1;
        while (index >= 0) {
            var node = nodes[index];
            var nodeItem = this.mindMap.find('#tp-' + node.id);
            var offset = nodeItem.offset();
            // 勾股定理，计算距离
            node.distance = Math.sqrt(Math.pow(offset.left - rootOffset.left, 2) + Math.pow(offset.top - rootOffset.top, 2));
            ranged.push(node);
            index--;
        }
        ranged.sort(function (a, b) {
            return a.distance - b.distance;
        });
        // 排列好，开始异步绘制
        var drawIndex = 0;
        this.asyncDrawing = true;
        var doAsyncDraw = function () {
            if (_this_1.mindMap === null) {
                // 当mindMap为null时，说明已经退出了，不在继续异步绘制
                return false;
            }
            // 每一步画10次
            var stepMax = drawIndex + 10;
            for (var stepIndex = drawIndex; stepIndex < ranged.length && stepIndex < stepMax; stepIndex++) {
                var drawNode = ranged[drawIndex];
                _this_1.drawChildrenLinker(drawNode);
                drawIndex++;
            }
            if (drawIndex < ranged.length) {
                if (environment.isMobile) {
                    _this_1.asyncChildrenLinker = window.setTimeout(function () {
                        doAsyncDraw();
                    }, 0.5);
                }
                else {
                    _this_1.asyncChildrenLinker = window.setImmediate(function () {
                        doAsyncDraw();
                    });
                }
                return true;
            }
            else {
                // 完成异步绘制
                _this_1.asyncDrawing = false;
                return false;
            }
        };
        doAsyncDraw();
    };
    /**
     * 绘制一个子节点的连线
     * @param topic
     */
    Minder.prototype.drawChildrenLinker = function (topic) {
        if (!topic.children || topic.children.length === 0) {
            return;
        }
        var container = jquery__WEBPACK_IMPORTED_MODULE_22___default()('#tp-' + topic.id);
        var topicBox = container.children('.tp-box');
        var topicDom = topicBox.children('.topic');
        var childrenBox = container.children('.tp-children');
        // 删除已有的，重新创建
        childrenBox.children('.linker-container').remove();
        topicDom.children('.tp-expand-box').remove();
        // 添加收缩、展开的图标
        var expandBox = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="tp-expand-box"><div class="tp-expand-ico" data-topic="' + topic.id + '"></div></div>').appendTo(topicDom);
        var fromY;
        var parentNode = this.nodeMapping[topic.id].parent;
        if (parentNode == null || (this.rootId && this.rootId === parentNode.id)) {
            // 如果是分支主题
            fromY = (childrenBox.height() || 0) / 2;
            if (this.definition.structure === 'org') {
                expandBox.css({
                    top: (topicBox.height() || 0) + 6,
                    left: 12
                });
            }
            else {
                expandBox.css('top', (topicBox.height() || 0) / 2 - 1);
            }
        }
        else {
            // 子主题，在下边
            fromY = (childrenBox.height() || 0) / 2 + (topicBox.height() || 0) / 2 - 4;
            expandBox.css('top', (topicBox.height() || 0) - 5);
        }
        expandBox.css('background', this.currentTheme.lineColor);
        expandBox.attr('linecolor', this.currentTheme.toggleIconColor);
        var me = this;
        expandBox.children().on('click', function () {
            me.toggleTopic(jquery__WEBPACK_IMPORTED_MODULE_22___default()(this));
        });
        if (topic.collapsed || topic.autoCollapsed) {
            return;
        }
        if (this.definition.structure === 'org') {
            fromY = 0;
        }
        for (var i = 0; i < topic.children.length; i++) {
            // 开始绘制与一个子元素之间的连线
            var child = topic.children[i];
            var cContainer = jquery__WEBPACK_IMPORTED_MODULE_22___default()('#tp-' + child.id);
            var cBox = cContainer.children('.tp-box');
            var linkerBox = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="linker-container children-linker"></div>').appendTo(childrenBox);
            var toY = cBox.position().top / this.zoom + (cBox.height() || 0) - 4;
            var radiusSize = 8; // 圆角的尺寸
            // 元素的宽高
            var linkerHeight = Math.abs(toY - fromY);
            linkerHeight = linkerHeight > 2 ? linkerHeight : 2;
            var topicWidth = cBox.width() || 0;
            var linkerWidth = topicWidth + radiusSize;
            linkerWidth = linkerWidth > 2 ? linkerWidth : 2;
            // 连线元素的Y坐标
            var linkerY = Math.min(fromY, toY);
            linkerBox.css('top', linkerY);
            // 绘制一个曲线
            var beginY = fromY - linkerY;
            var endY = toY - linkerY;
            var beginX = 0;
            var endX = linkerWidth;
            if (container.hasClass('left')) {
                // 在左边
                beginX = linkerWidth;
                endX = 0;
            }
            var pathStr = 'M' + beginX + ',' + beginY;
            if (Math.abs(toY - fromY) >= radiusSize) {
                var lineEndY = void 0;
                if (toY < fromY) {
                    // 终点在起点上方，子主题在父主题上方，曲线方向改变
                    lineEndY = endY + radiusSize;
                }
                else {
                    lineEndY = endY - radiusSize;
                }
                pathStr += ' L' + beginX + ',' + lineEndY;
            }
            var cornerEndX = endX < beginX ? beginX - radiusSize : beginX + radiusSize;
            pathStr += ' Q' + beginX + ',' + endY + ' ' + cornerEndX + ',' + endY;
            pathStr += ' L' + endX + ',' + endY;
            var svg = '<svg xmlns="http://www.w3.org/2000/svg" width="' + linkerWidth + '" height="' + linkerHeight
                + '" '
                + 'stroke="' + this.currentTheme.lineColor + '" '
                + 'stroke-width="2px" '
                + 'fill="none" '
                + 'version="1.1">'
                + '<g>'
                + '<path d="' + pathStr + '"></path>'
                + '</g>'
                + '</svg>';
            linkerBox.append(svg).attr('path-d', pathStr);
            // 绘制下一级
            this.drawChildrenLinker(child);
        }
    };
    /**
     * 设置脑图位置
     */
    Minder.prototype.locateMap = function () {
        var win = jquery__WEBPACK_IMPORTED_MODULE_22___default()(window);
        var root = jquery__WEBPACK_IMPORTED_MODULE_22___default()('.topic.central');
        var rootPos = root.position();
        var mapWidth = this.mindMap.width() * this.zoom;
        var mapHeight = this.mindMap.height() * this.zoom;
        if (mapWidth < win.width()) {
            // 屏幕可以放下，让整张图在屏幕中间
            this.mindScreen.scrollLeft(mapWidth / 2 + this.mapMargin - win.width() / 2);
        }
        else {
            var rootWidth = (root.outerWidth() || 0) * this.zoom;
            if (this.definition.structure === 'left') {
                this.mindScreen.scrollLeft(rootPos.left + rootWidth + this.mapMargin - win.width() + 80);
            }
            else if (this.definition.structure === 'right') {
                this.mindScreen.scrollLeft(rootPos.left + this.mapMargin - 80);
            }
            else {
                this.mindScreen.scrollLeft(rootPos.left + rootWidth / 2 + this.mapMargin - win.width() / 2);
            }
        }
        if (mapHeight < win.height()) {
            // 屏幕可以放下
            this.mindScreen.scrollTop(mapHeight / 2 + this.mapMargin - win.height() / 2);
        }
        else {
            var rootHeight = (root.outerHeight() || 0) * this.zoom;
            if (this.definition.structure === 'org') {
                this.mindScreen.scrollTop(rootPos.top + this.mapMargin - 80);
            }
            else {
                this.mindScreen.scrollTop(rootPos.top + rootHeight / 2 + this.mapMargin - win.height() / 2);
            }
        }
    };
    /**
     * 切换主题的展开/收缩
     * @param expandBtn
     */
    Minder.prototype.toggleTopic = function (expandBtn) {
        var _this_1 = this;
        // 重新设置为很大，不影响绘制
        this.mindCanvas.css({
            width: 20000,
            height: 20000
        });
        this.mindMap.css('width', 'auto');
        // 找到主分支主题，从它开始重新绘制连线
        var mainContainer = expandBtn.parents('.main-container');
        var mainId = mainContainer.data('topic');
        var mainTopic = this.nodeMapping[mainId].node;
        var currentId = expandBtn.data('topic');
        var currentTopic = this.nodeMapping[currentId].node;
        var currentCollapsed = (currentTopic.collapsed || currentTopic.autoCollapsed);
        currentTopic.collapsed = !currentCollapsed;
        delete currentTopic.autoCollapsed;
        var topicContainer = jquery__WEBPACK_IMPORTED_MODULE_22___default()('#tp-' + currentId);
        var topicBox = topicContainer.children('.tp-box');
        // 记录当时的位移情况
        var originalBoxOffset = topicBox.offset();
        if (topicContainer.children('.tp-children').length === 0) {
            var part_1 = 'org';
            if (topicContainer.hasClass('left')) {
                part_1 = 'left';
            }
            else if (topicContainer.hasClass('right')) {
                part_1 = 'right';
            }
            recursive(currentTopic.children, function (topic) {
                return _this_1.drawTopic(topic, null, part_1);
            });
        }
        topicContainer.toggleClass('collapsed');
        // 重新设置尺寸
        this.resetCanvas();
        this.drawMainLinker();
        this.drawChildrenLinker(mainTopic);
        var newBoxOffset = topicBox.offset();
        var newBoxPos = {
            left: newBoxOffset.left + this.mindScreen.scrollLeft(),
            top: newBoxOffset.top + this.mindScreen.scrollTop()
        };
        // 根据新的情况，重新设置位置
        this.mindScreen.scrollLeft(newBoxPos.left - originalBoxOffset.left);
        this.mindScreen.scrollTop(newBoxPos.top - originalBoxOffset.top);
    };
    /**
     * 初始化操作
     */
    Minder.prototype.initOperate = function () {
        // 初始化拖动，这里只试用PC端，因为移动端默认就是拖动调整位置
        var me = this;
        this.mindScreen.on('mousedown', function (downE) {
            var downPosEvent = downE;
            if (downE.originalEvent.touches) {
                downPosEvent = downE.originalEvent.touches[0];
            }
            jquery__WEBPACK_IMPORTED_MODULE_22___default()('.topic-note-menu').remove();
            // 初始时的位置
            var originalLeft = me.mindScreen.scrollLeft();
            var originalTop = me.mindScreen.scrollTop();
            jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).on('mousemove', function (moveE) {
                var movePosEvent = moveE;
                var originalEvent = moveE.originalEvent;
                if (originalEvent.touches) {
                    movePosEvent = originalEvent.touches[0];
                }
                var offset = {
                    left: movePosEvent.pageX - downPosEvent.pageX,
                    top: movePosEvent.pageY - downPosEvent.pageY
                };
                me.mindScreen.scrollLeft(originalLeft - offset.left);
                me.mindScreen.scrollTop(originalTop - offset.top);
            });
            jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).on('mouseup', function () {
                jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).off('mouseup').off('mousemove');
            });
        });
        this.mindScreen.on('click', function () {
            jquery__WEBPACK_IMPORTED_MODULE_22___default()('.topic-note-menu').remove();
        });
        // 点击主题进行钻取
        this.mindScreen.on(environment.downEvent, '.topic-text', function (downE) {
            var downPosEvent = downE;
            if (downE.originalEvent.touches) {
                downPosEvent = downE.originalEvent.touches[0];
            }
            var target = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            target.off().on(environment.upEvent, function (upE) {
                var upPosEvent = upE;
                var originalEvent = upE.originalEvent;
                if (originalEvent.changedTouches) {
                    upPosEvent = originalEvent.changedTouches[0];
                }
                if (Math.abs(upPosEvent.pageX - downPosEvent.pageX) > 10
                    || Math.abs(upPosEvent.pageY - downPosEvent.pageY) > 10) {
                    // 发生了拖动，不处理
                    return;
                }
                var topicId = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).parent().data('topic');
                me.drillTopic(topicId);
            });
            me.mindScreen.on(environment.upEvent, function () {
                target.off(environment.upEvent);
            });
        });
        this.mindScreen.on(environment.downEvent, '.topic-note', function (downE) {
            downE.stopPropagation();
        });
        // 点击显示备注
        this.mindScreen.on('click', '.topic-note', function (downE) {
            downE.stopPropagation();
            var target = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
            var topicId = target.data('topic');
            var topic = me.nodeMapping[topicId].node;
            jquery__WEBPACK_IMPORTED_MODULE_22___default()('.topic-note-menu').remove();
            var menu = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="topic-note-menu"></div>').appendTo(me.mindMap);
            jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="arrow"></div>').appendTo(menu);
            var noteContent = jquery__WEBPACK_IMPORTED_MODULE_22___default()(jquery__WEBPACK_IMPORTED_MODULE_22___default.a.parseHTML('<div class="note-text">' + textToHtml(topic.note, me.state.getEditorProps().locale) + '</div>'));
            menu.append(noteContent);
            var targetOffset = target.offset();
            menu.css({
                left: targetOffset.left / me.zoom - me.mindMap.offset().left / me.zoom - (menu.outerWidth() || 0) / 2 + 9,
                top: targetOffset.top / me.zoom - me.mindMap.offset().top / me.zoom + 30
            });
            menu.on(environment.downEvent, function (menuDownE) {
                menuDownE.stopPropagation();
            });
        });
        // 点击链接
        this.mindScreen.on(environment.downEvent, '.content-link, .mention', function (downE) {
            downE.stopPropagation();
        });
        this.mindScreen.on('click', '.content-link, .mention', function (downE) {
            downE.stopPropagation();
            if (me.state.getEditorProps().env !== MindNoteEnvironment.PC) {
                downE.preventDefault();
                var target = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
                var href = target.attr('href');
                var mentionData = getMentionData(target);
                if (mentionData && mentionData.mentionType === MentionType.USER) {
                    me.eventSource.trigger(SourceEvent.OPEN_USER_PROFILE, mentionData);
                }
                else {
                    me.eventSource.trigger(SourceEvent.OPEN_LINK, href);
                }
            }
        });
        if (me.state.getEditorProps().env === MindNoteEnvironment.PC) {
            handleMentionHover(this.mindScreen, me.eventSource);
        }
        // 移动端双指缩放
        this.mindScreen.on('touchstart', function (e) {
            var touches = e.originalEvent.touches;
            if (touches.length === 2) {
                e.preventDefault();
                // 两个手指头
                var beginZoom_1 = me.zoom;
                var begin1 = { x: touches[0].pageX, y: touches[0].pageY };
                var begin2 = { x: touches[1].pageX, y: touches[1].pageY };
                var beginDistance_1 = me.measureDistance(begin1, begin2);
                var screenPoint = {
                    x: (begin1.x + begin2.x) / 2,
                    y: (begin1.y + begin2.y) / 2
                };
                var mapAroundPoint_1 = {
                    x: (me.mindScreen.scrollLeft() + screenPoint.x - me.mapMargin) / beginZoom_1,
                    y: (me.mindScreen.scrollTop() + screenPoint.y - me.mapMargin) / beginZoom_1
                };
                me.mindScreen.on('touchmove.scale', function (moveE) {
                    var moveTouches = moveE.originalEvent.touches;
                    var move1 = { x: moveTouches[0].pageX, y: moveTouches[0].pageY };
                    var move2 = { x: moveTouches[1].pageX, y: moveTouches[1].pageY };
                    var moveDistance = me.measureDistance(move1, move2);
                    var newZoomScale = moveDistance / beginDistance_1 * beginZoom_1;
                    var touchMovePoint = {
                        x: (move1.x + move2.x) / 2,
                        y: (move1.y + move2.y) / 2
                    };
                    me.setMapZoom(newZoomScale, mapAroundPoint_1, touchMovePoint);
                });
                me.mindScreen.on('touchend.scale', function () {
                    me.mindScreen.off('touchmove.scale').off('touchend.scale');
                });
            }
        });
    };
    /**
     * 测量两个点的距离
     * @param p1
     * @param p2
     * @returns {number}
     */
    Minder.prototype.measureDistance = function (p1, p2) {
        var h = p2.y - p1.y;
        var w = p2.x - p1.x;
        return Math.sqrt(Math.pow(h, 2) + Math.pow(w, 2));
    };
    Minder.prototype.drillTopic = function (topicId) {
        if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_12__["default"])(topicId)) {
            topicId = null;
        }
        if (topicId !== this.rootId) {
            if (this.isTooLarge(topicId, 'drill')) {
                return;
            }
            this.eventSource.trigger(SourceEvent.DRILLED, {
                name: PureActions.DRILL,
                viewType: ViewType.MINDMAP,
                from: this.rootId,
                to: topicId,
            });
            this.rootId = topicId;
            this.draw();
            this.mindMap.hide();
            this.mindMap.fadeIn();
            this.refreshDir();
        }
    };
    /**
     * 判断思维导图是否太大
     */
    Minder.prototype.isTooLarge = function (viewRootId, enterWay) {
        var viewNodes = this.definition.nodes;
        if (viewRootId) {
            var rootMapping = this.nodeMapping[viewRootId];
            if (rootMapping) {
                // 当前打开某个分支节点，重新开始计数
                viewNodes = [rootMapping.node];
            }
        }
        var autoCollapseCount = environment.isMobile ? 100 : 800;
        var maxCount = environment.isMobile ? 260 : 1500;
        var nodeCount = 0;
        recursive(viewNodes, function (node) {
            nodeCount++;
            if (node.collapsed) {
                return false;
            }
        });
        function autoCollapseNodes(collapseByLevel) {
            nodeCount = 0;
            recursive(viewNodes, function (node) {
                node.autoCollapsed = false;
            });
            recursive(viewNodes, function (node, parent, index, parentIndex, level) {
                nodeCount++;
                if (node.collapsed) {
                    return false;
                }
                if (level === collapseByLevel) {
                    node.autoCollapsed = true;
                    return false;
                }
            });
        }
        this.subTopicAutoCollapsed = false;
        // 开始自动收缩
        // 先收缩第三级
        if (nodeCount > autoCollapseCount) {
            autoCollapseNodes(2);
            this.subTopicAutoCollapsed = true;
        }
        // 再收缩第二级
        if (nodeCount > autoCollapseCount) {
            autoCollapseNodes(1);
        }
        // 再收缩第一级
        if (nodeCount > autoCollapseCount) {
            autoCollapseNodes(0);
        }
        if (nodeCount > maxCount) {
            // 文档太大，不能打开
            // let tipContent;
            // if (enterWay === 'drill') {
            // 	tipContent = '所选分支主题下内容太多，无法浏览思维导图，';
            // } else {
            // 	tipContent = '此文档主题条目太多，无法浏览思维导图，';
            // }
            // $.alert({
            // 	title: '无法查看思维导图',
            // 	content: '<div style="max-width: 340px;">' + tipContent +
            // 	'您可以：<div>1. 折叠不重要的主题</div><div>2. 点击某一子主题，进入主题后，导出相应的主题</div>' +
            // 	'<div style="color: #777;margin-top: 10px;">思维导图最多能显示' + maxCount + '条主题。</div>' +
            // 	'</div>'
            // });
            return true;
        }
        return false;
    };
    /**
     * 刷新路径
     */
    Minder.prototype.refreshDir = function () {
        var dirDom = this.mindScreen.find('.mind-dir');
        if (dirDom.length === 0) {
            dirDom = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="mind-dir"></div>').appendTo(this.mindScreen);
        }
        dirDom.attr('class', 'mind-dir').addClass('theme-' + this.definition.theme);
        if (!this.rootId) {
            dirDom.hide();
            return;
        }
        var dir = [];
        var currentNodeId = this.rootId;
        if (currentNodeId) {
            while (true) {
                // 层级向上查找，并往数组后边push
                var parentNode = this.nodeMapping[currentNodeId].parent;
                if (parentNode == null) {
                    break;
                }
                dir.push(parentNode);
                currentNodeId = parentNode.id;
            }
            dir.reverse();
        }
        dirDom.empty().show();
        var me = this;
        if (environment.isMobile) {
            dirDom.css('top', 20 + this.statusBarSpacing);
            var backId_1 = null;
            if (dir.length > 0) {
                var previous = dir[dir.length - 1];
                backId_1 = previous.id;
            }
            var backIcon = new default_1(IconSet.CHEVRON_LEFT, 14);
            var btn = jquery__WEBPACK_IMPORTED_MODULE_22___default()("<div class=\"back-btn\">" + backIcon.toString() + t('mindnote.editor.up_level') + "</div>").appendTo(dirDom);
            btn.on('click', function () {
                me.drillTopic(backId_1);
            });
        }
        else {
            var rootDir = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="item"><div class="dir-text"></div></div>').appendTo(dirDom);
            rootDir.find('.dir-text').text(me.docName || this.state.getEditorProps().titlePlaceholder);
            for (var i = 0; i < dir.length; i++) {
                var item = dir[i];
                var dirItem = jquery__WEBPACK_IMPORTED_MODULE_22___default()('<div class="item"><div class="dir-text">' + nodeTextToPlainText(item.text, me.state.getEditorProps().locale) + '</div></div>').appendTo(dirDom);
                dirItem.data('node-id', item.id);
            }
            dirDom.off().on('click', '.item', function () {
                var item = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this);
                var topicId = item.data('node-id');
                me.drillTopic(topicId);
            });
        }
        dirDom.off(environment.downEvent).on(environment.downEvent, function (downE) {
            downE.stopPropagation();
        });
    };
    __decorate([
        Bind()
    ], Minder.prototype, "handleStructureChange", null);
    __decorate([
        Bind()
    ], Minder.prototype, "handleStyleChange", null);
    __decorate([
        Bind(),
        TeaLogger$8('toggle_attribute', function (_a) {
            var args = _a.args;
            var e = args[0];
            var eventType = e.type === 'click' ? 'mouseclick' : 'keydown';
            var source = e.type === 'click' ? 'mindmap_toolbar' : 'shortkey';
            return {
                action: 'quit_mode',
                attr_op_status: 'effective',
                eventType: eventType,
                source: source,
                mode: 'mindmap',
                view_level: getCurrentLevel('minder'),
                select_type: null
            };
        })
    ], Minder.prototype, "handleExit", null);
    __decorate([
        Bind(),
        TeaLogger$8('toggle_attribute', function (_a) {
            var args = _a.args;
            var e = args[0];
            var eventType = e.type === 'click' ? 'mouseclick' : 'keydown';
            var source = e.type === 'click' ? 'mindmap_toolbar' : 'shortkey';
            return {
                action: 'enter_item',
                attr_op_status: 'effective',
                eventType: eventType,
                source: source,
                mode: 'mindmap',
                view_level: getCurrentLevel('minder'),
                select_type: null
            };
        })
    ], Minder.prototype, "drillTopic", null);
    return Minder;
}());

var TeaLogger$9 = TeaManager.getDecorator();
var DemoPlayer = /** @class */ (function () {
    function DemoPlayer(nodePainter, model, eventSource, state) {
        var _this = this;
        /**
         * 夜间模式样式
         */
        this.NIGHT_MODE_CLASS = 'night-mode';
        /**
         * 事件命名空间
         */
        this.EVENT_NAMESPACE = '.demo';
        /**
         * 演示模式键盘事件
         */
        this.DEMO_KEY_EVENT = 'keydown.demo';
        /**
         * 是否已经进入了演示模式
         */
        this.opened = false;
        // 屏幕元素，整个演示的容器
        this.screenElement = jquery__WEBPACK_IMPORTED_MODULE_22___default()();
        // 节点树容器
        this.treeElement = jquery__WEBPACK_IMPORTED_MODULE_22___default()();
        this.rootId = null;
        this.zoom = 1.4;
        this.fullscreenEvent = 'webkitfullscreenchange MSFullscreenChange mozfullscreenchange fullscreenchange';
        /**
         * 当前的亮度
         */
        this.mode = 'light';
        /**
         * 处理夜间模式切换
         */
        this.handleModeChange = function (mode) {
            _this.mode = mode;
            _this.screenElement.toggleClass(_this.NIGHT_MODE_CLASS, mode === 'night');
            _this.eventSource.trigger(SourceEvent.PRESENTATION_MODE_CHANGE, {
                mode: mode,
                zoom: _this.zoom,
            });
            _this.toolbar.update({ mode: mode });
        };
        this.nodePainter = nodePainter;
        this.model = model;
        this.eventSource = eventSource;
        this.state = state;
        this.toolbar = new DemoToolbarHolder({
            readonly: true,
            exportEnabled: false,
            view: 'fullscreen',
            mode: this.mode,
            zoom: this.zoom,
            onModeChange: this.handleModeChange,
            onZoomIn: this.handleZoomIn,
            onZoomOut: this.handleZoomOut,
            onExit: this.handleExit,
            editorState: this.state,
        });
    }
    /**
     * 进入全屏
     * @param element
     */
    DemoPlayer.prototype.launchFullscreen = function () {
        var element = this.screenElement[0];
        var requestFullscreen = element.requestFullscreen
            || element.mozRequestFullScreen
            || element.webkitRequestFullscreen
            || element.msRequestFullscreen;
        if (requestFullscreen) {
            requestFullscreen.call(element);
            this.opened = true;
        }
    };
    /**
     * 退出全屏
     */
    DemoPlayer.prototype.exitFullscreen = function () {
        var doc = document;
        var exitFullscreen = doc.exitFullscreen
            || doc.mozCancelFullScreen
            || doc.webkitExitFullscreen
            || doc.msExitFullscreen;
        if (exitFullscreen) {
            exitFullscreen.call(doc);
            this.opened = false;
        }
    };
    /**
     * 刷新视图
     */
    DemoPlayer.prototype.refreshView = function () {
        var _this = this;
        this.treeElement.empty();
        var nodes;
        if (this.rootId == null) {
            nodes = this.model.getDefine().nodes;
        }
        else {
            var rootNode = this.model.getById(this.rootId);
            nodes = [rootNode];
        }
        if (nodes && nodes.length > 0) {
            // 绘制节点
            recursive(nodes, function (node) {
                _this.renderNode(node);
            });
        }
        this.refreshDir();
    };
    /**
     * 渲染节点
     */
    DemoPlayer.prototype.renderNode = function (node) {
        var target;
        var isRoot = node.id === this.rootId;
        var nodeDom = this.nodePainter.renderNode(node, isRoot, true);
        var parentNode = this.model.getParent(node.id);
        if (parentNode == null || (this.rootId && this.rootId === node.id)) {
            target = this.treeElement;
        }
        else {
            var parentDom = this.treeElement.find('#' + parentNode.id);
            target = this.nodePainter.getChildrenContainer(parentDom);
        }
        target.append(nodeDom);
    };
    /**
     * 刷新路径
     */
    DemoPlayer.prototype.refreshDir = function () {
        var dirDom = this.screenElement.find('.mindnote-dir');
        if (dirDom.length === 0) {
            return;
        }
        if (!this.rootId) {
            dirDom.hide();
            return;
        }
        var rootNode = this.model.getById(this.rootId);
        var dir = this.model.getDir(rootNode);
        this.nodePainter.renderDir(dir, dirDom);
    };
    /**
     * 缩放
     * @param changed 变化比例
     */
    DemoPlayer.prototype.zoomDocument = function (changed) {
        if (this.zoom >= 3 && changed > 0) {
            return;
        }
        if (this.zoom <= 0.6 && changed < 0) {
            return;
        }
        this.zoom += changed;
        this.zoom = Math.round(this.zoom * 10) / 10;
        this.setZoomScale();
    };
    /**
     * 设置文档的缩放值
     */
    DemoPlayer.prototype.setZoomScale = function () {
        var demoWrapper = this.screenElement.find('.demo-wrapper');
        if (environment.isFirefox) {
            demoWrapper.css('transform', 'scale(' + this.zoom + ')');
        }
        else {
            demoWrapper.css('zoom', this.zoom);
        }
    };
    /**
     * 放大
     */
    DemoPlayer.prototype.handleZoomIn = function (zoom) {
        this.zoomDocument(0.2);
        this.toolbar.update({ zoom: this.zoom });
    };
    /**
     * 缩小
     */
    DemoPlayer.prototype.handleZoomOut = function (zoom) {
        this.zoomDocument(-0.2);
        this.toolbar.update({ zoom: this.zoom });
    };
    /**
     * 退出
     */
    DemoPlayer.prototype.handleExit = function (e) {
        this.opened = false;
        if (e.type === 'click') {
            this.exitFullscreen();
        }
        this.screenElement.hide();
        this.treeElement.empty();
        this.toggleOpening(false);
        this.eventSource.trigger(SourceEvent.MIND_MAP_CLOSE);
        this.offEvent();
        this.toolbar.destroy();
    };
    /**
     * 开始播放
     */
    DemoPlayer.prototype.play = function (screenEle, name, rId) {
        var _this = this;
        // 已经打开了
        if (this.opened) {
            return;
        }
        this.rootId = rId;
        this.screenElement = screenEle;
        this.toggleOpening(true);
        this.launchFullscreen();
        this.initEvent();
        setTimeout(function () {
            _this.open(name);
            // 确保演示窗口渲染了，才来触发打开事件
            _this.eventSource.trigger(SourceEvent.PRESENTATION_OPEN, {
                zoom: _this.zoom,
                mode: _this.mode,
            });
        }, 100);
    };
    /**
     * 打开
     * @param def 文档的定义
     */
    DemoPlayer.prototype.open = function (name) {
        this.initDom(name);
        this.treeElement = this.screenElement.find('.mindnote-tree');
        this.setZoomScale();
        this.refreshView();
        /* 挂载工具栏 */
        this.toolbar.update({ fullscreenElement: this.screenElement.get(0) });
        this.toolbar.mountTo(this.screenElement);
    };
    /**
     * 设置打开状态
     */
    DemoPlayer.prototype.toggleOpening = function (opening) {
        if (opening) {
            this.screenElement.append("<div class=\"opening\">" + t('mindnote.editor.opening') + "...</div>");
        }
        else {
            this.screenElement.find('.opening').remove();
        }
    };
    /**
     * 监听事件
     */
    DemoPlayer.prototype.initEvent = function () {
        var _this = this;
        var me = this;
        jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).on(this.DEMO_KEY_EVENT, function (e) {
            // 阻止 ctrl + [
            if (e.keyCode === KeyCode.OpeningSquareBracket) {
                e.preventDefault();
            }
        }).on(this.fullscreenEvent, function (e) {
            _this.screenElement.toggle();
            if (!_this.screenElement.is(':visible')) {
                _this.handleExit(e.originalEvent);
            }
        });
        this.screenElement.on("click" + this.EVENT_NAMESPACE, '.mindnote-tree .bullet', function () {
            // 钻取
            me.rootId = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).data('id') || null;
            me.refreshView();
        }).on("click" + this.EVENT_NAMESPACE, '.mindnote-tree .toggle', function () {
            // 折叠
            var wrapper = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).parent();
            var container = wrapper.parent().parent();
            container.toggleClass('collapsed');
        }).on("click" + this.EVENT_NAMESPACE, '.mindnote-dir .item', function () {
            me.rootId = jquery__WEBPACK_IMPORTED_MODULE_22___default()(this).data('node-id') || null;
            me.refreshView();
        });
    };
    /**
     * 解除事件监听
     */
    DemoPlayer.prototype.offEvent = function () {
        jquery__WEBPACK_IMPORTED_MODULE_22___default()(document).off(this.DEMO_KEY_EVENT).off(this.fullscreenEvent);
        this.screenElement.off(this.EVENT_NAMESPACE);
    };
    /**
     * 初始化全屏元素
     */
    DemoPlayer.prototype.initDom = function (title) {
        this.screenElement.empty().append("\n\t\t\t<div class=\"scrollable\">\n\t\t\t\t<div class=\"demo-wrapper\">\n\t\t\t\t\t<div class=\"header\">\n\t\t\t\t\t\t<div class=\"title\">" + escapeText(title) + "</div>\n\t\t\t\t\t\t<div class=\"mindnote-dir\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"mindnote-tree\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t");
    };
    __decorate([
        Bind(),
        TeaLogger$9('toggle_attribute', function (_a) {
            var args = _a.args;
            var eventType = 'mouseclick';
            var source = 'playmode_toolbar';
            return {
                action: 'zoom-in',
                attr_op_status: 'effective',
                eventType: eventType,
                source: source,
                mode: 'playmode',
                view_level: getCurrentLevel('fullscreen'),
                select_type: null
            };
        })
    ], DemoPlayer.prototype, "handleZoomIn", null);
    __decorate([
        Bind(),
        TeaLogger$9('toggle_attribute', function (_a) {
            var args = _a.args;
            var eventType = 'mouseclick';
            var source = 'playmode_toolbar';
            return {
                action: 'zoom-out',
                attr_op_status: 'effective',
                eventType: eventType,
                source: source,
                mode: 'playmode',
                view_level: getCurrentLevel('fullscreen'),
                select_type: null
            };
        })
    ], DemoPlayer.prototype, "handleZoomOut", null);
    __decorate([
        Bind(),
        TeaLogger$9('toggle_attribute', function (_a) {
            var args = _a.args;
            var e = args[0];
            var eventType = e.type === 'click' ? 'mouseclick' : 'keydown';
            var source = e.type === 'click' ? 'playmode_toolbar' : 'shortkey';
            return {
                action: 'quit_mode',
                attr_op_status: 'effective',
                eventType: eventType,
                source: source,
                mode: 'playmode',
                view_level: getCurrentLevel('fullscreen'),
                select_type: null
            };
        })
    ], DemoPlayer.prototype, "handleExit", null);
    return DemoPlayer;
}());

/**
 * 进度条组件
 * @param props
 */
var Progress = function (props) {
    return (Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { className: "mindnote-upload-progress__outer", style: {
            width: props.width,
            height: props.height,
            borderRadius: props.height / 2
        } },
        Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])("div", { className: "mindnote-upload-progress__inner", style: { width: props.value * 100 + "%" } })));
};
Progress.defaultProps = {
    width: 200,
    height: 8,
    value: 0,
};

var ProgressHolder = /** @class */ (function (_super) {
    __extends(ProgressHolder, _super);
    function ProgressHolder(props) {
        var _this = _super.call(this, __assign({}, Progress.defaultProps, props)) || this;
        _this.container.setAttribute('class', 'mindnote-image-holder');
        return _this;
    }
    ProgressHolder.prototype.render = function () {
        return Object(react__WEBPACK_IMPORTED_MODULE_28__["createElement"])(Progress, __assign({}, this.props));
    };
    return ProgressHolder;
}(ReactHolder));

var ImageHolder = /** @class */ (function () {
    function ImageHolder() {
        this.progressMap = {};
    }
    /**
     * 创建一个 ProgressHolder
     * @param id 图片ID
     */
    ImageHolder.prototype.create = function (id) {
        var progressHolder = new ProgressHolder();
        this.progressMap[id] = progressHolder;
        return progressHolder;
    };
    /**
     * 获取一个 ProgressHolder
     * @param id 图片ID
     */
    ImageHolder.prototype.get = function (id) {
        var progressHolder = this.progressMap[id];
        if (progressHolder) {
            return progressHolder;
        }
        return null;
    };
    /**
     * 移除一个 ProgressHolder
     * @param id 图片ID
     */
    ImageHolder.prototype.remove = function (id) {
        var progressHolder = this.progressMap[id];
        if (progressHolder) {
            progressHolder.destroy();
            delete this.progressMap[id];
        }
    };
    return ImageHolder;
}());

var TeaLogger$a = TeaManager.getDecorator();
/**
 * 监听 dom 事件命名空间
 */
var EVENT_NAMESPACE = '.comment';
/**
 * 评论 manager
 */
var CommentManager = /** @class */ (function () {
    function CommentManager(props) {
        var _this = this;
        /**
         * 节点评论 map
         */
        this.nodeCommentsMap = {};
        /**
         * 评论信息 map
         */
        this.commentsInfoMap = {};
        /**
         * 还没同步到 model 的评论（评论服务已经同步了）
         */
        this.unLoadedComments = [];
        /**
         * 移动端评论面板高度（padding-bottom）
         */
        this.mobileCommentHeight = 380;
        /**
         * 目前激活的评论
         */
        this.activeCommentNodeId = '';
        /**
         * 目前 hover 的评论
         */
        this.hoverCommentNodeId = '';
        /**
         * mention 消息 map
         */
        this.mentionMap = {};
        /**
         * 激活或者新增评论
         */
        this.activeOrAddComment = function (nodeId) {
            var node = _this.model.getById(nodeId);
            if (_this.nodeCommentsMap[nodeId]) {
                // 激活评论
                var commentId = Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(_this.nodeCommentsMap[nodeId])[0];
                var eventData = { active: true, focus: true, nodeId: nodeId, commentId: commentId };
                _this.eventSource.trigger(SourceEvent.ACTIVE_COMMENT, eventData);
                _this.activeNodeComment({ nodeId: nodeId, isActive: true, isClick: true });
            }
            else if (_this.state.getEditorState().commentEnabled) {
                // 新增评论
                var locale = _this.state.getEditorProps().locale;
                var eventData = {
                    nodeId: nodeId,
                    quote: nodeTextToPlainText(node.text, locale),
                };
                _this.eventSource.trigger(SourceEvent.ADD_COMMENT, eventData);
                _this.activeNodeComment({ nodeId: nodeId, isActive: true, isClick: true });
            }
        };
        /**
         * 处理一下没加载的评论
         */
        this.handleUnLoadedComments = function () {
            if (_this.unLoadedComments.length === 0) {
                return;
            }
            var needReFresh = false;
            var unLoadedComments = [];
            Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(_this.unLoadedComments, function (comment) {
                var nodeId = _this.getNodeIdByComment(comment.id);
                if (nodeId) {
                    needReFresh = true;
                    comment.nodeId = nodeId;
                    _this.addCommentToMap(comment);
                    _this.refreshNodeComment(comment.id);
                }
                else {
                    unLoadedComments.push(comment);
                }
            });
            _this.unLoadedComments = unLoadedComments;
            if (needReFresh) {
                _this.eventSource.trigger(SourceEvent.REFRESH_COMMENT);
                _this.refreshPageComment();
            }
        };
        /**
         * 处理 keydown
         */
        this.handleKeyDown = function (e) {
            if (e.altKey && e[environment.metaKey] && e.keyCode === KeyCode.M) {
                _this.handleCommentHotKey(e);
            }
        };
        /**
         * 处理评论 icon mouseleave
         */
        this.handleCommentButtonOut = function (e) {
            var nodeId = $(e.target).parents('.node').attr('id');
            _this.activeNodeComment({ isActive: false, isHover: true, nodeId: nodeId });
        };
        /**
         * 处理 paper 点击（取消激活评论）
         */
        this.handlePaperClick = function (e) {
            if (_this.activeCommentNodeId || _this.hoverCommentNodeId) {
                _this.activeNodeComment({ isActive: false });
                _this.eventSource.trigger(SourceEvent.ACTIVE_COMMENT, { active: false });
            }
        };
        /**
         * 处理 content 点击
         */
        this.handleContentClick = function (e) {
            e.stopImmediatePropagation();
            var $target = $(e.currentTarget);
            _this.handleContentActive($target);
        };
        /**
         * 处理 content focus
         */
        this.handleContentFocus = function (e) {
            _this.handleContentActive($(e.target));
        };
        /**
         * 处理气泡点击
         */
        this.handleBubbleClick = function (e) {
            e.stopImmediatePropagation();
            _this.handleContentActive($(e.target));
        };
        /**
         * 处理 content wrapper 点击
         * @description 在 content 变成 inline 之后，点空白处让 content focus
         */
        this.handleContentWrapperClick = function (e) {
            if (e.currentTarget === e.target) {
                var $content_1 = $(e.target).children('.content');
                if (!$content_1.is(':focus')) {
                    var focus_1 = function () {
                        var start = $content_1.text().length;
                        setCursorPosition($content_1, { start: start });
                    };
                    // ios 的光标不可见，延时一下就行
                    if (bowser__WEBPACK_IMPORTED_MODULE_27___default.a.ios) {
                        setTimeout(focus_1, 0);
                    }
                    else {
                        focus_1();
                    }
                }
            }
        };
        /**
         * 处理评论权限变化
         */
        this.setCommentPermission = function () {
            var commentEnabled = _this.state.getEditorState().commentEnabled;
            _this.viewport.nodeWrapper.toggleClass('comment-enabled', !!commentEnabled);
        };
        var model = props.model, eventSource = props.eventSource, viewport = props.viewport, state = props.state;
        this.model = model;
        this.eventSource = eventSource;
        this.viewport = viewport;
        this.state = state;
    }
    /**
     * 初始化
     */
    CommentManager.prototype.init = function () {
        this.bindEvents();
        this.setCommentPermission();
    };
    /**
     * 销毁
     */
    CommentManager.prototype.destroy = function () {
        this.unBindEvents();
    };
    CommentManager.prototype.setMobileCommentHeight = function (height) {
        this.mobileCommentHeight = height;
    };
    /**
     * 删除评论
     */
    CommentManager.prototype.deleteComment = function (commentId) {
        this.refreshNodeComment(commentId, true);
        this.cancelComment(commentId, false);
        this.saveChanges(commentId, true);
        this.activeNodeComment({ isActive: false, commentId: commentId });
        this.refreshPageComment();
    };
    /**
     * 解决评论
     */
    CommentManager.prototype.resolveComment = function (commentId) {
        this.refreshNodeComment(commentId, true);
        this.cancelComment(commentId, false);
        this.activeNodeComment({ isActive: false, commentId: commentId });
        this.refreshPageComment();
    };
    /**
     * 取消新建评论
     */
    CommentManager.prototype.cancelComment = function (commentId, updateActive) {
        if (updateActive === void 0) { updateActive = true; }
        var nodeId = this.getNodeIdByComment(commentId);
        if (nodeId && this.nodeCommentsMap[nodeId]) {
            delete this.nodeCommentsMap[nodeId][commentId];
            if (Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(this.nodeCommentsMap[nodeId]).length === 0) {
                delete this.nodeCommentsMap[nodeId];
            }
        }
        delete this.commentsInfoMap[commentId];
        if (updateActive) {
            this.activeNodeComment({ isActive: false, nodeId: nodeId });
        }
        this.refreshPageComment();
    };
    /**
     * 确定新建评论
     * @param tempCommentId 新建未提交的虚拟评论 id
     * @param realCommentId 确定后的真实的评论 id
     */
    CommentManager.prototype.saveComment = function (tempCommentId, realCommentId) {
        var comment = this.commentsInfoMap[tempCommentId];
        comment.id = realCommentId;
        comment.total = 1;
        comment.isTemp = false;
        this.changeKey(this.commentsInfoMap, tempCommentId, realCommentId);
        this.changeKey(this.nodeCommentsMap[comment.nodeId], tempCommentId, realCommentId);
        this.refreshNodeComment(comment.id);
        this.saveChanges(realCommentId, false);
        this.activeNodeComment({ isActive: false, nodeId: comment.nodeId });
        this.refreshPageComment();
    };
    /**
     * 新增评论
     */
    CommentManager.prototype.addComment = function (nodeId, comment) {
        var id = comment.id, total = comment.total;
        this.addCommentToMap({ id: id, nodeId: nodeId, total: total, isTemp: true });
        this.activeNodeComment({ isActive: true, nodeId: nodeId });
        this.refreshPageComment();
    };
    /**
     * 设置评论数据
     */
    CommentManager.prototype.setCommentsData = function (comments) {
        var _this = this;
        var tempComments = this.getTempComments();
        this.commentsInfoMap = {};
        this.nodeCommentsMap = {};
        this.viewport.nodeWrapper.find('.node-wrapper.comment-node').removeClass('comment-node');
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(tempComments, function (commentInfo) {
            _this.addCommentToMap(commentInfo);
            _this.refreshNodeComment(commentInfo.id);
        });
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(comments, function (comment) {
            var nodeId = _this.getNodeIdByComment(comment.id);
            var commentInfo = {
                id: comment.id,
                total: comment.total,
                nodeId: nodeId || '',
                isTemp: false,
            };
            if (nodeId) {
                _this.addCommentToMap(commentInfo);
                _this.refreshNodeComment(comment.id);
            }
            else {
                _this.unLoadedComments.push(commentInfo);
            }
        });
        this.refreshPageComment();
    };
    /**
     * 设置 mention 消息数据
     */
    CommentManager.prototype.setMentionsData = function (mentions) {
        this.mentionMap = Object(lodash_es__WEBPACK_IMPORTED_MODULE_8__["default"])(mentions, function (prev, mentionId) {
            prev[mentionId] = true;
            return prev;
        }, {});
    };
    /**
     *获取所有评论列表
     */
    CommentManager.prototype.getAllComments = function () {
        var _this = this;
        var allComments = [];
        var visibleNodes = this.model.getVisibleNodes();
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(visibleNodes, function (nodeId) {
            // 未 resolve 或者未发出的评论
            var comments = Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(_this.nodeCommentsMap[nodeId] || {});
            allComments.push.apply(allComments, comments);
            // 加上已经 resolve 的评论
            var node = _this.model.getById(nodeId);
            if (node && node.comments) {
                var nodeComments = node.comments.map(function (item) { return item.id; });
                allComments.push.apply(allComments, nodeComments);
            }
        });
        return Object(lodash_es__WEBPACK_IMPORTED_MODULE_18__["default"])(allComments);
    };
    /**
     * 获取评论位置（已排序）
     */
    CommentManager.prototype.getCommentsPosition = function (needTop) {
        var _this = this;
        if (needTop === void 0) { needTop = true; }
        var positionMap = {};
        var visibleNodes = this.model.getVisibleNodes();
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(visibleNodes, function (nodeId) {
            // 未 resolve 或者未发出的评论
            var comments = _this.nodeCommentsMap[nodeId] || {};
            // 加上已经 resolve 的评论
            var node = _this.model.getById(nodeId);
            var modelComments = Object(lodash_es__WEBPACK_IMPORTED_MODULE_8__["default"])(node && node.comments ? node.comments : [], function (prev, curr) {
                prev[curr.id] = 1;
                return prev;
            }, {});
            // 合并一下
            var allComments = Object(lodash_es__WEBPACK_IMPORTED_MODULE_19__[/* default */ "a"])({}, comments, modelComments);
            var top = needTop ? _this.getNodePosition(nodeId, true) : 0;
            if (!needTop || top) {
                Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(allComments, function (val, commentId) {
                    positionMap[commentId] = top;
                });
            }
        });
        return positionMap;
    };
    /**
     * 获取 mention 消息列表（已排序）
     */
    CommentManager.prototype.getCommentMentions = function () {
        var _this = this;
        var mentions = [];
        var $mentions = this.viewport.paper.find('.mention');
        $.each($mentions, function (index, mention) {
            var mentionId = $(mention).attr('data-notify');
            if (mentionId && _this.mentionMap[mentionId]) {
                mentions.push(mentionId);
            }
        });
        return mentions;
    };
    /**
     * 获取评论定位
     */
    CommentManager.prototype.getCommentTop = function (commentId) {
        var comment = this.commentsInfoMap[commentId];
        return comment ? this.getNodePosition(comment.nodeId, false) : 0;
    };
    /**
     * 获取 mention 定位
     */
    CommentManager.prototype.getMentionTop = function (mentionId) {
        if (this.mentionMap[mentionId]) {
            var $mention = this.viewport.paper.find(".mention[data-notify=\"" + mentionId + "\"]");
            return this.getDomPosition($mention, false);
        }
        return 0;
    };
    /**
     * 重新打开已解决的评论
     */
    CommentManager.prototype.reopenComment = function (commentId) {
        var nodeId = this.getNodeIdByComment(commentId);
        if (nodeId) {
            // 添加到 map
            this.addCommentToMap({
                nodeId: nodeId,
                id: commentId,
                isTemp: false,
                total: 1,
            });
            // 刷新样式
            this.refreshNodeComment(commentId);
            return true;
        }
        return false;
    };
    /**
     * 获取节点评论数量
     */
    CommentManager.prototype.getNodeCommentCount = function (nodeId, exclude) {
        if (exclude === void 0) { exclude = ''; }
        var comments = this.nodeCommentsMap[nodeId] || {};
        var count = Object(lodash_es__WEBPACK_IMPORTED_MODULE_8__["default"])(Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(comments), function (prev, commentId) {
            var num = commentId === exclude ? 0 : (comments[commentId].total || 0);
            return prev + num;
        }, 0);
        return count;
    };
    /**
     * 激活评论（样式）
     */
    CommentManager.prototype.activeNodeComment = function (data) {
        var commentId = data.commentId, isActive = data.isActive, nodeId = data.nodeId, isHover = data.isHover, isClick = data.isClick;
        var id = nodeId || this.getNodeIdByComment(commentId);
        var lastNodeId = isHover ? this.hoverCommentNodeId : this.activeCommentNodeId;
        // 重复取消
        if (!isActive && !lastNodeId) {
            return;
        }
        // 重复激活
        if (isActive && lastNodeId === id) {
            return;
        }
        // 点击之后不管 hover
        if (isHover && this.activeCommentNodeId === id) {
            return;
        }
        // hover 之后点击，当作点击
        if (!isHover && this.hoverCommentNodeId) {
            this.hoverCommentNodeId = '';
        }
        // 记录激活信息
        if (isHover) {
            this.hoverCommentNodeId = isActive && id ? id : '';
        }
        else {
            this.activeCommentNodeId = isActive && id ? id : '';
        }
        // 设置样式
        this.setActiveClass();
        // 设置激活
        if (isActive && id) {
            var $node = getNodeContainer(id);
            // 确保 text 被 span 包裹
            this.ensureNodeTextWrap($node, id);
            // 滚动 & 取消折叠
            if (environment.isMobile || (!isHover && !isClick)) {
                // 取消父级节点折叠
                $node.parents('.node.collapsed').removeClass('collapsed');
                // 滚动
                this.scrollIntoView($node.get(0));
            }
        }
    };
    /**
     * 设置激活样式
     */
    CommentManager.prototype.setActiveClass = function () {
        // 取消之前激活的
        this.viewport.paper.find('.node-wrapper.comment-active').removeClass('comment-active');
        // click
        if (this.activeCommentNodeId) {
            getNodeContainer(this.activeCommentNodeId).children('.node-wrapper').addClass('comment-active');
        }
        if (environment.isMobile) {
            this.viewport.paper.css('padding-bottom', this.activeCommentNodeId ? this.mobileCommentHeight + "px" : '');
        }
        // hover
        if (this.hoverCommentNodeId) {
            getNodeContainer(this.hoverCommentNodeId).children('.node-wrapper').addClass('comment-active');
        }
    };
    /**
     * 取出本地评论
     */
    CommentManager.prototype.getTempComments = function () {
        return Object(lodash_es__WEBPACK_IMPORTED_MODULE_16__["default"])(this.commentsInfoMap).filter(function (comment) { return comment.isTemp; });
    };
    /**
     * 把评论加入 map
     */
    CommentManager.prototype.addCommentToMap = function (commentInfo) {
        var id = commentInfo.id, nodeId = commentInfo.nodeId;
        if (!this.nodeCommentsMap[nodeId]) {
            this.nodeCommentsMap[nodeId] = {};
        }
        this.nodeCommentsMap[nodeId][id] = commentInfo;
        this.commentsInfoMap[id] = commentInfo;
    };
    /**
     * 处理评论 icon 点击
     */
    CommentManager.prototype.handleCommentButtonClick = function (e) {
        e.stopImmediatePropagation();
        var nodeId = $(e.target).parents('.node').attr('id');
        this.activeOrAddComment(nodeId);
    };
    /**
     * 处理评论快捷键
     */
    CommentManager.prototype.handleCommentHotKey = function (e) {
        e.preventDefault();
        var nodeId = $(e.target).parents('.node').attr('id');
        this.activeOrAddComment(nodeId);
    };
    /**
     * 处理评论 icon mouseenter
     */
    CommentManager.prototype.handleCommentButtonIn = function (e) {
        var nodeId = $(e.target).parents('.node').attr('id');
        this.activeNodeComment({ isActive: true, isHover: true, nodeId: nodeId });
    };
    /**
     * 激活/取消激活节点评论
     */
    CommentManager.prototype.handleContentActive = function ($content) {
        var nodeId = $content.parents('.node').attr('id');
        var readonly = this.state.getReadonly();
        if (this.nodeCommentsMap[nodeId]) {
            var commentId = Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(this.nodeCommentsMap[nodeId])[0];
            this.activeNodeComment({ isActive: true, nodeId: nodeId, isClick: true });
            this.eventSource.trigger(SourceEvent.ACTIVE_COMMENT, { active: true, focus: readonly, commentId: commentId });
            return;
        }
        else if (this.activeCommentNodeId) {
            this.activeNodeComment({ isActive: false });
            this.eventSource.trigger(SourceEvent.ACTIVE_COMMENT, { active: false });
        }
    };
    /**
     * 把节点滚动到视口
     */
    CommentManager.prototype.scrollIntoView = function (dom) {
        if (!dom) {
            return;
        }
        var isMobile = environment.isMobile;
        if (!isMobile && dom.scrollIntoViewIfNeeded) {
            dom.scrollIntoViewIfNeeded({ behavior: 'smooth' });
        }
        else if (dom.scrollIntoView) {
            dom.scrollIntoView(isMobile ? true : { behavior: 'smooth' });
        }
    };
    /**
     * 刷新节点评论（数量）样式
     */
    CommentManager.prototype.refreshNodeComment = function (commentId, exclude) {
        var comment = this.commentsInfoMap[commentId];
        var isFeed = this.state.getEditorProps().isFeed;
        if (comment) {
            var total = this.getNodeCommentCount(comment.nodeId, exclude ? commentId : '');
            var $wrapper = getNodeWrapper(comment.nodeId);
            // 黄线
            $wrapper.toggleClass('comment-node', total > 0);
            // 气泡数量
            if (environment.isMobile) {
                $wrapper.children('.content-wrapper').children('.comment-bubble').text(total);
            }
            if (isFeed) {
                $wrapper.children('.content-wrapper').find('.feed-bubble').text(total);
            }
        }
    };
    /**
     * 刷新页面上是否有评论的样式
     */
    CommentManager.prototype.refreshPageComment = function () {
        var isFeed = this.state.getEditorProps().isFeed;
        var hasComment = !isFeed && Object(lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"])(this.commentsInfoMap).length > 0;
        $('.mindnote-root').toggleClass('has-comment', hasComment);
    };
    /**
     * 监听事件
     */
    CommentManager.prototype.bindEvents = function () {
        this.eventSource.on('messageExecuted', this.handleUnLoadedComments);
        this.state.addStateChangeListener(this.setCommentPermission);
        if (!environment.isMobile) {
            this.viewport.paper.on("click" + EVENT_NAMESPACE, this.handlePaperClick);
            this.viewport.paper.on("click" + EVENT_NAMESPACE, '.content', this.handleContentClick);
            this.viewport.paper.on("focus" + EVENT_NAMESPACE, '.content', this.handleContentFocus);
            this.viewport.paper.on("keydown" + EVENT_NAMESPACE, '.content', this.handleKeyDown);
            this.viewport.paper.on("click" + EVENT_NAMESPACE, '.comment-button, .feed-bubble', this.handleCommentButtonClick);
            this.viewport.paper.on("mouseenter" + EVENT_NAMESPACE, '.comment-button, .feed-bubble', this.handleCommentButtonIn);
            this.viewport.paper.on("mouseleave" + EVENT_NAMESPACE, '.comment-button, .feed-bubble', this.handleCommentButtonOut);
        }
        else {
            this.viewport.paper.on("click" + EVENT_NAMESPACE, '.comment-bubble', this.handleBubbleClick);
            this.viewport.paper.on("click" + EVENT_NAMESPACE, '.content-wrapper', this.handleContentWrapperClick);
        }
    };
    /**
     * 解绑事件
     */
    CommentManager.prototype.unBindEvents = function () {
        // 这里没 off eventSource 的事件，会新建一个 eventSource
        this.state.removeStateChangeListener(this.setCommentPermission);
        this.viewport.paper.off(EVENT_NAMESPACE);
    };
    /**
     * 保存 model 数据更新
     */
    CommentManager.prototype.saveChanges = function (commentId, isDelete) {
        var nodeId = this.getNodeIdByComment(commentId);
        var node = nodeId && this.model.getById(nodeId);
        if (node) {
            // 修改 model
            var comments = node.comments || [];
            if (isDelete) {
                // delete
                Object(lodash_es__WEBPACK_IMPORTED_MODULE_20__[/* default */ "a"])(comments, function (comment) { return comment.id === commentId; });
            }
            else if (!Object(lodash_es__WEBPACK_IMPORTED_MODULE_21__["default"])(comments, function (comment) { return comment.id === commentId; })) {
                // add
                comments.push({ id: commentId });
            }
            node.comments = comments;
            // 确保 text 是 json 数组
            var shouldChangeText = false;
            if (!this.state.getReadonly() && !Object(lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"])(node.text)) {
                shouldChangeText = true;
                node.text = htmlToText(node.text);
            }
            this.model.update(node);
            // 发出修改事件
            var eventData = { updated: [node] };
            var updated = shouldChangeText ? { comments: comments, text: node.text } : { comments: comments };
            this.eventSource.trigger('updated', eventData, updated);
        }
    };
    /**
     * 旧的节点文本改成 span 包裹
     */
    CommentManager.prototype.ensureNodeTextWrap = function ($node, nodeId) {
        var nodeData = this.model.getById(nodeId);
        if (!nodeData || Object(lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"])(nodeData.text)) {
            return;
        }
        var content = getContentByNode($node).get(0);
        if (!content) {
            return;
        }
        Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__["default"])(content.childNodes, function (node) {
            if (node.nodeType === Node.TEXT_NODE) {
                var span = document.createElement('span');
                span.textContent = node.textContent;
                content.replaceChild(span, node);
            }
        });
    };
    /**
     * 获取节点位置
     */
    CommentManager.prototype.getNodePosition = function (nodeId, relativeToPaper) {
        var $node = getNodeContainer(nodeId);
        return this.getDomPosition($node, relativeToPaper);
    };
    /**
     * 获取 dom 位置
     * @param $dom dom
     * @param relativeToPaper 是否相对 paper，否则相对 window
     */
    CommentManager.prototype.getDomPosition = function ($dom, relativeToPaper) {
        // 如果被折叠了，用父节点的位置
        var $collapsedParents = $dom.parents('.node.collapsed');
        var $positionNode = $collapsedParents.length > 0
            ? $collapsedParents.slice($collapsedParents.length - 1, $collapsedParents.length)
            : $dom;
        var nodeOffset = $positionNode.offset();
        if (relativeToPaper) {
            var paperOffset = this.viewport.paper.offset();
            return (nodeOffset && paperOffset) ? nodeOffset.top - paperOffset.top : 0;
        }
        else {
            return nodeOffset ? nodeOffset.top : 0;
        }
    };
    /**
     * 用评论 id 获取节点 id
     */
    CommentManager.prototype.getNodeIdByComment = function (commentId) {
        // 虚拟的评论 id（还没发出去）
        if (this.commentsInfoMap[commentId]) {
            return this.commentsInfoMap[commentId].nodeId;
        }
        // model 里的评论 id（已发出)
        var commentMap = this.model.getCommentMapping();
        return commentMap[commentId];
    };
    /**
     * 更换 object 的 key（评论发出后，虚拟评论 id 换成正式评论 id)
     */
    CommentManager.prototype.changeKey = function (obj, oldKey, newKey) {
        obj[newKey] = obj[oldKey];
        delete obj[oldKey];
    };
    __decorate([
        Bind(),
        TeaLogger$a('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'click_comment_btn',
                attr_op_status: 'effective',
                eventType: 'keydown',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], CommentManager.prototype, "handleCommentButtonClick", null);
    __decorate([
        Bind(),
        TeaLogger$a('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'comment_shortcut',
                attr_op_status: 'effective',
                eventType: 'keydown',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], CommentManager.prototype, "handleCommentHotKey", null);
    __decorate([
        Bind(),
        TeaLogger$a('toggle_attribute', function (_a) {
            var args = _a.args, context = _a.context;
            return {
                action: 'hover_comment_btn',
                attr_op_status: 'effective',
                eventType: 'mouseclick',
                mode: 'outline',
                view_level: getCurrentLevel(),
                select_type: getCurrentSelectType()
            };
        })
    ], CommentManager.prototype, "handleCommentButtonIn", null);
    return CommentManager;
}());

var Editor = /** @class */ (function (_super) {
    __extends(Editor, _super);
    /**
     * 思维笔记编辑器构造函数
     * @param props 编辑器参数
     */
    function Editor(props) {
        var _this = _super.call(this) || this;
        /**
         * 图片上传组件，用于管理上传的holder
         */
        _this.imageHolder = new ImageHolder();
        _this.getPath = function (id) {
            return _this.model.getPath(id);
        };
        _this.getNodeSet = function (path) {
            return _this.model.getNodeSet(path);
        };
        /**
         * 打点函数
         * @param event 事件名
         * @param params 事件参数
         */
        _this.collectEvent = function (event, params) {
            if (params === void 0) { params = {}; }
            _this.trigger(MindNoteEvent.TEA_EVENT, {
                event: event,
                params: params
            });
        };
        _this.props = props;
        // 设置打点器，模版实例不要设置
        // TODO: 不能用单例模式，要支持多个实例，先暂时这样
        if (!props.isTemplate) {
            TeaManager.setLogger(_this.collectEvent);
        }
        _this.viewport = new Viewport(props);
        _this.state = new State(props);
        _this.model = new Model(props.id);
        _this.selectHolder = new SelectHolder();
        _this.imageUploading = new ImageUploading();
        _this.lifecycle = new Lifecycle(_this.state);
        _this.eventSource = new EventSource(_this.model, _this.selectHolder, _this.state, _this.viewport);
        _this.commentManager = new CommentManager({
            model: _this.model,
            eventSource: _this.eventSource,
            viewport: _this.viewport,
            state: _this.state,
        });
        _this.nodePainter = new NodePainter({
            state: _this.state,
            imageUploading: _this.imageUploading,
            imageHolder: _this.imageHolder,
            commentManager: _this.commentManager,
        });
        _this.enginePainter = new EnginePainter({
            model: _this.model,
            nodePainter: _this.nodePainter,
            viewport: _this.viewport,
            state: _this.state,
            commentManager: _this.commentManager,
        });
        _this.engine = new Engine(_this.model, _this.imageUploading, _this.state, _this.enginePainter, _this.viewport, _this.eventSource);
        _this.selector = new Selector({
            model: _this.model,
            engine: _this.engine,
            state: _this.state,
            selectHolder: _this.selectHolder,
            viewport: _this.viewport,
            eventSource: _this.eventSource,
        });
        _this.imageEditor = new ImageEditor(props.id, _this.eventSource, _this.state);
        _this.textEditor = new TextEditor(_this.model, _this.imageEditor, _this.viewport, _this.eventSource, _this.state);
        _this.editorUI = new EditorUI({
            model: _this.model,
            engine: _this.engine,
            state: _this.state,
            selector: _this.selector,
            imageEditor: _this.imageEditor,
            textEditor: _this.textEditor,
            viewport: _this.viewport,
            eventSource: _this.eventSource,
        });
        _this.messageRunner = new MessageRunner({
            engine: _this.engine,
            editorUI: _this.editorUI,
            model: _this.model,
            selector: _this.selector,
            eventSource: _this.eventSource
        });
        _this.minder = new Minder(_this.state, _this.engine, _this.eventSource, _this.viewport);
        _this.demoPlayer = new DemoPlayer(_this.nodePainter, _this.model, _this.eventSource, _this.state);
        _this.editorUI.init();
        return _this;
    }
    Editor.prototype.open = function (props) {
        // 文档的变化事件需要在打开文档之前注册，因为打开文档也会触发
        this.eventSource.on(SourceEvent.WRAPPER_CHANGED, this.binder(MindNoteEvent.WRAPPER_CHANGED));
        this.editorUI.openDocument(props.data, props.title);
        this.commentManager.init();
        this.eventSource.on(SourceEvent.ADD_COMMENT, this.binder(MindNoteEvent.ADD_COMMENT));
        this.eventSource.on(SourceEvent.ACTIVE_COMMENT, this.binder(MindNoteEvent.ACTIVE_COMMENT));
        this.eventSource.on(SourceEvent.DOC_CHANGED, this.binder(MindNoteEvent.EDIT));
        this.eventSource.on(SourceEvent.MESSAGE_EXECUTED, this.binder(MindNoteEvent.CHANGE));
        this.eventSource.on(SourceEvent.DRILLED, this.binder(MindNoteEvent.DRILL));
        this.eventSource.on(SourceEvent.DRILL_REMOVED, this.binder(MindNoteEvent.DRILL_REMOVED));
        this.eventSource.on(SourceEvent.TITLE_CHANGED, this.binder(MindNoteEvent.TITLE_CHANGE));
        this.eventSource.on(SourceEvent.MIND_MAP_EXPORT, this.binder(MindNoteEvent.MIND_MAP_EXPORT));
        this.eventSource.on(SourceEvent.ADD_IMAGE, this.binder(MindNoteEvent.ADD_IMAGE));
        this.eventSource.on(SourceEvent.TIP_MESSAGE, this.binder(MindNoteEvent.TIP_MESSAGE));
        this.eventSource.on(SourceEvent.PREVIEW_IMAGE, this.binder(MindNoteEvent.PREVIEW_IMAGE));
        this.eventSource.on(SourceEvent.NODE_CLICK, this.binder(MindNoteEvent.NODE_CLICK));
        this.eventSource.on(SourceEvent.INPUT_FOCUS, this.binder(MindNoteEvent.INPUT_FOCUS));
        this.eventSource.on(SourceEvent.TOOLBAR_OPEN, this.binder(MindNoteEvent.TOOLBAR_OPEN));
        this.eventSource.on(SourceEvent.OPEN_LINK, this.binder(MindNoteEvent.OPEN_LINK));
        this.eventSource.on(SourceEvent.UPDATE_MENTION, this.binder(MindNoteEvent.UPDATE_MENTION));
        this.eventSource.on(SourceEvent.OPEN_USER_PROFILE, this.binder(MindNoteEvent.OPEN_USER_PROFILE));
        this.eventSource.on(SourceEvent.SHOW_MENTION_POPUP, this.binder(MindNoteEvent.SHOW_MENTION_POPUP));
        this.eventSource.on(SourceEvent.PASTE_URL, this.binder(MindNoteEvent.PASTE_URL));
        this.eventSource.on(SourceEvent.MIND_MAP_THEME_CHANGE, this.binder(MindNoteEvent.MIND_MAP_THEME_CHANGE));
        this.eventSource.on(SourceEvent.PRESENTATION_MODE_CHANGE, this.binder(MindNoteEvent.PRESENTATION_MODE_CHANGE));
        this.eventSource.on(SourceEvent.REFRESH_COMMENT, this.binder(MindNoteEvent.REFRESH_COMMENT));
        this.eventSource.on(SourceEvent.REFRESH_CURSOR, this.binder(MindNoteEvent.REFRESH_CURSOR));
        this.eventSource.on(SourceEvent.MIND_MAP_OPEN, this.binder(MindNoteEvent.MIND_MAP_OPEN));
        this.eventSource.on(SourceEvent.PRESENTATION_OPEN, this.binder(MindNoteEvent.PRESENTATION_OPEN));
        this.eventSource.on(SourceEvent.PRESENTATION_CLOSE, this.binder(MindNoteEvent.PRESENTATION_CLOSE));
        this.eventSource.on(SourceEvent.MIND_MAP_CLOSE, this.binder(MindNoteEvent.MIND_MAP_CLOSE));
        this.eventSource.on(SourceEvent.COPY_DENIED, this.binder(MindNoteEvent.COPY_DENIED));
        this.eventSource.on(SourceEvent.EXPORT_DENIED, this.binder(MindNoteEvent.EXPORT_DENIED));
        this.eventSource.on(SourceEvent.PASTE_IMAGE, this.binder(MindNoteEvent.PASTE_IMAGE));
        this.eventSource.on(SourceEvent.DRAG_NODE_START, this.binder(MindNoteEvent.DRAG_NODE_START));
        this.eventSource.on(SourceEvent.DRAG_NODE_END, this.binder(MindNoteEvent.DRAG_NODE_END));
    };
    Editor.prototype.destroy = function () {
        this.lifecycle.destroy();
        this.selector.destroy();
        this.minder.destroy();
        this.commentManager.destroy();
    };
    Editor.prototype.execute = function (actions, type) {
        this.messageRunner.executeMessage(actions, type);
        // redo/undo 后，不能再合并之前的 input 操作
        if (type === ExecuteType.REDO || type === ExecuteType.UNDO) {
            this.textEditor.resetInputAction();
            this.eventSource.trigger('changed', actions);
        }
        // 更新 mention box
        this.textEditor.updateAtSearch();
    };
    /**
     * 设置光标
     * @param cursorInfo 光标信息
     */
    Editor.prototype.setCursor = function (cursorInfo) {
        switch (cursorInfo.type) {
            // 单/多选节点
            case CursorType.NODE: {
                if (cursorInfo.selected.length) {
                    // 多选节点
                    this.selector.setSelectedIds(cursorInfo.selected);
                }
                else {
                    this.selector.cancel();
                }
                break;
            }
            // 节点文本
            case CursorType.TEXT: {
                var content = getContentById(cursorInfo.id);
                if (content.is(':visible')) {
                    setCursorPosition(content, cursorInfo.nextPos);
                }
                break;
            }
            // 节点描述
            case CursorType.NOTE: {
                var content = getNodeContainer(cursorInfo.id).children('.node-wrapper').children('.note');
                if (content.is(':visible')) {
                    setCursorPosition(content, cursorInfo.nextPos);
                }
                break;
            }
            // 翻页
            case CursorType.DRILL: {
                this.engine.drillNode(cursorInfo.to, true);
                break;
            }
            // 标题
            case CursorType.TITLE: {
                var title = getTitleContent();
                setCursorPosition(title, cursorInfo.nextPos);
            }
        }
    };
    Editor.prototype.drillNode = function (nodeId) {
        this.engine.drillNode(nodeId, false);
    };
    Editor.prototype.openMindMap = function (toId) {
        var rootId;
        if (toId === undefined) {
            var rootNode = this.model.getRootNode();
            rootId = rootNode ? rootNode.id : null;
        }
        else {
            rootId = toId;
        }
        this.minder.open(this.model.getDefine(), this.model.getName(), rootId);
    };
    Editor.prototype.openPresentation = function () {
        var rootNode = this.model.getRootNode();
        var rootId = rootNode ? rootNode.id : null;
        var title = this.model.getName() || this.props.titlePlaceholder;
        this.demoPlayer.play(this.viewport.demoScreen, title, rootId);
    };
    Editor.prototype.export = function () {
        throw new Error('Method not implemented.');
    };
    Editor.prototype.getEditable = function () {
        return !this.engine.getReadOnly();
    };
    Editor.prototype.setEditable = function (editable) {
        this.state.setReadonly(!editable);
        this.engine.setReadOnly(!editable);
    };
    Editor.prototype.setState = function (newState) {
        this.state.setEditorState(newState);
    };
    Editor.prototype.setTitle = function (title, sync) {
        if (sync === void 0) { sync = false; }
        var status = this.editorUI.getEditorOperate().getTitleStatus();
        /* 如果 title 不处于输入状态才更新 */
        if (status === 'normal') {
            this.engine.setTitle(title);
            /* 如果sync为true,调用editName同步标题，由于不是用户输入，所以要先调用setTitle改变本地标题 */
            if (sync) {
                var titleLen = title.length;
                this.engine.editName(title, { start: 0, end: 0 }, { start: titleLen, end: titleLen });
            }
        }
    };
    Editor.prototype.getTitle = function () {
        return this.model.getName();
    };
    Editor.prototype.addImage = function (nodeId, image) {
        var _this = this;
        if (!image.id) {
            image.id = newId(this.props.id);
        }
        var holder = this.imageHolder.create(image.id);
        this.engine.insertUploadingImage(nodeId, image);
        return {
            onProgress: function (value) {
                holder.update({ value: value });
            },
            onSuccess: function (src) {
                // 上传完成
                if (_this.imageUploading.imageExists(nodeId, image.id)) {
                    image.uri = src;
                    _this.engine.insertImage(nodeId, image);
                }
                _this.imageHolder.remove(image.id);
            },
            onError: function () {
                _this.engine.removeUploadingImage(nodeId, image.id);
                _this.imageHolder.remove(image.id);
            }
        };
    };
    /**
     * 删除图片
     * @param {string} nodeId
     * @param {string} imageId
     */
    Editor.prototype.removeImage = function (nodeId, imageId) {
        this.engine.removeImageById(nodeId, imageId);
    };
    /**
     * 执行一个编辑指令，如indent、加粗，一般通过移动端的toolbar触发
     */
    Editor.prototype.executeEditAction = function (action) {
        this.editorUI.executeEditAction(action);
    };
    Editor.prototype.getFocusNode = function () {
        return this.editorUI.getFocusNode();
    };
    Editor.prototype.getModel = function () {
        return this.model;
    };
    /**
     * 获取 comment manager
     */
    Editor.prototype.getCommentManager = function () {
        return this.commentManager;
    };
    /**
     * 创建一组节点，用于打开模板
     * @param {Node[]} nodes
     */
    Editor.prototype.createNodes = function (nodes) {
        this.engine.createNodes(nodes);
    };
    /**
     * 删除全部节点
     */
    Editor.prototype.deleteAllNodes = function () {
        var nodes = this.model.getDefine().nodes;
        var nodeIds = Object(lodash_es__WEBPACK_IMPORTED_MODULE_5__["default"])(nodes, function (item) { return item.id; });
        this.engine.deleteNodeDirectly(nodeIds);
    };
    /**
     * 内部事件和外部事件的连接器
     * @param type 外部事件
     */
    Editor.prototype.binder = function (type) {
        var _this = this;
        return function (e) {
            _this.trigger(type, e);
        };
    };
    return Editor;
}(Observable));

/* harmony default export */ __webpack_exports__["default"] = (Editor);

//# sourceMappingURL=index.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(25)))

/***/ }),

/***/ 1665:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.findDocPositionsByAttrNameAndBlockToken = exports.findDocPositions = exports.charToPosition = exports.charsToSelection = exports.joinPosition = exports.joinable = undefined;

var _toConsumableArray2 = __webpack_require__(58);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _slicedToArray2 = __webpack_require__(111);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _getExistZoneIdsInEditor = __webpack_require__(1699);

var _getExistZoneIdsInEditor2 = _interopRequireDefault(_getExistZoneIdsInEditor);

var _bytedXBlock = __webpack_require__(740);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var joinable = exports.joinable = function joinable(prevPosition, nextPosition) {
    var prevEndChar = prevPosition.chars[1];
    var nextStartChar = nextPosition.chars[0];
    if (prevEndChar === nextStartChar && prevPosition.selZone === nextPosition.selZone) {
        return true;
    }
    return false;
};
var joinPosition = exports.joinPosition = function joinPosition(prevPosition, nextPosition) {
    return Object.assign({}, prevPosition, {
        selEnd: nextPosition.selEnd,
        chars: [prevPosition.chars[0], nextPosition.chars[1]]
    });
};
var charsToSelection = exports.charsToSelection = function charsToSelection(editor, selZone, chars) {
    var rep = editor.getRep(selZone);
    if (!rep) {
        return;
    }

    var _chars = (0, _slicedToArray3.default)(chars, 2),
        startChar = _chars[0],
        endChar = _chars[1];

    var alines = rep.alines;
    var alineLen = alines.length;
    var selStart = null;
    var selEnd = null;
    var stopFinding = false;
    var curLineChar = 0;
    for (var index = 0; index < alineLen; index++) {
        var opIter = editor.changesetHelper.opIterator(alines[index]);
        var curOpChar = curLineChar;
        while (opIter.hasNext()) {
            var op = opIter.next();
            var nextOpChar = curOpChar + op.chars;
            if (curOpChar <= startChar && nextOpChar > startChar) {
                selStart = [index, startChar - curLineChar];
            }
            if (curOpChar <= endChar && nextOpChar > endChar) {
                selEnd = [index, endChar - curLineChar];
                stopFinding = true;
                break;
            }
            curOpChar = nextOpChar;
        }
        if (stopFinding) {
            break;
        }
        curLineChar = curOpChar;
    }
    return { selStart: selStart, selEnd: selEnd, selZone: selZone };
};
var charToPosition = exports.charToPosition = function charToPosition(editor, selZone, chars) {
    var _chars2 = (0, _slicedToArray3.default)(chars, 2),
        start = _chars2[0],
        end = _chars2[1];

    var selection = charsToSelection(editor, selZone, chars);
    if (!selection || !selection.selStart || !selection.selEnd) {
        throw new Error('not found position: ' + selZone + ' ' + chars);
    }
    var selStart = selection.selStart,
        selEnd = selection.selEnd;

    return {
        selStart: selStart,
        selEnd: selEnd,
        selZone: selZone,
        chars: [start, end]
    };
};
var findDocPositions = exports.findDocPositions = function findDocPositions(editor, attributeName, attributeValue) {
    var zoneIds = (0, _getExistZoneIdsInEditor2.default)(editor);
    var docPositions = [];
    var reps = editor.getReps();
    var apool = editor.getRepManager().apool;
    var numToAttrib = apool.numToAttrib;
    var targetNum = void 0;
    Object.keys(numToAttrib).find(function (num) {
        var _numToAttrib$num = (0, _slicedToArray3.default)(numToAttrib[num], 2),
            name = _numToAttrib$num[0],
            value = _numToAttrib$num[1];

        if (name === attributeName && value === attributeValue) {
            targetNum = Number(num);
            return true;
        }
        return false;
    });
    ['0'].concat((0, _toConsumableArray3.default)(zoneIds)).forEach(function (zoneId) {
        var rep = reps[zoneId];
        if (!rep) return;
        var ops = rep.alines.join('');
        var opIter = editor.changesetHelper.opIterator(ops);
        var curTextChar = 0;

        var _loop = function _loop() {
            var op = opIter.next();
            var nextTextChar = curTextChar + op.chars;
            editor.changesetHelper.eachAttribNumber(op.attribs, function (num) {
                if (num === targetNum) {
                    var lastIndex = docPositions.length - 1;
                    var lastPosition = docPositions[lastIndex];
                    var docPosition = charToPosition(editor, zoneId, [curTextChar, nextTextChar]);
                    if (lastPosition && joinable(lastPosition, docPosition)) {
                        docPositions[lastIndex] = joinPosition(lastPosition, docPosition);
                        return;
                    }
                    docPositions.push(docPosition);
                }
            });
            curTextChar = nextTextChar;
        };

        while (opIter.hasNext()) {
            _loop();
        }
    });
    return docPositions;
};
var findDocPositionsByAttrNameAndBlockToken = exports.findDocPositionsByAttrNameAndBlockToken = function findDocPositionsByAttrNameAndBlockToken(editor, attributeName, blockToken) {
    var zoneIds = (0, _getExistZoneIdsInEditor2.default)(editor);
    var docPositions = [];
    var reps = editor.getReps();
    var apool = editor.getRepManager().apool;
    var numToAttrib = apool.numToAttrib;
    var targetNum = void 0;
    Object.keys(numToAttrib).find(function (num) {
        var _numToAttrib$num2 = (0, _slicedToArray3.default)(numToAttrib[num], 2),
            name = _numToAttrib$num2[0],
            value = _numToAttrib$num2[1];

        if (name === attributeName) {
            var _blockToken = (0, _bytedXBlock.extractBlockTokenFromAttributeStr)(value);
            if (blockToken === _blockToken) {
                targetNum = Number(num);
                return true;
            }
        }
        return false;
    });
    ['0'].concat((0, _toConsumableArray3.default)(zoneIds)).forEach(function (zoneId) {
        var rep = reps[zoneId];
        if (!rep) return;
        var ops = rep.alines.join('');
        var opIter = editor.changesetHelper.opIterator(ops);
        var curTextChar = 0;

        var _loop2 = function _loop2() {
            var op = opIter.next();
            var nextTextChar = curTextChar + op.chars;
            editor.changesetHelper.eachAttribNumber(op.attribs, function (num) {
                if (num === targetNum) {
                    var lastIndex = docPositions.length - 1;
                    var lastPosition = docPositions[lastIndex];
                    var docPosition = charToPosition(editor, zoneId, [curTextChar, nextTextChar]);
                    if (lastPosition && joinable(lastPosition, docPosition)) {
                        docPositions[lastIndex] = joinPosition(lastPosition, docPosition);
                        return;
                    }
                    docPositions.push(docPosition);
                }
            });
            curTextChar = nextTextChar;
        };

        while (opIter.hasNext()) {
            _loop2();
        }
    });
    return docPositions;
};

/***/ }),

/***/ 1667:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _map2 = __webpack_require__(229);

var _map3 = _interopRequireDefault(_map2);

exports.encode = encode;
exports.decode = decode;
exports.decodeCommentOfOneCard = decodeCommentOfOneCard;

var _comment_mention = __webpack_require__(1623);

var _comment_mention2 = _interopRequireDefault(_comment_mention);

var _htmlParse = __webpack_require__(1770);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 评论数据编码：
 * 通过客户端发送评论数据前，对评论数据进行编码处理
 * @param content 评论数据
 */
function encode(content) {
    // @的处理
    var submitContent = _comment_mention2.default.encodeMentionContent(content);
    // 字符转义，因为客户端接受数据的时候会把 &gt;(>) 中的 & 当作参数分隔符，导致评论数据缺失，
    // 所以使用encodeURIComponent编码(%26gt%3B)后再交给客户端发送，后端接收到数据会自动还原成原字符。
    // return encodeURIComponent(submitContent);
    return submitContent;
}
/**
 * 评论数据解码：
 * @param content 评论内容
 */
function decode(content) {
    // @的处理
    var sanitized = _comment_mention2.default.contentSanitize(content);
    // 特殊字符反转义
    return (0, _htmlParse.htmlDecode)(sanitized);
}
/**
 * 单个评论卡片数据解码
 * 设置客户端评论卡片数据前，对评论数据进行解码处理
 * @param list 单个评论卡片的数据
 */
function decodeCommentOfOneCard(list) {
    return (0, _map3.default)(list, function (comment) {
        return Object.assign({}, comment, {
            content: decode(comment.content)
        });
    });
}

/***/ }),

/***/ 1668:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isReactionEnabled = undefined;

var _get2 = __webpack_require__(14);

var _get3 = _interopRequireDefault(_get2);

var _sdkCompatibleHelper = __webpack_require__(45);

var _domainHelper = __webpack_require__(557);

var _envHelper = __webpack_require__(147);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isReactionEnabled = exports.isReactionEnabled = !!(0, _get3.default)(window, 'User.appConfig.reactionEnabled') && _sdkCompatibleHelper.isSupportReaction || _envHelper.isDev || (0, _domainHelper.isStagingEnv)();

/***/ }),

/***/ 1680:
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1587).Buffer
var Transform = __webpack_require__(1922).Transform
var StringDecoder = __webpack_require__(1767).StringDecoder
var inherits = __webpack_require__(1585)

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase


/***/ }),

/***/ 1684:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _findIndex2 = __webpack_require__(565);

var _findIndex3 = _interopRequireDefault(_findIndex2);

exports.getAttributesArray = getAttributesArray;
exports.getAttributesMap = getAttributesMap;
exports.attributesMapToArray = attributesMapToArray;
exports.attributesArrayToMap = attributesArrayToMap;
exports.getAttributeTextList = getAttributeTextList;
exports.getTextFormAttrItem = getTextFormAttrItem;
exports.getAttributeListFromAlines = getAttributeListFromAlines;

var _bytedBlockInstance = __webpack_require__(1769);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LINE_MARK_ATTIBUTE = 'lmkr';
function getAttributesArray(attribsNum, apool) {
    var numToAttrib = apool.numToAttrib;

    return attribsNum.map(function (attrKey) {
        var num = parseInt(attrKey, 36);
        return numToAttrib[num] || [];
    });
}
function getAttributesMap(attribsNum, apool) {
    var numToAttrib = apool.numToAttrib;

    return attribsNum.reduce(function (map, attrKey) {
        var num = parseInt(attrKey, 36);
        var attrs = numToAttrib[num];
        if (attrs) {
            map[attrs[0]] = attrs[1];
        }
        return map;
    }, {});
}
function attributesMapToArray(attributesMap) {
    return Object.keys(attributesMap).map(function (key) {
        return [key, attributesMap[key]];
    });
}
function attributesArrayToMap(attributes) {
    return attributes.reduce(function (map, attr) {
        map[attr[0]] = attr[1];
        return map;
    }, {});
}
function getAttributeTextList(_ref) {
    var changesetHelper = _ref.changesetHelper,
        rep = _ref.rep,
        selStart = _ref.selStart,
        selEnd = _ref.selEnd;
    var alines = rep.alines,
        lines = rep.lines,
        apool = rep.apool;

    if (!selStart) {
        selStart = [0, 0];
    }
    if (!selEnd) {
        selEnd = [alines.length - 1, lines.atIndex(alines.length - 1).text.length];
    }
    var startIndex = selStart[0];
    var endIndex = selEnd[0];
    var list = [];
    // 已选择区域的每一行分别以op的形式解析
    for (var i = startIndex; i <= endIndex; i++) {
        var iterator = changesetHelper.opIterator(alines[i]);
        var lineEntry = lines.atIndex(i);
        var isFirstLine = i === selStart[0];
        var isLastLine = i === selEnd[0];
        // 对每个 op
        var start = isFirstLine ? selStart[1] : 0;
        var end = isLastLine ? selEnd[1] : lineEntry.text.length;
        var nextStart = 0; // 行 op 当前位置
        while (iterator.hasNext()) {
            var op = iterator.next();
            var chars = op.chars,
                attribs = op.attribs;

            nextStart += chars;
            if (nextStart <= start) continue;
            var opSelStart = [i, start];
            var opSelEnd = void 0;
            if (nextStart > end) {
                opSelEnd = [i, end];
            } else {
                opSelEnd = [i, nextStart];
            }
            // 获取选择区域的文本
            var text = lineEntry.text.slice(start, opSelEnd[1]);
            start = nextStart;
            var attribsNum = attribs.split('*').slice(1);
            var attributes = getAttributesArray(attribsNum, apool);
            var attributesMap = getAttributesMap(attribsNum, apool);
            // 非 lmkr 才算有效字符
            if (!attributesMap[LINE_MARK_ATTIBUTE]) {
                list.push({
                    selStart: opSelStart,
                    selEnd: opSelEnd,
                    text: text,
                    attributes: attributes,
                    attribsNum: attribsNum
                });
            }
            if (start >= end) {
                break;
            }
        }
        // 到了行尾，加入 换行符
        if (end === lineEntry.text.length) {
            list.push({
                selStart: [i, end],
                selEnd: [i, end],
                text: '\n',
                attributes: [],
                attribsNum: []
            });
        }
    }
    return list;
}
function getTextFormAttrItem(editor, attrItem) {
    var text = '';
    // 只针对at人名,reminder做处理
    var getAtUserText = function getAtUserText(_ref2) {
        var props = _ref2.props;

        var name = (0, _bytedBlockInstance.getUserShowNameForLang)(props.data.user);
        return '@' + name;
    };
    var getReminderText = function getReminderText(_ref3) {
        var props = _ref3.props;

        return (0, _bytedBlockInstance.getNormalDateStr)(props.data.expireTime, !props.data.isWholeDay);
    };
    var blockType = {
        REMINDER_BLOCK: getReminderText,
        AT_USER_BLOCK: getAtUserText
    };
    var attrIndex = (0, _findIndex3.default)(attrItem.attributes, function (attr) {
        return attr[0] === 'dataMetaBlockProps';
    });
    if (attrIndex > -1) {
        try {
            var attribute = JSON.parse('' + attrItem.attributes[attrIndex][1]);
            var getText = blockType[attribute.blockType];
            text = getText ? getText(attribute) : '';
        } catch (e) {
            // 获取block文本可能出错
        }
    } else {
        text = attrItem.text;
    }
    return text;
}
// 解析全部文本属性，包括未渲染
function getAttributeListFromAlines(_ref4) {
    var changesetHelper = _ref4.changesetHelper,
        rep = _ref4.rep,
        selStart = _ref4.selStart,
        selEnd = _ref4.selEnd;
    var alines = rep.alines,
        lines = rep.lines,
        apool = rep.apool,
        alltext = rep.alltext;

    var alltextArr = alltext.split('\n');
    if (!selStart) {
        selStart = [0, 0];
    }
    if (!selEnd) {
        selEnd = [alines.length - 1, lines.atIndex(alines.length - 1).text.length];
    }
    var startIndex = selStart[0];
    var endIndex = selEnd[0];
    var list = [];
    // 已选择区域的每一行分别以op的形式解析
    for (var i = startIndex; i <= endIndex; i++) {
        var iterator = changesetHelper.opIterator(alines[i]);
        // const lineEntry = lines.atIndex(i);
        var isFirstLine = i === selStart[0];
        var isLastLine = i === selEnd[0];
        // 对每个 op
        var start = isFirstLine ? selStart[1] : 0;
        var end = isLastLine ? selEnd[1] : alltextArr[i].length;
        var nextStart = 0; // 行 op 当前位置
        while (iterator.hasNext()) {
            var op = iterator.next();
            var chars = op.chars,
                attribs = op.attribs;

            nextStart += chars;
            if (nextStart <= start) continue;
            var opSelStart = [i, start];
            var opSelEnd = void 0;
            if (nextStart > end) {
                opSelEnd = [i, end];
            } else {
                opSelEnd = [i, nextStart];
            }
            // 获取选择区域的文本
            var text = alltextArr[i].slice(start, opSelEnd[1]);
            start = nextStart;
            var attribsNum = attribs.split('*').slice(1);
            var attributes = getAttributesArray(attribsNum, apool);
            var attributesMap = getAttributesMap(attribsNum, apool);
            // 非 lmkr 才算有效字符
            if (!attributesMap[LINE_MARK_ATTIBUTE]) {
                list.push({
                    selStart: opSelStart,
                    selEnd: opSelEnd,
                    text: text,
                    attributes: attributes,
                    attribsNum: attribsNum
                });
            }
            if (start >= end) {
                break;
            }
        }
        // 到了行尾，加入 换行符
        if (end === alltextArr[i].length) {
            list.push({
                selStart: [i, end],
                selEnd: [i, end],
                text: '\n',
                attributes: [],
                attribsNum: []
            });
        }
    }
    return list;
}

/***/ }),

/***/ 1685:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createCommentService = createCommentService;
exports.destroyCommentService = destroyCommentService;
exports.setupCommentServices = setupCommentServices;

var _bytedCommentService = __webpack_require__(1846);

var _bytedCommentSdk = __webpack_require__(1654);

var _broadcastHelper = __webpack_require__(755);

var _api = __webpack_require__(150);

var _bytedXPluginComment = __webpack_require__(1698);

var _teaLogger = __webpack_require__(450);

var _teaLogger2 = _interopRequireDefault(_teaLogger);

var _tea = __webpack_require__(42);

var _tea2 = _interopRequireDefault(_tea);

var _docPositionUtils = __webpack_require__(1665);

var _$store = __webpack_require__(64);

var _$store2 = _interopRequireDefault(_$store);

var _user = __webpack_require__(72);

var _share = __webpack_require__(342);

var _attributesUtils = __webpack_require__(1684);

var _io = __webpack_require__(345);

var _common = __webpack_require__(19);

var _commentSyncClient = __webpack_require__(1729);

var _serviceLogger = __webpack_require__(1730);

var _serviceLogger2 = _interopRequireDefault(_serviceLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var commentServiceManager = new _bytedCommentService.CommentServiceManager();
var commentRecordManager = new _bytedCommentSdk.CommentRecordManager();
var syncClientManager = new _commentSyncClient.SyncClientManager();
var BASE_COMMENT_REQUEST_CONFIG = {
    serverFirst: true,
    noStore: true,
    retryCount: 0
};
function createCommentService(rootType, rootToken) {
    var commentRequest = function commentRequest(data) {
        var url = data.url;

        var requestConfig = BASE_COMMENT_REQUEST_CONFIG;
        if (url === _bytedCommentSdk.POST_GET_COMMENT_LIST || url === _bytedCommentSdk.POST_GET_ALL_COMMENT_LIST) {
            requestConfig = Object.assign({}, BASE_COMMENT_REQUEST_CONFIG, {
                noStore: false,
                retryCount: 3
            });
        }
        return (0, _api.fetchMobileDoc)(Object.assign({}, data, requestConfig));
    };
    var engineType = _common.NUM_SUITE_TYPE_TO_SUITE_ENGINE_TYPE[rootType];
    var io = (0, _io.IOCreator)().getInstance({});
    var syncClient = syncClientManager.getOrCreateCommentSyncClient(engineType, rootToken, io);
    var broadcast = _broadcastHelper.broadcastManager.getOrCreate({
        suiteType: rootType,
        suiteToken: rootToken
    });
    var service = commentServiceManager.getOrCreateCommentService({
        rootType: rootType,
        rootToken: rootToken,
        commentRecordManager: commentRecordManager,
        syncClient: syncClient,
        broadcast: broadcast,
        getUserId: function getUserId() {
            var user = (0, _user.selectCurrentUser)(_$store2.default.getState());
            return user.get('id');
        },
        getMemberId: function getMemberId() {
            return io.getMemberId();
        },
        getIsOwner: function getIsOwner() {
            return (0, _share.selectIsOwner)(_$store2.default.getState());
        }
    });
    service.setupRequest(commentRequest);
    service.setupLogger(_serviceLogger2.default);
    return service;
}
function destroyCommentService(type, token) {
    commentServiceManager.destroyCommentService(token);
    commentRecordManager.destroyCommentRecord(type, token);
    var engineType = _common.NUM_SUITE_TYPE_TO_SUITE_ENGINE_TYPE[type];
    syncClientManager.destroyCommentSyncClient(engineType, token);
}
var hasSetup = false;
function setupCommentServices() {
    if (hasSetup) return;
    hasSetup = true;
    (0, _bytedXPluginComment.setupCommentServices)({
        LogService: {
            teaLogger: _teaLogger2.default,
            collectEvent: _tea2.default,
            collectSuiteEvent: _tea.collectSuiteEvent,
            collectCommentLog: _tea.collectCommentLog
        },
        Utils: {
            findDocPositions: _docPositionUtils.findDocPositions,
            getAttributeTextList: _attributesUtils.getAttributeTextList
        }
    });
}

/***/ }),

/***/ 1696:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__(1814);
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = __webpack_require__(1748);
util.inherits = __webpack_require__(1585);
/*</replacement>*/

var Readable = __webpack_require__(2198);
var Writable = __webpack_require__(1924);

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),

/***/ 1699:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _bytedXEditor = __webpack_require__(299);

var getRowAndColIdFromAttributeValue = _bytedXEditor.tableIds.getRowAndColIdFromAttributeValue,
    getCellIdFromRowAndCol = _bytedXEditor.tableIds.getCellIdFromRowAndCol;

var getExistZoneIdsInEditor = function getExistZoneIdsInEditor(editor) {
    var reps = editor.getReps();
    var apool = editor.getRepManager().apool;
    var vectorReps = editor.vectorReps;
    var zoneIds = [];
    if (!reps[0] || !reps[0].alines) {
        return zoneIds;
    }
    var mainZoneOps = reps[0].alines.join('');
    var opIter = editor.changesetHelper.opIterator(mainZoneOps);
    while (opIter.hasNext()) {
        var op = opIter.next();
        editor.changesetHelper.eachAttribNumber(op.attribs, function (num) {
            var key = apool.getAttribKey(num);
            var value = apool.getAttribValue(num);
            if (key === 'aceTable') {
                var result = getRowAndColIdFromAttributeValue(value);
                if (!result) return;
                var rowId = result.rowId,
                    colId = result.colId;

                var rowInfo = vectorReps[rowId];
                var colInfo = vectorReps[colId];
                if (rowInfo && colInfo) {
                    rowInfo.vectorIds.forEach(function (rowVector) {
                        colInfo.vectorIds.forEach(function (colVector) {
                            var cellId = getCellIdFromRowAndCol(rowVector, colVector);
                            zoneIds.push(cellId);
                        });
                    });
                }
            }
        });
    }
    return zoneIds;
};
exports.default = getExistZoneIdsInEditor;

/***/ }),

/***/ 1719:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = __webpack_require__(1587).Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > 65536) throw new Error('requested too many random bytes')
  // in case browserify  isn't using the Uint8Array version
  var rawBytes = new global.Uint8Array(size)

  // This will not work in older browsers.
  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
  if (size > 0) {  // getRandomValues fails on IE if size == 0
    crypto.getRandomValues(rawBytes)
  }

  // XXX: phantomjs doesn't like a buffer being passed here
  var bytes = Buffer.from(rawBytes.buffer)

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(71), __webpack_require__(221)))

/***/ }),

/***/ 1720:
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1587).Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash


/***/ }),

/***/ 1724:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var CommentLogAction = exports.CommentLogAction = undefined;
(function (CommentLogAction) {
    // 通用评论
    CommentLogAction["INPUT_COMMENT"] = "input_comment";
    CommentLogAction["SUBMIT_COMMENT"] = "submit_comment";
    CommentLogAction["CANCEL_COMMENT"] = "cancel_comment";
    CommentLogAction["RE_EDIT_COMMENT"] = "re_edit_comment";
    CommentLogAction["SUBMIT_RE_EDIT"] = "submit_re_edit";
    CommentLogAction["DELETE_COMMENT"] = "delete_comment";
    CommentLogAction["UP_BTN"] = "up_btn";
    CommentLogAction["DOWN_BTN"] = "down_btn";
    CommentLogAction["CLICK_COMMENT_TARGET"] = "click_comment_target";
    CommentLogAction["FINISH_COMMENT"] = "finish_comment";
    CommentLogAction["VIEW_HISTORY"] = "view_history";
    CommentLogAction["REOPEN_HISTORY"] = "reopen_history";
    // 语音评论
    CommentLogAction["CREATE_AUDIO_COMMENT"] = "create_audiocomment";
    CommentLogAction["RE_INPUT_AUDIO"] = "re_input_audio";
    CommentLogAction["CANCEL_AUDIO_COMMENT"] = "cancel_audiocomment";
    CommentLogAction["FINISH_INPUT_AUDIO"] = "finish_input_audio";
    CommentLogAction["PLAY_AUDIO_COMMENT"] = "play_audiocomment";
    // slide 特有
    CommentLogAction["ENTER_PANEL"] = "enter_panel";
    CommentLogAction["CLOSE_PANEL"] = "close_panel";
    // reaction
    CommentLogAction["SHOW_REACTION_PANEL"] = "show_reaction_panel";
    CommentLogAction["SELECT_REACTION"] = "select_reaction";
    CommentLogAction["CANCEL_REACTION"] = "cancel_reaction";
    CommentLogAction["SHOW_REACTION_PAGE_FULL"] = "show_reaction_page_full";
})(CommentLogAction || (exports.CommentLogAction = CommentLogAction = {}));
var CommentType = exports.CommentType = undefined;
(function (CommentType) {
    CommentType["GLOBAL_COMMENT"] = "full_comment";
    CommentType["PART_COMMENT"] = "part_comment";
})(CommentType || (exports.CommentType = CommentType = {}));
var CommentAction = exports.CommentAction = undefined;
(function (CommentAction) {
    // 激活评论, 新建/点击气泡
    CommentAction["ACTIVE_COMMENT"] = "ACTIVE_COMMENT";
    // 点击已有的评论的内容，会直接上报CLICK_COMMENT_TARGET事件
    CommentAction["CLICK_COMMENT_TARGET"] = "CLICK_COMMENT_TARGET";
})(CommentAction || (exports.CommentAction = CommentAction = {}));
var BOOLEAN_STRING = exports.BOOLEAN_STRING = undefined;
(function (BOOLEAN_STRING) {
    BOOLEAN_STRING["TRUE"] = "true";
    BOOLEAN_STRING["FALSE"] = "false";
})(BOOLEAN_STRING || (exports.BOOLEAN_STRING = BOOLEAN_STRING = {}));

/***/ }),

/***/ 1725:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _tea = __webpack_require__(42);

var _store = __webpack_require__(64);

var _store2 = _interopRequireDefault(_store);

var _share = __webpack_require__(342);

var _encryption = __webpack_require__(164);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fieldsNeedToEncrypted = ['comment_id', 'reply_id'];

var CommentTeaLogger = function () {
    function CommentTeaLogger(props) {
        (0, _classCallCheck3.default)(this, CommentTeaLogger);

        this.logContexts = new Map();
        this.commentType = props.type;
    }

    (0, _createClass3.default)(CommentTeaLogger, [{
        key: 'encryptParams',
        value: function encryptParams() {
            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            fieldsNeedToEncrypted.forEach(function (key) {
                if (key in params) {
                    params[key] = (0, _encryption.encryptTea)(params[key]);
                }
            });
        }
        // 设置业务特殊的打点参数

    }, {
        key: 'setLogContext',
        value: function setLogContext(action, params) {
            this.logContexts.set(action, params);
        }
        // 上报指定事件

    }, {
        key: 'collectCommentEvent',
        value: function collectCommentEvent(action) {
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var context = this.logContexts.get(action) || {};
            this.encryptParams(params);
            (0, _tea.collectSuiteEvent)('client_comment', Object.assign({
                action: action,
                file_is_have_edit: (0, _share.ifhaveEditPermission)(_store2.default.getState()),
                comment_type: this.commentType
            }, context, params));
        }
    }]);
    return CommentTeaLogger;
}();

exports.default = CommentTeaLogger;

/***/ }),

/***/ 1726:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MobileReactionSDK = undefined;

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(10);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(349);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(11);

var _inherits3 = _interopRequireDefault(_inherits2);

exports.destoryReactionSDK = destoryReactionSDK;
exports.isReactionChange = isReactionChange;

var _bytedReactionSdk = __webpack_require__(1839);

var _jsBridgeHelper = __webpack_require__(1606);

var _constants = __webpack_require__(1612);

var _browserHelper = __webpack_require__(27);

var _browserHelper2 = _interopRequireDefault(_browserHelper);

var _api = __webpack_require__(150);

var _compatible = __webpack_require__(1668);

var _teaLogger = __webpack_require__(1611);

var _tea = __webpack_require__(42);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var register = _jsBridgeHelper.JsBridgeManager.register,
    unregister = _jsBridgeHelper.JsBridgeManager.unregister;
// 初始化全局 ReactionSDK

// import { MessageBox } from '@bdeefe/byted-message-box';

var BASE_COMMENT_REQUEST_CONFIG = {
    serverFirst: true,
    noStore: true,
    retryCount: 0
};
var reactionRequest = function reactionRequest(data) {
    var url = data.url;

    var requestConfig = BASE_COMMENT_REQUEST_CONFIG;
    if (url === _bytedReactionSdk.GET_REACTION_KEYS || url === _bytedReactionSdk.GET_REACTION_DETAIL) {
        requestConfig = Object.assign({}, BASE_COMMENT_REQUEST_CONFIG, {
            noStore: false,
            retryCount: 3
        });
    }
    return (0, _api.fetchMobileDoc)(Object.assign({}, data, requestConfig));
};
var messageBox = {
    register: function register() {
        console.log('===register');
    },
    unregister: function unregister() {
        console.log('===unregister');
    }
};
// const io = IOCreator().getInstance({});
// const messageBox = new MessageBox(window.User.id, io.getMemberId(), io);
function handleRecentReactionKeysChange(newReactionKeys) {
    window.lark.biz.reaction.updateRecent({
        recentReactionKeys: newReactionKeys
    });
}
// ReactionSDK初始化
if (_compatible.isReactionEnabled) {
    _bytedReactionSdk.ReactionSDK.setMessageBox(messageBox, window.User.id);
    _bytedReactionSdk.ReactionSDK.setRequestMethod(reactionRequest);
    if (_browserHelper2.default.isIOS) {
        _bytedReactionSdk.ReactionSDK.fetchReactionKeys();
        _bytedReactionSdk.ReactionSDK.onRecentReactionKeysChange(handleRecentReactionKeysChange);
    }
}

var MobileReactionSDK = exports.MobileReactionSDK = function (_ReactionSDK) {
    (0, _inherits3.default)(MobileReactionSDK, _ReactionSDK);

    function MobileReactionSDK(props) {
        (0, _classCallCheck3.default)(this, MobileReactionSDK);

        var _this = (0, _possibleConstructorReturn3.default)(this, (MobileReactionSDK.__proto__ || Object.getPrototypeOf(MobileReactionSDK)).call(this, props));

        _this.handleAddReaction = function (_ref) {
            var referType = _ref.referType,
                referKey = _ref.referKey,
                reactionKey = _ref.reactionKey,
                status = _ref.status;

            console.debug('handleAddReaction', referType, referKey, reactionKey, status);
            // 根据 referType 判断是否由该 service 处理
            // 原因是一篇文档可能存在多个模块使用 reaction 服务，即有多个 jsBridge handler
            if (referType !== _this.curBroadcastType) return;
            if (referType === _constants.COMMENT_REACTION_MODULE) {
                (0, _tea.collectSuiteEvent)('client_comment', Object.assign({
                    action: status ? _teaLogger.CommentLogAction.SELECT_REACTION : _teaLogger.CommentLogAction.CANCEL_REACTION,
                    emoji_type: reactionKey,
                    comment_type: _teaLogger.CommentType.PART_COMMENT
                }, _this.teaContext));
            }
            if (status) {
                _this.addReaction(referType, referKey, reactionKey);
            } else {
                _this.removeReaction(referType, referKey, reactionKey);
            }
        };
        _this.handleGetDetail = function (_ref2) {
            var referType = _ref2.referType,
                referKey = _ref2.referKey;

            console.debug('handleGetDetail', referType, referKey);
            // 根据 referType 判断是否由该 service 处理
            // 原因是一篇文档可能存在多个模块使用 reaction 服务，即有多个 jsBridge handler
            if (referType !== _this.curBroadcastType) return;
            if (referType === _constants.COMMENT_REACTION_MODULE) {
                // 查看详情时还需要加载全量数据的场景
                (0, _tea.collectSuiteEvent)('client_comment', Object.assign({
                    action: _teaLogger.CommentLogAction.SHOW_REACTION_PAGE_FULL,
                    comment_type: _teaLogger.CommentType.PART_COMMENT
                }, _this.teaContext));
            }
            _this.fetchReactionDetail(referType, referKey).catch(function (err) {
                console.info('Reaction: fetch detail err ' + JSON.stringify(err));
                _this.handleReactionDataChange(referType, _this.getReactionData(_this.activeReferType).reactions);
            });
        };
        _this.handleSetDetailPanelStatus = function (_ref3) {
            var status = _ref3.status,
                referType = _ref3.referType,
                referKey = _ref3.referKey;

            console.log('Reaction: handleSetDetailPanelStatus', status, referType, referKey);
            // 根据 referType 判断是否由该 service 处理
            // 原因是一篇文档可能存在多个模块使用 reaction 服务，即有多个 jsBridge handler
            if (referType !== _this.curBroadcastType) return;
            _this.activeReferType = status && referType || '';
            _this.activeReferKey = status && referKey || '';
        };
        _this.handleReactionDataChange = function (referType, reactions) {
            if (_this.activeReferType && _this.activeReferKey && referType === _this.activeReferType && reactions.get(_this.activeReferKey)) {
                window.lark.biz.reaction.updateDetail({
                    referType: referType,
                    referKey: _this.activeReferKey,
                    data: reactions.get(_this.activeReferKey)
                });
                // 不做协同，获取详情后仅更新一次
                _this.activeReferType = '';
                _this.activeReferKey = '';
            }
        };
        _this.curBroadcastType = props.broadcastType;
        register('lark.biz.reaction.addReaction', _this.handleAddReaction);
        register('lark.biz.reaction.getDetail', _this.handleGetDetail);
        register('lark.biz.reaction.setDetailPanelStatus', _this.handleSetDetailPanelStatus);
        return _this;
    }

    (0, _createClass3.default)(MobileReactionSDK, [{
        key: 'setTeaContext',
        value: function setTeaContext(context) {
            this.teaContext = context;
        }
    }, {
        key: 'updateOrder',
        value: function updateOrder(reactionKey) {
            console.debug('updateOrder', reactionKey);
            window.lark.biz.reaction.updateOrder({
                reactionKey: reactionKey
            });
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            (0, _get3.default)(MobileReactionSDK.prototype.__proto__ || Object.getPrototypeOf(MobileReactionSDK.prototype), 'destroy', this).call(this);
            unregister('lark.biz.reaction.addReaction', this.handleAddReaction);
            unregister('lark.biz.reaction.getDetail', this.handleGetDetail);
            unregister('lark.biz.reaction.setDetailPanelStatus', this.handleSetDetailPanelStatus);
        }
    }]);
    return MobileReactionSDK;
}(_bytedReactionSdk.ReactionSDK);
// Todo: 清理时调用


function destoryReactionSDK() {
    _bytedReactionSdk.ReactionSDK.offRecentReactionKeysChange(handleRecentReactionKeysChange);
}
function isReactionChange() {
    var oldReactions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var reactions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    if (oldReactions.length === reactions.length) {
        return oldReactions.some(function (item, index) {
            var newReaction = reactions[index];
            if (item.totalCount === newReaction.totalCount) {
                return item.userList.some(function (user, index) {
                    var newUser = newReaction.userList[index];
                    return user.userName !== newUser.userName || user.userId !== newUser.userId;
                });
            }
            return true;
        });
    }
    return true;
}

/***/ }),

/***/ 1727:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.reactionSDKManager = undefined;

var _$store = __webpack_require__(64);

var _$store2 = _interopRequireDefault(_$store);

var _user = __webpack_require__(72);

var _i18nHelper = __webpack_require__(222);

var _reaction = __webpack_require__(1624);

var _serviceManagerHelper = __webpack_require__(778);

var _broadcastHelper = __webpack_require__(755);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createReactionSDK(props) {
    var suiteType = props.suiteType,
        suiteToken = props.suiteToken,
        broadcastType = props.broadcastType;

    var broadcast = _broadcastHelper.broadcastManager.getOrCreate({
        suiteType: suiteType,
        suiteToken: suiteToken
    });
    return new _reaction.MobileReactionSDK({
        broadcastType: broadcastType,
        broadcast: broadcast,
        getSuiteType: function getSuiteType() {
            return suiteType;
        },
        getSuiteToken: function getSuiteToken() {
            return suiteToken;
        },
        getUserId: function getUserId() {
            return window.User.id || (0, _user.selectCurrentUser)(_$store2.default.getState());
        },
        getLang: _i18nHelper.getLanguage
    });
}
var reactionSDKManager = exports.reactionSDKManager = (0, _serviceManagerHelper.createServiceManager)(createReactionSDK, function (props) {
    return props.suiteType + ':' + props.suiteToken + ':' + props.broadcastType;
});

/***/ }),

/***/ 1729:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SyncClientManager = undefined;

var _defineProperty2 = __webpack_require__(9);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _userHelper = __webpack_require__(65);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RCE_VERSION = 2;

var SyncClient = function () {
    function SyncClient(type, token, io) {
        var _this = this;

        (0, _classCallCheck3.default)(this, SyncClient);

        this.handleMessageQueue = [];
        this.registHbQueue = [];
        this.handleMessageFromServer = function (context) {
            _this.handleMessageQueue.forEach(function (cb) {
                return cb({ msg: context.data, type: context.type });
            });
        };
        this.onHandlerMessageFromServer = function (callback) {
            _this.handleMessageQueue.push(callback);
        };
        this.offHandlerMessageFromServer = function (callback) {
            _this.handleMessageQueue = _this.handleMessageQueue.filter(function (cb) {
                return !(cb === callback);
            });
        };
        this.io = io;
        this.entity = { type: type, token: token };
        if ((0, _userHelper.isDocRnEnabled)()) {
            // 使用 RN io 时是异步的
            this.io.registerEntityObserver(this.entity, {
                heartbeats: {},
                messageHandler: this.handleMessageFromServer
            }).then(function (id) {
                _this.registeredId = id;
                _this.registHbQueue.forEach(function (_ref) {
                    var name = _ref.name,
                        options = _ref.options;

                    _this.addHeartbeat(name, options);
                });
            });
        } else {
            this.registeredId = this.io.registerEntityObserver(this.entity, {
                heartbeats: {},
                messageHandler: this.handleMessageFromServer
            });
        }
    }

    (0, _createClass3.default)(SyncClient, [{
        key: 'sendMessage',
        value: function sendMessage(type, message) {
            var _entity = this.entity,
                suiteType = _entity.type,
                token = _entity.token;

            var messageToSend = {
                type: suiteType,
                data: Object.assign({
                    type: type,
                    token: token
                }, message),
                version: RCE_VERSION
            };
            return this.io.request(messageToSend);
        }
    }, {
        key: 'addHeartbeat',
        value: function addHeartbeat(name, options) {
            if (this.registeredId) {
                this.io.updateEntityObserver(this.entity, this.registeredId, { heartbeats: (0, _defineProperty3.default)({}, '' + name, options) });
            } else {
                this.registHbQueue.push({
                    name: name,
                    options: options
                });
            }
        }
    }, {
        key: 'removeHeartbeat',
        value: function removeHeartbeat(name) {
            this.io.removeHeartbeat(this.entity, name);
        }
    }, {
        key: 'setHeartbeatVersion',
        value: function setHeartbeatVersion(channel, revision) {
            this.io.setHeartbeatVersion(this.entity, channel, revision);
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            this.registeredId && this.io.unregisterEntityObserver(this.entity, this.registeredId);
            this.registHbQueue = [];
        }
    }]);
    return SyncClient;
}();

var SyncClientManager = exports.SyncClientManager = function () {
    function SyncClientManager() {
        (0, _classCallCheck3.default)(this, SyncClientManager);

        this.syncClients = new Map();
    }

    (0, _createClass3.default)(SyncClientManager, [{
        key: 'keyof',
        value: function keyof(type, token) {
            return type + ':' + token;
        }
    }, {
        key: 'getOrCreateCommentSyncClient',
        value: function getOrCreateCommentSyncClient(type, token, io) {
            var key = this.keyof(type, token);
            var syncClient = this.syncClients.get(key);
            if (!syncClient) {
                syncClient = new SyncClient(type, token, io);
                this.syncClients.set(key, syncClient);
            }
            return syncClient;
        }
    }, {
        key: 'destroyCommentSyncClient',
        value: function destroyCommentSyncClient(type, token) {
            var key = this.keyof(type, token);
            var syncClient = this.syncClients.get(key);
            if (syncClient) {
                syncClient.destroy();
            }
            this.syncClients.delete(key);
        }
    }]);
    return SyncClientManager;
}();

/***/ }),

/***/ 1730:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _typeof2 = __webpack_require__(82);

var _typeof3 = _interopRequireDefault(_typeof2);

var _teaLogger = __webpack_require__(450);

var _encryption = __webpack_require__(164);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ServiceLogger = function () {
    function ServiceLogger() {
        (0, _classCallCheck3.default)(this, ServiceLogger);
    }

    (0, _createClass3.default)(ServiceLogger, [{
        key: "logInitVersion",
        value: function logInitVersion(logParams) {
            return;
        }
    }, {
        key: "logVersionBreak",
        value: function logVersionBreak(logParams) {
            var localVersion = logParams.localVersion,
                remoteVersion = logParams.remoteVersion;

            if (localVersion >= remoteVersion) {
                this.logLocateRemoteDiffVersion(logParams);
            }
        }
    }, {
        key: "logBroadcastVersion",
        value: function logBroadcastVersion(logParams) {
            var localVersion = logParams.localVersion,
                remoteVersion = logParams.remoteVersion;

            if (localVersion >= remoteVersion) {
                this.logLocateRemoteDiffVersion(logParams);
            }
        }
    }, {
        key: "logLocateRemoteDiffVersion",
        value: function logLocateRemoteDiffVersion(logParams) {
            return;
        }
    }]);
    return ServiceLogger;
}();

__decorate([(0, _teaLogger.advancedTeaLogger)('doc_comment_log_init_data_version', function (_ref) {
    var args = _ref.args;

    var logParams = args[0];
    var aheadVersion = logParams.aheadVersion,
        behindVersion = logParams.behindVersion,
        token = logParams.token,
        source = logParams.source,
        module = logParams.module;

    return {
        aheadVersion: aheadVersion,
        behindVersion: behindVersion,
        source: source,
        token: (0, _encryption.encryptTea)(token),
        module: module
    };
})], ServiceLogger.prototype, "logInitVersion", null);
__decorate([(0, _teaLogger.advancedTeaLogger)('doc_comment_log_locate_remote_diff_version', function (_ref2) {
    var args = _ref2.args;

    var logParams = args[0];
    var localVersion = logParams.localVersion,
        remoteVersion = logParams.remoteVersion,
        source = logParams.source,
        token = logParams.token,
        module = logParams.module;

    return {
        localVersion: localVersion,
        remoteVersion: remoteVersion,
        source: source,
        module: module,
        token: (0, _encryption.encryptTea)(token)
    };
})], ServiceLogger.prototype, "logLocateRemoteDiffVersion", null);
exports.default = new ServiceLogger();

/***/ }),

/***/ 1731:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _uniqueId2 = __webpack_require__(453);

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _get2 = __webpack_require__(14);

var _get3 = _interopRequireDefault(_get2);

exports.commentFormater = commentFormater;
exports.contentPreprocess = contentPreprocess;

var _userHelper = __webpack_require__(65);

var _comment_mention = __webpack_require__(1623);

var _comment_mention2 = _interopRequireDefault(_comment_mention);

var _commentHelper = __webpack_require__(1667);

var _constants = __webpack_require__(1612);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function commentFormater(comment, userInfo, reactionData) {
    var commentList = comment.commentList,
        commentId = comment.commentId;
    // 修改数据以符合客户端评论卡片的数据结构

    commentList.forEach(function (commentItem) {
        var userId = commentItem.userId,
            createTimestamp = commentItem.createTimestamp,
            updateTimestamp = commentItem.updateTimestamp,
            replyId = commentItem.replyId;

        commentItem.user_id = commentItem.userId;
        commentItem.name = (0, _userHelper.getNameByIdFromUsers)(userInfo, userId);
        commentItem.avatar_url = (0, _get3.default)(userInfo, userId + '.avatar_url');
        commentItem.create_timestamp = createTimestamp;
        commentItem.update_timestamp = updateTimestamp;
        commentItem.reply_id = replyId;
        commentItem.reaction = reactionData && reactionData.get(replyId) || [];
        commentItem.reaction_type = _constants.COMMENT_REACTION_MODULE;
    });
    // 更新本地评论数据
    return {
        commentId: commentId,
        comment_list: (0, _commentHelper.decodeCommentOfOneCard)(comment.commentList)
    };
}
function contentPreprocess(content) {
    var saveNativeMentionNotification = _comment_mention2.default.saveNativeMentionNotification;
    // 暂存@通知

    var tempMentionId = (0, _uniqueId3.default)('mention_notification_');
    saveNativeMentionNotification(content, tempMentionId);
    content = (0, _commentHelper.encode)(content);
    return {
        content: content,
        tempMentionId: tempMentionId
    };
}

/***/ }),

/***/ 1747:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(1585)
var MD5 = __webpack_require__(1921)
var RIPEMD160 = __webpack_require__(1925)
var sha = __webpack_require__(1926)
var Base = __webpack_require__(1680)

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}


/***/ }),

/***/ 1748:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(741).Buffer))

/***/ }),

/***/ 1749:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(741).Buffer))

/***/ }),

/***/ 1750:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1649);
var assert = __webpack_require__(1638);

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};


/***/ }),

/***/ 1751:
/***/ (function(module, exports, __webpack_require__) {

var asn1 = exports;

asn1.bignum = __webpack_require__(1604);

asn1.define = __webpack_require__(3689).define;
asn1.base = __webpack_require__(1752);
asn1.constants = __webpack_require__(2224);
asn1.decoders = __webpack_require__(3695);
asn1.encoders = __webpack_require__(3697);


/***/ }),

/***/ 1752:
/***/ (function(module, exports, __webpack_require__) {

var base = exports;

base.Reporter = __webpack_require__(3692).Reporter;
base.DecoderBuffer = __webpack_require__(2223).DecoderBuffer;
base.EncoderBuffer = __webpack_require__(2223).EncoderBuffer;
base.Node = __webpack_require__(3693);


/***/ }),

/***/ 1774:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * 处理首字母大写
 * 支持多词转换
 * eg: comment => Comment
 */
var uppercaseTitleHelper = exports.uppercaseTitleHelper = function uppercaseTitleHelper(s) {
  return s.toLowerCase().split(/\s+/).map(function (item, index) {
    return item.slice(0, 1).toUpperCase() + item.slice(1);
  }).join(' ');
};

/***/ }),

/***/ 1775:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.copyTextWithoutPermission = undefined;

var _$constants = __webpack_require__(5);

var copyTextWithoutPermission = exports.copyTextWithoutPermission = function copyTextWithoutPermission() {
    return {
        type: _$constants.actionTypes.permission.COPY_TEXT_FAIL
    };
};

/***/ }),

/***/ 1813:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransformType", function() { return TransformType; });
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3625);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var NODE_ENV = "production";

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

var invariant_1 = invariant;

// Unique ID creation requires a high quality random # generator.  In node.js
// this is pretty straight-forward - we use the crypto API.



var rng = function nodeRNG() {
  return crypto__WEBPACK_IMPORTED_MODULE_0___default.a.randomBytes(16);
};

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([bth[buf[i++]], bth[buf[i++]], 
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]]]).join('');
}

var bytesToUuid_1 = bytesToUuid;

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid_1(rnds);
}

var v4_1 = v4;

var traverse = function (snapshot, path) {
    var _a;
    var key = 'data'; // 'data';
    var elem = (_a = {}, _a[key] = snapshot, _a);
    for (var i = 0; i < path.length; i++) {
        elem = elem[key];
        key = path[i];
        if (typeof elem === 'undefined') {
            throw new Error('bad path');
        }
    }
    return {
        elem: elem,
        key: key
    };
};
var normalizePath = function (path) {
    if (path instanceof Array) {
        return path;
    }
    if (typeof path === 'number') {
        return [path];
    }
    if (typeof path === 'string') {
        return path.split('.');
    }
    throw new Error('Invalid type of path: ' + typeof path);
};
var normalizeArgs = function (context, argvs, func, requiredArgsCount) {
    var args = Array.prototype.slice.call(argvs);
    var pathPrefix = [];
    // normalize function
    if (func.length > 1 && typeof args[args.length - 1] !== 'function') {
        args.push(function () { return undefined; });
    }
    if (args.length < (requiredArgsCount || func.length)) {
        args.unshift(pathPrefix);
    }
    else {
        var fPath = normalizePath(args[0]);
        if (fPath) {
            args[0] = pathPrefix.concat(fPath);
        }
    }
    return func.apply(context, args);
};

var ActionType;
(function (ActionType) {
    ActionType["StringInsert"] = "si";
    ActionType["StringDelete"] = "sd";
    ActionType["NumberAdd"] = "na";
    ActionType["ListInsert"] = "li";
    ActionType["ListDelete"] = "ld";
    ActionType["ListMove"] = "lm";
    ActionType["ObjectInsert"] = "oi";
    ActionType["ObjectDelete"] = "od";
    ActionType["Move"] = "mv";
    ActionType["ObjectReplace"] = "or";
    ActionType["ListReplace"] = "lr";
    ActionType["MvValue"] = "value";
})(ActionType || (ActionType = {}));
var SubType;
(function (SubType) {
    SubType["Text"] = "t";
})(SubType || (SubType = {}));
var TransformType;
(function (TransformType) {
    TransformType["LEFT"] = "left";
    TransformType["RIGHT"] = "right";
})(TransformType || (TransformType = {}));

function clone(o) {
    return JSON.parse(JSON.stringify(o));
}
function commonLengthForOps(a, b) {
    var alen = a.p.length;
    var blen = b.p.length;
    if ((a.action && a.action.na != null) || (a.subType && a.subType.t)) {
        alen++;
    }
    if ((b.action && b.action.na != null) || (b.subType && b.subType.t)) {
        blen++;
    }
    if (alen === 0)
        return -1;
    if (blen === 0)
        return -2;
    alen--;
    blen--;
    for (var i = 0; i < alen; i++) {
        var p = a.p[i];
        if (i >= blen || p !== b.p[i]) {
            return -2;
        }
    }
    return alen;
}
function judgeActionType(op, actionType) {
    return op.action && op.action[actionType] !== void 0;
}
function judgeSubType(op, subType) {
    return op.subType && op.subType['t'] !== void 0;
}
function pathMatches(p1, p2, ignoreLast) {
    if (p1.length !== p2.length) {
        return false;
    }
    for (var i = 0; i < p1.length; i++) {
        if (p1[i] !== p2[i] && (!ignoreLast || i !== p1.length - 1)) {
            return false;
        }
    }
    return true;
}
// 判断sliceA是否是sliceB的子集
function isSubPath(parentPath, subPath) {
    var lenA = parentPath.length;
    var lenB = subPath.length;
    if (lenA > lenB) {
        return false;
    }
    for (var index = 0; index < lenA; index++) {
        if (parentPath[index] !== subPath[index]) {
            return false;
        }
    }
    return true;
}
function isArray(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
}
function isObject(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
}
function isNumber(obj) {
    return typeof obj === 'number';
}
function isString(obj) {
    return typeof obj === 'string';
}
function getCommonPrefix(pathA, pathB) {
    var pathLenA = pathA.length;
    var pathLenB = pathB.length;
    if (pathLenA === 0) {
        return -1;
    }
    if (pathLenB === 0) {
        return -2;
    }
    // 这里之所以要--，为因为path的下标从0开始。
    pathLenA--;
    pathLenB--;
    // 以a为准
    for (var i = 0; i < pathLenA; i++) {
        if (i >= pathLenB || pathA[i] !== pathB[i]) {
            return -3;
        }
    }
    return pathLenA;
}
function getActionType(op) {
    var actionLen = Object.keys(op.action).length;
    if (judgeActionType(op, ActionType.NumberAdd)) {
        return ActionType.NumberAdd;
    }
    else if (judgeActionType(op, ActionType.Move)) {
        return ActionType.Move;
    }
    else if (actionLen === 2 &&
        judgeActionType(op, ActionType.ListDelete) &&
        judgeActionType(op, ActionType.ListInsert)) {
        return ActionType.ListReplace;
    }
    else if (actionLen === 1 && judgeActionType(op, ActionType.ListDelete)) {
        return ActionType.ListDelete;
    }
    else if (actionLen === 1 && judgeActionType(op, ActionType.ListInsert)) {
        return ActionType.ListInsert;
    }
    else if (judgeActionType(op, ActionType.ListMove)) {
        return ActionType.ListMove;
    }
    else if (actionLen === 2 &&
        judgeActionType(op, ActionType.ObjectDelete) &&
        judgeActionType(op, ActionType.ObjectInsert)) {
        return ActionType.ObjectReplace;
    }
    else if (actionLen === 1 && judgeActionType(op, ActionType.ObjectDelete)) {
        return ActionType.ObjectDelete;
    }
    else if (actionLen === 1 && judgeActionType(op, ActionType.ObjectInsert)) {
        return ActionType.ObjectInsert;
    }
    else if (judgeActionType(op, ActionType.StringDelete)) {
        return ActionType.StringDelete;
    }
    else if (judgeActionType(op, ActionType.StringInsert)) {
        return ActionType.StringInsert;
    }
    return 'Unknown Action';
}
function convertFromText(c) {
    c.subType = c.subType || {};
    c.subType.t = 'text0';
    var o = { p: c.p.pop() };
    if (c.action && c.action.si != null)
        o.i = c.action.si;
    if (c.action && c.action.sd != null)
        o.d = c.action.sd;
    c.subType.o = [o];
}
function convertToText(c) {
    c.p.push(c.subType.o[0].p);
    if (c.subType && c.subType.o && c.subType.o[0].i != null)
        c.action.si = c.subType.o[0].i;
    if (c.subType && c.subType.o && c.subType.o[0].d != null)
        c.action.sd = c.subType.o[0].d;
    delete c.subType.t;
    delete c.subType.o;
    delete c.subType;
}
function checkValidOp(op) {
    for (var i = 0; i < op.length; i++) {
        if (!isArray(op[i].p)) {
            throw new Error('Missing path');
        }
    }
}
function checkListOrObject(elem) {
    if (!isArray(elem) && !isObject(elem)) {
        throw new Error('Referenced element neither a list nor an object: ' + JSON.stringify(elem));
    }
}
function checkList(elem) {
    if (!isArray(elem)) {
        throw new Error('Referenced element not a list');
    }
}
function checkObj(elem) {
    if (!isObject(elem)) {
        throw new Error('Referenced element not an object (it was ' + JSON.stringify(elem) + ')');
    }
}

var utils = /*#__PURE__*/Object.freeze({
  clone: clone,
  commonLengthForOps: commonLengthForOps,
  judgeActionType: judgeActionType,
  judgeSubType: judgeSubType,
  pathMatches: pathMatches,
  isSubPath: isSubPath,
  isArray: isArray,
  isObject: isObject,
  isNumber: isNumber,
  isString: isString,
  getCommonPrefix: getCommonPrefix,
  getActionType: getActionType,
  convertFromText: convertFromText,
  convertToText: convertToText,
  checkValidOp: checkValidOp,
  checkListOrObject: checkListOrObject,
  checkList: checkList,
  checkObj: checkObj
});

function clone$1(o) {
    return JSON.parse(JSON.stringify(o));
}
function commonLengthForOps$1(a, b) {
    var alen = a.p.length;
    var blen = b.p.length;
    if ((a.action && a.action.na != null) || (a.subType && a.subType.t)) {
        alen++;
    }
    if ((b.action && b.action.na != null) || (b.subType && b.subType.t)) {
        blen++;
    }
    if (alen === 0)
        return -1;
    if (blen === 0)
        return -2;
    alen--;
    blen--;
    for (var i = 0; i < alen; i++) {
        var p = a.p[i];
        if (i >= blen || p !== b.p[i]) {
            return -2;
        }
    }
    return alen;
}
function judgeActionType$1(op, actionType) {
    return op.action && op.action[actionType] !== void 0;
}
function judgeSubType$1(op, subType) {
    return op.subType && op.subType['t'] !== void 0;
}
function pathMatches$1(p1, p2, ignoreLast) {
    if (p1.length !== p2.length) {
        return false;
    }
    for (var i = 0; i < p1.length; i++) {
        if (p1[i] !== p2[i] && (!ignoreLast || i !== p1.length - 1)) {
            return false;
        }
    }
    return true;
}
// 判断sliceA是否是sliceB的子集
function isSubPath$1(parentPath, subPath) {
    var lenA = parentPath.length;
    var lenB = subPath.length;
    if (lenA > lenB) {
        return false;
    }
    for (var index = 0; index < lenA; index++) {
        if (parentPath[index] !== subPath[index]) {
            return false;
        }
    }
    return true;
}
function isArray$1(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
}
function isObject$1(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
}
function isNumber$1(obj) {
    return typeof obj === 'number';
}
function getCommonPrefix$1(pathA, pathB) {
    var pathLenA = pathA.length;
    var pathLenB = pathB.length;
    if (pathLenA === 0) {
        return -1;
    }
    if (pathLenB === 0) {
        return -2;
    }
    // 这里之所以要--，为因为path的下标从0开始。
    pathLenA--;
    pathLenB--;
    // 以a为准
    for (var i = 0; i < pathLenA; i++) {
        if (i >= pathLenB || pathA[i] !== pathB[i]) {
            return -3;
        }
    }
    return pathLenA;
}
function getActionType$1(op) {
    var actionLen = Object.keys(op.action).length;
    if (judgeActionType$1(op, ActionType.NumberAdd)) {
        return ActionType.NumberAdd;
    }
    else if (judgeActionType$1(op, ActionType.Move)) {
        return ActionType.Move;
    }
    else if (actionLen === 2 &&
        judgeActionType$1(op, ActionType.ListDelete) &&
        judgeActionType$1(op, ActionType.ListInsert)) {
        return ActionType.ListReplace;
    }
    else if (actionLen === 1 && judgeActionType$1(op, ActionType.ListDelete)) {
        return ActionType.ListDelete;
    }
    else if (actionLen === 1 && judgeActionType$1(op, ActionType.ListInsert)) {
        return ActionType.ListInsert;
    }
    else if (judgeActionType$1(op, ActionType.ListMove)) {
        return ActionType.ListMove;
    }
    else if (actionLen === 2 &&
        judgeActionType$1(op, ActionType.ObjectDelete) &&
        judgeActionType$1(op, ActionType.ObjectInsert)) {
        return ActionType.ObjectReplace;
    }
    else if (actionLen === 1 && judgeActionType$1(op, ActionType.ObjectDelete)) {
        return ActionType.ObjectDelete;
    }
    else if (actionLen === 1 && judgeActionType$1(op, ActionType.ObjectInsert)) {
        return ActionType.ObjectInsert;
    }
    else if (judgeActionType$1(op, ActionType.StringDelete)) {
        return ActionType.StringDelete;
    }
    else if (judgeActionType$1(op, ActionType.StringInsert)) {
        return ActionType.StringInsert;
    }
    return 'Unknown Action';
}
function convertFromText$1(c) {
    c.subType = c.subType || {};
    c.subType.t = 'text0';
    var o = { p: c.p.pop() };
    if (c.action && c.action.si != null)
        o.i = c.action.si;
    if (c.action && c.action.sd != null)
        o.d = c.action.sd;
    c.subType.o = [o];
}
function convertToText$1(c) {
    c.p.push(c.subType.o[0].p);
    if (c.subType && c.subType.o && c.subType.o[0].i != null)
        c.action.si = c.subType.o[0].i;
    if (c.subType && c.subType.o && c.subType.o[0].d != null)
        c.action.sd = c.subType.o[0].d;
    delete c.subType.t;
    delete c.subType.o;
    delete c.subType;
}
function checkValidOp$1(op) {
    for (var i = 0; i < op.length; i++) {
        if (!isArray$1(op[i].p)) {
            throw new Error('Missing path');
        }
    }
}
function checkListOrObject$1(elem) {
    if (!isArray$1(elem) && !isObject$1(elem)) {
        throw new Error('Referenced element neither a list nor an object: ' + JSON.stringify(elem));
    }
}
function checkList$1(elem) {
    if (!isArray$1(elem)) {
        throw new Error('Referenced element not a list');
    }
}
function checkObj$1(elem) {
    if (!isObject$1(elem)) {
        throw new Error('Referenced element not an object (it was ' + JSON.stringify(elem) + ')');
    }
}

var subtypes = {};
function registerSubtype(subtype) {
    subtypes[subtype.name] = subtype;
}
function append(dest, c) {
    c = clone$1(c);
    // 将path["A", 0], mv:["A", 1] 此类转化为path["A", 0], lm:1
    // path["A", "B", 0, 1], mv:["A", "B", 1, 2] -> bad case 不算
    // path["A", "B"], mv:["A", "C"] 不需要转化
    if (judgeActionType$1(c, ActionType.Move)) {
        var sourcePath = c.p;
        var targetPath = c.action[ActionType.Move];
        var common1 = getCommonPrefix$1(sourcePath, targetPath);
        var common2 = getCommonPrefix$1(targetPath, sourcePath);
        if (sourcePath.length === targetPath.length &&
            common1 >= 0 &&
            common2 >= 0 &&
            common1 === common2 &&
            common1 === sourcePath.length - 1) {
            if (isNumber$1(sourcePath[common1])) {
                // 取出mvKey
                var mvKey = targetPath[common1];
                // 删除mv
                delete c.action[ActionType.Move];
                // 插入lm
                c.action[ActionType.ListMove] = mvKey;
            }
        }
    }
    if (dest.length === 0) {
        dest.push(c);
        return dest;
    }
    var last = dest[dest.length - 1];
    // convert old string ops to use subtype for backwards compatibility
    if (c.action &&
        last.action &&
        (c.action.si != null || c.action.sd != null) &&
        (last.action.si != null || last.action.sd != null)) {
        convertFromText$1(c);
        convertFromText$1(last);
    }
    if (pathMatches$1(c.p, last.p)) {
        // handle subtype ops
        if (c.subType &&
            c.subType.t &&
            last.subType &&
            last.subType.t &&
            c.subType.t === last.subType.t &&
            subtypes[c.subType.t]) {
            last.subType.o = subtypes[c.subType.t].compose(last.subType.o, c.subType.o);
            // convert back to old string ops
            if (c.action && (c.action.si != null || c.action.sd != null)) {
                var p = c.p;
                // unreachable
                for (var i = 0; i < last.subType.o.length - 1; i++) {
                    c.subType.o = [last.subType.o.pop()];
                    c.p = p.slice();
                    convertToText$1(c);
                    dest.push(c);
                }
                convertToText$1(last);
            }
        }
        else if (last.action && last.action.na != null && c.action.na != null) {
            dest[dest.length - 1] = {
                p: last.p,
                action: { na: last.action.na + c.action.na }
            };
        }
        else if (last.action &&
            c.action &&
            last.action.li !== undefined &&
            c.action.li === undefined &&
            c.action.ld === last.action.li) {
            // insert immediately followed by delete becomes a noop.
            if (last.action.ld !== undefined) {
                // leave the delete part of the replace
                delete last.action.li;
            }
            else {
                dest.pop();
            }
        }
        else if (last.action &&
            c.action &&
            last.action.od !== undefined &&
            last.action.oi === undefined &&
            c.action.oi !== undefined &&
            c.action.od === undefined) {
            last.action.oi = c.action.oi;
        }
        else if (last.action &&
            c.action &&
            last.action.oi !== undefined &&
            c.action.od !== undefined) {
            // The last path component inserted something that the new component deletes (or replaces).
            // Just merge them.
            if (c.action && c.action.oi !== undefined) {
                last.action.oi = c.action.oi;
            }
            else if (last.action && last.action.od !== undefined) {
                delete last.action.oi;
            }
            else {
                // An insert directly followed by a delete turns into a no-op and can be removed.
                dest.pop();
            }
        }
        else if (c.action &&
            c.action.lm !== undefined &&
            c.p[c.p.length - 1] === c.action.lm) ;
        else {
            if (c.action &&
                last.action &&
                (c.action.si != null || c.action.sd != null) &&
                (last.action.si != null || last.action.sd != null)) {
                convertToText$1(c);
                convertToText$1(last);
            }
            dest.push(c);
        }
    }
    else {
        // convert string ops back
        if (c.action &&
            last.action &&
            (c.action.si != null || c.action.sd != null) &&
            (last.action.si != null || last.action.sd != null)) {
            convertToText$1(c);
            convertToText$1(last);
        }
        dest.push(c);
    }
    return dest;
}

var append$1 = /*#__PURE__*/Object.freeze({
  append: append,
  subtypes: subtypes,
  registerSubtype: registerSubtype
});

function apply(snapshot, op) {
    checkValidOp$1(op);
    op = clone$1(op);
    var container = {
        data: snapshot
    };
    for (var i = 0; i < op.length; i++) {
        var c = op[i];
        // convert old string ops to use subtype for backwards compatibility
        if (c.action && (c.action.si != null || c.action.sd != null)) {
            convertFromText$1(c);
        }
        var parent_1 = null;
        var elem = container;
        var key = 'data';
        for (var j = 0; j < c.p.length; j++) {
            var p = c.p[j];
            parent_1 = elem;
            elem = elem[key];
            key = p;
            if (parent_1 == null) {
                throw new Error('Path invalid');
            }
        }
        // handle subtype ops
        if (c.subType &&
            c.subType.t &&
            c.subType.o !== void 0 &&
            subtypes[c.subType.t]) {
            elem[key] = subtypes[c.subType.t].apply(elem[key], c.subType.o);
            // Number add
        }
        else if (c.action && c.action.na !== void 0) {
            if (typeof elem[key] !== 'number') {
                throw new Error('Referenced element not a number');
            }
            elem[key] += c.action.na;
        }
        // List replace
        else if (c.action && c.action.li !== void 0 && c.action.ld !== void 0) {
            checkList$1(elem);
            // Should check the list element matches c.ld
            elem[key] = c.action.li;
        }
        // List insert
        else if (c.action && c.action.li !== void 0) {
            checkList$1(elem);
            elem.splice(key, 0, c.action.li);
        }
        // List delete
        else if (c.action && c.action.ld !== void 0) {
            checkList$1(elem);
            // Should check the list element matches c.ld here too.
            elem.splice(key, 1);
        }
        // List move
        else if (c.action && c.action.lm !== void 0) {
            checkList$1(elem);
            if (c.action.lm !== key) {
                var e = elem[key];
                // Remove it...
                elem.splice(key, 1);
                // And insert it back.
                elem.splice(c.action.lm, 0, e);
            }
        }
        // Object insert / replace
        else if (c.action && c.action.oi !== void 0) {
            checkObj$1(elem);
            // Should check that elem[key] == c.od
            elem[key] = c.action.oi;
        }
        // Object delete
        else if (c.action && c.action.od !== void 0) {
            checkObj$1(elem);
            // Should check that elem[key] == c.od
            delete elem[key];
        }
        else if (c.action && c.action.mv !== void 0) {
            checkListOrObject$1(elem);
            // TODO: implement move operation here...
            var mvPathData = c.action.mv;
            checkList$1(mvPathData);
            if (mvPathData.length === 0) {
                throw new Error('Invalid mv path length, should not be empty');
            }
            // mvElem 为移动的 target data
            var targetVal = null;
            if (isObject$1(elem)) {
                targetVal = elem[key];
                delete elem[key];
            }
            else if (isArray$1(elem)) {
                targetVal = elem.splice(key, 1)[0];
            }
            var mvPath = mvPathData.slice(0, mvPathData.length - 1);
            var mvElem = container;
            var mvKey = 'data';
            for (var j = 0; j < mvPathData.length; j++) {
                var p = mvPathData[j];
                if (mvElem === null) {
                    throw new Error('Invalid mvPath:' + JSON.stringify(mvPathData));
                }
                mvElem = mvElem[mvKey];
                mvKey = p;
            }
            // 将before的数据写回
            if (isObject$1(mvElem)) {
                if (mvElem[mvKey]) {
                    throw new Error('invalid mv operation, object target element got value.');
                }
                mvElem[mvKey] = targetVal;
            }
            else if (isArray$1(mvElem)) {
                mvElem.splice(mvKey, 0, targetVal);
            }
        }
        else {
            throw new Error('invalid / missing instruction in op');
        }
    }
    return container.data;
}

var apply$1 = /*#__PURE__*/Object.freeze({
  apply: apply
});

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var lodash_isequal = createCommonjsModule(function (module, exports) {
/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    asyncTag = '[object AsyncFunction]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    nullTag = '[object Null]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    proxyTag = '[object Proxy]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    undefinedTag = '[object Undefined]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice,
    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = isEqual;
});

function transformComponent(dest, opOriginal, other, opType) {
    if (opType !== TransformType.LEFT && opType !== TransformType.RIGHT) {
        throw new Error('Invalid opType, should be left or right');
    }
    var op = clone$1(opOriginal);
    var common1 = commonLengthForOps$1(other, op);
    var common2 = commonLengthForOps$1(op, other);
    var lenA = op.p.length;
    var lenB = other.p.length;
    if (judgeActionType$1(op, ActionType.NumberAdd) ||
        judgeSubType$1(op, SubType.Text)) {
        lenA++;
    }
    if (judgeActionType$1(other, ActionType.NumberAdd) ||
        judgeSubType$1(other, SubType.Text)) {
        lenB++;
    }
    if ((lenA === 0 && lenB !== 0) ||
        (common2 >= 0 && lenB > lenA && op.p[common2] === other.p[common2])) {
        if (judgeActionType$1(op, ActionType.ListDelete) ||
            judgeActionType$1(op, ActionType.ObjectDelete)) {
            var operationType = judgeActionType$1(op, ActionType.ListDelete)
                ? ActionType.ListDelete
                : ActionType.ObjectDelete;
            return deleteTransform(dest, operationType, other, op);
        }
    }
    // other和op均非mv的时候
    if (common1 === -2 &&
        !(judgeActionType$1(other, ActionType.Move) ||
            judgeActionType$1(op, ActionType.Move))) {
        dest = append(dest, op);
        return dest;
    }
    // j判断两个op的path的长度是否相等
    var commonOprand = false;
    if (lenA === lenB) {
        commonOprand = true;
    }
    // 注意区分Action为1和2的情况，为2的时候是replace操作
    var actionType = getActionType$1(other);
    switch (actionType) {
        case ActionType.NumberAdd:
            return naTransform(dest, common1, common2, other, op, opType);
        // na操作, 对某个数+n，不影响后面的op, {p:[path], na:x}
        // dest = append(dest, op)
        // return dest
        case ActionType.Move:
            return mvTransform(dest, common1, common2, other, op, opType);
        case ActionType.ListReplace:
            return ldLiTransform(dest, common1, common2, commonOprand, other, op, opType);
        case ActionType.ListInsert:
            return liTransform(dest, common1, common2, commonOprand, other, op, opType);
        case ActionType.ListDelete:
            return ldTransform(dest, common1, common2, commonOprand, other, op, opType);
        case ActionType.ListMove:
            return lmTransform(dest, common1, common2, commonOprand, other, op, opType);
        case ActionType.ObjectReplace:
            return odOiTransform(dest, common1, common2, commonOprand, other, op, opType);
        case ActionType.ObjectInsert:
            return oiTransform(dest, common1, common2, commonOprand, other, op, opType);
        case ActionType.ObjectDelete:
            return odTransform(dest, common1, common2, commonOprand, other, op, opType);
        case ActionType.StringInsert:
            return siTransform(dest, common1, common2, commonOprand, other, op, opType);
        case ActionType.StringDelete:
            return sdTransform(dest, common1, common2, commonOprand, other, op, opType);
        default:
            return dest;
    }
}
function naTransform(dest, common1, common2, other, op, opType) {
    // 如果op是mv，判断是否要更新value的值
    if (judgeActionType$1(op, ActionType.Move)) {
        var otherSourcePath = other.p;
        var opSourcePath = op.p;
        if (otherSourcePath.length === opSourcePath.length &&
            isSubPath$1(otherSourcePath, opSourcePath)) {
            // 长度一致时
            var naNum = other.action[ActionType.NumberAdd];
            var mvValue = op.action[ActionType.MvValue];
            var newMvValue = mvValue + naNum;
            op.action[ActionType.MvValue] = newMvValue;
        }
        else if (opSourcePath.length < otherSourcePath.length &&
            isSubPath$1(opSourcePath, otherSourcePath)) {
            // op.Path是other.Path的父节点
            // 构造新的op，通过apply获取新的value
            // 拷贝一份other
            var oc = clone$1(other);
            var newPath = other.p.slice(op.p.length);
            oc.p = newPath;
            var dataRaw = clone$1(op.action[ActionType.MvValue]);
            // data, _ := json.Marshal(op.Action[MvValue])
            // dataRawStr := `{"x":` + string(data) + `}`
            // dataRaw := make(map[string]interface{})
            // err = json.Unmarshal([]byte(dataRawStr), &dataRaw)
            // if err != nil{
            // 	return dest, fmt.Errorf("other:na, op:mv, 将x塞进去时反序列化失败, err:%s", err)
            // }
            var result = apply(dataRaw, [oc]);
            op.action[ActionType.MvValue] = result;
        }
    }
    // na操作, 对某个数+n，不影响后面的op, {p:[path], na:x}
    dest = append(dest, op);
    return dest;
}
function sdTransform(dest, common1, common2, commonOprand, other, op, opType) {
    // sd的path如果为[]，是个invalid operation
    var otherCommonPath = other.p[common1];
    var otherStr = other.action[ActionType.StringDelete];
    if (judgeActionType$1(op, ActionType.StringInsert)) {
        var opCommonPath = op.p[common1];
        var from = opCommonPath;
        var otherFrom = otherCommonPath;
        var str = op.action[ActionType.StringInsert];
        var otherStrLen = otherStr.length;
        if (str.length === 0) {
            // 如果本来要插入的字符为空，直接返回空即可
            return dest;
        }
        else if (from > otherFrom && from < otherFrom + otherStrLen) {
            op.p[common1] = otherFrom;
        }
        else if (from > otherFrom) {
            op.p[common1] = from - otherStrLen;
        }
    }
    else if (judgeActionType$1(op, ActionType.StringDelete)) {
        var opCommonPath = op.p[common1];
        var from = opCommonPath;
        var otherFrom = otherCommonPath;
        var str = op.action[ActionType.StringDelete];
        var opStrLen = str.length;
        var otherStrLen = otherStr.length;
        if (from === otherFrom && str.length === otherStr.length) {
            // other删除的字符串和wo要删除的一模一样
            return dest;
        }
        else if (otherFrom + otherStrLen <= from) {
            op.p[common1] = from - otherStrLen;
        }
        else if (from >= otherFrom && from <= otherFrom + otherStrLen) {
            if (from + opStrLen > otherFrom + otherStrLen) {
                op.p[common1] = otherFrom;
                op.action[ActionType.StringDelete] = str.substr(otherFrom + otherStrLen - from, from + opStrLen - otherFrom - otherStrLen);
            }
            else {
                // wo要删除的字符串是other的删除字符串的子串，不需要操作了，要删的已经被删除了
                return dest;
            }
        }
        else if (from < otherFrom && from + opStrLen >= otherFrom + otherStrLen) {
            // other的删除字符串是wo要删除的字符串的子串
            var newDeleteStr = str.substr(0, otherFrom - from);
            newDeleteStr =
                newDeleteStr +
                    str.substr(otherFrom - from + otherStrLen, from + opStrLen - otherFrom - otherStrLen);
            op.action[ActionType.StringDelete] = newDeleteStr;
        }
        else if (from < otherFrom &&
            from + opStrLen > otherFrom &&
            from + opStrLen < otherFrom + otherStrLen) {
            var newDeleteStr = str.substr(0, otherFrom - from);
            op.action[ActionType.StringDelete] = newDeleteStr;
        }
    }
    dest = append(dest, op);
    return dest;
}
function siTransform(dest, common1, common2, commonOprand, other, op, opType) {
    // si的path如果为[]，是个invalid operation
    if (common1 === -1) {
        return dest;
    }
    var otherCommonPath = other.p[common1];
    if (!isNumber$1(otherCommonPath)) {
        return dest;
    }
    var otherAddStr = other.action[ActionType.StringInsert];
    // 注意:插入/删除的字符串长度可以不等于1，例如:"sd":"ab"
    if (judgeActionType$1(op, ActionType.StringInsert)) {
        var opCommonPath = op.p[common1];
        // 如果我插入的idx在这个的后面
        var from = opCommonPath;
        var otherFrom = otherCommonPath;
        var str = op.action[ActionType.StringInsert];
        var otherLenStr = otherAddStr.length;
        if (str.length === 0) {
            // 如果插入的字符为空
            return dest;
        }
        else if (from >= otherFrom) {
            if ((from === otherFrom && opType === 'right') || from > otherFrom) {
                op.p[common1] = from + otherLenStr;
            }
        }
    }
    else if (judgeActionType$1(op, ActionType.StringDelete)) {
        var opCommonPath = op.p[common1];
        var deleteStr = op.action[ActionType.StringDelete]; // 要删除的字符串
        var otherLenStr = otherAddStr.length;
        var lenStr = deleteStr.length;
        var from = opCommonPath;
        var otherFrom = otherCommonPath;
        if (otherFrom > from + lenStr) ;
        else if (from < otherFrom && otherFrom < from + lenStr) {
            // 删除的整串字符串正好被插入的字符串分开，此时结果要分成两个op
            // 深拷贝一份
            var op1 = clone$1(op);
            var op2 = clone$1(op);
            op1.action[ActionType.StringDelete] = deleteStr.substr(0, otherFrom - from);
            op2.p[common1] = otherFrom + otherLenStr;
            op2.action[ActionType.StringDelete] = deleteStr.substr(otherFrom - from, lenStr - otherFrom + from);
            if (otherFrom > from) {
                dest = append(dest, op1);
            }
            if (from + lenStr > otherFrom) {
                if (dest.length === 0) {
                    dest = append(dest, op2);
                }
                else if (dest.length === 1) {
                    var newOp2 = transformComponent([], op2, dest[0], TransformType.LEFT);
                    for (var i = 0; i < newOp2.length; i++) {
                        dest = append(dest, newOp2[i]);
                    }
                }
            }
            return dest;
        }
        else if (from > otherFrom) {
            op.p[common1] = from + otherLenStr;
        }
    }
    dest = append(dest, op);
    return dest;
}
function odTransform(dest, common1, common2, commonOprand, other, op, opType) {
    if ((common1 === -1 && op.p.length === 0) ||
        (common1 >= 0 && op.p[common1] === other.p[common1])) {
        if (!commonOprand) {
            return dest;
        }
        if (judgeActionType$1(op, ActionType.ObjectInsert)) {
            delete op.action[ActionType.ObjectDelete];
        }
        else {
            return dest;
        }
    }
    else if (judgeActionType$1(op, ActionType.Move)) {
        var otherSourcePath = other.p;
        var opSourcePath = op.p;
        var opTargetPath = op.action[ActionType.Move];
        var newOpTargetPath = opTargetPath.slice(0);
        // 判断opSourcePath对opTargetPath的影响
        var pathCommon1 = getCommonPrefix$1(opSourcePath, opTargetPath);
        if (pathCommon1 > 0 && opSourcePath.length < opTargetPath.length) {
            if (isNumber$1(opSourcePath[pathCommon1]) &&
                isNumber$1(opTargetPath[pathCommon1])) {
                var opSourceKey = opSourcePath[pathCommon1];
                var opTargetKey = opTargetPath[pathCommon1];
                if (opSourceKey <= opTargetKey) {
                    newOpTargetPath[pathCommon1] =
                        newOpTargetPath[pathCommon1] + 1;
                }
            }
        }
        // [1]. otherSourcePath包含opSourcePath
        if (isSubPath$1(otherSourcePath, opSourcePath)) {
            return dest;
        }
        // [2]. otherSourcePath包含opTargetPath
        if (isSubPath$1(otherSourcePath, newOpTargetPath)) {
            var mvValue = op.action[ActionType.MvValue];
            delete op.action[ActionType.Move];
            delete op.action[ActionType.MvValue];
            op.action[ActionType.ListDelete] = mvValue;
            dest = append(dest, op);
            return dest;
        }
        // 如果opSourcePath是otherSourcePath的父节点，需要更新value的值
        if (isSubPath$1(opSourcePath, otherSourcePath) &&
            opSourcePath.length < otherSourcePath.length) {
            // 拷贝一份other
            var oc = clone$1(other);
            var newPath = other.p.slice(op.p.length);
            oc.p = newPath;
            var dataRaw = clone$1(op.action[ActionType.MvValue]);
            var result = apply(dataRaw, [oc]);
            op.action[ActionType.MvValue] = result;
        }
    }
    dest = append(dest, op);
    return dest;
}
function oiTransform(dest, common1, common2, commonOprand, other, op, opType) {
    if (judgeActionType$1(op, ActionType.ObjectInsert)) {
        if ((common1 === -1 && op.p.length === 0 && other.p.length === 0) ||
            (common1 >= 0 && op.p[common1] === other.p[common1])) {
            // 如果两个都是oi，操作，且path一致, 如果opType是left, 那么要在op中加入删除other插入的object的action
            if (opType === TransformType.LEFT) {
                op.action[ActionType.ObjectDelete] =
                    other.action[ActionType.ObjectInsert];
            }
            else {
                return dest;
            }
        }
    }
    else if (judgeActionType$1(op, ActionType.Move)) {
        // 如果opSourcePath是otherSourcePath的父节点，需要更新value的值
        var opSourcePath = op.p;
        var otherSourcePath = other.p;
        if (isSubPath$1(opSourcePath, otherSourcePath) &&
            opSourcePath.length < otherSourcePath.length) {
            // 拷贝一份other
            var oc = clone$1(other);
            var newPath = other.p.slice(op.p.length);
            oc.p = newPath;
            var dataRaw = clone$1(op.action[ActionType.MvValue]);
            var result = apply(dataRaw, [oc]);
            op.action[ActionType.MvValue] = result;
        }
    }
    dest = append(dest, op);
    return dest;
}
function odOiTransform(dest, common1, common2, commonOprand, other, op, opType) {
    var lenA = op.p.length;
    // 如果action有na，则长度+1
    if (judgeActionType$1(op, ActionType.NumberAdd)) {
        lenA++;
    }
    // oi and od操作时，即replace操作
    // path相等：(1)都为[]，(2)长度相等+公共最后一位key相等
    if ((common1 === -1 && other.p.length === 0) ||
        (common1 >= 0 && op.p[common1] === other.p[common1])) {
        if (judgeActionType$1(op, ActionType.ObjectInsert) && commonOprand) {
            // 是个insert操作
            if (opType === 'right') {
                return dest;
            }
            else {
                op.action[ActionType.ObjectDelete] =
                    other.action[ActionType.ObjectInsert];
            }
        }
        else {
            // -> noop if the other component is deleting the same object (or any parent)
            return dest;
        }
    }
    else if (judgeActionType$1(op, ActionType.Move)) {
        var otherSourcePath = other.p;
        var opSourcePath = op.p;
        var opTargetPath = op.action[ActionType.Move];
        var newOpTargetPath = opTargetPath.slice(0);
        // 判断opSourcePath对opTargetPath的影响
        var pathCommon1 = getCommonPrefix$1(opSourcePath, opTargetPath);
        if (pathCommon1 > 0 && opSourcePath.length < opTargetPath.length) {
            if (isNumber$1(opSourcePath[pathCommon1]) &&
                isNumber$1(opTargetPath[pathCommon1])) {
                var opSourceKey = opSourcePath[pathCommon1];
                var opTargetKey = opTargetPath[pathCommon1];
                if (opSourceKey <= opTargetKey) {
                    newOpTargetPath[pathCommon1] =
                        newOpTargetPath[pathCommon1] + 1;
                }
            }
        }
        // otherSourcePath是opSourcePath的父节点
        if (isSubPath$1(otherSourcePath, opSourcePath) &&
            otherSourcePath.length < opSourcePath.length) {
            return dest;
        }
        // otherSourcePath是opTargetPath的父节点
        if (isSubPath$1(otherSourcePath, newOpTargetPath) &&
            otherSourcePath.length < newOpTargetPath.length) {
            var mvValue = op.action[ActionType.MvValue];
            delete op.action[ActionType.Move];
            delete op.action[ActionType.MvValue];
            op.action[ActionType.ListDelete] = mvValue;
            dest = append(dest, op);
            return dest;
        }
        // 如果opSourcePath是otherSourcePath的父节点，需要更新value的值
        if (isSubPath$1(opSourcePath, otherSourcePath) &&
            opSourcePath.length < otherSourcePath.length) {
            // 拷贝一份other
            var oc = clone$1(other);
            var newPath = other.p.slice(op.p.length);
            oc.p = newPath;
            var dataRaw = clone$1(op.action[ActionType.MvValue]);
            var result = apply(dataRaw, [oc]);
            op.action[ActionType.MvValue] = result;
        }
    }
    dest = append(dest, op);
    return dest;
}
function lmTransform(dest, common1, common2, commonOprand, other, op, opType) {
    if (judgeActionType$1(op, ActionType.Move)) {
        var opSourcePath = op.p;
        var opTargetPath = op.action[ActionType.Move];
        // opSourcePath对opTargetPath的影响
        var newOpTargetPath = opTargetPath.slice(0);
        var opCommon1 = getCommonPrefix$1(opSourcePath, opTargetPath);
        if (opCommon1 > 0 && opSourcePath.length < opTargetPath.length) {
            if (isNumber$1(opSourcePath[opCommon1]) &&
                isNumber$1(opTargetPath[opCommon1])) {
                var opSourceKey = opSourcePath[opCommon1];
                var opTargetKey = opTargetPath[opCommon1];
                if (opSourceKey <= opTargetKey) {
                    newOpTargetPath[opCommon1] = opTargetKey + 1;
                }
            }
        }
        var finalOpSourcePath = opSourcePath.slice(0);
        var finalOpTargetPath = opTargetPath.slice(0);
        var otherSourcePath = other.p;
        var otherTargetKey = other.action[ActionType.ListMove];
        // [1].判断otherSourcePath对opSourcePath的影响
        var opCommon3 = getCommonPrefix$1(otherSourcePath, opSourcePath);
        if (opCommon3 > 0 && otherSourcePath.length <= opSourcePath.length) {
            if (isNumber$1(otherSourcePath[opCommon3]) &&
                isNumber$1(opSourcePath[opCommon3])) {
                var otherSourceKey = otherSourcePath[opCommon3];
                var opSourceKey = opSourcePath[opCommon3];
                if (otherSourcePath.length < opSourcePath.length) {
                    if (otherSourceKey < opSourceKey) {
                        finalOpSourcePath[opCommon3] = opSourceKey - 1;
                        // 判断lm值对opSourcePath的影响
                        if (otherTargetKey < opSourceKey) {
                            finalOpSourcePath[opCommon3] =
                                finalOpSourcePath[opCommon3] + 1;
                        }
                        else if (otherSourceKey > otherTargetKey &&
                            otherTargetKey === opSourceKey) {
                            // 后->前
                            finalOpSourcePath[opCommon3] =
                                finalOpSourcePath[opCommon3] + 1;
                        }
                    }
                    else if (otherSourceKey === opSourceKey) {
                        finalOpSourcePath[opCommon3] = otherTargetKey;
                    }
                    else {
                        if (otherTargetKey <= opSourceKey) {
                            finalOpSourcePath[opCommon3] =
                                finalOpSourcePath[opCommon3] + 1;
                        }
                    }
                }
                else if (otherSourcePath.length === opSourcePath.length) {
                    if (otherSourceKey < opSourceKey) {
                        finalOpSourcePath[opCommon3] = opSourceKey - 1;
                        // 判断lm值对opSourcePath的影响
                        if (otherTargetKey < opSourceKey) {
                            finalOpSourcePath[opCommon3] =
                                finalOpSourcePath[opCommon3] + 1;
                        }
                    }
                    else if (otherSourceKey === opSourceKey) {
                        if (opType === TransformType.RIGHT) {
                            return dest;
                        }
                        else {
                            finalOpSourcePath[opCommon3] = otherTargetKey;
                        }
                    }
                    else {
                        if (otherTargetKey <= opSourceKey) {
                            finalOpSourcePath[opCommon3] =
                                finalOpSourcePath[opCommon3] + 1;
                        }
                    }
                }
            }
        }
        // 如果opSourcePath是otherSourcePath的父节点，需要更新value的值
        if (isSubPath$1(opSourcePath, otherSourcePath) &&
            opSourcePath.length < otherSourcePath.length) {
            // 拷贝一份other
            var oc = clone$1(other);
            var newPath = other.p.slice(op.p.length);
            oc.p = newPath;
            // newPath := []interface{}{}
            // newPath = append(newPath, "x")
            // newPath = append(newPath, other.Path[len(op.Path):]...)
            // oc.Path = newPath
            var dataRaw = clone$1(op.action[ActionType.MvValue]);
            var result = apply(dataRaw, [oc]);
            op.action[ActionType.MvValue] = result;
        }
        // [2].otherSourcePath对opTargetPath，类似于[1], 使用同一个基准的newOpTargetPath即可
        var opCommon4 = getCommonPrefix$1(otherSourcePath, newOpTargetPath);
        if (opCommon4 > 0 && otherSourcePath.length <= newOpTargetPath.length) {
            if (isNumber$1(otherSourcePath[opCommon4]) &&
                isNumber$1(newOpTargetPath[opCommon4])) {
                var otherSourceKey = otherSourcePath[opCommon4];
                var newOpTargetKey = newOpTargetPath[opCommon4];
                if (otherSourcePath.length < newOpTargetPath.length) {
                    if (otherSourceKey < newOpTargetKey) {
                        newOpTargetPath[opCommon4] = newOpTargetKey - 1;
                        // 判断lm值对opSourcePath的影响
                        if (otherTargetKey < newOpTargetKey) {
                            newOpTargetPath[opCommon4] =
                                newOpTargetPath[opCommon4] + 1;
                        }
                        else if (otherSourceKey > otherTargetKey &&
                            otherTargetKey === newOpTargetKey) {
                            // 后->前
                            newOpTargetPath[opCommon4] =
                                newOpTargetPath[opCommon4] + 1;
                        }
                    }
                    else if (otherSourceKey === newOpTargetKey) {
                        newOpTargetPath[opCommon4] = otherTargetKey;
                    }
                    else {
                        if (otherTargetKey <= newOpTargetKey) {
                            newOpTargetPath[opCommon4] =
                                newOpTargetPath[opCommon4] + 1;
                        }
                    }
                }
                else if (otherSourcePath.length === newOpTargetPath.length) {
                    if (otherSourceKey < newOpTargetKey) {
                        newOpTargetPath[opCommon4] = newOpTargetKey - 1;
                        // 判断lm值对opSourcePath的影响
                        if (otherTargetKey < newOpTargetKey) {
                            newOpTargetPath[opCommon4] =
                                newOpTargetPath[opCommon4] + 1;
                        }
                    }
                    else {
                        if (otherTargetKey < newOpTargetKey) {
                            newOpTargetPath[opCommon4] =
                                newOpTargetPath[opCommon4] + 1;
                        }
                        else if (otherTargetKey === newOpTargetKey &&
                            opType === TransformType.RIGHT) {
                            newOpTargetPath[opCommon4] =
                                newOpTargetPath[opCommon4] + 1;
                        }
                    }
                }
                // 目前newOpTargetPath和opSourcePath基于同一个基准，需要转化
                var pathCommon1 = getCommonPrefix$1(finalOpSourcePath, newOpTargetPath);
                if (pathCommon1 > 0 &&
                    finalOpSourcePath.length < newOpTargetPath.length) {
                    if (isNumber$1(finalOpSourcePath[pathCommon1]) &&
                        isNumber$1(newOpTargetPath[pathCommon1])) {
                        var finalOpSourceKey = finalOpSourcePath[pathCommon1];
                        var newOpTargetKey_1 = newOpTargetPath[pathCommon1];
                        if (finalOpSourceKey < newOpTargetKey_1) {
                            newOpTargetPath[pathCommon1] = newOpTargetKey_1 - 1;
                        }
                    }
                }
                finalOpTargetPath = newOpTargetPath;
            }
        }
        op.p = finalOpSourcePath;
        op.action[ActionType.Move] = finalOpTargetPath;
        dest = append(dest, op);
        return dest;
    }
    // lm的path为空[]，是个非法op
    if (common1 === -1) {
        return dest;
    }
    // 先判断other的path最后一个key是否是int型
    var otherCommonPath = other.p[common1];
    if (!isNumber$1(otherCommonPath)) {
        throw new Error('Invalid op, the last path should be number');
    }
    if (judgeActionType$1(op, ActionType.ListMove) && commonOprand) {
        // lm vs lm 两个都是lm操作，判断op的path最后一个key是否是int型
        var opCommonPath = op.p[common1];
        if (!isNumber$1(opCommonPath)) {
            throw new Error('invalid op, the common path should be int');
        }
        var from = opCommonPath;
        var otherFrom = otherCommonPath;
        // 将lm的action值转化为int型
        var opLmAction = void 0;
        var otherLmAction = void 0;
        if (judgeActionType$1(op, ActionType.ListMove)) {
            opLmAction = op.action[ActionType.ListMove];
            if (!isNumber$1(opLmAction)) {
                throw new Error('Invalid op, the lm should be number');
            }
        }
        if (judgeActionType$1(other, ActionType.ListMove)) {
            otherLmAction = other.action[ActionType.ListMove];
            if (!isNumber$1(otherLmAction)) {
                throw new Error('Invalid op, the lm should be number');
            }
        }
        var to = opLmAction;
        var otherTo = otherLmAction;
        // 当otherFrom=otherTo时,不需要改变op
        if (otherFrom !== otherTo) {
            if (from === otherFrom) {
                // they moved it, tie break
                if (opType === TransformType.LEFT) {
                    op.p[common1] = otherTo;
                    if (from === to) {
                        op.action[ActionType.ListMove] = otherTo;
                    }
                }
                else {
                    return dest;
                }
            }
            else {
                if (from > otherFrom) {
                    // 注意++和--的操作，不能用前面的from+1来代替，因为这样的话每次from-1的值都是固定的，但是多次++后值应该是不一样的
                    // 因为前面已经做了error判断，因此这里的err直接忽略不做判断
                    op.p[common1] = op.p[common1] - 1;
                }
                if (from > otherTo) {
                    var tmpOpPath = op.p[common1];
                    op.p[common1] = tmpOpPath + 1;
                }
                else if (from === otherTo) {
                    if (otherFrom > otherTo) {
                        op.p[common1] = op.p[common1] + 1;
                        if (from === to) {
                            var tmpOpLm = op.action[ActionType.ListMove];
                            op.action[ActionType.ListMove] = tmpOpLm + 1;
                        }
                    }
                }
                // step2 : where am i going to put it?
                if (to > otherFrom) {
                    var tmpOpLm = op.action[ActionType.ListMove];
                    op.action[ActionType.ListMove] = tmpOpLm - 1;
                }
                else if (to === otherFrom) {
                    if (to > from) {
                        var tmpOpLm = op.action[ActionType.ListMove];
                        op.action[ActionType.ListMove] = tmpOpLm - 1;
                    }
                }
                if (to > otherTo) {
                    var tmpOpLm = op.action[ActionType.ListMove];
                    op.action[ActionType.ListMove] = tmpOpLm + 1;
                }
                else if (to === otherTo) {
                    // if we're both moving in the same direction, tie break
                    if ((otherTo > otherFrom && to > from) ||
                        (otherTo < otherFrom && to < from)) {
                        if (opType === TransformType.RIGHT) {
                            var index = op.action[ActionType.ListMove];
                            op.action[ActionType.ListMove] = index + 1;
                        }
                    }
                    else {
                        var tmpOpLm = op.action[ActionType.ListMove];
                        if (to > from) {
                            op.action[ActionType.ListMove] = tmpOpLm + 1;
                        }
                        else if (to === otherFrom) {
                            // 这一句永远不会进来，因为进到这里otherTo == otherFrom 最开始的if就不会进来，但是和js统一，先不删
                            op.action[ActionType.ListMove] = tmpOpLm - 1;
                        }
                    }
                }
            }
        }
    }
    else if (judgeActionType$1(op, ActionType.ListInsert) &&
        !judgeActionType$1(op, ActionType.ListDelete) &&
        commonOprand) {
        // 是个插入操作, li
        var otherFrom = otherCommonPath;
        // li操作的path最后一个key应该是int型
        var opCommonPath = op.p[common1];
        var from = opCommonPath;
        var otherTo = other.action[ActionType.ListMove];
        if (from > otherFrom) {
            op.p[common1] = from - 1;
        }
        if (from > otherTo) {
            var tmpOpPath = op.p[common1];
            op.p[common1] = tmpOpPath + 1;
        }
    }
    else if (judgeActionType$1(op, ActionType.Move)) {
        // 判断op[common1]是否是个int，如果不是int则不需要处理冲突
        var opCommonPath = op.p[common1];
        if (isNumber$1(opCommonPath)) {
            var lmTo = other.action[ActionType.ListMove];
            if (otherCommonPath === opCommonPath) {
                if (opType === TransformType.LEFT) {
                    op.p[common1] = lmTo;
                }
                else {
                    return dest;
                }
            }
            else if (otherCommonPath < opCommonPath && lmTo < opCommonPath) ;
            else if (otherCommonPath > opCommonPath && lmTo > opCommonPath) ;
            else if (otherCommonPath < opCommonPath && opCommonPath <= lmTo) {
                op.p[common1] = opCommonPath - 1;
            }
            else if (otherCommonPath > opCommonPath && opCommonPath >= lmTo) {
                op.p[common1] = opCommonPath + 1;
            }
        }
    }
    else {
        var otherFrom = otherCommonPath;
        var otherTo = other.action[ActionType.ListMove];
        var opCommonPath = op.p[common1];
        if (isNumber$1(opCommonPath)) {
            var from = opCommonPath;
            if (from === otherFrom) {
                op.p[common1] = otherTo;
            }
            else {
                if (from > otherFrom) {
                    op.p[common1] = from - 1;
                }
                var tmpOpPath = op.p[common1];
                if (from > otherTo) {
                    op.p[common1] = tmpOpPath + 1;
                }
                else if (from === otherTo && otherFrom > otherTo) {
                    op.p[common1] = tmpOpPath + 1;
                }
            }
        }
    }
    dest = append(dest, op);
    return dest;
}
function ldTransform(dest, common1, common2, commonOprand, other, op, opType) {
    var lenA = op.p.length;
    var lenB = other.p.length;
    // 如果action有na，则长度+1
    if (judgeActionType$1(op, ActionType.NumberAdd)) {
        lenA++;
    }
    if (judgeActionType$1(op, ActionType.Move)) {
        var opSourcePath = op.p;
        var opTargetPath = op.action[ActionType.Move];
        // opSourcePath对opTargetPath的影响
        var newOpTargetPath = opTargetPath.slice(0);
        var opCommon1 = getCommonPrefix$1(opSourcePath, opTargetPath);
        if (opCommon1 > 0 && opSourcePath.length < opTargetPath.length) {
            if (isNumber$1(opSourcePath[opCommon1]) &&
                isNumber$1(opTargetPath[opCommon1])) {
                var opSourceKey = opSourcePath[opCommon1];
                var opTargetKey = opTargetPath[opCommon1];
                if (opSourceKey <= opTargetKey) {
                    newOpTargetPath[opCommon1] = opTargetKey + 1;
                }
            }
        }
        var finalOpSourcePath = opSourcePath.slice(0);
        var finalOpTargetPath = opTargetPath.slice(0);
        var otherSourcePath = other.p;
        // 判断otherSourcePath对opSourcePath的影响
        var opCommon3 = getCommonPrefix$1(otherSourcePath, opSourcePath);
        if (opCommon3 > 0 && otherSourcePath.length <= opSourcePath.length) {
            if (isNumber$1(otherSourcePath[opCommon3]) &&
                isNumber$1(opSourcePath[opCommon3])) {
                var otherSourceKey = otherSourcePath[opCommon3];
                var opSourceKey = opSourcePath[opCommon3];
                if (otherSourceKey < opSourceKey) {
                    finalOpSourcePath[opCommon3] = opSourceKey - 1;
                }
                else if (otherSourceKey === opSourceKey) {
                    // path一致,或者otherSourcePath是opSourcePath的daddy，要移动的点已被删除
                    return dest;
                }
            }
        }
        // 如果opSourcePath是otherSourcePath的父节点，需要更新value的值
        if (isSubPath$1(opSourcePath, otherSourcePath) &&
            opSourcePath.length < otherSourcePath.length) {
            // 拷贝一份other
            var oc = clone$1(other);
            var newPath = other.p.slice(op.p.length);
            oc.p = newPath;
            var dataRaw = clone$1(op.action[ActionType.MvValue]);
            var result = apply(dataRaw, [oc]);
            op.action[ActionType.MvValue] = result;
        }
        // 判断otherSourcePath对opTargetPath的影响
        var opCommon4 = getCommonPrefix$1(otherSourcePath, newOpTargetPath);
        if (opCommon4 > 0 && otherSourcePath.length <= newOpTargetPath.length) {
            if (isNumber$1(otherSourcePath[opCommon4]) &&
                isNumber$1(newOpTargetPath[opCommon4])) {
                var otherSourceKey = otherSourcePath[opCommon4];
                var newOpTargetKey = newOpTargetPath[opCommon4];
                if (otherSourceKey < newOpTargetKey) {
                    finalOpTargetPath[opCommon4] =
                        finalOpTargetPath[opCommon4] - 1;
                }
                else if (otherSourceKey === newOpTargetKey) {
                    if (otherSourcePath.length < newOpTargetPath.length) {
                        // 要移动去的点已被删除
                        op.p = finalOpSourcePath;
                        delete op.action[ActionType.Move];
                        op.action[ActionType.ListDelete] = op.action[ActionType.MvValue];
                        delete op.action[ActionType.MvValue];
                        dest = append(dest, op);
                        return dest;
                    }
                }
            }
        }
        op.p = finalOpSourcePath;
        op.action[ActionType.Move] = finalOpTargetPath;
        dest = append(dest, op);
        return dest;
    }
    // 说明other的path为空[]，这是个非法operation
    if (common1 === -1) {
        return dest;
    }
    var opCommonPath;
    var otherCommonPath;
    if (common1 >= 0) {
        if (!isNumber$1(other.p[common1]) || !isNumber$1(op.p[common1])) {
            throw new Error('invalid ld op, the last element should be number');
        }
        otherCommonPath = other.p[common1];
        opCommonPath = op.p[common1];
    }
    var offset = otherCommonPath;
    var from = opCommonPath;
    if (judgeActionType$1(op, ActionType.ListMove)) {
        if (commonOprand) {
            if (op.p[common1] === other.p[common1]) {
                return dest; // 要移动的已经被删除了
            }
        }
        if (!isNumber$1(op.action[ActionType.ListMove])) {
            throw new Error('lm should be number');
        }
        var to = op.action[ActionType.ListMove];
        if (offset < to || (offset === to && from < to)) {
            // 删除的地方在要移动到的地方的前面, 位置要-1
            op.action[ActionType.ListMove] = to - 1;
        }
    }
    if (offset < from) {
        op.p[common1] = from - 1;
    }
    else if (offset === from) {
        if (lenB < lenA) {
            // 我们的操作正好在已经删除的字符串上面，因此只能返回空操作
            return dest;
        }
        else if (judgeActionType$1(op, ActionType.ListDelete)) {
            // if 是个replace操作
            if (judgeActionType$1(op, ActionType.ListInsert)) {
                // 我们要进行一个replace操作，other把删除做了，我们只需要insert即可
                delete op.action[ActionType.ListDelete];
                dest = append(dest, op);
                return dest;
            }
            else {
                return dest;
            }
        }
    }
    dest = append(dest, op);
    return dest;
}
function liTransform(dest, common1, common2, commonOprand, other, op, opType) {
    // mv的特殊处理
    if (judgeActionType$1(op, ActionType.Move)) {
        var opSourcePath = op.p;
        var opTargetPath = op.action[ActionType.Move];
        // opSourcePath对opTargetPath的影响
        var newOpTargetPath = opTargetPath.slice(0);
        var opCommon1 = getCommonPrefix$1(opSourcePath, opTargetPath);
        if (opCommon1 > 0 && opSourcePath.length < opTargetPath.length) {
            if (isNumber$1(opSourcePath[opCommon1]) &&
                isNumber$1(opTargetPath[opCommon1])) {
                var opSourceKey = opSourcePath[opCommon1];
                var opTargetKey = opTargetPath[opCommon1];
                if (opSourceKey <= opTargetKey) {
                    newOpTargetPath[opCommon1] = opTargetKey + 1;
                }
            }
        }
        var finalOpSourcePath = opSourcePath.slice(0);
        var finalOpTargetPath = opTargetPath.slice(0);
        var otherSourcePath = other.p;
        // 判断otherSourcePath对opSourcePath的影响
        var opCommon3 = getCommonPrefix$1(otherSourcePath, opSourcePath);
        if (opCommon3 > 0 && otherSourcePath.length <= opSourcePath.length) {
            if (isNumber$1(otherSourcePath[opCommon3]) &&
                isNumber$1(opSourcePath[opCommon3])) {
                var otherSourceKey = otherSourcePath[opCommon3];
                var opSourceKey = opSourcePath[opCommon3];
                if (otherSourceKey <= opSourceKey) {
                    finalOpSourcePath[opCommon3] = opSourceKey + 1;
                }
            }
        }
        // 如果opSourcePath是otherSourcePath的父节点，要更新value的值
        if (isSubPath$1(opSourcePath, otherSourcePath) &&
            opSourcePath.length < otherSourcePath.length) {
            // 拷贝一份other
            var oc = clone$1(other);
            var newPath = other.p.slice(op.p.length);
            oc.p = newPath;
            var dataRaw = clone$1(op.action[ActionType.MvValue]);
            var result = apply(dataRaw, [oc]);
            op.action[ActionType.MvValue] = result;
        }
        // 判断otherSourcePath对opTargetPath的影响
        var opCommon4 = getCommonPrefix$1(otherSourcePath, newOpTargetPath);
        if (opCommon4 > 0 && otherSourcePath.length <= newOpTargetPath.length) {
            if (isNumber$1(otherSourcePath[opCommon4]) &&
                isNumber$1(newOpTargetPath[opCommon4])) {
                var otherSourceKey = otherSourcePath[opCommon4];
                var newOpTargetKey = newOpTargetPath[opCommon4];
                if (otherSourceKey < newOpTargetKey) {
                    finalOpTargetPath[opCommon4] =
                        finalOpTargetPath[opCommon4] + 1;
                }
                else if (otherSourceKey === newOpTargetKey) {
                    if (otherSourcePath.length === newOpTargetPath.length &&
                        opType === TransformType.LEFT) ;
                    else {
                        finalOpTargetPath[opCommon4] =
                            finalOpTargetPath[opCommon4] + 1;
                    }
                }
            }
        }
        op.p = finalOpSourcePath;
        op.action[ActionType.Move] = finalOpTargetPath;
        dest = append(dest, op);
        return dest;
    }
    // 说明other的path为[],是个不合法的op
    if (common1 === -1) {
        return dest;
    }
    var opCommonPath;
    var otherCommonPath;
    if (common1 >= 0) {
        if (!isNumber$1(other.p[common1]) || !isNumber$1(op.p[common1])) {
            console.warn('Invalid li, last element should be a number');
            dest = append(dest, op);
            return dest;
        }
        // 因为是li操作，所以path的最后一个必定要为int，否则出错
        otherCommonPath = parseInt(other.p[common1], 10);
        opCommonPath = parseInt(op.p[common1], 10);
    }
    opCommonPath = opCommonPath;
    otherCommonPath = otherCommonPath;
    // 当other插入的操作在op之前时
    if (otherCommonPath <= opCommonPath) {
        // 特殊处理一下如果op也是li的情况
        if (Object.keys(op.action).length === 1 &&
            judgeActionType$1(op, ActionType.ListInsert) &&
            otherCommonPath === opCommonPath) {
            // li vs li, left wins.
            if (opType === TransformType.RIGHT) {
                op.p[common1] = opCommonPath + 1;
            }
        }
        else {
            op.p[common1] = opCommonPath + 1;
        }
    }
    if (commonOprand && judgeActionType$1(op, ActionType.ListMove)) {
        // 获取要移动到的idx
        var key = op.action[ActionType.ListMove];
        if (!isNumber$1(key)) {
            throw new Error('Invalid list move arguments, should be number');
        }
        // 获取B插入字符的位置
        var keyOther = otherCommonPath;
        if (keyOther <= key) {
            // 如果插入的位置在要移动的位置的前面，那么插入的位置要+1
            op.action[ActionType.ListMove] = key + 1;
        }
    }
    dest = append(dest, op);
    return dest;
}
// other: ld+li, op:其他
function ldLiTransform(dest, common1, common2, commonOprand, other, op, opType) {
    if (judgeActionType$1(op, ActionType.Move)) {
        var opSourcePath = op.p;
        var opTargetPath = op.action[ActionType.Move];
        // opSourcePath对opTargetPath的影响
        var newOpTargetPath = opTargetPath.slice(0);
        var opCommon1 = getCommonPrefix$1(opSourcePath, opTargetPath);
        if (opCommon1 > 0 && opSourcePath.length < opTargetPath.length) {
            if (isNumber$1(opSourcePath[opCommon1]) &&
                isNumber$1(opTargetPath[opCommon1])) {
                var opSourceKey = opSourcePath[opCommon1];
                var opTargetKey = opTargetPath[opCommon1];
                if (opSourceKey <= opTargetKey) {
                    newOpTargetPath[opCommon1] = opTargetKey + 1;
                }
            }
        }
        var finalOpSourcePath = opSourcePath.slice(0);
        var finalOpTargetPath = opTargetPath.slice(0);
        var otherSourcePath = other.p;
        // 判断otherSourcePath对opSourcePath的影响
        var opCommon3 = getCommonPrefix$1(otherSourcePath, opSourcePath);
        if (opCommon3 > 0 && otherSourcePath.length <= opSourcePath.length) {
            if (isNumber$1(otherSourcePath[opCommon3]) &&
                isNumber$1(opSourcePath[opCommon3])) {
                var otherSourceKey = otherSourcePath[opCommon3];
                var opSourceKey = opSourcePath[opCommon3];
                if (otherSourceKey === opSourceKey &&
                    otherSourcePath.length < opSourcePath.length) {
                    // otherSourcePath是opSourcePath的daddy时，要移动的点已被替换成其他结构，当成被删除了处理
                    return dest;
                }
                if (otherSourceKey === opSourceKey &&
                    otherSourcePath.length === opSourcePath.length) {
                    op.action[ActionType.MvValue] = other.action[ActionType.ListInsert];
                }
            }
        }
        // 如果opSourcePath是otherSourcePath的父节点，需要更新value的值
        if (isSubPath$1(opSourcePath, otherSourcePath) &&
            opSourcePath.length < otherSourcePath.length) {
            // 拷贝一份other
            var oc = clone$1(other);
            var newPath = other.p.slice(op.p.length);
            oc.p = newPath;
            var dataRaw = clone$1(op.action[ActionType.MvValue]);
            var result = apply(dataRaw, [oc]);
            op.action[ActionType.MvValue] = result;
        }
        // 判断otherSourcePath对opTargetPath的影响
        var opCommon4 = getCommonPrefix$1(otherSourcePath, newOpTargetPath);
        if (opCommon4 > 0 && otherSourcePath.length <= newOpTargetPath.length) {
            if (isNumber$1(otherSourcePath[opCommon4]) &&
                isNumber$1(newOpTargetPath[opCommon4])) {
                var otherSourceKey = otherSourcePath[opCommon4];
                var newOpTargetKey = newOpTargetPath[opCommon4];
                if (otherSourceKey === newOpTargetKey &&
                    otherSourcePath.length < newOpTargetPath.length) {
                    // 要移动去的结构已被改，当成删除处理
                    op.p = finalOpSourcePath;
                    delete op.action[ActionType.Move];
                    op.action[ActionType.ListDelete] = op.action[ActionType.MvValue];
                    delete op.action[ActionType.MvValue];
                    dest = append(dest, op);
                    return dest;
                }
            }
        }
        op.p = finalOpSourcePath;
        op.action[ActionType.Move] = finalOpTargetPath;
        dest = append(dest, op);
        return dest;
    }
    // op是非mv操作时
    // other是个li+ld操作，因此path的最后一个key一定是个int let opCommonPath;
    var opCommonPath;
    var otherCommonPath;
    // 表示op和other的最后一位key是否都是int
    var intPathFlag = true;
    if (common1 >= 0 &&
        !judgeActionType$1(op, ActionType.NumberAdd) &&
        !judgeActionType$1(other, ActionType.NumberAdd)) {
        if (!isNumber$1(op.p[common1])) {
            intPathFlag = false;
        }
        else {
            opCommonPath = parseInt(op.p[common1], 10);
        }
        if (!isNumber$1(other.p[common1])) {
            intPathFlag = false;
        }
        else {
            otherCommonPath = parseInt(other.p[common1], 10);
        }
    }
    // 粗略的判断两个op的路径是否有可能一致
    // 【踩坑记录】：不能用other.Path[common1] == op.Path[common1]因为可能传入的两个op的0一个是float64，一个是int，这样就不相等了
    if ((op.p.length === 0 && other.p.length === 0) ||
        (intPathFlag && opCommonPath === otherCommonPath)) {
        // 如果长度不一致，表明path不一致
        if (!commonOprand) {
            return dest;
        }
        else if (judgeActionType$1(op, ActionType.ListDelete)) {
            // 两个op要删除同一个路径下的元素
            // op也是个replace操作，如果type是left，以op为主，要在op中加入ld操作删除other插入的元素
            if (judgeActionType$1(op, ActionType.ListInsert) &&
                opType === TransformType.LEFT) {
                op.action[ActionType.ListDelete] = other.action[ActionType.ListInsert];
                dest = append(dest, op);
                return dest;
            }
            else {
                return dest;
            }
        }
    }
    dest = append(dest, op);
    return dest;
}
function mvTransform(dest, common1, common2, other, op, opType) {
    var otherSourcePath = other.p;
    var otherTargetPath = other.action[ActionType.Move];
    var newOtherTargetPath = otherTargetPath.slice(0);
    // 判断otherSourcePath是否会影响otherTargetPath，用newOtherTargetPath记录原始的值
    var otherCommon1 = getCommonPrefix$1(otherSourcePath, otherTargetPath);
    if (otherCommon1 > 0 && otherSourcePath.length < otherTargetPath.length) {
        if (isNumber$1(otherSourcePath[otherCommon1]) &&
            isNumber$1(otherTargetPath[otherCommon1])) {
            var otherSourceKey = otherSourcePath[otherCommon1];
            var otherTargetKey = otherTargetPath[otherCommon1];
            if (otherSourceKey <= otherTargetKey) {
                newOtherTargetPath[otherCommon1] = otherTargetKey + 1;
            }
        }
    }
    // 1. path长度一样，且path相等时，且都不为空
    // 注意na的时候长度lenA 不等于 len(op.path)
    if (op.p.length === other.p.length &&
        common1 >= 0 &&
        common1 === op.p.length - 1 &&
        op.p[common1] === other.p[common1]) {
        // 分情况讨论
        if (judgeActionType$1(op, ActionType.Move)) {
            // opTargetPath = otherTargetPath时，属于重复的op
            if (lodash_isequal(op.action[ActionType.Move], other.action[ActionType.Move])) ;
            else if (opType === TransformType.LEFT) {
                // 将other的mv的after填充到op的before
                op.p = otherTargetPath;
                dest = append(dest, op);
            }
            // 若为right，以other为主，op什么都不用做
            return dest;
        }
        else if (judgeActionType$1(op, ActionType.NumberAdd)) {
            // opSourcePath = otherTargetPath
            op.p = otherTargetPath;
            dest = append(dest, op);
            return dest;
        }
        else if (judgeActionType$1(op, ActionType.ListDelete)) {
            // 包含ld、ld+li, 所以这个else if必须放在li的上面，不然ld+li会进入li分支
            op.p = otherTargetPath;
            dest = append(dest, op);
            return dest;
        }
        else if (judgeActionType$1(op, ActionType.ListInsert)) {
            // 需要判断otherTargetPath是否对opSourcePath产生影响
            var opSourcePath = op.p;
            var pathCommon1 = getCommonPrefix$1(opSourcePath, otherTargetPath);
            var pathCommon2 = getCommonPrefix$1(otherTargetPath, opSourcePath);
            // 例子：opSourcePath:["A", 2, "B", 2], otherTargetPath:["A", 0] -> ["A", 3, "B", 2]
            if (pathCommon1 < 0 && pathCommon2 > 0) {
                if (isNumber$1(opSourcePath[pathCommon2]) &&
                    isNumber$1(otherTargetPath[pathCommon2])) {
                    var opSourceKey = opSourcePath[pathCommon2];
                    var otherTargetKey = otherTargetPath[pathCommon2];
                    if (otherTargetKey <= opSourceKey) {
                        opSourcePath[pathCommon2] = opSourceKey + 1;
                        op.p = opSourcePath;
                    }
                }
            }
            // do nothing
            dest = append(dest, op);
            return dest;
        }
        else if (judgeActionType$1(op, ActionType.ListMove)) {
            if (opType === TransformType.LEFT) {
                var newRightPath = [];
                for (var index = 0; index < op.p.length - 1; index++) {
                    newRightPath.push(op.p[index]);
                }
                newRightPath.push(op.action[ActionType.ListMove]);
                op.p = otherTargetPath;
                delete op.action[ActionType.ListMove];
                op.action[ActionType.Move] = newRightPath;
                op.action[ActionType.MvValue] = other.action[ActionType.MvValue];
                dest = append(dest, op);
            }
            return dest;
        }
        else if (judgeActionType$1(op, ActionType.ObjectDelete)) {
            // 包含od、od+oi
            var newPath = other.action[ActionType.Move];
            op.p = newPath;
            dest = append(dest, op);
            return dest;
        }
    }
    else if (op.p.length === other.p.length && common1 >= 1) {
        // 2. path长度相等，但最后一个值不相等
        // 查看other移走的是否在op要mv的前面，暂时不考虑object
        if (judgeActionType$1(op, ActionType.Move)) {
            var opSourcePath = op.p;
            var opTargetPath = op.action[ActionType.Move];
            var finalOpSourcePath = opSourcePath.slice(0);
            var finalOpTargetPath = opTargetPath.slice(0);
            // [1]. 判断otherSourcePath对opSourcePath是否有影响
            if (isNumber$1(otherSourcePath[common1]) &&
                isNumber$1(opSourcePath[common1])) {
                var otherSourceKey = otherSourcePath[common1];
                var opSourceKey = opSourcePath[common1];
                if (otherSourceKey < opSourceKey) {
                    finalOpSourcePath[common1] = opSourceKey - 1;
                }
            }
            // [2]. 判断otherSourcePath对opTargetPath是否有影响
            //  由于opTargetPath是在opSourcePath移走之后的位置，因此会受到opSourcePath的影响，需要对opTargetPath进行转化
            // 先判断opSourcePath是否对opTargetPath有影响，若有影响需要进行转化，转化为同一个基准下的坐标
            // 【注意】深拷贝, 直接newOpTargetPath := opTargetPath的话，newOpTargetPath的值改变，opTargetPath会跟着变
            var newOpTargetPath = opTargetPath.slice(0);
            var opCommon1 = getCommonPrefix$1(opSourcePath, newOpTargetPath);
            if (opCommon1 > 0 && opSourcePath.length < newOpTargetPath.length) {
                // 判断坐标
                var opSourceKey = opSourcePath[opCommon1];
                var opTargetKey = newOpTargetPath[opCommon1];
                if (isNumber$1(opSourceKey) && isNumber$1(opTargetKey)) {
                    opSourceKey = opSourceKey;
                    opTargetKey = opTargetKey;
                    if (opSourceKey <= opTargetKey) {
                        // 说明受到影响
                        newOpTargetPath[opCommon1] = opTargetKey + 1;
                    }
                }
            }
            // 判断otherSourcePath对newTargetPath的影响，
            // 例子：other.path["nodes", 4], opTargetPath:["nodes", 4, "children", 2]
            // newOpTargetPath: ["nodes", 5, "children", 2]
            // ->["nodes", 5, "children", 2]
            var otherSourceIsDaddy = false;
            var pathCommon1 = getCommonPrefix$1(otherSourcePath, newOpTargetPath);
            if (pathCommon1 > 0 && otherSourcePath.length <= newOpTargetPath.length) {
                // 例子
                if (isNumber$1(otherSourcePath[pathCommon1]) &&
                    isNumber$1(newOpTargetPath[pathCommon1])) {
                    var otherSourceKey = otherSourcePath[pathCommon1];
                    var newOpTargetKey = newOpTargetPath[pathCommon1];
                    if (otherSourceKey === newOpTargetKey) {
                        // 说明otherSourcePath是newOpTargetPath的daddy，需要替换前缀部分
                        var newPath = otherTargetPath.slice(0);
                        newPath = newPath.concat(newOpTargetPath.slice(pathCommon1 + 1));
                        // newPath = append(newPath, newOpTargetPath[pathCommon1+1:]...)
                        finalOpTargetPath = newPath;
                        otherSourceIsDaddy = true;
                    }
                    else if (otherSourceKey < newOpTargetKey) {
                        finalOpTargetPath[pathCommon1] =
                            finalOpTargetPath[pathCommon1] - 1;
                    }
                }
            }
            // [3]. 判断otherTargetPath对opSourcePath是否有影响，
            // 能证明如果otherTargetPath能影响opSourcePath，那么otherSourcePath对otherTargetPath没有影响
            // 因此不需要对otherTargetPath做基准转换
            var pathCommon3 = getCommonPrefix$1(otherTargetPath, opSourcePath);
            if (pathCommon3 > 0 && otherTargetPath.length < opSourcePath.length) {
                if (isNumber$1(otherTargetPath[pathCommon3]) &&
                    isNumber$1(opSourcePath[pathCommon3])) {
                    var otherTargetKey = otherTargetPath[pathCommon3];
                    var opSourceKey = opSourcePath[pathCommon3];
                    if (otherTargetKey <= opSourceKey) {
                        finalOpSourcePath[pathCommon3] =
                            finalOpSourcePath[pathCommon3] + 1;
                    }
                }
            }
            // 如果opSourcePath是otherTargetPath的父节点，需要更新value的值
            if (isSubPath$1(opSourcePath, newOtherTargetPath) &&
                opSourcePath.length < newOtherTargetPath.length) {
                // 新建op，使用li来更新
                var newSourcePath = newOtherTargetPath.slice(opSourcePath.length);
                // 新建一个op
                var oc = {
                    p: newSourcePath,
                    action: {
                        li: other.action[ActionType.MvValue]
                    }
                };
                // newSourcePath := []interface{}{}
                // newSourcePath = append(newSourcePath, "x")
                // newSourcePath = append(newSourcePath, newOtherTargetPath[len(opSourcePath):]...)
                // oc.Path = newSourcePath
                // oc.Action = make(map[string]interface{})
                // oc.Action[ListInsert] = other.Action[MvValue]
                var dataRaw = clone$1(op.action[ActionType.MvValue]);
                // data, _ := json.Marshal(op.Action[MvValue])
                // dataRawStr := `{"x":` + string(data) + `}`
                // dataRaw := make(map[string]interface{})
                // err := json.Unmarshal([]byte(dataRawStr), &dataRaw)
                // if err != nil{
                // 	return dest, fmt.Errorf("other:mv, op:mv, 将x塞进去时反序列化失败, err:%s", err)
                // }
                var result = apply(dataRaw, [oc]);
                op.action[ActionType.MvValue] = result;
            }
            // [4]. 判断otherTargetPath对opTargetPath是否有影响
            var pathCommon5 = getCommonPrefix$1(otherTargetPath, opTargetPath);
            //如果opSourcePath是otherTargetPath的daddy，那么下面这个if就不需要判断了
            if (pathCommon5 > 0 &&
                otherTargetPath.length <= opTargetPath.length &&
                !otherSourceIsDaddy) {
                if (isNumber$1(otherTargetPath[pathCommon5]) &&
                    isNumber$1(opTargetPath[pathCommon5])) {
                    var otherTargetKey = otherTargetPath[pathCommon5];
                    var opTargetKey = opTargetPath[pathCommon5];
                    if (otherTargetKey < opTargetKey) {
                        finalOpTargetPath[pathCommon5] =
                            finalOpTargetPath[pathCommon5] + 1;
                    }
                    else if (otherTargetKey === opTargetKey) {
                        if (otherTargetPath.length === opTargetPath.length &&
                            pathCommon5 === otherTargetPath.length - 1 &&
                            opType === TransformType.LEFT) ;
                        else {
                            finalOpTargetPath[pathCommon5] =
                                finalOpTargetPath[pathCommon5] + 1;
                        }
                    }
                }
            }
            op.p = finalOpSourcePath;
            op.action[ActionType.Move] = finalOpTargetPath;
            dest = append(dest, op);
            return dest;
        }
        else if (judgeActionType$1(op, ActionType.ListDelete)) {
            // 包含ld, ld+li
            // [1]. 判断otherSourcePath对opSourcePath的影响
            var opSourcePath = op.p;
            // 防止运算过程中值被改，新定义一个值用来存最终结果
            // finalOpSourcePath := []interface{}{}
            // finalOpSourcePath = append(finalOpSourcePath, opSourcePath...)
            var finalOpSourcePath = opSourcePath.slice(0);
            if (isNumber$1(opSourcePath[common1]) &&
                isNumber$1(otherSourcePath[common1])) {
                var opSourceKey = opSourcePath[common1];
                var otherSourceKey = otherSourcePath[common1];
                if (otherSourceKey < opSourceKey) {
                    finalOpSourcePath[common1] = opSourceKey - 1;
                }
            }
            // 判断otherSourcePath对otherTargetPath的影响
            var newOtherTargetPath_1 = otherTargetPath.slice(0);
            var pathCommon1 = getCommonPrefix$1(otherSourcePath, newOtherTargetPath_1);
            if (pathCommon1 > 0 &&
                otherSourcePath.length < newOtherTargetPath_1.length) {
                if (isNumber$1(otherSourcePath[pathCommon1]) &&
                    isNumber$1(newOtherTargetPath_1[pathCommon1])) {
                    var otherSourceKey = otherSourcePath[pathCommon1];
                    var newOtherTargetKey = newOtherTargetPath_1[pathCommon1];
                    if (otherSourceKey <= newOtherTargetKey) {
                        newOtherTargetPath_1[pathCommon1] = newOtherTargetKey + 1;
                    }
                }
            }
            // [2]. 判断newOtherTargetPath对opSourcePath的影响
            var pathCommon3 = getCommonPrefix$1(newOtherTargetPath_1, opSourcePath);
            var pathCommon4 = getCommonPrefix$1(opSourcePath, newOtherTargetPath_1);
            if (pathCommon3 > 0 && newOtherTargetPath_1.length < opSourcePath.length) {
                if (isNumber$1(newOtherTargetPath_1[pathCommon3]) &&
                    isNumber$1(opSourcePath[pathCommon3])) {
                    var newOtherTargetKey = newOtherTargetPath_1[pathCommon3];
                    var opSourceKey = opSourcePath[pathCommon3];
                    if (newOtherTargetKey <= opSourceKey) {
                        finalOpSourcePath[pathCommon3] =
                            finalOpSourcePath[pathCommon3] + 1;
                    }
                }
            }
            else if (pathCommon4 > 0 &&
                opSourcePath.length < newOtherTargetPath_1.length) {
                if (isNumber$1(opSourcePath[pathCommon4]) &&
                    isNumber$1(newOtherTargetPath_1[pathCommon4])) {
                    var newOtherTargetKey = newOtherTargetPath_1[pathCommon4];
                    var opSourceKey = opSourcePath[pathCommon4];
                    if (newOtherTargetKey === opSourceKey) {
                        // 说明opSourcePath是otherTargetPath的daddy，这种情况暂时的当成空op处理  标记一下:["value"]
                        // mv指令的action中的value带上要移动的节点值
                        var applyPath = otherTargetPath.slice(opSourcePath.length);
                        var newOc = {
                            action: {
                                li: other.action[ActionType.MvValue]
                            },
                            p: applyPath
                        };
                        var dataRaw = clone$1(op.action[ActionType.ListDelete]);
                        var result = apply(dataRaw, [newOc]);
                        op.action[ActionType.ListDelete] = result;
                    }
                }
            }
            op.p = finalOpSourcePath;
            dest = append(dest, op);
            return dest;
        }
        else if (judgeActionType$1(op, ActionType.NumberAdd) ||
            judgeActionType$1(op, ActionType.ListInsert)) {
            // [1]. 判断otherSourcePath对opSourcePath的影响
            var opSourcePath = op.p;
            var finalOpSourcePath = opSourcePath.slice(0);
            if (isNumber$1(opSourcePath[common1]) &&
                isNumber$1(otherSourcePath[common1])) {
                var opSourceKey = opSourcePath[common1];
                var otherSourceKey = otherSourcePath[common1];
                if (otherSourceKey < opSourceKey) {
                    finalOpSourcePath[common1] = opSourceKey - 1;
                }
            }
            // [2]. 判断otherTargetPath对opSourcePath的影响
            var pathCommon1 = getCommonPrefix$1(otherTargetPath, opSourcePath);
            if (pathCommon1 > 0 && otherTargetPath.length < opSourcePath.length) {
                if (isNumber$1(otherTargetPath[pathCommon1]) &&
                    isNumber$1(opSourcePath[pathCommon1])) {
                    var otherTargetKey = otherTargetPath[pathCommon1];
                    var opSourceKey = opSourcePath[pathCommon1];
                    if (otherTargetKey <= opSourceKey) {
                        finalOpSourcePath[pathCommon1] =
                            finalOpSourcePath[pathCommon1] + 1;
                    }
                }
            }
            op.p = finalOpSourcePath;
            dest = append(dest, op);
            return dest;
        }
        else if (judgeActionType$1(op, ActionType.ListMove)) {
            // [1]. 判断otherSourcePath对opSourcePath的影响
            var opSourcePath = op.p;
            var finalOpSourcePath = opSourcePath.slice(0);
            if (isNumber$1(opSourcePath[common1]) &&
                isNumber$1(otherSourcePath[common1])) {
                var opSourceKey = opSourcePath[common1];
                var otherSourceKey = otherSourcePath[common1];
                if (otherSourceKey < opSourceKey) {
                    finalOpSourcePath[common1] = opSourceKey - 1;
                }
                // [2].判断otherSourcePath对lm坐标的影响
                var opTargetKey = op.action[ActionType.ListMove];
                if (opSourceKey < opTargetKey) {
                    // 说明是从前->后移动
                    if (opTargetKey >= otherSourceKey) {
                        op.action[ActionType.ListMove] = opTargetKey - 1;
                    }
                }
                else {
                    // 后->前移动
                    if (opTargetKey > otherSourceKey) {
                        op.action[ActionType.ListMove] = opTargetKey - 1;
                    }
                }
            }
            // [3].判断otherTargetPath对opSourcePath的影响
            var pathCommon1 = getCommonPrefix$1(otherTargetPath, opSourcePath);
            if (pathCommon1 > 0 && otherTargetPath.length < opSourcePath.length) {
                if (isNumber$1(otherTargetPath[pathCommon1]) &&
                    isNumber$1(opSourcePath[pathCommon1])) {
                    var otherTargetKey = otherTargetPath[pathCommon1];
                    var opSourceKey = opSourcePath[pathCommon1];
                    if (otherTargetKey <= opSourceKey) {
                        finalOpSourcePath[pathCommon1] =
                            finalOpSourcePath[pathCommon1] + 1;
                    }
                }
            }
            op.p = finalOpSourcePath;
            dest = append(dest, op);
            return dest;
        }
    }
    else if (other.p.length < op.p.length &&
        common1 > 0 &&
        common1 === other.p.length - 1 &&
        op.p[common1] === other.p[common1]) {
        // 3. 当other包含op的路径时, otherPath的长度 < opPath的长度
        if (judgeActionType$1(op, ActionType.Move)) {
            var opSourcePath = op.p;
            var opTargetPath = op.action[ActionType.Move];
            // [1].由于otherSourcePath是opSourcePath的daddy，所以要用otherTargetPath替换掉opSourcePath的前面部分
            var newOpSourcePath = otherTargetPath.slice(0);
            newOpSourcePath = newOpSourcePath.concat(opSourcePath.slice(common1 + 1));
            op.p = newOpSourcePath;
            // [2]. otherSourcePath对opTargetPath的影响
            var pathCommon1 = getCommonPrefix$1(otherSourcePath, opTargetPath);
            if (pathCommon1 > 0 && otherSourcePath.length <= opTargetPath.length) {
                if (isNumber$1(otherSourcePath[pathCommon1]) &&
                    isNumber$1(opTargetPath[pathCommon1])) {
                    var otherSourceKey = otherSourcePath[pathCommon1];
                    var opTargetKey = opTargetPath[pathCommon1];
                    if (otherSourceKey < opTargetKey) {
                        opTargetPath[pathCommon1] = opTargetKey - 1;
                        op.action[ActionType.Move] = opTargetPath;
                    }
                    else if (otherSourceKey === opTargetKey) {
                        if (otherSourcePath.length < opTargetPath.length) {
                            // 替换前缀
                            var newOpTargetPath = otherTargetPath.slice(0);
                            newOpTargetPath = newOpTargetPath.concat(opTargetPath.slice(pathCommon1 + 1));
                            op.action[ActionType.Move] = newOpTargetPath;
                        }
                    }
                }
            }
            // [3]. 判断otherTargetPath对opTargetPath的影响
            var pathCommon3 = getCommonPrefix$1(otherTargetPath, opTargetPath);
            if (pathCommon3 > 0 && otherTargetPath.length <= opTargetPath.length) {
                if (isNumber$1(otherTargetPath[pathCommon3]) &&
                    isNumber$1(opTargetPath[pathCommon3])) {
                    var otherTargetKey = otherTargetPath[pathCommon3];
                    var opTargetKey = opTargetPath[pathCommon3];
                    if (otherTargetKey < opTargetKey) {
                        opTargetPath[pathCommon3] = opTargetKey + 1;
                        op.action[ActionType.Move] = opTargetPath;
                    }
                    else if (otherTargetKey === opTargetKey) {
                        if (otherTargetPath.length === opTargetPath.length &&
                            opType === TransformType.LEFT) ;
                        else {
                            opTargetPath[pathCommon3] = opTargetKey + 1;
                            op.action[ActionType.Move] = opTargetPath;
                        }
                    }
                }
            }
        }
        else if (judgeActionType$1(op, ActionType.NumberAdd) ||
            judgeActionType$1(op, ActionType.ListInsert) ||
            judgeActionType$1(op, ActionType.ListDelete) ||
            judgeActionType$1(op, ActionType.ListMove) ||
            judgeActionType$1(op, ActionType.ObjectInsert) ||
            judgeActionType$1(op, ActionType.ObjectDelete)) {
            var newOpSourcePath = otherTargetPath.slice(0);
            newOpSourcePath = newOpSourcePath.concat(op.p.slice(common1 + 1));
            op.p = newOpSourcePath;
        }
        dest = append(dest, op);
        return dest;
    }
    else if (op.p.length < other.p.length &&
        common2 >= 0 &&
        common2 === op.p.length - 1 &&
        op.p[common2] === other.p[common2]) {
        // 4. 当op包含other的路径时，otherPath的长度 > opPath的长度
        // 没有op=ld的分支，是因为会进前面ld/od分支的代码
        if (judgeActionType$1(op, ActionType.Move)) {
            var opSourcePath = op.p;
            var opTargetPath = op.action[ActionType.Move];
            // 判断otherSourcePath对otherTargetPath的影响
            var newOtherTargetPath_2 = otherTargetPath.slice(0);
            var otherCommon1_1 = getCommonPrefix$1(otherSourcePath, otherTargetPath);
            if (otherCommon1_1 > 0 && otherSourcePath.length < otherTargetPath.length) {
                if (isNumber$1(otherSourcePath[otherCommon1_1]) &&
                    isNumber$1(otherTargetPath[otherCommon1_1])) {
                    var otherSourceKey = otherSourcePath[otherCommon1_1];
                    var otherTargetkey = otherTargetPath[otherCommon1_1];
                    if (otherSourceKey <= otherTargetkey) {
                        newOtherTargetPath_2[otherCommon1_1] =
                            newOtherTargetPath_2[otherCommon1_1] + 1;
                    }
                }
            }
            // 需要判断otherTargetPath是佛是opSourcePath的子节点
            if (isSubPath$1(opSourcePath, otherTargetPath) &&
                opSourcePath.length < otherTargetPath.length) {
                // 此时otherSourcePath和otherTargetPath都是opSourcePath的子节点
                // 拷贝一份other
                var oc = clone$1(other);
                var newSourcePath = other.p.slice(op.p.length);
                oc.p = newSourcePath;
                var newTargetPath = otherTargetPath.slice(op.p.length);
                oc.action[ActionType.Move] = newTargetPath;
                var dataRaw = clone$1(op.action[ActionType.MvValue]);
                var result = apply(dataRaw, [oc]);
                op.action[ActionType.MvValue] = result;
            }
            else {
                // 只有otherSourcePath是opSourcePath的子节点，oc转化为ld操作
                // 新建一个op
                // oc := Operation{}
                var newSourcePath = other.p.slice(op.p.length);
                var oc = {
                    p: newSourcePath,
                    action: {
                        ld: other.action[ActionType.MvValue]
                    }
                };
                var dataRaw = clone$1(op.action[ActionType.MvValue]);
                var result = apply(dataRaw, [oc]);
                op.action[ActionType.MvValue] = result;
            }
            // [1]. 判断otherTargetPath对opSourcePath的影响
            var pathCommon1 = getCommonPrefix$1(otherTargetPath, opSourcePath);
            if (pathCommon1 > 0 && otherTargetPath.length <= opSourcePath.length) {
                if (isNumber$1(otherTargetPath[pathCommon1]) &&
                    isNumber$1(opSourcePath[pathCommon1])) {
                    var otherTargetKey = otherTargetPath[pathCommon1];
                    var opSourceKey = opSourcePath[pathCommon1];
                    if (otherTargetKey <= opSourceKey) {
                        opSourcePath[pathCommon1] = opSourceKey + 1;
                        op.p = opSourcePath;
                    }
                }
            }
            // 可以证明otherSourcePath对opTargetPath不会产生影响
            // [2]. otherTargetPath对opTargetPath的影响
            var pathCommon3 = getCommonPrefix$1(otherTargetPath, opTargetPath);
            if (pathCommon3 > 0 && otherTargetPath.length <= opTargetPath.length) {
                if (isNumber$1(otherTargetPath[pathCommon3]) &&
                    isNumber$1(opTargetPath[pathCommon3])) {
                    var otherTargetKey = otherTargetPath[pathCommon3];
                    var opTargetKey = opTargetPath[pathCommon3];
                    if (otherTargetKey < opTargetKey) {
                        opTargetPath[pathCommon3] = opTargetKey + 1;
                        op.action[ActionType.Move] = opTargetPath;
                    }
                    else if (otherTargetKey === opTargetKey) {
                        if (otherTargetPath.length === opTargetPath.length &&
                            opType === TransformType.LEFT) ;
                        else {
                            opTargetPath[pathCommon3] = opTargetKey + 1;
                            op.action[ActionType.Move] = opTargetPath;
                        }
                    }
                }
            }
        }
        else if (judgeActionType$1(op, ActionType.ListInsert)) {
            // otherSourcePath对opSourcePath没影响
            var opSourcePath = op.p;
            // [1].otherTargetPath对opSourcePath的影响
            var pathCommon1 = getCommonPrefix$1(otherTargetPath, opSourcePath);
            if (pathCommon1 > 0 && otherTargetPath.length <= opSourcePath.length) {
                if (isNumber$1(otherTargetPath[pathCommon1]) &&
                    isNumber$1(opSourcePath[pathCommon1])) {
                    var otherTargetKey = otherTargetPath[pathCommon1];
                    var opSourceKey = opSourcePath[pathCommon1];
                    if (otherTargetKey < opSourceKey) {
                        opSourcePath[pathCommon1] = opSourceKey + 1;
                        op.p = opSourcePath;
                    }
                    else if (otherTargetKey === opSourceKey) {
                        if (otherTargetPath.length === opSourcePath.length &&
                            opType === TransformType.LEFT) ;
                        else {
                            opSourcePath[pathCommon1] = opSourceKey + 1;
                            op.p = opSourcePath;
                        }
                    }
                }
            }
        }
        else if (judgeActionType$1(op, ActionType.ListMove)) {
            // 可以证明otherSourcePath对opSourcePath没有影响
            // 判断otherTargetPath对opSourcePath和lm值的影响
            var opSourcePath = op.p;
            var pathCommon1 = getCommonPrefix$1(otherTargetPath, opSourcePath);
            if (pathCommon1 > 0 && otherTargetPath.length <= opSourcePath.length) {
                if (isNumber$1(otherTargetPath[pathCommon1]) &&
                    isNumber$1(opSourcePath[pathCommon1])) {
                    var otherTargetKey = otherTargetPath[pathCommon1];
                    var opSourceKey = opSourcePath[pathCommon1];
                    if (otherTargetKey <= opSourceKey) {
                        opSourcePath[pathCommon1] = opSourceKey + 1;
                        op.p = opSourcePath;
                    }
                    // 判断是否对lm造成影响
                    if (otherTargetPath.length === opSourcePath.length) {
                        var opTargetKey = op.action[ActionType.ListMove];
                        var newOpTargetKey = opTargetKey;
                        // 需要判断lm是从前往后还是从后往前
                        if (opSourceKey < opTargetKey) {
                            if (otherTargetKey <= opTargetKey) {
                                newOpTargetKey = opTargetKey + 1;
                            }
                        }
                        else {
                            if (otherTargetKey < opTargetKey) {
                                newOpTargetKey = opTargetKey + 1;
                            }
                            else if (otherTargetKey === opTargetKey &&
                                opType === TransformType.RIGHT) {
                                newOpTargetKey = opTargetKey + 1;
                            }
                        }
                        op.action[ActionType.ListMove] = newOpTargetKey;
                    }
                }
            }
            dest = append(dest, op);
            return dest;
        }
        else if (judgeActionType$1(op, ActionType.ObjectDelete)) {
            // 需要更新od中的值
            return deleteTransform(dest, ActionType.ObjectDelete, other, op);
        }
    }
    else {
        if (judgeActionType$1(op, ActionType.Move)) {
            var opSourcePath = op.p;
            var opTargetPath = op.action[ActionType.Move];
            var otherSourcePath_1 = other.p;
            var otherTargetPath_1 = other.action[ActionType.Move];
            // 定义新的opSourcePath和opTargetPath来避免在前面修改了值之后影响后续的计算
            var finalOpSourcePath = opSourcePath.slice(0);
            var finalOpTargetPath = opTargetPath.slice(0);
            // 先判断otherSourcePath对otherTargetPath的影响
            var newOtherTargetPath_3 = otherTargetPath_1.slice(0);
            var pathCommon1 = getCommonPrefix$1(otherSourcePath_1, otherTargetPath_1);
            if (pathCommon1 > 0 && otherSourcePath_1.length < otherTargetPath_1.length) {
                if (isNumber$1(otherSourcePath_1[pathCommon1]) &&
                    isNumber$1(otherTargetPath_1[pathCommon1])) {
                    var otherSourceKey = otherSourcePath_1[pathCommon1];
                    var otherTargetKey = otherTargetPath_1[pathCommon1];
                    if (otherSourceKey <= otherTargetKey) {
                        newOtherTargetPath_3[pathCommon1] = otherTargetKey + 1;
                    }
                }
            }
            var newOpTargetPath = opTargetPath.slice(0);
            var pathCommon2 = getCommonPrefix$1(opSourcePath, opTargetPath);
            if (pathCommon2 > 0 && opSourcePath.length < opTargetPath.length) {
                if (isNumber$1(opSourcePath[pathCommon2]) &&
                    isNumber$1(opTargetPath[pathCommon2])) {
                    var opSourceKey = opSourcePath[pathCommon2];
                    var opTargetKey = opTargetPath[pathCommon2];
                    if (opSourceKey < opTargetKey) {
                        newOpTargetPath[pathCommon2] = opTargetKey + 1;
                    }
                }
            }
            // [1]. 判断otherSourcePath对opSourcePath的影响
            var pathCommon3 = getCommonPrefix$1(otherSourcePath_1, opSourcePath);
            if (pathCommon3 > 0 && otherSourcePath_1.length < opSourcePath.length) {
                if (isNumber$1(otherSourcePath_1[pathCommon3]) &&
                    isNumber$1(opSourcePath[pathCommon3])) {
                    var otherSourceKey = otherSourcePath_1[pathCommon3];
                    var opSourceKey = opSourcePath[pathCommon3];
                    if (otherSourceKey < opSourceKey) {
                        finalOpSourcePath[pathCommon3] = opSourceKey - 1;
                    }
                }
            }
            // [2]. 判断otherSourcePath对opTargetPath的影响, 基准不一样，需要用newOpTargetPath
            var otherSourceIdDaddy = false;
            if (isSubPath$1(otherSourcePath_1, newOpTargetPath) &&
                otherSourcePath_1.length < newOpTargetPath.length) {
                var newPath = otherTargetPath_1.slice(0);
                newPath = newPath.concat(opTargetPath.slice(otherSourcePath_1.length));
                //还需要判断finalOpSourcePath对newPath的影响
                var finalCommon1 = getCommonPrefix$1(finalOpSourcePath, newPath);
                if (finalCommon1 > 0 && finalOpSourcePath.length <= newPath.length) {
                    if (isNumber$1(finalOpSourcePath[finalCommon1]) &&
                        isNumber$1(newPath[finalCommon1])) {
                        var finalOpSourceKey = finalOpSourcePath[finalCommon1];
                        var newPathKey = newPath[finalCommon1];
                        if (finalOpSourceKey < newPathKey) {
                            newPath[finalCommon1] = newPathKey - 1;
                        }
                    }
                }
                finalOpTargetPath = newPath;
                otherSourceIdDaddy = true;
            }
            else {
                var pathCommon5 = getCommonPrefix$1(otherSourcePath_1, newOpTargetPath);
                if (pathCommon5 > 0 &&
                    otherSourcePath_1.length <= newOpTargetPath.length) {
                    if (isNumber$1(otherSourcePath_1[pathCommon5]) &&
                        isNumber$1(newOpTargetPath[pathCommon5])) {
                        var otherSourceKey = otherSourcePath_1[pathCommon5];
                        var newOpTargetKey = newOpTargetPath[pathCommon5];
                        if (otherSourceKey < newOpTargetKey) {
                            finalOpTargetPath[pathCommon5] =
                                opTargetPath[pathCommon5] - 1;
                        }
                        else if (otherSourceKey === newOpTargetKey) {
                            if (otherSourcePath_1.length < newOpTargetPath.length) {
                                var newPath = otherTargetPath_1.slice(0);
                                newPath = newPath.concat(opTargetPath.slice(pathCommon5 + 1));
                                finalOpTargetPath = newPath;
                            }
                        }
                    }
                }
            }
            // [3]. 判断otherTargetPath对opSourcePath的影响，基准不一样，需要用newOtherTargetPath
            var pathCommon7 = getCommonPrefix$1(newOtherTargetPath_3, opSourcePath);
            if (pathCommon7 > 0 && newOtherTargetPath_3.length <= opSourcePath.length) {
                if (isNumber$1(newOtherTargetPath_3[pathCommon7]) &&
                    isNumber$1(opSourcePath[pathCommon7])) {
                    var newOtherTargetKey = newOtherTargetPath_3[pathCommon7];
                    var opSourceKey = opSourcePath[pathCommon7];
                    if (newOtherTargetKey <= opSourceKey) {
                        finalOpSourcePath[pathCommon7] = opSourceKey + 1;
                    }
                }
            }
            // 如果newOtherTargetPath是opSourcePath的子节点，需要更新value的值
            // 如果opSourcePath是otherTargetPath的父节点，需要更新value的值
            if (isSubPath$1(opSourcePath, newOtherTargetPath_3) &&
                opSourcePath.length < newOtherTargetPath_3.length) {
                // 新建op，使用li来更新
                // 新建一个op
                var newSourcePath = newOtherTargetPath_3.slice(opSourcePath.length);
                var oc = {
                    p: newSourcePath,
                    action: {
                        li: other.action[ActionType.MvValue]
                    }
                };
                var dataRaw = clone$1(op.action[ActionType.MvValue]);
                var result = apply(dataRaw, [oc]);
                op.action[ActionType.MvValue] = result;
            }
            // [4]. 判断otherTargetPath对opTargetPath的影响, 使用newOtherTargetPath与newOpTargetPath
            //如果otherSourcePath已经是newOpTargetPath的daddy时，下面的if无需判断
            var pathCommon9 = getCommonPrefix$1(newOtherTargetPath_3, newOpTargetPath);
            if (pathCommon9 > 0 &&
                newOtherTargetPath_3.length <= newOpTargetPath.length &&
                !otherSourceIdDaddy) {
                if (isNumber$1(newOtherTargetPath_3[pathCommon9]) &&
                    isNumber$1(newOpTargetPath[pathCommon9])) {
                    var newOtherTargetKey = newOtherTargetPath_3[pathCommon9];
                    var newOpTargetKey = newOpTargetPath[pathCommon9];
                    if (newOtherTargetKey < newOpTargetKey) {
                        finalOpTargetPath[pathCommon9] =
                            opTargetPath[pathCommon9] + 1;
                        op.action[ActionType.Move] = opTargetPath;
                    }
                    else if (newOtherTargetKey === newOpTargetKey) {
                        if (newOtherTargetPath_3.length === newOpTargetPath.length &&
                            opType === TransformType.LEFT) ;
                        else {
                            finalOpTargetPath[pathCommon9] =
                                opTargetPath[pathCommon9] + 1;
                        }
                    }
                }
            }
            op.p = finalOpSourcePath;
            op.action[ActionType.Move] = finalOpTargetPath;
        }
        else if (judgeActionType$1(op, ActionType.NumberAdd)) {
            var opSourcePath = op.p;
            var finalOpSourcePath = opSourcePath.slice(0);
            // [1]. otherSourcePath对opSourcePath的影响
            var pathCommon1 = getCommonPrefix$1(otherSourcePath, opSourcePath);
            if (pathCommon1 > 0 && otherSourcePath.length < opSourcePath.length) {
                if (isNumber$1(otherSourcePath[pathCommon1]) &&
                    isNumber$1(opSourcePath[pathCommon1])) {
                    var otherSourceKey = otherSourcePath[pathCommon1];
                    var opSourceKey = opSourcePath[pathCommon1];
                    if (otherSourceKey < opSourceKey) {
                        finalOpSourcePath[pathCommon1] = opSourceKey - 1;
                    }
                }
            }
            // [2].otherTargetPath对opSourcePath的影响
            var pathCommon3 = getCommonPrefix$1(newOtherTargetPath, opSourcePath);
            if (pathCommon3 > 0 && newOtherTargetPath.length <= opSourcePath.length) {
                if (isNumber$1(newOtherTargetPath[pathCommon3]) &&
                    isNumber$1(opSourcePath[pathCommon3])) {
                    var newOtherTargetKey = newOtherTargetPath[pathCommon3];
                    var opSourceKey = opSourcePath[pathCommon3];
                    if (newOtherTargetKey <= opSourceKey) {
                        finalOpSourcePath[pathCommon3] = opSourceKey + 1;
                    }
                }
            }
            op.p = finalOpSourcePath;
        }
        else if (judgeActionType$1(op, ActionType.ListDelete)) {
            // 包含ld, ld+li
            var opSourcePath = op.p;
            var finalOpSourcePath = opSourcePath.slice(0);
            // [1]. otherSourcePath对opSourcePath的影响
            var pathCommon1 = getCommonPrefix$1(otherSourcePath, opSourcePath);
            if (pathCommon1 > 0 && otherSourcePath.length < opSourcePath.length) {
                if (isNumber$1(otherSourcePath[pathCommon1]) &&
                    isNumber$1(opSourcePath[pathCommon1])) {
                    var otherSourceKey = otherSourcePath[pathCommon1];
                    var opSourceKey = opSourcePath[pathCommon1];
                    if (otherSourceKey < opSourceKey) {
                        finalOpSourcePath[pathCommon1] = opSourceKey - 1;
                    }
                }
            }
            // [2].otherTargetPath对opSourcePath的影响
            var pathCommon3 = getCommonPrefix$1(newOtherTargetPath, opSourcePath);
            if (pathCommon3 > 0 && newOtherTargetPath.length <= opSourcePath.length) {
                if (isNumber$1(newOtherTargetPath[pathCommon3]) &&
                    isNumber$1(opSourcePath[pathCommon3])) {
                    var newOtherTargetKey = newOtherTargetPath[pathCommon3];
                    var opSourceKey = opSourcePath[pathCommon3];
                    if (newOtherTargetKey <= opSourceKey) {
                        finalOpSourcePath[pathCommon3] = opSourceKey + 1;
                    }
                }
            }
            if (isSubPath$1(opSourcePath, newOtherTargetPath) &&
                opSourcePath.length < newOtherTargetPath.length) {
                // 标记["value"]
                var applyPath = otherTargetPath.slice(opSourcePath.length);
                var newOc = {
                    action: {
                        li: other.action[ActionType.MvValue]
                    },
                    p: otherTargetPath.slice(opSourcePath.length)
                };
                var dataRaw = clone$1(op.action[ActionType.ListDelete]);
                var result = apply(dataRaw, [newOc]);
                op.action[ActionType.ListDelete] = result;
            }
            op.p = finalOpSourcePath;
        }
        else if (judgeActionType$1(op, ActionType.ListInsert)) {
            var opSourcePath = op.p;
            var finalOpSourcePath = opSourcePath.slice(0);
            // [1]. otherSourcePath对opSourcePath的影响
            var pathCommon1 = getCommonPrefix$1(otherSourcePath, opSourcePath);
            if (pathCommon1 > 0 && otherSourcePath.length < opSourcePath.length) {
                if (isNumber$1(otherSourcePath[pathCommon1]) &&
                    isNumber$1(opSourcePath[pathCommon1])) {
                    var otherSourceKey = otherSourcePath[pathCommon1];
                    var opSourceKey = opSourcePath[pathCommon1];
                    if (otherSourceKey < opSourceKey) {
                        finalOpSourcePath[pathCommon1] = opSourceKey - 1;
                    }
                }
            }
            // [2].otherTargetPath对opSourcePath的影响
            var pathCommon3 = getCommonPrefix$1(newOtherTargetPath, opSourcePath);
            if (pathCommon3 > 0 && newOtherTargetPath.length <= opSourcePath.length) {
                if (isNumber$1(newOtherTargetPath[pathCommon3]) &&
                    isNumber$1(opSourcePath[pathCommon3])) {
                    var newOtherTargetKey = newOtherTargetPath[pathCommon3];
                    var opSourceKey = opSourcePath[pathCommon3];
                    if (newOtherTargetKey < opSourceKey) {
                        finalOpSourcePath[pathCommon3] = opSourceKey + 1;
                    }
                    else if (newOtherTargetKey === opSourceKey) {
                        if (newOtherTargetPath.length === opSourcePath.length &&
                            opType === TransformType.LEFT) ;
                        else {
                            finalOpSourcePath[pathCommon3] = opSourceKey + 1;
                        }
                    }
                }
            }
            op.p = finalOpSourcePath;
        }
        else if (judgeActionType$1(op, ActionType.ListMove)) {
            var opSourcePath = op.p;
            var finalOpSourcePath = opSourcePath.slice(0);
            var opTargetKey = op.action[ActionType.ListMove];
            var finalTargetKey = opTargetKey;
            // [1]. otherSourcePath对opSourcePath的影响
            var pathCommon1 = getCommonPrefix$1(otherSourcePath, opSourcePath);
            if (pathCommon1 > 0 && otherSourcePath.length < opSourcePath.length) {
                if (isNumber$1(otherSourcePath[pathCommon1]) &&
                    isNumber$1(opSourcePath[pathCommon1])) {
                    var otherSourceKey = otherSourcePath[pathCommon1];
                    var opSourceKey = opSourcePath[pathCommon1];
                    if (otherSourceKey <= opSourceKey) {
                        finalOpSourcePath[pathCommon1] = opSourceKey - 1;
                    }
                }
            }
            // 可以证明otherSourcePath若与opSourcePath有交集，长度并不相等，所以不用判断otherSourcePath对lm值的影响
            // [2] otherTargetPath对opSourcePath的影响
            var pathCommon3 = getCommonPrefix$1(newOtherTargetPath, opSourcePath);
            if (pathCommon3 > 0 && newOtherTargetPath.length <= opSourcePath.length) {
                if (isNumber$1(newOtherTargetPath[pathCommon3]) &&
                    isNumber$1(opSourcePath[pathCommon3])) {
                    var newOtherTargetKey = newOtherTargetPath[pathCommon3];
                    var opSourceKey = opSourcePath[pathCommon3];
                    if (newOtherTargetKey <= opSourceKey) {
                        finalOpSourcePath[pathCommon3] =
                            finalOpSourcePath[pathCommon3] + 1;
                    }
                    if (newOtherTargetPath.length === opSourcePath.length) {
                        // 判断对lm值的影响
                        // lm 前->后
                        if (opSourceKey < opTargetKey) {
                            if (newOtherTargetKey <= opTargetKey) {
                                finalTargetKey++;
                            }
                        }
                        else {
                            // 后->前
                            if (newOtherTargetKey < opTargetKey) {
                                finalTargetKey++;
                            }
                            else if (newOtherTargetKey === opTargetKey) {
                                if (opType === TransformType.RIGHT) {
                                    finalTargetKey++;
                                }
                            }
                        }
                    }
                }
            }
            op.p = finalOpSourcePath;
            op.action[ActionType.ListMove] = finalTargetKey;
        }
        else if (judgeActionType$1(op, ActionType.ObjectDelete)) {
            var opSourcePath = op.p;
            var finalSourcePath = opSourcePath.slice(0);
            var newOtherTargetPath_4 = otherTargetPath.slice(0);
            // 判断otherSourcePath对otherTargetPath的影响，需要转化
            var otherCommon1_2 = getCommonPrefix$1(otherSourcePath, otherTargetPath);
            if (otherCommon1_2 > 0 && otherSourcePath.length < otherTargetPath.length) {
                if (isNumber$1(otherSourcePath[otherCommon1_2]) &&
                    isNumber$1(otherTargetPath[otherCommon1_2])) {
                    var otherSourceKey = otherSourcePath[otherCommon1_2];
                    var otherTargetKey = otherTargetPath[otherCommon1_2];
                    if (otherSourceKey <= otherTargetKey) {
                        newOtherTargetPath_4[otherCommon1_2] =
                            newOtherTargetPath_4[otherCommon1_2] + 1;
                    }
                }
            }
            // [1]. otherSourcePath对opSourcePath的影响
            var pathCommon1 = getCommonPrefix$1(otherSourcePath, opSourcePath);
            if (pathCommon1 > 0 && otherSourcePath.length < opSourcePath.length) {
                if (isNumber$1(otherSourcePath[pathCommon1]) &&
                    isNumber$1(opSourcePath[pathCommon1])) {
                    var otherSourceKey = otherSourcePath[pathCommon1];
                    var opSourceKey = opSourcePath[pathCommon1];
                    if (otherSourceKey < opSourceKey) {
                        finalSourcePath[pathCommon1] =
                            finalSourcePath[pathCommon1] - 1;
                    }
                }
            }
            // [2]. 判断otherTargetPath对opSourcePath的坐标影响
            var pathCommon3 = getCommonPrefix$1(newOtherTargetPath_4, opSourcePath);
            if (pathCommon3 > 0 && newOtherTargetPath_4.length < opSourcePath.length) {
                if (isNumber$1(newOtherTargetPath_4[pathCommon3]) &&
                    isNumber$1(opSourcePath[pathCommon3])) {
                    var newOtherTargetKey = newOtherTargetPath_4[pathCommon3];
                    var opSourceKey = opSourcePath[pathCommon3];
                    if (newOtherTargetKey <= opSourceKey) {
                        finalSourcePath[pathCommon3] =
                            finalSourcePath[pathCommon3] + 1;
                    }
                }
            }
            else if (isSubPath$1(opSourcePath, newOtherTargetPath_4) &&
                opSourcePath.length < newOtherTargetPath_4.length) {
                // [2]. 判断otherTargetPath是否是opSourcePath的子节点，opSourcePath包含otherTargetPath，需要更新od的值
                return deleteTransform(dest, ActionType.ObjectDelete, other, op);
            }
            op.p = finalSourcePath;
        }
        else if (judgeActionType$1(op, ActionType.ObjectInsert)) {
            var opSourcePath = op.p;
            var finalSourcePath = opSourcePath.slice(0);
            var newOtherTargetPath_5 = otherTargetPath.slice(0);
            // 判断otherSourcePath对otherTargetPath的影响，需要转化
            var otherCommon1_3 = getCommonPrefix$1(otherSourcePath, otherTargetPath);
            if (otherCommon1_3 > 0 && otherSourcePath.length < otherTargetPath.length) {
                if (isNumber$1(otherSourcePath[otherCommon1_3]) &&
                    isNumber$1(otherTargetPath[otherCommon1_3])) {
                    var otherSourceKey = otherSourcePath[otherCommon1_3];
                    var otherTargetKey = otherTargetPath[otherCommon1_3];
                    if (otherSourceKey <= otherTargetKey) {
                        newOtherTargetPath_5[otherCommon1_3] =
                            newOtherTargetPath_5[otherCommon1_3] + 1;
                    }
                }
            }
            // [1]. otherSourcePath对opSourcePath的影响
            var pathCommon1 = getCommonPrefix$1(otherSourcePath, opSourcePath);
            if (pathCommon1 > 0 && otherSourcePath.length < opSourcePath.length) {
                if (isNumber$1(otherSourcePath[pathCommon1]) &&
                    isNumber$1(opSourcePath[pathCommon1])) {
                    var otherSourceKey = otherSourcePath[pathCommon1];
                    var opSourceKey = opSourcePath[pathCommon1];
                    if (otherSourceKey < opSourceKey) {
                        finalSourcePath[pathCommon1] =
                            finalSourcePath[pathCommon1] - 1;
                    }
                }
            }
            // [2]. 判断otherTargetPath对opSourcePath的坐标影响
            var pathCommon3 = getCommonPrefix$1(newOtherTargetPath_5, opSourcePath);
            if (pathCommon3 > 0 && newOtherTargetPath_5.length < opSourcePath.length) {
                if (isNumber$1(newOtherTargetPath_5[pathCommon3]) &&
                    isNumber$1(opSourcePath[pathCommon3])) {
                    var newOtherTargetKey = newOtherTargetPath_5[pathCommon3];
                    var opSourceKey = opSourcePath[pathCommon3];
                    if (newOtherTargetKey <= opSourceKey) {
                        finalSourcePath[pathCommon3] =
                            finalSourcePath[pathCommon3] + 1;
                    }
                }
            }
            op.p = finalSourcePath;
        }
    }
    dest = append(dest, op);
    return dest;
}
function deleteTransform(dest, operationType, other, op) {
    var oc = clone$1(other);
    var opSourcePath = op.p;
    // other是mv时，需要考虑otherSourcePath和otherTargetPath对ld/od值的影响
    if (judgeActionType$1(oc, ActionType.Move)) {
        var ocSourcePath = oc.p;
        var ocTargetPath = oc.action[ActionType.Move];
        // assert ocTypePath to be an array
        // if (ocTargetType)
        // 判断ocTargetPath是否受ocSourcePath的影响
        var newOcTargetPath = ocTargetPath.slice(0);
        var ocCommon1 = getCommonPrefix$1(ocSourcePath, ocTargetPath);
        if (ocCommon1 > 0 && ocSourcePath.length < ocTargetPath.length) {
            if (isNumber$1(ocSourcePath[ocCommon1]) &&
                isNumber$1(ocTargetPath[ocCommon1])) {
                var ocSourceKey = ocSourcePath[ocCommon1];
                var ocTargetKey = ocTargetPath[ocCommon1];
                if (ocSourceKey <= ocTargetKey) {
                    newOcTargetPath[ocCommon1] =
                        newOcTargetPath[ocCommon1] + 1;
                }
            }
        }
        if (pathMatches$1(ocSourcePath, opSourcePath)) {
            // [1]. 两个path一致，opSourcePath = ocTargetPath即可 TODO 由于限制了lenB>lenA，因此不存在这种情况
            op.p = ocTargetPath;
            dest = append(dest, op);
            return dest;
        }
        else if (isSubPath$1(ocSourcePath, opSourcePath)) {
            // oc.Path["A", 2], op.p["A", 2, "B", 2] TODO 由于限制了lenB>lenA，因此不存在这种情况
            var newOpSourcePath = ocTargetPath.slice(0);
            newOpSourcePath = newOpSourcePath.concat(opSourcePath.slice(opSourcePath.length));
            op.p = newOpSourcePath;
            dest = append(dest, op);
            return dest;
        }
        else if (isSubPath$1(opSourcePath, ocSourcePath) &&
            isSubPath$1(opSourcePath, ocTargetPath) &&
            opSourcePath.length < ocSourcePath.length &&
            opSourcePath.length < ocTargetPath.length) {
            // 例子oc: path["A", 2, "B", 2], mv: ["A", 2, "C", 1]
            // op: ["A", 2], ld: ["a1", "a2", "a3"]
            // 例2：op: path["A", 0], ld:[["a1", "a2"], ["b1", "b2"], ["c1", "c2"]]
            // other: path["A", 0, 1], mv: ["A", 0, 1, 0], value: "b"
            // 结果：【left/right】path: ["A", 0], ld: [["a1", "a2"], ["b1", "b2"], ["b", "c1", "c2"]]
            // 要更新子节点中的值
            // index := len(op.p)
            var index = op.p.length;
            var newOcTargetPath_1 = ocTargetPath.slice(index); // interface{}{}
            // newOcTargetPath = append(newOcTargetPath, ocTargetPath[index:]...)
            // oc.Path = newOcSourcePath
            oc.action[ActionType.Move] = newOcTargetPath_1;
        }
        else if (isSubPath$1(opSourcePath, ocSourcePath)) {
            //op: path["A", 2], oc[other]: path["A", 2, "B", 2] 当成删除，找到oc.Path下的元素，直接将其删除
            //例子：op: path["A", 2], ld: {"B": ["b0", "b1", "b2"]}
            //     other: path["A", 2, "B", 2], mv: ["A", 0], value: "b2"
            //     结果：path["A", 3], ld: {"B":["b0", "b1"]} + path["A", 0], ld: "b2"
            //更新ld中的内容
            var applyPath_1 = oc.p.slice(op.p.length);
            var newOp = {
                p: applyPath_1,
                action: {}
            };
            newOp.action[ActionType.ListDelete] = other.action[ActionType.MvValue];
            var dataRaw_1 = op.action[operationType];
            var result_1 = apply(dataRaw_1, [newOp]);
            op.action[operationType] = result_1;
            // 判断ocTargetPath对opSourcePath的坐标影响
            var pathCommon3 = getCommonPrefix$1(ocTargetPath, opSourcePath);
            if (pathCommon3 > 0 && ocTargetPath.length <= opSourcePath.length) {
                if (isNumber$1(ocTargetPath[pathCommon3]) &&
                    isNumber$1(opSourcePath[pathCommon3])) {
                    var ocTargetKey = ocTargetPath[pathCommon3];
                    var opSourceKey = opSourcePath[pathCommon3];
                    if (ocTargetKey <= opSourceKey) {
                        opSourcePath[pathCommon3] = opSourceKey + 1;
                        op.p = opSourcePath;
                    }
                }
            }
            // op: ld/ld+li/od/od+oi, other: mv
            if (opSourcePath.length < ocSourcePath.length &&
                !(isSubPath$1(opSourcePath, ocTargetPath) &&
                    opSourcePath.length < ocTargetPath.length)) {
                // 需要增加一个ld/od的op
                var newLdOp = {
                    p: ocTargetPath,
                    action: {}
                };
                if (judgeActionType$1(op, ActionType.ListDelete)) {
                    newLdOp.action[ActionType.ListDelete] = oc.action[ActionType.MvValue];
                }
                else if (judgeActionType$1(op, ActionType.ObjectDelete)) {
                    newLdOp.action[ActionType.ListDelete] = oc.action[ActionType.MvValue];
                }
                dest = append(dest, op);
                //需要判断newLdOp是否受到op的影响
                var actionLen = Object.keys(op.action).length;
                if (judgeActionType$1(op, ActionType.ListDelete) && actionLen === 1) {
                    //受影响情况: 1. 当op和newLdOp的path长度一致，最后一个是数字，且只有最后一个不同时
                    //	        2.  op的长度比newLdOp短
                    var opCommon1 = getCommonPrefix$1(op.p, newLdOp.p);
                    if (opCommon1 > 0 &&
                        op.p.length <= newLdOp.p.length) {
                        if (isNumber$1(op.p[opCommon1]) && isNumber$1(newLdOp.p[opCommon1])) {
                            var opKey = op.p[opCommon1];
                            var newLdOpKey = newLdOp.p[opCommon1];
                            if (opKey < newLdOpKey) {
                                newLdOp.p[opCommon1] = newLdOpKey - 1;
                            }
                        }
                    }
                }
                dest = append(dest, newLdOp);
                return dest;
            }
            dest = append(dest, op);
            return dest;
        }
        else if (isSubPath$1(opSourcePath, newOcTargetPath) &&
            opSourcePath.length < newOcTargetPath.length) {
            // 要删除的节点的子节点的值被改了，需要更新, 变成li/oi操作
            // 标记["value"]
            var applyPath_2 = ocTargetPath.slice(opSourcePath.length);
            var newOc = {
                p: applyPath_2,
                action: {}
            };
            if (operationType === ActionType.ListDelete) {
                newOc.action[ActionType.ListInsert] = oc.action[ActionType.MvValue];
            }
            else {
                // 在思维笔记场景下，由于mv的targetPath一定是针对数组的，因此od对应的也是li
                newOc.action[ActionType.ListInsert] = oc.action[ActionType.MvValue];
            }
            var dataRaw_2 = clone$1(op.action[operationType]);
            var result_2 = apply(dataRaw_2, [newOc]);
            op.action[operationType] = result_2;
            dest = append(dest, op);
            return dest;
        }
        else {
            // TODO 由于限制了lenB>lenA，所以ocSourcePath的长度大于opSourcePath的长度
            // ocSourcePath不会对opSourcePath造成影响
            // 判断ocSourcePath对opSourcePath的坐标影响
            var pathCommon1 = getCommonPrefix$1(ocSourcePath, opSourcePath);
            if (pathCommon1 > 0 && ocSourcePath.length <= opSourcePath.length) {
                if (isNumber$1(ocSourcePath[pathCommon1]) &&
                    isNumber$1(opSourcePath[pathCommon1])) {
                    var ocSourceKey = ocSourcePath[pathCommon1];
                    var opSourceKey = opSourcePath[pathCommon1];
                    if (ocSourceKey < opSourceKey) {
                        opSourcePath[pathCommon1] = opSourceKey - 1;
                        op.p = opSourcePath;
                    }
                }
            }
            // 判断ocTargetPath对opSourcePath的坐标影响
            var pathCommon3 = getCommonPrefix$1(ocTargetPath, opSourcePath);
            if (pathCommon3 > 0 && ocTargetPath.length <= opSourcePath.length) {
                if (isNumber$1(ocTargetPath[pathCommon3]) &&
                    isNumber$1(opSourcePath[pathCommon3])) {
                    var ocTargetKey = ocTargetPath[pathCommon3];
                    var opSourceKey = opSourcePath[pathCommon3];
                    if (ocTargetKey <= opSourceKey) {
                        opSourcePath[pathCommon3] = opSourceKey + 1;
                        op.p = opSourcePath;
                    }
                }
            }
        }
    }
    // 强行为path增加一个默认的path:"x"，同时也在originalStr里面插入"x"
    // let applyPath = ['data'];
    var applyPath = oc.p.slice(op.p.length);
    oc.p = applyPath;
    var dataRaw = op.action[operationType];
    var result = apply(dataRaw, [oc]);
    op.action[operationType] = result;
    dest = append(dest, op);
    return dest;
}

var transform = /*#__PURE__*/Object.freeze({
  transformComponent: transformComponent
});

var bootstrapTransform_1 = bootstrapTransform;
function bootstrapTransform(type, transformComponent, checkValidOp, append) {
  var transformComponentX = function(left, right, destLeft, destRight) {
    transformComponent(destLeft, left, right, 'left');
    transformComponent(destRight, right, left, 'right');
  };

  var transformX = type.transformX = function(leftOp, rightOp) {
    checkValidOp(leftOp);
    checkValidOp(rightOp);
    var newRightOp = [];

    for (var i = 0; i < rightOp.length; i++) {
      var rightComponent = rightOp[i];

      // Generate newLeftOp by composing leftOp by rightComponent
      var newLeftOp = [];
      var k = 0;
      while (k < leftOp.length) {
        var nextC = [];
        transformComponentX(leftOp[k], rightComponent, newLeftOp, nextC);
        k++;

        if (nextC.length === 1) {
          rightComponent = nextC[0];
        } else if (nextC.length === 0) {
          for (var j = k; j < leftOp.length; j++) {
            append(newLeftOp, leftOp[j]);
          }
          rightComponent = null;
          break;
        } else {
          // Recurse.
          var pair = transformX(leftOp.slice(k), nextC);
          for (var l = 0; l < pair[0].length; l++) {
            append(newLeftOp, pair[0][l]);
          }
          for (var r = 0; r < pair[1].length; r++) {
            append(newRightOp, pair[1][r]);
          }
          rightComponent = null;
          break;
        }
      }

      if (rightComponent != null) {
        append(newRightOp, rightComponent);
      }
      leftOp = newLeftOp;
    }
    return [leftOp, newRightOp];
  };

  // Transforms op with specified type ('left' or 'right') by otherOp.
  // apply(apply(snapshot, op1), transform(op2, op1, 'left')) == apply(apply(snapshot, op2), transform(op1, op2, 'right')).
  type.transform = function(op, otherOp, type) {
    if (!(type === 'left' || type === 'right'))
      throw new Error("type must be 'left' or 'right'");

    if (otherOp.length === 0) return op;

    if (op.length === 1 && otherOp.length === 1)
      return transformComponent([], op[0], otherOp[0], type);

    if (type === 'left')
      return transformX(op, otherOp)[0]; // newLeftOp
    else
      return transformX(otherOp, op)[1]; // newRightOp
  };
}

var text0 = createCommonjsModule(function (module) {
// DEPRECATED!
//
// This type works, but is not exported. Its included here because the JSON0
// embedded string operations use this library.


// A simple text implementation
//
// Operations are lists of components. Each component either inserts or deletes
// at a specified position in the document.
//
// Components are either:
//  {i:'str', p:100}: Insert 'str' at position 100 in the document
//  {d:'str', p:100}: Delete 'str' at position 100 in the document
//
// Components in an operation are executed sequentially, so the position of components
// assumes previous components have already executed.
//
// Eg: This op:
//   [{i:'abc', p:0}]
// is equivalent to this op:
//   [{i:'a', p:0}, {i:'b', p:1}, {i:'c', p:2}]

var text = module.exports = {
  name: 'text0',
  uri: 'http://sharejs.org/types/textv0',
  create: function (initial) {
    if ((initial != null) && typeof initial !== 'string') {
      throw new Error('Initial data must be a string');
    }
    return initial || '';
  }
};

/** Insert s2 into s1 at pos. */
var strInject = function (s1, pos, s2) {
  return s1.slice(0, pos) + s2 + s1.slice(pos);
};

/** Check that an operation component is valid. Throws if its invalid. */
var checkValidComponent = function (c) {
  if (typeof c.p !== 'number')
    throw new Error('component missing position field');

  if ((typeof c.i === 'string') === (typeof c.d === 'string'))
    throw new Error('component needs an i or d field');

  if (c.p < 0)
    throw new Error('position cannot be negative');
};

/** Check that an operation is valid */
var checkValidOp = function (op) {
  for (var i = 0; i < op.length; i++) {
    checkValidComponent(op[i]);
  }
};

/** Apply op to snapshot */
text.apply = function (snapshot, op) {
  var deleted;

  checkValidOp(op);
  for (var i = 0; i < op.length; i++) {
    var component = op[i];
    if (component.i != null) {
      snapshot = strInject(snapshot, component.p, component.i);
    } else {
      deleted = snapshot.slice(component.p, component.p + component.d.length);
      if (component.d !== deleted)
        throw new Error("Delete component '" + component.d + "' does not match deleted text '" + deleted + "'");

      snapshot = snapshot.slice(0, component.p) + snapshot.slice(component.p + component.d.length);
    }
  }
  return snapshot;
};

/**
 * Append a component to the end of newOp. Exported for use by the random op
 * generator and the JSON0 type.
 */
var append = text._append = function (newOp, c) {
  if (c.i === '' || c.d === '') return;

  if (newOp.length === 0) {
    newOp.push(c);
  } else {
    var last = newOp[newOp.length - 1];

    if (last.i != null && c.i != null && last.p <= c.p && c.p <= last.p + last.i.length) {
      // Compose the insert into the previous insert
      newOp[newOp.length - 1] = { i: strInject(last.i, c.p - last.p, c.i), p: last.p };

    } else if (last.d != null && c.d != null && c.p <= last.p && last.p <= c.p + c.d.length) {
      // Compose the deletes together
      newOp[newOp.length - 1] = { d: strInject(c.d, last.p - c.p, last.d), p: c.p };

    } else {
      newOp.push(c);
    }
  }
};

/** Compose op1 and op2 together */
text.compose = function (op1, op2) {
  checkValidOp(op1);
  checkValidOp(op2);
  var newOp = op1.slice();
  for (var i = 0; i < op2.length; i++) {
    append(newOp, op2[i]);
  }
  return newOp;
};

/** Clean up an op */
text.normalize = function (op) {
  var newOp = [];

  // Normalize should allow ops which are a single (unwrapped) component:
  // {i:'asdf', p:23}.
  // There's no good way to test if something is an array:
  // http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/
  // so this is probably the least bad solution.
  if (op.i != null || op.p != null) op = [op];

  for (var i = 0; i < op.length; i++) {
    var c = op[i];
    if (c.p == null) c.p = 0;

    append(newOp, c);
  }

  return newOp;
};

// This helper method transforms a position by an op component.
//
// If c is an insert, insertAfter specifies whether the transform
// is pushed after the insert (true) or before it (false).
//
// insertAfter is optional for deletes.
var transformPosition = function (pos, c, insertAfter) {
  // This will get collapsed into a giant ternary by uglify.
  if (c.i != null) {
    if (c.p < pos || (c.p === pos && insertAfter)) {
      return pos + c.i.length;
    } else {
      return pos;
    }
  } else {
    // I think this could also be written as: Math.min(c.p, Math.min(c.p -
    // otherC.p, otherC.d.length)) but I think its harder to read that way, and
    // it compiles using ternary operators anyway so its no slower written like
    // this.
    if (pos <= c.p) {
      return pos;
    } else if (pos <= c.p + c.d.length) {
      return c.p;
    } else {
      return pos - c.d.length;
    }
  }
};

// Helper method to transform a cursor position as a result of an op.
//
// Like transformPosition above, if c is an insert, insertAfter specifies
// whether the cursor position is pushed after an insert (true) or before it
// (false).
text.transformCursor = function (position, op, side) {
  var insertAfter = side === 'right';
  for (var i = 0; i < op.length; i++) {
    position = transformPosition(position, op[i], insertAfter);
  }

  return position;
};

// Transform an op component by another op component. Asymmetric.
// The result will be appended to destination.
//
// exported for use in JSON type
var transformComponent = text._tc = function (dest, c, otherC, side) {
  //var cIntersect, intersectEnd, intersectStart, newC, otherIntersect, s;

  checkValidComponent(c);
  checkValidComponent(otherC);

  if (c.i != null) {
    // Insert.
    append(dest, { i: c.i, p: transformPosition(c.p, otherC, side === 'right') });
  } else {
    // Delete
    if (otherC.i != null) {
      // Delete vs insert
      var s = c.d;
      if (c.p < otherC.p) {
        append(dest, { d: s.slice(0, otherC.p - c.p), p: c.p });
        s = s.slice(otherC.p - c.p);
      }
      if (s !== '')
        append(dest, { d: s, p: c.p + otherC.i.length });

    } else {
      // Delete vs delete
      if (c.p >= otherC.p + otherC.d.length)
        append(dest, { d: c.d, p: c.p - otherC.d.length });
      else if (c.p + c.d.length <= otherC.p)
        append(dest, c);
      else {
        // They overlap somewhere.
        var newC = { d: '', p: c.p };

        if (c.p < otherC.p)
          newC.d = c.d.slice(0, otherC.p - c.p);

        if (c.p + c.d.length > otherC.p + otherC.d.length)
          newC.d += c.d.slice(otherC.p + otherC.d.length - c.p);

        // This is entirely optional - I'm just checking the deleted text in
        // the two ops matches
        var intersectStart = Math.max(c.p, otherC.p);
        var intersectEnd = Math.min(c.p + c.d.length, otherC.p + otherC.d.length);
        var cIntersect = c.d.slice(intersectStart - c.p, intersectEnd - c.p);
        var otherIntersect = otherC.d.slice(intersectStart - otherC.p, intersectEnd - otherC.p);
        if (cIntersect !== otherIntersect)
          throw new Error('Delete ops delete different text in the same region of the document');

        if (newC.d !== '') {
          newC.p = transformPosition(newC.p, otherC);
          append(dest, newC);
        }
      }
    }
  }

  return dest;
};

var invertComponent = function (c) {
  return (c.i != null) ? { d: c.i, p: c.p } : { i: c.d, p: c.p };
};

// No need to use append for invert, because the components won't be able to
// cancel one another.
text.invert = function (op) {
  // Shallow copy & reverse that sucka.
  op = op.slice().reverse();
  for (var i = 0; i < op.length; i++) {
    op[i] = invertComponent(op[i]);
  }
  return op;
};

bootstrapTransform_1(text, transformComponent, checkValidOp, append);
});
var text0_1 = text0.name;
var text0_2 = text0.uri;
var text0_3 = text0.create;

var utils$1 = ( utils && undefined ) || utils;

var applyModule = ( apply$1 && undefined ) || apply$1;

var appendModule = ( append$1 && undefined ) || append$1;

var transformModule = ( transform && undefined ) || transform;

/*
 This is the implementation of the JSON OT type.

 Spec is here: https://github.com/josephg/ShareJS/wiki/JSON-Operations

 Note: This is being made obsolete. It will soon be replaced by the JSON2 type.
*/

/**
 * UTILITY FUNCTIONS
 */

/**
 * Checks if the passed object is an Array instance. Can't use Array.isArray
 * yet because its not supported on IE8.
 *
 * @param obj
 * @returns {boolean}
 */

var clone$2 = utils$1.clone;
var commonLengthForOps$2 = utils$1.commonLengthForOps;
var pathMatches$2 = utils$1.pathMatches;
var isArray$2 = utils$1.isArray;
var isObject$2 = utils$1.isObject;


var apply$2 = applyModule.apply;


var append$2 = appendModule.append;
var subtypes$1 = appendModule.subtypes;
var registerSubtype$1 = appendModule.registerSubtype;


var transformComponent$1 = transformModule.transformComponent;

/**
 * JSON OT Type
 * @type {*}
 */
var json = {
  name: 'json0',
  uri: 'http://sharejs.org/types/JSONv0'
};

// You can register another OT type as a subtype in a JSON document using
// the following function. This allows another type to handle certain
// operations instead of the builtin JSON type.
// var subtypes = {};
// json.registerSubtype = function (subtype) {
//  subtypes[subtype.name] = subtype;
//};

json.create = function (data) {
  // Null instead of undefined if you don't pass an argument.
  return data === undefined ? null : clone$2(data);
};

json.invertComponent = function (c) {
  var c_ = { p: c.p, action: {} };

  // handle subtype ops
  if (c.subType && c.subType.t && subtypes$1[c.subType.t]) {
    c_.subType = c_.subType || {};
    c_.subType.t = c.subType.t;
    c_.subType.o = subtypes$1[c.subType.t].invert(c.subType.o);
  }

  if (c.action && c.action.si !== void 0) c_.action.sd = c.action.si;
  if (c.action && c.action.sd !== void 0) c_.action.si = c.action.sd;
  if (c.action && c.action.oi !== void 0) c_.action.od = c.action.oi;
  if (c.action && c.action.od !== void 0) c_.action.oi = c.action.od;
  if (c.action && c.action.li !== void 0) c_.action.ld = c.action.li;
  if (c.action && c.action.ld !== void 0) c_.action.li = c.action.ld;
  if (c.action && c.action.na !== void 0) c_.action.na = -c.action.na;

  if (c.action && c.action.mv !== void 0) {
    c_.action.mv = c.p;
    c_.action.value = c.action.value;
    c_.p = c.action.mv;
  }

  if (c.action.lm !== void 0) {
    c_.action.lm = c.p[c.p.length - 1];
    c_.p = c.p.slice(0, c.p.length - 1).concat([c.action.lm]);
  }

  return c_;
};

json.invert = function (op) {
  var op_ = op.slice().reverse();
  var iop = [];
  for (var i = 0; i < op_.length; i++) {
    iop.push(json.invertComponent(op_[i]));
  }
  return iop;
};

json.checkValidOp = function (op) {
  for (var i = 0; i < op.length; i++) {
    if (!isArray$2(op[i].p)) throw new Error('Missing path');
  }
};

json.apply = apply$2;

// Helper to break an operation up into a bunch of small ops.
json.shatter = function (op) {
  var results = [];
  for (var i = 0; i < op.length; i++) {
    results.push([op[i]]);
  }
  return results;
};

// Helper for incrementally applying an operation to a snapshot. Calls yield
// after each op component has been applied.
json.incrementalApply = function (snapshot, op, _yield) {
  for (var i = 0; i < op.length; i++) {
    var smallOp = [op[i]];
    snapshot = json.apply(snapshot, smallOp);
    // I'd just call this yield, but thats a reserved keyword. Bah!
    _yield(smallOp, snapshot);
  }

  return snapshot;
};

// Checks if two paths, p1 and p2 match.
json.pathMatches = pathMatches$2;

json.append = append$2;

json.compose = function (op1, op2) {
  json.checkValidOp(op1);
  json.checkValidOp(op2);

  var newOp = clone$2(op1);

  for (var i = 0; i < op2.length; i++) {
    json.append(newOp, op2[i]);
  }

  return newOp;
};

json.normalize = function (op) {
  var newOp = [];

  op = isArray$2(op) ? op : [op];

  for (var i = 0; i < op.length; i++) {
    var c = op[i];
    if (c.p == null) c.p = [];

    json.append(newOp, c);
  }

  return newOp;
};

// Returns the common length of the paths of ops a and b

// Returns true if an op can affect the given path
json.canOpAffectPath = function (op, path) {
  return commonLengthForOps$2({ p: path }, op) != null;
};

json.transformComponent = transformComponent$1;

bootstrapTransform_1(json, json.transformComponent, json.checkValidOp, json.append);

/**
 * Register a subtype for string operations, using the text0 type.
 */


registerSubtype$1(text0);
var json0 = json;

var lodash_clonedeep = createCommonjsModule(function (module, exports) {
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  // Don't return `map.set` because it's not chainable in IE 11.
  map.set(pair[0], pair[1]);
  return map;
}

/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  // Don't return `set.add` because it's not chainable in IE 11.
  set.add(value);
  return set;
}

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array ? array.length : 0;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    getPrototype = overArg(Object.getPrototypeOf, Object),
    objectCreate = Object.create,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @param {boolean} [isFull] Specify a clone including symbols.
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
  var result;
  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      if (isHostObject(value)) {
        return object ? value : {};
      }
      result = initCloneObject(isFunc ? {} : value);
      if (!isDeep) {
        return copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, baseClone, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (!isArr) {
    var props = isFull ? getAllKeys(value) : keys(value);
  }
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
  });
  return result;
}

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var result = new buffer.constructor(buffer.length);
  buffer.copy(result);
  return result;
}

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
  return arrayReduce(array, addMapEntry, new map.constructor);
}

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
  return arrayReduce(array, addSetEntry, new set.constructor);
}

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    assignValue(object, key, newValue === undefined ? source[key] : newValue);
  }
  return object;
}

/**
 * Copies own symbol properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Creates an array of the own enumerable symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, cloneFunc, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object, isDeep, cloneFunc);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object, isDeep, cloneFunc);

    case symbolTag:
      return cloneSymbol(object);
  }
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, true, true);
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = cloneDeep;
});

var apply$3 = json0.apply, compose = json0.compose, transform$1 = json0.transform, invert = json0.invert;
var Node = /** @class */ (function () {
    function Node(parent, val, children) {
        this.parent = null;
        this.children = null;
        this.id = '';
        this.key = '';
        this.snapshot = '';
        invariant_1(val, 'Node value cannot be empty!');
        this.set([], val);
        this.id = v4_1();
        this.parent = parent;
        this.snapshot = lodash_clonedeep(val);
        this.children = children;
    }
    Node.transform = function (op1, otherOp, type) {
        if (type === void 0) { type = TransformType.LEFT; }
        return transform$1(op1, otherOp, type);
    };
    Node.compose = function (op1, op2) {
        return compose(op1, op2);
    };
    Node.invert = function (op) {
        return invert(op);
    };
    Node.prototype.apply = function (operations) {
        var newData = apply$3(this.snapshot, operations);
        this.set([], newData);
    };
    Node.prototype.get = function (path) {
        var _this = this;
        // return (this.children as Node[])[key as number];
        if (!path)
            return this.snapshot;
        return normalizeArgs(this, arguments, function (path) {
            var _ref = traverse(_this.snapshot, path);
            return _ref.elem[_ref.key];
        });
    };
    Node.prototype.set = function (path, val) {
        var _this = this;
        return normalizeArgs(this, arguments, function (p, val) {
            var _ref = traverse(_this.snapshot, p);
            var elem = _ref.elem;
            var key = _ref.key;
            var opts = [];
            if (elem.constructor === Array) {
                var tmpPath = p;
                tmpPath[tmpPath.length - 1] = parseInt(tmpPath[tmpPath.length - 1], 10);
                opts.push({
                    p: tmpPath,
                    action: { li: val }
                });
                if (typeof elem[key] !== 'undefined') {
                    opts.unshift({
                        p: p,
                        action: { ld: elem[key] }
                    });
                }
                elem[key] = val;
            }
            else if (typeof elem === 'object') {
                opts.push({
                    p: p,
                    action: { oi: val }
                });
                if (typeof elem[key] !== 'undefined') {
                    opts.unshift({
                        p: p,
                        action: { od: elem[key] }
                    });
                }
                elem[key] = val;
            }
            else {
                throw new Error('bad path');
            }
            return opts;
        });
    };
    Node.prototype.getSnapshot = function () {
        return this.snapshot;
    };
    Node.prototype.remove = function (path, len) {
        var _this = this;
        return normalizeArgs(this, arguments, function (path, len) {
            // if there is no len argument, then we are removing a single item from either a list or a hash
            if (len === null || len === undefined || typeof len === 'function') {
                var _ref = traverse(_this.snapshot, path);
                var elem = _ref.elem, key = _ref.key;
                var opts = [];
                if (typeof elem[key] === 'undefined') {
                    throw new Error('no element at that path');
                }
                if (elem.constructor === Array) {
                    var tmpPath = path;
                    tmpPath[tmpPath.length - 1] = parseInt(tmpPath[tmpPath.length - 1], 10);
                    opts.push({
                        p: tmpPath,
                        action: {
                            ld: elem[key]
                        }
                    });
                    elem.splice(key, 1);
                }
                else if (typeof elem === 'object') {
                    opts.push({
                        p: path,
                        action: {
                            od: elem[key]
                        }
                    });
                    delete elem[key];
                }
                else {
                    throw new Error('bad path');
                }
                return opts;
            }
            else {
                var pos = parseInt(path.pop(), 10);
                var _ref = traverse(_this.snapshot, path);
                var elem = _ref.elem, key = _ref.key;
                if (typeof elem[key] === 'string') {
                    var start = pos;
                    var length_1 = len;
                    var op = {
                        p: path.concat(pos),
                        action: {
                            sd: _ref.elem[_ref.key].slice(start, start + length_1)
                        }
                    };
                    elem[key] =
                        elem[key].substring(0, pos) + elem[key].substring(start + length_1);
                    return [op];
                }
                else if (elem[key].constructor === Array) {
                    var ops = [];
                    for (var i = pos; i < pos + len; i++) {
                        ops.push({
                            p: path.concat(pos),
                            action: {
                                ld: elem[key][i]
                            }
                        });
                        elem[key].splice(i, 1);
                    }
                    return ops;
                    // return this._submit(ops, cb);
                }
                else {
                    throw new Error('element at path does not support range');
                }
            }
        });
    };
    return Node;
}());

/* harmony default export */ __webpack_exports__["default"] = (Node);

//# sourceMappingURL=byted-ot-json.es5.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(71)))

/***/ }),

/***/ 1814:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(221)))

/***/ }),

/***/ 1815:
/***/ (function(module, exports, __webpack_require__) {

// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = __webpack_require__(1587).Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES


/***/ }),

/***/ 1816:
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1587).Buffer
var MD5 = __webpack_require__(1921)

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey


/***/ }),

/***/ 1817:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = exports;

curve.base = __webpack_require__(3669);
curve.short = __webpack_require__(3670);
curve.mont = __webpack_require__(3671);
curve.edwards = __webpack_require__(3672);


/***/ }),

/***/ 1818:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var asn1 = __webpack_require__(3688)
var aesid = __webpack_require__(3700)
var fixProc = __webpack_require__(3701)
var ciphers = __webpack_require__(1928)
var compat = __webpack_require__(2207)
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen)
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(741).Buffer))

/***/ }),

/***/ 1819:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isMentionEnabled = isMentionEnabled;
exports.isCommentEnabled = isCommentEnabled;
exports.isHighlightEnabled = isHighlightEnabled;

var _get = __webpack_require__(83);

var _get2 = _interopRequireDefault(_get);

var _envHelper = __webpack_require__(147);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @ 是否开启
 * @description 在配置中心 app_config 中配置
 */
function isMentionEnabled() {
  return _envHelper.isDev || !!(0, _get2.default)(window, 'User.appConfig.mindnoteMentionEnabled');
}
/**
 * 评论是否开启
 * @description 在配置中心 app_config 中配置
 */
function isCommentEnabled() {
  return _envHelper.isDev || !!(0, _get2.default)(window, 'User.appConfig.mindnoteCommentEnabled');
}
/**
 * 高亮是否开启
 * @description 在配置中心 app_config 中配置
 */
function isHighlightEnabled() {
  return _envHelper.isDev || !!(0, _get2.default)(window, 'User.appConfig.mindnoteHighlightEnabled');
}

/***/ }),

/***/ 1820:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getCursorInfo = getCursorInfo;
exports.getNodeInfo = getNodeInfo;
exports.getNodeInfoBySelection = getNodeInfoBySelection;
exports.blurSelection = blurSelection;
exports.findContentEditable = findContentEditable;
exports.findNodeWrapper = findNodeWrapper;
exports.isSelectionCrossNode = isSelectionCrossNode;
exports.setCursorPosition = setCursorPosition;
exports.focus = focus;
exports.getTextNodes = getTextNodes;
/**
 * 编辑节点的selectors
 */
var CONTENTEDITABLE_SELECTORS = exports.CONTENTEDITABLE_SELECTORS = [
/* title */
'div.mindnote-title-content[contenteditable]',
/* 内容 */
'div.content[contenteditable]',
/* 描述 */
'div.note[contenteditable]'];
/**
 * 获取一个锚的光标信息
 * @param $target
 * @param $parent
 * @param offset
 */
function getCursorInfo($target, $parent, offset) {
    var prevNode = null;
    /* 若目标节点是编辑区域直接子节点 */
    if ($target.parent().is(CONTENTEDITABLE_SELECTORS.join(','))) {
        prevNode = $target.get(0).previousSibling;
        /* 若目标节点是编辑区域中的样式填充节点 */
    } else if ($target.parent().parent().is(CONTENTEDITABLE_SELECTORS.join(','))) {
        prevNode = $target.parent().get(0).previousSibling;
    }
    while (prevNode != null) {
        if (prevNode instanceof Text) {
            offset += prevNode.wholeText.length;
        } else if (prevNode instanceof HTMLElement) {
            offset += prevNode.innerText.length;
        }
        prevNode = prevNode.previousSibling;
    }
    return Object.assign({}, getNodeInfo($parent), {
        offset: offset
    });
}
/**
 * 获取节点信息
 */
function getNodeInfo($editor) {
    var nodeType = '';
    if ($editor.hasClass('content')) {
        nodeType = 'content';
    } else if ($editor.hasClass('note')) {
        nodeType = 'note';
    } else if ($editor.hasClass('mindnote-title-content')) {
        nodeType = 'title';
    }
    var $wrapper = $editor.parents('.node:first');
    var nodeId = $wrapper.attr('id') || '';
    return {
        node: $editor.get(0),
        nodeId: nodeId,
        nodeType: nodeType
    };
}
/**
 * 当前用 selection 获取节点信息
 */
function getNodeInfoBySelection() {
    var selection = window.getSelection();
    if (selection && selection.anchorNode) {
        var $anchor = $(selection.anchorNode);
        var $editor = findContentEditable($anchor);
        if (!$editor) {
            return null;
        }
        return getNodeInfo($editor);
    }
    return null;
}
/**
 * blur
 */
function blurSelection() {
    var selection = window.getSelection();
    if (selection && selection.anchorNode) {
        var $anchor = $(selection.anchorNode);
        var $editor = findContentEditable($anchor);
        if ($editor) {
            $editor.blur();
            selection.removeAllRanges();
        }
    }
}
/**
 * 找到节点相关的 contenteditable
 */
function findContentEditable($el) {
    if ($el.is('.mindnote-title-content, .note, .content')) {
        return $el;
    }
    var parent = $el.parents('.mindnote-title-content:first, .note:first, .content:first');
    if (parent.length > 0) {
        return parent;
    } else {
        // 如果点到了 contenteditable 的外面
        var children = $el.children('.mindnote-title-content, .note, .content');
        if (children.length === 1) {
            return children;
        }
        return null;
    }
}
function findNodeWrapper($el) {
    return $el.is('.node-wrapper') ? $el : $el.parents('.node-wrapper:first');
}
/**
 * 判断选区是否跨节点
 */
function isSelectionCrossNode() {
    var selection = window.getSelection();
    if (!selection || selection.isCollapsed) {
        return false;
    }
    var range = selection.getRangeAt(0);
    var startElement = findContentEditable($(range.startContainer));
    var endElement = findContentEditable($(range.endContainer));
    if (!startElement || !endElement) {
        return false;
    }
    var startNodeWrapper = findNodeWrapper(startElement);
    var endNodeWrapper = findNodeWrapper(endElement);
    if (startNodeWrapper.length === 0 || endNodeWrapper.length === 0) {
        return false;
    }
    return startNodeWrapper.data('id') !== endNodeWrapper.data('id');
}
/**
 * 设置光标的位置
 * @param content 内容输入框
 * @param position 位置的索引
 */
function setCursorPosition(content, position) {
    focus(content);
    if (content.text() === '') {
        return;
    }
    if (!position) {
        return;
    }
    var textNodes = getTextNodes(content);
    if (window.getSelection) {
        // 开始查找光标应该在哪个元素上
        // 光标开始节点、结束节点、开始位置、结束位置
        var startNode = void 0;
        var endNode = void 0;
        var startOffset = 0;
        var endOffset = 0;
        var currentIndex = 0;
        for (var i = 0; i < textNodes.length; i++) {
            var textNode = textNodes[i];
            var textLength = textNode.nodeValue ? textNode.nodeValue.length : 0;
            if (position.start >= currentIndex && position.start <= currentIndex + textLength) {
                // 在当前行上
                startNode = textNode;
                startOffset = position.start - currentIndex;
                if (!position.end) {
                    break;
                }
            }
            if (position.end && position.end >= currentIndex && position.end <= currentIndex + textLength) {
                // 在当前行上
                endNode = textNode;
                endOffset = position.end - currentIndex;
                break;
            }
            currentIndex += textLength;
        }
        if (startNode || endNode) {
            // 重新设置选区
            var range = document.createRange();
            if (startNode) {
                range.setStart(startNode, startOffset);
            }
            if (endNode) {
                range.setEnd(endNode, endOffset);
            }
            var selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
        }
    }
}
/**
 * 让输入框获取焦点
 * 不是直接的调用focus()，因为在safari或iOS webview中，界面会晃动
 * @param editor
 */
function focus(editor) {
    if (navigator.platform) {
        var plat = navigator.platform.toLowerCase();
        if (plat === 'iphone' || plat === 'ipad') {
            var range = document.createRange();
            range.setStart('length' in editor ? editor[0] : editor, 0);
            var selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
            return;
        }
    }
    editor.focus();
}
function getTextNodes(editor) {
    var childNodes = editor[0].childNodes;
    var textNodes = [];
    // 获取所有的文本节点
    function buildTextNodes(nodes) {
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node.nodeName === '#text') {
                textNodes.push(node);
            } else if (node.childNodes && node.childNodes.length > 0) {
                buildTextNodes(node.childNodes);
            }
        }
    }
    buildTextNodes(childNodes);
    return textNodes;
}

/***/ }),

/***/ 1894:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _io = __webpack_require__(1895);

Object.keys(_io).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _io[key];
    }
  });
});

/***/ }),

/***/ 1895:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IO = exports.NetworkState = exports.Channel = exports.axios = undefined;

var _defineProperty2 = __webpack_require__(9);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _objectWithoutProperties2 = __webpack_require__(38);

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _typeof2 = __webpack_require__(82);

var _typeof3 = _interopRequireDefault(_typeof2);

var _isEqual2 = __webpack_require__(748);

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _isObject2 = __webpack_require__(74);

var _isObject3 = _interopRequireDefault(_isObject2);

var _isEmpty2 = __webpack_require__(454);

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _isFunction2 = __webpack_require__(303);

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _forEach2 = __webpack_require__(343);

var _forEach3 = _interopRequireDefault(_forEach2);

var _uniqueId2 = __webpack_require__(350);

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _isArray2 = __webpack_require__(53);

var _isArray3 = _interopRequireDefault(_isArray2);

var _reduce2 = __webpack_require__(230);

var _reduce3 = _interopRequireDefault(_reduce2);

var _get2 = __webpack_require__(83);

var _get3 = _interopRequireDefault(_get2);

var _values2 = __webpack_require__(562);

var _values3 = _interopRequireDefault(_values2);

var _axios2 = __webpack_require__(351);

var _axios3 = _interopRequireDefault(_axios2);

var _$bytedSocketBr = __webpack_require__(794);

var _$bytedSocketBr2 = _interopRequireDefault(_$bytedSocketBr);

var _util = __webpack_require__(354);

var _string = __webpack_require__(163);

var _envHeaderHelper = __webpack_require__(459);

var _userHelper = __webpack_require__(65);

var _createRequest = __webpack_require__(579);

var _suiteHelper = __webpack_require__(52);

var _tea = __webpack_require__(42);

var _tea2 = _interopRequireDefault(_tea);

var _sdkCompatibleHelper = __webpack_require__(45);

var _performanceLogHelper = __webpack_require__(458);

var _generateHeadersHelper = __webpack_require__(347);

var _asyncHelper = __webpack_require__(569);

var _generateRequestIdHelper = __webpack_require__(457);

var _$constants = __webpack_require__(5);

var _sliApiMap = __webpack_require__(309);

var _$moirae = __webpack_require__(449);

var _$moirae2 = _interopRequireDefault(_$moirae);

var _networkHelper = __webpack_require__(113);

var _apiUrls = __webpack_require__(307);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var createRequest = (0, _sdkCompatibleHelper.isSupportOfflineEdit)() ? _createRequest.createSupportOfflineRequest : _createRequest.createNormalRequest;
var ioInstance = void 0;
var headers = { 'Content-Type': 'application/json' };
var envHeader = (0, _envHeaderHelper.getEnvHeader)();
if (envHeader) {
    headers.Env = envHeader;
}
function logNetworkErrorIfAny(message) {
    if (!message) {
        return;
    }
    var engineType = message.type;
    var messageType = message.data ? message.data.type : '';
    if ((engineType || messageType) && message.code === undefined) {
        (0, _tea2.default)('client_network_no_error_code', {
            engineType: engineType,
            messageType: messageType
        });
    }
    var log = function log(prefix, data) {
        var requestId = data.request_id;
        console.log("Network Error (" + prefix + ": " + (requestId || 'null') + "):", data);
    };
    if (message.code !== undefined && message.code !== 0) {
        log('System', message);
    } else if (message.data) {
        var code = message.data.code;
        if (code !== undefined && code !== 0) {
            log('Service', message);
        }
    }
}
var axios = exports.axios = _axios3.default.create({
    headers: headers,
    withCredentials: true
});
axios.interceptors.request.use(function (request) {
    var requestId = (0, _generateRequestIdHelper.generateRequestId)();
    if (request.data && request.data.context) {
        requestId = request.data.context.request_id || requestId;
        request.data.context.request_id = requestId;
    }
    var generatedHeaderObj = (0, _generateHeadersHelper.generateHeaders)({ requestId: requestId });
    var mergedHeaders = Object.assign({}, generatedHeaderObj, request.headers);
    // request，由于部分老代码调用没有经过paramsFixMiddleware处理，而直接调用request，所以这里额外做一次url前缀处理
    if (_apiUrls.API_PREFIX && request.url.indexOf('/api/') === 0) {
        request.url = _apiUrls.API_PREFIX + request.url;
    }
    return Object.assign(request, { headers: mergedHeaders });
});
axios.interceptors.response.use(function (response) {
    logNetworkErrorIfAny(response.data);
    // @todo 需要对应的错误处理，例如 5 需要login
    if (response.data.code !== 0) {
        return Promise.reject(response);
    }
    try {
        var config = response.config;
        (0, _performanceLogHelper.transformPerformanceData)({
            url: config.url,
            data: {
                code: response.data.code,
                request_id: config.headers['Request-Id'],
                data: config.data
            }
        });
    } catch (e) {
        console.error(e);
    }
    return response.data;
}, function (error) {
    var config = error.config;
    var code = -1;
    if (error.response) {
        code = error.response.data.code || code;
    } else {
        // 在设置触发错误的请求时发生了错误
        console.log('Error', error.message);
    }
    try {
        (0, _performanceLogHelper.transformPerformanceData)({
            url: config.url,
            data: {
                code: code,
                request_id: error.config.headers['Request-Id'],
                data: config.data
            }
        });
    } catch (e) {
        console.error(e);
    }
});
var SOCKET_HEARBEAT = '2';
var RCE_VERSION = 2;
// 需要静默重试的错误码
var RETRY_ERROR_CODE_ARR = [1015, 9998];
var Channel = exports.Channel = undefined;
(function (Channel) {
    Channel["http"] = "http";
    Channel["socket"] = "socket";
})(Channel || (exports.Channel = Channel = {}));
var NetworkState = exports.NetworkState = undefined;
(function (NetworkState) {
    NetworkState["online"] = "online";
    NetworkState["offline"] = "offline";
})(NetworkState || (exports.NetworkState = NetworkState = {}));

var IO = exports.IO = function () {
    function IO(options) {
        var _this = this;

        (0, _classCallCheck3.default)(this, IO);

        /**
         *  当前通道
         */
        this.channel = Channel.http;
        /**
         * 当前状态
         */
        this.state = NetworkState.online;
        /**
         * 心跳间隔，60s
         */
        this.heartbeatInterval = 6000;
        /**
         * 请求超时时间
         * 15s没收到accept就认为提交失败，网络异常
         * 会主动断开连接，并且重连
         */
        this.timeout = 15000;
        /**
         * frontier上传最大字节
         */
        this.maxSize = 1500;
        this.channelStateCallbacks = [];
        /**
         * 获取token的次数，用于失败重试间隔
         */
        this.fetchTokenTimes = 0;
        /**
         * 请求自增id
         */
        this.reqId = 1;
        /**
         * 所有的请求缓存，通过reqId对应
         */
        this.requests = {};
        /**
         * 记录发送了watch的entity
         */
        this.watchEntitys = [];
        // 监听的资源实体
        // 以 `${type}:${token}`为下标
        // value存储 entity, heartbeat配置信息
        this.entities = {};
        this.ticket = '';
        this.scheduleHB = null;
        this.hbErrorCount = 0;
        this.counter = 0;
        // Map<`${type}:${token}`, Map<string, EntityObserver>>;
        this.entityObservers = new Map();
        this.rewatch = function () {
            _$moirae2.default.info(_this.getLogMessage('socket connected'));
            for (var key in _this.entities) {
                var info = key.split(':');
                if (info[1] === (0, _suiteHelper.getToken)()) {
                    _this.watchEntity({
                        type: info[0],
                        token: info[1]
                    });
                    break;
                }
            }
        };
        this.scheduleFinallyCb = function () {
            _$moirae2.default.info(_this.getLogMessage('scheule next heartbeat'));
            _this.hbErrorCount = 0;
            _this.schedule();
        };
        this.scheduleCatchCb = function (e) {
            _this.hbErrorCount += 1;
            if (_this.hbErrorCount % 3 === 0) {
                _$moirae2.default.error({
                    key: 'client_suit_hearbeat_error',
                    hbErrorCount: _this.hbErrorCount
                });
                _$moirae2.default.count('ee.docs.sheet.client_suit_hearbeat_error');
            }
            _$moirae2.default.error(_this.getLogMessage("hearbeat error: " + e));
            _$moirae2.default.error(_this.getLogMessage('scheule next heartbeat'));
            _this.schedule();
            // 心跳异常
            console.error('心跳异常:', e.message, e);
        };
        this.handleOnline = function () {
            _$moirae2.default.info(_this.getLogMessage('online'));
            _this.channel = Channel.http;
            _this.state = NetworkState.online;
            _this.triggerChannelState();
            _this.fetchTimout && clearTimeout(_this.fetchTimout);
            _this.connectSocket();
        };
        this.handleOffline = function () {
            _$moirae2.default.info(_this.getLogMessage('offline'));
            _this.state = NetworkState.offline;
            _this.triggerChannelState();
        };
        this.handleUnload = function () {
            var entities = (0, _values3.default)(_this.entities).map(function (v) {
                return v.entity;
            });
            _this.unRegister(entities);
            _this.socket && _this.socket.close();
        };
        for (var key in options) {
            this[key] = options[key];
        }
        if (!this.memberId) {
            var memberId = parseInt((0, _get3.default)(window, 'DATA.clientVars.data.user_info.member_id'), 10);
            this.memberId = memberId || (0, _util.getDeviceId)(new Date().valueOf());
            this.ticket = (0, _get3.default)(window, 'User.wsTicket');
        }
        this.baseInfo = {
            member_id: this.memberId,
            user_ticket: this.ticket
        };
        if (options && options.autoConnect !== false) {
            this.connectSocket();
        }
        window.addEventListener('online', this.handleOnline);
        window.addEventListener('offline', this.handleOffline);
        // 退出时关闭socket链接
        window.addEventListener('unload', this.handleUnload);
        this.hasListener = true; // 监听标志位，避免重复监听
        this.schedule();
    }

    (0, _createClass3.default)(IO, [{
        key: "register",

        /**
         * 注册entity，做好本地配置
         * @param {array|object} entities 资源列表， { type, token } = entity
         * @param {object} options 配置
         *        message: message相关配置
         *          handler: message处理函数
         *          filter: message过滤器, 可以为 function or entity
         *        heartbeat: 心跳相关配置，可以为空
         */
        value: function register(entity, options) {
            var key = IO.keyOf(entity);
            this.entities[key] = {
                entity: entity,
                message: options.message,
                heartbeats: (0, _reduce3.default)(options.heartbeats, function (prev, heartbeat, name) {
                    prev[name] = IO.initHeartbeat(heartbeat);
                    return prev;
                }, {}),
                acceptWatchHandler: options.acceptWatchHandler
            };
            if (!this.hasListener) {
                window.addEventListener('online', this.handleOnline);
                window.addEventListener('offline', this.handleOffline);
                window.addEventListener('unload', this.handleUnload);
                this.hasListener = true;
            }
        }
        /**
         * 手动调用watch
         * @param entity
         */

    }, {
        key: "watch",
        value: function watch(entity) {
            console.log('!watch entity', entity);
            this.watchEntitys.push(entity);
            this.watchEntity(entity);
        }
    }, {
        key: "watchEntity",
        value: function watchEntity(entity) {
            var _this2 = this;

            if (!entity) return;
            var entityKey = IO.keyOf(entity);
            return this.request({
                type: 'COLLABROOM',
                data: {
                    type: 'WATCH',
                    entities: [entity]
                }
            }).then(function (message) {
                // 需要检查message内，watch的entity是否watch成功
                var acceptedEntities = (0, _get3.default)(message, 'data.entities') || [];
                var curAcceptedEntity = acceptedEntities.find(function (_ref) {
                    var type = _ref.type,
                        token = _ref.token;

                    if (type === entity.type && token === entity.token) {
                        return true;
                    }
                    return false;
                });
                if (!curAcceptedEntity || curAcceptedEntity.succ !== 1) {
                    throw new Error("watching entity failed! " + entity.type + " " + entity.token);
                }
                var registeredEntity = _this2.entities[entityKey];
                if (registeredEntity && registeredEntity.acceptWatchHandler) {
                    registeredEntity.acceptWatchHandler(message);
                }
            });
        }
        /**
         * unwatch将删除entity的所有配置，并发送unwatch请求到服务端
         */

    }, {
        key: "unRegister",
        value: function unRegister(entities) {
            var _this3 = this;

            entities = (0, _isArray3.default)(entities) ? entities : [entities];
            entities.forEach(function (entity) {
                var key = IO.keyOf(entity);
                console.log('delete entities key:', key);
                _this3.watchEntitys = _this3.watchEntitys.filter(function (item) {
                    return item.token !== entity.token || item.type !== entity.type;
                });
                delete _this3.entities[key];
            });
            this.request({
                type: 'COLLABROOM',
                data: {
                    type: 'UNWATCH',
                    entities: entities
                }
            });
            window.removeEventListener('online', this.handleOnline);
            window.removeEventListener('offline', this.handleOffline);
            window.removeEventListener('unload', this.handleUnload);
            this.hasListener = false;
        }
        /**
         * 注册需要关注的entity，可增加heartbeat和处理handler
         */

    }, {
        key: "registerEntityObserver",
        value: function registerEntityObserver(entity, options) {
            var key = IO.keyOf(entity);
            var registeredId = (0, _uniqueId3.default)();
            var observers = this.entityObservers.get(key);
            var heartbeats = (0, _reduce3.default)(options.heartbeats, function (prev, heartbeat, name) {
                prev[name] = IO.initHeartbeat(heartbeat);
                return prev;
            }, {});
            var observer = {
                heartbeats: heartbeats,
                messageHandler: options.messageHandler
            };
            if (observers) {
                observers.set(registeredId, observer);
            } else {
                var entityObservers = new Map();
                entityObservers.set(registeredId, observer);
                this.entityObservers.set(key, entityObservers);
            }
            return registeredId;
        }
    }, {
        key: "updateEntityObserver",
        value: function updateEntityObserver(entity, registeredId, options) {
            var key = IO.keyOf(entity);
            var observers = this.entityObservers.get(key);
            if (!observers) {
                throw new Error("no observers found: " + key);
            }
            var observer = observers.get(registeredId);
            if (!observer) {
                throw new Error("no observer found: " + key + " " + registeredId);
            }
            var needUpdateHeartbeats = options.heartbeats,
                extra = (0, _objectWithoutProperties3.default)(options, ["heartbeats"]);

            var nextHeartbeats = observer.heartbeats;
            if (needUpdateHeartbeats) {
                (0, _forEach3.default)(needUpdateHeartbeats, function (heartbeat, name) {
                    nextHeartbeats[name] = IO.initHeartbeat(heartbeat);
                });
            }
            observers.set(registeredId, Object.assign({}, observer, extra, { heartbeats: nextHeartbeats }));
        }
        /**
         * 取消关注entity
         * @param entity
         * @param registeredId
         */

    }, {
        key: "unregisterEntityObserver",
        value: function unregisterEntityObserver(entity, registeredId) {
            var key = IO.keyOf(entity);
            var observers = this.entityObservers.get(key);
            if (observers) {
                observers.delete(registeredId);
            }
        }
    }, {
        key: "addHeartbeat",
        value: function addHeartbeat(entity, name, heartbeat) {
            var key = IO.keyOf(entity);
            var curEntityInfo = this.entities[key];
            if (!curEntityInfo) {
                console.warn && console.warn('fail to add heartbeat because entity is not registered: ', key);
                return;
            }
            curEntityInfo.heartbeats[name] = IO.initHeartbeat(heartbeat);
        }
    }, {
        key: "removeHeartbeat",
        value: function removeHeartbeat(entity, name) {
            var key = IO.keyOf(entity);
            var curEntityInfo = this.entities[key];
            if (!curEntityInfo) {
                console.warn && console.warn('fail to remove heartbeat because entity is not registered: ', key);
                return;
            }
            delete curEntityInfo.heartbeats[name];
        }
    }, {
        key: "request",
        value: function request(payload) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var channel = options.channel || this.channel;
            channel = channel === Channel.http ? Channel.http : Channel.socket;
            if (channel === Channel.socket) {
                return this.requestBySocket(payload, options);
            } else {
                return this.requestByHttp(payload, options);
            }
        }
    }, {
        key: "requestByHttp",
        value: function requestByHttp(payload) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return this._requestByHttp(Object.assign({}, payload, {
                version: payload.version || RCE_VERSION,
                data: Object.assign({}, this.baseInfo, payload.data),
                req_id: payload.req_id || this.reqId++,
                context: {
                    os: (0, _tea.getOSNameByBrowser)(),
                    app_version: (0, _tea.getAppVersion)(),
                    os_version: (0, _tea.getOSVersionByBrowser)(),
                    platform: (0, _tea.getPlatForm)()
                }
            }), options);
        }
    }, {
        key: "requestBySocket",
        value: function requestBySocket(payload, options) {
            var newPayload = Object.assign({}, payload, {
                version: payload.version || RCE_VERSION,
                data: Object.assign({}, this.baseInfo, payload.data),
                req_id: payload.req_id || this.reqId++,
                context: {
                    os: (0, _tea.getOSNameByBrowser)(),
                    app_version: (0, _tea.getAppVersion)(),
                    os_version: (0, _tea.getOSVersionByBrowser)(),
                    request_id: (0, _generateRequestIdHelper.generateRequestId)(),
                    platform: (0, _tea.getPlatForm)()
                }
            });
            // frontier对提交的包体积有限制为2k，前端限制为1.5k，避免存在字符串计算不一致的情况
            if ((0, _string.isSizeofOver)(JSON.stringify(newPayload), this.maxSize)) {
                return this._requestByHttp(newPayload, options);
            }
            return this._requestBySocket(newPayload, options);
        }
        // 有些api可能还未兼容长链设计，可以单独请求，直接用axios也可以

    }, {
        key: "requestApi",
        value: function requestApi(payload) {
            return createRequest(axios)(payload);
        }
        /**
         * 业务正常收到消息时，需要手动set一下心跳version，保证心跳不会误报
         */

    }, {
        key: "setHeartbeatVersion",
        value: function setHeartbeatVersion(entity, moduleName, version) {
            var key = IO.keyOf(entity);
            var entityInfo = this.entities[key];
            var config = entityInfo && entityInfo.heartbeats && entityInfo.heartbeats[moduleName];
            if (config) {
                config.version = version;
            }
        }
    }, {
        key: "getHeartbeatInfo",
        value: function getHeartbeatInfo(type, token) {
            var key = type + ":" + token;
            var entityInfo = this.entities[key];
            if (entityInfo && entityInfo.heartbeats) {
                return Object.assign({}, entityInfo.heartbeats);
            }
            return null;
        }
    }, {
        key: "reset",
        value: function reset() {
            this.counter = 0;
            this.reqId = 1;
            this.requests = {};
            this.entities = {};
            this.channelStateCallbacks = [];
            if (this.scheduleHB) {
                clearTimeout(this.scheduleHB);
                this.scheduleHB = null;
            }
        }
        // --------------------
        // 以上为外部接口

    }, {
        key: "setBaseInfoTicket",
        value: function setBaseInfoTicket(ticket) {
            this.baseInfo.user_ticket = ticket;
        }
    }, {
        key: "fetchFrontierTicketForReconnect",
        value: function fetchFrontierTicketForReconnect(cb) {
            var _this4 = this;

            this.fetchFrontierTicketReq && this.fetchFrontierTicketReq.cancel && this.fetchFrontierTicketReq.cancel();
            this.fetchFrontierTicketReq = createRequest(axios)({
                url: '/api/passport/ws_ticket/',
                method: 'post',
                noStore: true
            }).then(function (response) {
                _this4.ticket = response.data && response.data.ticket;
                if (_this4.ticket) {
                    _this4.setBaseInfoTicket(_this4.ticket);
                    _this4.fetchTokenTimes = 0;
                    if (_this4.socketConfig) {
                        _this4.socketConfig.query.session_ticket = _this4.ticket;
                    }
                    cb && cb((0, _util.formatURL)(_this4.socketConfig));
                } else {
                    _this4.refetchFrontierTicket(_this4.fetchFrontierTicketForReconnect, cb);
                }
            }).catch(function (err) {
                // 失败重试
                console.log('fetch frontier token error', err);
                _this4.refetchFrontierTicket(_this4.fetchFrontierTicketForReconnect, cb);
            });
        }
    }, {
        key: "fetchFrontierTicket",
        value: function fetchFrontierTicket() {
            var _this5 = this;

            var User = window.User;
            if (User.wsTicket) {
                _$moirae2.default.info(this.getLogMessage("Use ticket " + User.wsTicket));
                this.ticket = User.wsTicket;
                delete User.wsTicket;
                this.setBaseInfoTicket(this.ticket);
                this._connectSocket(this.ticket);
            } else {
                _$moirae2.default.info(this.getLogMessage('request ticket'));
                createRequest(axios)({
                    url: '/api/passport/ws_ticket/',
                    method: 'post',
                    noStore: true
                }).then(function (response) {
                    _this5.ticket = response.data && response.data.ticket;
                    if (_this5.ticket) {
                        _$moirae2.default.info(_this5.getLogMessage("Use ticket " + _this5.ticket));
                        _this5.setBaseInfoTicket(_this5.ticket);
                        _this5.fetchTokenTimes = 0;
                        _this5._connectSocket(_this5.ticket);
                    } else {
                        _$moirae2.default.info(_this5.getLogMessage('REFETCH ticket'));
                        _this5.refetchFrontierTicket(_this5.fetchFrontierTicket);
                    }
                }).catch(function (err) {
                    // 失败重试
                    console.log('fetch frontier token error', err);
                    _this5.refetchFrontierTicket(_this5.fetchFrontierTicket);
                });
            }
        }
    }, {
        key: "refetchFrontierTicket",
        value: function refetchFrontierTicket(func, cb) {
            var _this6 = this;

            this.fetchTimout && clearTimeout(this.fetchTimout);
            this.fetchTimout = window.setTimeout(function () {
                func.call(_this6, cb);
            }, Math.min(++this.fetchTokenTimes * 1000), 15000);
        }
    }, {
        key: "_connectSocket",
        value: function _connectSocket(ticket) {
            _$moirae2.default.info(this.getLogMessage('connect socket'));
            var host = this.host;

            var envConfig = {
                default: {
                    fpid: 54,
                    appKey: '5a4d135f57bfbf0461ad10cc7f1d3658',
                    aid: '1191'
                },
                preview: {
                    fpid: 61,
                    appKey: '4af89272b20e69c0f78512189e86d13d',
                    aid: '10011'
                }
            };
            var config = envConfig[window._env || 'default'];
            var fpid = config.fpid,
                appKey = config.appKey,
                aid = config.aid;

            var accessSalt = 'f8a69f1719916z';
            var url = this.getSocketAddr();
            var query = Object.assign({
                aid: aid,
                fpid: fpid,
                sdk_version: 1,
                version_code: 5806,
                session_ticket: ticket,
                device_id: this.memberId,
                version: 2
            }, host ? { /* for test env */host: host } : {});
            this.socketConfig = {
                url: url,
                receiveClientVarsFromOutSide: true,
                protocols: 'pbbp2',
                // Allow deployers to host Etherpad on a non-root path
                lookupType: 'protocol.Frame',
                reconnectionAttempts: 9007199254740992,
                reconnection: true,
                reconnectInterval: 1000,
                reconnectionDelayMax: 15000,
                reconnections: 2000,
                appKey: appKey,
                fpid: fpid,
                accessSalt: accessSalt,
                query: query,
                beforeReconnect: this.beforeReconnect.bind(this)
            };
            // 建立连接前需要确保旧连接被释放
            var oldSocket = this.socket;
            if (oldSocket) {
                oldSocket.connected && oldSocket.close();
            }
            this.socket = new _$bytedSocketBr2.default(this.socketConfig);
            this.bindSocketEvent();
        }
    }, {
        key: "connectSocket",
        value: function connectSocket() {
            if (!(0, _userHelper.isDocRnEnabled)()) {
                this.fetchFrontierTicket();
            }
        }
    }, {
        key: "beforeReconnect",
        value: function beforeReconnect(cb) {
            this.fetchFrontierTicketForReconnect(cb);
        }
        /**
         * init: connecting->connect
         * disconnect->reconnecting（maybe many times）->connecting->reconnect->connect
         */

    }, {
        key: "bindSocketEvent",
        value: function bindSocketEvent() {
            var _this7 = this;

            var canUse = ['connect', 'reconnect'];
            canUse.forEach(function (event) {
                _this7.socket.on(event, function () {
                    _this7.channel = Channel.socket;
                    _this7.state = NetworkState.online;
                    _this7.triggerChannelState();
                });
            });
            var canNotUse = ['disconnect', 'connecting', 'reconnecting', 'reconnect_failed', 'error', 'reconnect_attempt', 'reconnect_error', 'close'];
            canNotUse.forEach(function (event) {
                _this7.socket.on(event, function () {
                    if (_this7.channel === Channel.http) return;
                    // socket 不可用，切为 http
                    _this7.channel = Channel.http;
                    // 一直是offline，不用响应
                    if (_this7.state === NetworkState.offline) return;
                    // 通知变化
                    _$moirae2.default.info(_this7.getLogMessage("socket error, current state: " + event));
                    _this7.triggerChannelState();
                });
            });
            this.socket.on('reconnect', this.rewatch);
            this.socket.on('connect', this.rewatch);
            this.socket.on('message', function (message) {
                _this7.channel = Channel.socket;
                _this7.state = NetworkState.online;
                _this7.handleMessage(message);
            });
        }
    }, {
        key: "getSocketAddr",
        value: function getSocketAddr() {
            var User = window.User;
            if (User.wsServer) return User.wsServer;
            if (location.protocol === 'http:' && location.host !== 'docs.bytedance.net') {
                return 'ws://10.6.24.195:5998/ws/v2';
            }
            if ((0, _networkHelper.isProdEnv)()) {
                return _networkHelper.wsURL;
            }
            return 'wss://bear-test.bytedance.net/ws/v2';
        }
    }, {
        key: "_requestByHttp",
        value: function _requestByHttp(payload) {
            var _this8 = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var retryTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            var type = payload.data && payload.data.type;
            var id = '';
            if (payload.context) {
                id = (0, _generateRequestIdHelper.generateRequestId)();
                payload.context.request_id = id;
            }
            var reqId = payload.req_id;
            var noStore = options.noStore === undefined ? true : options.noStore;
            _$moirae2.default.info(this.getLogMessage("send req(" + (id || reqId) + ") " + type + " by http"));
            try {
                _$moirae2.default.count('ee.docs.sheet.client_suit_request_http');
            } catch (ex) {
                // ConsoleError
                console.error(ex);
                // Raven上报
                window.Raven && window.Raven.captureException(ex);
            }
            var promise = createRequest(axios)({
                url: "" + _$constants.apiUrls.POST_RCE_MESSAGE,
                method: 'post',
                params: { member_id: this.memberId },
                data: payload,
                noStore: noStore,
                timeout: options.timeout || this.timeout,
                contentType: 'application/json',
                headers: (0, _defineProperty3.default)({}, _sliApiMap.X_COMMAND, _sliApiMap.API_RCE_PANDORA)
            }).then(function (message) {
                var data = message.data;
                // 中间拦截做统一错误处理
                // 某些错误码需要静默重试
                if (data && data.type === 'ERROR' && RETRY_ERROR_CODE_ARR.indexOf(data.code) >= 0) {
                    _$moirae2.default.info(_this8.getLogMessage("RESEND req(" + (id || reqId) + ") for error code " + data.code));
                    // 每次重试请求delay 3s
                    var timeout = retryTimeout + 3000;
                    return new Promise(function (resolve, reject) {
                        setTimeout(function () {
                            _this8._requestByHttp(payload, Object.assign({}, options), timeout).then(resolve, reject);
                        }, timeout);
                    });
                }
                _$moirae2.default.info(_this8.getLogMessage("req(" + (id || reqId) + ") " + type + " by http is resolved"));
                return message;
            }).catch(function (e) {
                // 超时后进行重试
                if (options.timeoutRetry && e && e.code === 'ECONNABORTED') {
                    _$moirae2.default.info(_this8.getLogMessage("RESEND req(" + (id || reqId) + ") by http for error " + e));
                    return _this8._requestByHttp(payload, Object.assign({}, options, { timeoutRetry: Math.max(0, options.timeoutRetry - 1) }));
                }
                _$moirae2.default.info(_this8.getLogMessage("req(" + (id || reqId) + ") " + type + " by http is rejected for error " + e));
                _$moirae2.default.count('ee.docs.doc.client_io_rejected');
                return Promise.reject(e);
            });
            promise.reqId = payload.req_id;
            return promise;
        }
    }, {
        key: "_requestBySocket",
        value: function _requestBySocket(payload, options) {
            var _this9 = this;

            var type = payload.data && payload.data.type;
            var reqId = payload.req_id;
            var id = payload.context && payload.context.request_id || reqId;
            var promise = new Promise(function (resolve, reject) {
                var request = {
                    payload: payload,
                    options: options,
                    resolve: resolve,
                    reject: reject,
                    resendByHttp: function resendByHttp() {
                        // 发短链
                        _$moirae2.default.info(_this9.getLogMessage("RESEND req(" + (id || reqId) + ") " + type + " by http"));
                        _this9._requestByHttp(payload, options).then(resolve, reject);
                        delete _this9.requests[reqId];
                    }
                };
                _this9.requests[reqId] = request;
                _$moirae2.default.info(_this9.getLogMessage("send req(" + id + ") " + type + " by socket"));
                _this9.socket.json.send(payload);
                setTimeout(function () {
                    // 长链未处理，转ajax重试
                    if (_this9.requests[reqId]) {
                        _$moirae2.default.info(_this9.getLogMessage("req(" + id + ") " + type + " by socket timeout"));
                        _this9.requests[reqId].resendByHttp();
                    }
                }, options.timeout || _this9.timeout);
            });
            promise.reqId = reqId;
            setTimeout(function () {
                try {
                    _$moirae2.default.count('ee.docs.sheet.client_suit_request_socket');
                } catch (ex) {
                    // ConsoleError
                    console.error(ex);
                    // Raven上报
                    window.Raven && window.Raven.captureException(ex);
                }
            }, 2000);
            return promise;
        }
    }, {
        key: "handleMessage",
        value: function handleMessage(message) {
            var _this10 = this;

            // '2'是FR的心跳包标记，见byted-socket-br.config.heartbeat
            if (!message || message.data && message.data === SOCKET_HEARBEAT) return;
            logNetworkErrorIfAny(message);
            var type = message.data && message.data.type;
            var id = message.request_id;
            var reqId = message.req_id;
            var requests = this.requests;
            // 有 reqId ，是主动请求
            if (reqId && requests[reqId]) {
                // server告知over_size传输字节过大，主动http补充一次
                if (message.data && message.data.over_size === 1) {
                    _$moirae2.default.info(this.getLogMessage("req(" + id + ") " + type + " by socket is oversize"));
                    requests[reqId].resendByHttp();
                    return;
                }
                _$moirae2.default.info(this.getLogMessage("req(" + id + ") " + type + " by socket is resolved"));
                requests[reqId].resolve(message);
                delete requests[reqId];
                return;
            }
            _$moirae2.default.info(this.getLogMessage("message(" + id + ") " + type + " is received by socket"));
            // 被动广播的消息
            (0, _forEach3.default)(this.entities, function (entity) {
                var _ref2 = entity.message || {},
                    handler = _ref2.handler,
                    filter = _ref2.filter;

                if (!(0, _isFunction3.default)(filter) && (0, _isEmpty3.default)(filter) || (0, _isFunction3.default)(filter) && filter(message) || (0, _isObject3.default)(filter) && (0, _isEqual3.default)(filter, {
                    type: message.type,
                    token: (0, _get3.default)(message, 'data.token')
                })) {
                    handler && handler(message);
                }
                // 有一些没那么重要的服务（比如说评论）也在监听这个消息
                var entityObservers = _this10.entityObservers.get(IO.keyOf(entity.entity));
                if (entityObservers) {
                    entityObservers.forEach(function (entityObserver, registeredId) {
                        try {
                            entityObserver.messageHandler(message);
                        } catch (e) {
                            console.error("entityObserver handle message error: " + registeredId + ", " + e);
                        }
                    });
                }
            });
        }
    }, {
        key: "getTicket",
        value: function getTicket() {
            return this.ticket;
        }
    }, {
        key: "getMemberId",
        value: function getMemberId() {
            return this.memberId;
        }
    }, {
        key: "sendHeartbeats",
        value: function sendHeartbeats(finallyCb, catchCb) {
            var _this11 = this;

            var channels = []; // 触发心跳检查的请求参数
            var triggers = []; // 触发心跳检查的module指针
            (0, _forEach3.default)(this.entities, function (entity) {
                if (_this11.watchEntitys.some(function (item) {
                    return item.token === entity.entity.token && item.type === entity.entity.type;
                })) {
                    var channel = {
                        type: entity.entity.type,
                        token: entity.entity.token,
                        modules: []
                    };
                    var collectTrigger = function collectTrigger(info, name) {
                        // 心跳需要带的module信息
                        if (_this11.counter >= info.counter + info.interval) {
                            triggers.push(info);
                            channel.modules.push(name);
                        }
                    };
                    (0, _forEach3.default)(entity.heartbeats, collectTrigger);
                    var entityObservers = _this11.entityObservers.get(IO.keyOf(entity.entity));
                    if (entityObservers) {
                        entityObservers.forEach(function (entityObserver) {
                            (0, _forEach3.default)(entityObserver.heartbeats, collectTrigger);
                        });
                    }
                    channels.push(channel);
                }
            });
            var counter = this.counter;
            this.request({
                type: 'COLLABROOM',
                data: {
                    type: 'USER_HEARTBEAT',
                    member_id: this.memberId,
                    user_ticket: this.ticket,
                    channels: channels
                },
                version: 2
            }, {
                noStore: true
            }).then(function (response) {
                try {
                    // 如果目前是断网环境，则判定为上线
                    if (_this11.state === NetworkState.offline) {
                        _$moirae2.default.info({
                            key: 'client_suit_hearbeat_resume'
                        });
                        _$moirae2.default.count('ee.docs.sheet.client_suit_hearbeat_resume');
                        _this11.handleOnline();
                    }
                    var channelInfo = response.data.channel_info;
                    // 修改心跳间隔
                    var interval = parseInt(response.data.interval, 10);
                    if (interval) {
                        _this11.heartbeatInterval = interval * 1000;
                    }
                    // 更新计数器
                    (0, _forEach3.default)(triggers, function (info) {
                        info.counter = counter;
                    });
                    // 处理服务端返回的心跳数据
                    (0, _forEach3.default)(channelInfo, function (info) {
                        var key = info.type + ":" + info.token;
                        var entityInfo = _this11.entities[key];
                        if ((0, _isEmpty3.default)(entityInfo)) {
                            return;
                        }
                        (0, _forEach3.default)(info.modules, function (module) {
                            var moduleName = module.name;
                            var version = parseInt(module.version, 10);
                            var config = entityInfo.heartbeats[moduleName];
                            // 没有注册的心跳module，不用处理
                            if (!(0, _isEmpty3.default)(config)) {
                                // 对比本地状态
                                _this11.checkHeartbeat(version, config, entityInfo);
                            }
                            var entityObservers = _this11.entityObservers.get(key);
                            if (entityObservers) {
                                try {
                                    entityObservers.forEach(function (entityObserver) {
                                        var heartbeat = entityObserver.heartbeats[moduleName];
                                        if (heartbeat) {
                                            // 对比本地状态
                                            _this11.checkHeartbeat(version, heartbeat, entityInfo);
                                        }
                                    });
                                } catch (e) {
                                    console.error('entityObservers handle heartbeat failed', moduleName, version);
                                }
                            }
                        });
                    });
                } finally {
                    if (finallyCb) {
                        finallyCb();
                    }
                }
            }).catch(function (e) {
                if (catchCb) {
                    catchCb(e);
                }
            });
        }
    }, {
        key: "syncMemberBaseRev",
        value: function syncMemberBaseRev(entity, revision) {
            var type = entity.type,
                token = entity.token;

            var entityHeartbeat = this.getHeartbeatInfo(type, token) || {};
            var memberHeartBeat = entityHeartbeat.member_channel;
            if (!memberHeartBeat) return Promise.resolve();
            var curVersion = memberHeartBeat.version;
            var nextVersion = curVersion + 1;
            if (revision === nextVersion) {
                this.setHeartbeatVersion(entity, 'member_channel', revision);
                return Promise.resolve();
            }
            return Promise.resolve({
                nextVersion: nextVersion
            });
        }
    }, {
        key: "checkHeartbeat",
        value: function checkHeartbeat(remoteVersion, heartbeat, entityInfo) {
            var oldVersion = heartbeat.version,
                callback = heartbeat.callback;
            // 对比本地状态

            if (remoteVersion > oldVersion) {
                heartbeat.version = remoteVersion;
                // 如果有差异，执行回调
                if (callback) {
                    callback(remoteVersion, oldVersion, entityInfo);
                }
            }
        }
    }, {
        key: "schedule",
        value: function schedule() {
            var _this12 = this;

            this.scheduleHB && clearTimeout(this.scheduleHB);
            // 定时发送HB
            this.scheduleHB = window.setTimeout(function () {
                if (_this12.state === NetworkState.offline) {
                    _$moirae2.default.info(_this12.getLogMessage('offline'));
                    _this12.schedule();
                    return;
                }
                _this12.counter++;
                _$moirae2.default.info(_this12.getLogMessage('send hearbeat'));
                _this12.sendHeartbeats(_this12.scheduleFinallyCb, _this12.scheduleCatchCb);
            }, this.heartbeatInterval);
        }
    }, {
        key: "triggerChannelState",
        value: function triggerChannelState() {
            var _this13 = this;

            this.channelStateCallbacks.forEach(function (cb) {
                cb(_this13.state, _this13.channel);
            });
        }
    }, {
        key: "getLogMessage",
        value: function getLogMessage(str) {
            return "IO: memberId(" + this.memberId + "): " + str;
        }
    }, {
        key: "registerChannelState",
        value: function registerChannelState(cb) {
            this.channelStateCallbacks.push(cb);
        }
    }, {
        key: "unregisterChannelState",
        value: function unregisterChannelState(cb) {
            var index = this.channelStateCallbacks.indexOf(cb);
            if (index !== -1) {
                this.channelStateCallbacks.splice(index, 1);
            }
        }
    }, {
        key: "closeChannel",
        value: function closeChannel() {
            this.scheduleHB && clearTimeout(this.scheduleHB);
            this.socket && this.socket.close();
            window.removeEventListener('online', this.handleOnline);
            window.removeEventListener('offline', this.handleOffline);
        }
    }], [{
        key: "keyOf",
        value: function keyOf(entity) {
            return entity.type + ":" + entity.token;
        }
    }, {
        key: "initHeartbeat",
        value: function initHeartbeat(options) {
            return Object.assign({
                interval: 1,
                version: 0,
                counter: 0
            }, options);
        }
    }, {
        key: "getInstance",
        value: function getInstance(options) {
            if (ioInstance == null) {
                var User = window.User;
                ioInstance = new IO(Object.assign({
                    host: User.host
                }, options));
                return ioInstance;
            } else {
                return ioInstance;
            }
        }
    }]);
    return IO;
}();

__decorate([(0, _asyncHelper.AsyncRetry)(3)], IO.prototype, "watchEntity", null);

/***/ }),

/***/ 1921:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(1585)
var HashBase = __webpack_require__(2197)
var Buffer = __webpack_require__(1587).Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5


/***/ }),

/***/ 1922:
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(1766).EventEmitter;
var inherits = __webpack_require__(1585);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(1923);
Stream.Writable = __webpack_require__(3632);
Stream.Duplex = __webpack_require__(3633);
Stream.Transform = __webpack_require__(3634);
Stream.PassThrough = __webpack_require__(3635);

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),

/***/ 1923:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2198);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(1924);
exports.Duplex = __webpack_require__(1696);
exports.Transform = __webpack_require__(2201);
exports.PassThrough = __webpack_require__(3631);


/***/ }),

/***/ 1924:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__(1814);
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(1748);
util.inherits = __webpack_require__(1585);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(3630)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(2199);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(1587).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__(2200);

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(1696);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(1696);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(221), __webpack_require__(782).setImmediate, __webpack_require__(71)))

/***/ }),

/***/ 1925:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__(741).Buffer
var inherits = __webpack_require__(1585)
var HashBase = __webpack_require__(2197)

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160


/***/ }),

/***/ 1926:
/***/ (function(module, exports, __webpack_require__) {

var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = __webpack_require__(3636)
exports.sha1 = __webpack_require__(3637)
exports.sha224 = __webpack_require__(3638)
exports.sha256 = __webpack_require__(2202)
exports.sha384 = __webpack_require__(3639)
exports.sha512 = __webpack_require__(2203)


/***/ }),

/***/ 1927:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.utils = __webpack_require__(3645);
exports.Cipher = __webpack_require__(3646);
exports.DES = __webpack_require__(3647);
exports.CBC = __webpack_require__(3648);
exports.EDE = __webpack_require__(3649);


/***/ }),

/***/ 1928:
/***/ (function(module, exports, __webpack_require__) {

var ciphers = __webpack_require__(3650)
var deciphers = __webpack_require__(3658)
var modes = __webpack_require__(2213)

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),

/***/ 1929:
/***/ (function(module, exports, __webpack_require__) {

var modeModules = {
  ECB: __webpack_require__(3651),
  CBC: __webpack_require__(3652),
  CFB: __webpack_require__(3653),
  CFB8: __webpack_require__(3654),
  CFB1: __webpack_require__(3655),
  OFB: __webpack_require__(3656),
  CTR: __webpack_require__(2211),
  GCM: __webpack_require__(2211)
}

var modes = __webpack_require__(2213)

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes


/***/ }),

/***/ 1930:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__(1604);
var randomBytes = __webpack_require__(1719);
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(741).Buffer))

/***/ }),

/***/ 1931:
/***/ (function(module, exports, __webpack_require__) {

var hash = exports;

hash.utils = __webpack_require__(1649);
hash.common = __webpack_require__(1750);
hash.sha = __webpack_require__(3674);
hash.ripemd = __webpack_require__(3678);
hash.hmac = __webpack_require__(3679);

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;


/***/ }),

/***/ 1932:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MError = exports.ErrorType = exports.ClientErrorCode = undefined;

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 客户端发出的错误码
 */
var ClientErrorCode = exports.ClientErrorCode = undefined;
(function (ClientErrorCode) {
  /**
   * 未知错误
   */
  ClientErrorCode["UNKNOWN"] = "F0001";
  /**
   * 请求超时
   */
  ClientErrorCode["REQUEST_TIMEOUT"] = "F2001";
  /**
   * 不合法的响应数据
   */
  ClientErrorCode["RESPONSE_INVALID"] = "F2002";
  /**
   * 响应数据不符合预期
   */
  ClientErrorCode["RESPONSE_UNEXPECTED"] = "F2003";
  /**
   * 不合法的 operation
   */
  ClientErrorCode["INVALID_OPERATION"] = "F3001";
  /**
   * 应用 action 失败
   */
  ClientErrorCode["APPLY_ACTION_FAILED"] = "F3002";
  /**
   * 本地文档版本与服务器最新版本差距超过阈值
   */
  ClientErrorCode["REVISION_MAX_GAP_EXCEED"] = "F3003";
  /**
   * 不合法的 model 数据
   */
  ClientErrorCode["MODEL_INVALID_DATA"] = "F4001";
  /**
   * 上传文件名称不合法
   */
  ClientErrorCode["INVALID_FILENAME"] = "F4002";
  /**
   * transform 失败
   */
  ClientErrorCode["TRANSFORM_FAILED"] = "F4003";
  /**
   * transform 失败
   */
  ClientErrorCode["TRANSFORM_UNDO_FAILED"] = "F4004";
})(ClientErrorCode || (exports.ClientErrorCode = ClientErrorCode = {}));
/**
 * 错误类型
 */
var ErrorType = exports.ErrorType = undefined;
(function (ErrorType) {
  /**
   * 未知错误
   */
  ErrorType["UNKNOWN"] = "UNKNOWN";
  /**
   * 请求出错
   */
  ErrorType["REQUEST_ERROR"] = "REQUEST_ERROR";
  /**
   * 响应出错
   */
  ErrorType["RESPONSE_ERROR"] = "RESPONSE_ERROR";
  /**
   * 协同错误
   */
  ErrorType["COLLABORATION_ERROR"] = "COLLABORATION_ERROR";
  /**
   * model 数据错误
   */
  ErrorType["MODEL_ERROR"] = "MODEL_ERROR";
  /**
   * 服务端返回的 Error
   */
  ErrorType["SERVER_ERROR"] = "SERVER_ERROR";
})(ErrorType || (exports.ErrorType = ErrorType = {}));

var MError = exports.MError = function MError(type, code, message, data) {
  (0, _classCallCheck3.default)(this, MError);

  this.type = type;
  this.code = code;
  this.message = message;
  this.data = data;
};

/***/ }),

/***/ 1933:
/***/ (function(module, exports, __webpack_require__) {

/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */

var DEFAULT = __webpack_require__(2234);
var FilterCSS = __webpack_require__(3713);


/**
 * XSS过滤
 *
 * @param {String} css 要过滤的CSS代码
 * @param {Object} options 选项：whiteList, onAttr, onIgnoreAttr
 * @return {String}
 */
function filterCSS (html, options) {
  var xss = new FilterCSS(options);
  return xss.process(html);
}


// 输出
exports = module.exports = filterCSS;
exports.FilterCSS = FilterCSS;
for (var i in DEFAULT) exports[i] = DEFAULT[i];

// 在浏览器端使用
if (typeof window !== 'undefined') {
  window.filterCSS = module.exports;
}


/***/ }),

/***/ 1934:
/***/ (function(module, exports) {

module.exports = {
  indexOf: function(arr, item) {
    var i, j;
    if (Array.prototype.indexOf) {
      return arr.indexOf(item);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      if (arr[i] === item) {
        return i;
      }
    }
    return -1;
  },
  forEach: function(arr, fn, scope) {
    var i, j;
    if (Array.prototype.forEach) {
      return arr.forEach(fn, scope);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      fn.call(scope, arr[i], i, arr);
    }
  },
  trim: function(str) {
    if (String.prototype.trim) {
      return str.trim();
    }
    return str.replace(/(^\s*)|(\s*$)/g, "");
  },
  spaceIndex: function(str) {
    var reg = /\s|\n|\t/;
    var match = reg.exec(str);
    return match ? match.index : -1;
  }
};


/***/ }),

/***/ 1935:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActiveCommentSources = exports.default = undefined;

var _Comment = __webpack_require__(3717);

var _Comment2 = _interopRequireDefault(_Comment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _Comment2.default;
exports.ActiveCommentSources = _Comment.ActiveCommentSources;

/***/ }),

/***/ 1936:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(t) {

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _toConsumableArray2 = __webpack_require__(58);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _regenerator = __webpack_require__(12);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(99);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _get2 = __webpack_require__(14);

var _get3 = _interopRequireDefault(_get2);

var _forEach2 = __webpack_require__(90);

var _forEach3 = _interopRequireDefault(_forEach2);

var _findIndex2 = __webpack_require__(565);

var _findIndex3 = _interopRequireDefault(_findIndex2);

var _bytedCommentSdk = __webpack_require__(1654);

var _commentServiceHelper = __webpack_require__(1685);

var _toastHelper = __webpack_require__(301);

var _common = __webpack_require__(19);

var _comment_mention = __webpack_require__(1623);

var _comment_mention2 = _interopRequireDefault(_comment_mention);

var _nativeCommentView = __webpack_require__(1937);

var _nativeCommentView2 = _interopRequireDefault(_nativeCommentView);

var _utils = __webpack_require__(1731);

var _teaLogger = __webpack_require__(1611);

var _reaction = __webpack_require__(1624);

var _constants = __webpack_require__(1612);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Comment: 评论
 * 提供各业务的评论模块与后端、移动端的数据交互服务
 * 设计文档: https://bytedance.feishu.cn/space/doc/doccnXM71uxAV35evlfvC5#
 */
var CommentManager = function () {
    function CommentManager(props) {
        var _this = this;

        (0, _classCallCheck3.default)(this, CommentManager);

        // 从commentService获取的所有未经处理的评论数据
        this.unresolvedComments = [];
        // 排序并转好未符合客户端评论数据接口的数据
        this.sortedComments = [];
        // 排好序的commentIds
        this.sortedCommentIds = [];
        // 未解决 & 未删除完所有回复 & decode完成的评论数据
        this.commentDataMap = new Map();
        // commentService 传出的 commentData 已经过滤了删除的回复
        this.handleCommentChange = function (commentData, diffComments) {
            var newUnresolvedComments = [];
            var comments = commentData.comments,
                entities = commentData.entities;

            var userInfo = entities.users;
            diffComments.deletedComments.forEach(function (comment) {
                var commentId = comment.commentId;

                if (_this.commentDataMap.has(commentId)) {
                    _this.commentDataMap.delete(commentId);
                }
            });
            var reactions = _this.reactionService && _this.reactionService.getReactionData(_constants.COMMENT_REACTION_MODULE).reactions;
            comments.forEach(function (comment) {
                var commentId = comment.commentId,
                    commentList = comment.commentList,
                    finish = comment.finish;

                if (finish) {
                    if (_this.commentDataMap.has(commentId)) {
                        _this.commentDataMap.delete(commentId);
                    }
                    return;
                }
                newUnresolvedComments.push(comment);
                var prevComment = _this.commentDataMap.get(commentId);
                if (!prevComment) {
                    // 新评论
                    _this.commentDataMap.set(commentId, (0, _utils.commentFormater)(comment, userInfo, reactions));
                    return;
                }
                var prevCommentList = prevComment.comment_list || [];
                if (commentList.length !== prevCommentList.length) {
                    _this.commentDataMap.set(commentId, (0, _utils.commentFormater)(comment, userInfo, reactions));
                    return;
                }
                var isDataChange = false;
                (0, _forEach3.default)(commentList, function (commentItem, index) {
                    var prevCommentItem = prevCommentList[index];
                    var updateTimestamp = commentItem.updateTimestamp,
                        content = commentItem.content,
                        deleted = commentItem.deleted;
                    var prevUpdateTimestamp = prevCommentItem.update_timestamp,
                        prevContent = prevCommentItem.content,
                        prevDeleted = prevCommentItem.delete_flag;

                    if (content !== prevContent || updateTimestamp !== prevUpdateTimestamp || deleted !== prevDeleted) {
                        isDataChange = true;
                        return false;
                    }
                });
                if (isDataChange) {
                    _this.commentDataMap.set(commentId, (0, _utils.commentFormater)(comment, userInfo, reactions));
                }
            });
            // 更新评论数据
            if (_this.sortedCommentIds.length) {
                _this.setSortedCommentIds(_this.sortedCommentIds);
            }
            _this.unresolvedComments = newUnresolvedComments;
            _this.commentDataChange && _this.commentDataChange(_this.unresolvedComments);
            // 更新卡片数据
            _this.nativeCommentView.updateCards();
        };
        this.onReactionDataChange = function (newReactionData, changes) {
            var reactions = newReactionData.reactions;
            var changeReactionList = changes.reactions;

            var hasReactionChange = false;
            _this.commentDataMap.forEach(function (comment) {
                var commentList = comment.comment_list || [];
                commentList.forEach(function (reply) {
                    var reply_id = reply.reply_id,
                        oldReaction = reply.reaction;
                    // 变成全刷新了

                    if (reactions.get(reply_id)) {
                        reply.reaction = reactions.get(reply_id);
                        if (!hasReactionChange) {
                            var changeReaction = changeReactionList.find(function (item) {
                                return item.referKey === reply_id;
                            });
                            hasReactionChange = !!changeReaction && (0, _reaction.isReactionChange)(oldReaction, reply.reaction);
                        }
                    }
                });
            });
            // 更新评论数据
            if (_this.sortedCommentIds.length) {
                _this.setSortedCommentIds(_this.sortedCommentIds);
            }
            // sortedCommentIds 只在 orderChange 时调用updateCards，因此这边需要主动触发一下
            hasReactionChange && _this.nativeCommentView.updateCards();
            _this.reactionService && _this.reactionService.handleReactionDataChange(_constants.COMMENT_REACTION_MODULE, reactions);
        };
        this.activeCommentChange = function (prevActiveCommentId, activeCommentId) {
            _this.reactionService.setTeaContext({
                comment_type: _teaLogger.CommentType.PART_COMMENT
            });
            _this.activeCommentChangeCb && _this.activeCommentChangeCb(prevActiveCommentId, activeCommentId);
        };
        this.cancelNewComment = function (tempCommentId) {
            _this.collectCommentEvent(_teaLogger.CommentLogAction.CANCEL_COMMENT);
            _this.cancelNewCommentCb && _this.cancelNewCommentCb(tempCommentId);
        };
        this.onMessageChange = function (message, unstableDiffMessages) {
            _this.messageChangeCb && _this.messageChangeCb(message, unstableDiffMessages);
        };
        // 请求
        // 新建评论
        this.postNewComment = function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(tempCommentId) {
                var quote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
                var txt = arguments[2];
                var isWhole = arguments[3];
                var extra = arguments[4];

                var _contentPreprocess, content, tempMentionId, data, commentPos, commentId, commentList;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _contentPreprocess = (0, _utils.contentPreprocess)(txt), content = _contentPreprocess.content, tempMentionId = _contentPreprocess.tempMentionId;
                                _context.prev = 1;
                                _context.next = 4;
                                return _this.commentService.addComment({
                                    isWhole: isWhole ? 1 : 0,
                                    quote: quote,
                                    content: content,
                                    commentId: tempCommentId,
                                    replyId: (0, _bytedCommentSdk.generateReplyId)(),
                                    extra: extra
                                });

                            case 4:
                                data = _context.sent;
                                commentPos = data.comment;
                                commentId = commentPos.commentId, commentList = commentPos.commentList;

                                console.info('CardComment: submit new comment success, commentId: ' + commentId);
                                _this.collectCommentEvent(_teaLogger.CommentLogAction.SUBMIT_COMMENT, {
                                    comment_id: commentId,
                                    reply_id: (0, _get3.default)(commentList, '[0].replyId'),
                                    status_code: 0,
                                    status_name: 'success',
                                    is_first: _teaLogger.BOOLEAN_STRING.TRUE
                                });
                                _context.next = 11;
                                return _this.addComment(tempCommentId, commentId);

                            case 11:
                                // 新建成功打开评论卡片
                                _this.nativeCommentView.showCards(commentId);
                                _this.activeCommentChange(null, commentId);
                                // 发送@通知
                                _comment_mention2.default.sendMentionNotification(tempMentionId, _this.getNotifyInfo(commentId));
                                _context.next = 22;
                                break;

                            case 16:
                                _context.prev = 16;
                                _context.t0 = _context['catch'](1);

                                (0, _toastHelper.showToast)({
                                    type: 1,
                                    message: t('etherpad.commet_failed'),
                                    duration: 3
                                });
                                console.info('CardComment: postNewComment error: ' + _context.t0);
                                _this.collectCommentEvent(_teaLogger.CommentLogAction.SUBMIT_COMMENT, {
                                    status_code: _context.t0.code,
                                    status_name: _context.t0.msg
                                });
                                // 失败的时候评论框会隐藏，但是不会触发comment.cancel回调，这里手动调用一下
                                _this.cancelNewComment && _this.cancelNewComment(tempCommentId);

                            case 22:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this, [[1, 16]]);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }();
        // 回复评论
        this.replyComment = function (commentId, txt, extra) {
            var _contentPreprocess2 = (0, _utils.contentPreprocess)(txt),
                content = _contentPreprocess2.content,
                tempMentionId = _contentPreprocess2.tempMentionId;

            _this.commentService.replyComment({
                replyId: (0, _bytedCommentSdk.generateReplyId)(),
                commentId: commentId,
                content: content,
                extra: extra
            }).then(function (data) {
                // 发送@通知
                _comment_mention2.default.sendMentionNotification(tempMentionId, _this.getNotifyInfo(commentId));
                var replyId = data.replyId,
                    comment = data.comment,
                    entities = data.entities;

                _this.collectCommentEvent(_teaLogger.CommentLogAction.SUBMIT_COMMENT, {
                    comment_id: commentId,
                    reply_id: replyId,
                    status_code: 0,
                    status_name: 'success',
                    is_first: _teaLogger.BOOLEAN_STRING.FALSE
                });
                var index = (0, _findIndex3.default)(_this.sortedComments, function (_ref2) {
                    var id = _ref2.commentId;
                    return id === commentId;
                });
                if (index === -1) {
                    console.info('CardComment: commentId ' + commentId + ' is not exist in sortedComments');
                    return;
                }
                var commentList = _this.sortedComments[index].comment_list;
                // 获取回复评论在当前commentList的下标

                var replyIndex = commentList.findIndex(function (item) {
                    var _replyId = item.reply_id;
                    return replyId === _replyId;
                });
                if (replyIndex === -1) {
                    console.info('CardComment: onCommentChange not call.');
                    // 数据还没有通过onCommentChange更新， 直接采用接口返回的数据进行更新
                    var userInfo = entities.users;
                    var reactions = _this.reactionService && _this.reactionService.getReactionData(_constants.COMMENT_REACTION_MODULE).reactions;
                    var newComment = (0, _utils.commentFormater)(comment, userInfo, reactions);
                    _this.sortedComments.splice(index, 1, newComment);
                    _this.nativeCommentView.updateCards();
                }
                console.info('CardComment: reply sucess, commentId: ' + commentId + ',\n        update current commentList: ' + [].concat((0, _toConsumableArray3.default)(commentList)).length);
            }, function (error) {
                (0, _toastHelper.showToast)({
                    type: 1,
                    message: t('etherpad.commet_failed'),
                    duration: 3
                });
                _this.collectCommentEvent(_teaLogger.CommentLogAction.SUBMIT_COMMENT, {
                    status_code: error.code,
                    status_name: error.msg
                });
                console.info('CardComment: reply error: ' + error);
            });
        };
        this.resolveCommentAction = function (commentId) {
            _this.commentService.resolveComment({ commentId: commentId }).then(function (data) {
                _this.resolveComment(commentId);
                _this.collectCommentEvent(_teaLogger.CommentLogAction.FINISH_COMMENT, {
                    comment_id: commentId
                });
            }, function (error) {
                console.info('CardComment: updateResolveStatus: ' + error);
                (0, _toastHelper.showToast)({
                    type: 1,
                    message: t('mobile.comment.error'),
                    duration: 3
                });
            });
        };
        // 目前没有重新打开功能
        // private reopenCommentAction(reopenCommentParams: ReopenCommentParams) {
        //   this.commentService.reopenComment(reopenCommentParams);
        // }
        this.editCommentAction = function (commentId, replyId, txt, extra) {
            var _contentPreprocess3 = (0, _utils.contentPreprocess)(txt),
                content = _contentPreprocess3.content,
                tempMentionId = _contentPreprocess3.tempMentionId;

            _this.collectCommentEvent(_teaLogger.CommentLogAction.SUBMIT_RE_EDIT, {
                comment_id: commentId,
                reply_id: replyId
            });
            _this.commentService.updateComment({ commentId: commentId, replyId: replyId, content: content, extra: extra }).then(function (data) {
                // 发送@通知
                _comment_mention2.default.sendMentionNotification(tempMentionId, _this.getNotifyInfo(commentId));
            }, function (error) {
                console.info('CardComment: edit fail, ' + error);
                (0, _toastHelper.showToast)({
                    type: 1,
                    message: t('mobile.comment.error'),
                    duration: 3
                });
            });
        };
        this.deleteCommentAction = function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(commentId, replyId) {
                var comment;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.prev = 0;
                                comment = _this.commentDataMap.has(commentId);

                                if (!(comment && comment.comment_list && comment.comment_list.length === 1)) {
                                    _context2.next = 5;
                                    break;
                                }

                                _context2.next = 5;
                                return _this.deleteComment(commentId);

                            case 5:
                                _context2.next = 7;
                                return _this.commentService.deleteComment({ commentId: commentId, replyId: replyId });

                            case 7:
                                _this.collectCommentEvent(_teaLogger.CommentLogAction.DELETE_COMMENT, {
                                    comment_id: commentId,
                                    reply_id: replyId
                                });
                                _context2.next = 14;
                                break;

                            case 10:
                                _context2.prev = 10;
                                _context2.t0 = _context2['catch'](0);

                                console.info('CardComment: delete fail, ' + _context2.t0);
                                (0, _toastHelper.showToast)({
                                    type: 1,
                                    message: t('mobile.comment.error'),
                                    duration: 3
                                });

                            case 14:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, _this, [[0, 10]]);
            }));

            return function (_x3, _x4) {
                return _ref3.apply(this, arguments);
            };
        }();
        this.type = props.type;
        this.token = props.token;
        this.teaLogger = props.teaLogger;
        this.notifyWithCommentId = !!props.notifyWithCommentId;
        this.commentService = (0, _commentServiceHelper.createCommentService)(_common.NUM_FILE_TYPE[this.type.toUpperCase()], this.token);
        this.commentService.setupCommentRecord();
        this.useMessageService = !!props.useMessageService;
        this.useMessageService && this.commentService.setupMessageRecord();
        if (_reaction.isReactionEnabled) {
            this.reactionService = _reaction.reactionSDKManager.getOrCreate({
                suiteType: _common.NUM_FILE_TYPE[this.type.toUpperCase()],
                suiteToken: this.token,
                broadcastType: _constants.COMMENT_REACTION_MODULE
            });
            this.reactionService.register(_constants.COMMENT_REACTION_MODULE, this.onReactionDataChange);
        }
        this.nativeCommentView = new _nativeCommentView2.default(this, this.token);
        this.nativeCommentView.setListeners({
            activeCommentChange: this.activeCommentChange,
            postNewComment: this.postNewComment,
            replyComment: this.replyComment,
            cancelNewComment: this.cancelNewComment,
            resolveComment: this.resolveCommentAction,
            editComment: this.editCommentAction,
            deleteComment: this.deleteCommentAction
        });
    }

    (0, _createClass3.default)(CommentManager, [{
        key: 'getNotifyInfo',
        value: function getNotifyInfo(commentId) {
            return this.notifyWithCommentId ? { query: { comment_id: commentId } } : {};
        }
    }, {
        key: 'collectCommentEvent',
        value: function collectCommentEvent(action, params) {
            this.teaLogger && this.teaLogger.collectCommentEvent(action, params);
        }
        // 事件监听

    }, {
        key: 'setEventListener',
        value: function setEventListener(listener) {
            var onCommentDataChange = listener.onCommentDataChange,
                onActiveCommentChange = listener.onActiveCommentChange,
                onAddComment = listener.onAddComment,
                onResolveComment = listener.onResolveComment,
                onDeleteComment = listener.onDeleteComment,
                onCancelNewComment = listener.onCancelNewComment,
                onMessageChange = listener.onMessageChange;

            this.commentDataChangeCb = onCommentDataChange || this.commentDataChangeCb;
            this.activeCommentChangeCb = onActiveCommentChange || this.activeCommentChangeCb;
            this.addCommentCb = onAddComment || this.addCommentCb;
            this.resolveCommentCb = onResolveComment || this.resolveCommentCb;
            this.deleteCommentCb = onDeleteComment || this.deleteCommentCb;
            this.cancelNewCommentCb = onCancelNewComment || this.cancelNewCommentCb;
            this.messageChangeCb = onMessageChange || this.messageChangeCb;
        }
    }, {
        key: 'commentDataChange',
        value: function commentDataChange(unresolvedComments) {
            this.commentDataChangeCb && this.commentDataChangeCb(unresolvedComments);
        }
    }, {
        key: 'addComment',
        value: function addComment(tempCommentId, commentId) {
            this.addCommentCb && this.addCommentCb(tempCommentId, commentId);
        }
    }, {
        key: 'resolveComment',
        value: function resolveComment(commentId) {
            this.resolveCommentCb && this.resolveCommentCb(commentId);
        }
    }, {
        key: 'deleteComment',
        value: function deleteComment(commentId) {
            this.deleteCommentCb && this.deleteCommentCb(commentId);
        }
        // 业务方发起的action
        // 开始初始化评论数据

    }, {
        key: 'startLoadComment',
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                this.commentService.offCommentChange(this.handleCommentChange);
                                this.commentService.onCommentChange(this.handleCommentChange);
                                if (this.useMessageService) {
                                    this.commentService.offMessageChange(this.onMessageChange);
                                    this.commentService.onMessageChange(this.onMessageChange);
                                }
                                this.reactionService && this.reactionService.fetchReactionData();
                                _context3.prev = 4;
                                _context3.next = 7;
                                return this.commentService.fetchComments();

                            case 7:
                                return _context3.abrupt('return', true);

                            case 10:
                                _context3.prev = 10;
                                _context3.t0 = _context3['catch'](4);

                                console.info('CommentManager: fetch comments error ' + _context3.t0);
                                return _context3.abrupt('return', false);

                            case 14:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this, [[4, 10]]);
            }));

            function startLoadComment() {
                return _ref4.apply(this, arguments);
            }

            return startLoadComment;
        }()
        // 打开评论卡片

    }, {
        key: 'activeComment',
        value: function activeComment(commentId) {
            this.nativeCommentView.showCards(commentId);
        }
        /**
         * 新建评论
         * @param quote 被评论引用的内容
         */

    }, {
        key: 'startNewComment',
        value: function startNewComment(quote) {
            var tempCommentId = (0, _bytedCommentSdk.generateCommentId)();
            this.nativeCommentView.showInput(tempCommentId, quote);
            this.collectCommentEvent(_teaLogger.CommentLogAction.INPUT_COMMENT, { is_first: _teaLogger.BOOLEAN_STRING.TRUE });
            return tempCommentId;
        }
        // 设置评论数据，排好序的希望展示的评论id

    }, {
        key: 'setSortedCommentIds',
        value: function setSortedCommentIds(commentIds) {
            var _this2 = this;

            var newSortedComment = [];
            var isOrderChange = false;
            commentIds.forEach(function (commentId, index) {
                if (_this2.sortedCommentIds[index] !== commentId) {
                    isOrderChange = true;
                }
                var comment = _this2.commentDataMap.get(commentId);
                if (comment) {
                    newSortedComment.push(comment);
                } else {
                    console.info('CardComment: comment data not found, ' + commentId);
                }
            });
            this.sortedCommentIds = commentIds;
            this.sortedComments = newSortedComment;
            // 评论顺序发生改变，通知客户端更新
            if (isOrderChange) {
                this.nativeCommentView.updateCards();
            }
        }
        // 设置评论权限

    }, {
        key: 'setCommentable',
        value: function setCommentable(commentable) {
            this.commentable = commentable;
            this.nativeCommentView.setCommentable(commentable);
        }
        // 设置客户端评论卡片是否显示解决操作的三个点更多按钮; 默认显示

    }, {
        key: 'setPanelResolveBtn',
        value: function setPanelResolveBtn(isShown) {
            this.nativeCommentView.setResolve(isShown);
        }
        // 设置客户端评论卡片是否显示删除、编辑操作的三个点更多按钮; 默认显示

    }, {
        key: 'setPanelItemOperator',
        value: function setPanelItemOperator(isShown) {
            this.nativeCommentView.setMore(isShown);
        }
        // 获取所有未解决评论

    }, {
        key: 'getUnsolvedComments',
        value: function getUnsolvedComments() {
            return this.unresolvedComments;
        }
        // 获取卡片高度

    }, {
        key: 'getPanelHeight',
        value: function getPanelHeight() {
            return this.nativeCommentView.getPanelHeight();
        }
    }, {
        key: 'removeListener',
        value: function removeListener() {
            this.commentDataChangeCb = null;
            this.activeCommentChangeCb = null;
            this.addCommentCb = null;
            this.resolveCommentCb = null;
            this.deleteCommentCb = null;
            this.cancelNewCommentCb = null;
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            this.commentDataMap.clear();
            this.removeListener();
            this.nativeCommentView.unbindEvents();
            this.commentService.offCommentChange(this.handleCommentChange);
            this.useMessageService && this.commentService.offMessageChange(this.onMessageChange);
            this.commentService.destroy();
            (0, _commentServiceHelper.destroyCommentService)(_common.NUM_FILE_TYPE[this.type], this.token);
            if (this.reactionService) {
                this.reactionService.unregister(_constants.COMMENT_REACTION_MODULE, this.onReactionDataChange);
                _reaction.reactionSDKManager.destroy({
                    suiteType: _common.NUM_FILE_TYPE[this.type.toUpperCase()],
                    suiteToken: this.token,
                    broadcastType: _constants.COMMENT_REACTION_MODULE
                });
            }
        }
    }]);
    return CommentManager;
}();

exports.default = CommentManager;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(25)))

/***/ }),

/***/ 1937:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _regenerator = __webpack_require__(12);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(99);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _jsBridgeHelper = __webpack_require__(1606);

var _sdkCompatibleHelper = __webpack_require__(45);

var _browserHelper = __webpack_require__(27);

var _browserHelper2 = _interopRequireDefault(_browserHelper);

var _constants = __webpack_require__(1612);

var _reaction = __webpack_require__(1624);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var register = _jsBridgeHelper.JsBridgeManager.register,
    unregister = _jsBridgeHelper.JsBridgeManager.unregister;

var NativeCommentView = function () {
    function NativeCommentView(context, token) {
        var _this = this;

        (0, _classCallCheck3.default)(this, NativeCommentView);

        this.commentable = false;
        // 是否显示卡片右上角解决的更多按钮
        this.showResolve = true;
        // 是否显示编辑、删除的更多按钮
        this.showMore = true;
        this.panelShow = false;
        this.newFetchLocked = false;
        this.setListeners = function (listeners) {
            _this.listeners = listeners;
        };
        this.switchHandler = function (_ref) {
            var commentId = _ref.comment_id,
                _ref$from = _ref.from,
                from = _ref$from === undefined ? '' : _ref$from;

            console.info('Card Comment switch, comment_id:' + commentId);
            _this.panelShow = true;
            if (!commentId || _this.activeCommentId === commentId) return;
            _this.listeners.activeCommentChange(_this.activeCommentId, commentId);
            _this.activeCommentId = commentId;
            if (from === _constants.OPEN_PANEL_SOURCE.FEED && _reaction.isReactionEnabled) {
                // 客户端从feed打开卡片时，更新reaction数据
                _this.updateCards();
            }
        };
        this.publishHandler = function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref3) {
                var isWhole = _ref3.is_whole,
                    content = _ref3.content,
                    commentId = _ref3.comment_id,
                    isFeed = _ref3.is_feed,
                    extra = _ref3.extra;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                console.info('Card Comment publish, is_whole:' + isWhole + ', comment_id:' + commentId + ', is_feed:' + isFeed);
                                content = Base64.decode(content);

                                if (!commentId) {
                                    _context.next = 6;
                                    break;
                                }

                                // 回复已有评论
                                _this.listeners.replyComment(commentId, content, extra);
                                _context.next = 10;
                                break;

                            case 6:
                                // 新建评论
                                _this.newFetchLocked = true;
                                _context.next = 9;
                                return _this.listeners.postNewComment(_this.tempCommentId, _this.quote, content, isWhole, extra);

                            case 9:
                                _this.newFetchLocked = false;

                            case 10:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }();
        this.updateResolveStatusHandler = function (_ref4) {
            var commentId = _ref4.comment_id,
                isResolve = _ref4.is_resolve,
                isWhole = _ref4.is_whole;

            console.info('Card Comment update resolve, is_whole:' + isWhole + ', comment_id:' + commentId);
            if (isWhole) return;
            if (isResolve) {
                _this.listeners.resolveComment(commentId);
            }
        };
        this.cancelHandler = function (_ref5) {
            var type = _ref5.type;

            console.info('Card Comment: native call cancel, ' + type);
            switch (type) {
                case 'whole_comment':
                    break;
                case 'show_cards':
                    // 关闭卡片
                    _this.panelShow = false;
                    _this.listeners.activeCommentChange(_this.activeCommentId, '');
                    _this.activeCommentId = '';
                    break;
                case 'doc_comment':
                    // 取消新建
                    if (_this.newFetchLocked) return;
                    _this.listeners.cancelNewComment(_this.tempCommentId);
                    _this.tempCommentId = '';
                    break;
                default:
            }
        };
        this.setPanelHeightHandler = function (data) {
            if (data && data.height) {
                // Android2.0之前的卡片高度传高了30
                _this.panelHeight = data.height - (_sdkCompatibleHelper.isSupportPrecisePanelHeight ? 0 : 30);
            }
        };
        this.getPanelHeight = function () {
            return _this.panelHeight;
        };
        this.editHandler = function (_ref6) {
            var commentId = _ref6.comment_id,
                replyId = _ref6.reply_id,
                content = _ref6.content,
                isWhole = _ref6.is_whole,
                extra = _ref6.extra;

            console.info('Card Comment edit, is_whole:' + isWhole + ', comment_id:' + commentId + ', reply_id:' + replyId);
            if (isWhole) return;
            content = Base64.decode(content);
            _this.listeners.editComment(commentId, replyId, content, extra);
        };
        this.deleteHandler = function (_ref7) {
            var commentId = _ref7.comment_id,
                replyId = _ref7.reply_id,
                isWhole = _ref7.is_whole;

            console.info('Card Comment edit, is_whole:' + isWhole + ', comment_id:' + commentId + ', reply_id:' + replyId);
            if (isWhole) return;
            _this.listeners.deleteComment(commentId, replyId);
        };
        this.commentRef = context;
        this.token = token;
        var screenHeight = window.innerHeight;
        this.panelHeight = _browserHelper2.default.isIOS // 兼容老版本ios app
        ? _browserHelper2.default.isDocsSDK // lark与Docs panel高度不一致
        ? screenHeight * 0.6 // ios lark
        : screenHeight * 0.55 // ios Docs
        : screenHeight * 0.5; // android
        this.bindEvents();
    }

    (0, _createClass3.default)(NativeCommentView, [{
        key: 'bindEvents',
        value: function bindEvents() {
            register('lark.biz.comment.switchCard', this.switchHandler, true);
            register('lark.biz.comment.publish', this.publishHandler, true);
            register('lark.biz.comment.updateResolveStatus', this.updateResolveStatusHandler, true);
            register('lark.biz.comment.cancel', this.cancelHandler, true);
            register('lark.biz.comment.edit', this.editHandler, true);
            register('lark.biz.comment.delete', this.deleteHandler, true);
            register('lark.biz.util.setPanelHeight', this.setPanelHeightHandler, true);
        }
    }, {
        key: 'unbindEvents',
        value: function unbindEvents() {
            unregister('lark.biz.comment.switchCard', this.switchHandler);
            unregister('lark.biz.comment.publish', this.publishHandler);
            unregister('lark.biz.comment.updateResolveStatus', this.updateResolveStatusHandler);
            unregister('lark.biz.comment.cancel', this.cancelHandler);
            unregister('lark.biz.comment.edit', this.editHandler);
            unregister('lark.biz.comment.delete', this.deleteHandler);
            unregister('lark.biz.util.setPanelHeight', this.setPanelHeightHandler);
        }
    }, {
        key: 'setCommentable',
        value: function setCommentable(commentable) {
            this.commentable = commentable;
        }
    }, {
        key: 'setResolve',
        value: function setResolve(isShown) {
            this.showResolve = isShown;
        }
    }, {
        key: 'setMore',
        value: function setMore(isShown) {
            this.showMore = isShown;
        }
    }, {
        key: 'showInput',
        value: function showInput(tempCommentId, quote) {
            this.tempCommentId = tempCommentId;
            this.quote = quote;
            window.lark.biz.comment.showInput({
                show_voice: true,
                is_whole: false,
                doc_token: this.token,
                type: 0
            });
        }
    }, {
        key: 'showCards',
        value: function showCards(commentId) {
            this.panelShow = true;
            this.activeCommentId = commentId;
            this.updateCards();
        }
    }, {
        key: 'updateCards',
        value: function updateCards() {
            if (!this.panelShow) return;
            window.lark.biz.comment.showCards({
                show_resolve: this.commentable && this.showResolve,
                show_input: this.commentable,
                show_more: this.commentable && this.showMore,
                show_voice: true,
                show_reaction: _reaction.isReactionEnabled,
                cur_comment_id: this.activeCommentId,
                cards: this.commentRef.sortedComments,
                token: this.token
            });
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            this.unbindEvents();
        }
    }]);
    return NativeCommentView;
}();

exports.default = NativeCommentView;

/***/ }),

/***/ 1938:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(t) {

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.tryHighLightMention = tryHighLightMention;
exports.highLightMentionByFeed = highLightMentionByFeed;
exports.scrollAtHolderToTop = scrollAtHolderToTop;

var _jquery = __webpack_require__(4);

var _jquery2 = _interopRequireDefault(_jquery);

var _toast = __webpack_require__(554);

var _toast2 = _interopRequireDefault(_toast);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 尝试查找 url 里的 mention 参数，高亮
 */
function tryHighLightMention() {
    var mentionId = getMnetionId();
    if (mentionId === '') {
        return;
    }
    var $mention = (0, _jquery2.default)('#mention-' + mentionId);
    if ($mention.length !== 0) {
        scrollMentionIntoView($mention);
        highlightMention($mention);
        resetMentionId();
    } else {
        _toast2.default.error({
            closable: true,
            content: t('feed.mention_deleted'),
            style: {
                minWidth: 220
            }
        });
    }
}
/**
 * 高亮 feed 里的 mention
 */
function highLightMentionByFeed(notifyId) {
    var $mention = (0, _jquery2.default)('.mention[data-notify="' + notifyId + '"]');
    if ($mention.length !== 0) {
        scrollMentionIntoView($mention, true);
        highlightMention($mention);
    }
}
/**
 * 把 at holder 滚动到顶部
 */
function scrollAtHolderToTop(id) {
    var $holder = (0, _jquery2.default)('#at-holder-' + id);
    var offset = $holder.offset();
    if (offset) {
        document.body.scrollTop += offset.top;
    }
}
/**
 * 从 url 获取 mentionId
 */
function getMnetionId() {
    var search = window.location.search || '';
    var reg = /(?:\?|&)mentionId=([a-z0-9]+)/i;
    var res = reg.exec(search);
    return res ? res[1] : '';
}
/**
 * 删除 url 的 mentionId，避免刷新之后又高亮
 */
function resetMentionId() {
    if (window.history.replaceState) {
        var newSearch = window.location.search.replace(/(\?|&)mentionId=[a-z0-9]+&?/i, function (match, $1) {
            return $1 || '';
        });
        var newUrl = '' + window.location.pathname + newSearch + window.location.hash;
        window.history.replaceState({}, document.title, newUrl);
    }
}
/**
 * 把 mention 滚动到可见范围
 */
function scrollMentionIntoView($mention) {
    var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var dom = $mention[0];
    if (dom.scrollIntoViewIfNeeded && !force) {
        dom.scrollIntoViewIfNeeded({ behavior: 'smooth' });
    } else {
        dom.scrollIntoView({ behavior: 'smooth' });
    }
}
/**
 * 高亮 mention
 */
function highlightMention($mention) {
    $mention.addClass('highlight');
    window.setTimeout(function () {
        $mention.removeClass('highlight');
    }, 2000);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(25)))

/***/ }),

/***/ 2197:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__(1587).Buffer
var Transform = __webpack_require__(1922).Transform
var inherits = __webpack_require__(1585)

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase


/***/ }),

/***/ 2198:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__(1814);
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(3626);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(1766).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(2199);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(1587).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(1748);
util.inherits = __webpack_require__(1585);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(3627);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(3628);
var destroyImpl = __webpack_require__(2200);
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(1696);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(1767).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(1696);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(1767).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(71), __webpack_require__(221)))

/***/ }),

/***/ 2199:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1766).EventEmitter;


/***/ }),

/***/ 2200:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__(1814);
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),

/***/ 2201:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(1696);

/*<replacement>*/
var util = __webpack_require__(1748);
util.inherits = __webpack_require__(1585);
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),

/***/ 2202:
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(1585)
var Hash = __webpack_require__(1720)
var Buffer = __webpack_require__(1587).Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256


/***/ }),

/***/ 2203:
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1585)
var Hash = __webpack_require__(1720)
var Buffer = __webpack_require__(1587).Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512


/***/ }),

/***/ 2204:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(1585)
var Legacy = __webpack_require__(3640)
var Base = __webpack_require__(1680)
var Buffer = __webpack_require__(1587).Buffer
var md5 = __webpack_require__(2205)
var RIPEMD160 = __webpack_require__(1925)

var sha = __webpack_require__(1926)

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}


/***/ }),

/***/ 2205:
/***/ (function(module, exports, __webpack_require__) {

var MD5 = __webpack_require__(1921)

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}


/***/ }),

/***/ 2206:
/***/ (function(module) {

module.exports = {"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}};

/***/ }),

/***/ 2207:
/***/ (function(module, exports, __webpack_require__) {

exports.pbkdf2 = __webpack_require__(3642)
exports.pbkdf2Sync = __webpack_require__(2210)


/***/ }),

/***/ 2208:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

function checkBuffer (buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string')
  }
}

module.exports = function (password, salt, iterations, keylen) {
  checkBuffer(password, 'Password')
  checkBuffer(salt, 'Salt')

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(741).Buffer))

/***/ }),

/***/ 2209:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var defaultEncoding
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}
module.exports = defaultEncoding

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(221)))

/***/ }),

/***/ 2210:
/***/ (function(module, exports, __webpack_require__) {

var md5 = __webpack_require__(2205)
var RIPEMD160 = __webpack_require__(1925)
var sha = __webpack_require__(1926)

var checkParameters = __webpack_require__(2208)
var defaultEncoding = __webpack_require__(2209)
var Buffer = __webpack_require__(1587).Buffer
var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(password, salt, iterations, keylen)

  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2


/***/ }),

/***/ 2211:
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(1749)
var Buffer = __webpack_require__(1587).Buffer
var incr32 = __webpack_require__(2212)

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}


/***/ }),

/***/ 2212:
/***/ (function(module, exports) {

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32


/***/ }),

/***/ 2213:
/***/ (function(module) {

module.exports = {"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}};

/***/ }),

/***/ 2214:
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__(1815)
var Buffer = __webpack_require__(1587).Buffer
var Transform = __webpack_require__(1680)
var inherits = __webpack_require__(1585)
var GHASH = __webpack_require__(3657)
var xor = __webpack_require__(1749)
var incr32 = __webpack_require__(2212)

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher


/***/ }),

/***/ 2215:
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__(1815)
var Buffer = __webpack_require__(1587).Buffer
var Transform = __webpack_require__(1680)
var inherits = __webpack_require__(1585)

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher


/***/ }),

/***/ 2216:
/***/ (function(module, exports, __webpack_require__) {

var randomBytes = __webpack_require__(1719);
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = __webpack_require__(1604);
var TWENTYFOUR = new BN(24);
var MillerRabin = __webpack_require__(2217);
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}


/***/ }),

/***/ 2217:
/***/ (function(module, exports, __webpack_require__) {

var bn = __webpack_require__(1604);
var brorand = __webpack_require__(2218);

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};


/***/ }),

/***/ 2218:
/***/ (function(module, exports, __webpack_require__) {

var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(3662);
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}


/***/ }),

/***/ 2219:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};


/***/ }),

/***/ 2220:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1649);
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;


/***/ }),

/***/ 2221:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1649);
var common = __webpack_require__(1750);
var shaCommon = __webpack_require__(2220);
var assert = __webpack_require__(1638);

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),

/***/ 2222:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1649);
var common = __webpack_require__(1750);
var assert = __webpack_require__(1638);

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}


/***/ }),

/***/ 2223:
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1585);
var Reporter = __webpack_require__(1752).Reporter;
var Buffer = __webpack_require__(741).Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};


/***/ }),

/***/ 2224:
/***/ (function(module, exports, __webpack_require__) {

var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = __webpack_require__(3694);


/***/ }),

/***/ 2225:
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1585);

var asn1 = __webpack_require__(1751);
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}


/***/ }),

/***/ 2226:
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1585);
var Buffer = __webpack_require__(741).Buffer;

var asn1 = __webpack_require__(1751);
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}


/***/ }),

/***/ 2227:
/***/ (function(module) {

module.exports = {"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"};

/***/ }),

/***/ 2228:
/***/ (function(module, exports, __webpack_require__) {

var createHash = __webpack_require__(1747)
var Buffer = __webpack_require__(1587).Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}


/***/ }),

/***/ 2229:
/***/ (function(module, exports) {

module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}


/***/ }),

/***/ 2230:
/***/ (function(module, exports, __webpack_require__) {

var BN = __webpack_require__(1604)
var Buffer = __webpack_require__(1587).Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic


/***/ }),

/***/ 2231:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var StatusCode = exports.StatusCode = undefined;
(function (StatusCode) {
  /**
   * 请求成功
   */
  StatusCode[StatusCode["SUCCESS"] = 0] = "SUCCESS";
  /**
   * 请求失败
   */
  StatusCode[StatusCode["FAILED"] = 1] = "FAILED";
  /**
   * 参数错误
   */
  StatusCode[StatusCode["INVALID_PARAM"] = 2] = "INVALID_PARAM";
  /**
   * 找不到资源
   */
  StatusCode[StatusCode["NOT_FOUND"] = 3] = "NOT_FOUND";
  /**
   * 没有访问权限
   */
  StatusCode[StatusCode["FORBIDDEN"] = 4] = "FORBIDDEN";
  /**
   * 未登陆
   */
  StatusCode[StatusCode["LOGIN_REQUIRED"] = 5] = "LOGIN_REQUIRED";
  /**
   * 数据太多，没法一次返回
   */
  StatusCode[StatusCode["LIMIT_EXCEED"] = 6] = "LIMIT_EXCEED";
  /**
   * 用户请求的changeset数量超过限制
   */
  StatusCode[StatusCode["CHANGESET_LIMIT_EXCEED"] = 1001] = "CHANGESET_LIMIT_EXCEED";
  /**
   * 资源已被删除
   */
  StatusCode[StatusCode["OBJECT_DELETED"] = 1002] = "OBJECT_DELETED";
  /**
   * member_id不在session中
   */
  StatusCode[StatusCode["NOT_IN_SESSION"] = 1003] = "NOT_IN_SESSION";
  /**
   * 提交效验失败
   */
  StatusCode[StatusCode["CHAGESET_INVALID"] = 1005] = "CHAGESET_INVALID";
  /**
   * 内部错误，就是后端挂了
   */
  StatusCode[StatusCode["INTERNAL_ERROR"] = 1006] = "INTERNAL_ERROR";
  /**
   * 消息不合法
   */
  StatusCode[StatusCode["INVALID_MESSAGE"] = 1007] = "INVALID_MESSAGE";
  /**
   * 算法处理失败，后端崩了
   */
  StatusCode[StatusCode["SYNC_FAILED"] = 1008] = "SYNC_FAILED";
  /**
   * 文档太旧
   */
  StatusCode[StatusCode["VERSION_TOO_OLD"] = 1010] = "VERSION_TOO_OLD";
  /**
   * 没有编辑权限
   */
  StatusCode[StatusCode["WRITE_PERMISSION_DENIED"] = 1012] = "WRITE_PERMISSION_DENIED";
  /**
   * 没有评论权限
   */
  StatusCode[StatusCode["COMMENT_PERMISSION_DENIED"] = 1013] = "COMMENT_PERMISSION_DENIED";
  /**
   * 依赖服务异常，后端挂了
   */
  StatusCode[StatusCode["SERVICE_ERROR"] = 1015] = "SERVICE_ERROR";
  /**
   * 数据库存储冲突，后端竞争出错
   */
  StatusCode[StatusCode["DATABASE_CONFLICT"] = 1021] = "DATABASE_CONFLICT";
  /**
   * 请求频繁
   */
  StatusCode[StatusCode["SERVER_BUSY"] = 9998] = "SERVER_BUSY";
})(StatusCode || (exports.StatusCode = StatusCode = {}));
var EngineType = exports.EngineType = undefined;
(function (EngineType) {
  /**
   * 思维笔记相关消息
   */
  EngineType["MIND_NOTE"] = "MINDNOTE";
  /**
   * Room 相关消息，进房、离房、心跳等
   */
  EngineType["COLLABROOM"] = "COLLABROOM";
  /**
   * 权限通知
   */
  EngineType["NOTIFY"] = "NOTIFY";
})(EngineType || (exports.EngineType = EngineType = {}));
/**
 * 二级消息类型，上行：客户端推给服务端，下行：服务端推给客户端，双工：客户端和服务端都会推
 */
var MessageType = exports.MessageType = undefined;
(function (MessageType) {
  /**
   * 新用户进房（下行）
   */
  MessageType["USER_NEWINFO"] = "USER_NEWINFO";
  /**
   * 用户离房（下行）
   */
  MessageType["USER_LEAVE"] = "USER_LEAVE";
  /**
   * 初始化数据（双工）
   */
  MessageType["CLIENT_VARS"] = "CLIENT_VARS";
  /**
   * 广播光标（双工）
   */
  MessageType["ENGAGEMENT_CURSOR"] = "ENGAGEMENT_CURSOR";
  /**
   * 广播光标ACK（下行）
   */
  MessageType["ACCEPT_ENGAGEMENT_CURSOR"] = "ACCEPT_ENGAGEMENT_CURSOR";
  /**
   * 进房成功（下行）
   */
  MessageType["ACCEPT_WATCH"] = "ACCEPT_WATCH";
  /**
   * Changeset ACK（下行）
   */
  MessageType["ACCEPT_COMMIT"] = "ACCEPT_COMMIT";
  /**
   * 远端推送的新 Changeset（下行）
   */
  MessageType["NEW_CHANGES"] = "NEW_CHANGES";
  /**
   * 本地产生的 Changeset（上行）
   */
  MessageType["USER_CHANGES"] = "USER_CHANGES";
  /**
   * 查询频道（上行）
   */
  MessageType["MESSAGE_CHANNEL"] = "MESSAGE_CHANNEL";
  /**
   * 房间所有成员信息（下行）
   */
  MessageType["ROOM_MEMBERS"] = "ROOM_MEMBERS";
  /**
   * 权限变更（这个变更消息是一个历史消息，用于文件夹相关的操作）
   */
  MessageType["PERMISSION_CHANGE"] = "PERMISSION_CHANGE";
  /**
   * 文档中的权限变更消息（下行）
   */
  MessageType["OBJ_PERMISSION_CHANGE"] = "OBJ_PERMISSION_CHANGE";
  /**
   * 文档标题修改（双工）
   */
  MessageType["OBJ_TITLE_CHANGE"] = "OBJ_TITLE_CHANGE";
  /**
   * 错误（下行）
   */
  MessageType["ERROR"] = "ERROR";
})(MessageType || (exports.MessageType = MessageType = {}));
/**
 * 查询频道
 */
var MessageChannel = exports.MessageChannel = undefined;
(function (MessageChannel) {
  /**
   * 文档权限频道
   */
  MessageChannel["PERMISSION_CHANNEL"] = "obj_permission_channel";
  /**
   * 文档引擎查询频道
   */
  MessageChannel["ENGINE_CHANNEL"] = "engine_channel";
  /**
   * 房间信息查询频道
   */
  MessageChannel["MEMBER_CHANNEL"] = "member_channel";
  /**
   * 评论版本信息
   */
  MessageChannel["COMMENT_CHANNEL"] = "comment_channel";
})(MessageChannel || (exports.MessageChannel = MessageChannel = {}));

/***/ }),

/***/ 2232:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MoiraeKeys = undefined;

var _mapValues2 = __webpack_require__(3709);

var _mapValues3 = _interopRequireDefault(_mapValues2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * moirae 打点 key 前缀
 */
var PREFIX = 'ee.docs.mindnote.';
/**
 * moirae 打点 key 列表，不含前缀
 */
var KEYS = {
  /**
   * sync 请求
   */
  SYNC_REQUEST: 'sync_request',
  /**
   * sync 请求失败
   */
  SYNC_REQUEST_FAILED: 'sync_request_fail',
  /**
   * transform 失败
   */
  TRANSFORM_FAILED: 'transform_fail',
  /**
   * transform redo/undo 失败
   */
  TRANSFORM_UNDO_FAILED: 'transform_undo_fail',
  /**
   * apply 本地 operation 失败
   */
  APPLY_CLIENT_OP_FAILED: 'apply_client_op_fail',
  /**
   * apply 远端 operation 失败
   */
  APPLY_SERVER_OP_FAILED: 'apply_server_op_fail',
  /**
   * 拉取缺失版本
   */
  FETCH_MISS_CHANGESET: 'fetch_miss_changeset',
  /**
   * 上传图片失败
   */
  UPLOAD_IMAGE_FAILED: 'upload_image_fail'
};
/**
 * moirae 打点 key 列表，包含前缀
 */
var MoiraeKeys = exports.MoiraeKeys = (0, _mapValues3.default)(KEYS, function (key) {
  return '' + PREFIX + key;
});

/***/ }),

/***/ 2233:
/***/ (function(module, exports, __webpack_require__) {

/**
 * default settings
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var FilterCSS = __webpack_require__(1933).FilterCSS;
var getDefaultCSSWhiteList = __webpack_require__(1933).getDefaultWhiteList;
var _ = __webpack_require__(1934);

function getDefaultWhiteList() {
  return {
    a: ["target", "href", "title"],
    abbr: ["title"],
    address: [],
    area: ["shape", "coords", "href", "alt"],
    article: [],
    aside: [],
    audio: ["autoplay", "controls", "loop", "preload", "src"],
    b: [],
    bdi: ["dir"],
    bdo: ["dir"],
    big: [],
    blockquote: ["cite"],
    br: [],
    caption: [],
    center: [],
    cite: [],
    code: [],
    col: ["align", "valign", "span", "width"],
    colgroup: ["align", "valign", "span", "width"],
    dd: [],
    del: ["datetime"],
    details: ["open"],
    div: [],
    dl: [],
    dt: [],
    em: [],
    font: ["color", "size", "face"],
    footer: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    header: [],
    hr: [],
    i: [],
    img: ["src", "alt", "title", "width", "height"],
    ins: ["datetime"],
    li: [],
    mark: [],
    nav: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    section: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    table: ["width", "border", "align", "valign"],
    tbody: ["align", "valign"],
    td: ["width", "rowspan", "colspan", "align", "valign"],
    tfoot: ["align", "valign"],
    th: ["width", "rowspan", "colspan", "align", "valign"],
    thead: ["align", "valign"],
    tr: ["rowspan", "align", "valign"],
    tt: [],
    u: [],
    ul: [],
    video: ["autoplay", "controls", "loop", "preload", "src", "height", "width"]
  };
}

var defaultCSSFilter = new FilterCSS();

/**
 * default onTag function
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */
function onTag(tag, html, options) {
  // do nothing
}

/**
 * default onIgnoreTag function
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */
function onIgnoreTag(tag, html, options) {
  // do nothing
}

/**
 * default onTagAttr function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function onTagAttr(tag, name, value) {
  // do nothing
}

/**
 * default onIgnoreTagAttr function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function onIgnoreTagAttr(tag, name, value) {
  // do nothing
}

/**
 * default escapeHtml function
 *
 * @param {String} html
 */
function escapeHtml(html) {
  return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
}

/**
 * default safeAttrValue function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @param {Object} cssFilter
 * @return {String}
 */
function safeAttrValue(tag, name, value, cssFilter) {
  // unescape attribute value firstly
  value = friendlyAttrValue(value);

  if (name === "href" || name === "src") {
    // filter `href` and `src` attribute
    // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`
    value = _.trim(value);
    if (value === "#") return "#";
    if (
      !(
        value.substr(0, 7) === "http://" ||
        value.substr(0, 8) === "https://" ||
        value.substr(0, 7) === "mailto:" ||
        value.substr(0, 4) === "tel:" ||
        value[0] === "#" ||
        value[0] === "/"
      )
    ) {
      return "";
    }
  } else if (name === "background") {
    // filter `background` attribute (maybe no use)
    // `javascript:`
    REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
      return "";
    }
  } else if (name === "style") {
    // `expression()`
    REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
      return "";
    }
    // `url()`
    REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
      REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
        return "";
      }
    }
    if (cssFilter !== false) {
      cssFilter = cssFilter || defaultCSSFilter;
      value = cssFilter.process(value);
    }
  }

  // escape `<>"` before returns
  value = escapeAttrValue(value);
  return value;
}

// RegExp list
var REGEXP_LT = /</g;
var REGEXP_GT = />/g;
var REGEXP_QUOTE = /"/g;
var REGEXP_QUOTE_2 = /&quot;/g;
var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\/\*|\*\//gm;
var REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a)\:/gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:/gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:\s*image\//gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;

/**
 * escape doube quote
 *
 * @param {String} str
 * @return {String} str
 */
function escapeQuote(str) {
  return str.replace(REGEXP_QUOTE, "&quot;");
}

/**
 * unescape double quote
 *
 * @param {String} str
 * @return {String} str
 */
function unescapeQuote(str) {
  return str.replace(REGEXP_QUOTE_2, '"');
}

/**
 * escape html entities
 *
 * @param {String} str
 * @return {String}
 */
function escapeHtmlEntities(str) {
  return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {
    return code[0] === "x" || code[0] === "X"
      ? String.fromCharCode(parseInt(code.substr(1), 16))
      : String.fromCharCode(parseInt(code, 10));
  });
}

/**
 * escape html5 new danger entities
 *
 * @param {String} str
 * @return {String}
 */
function escapeDangerHtml5Entities(str) {
  return str
    .replace(REGEXP_ATTR_VALUE_COLON, ":")
    .replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
}

/**
 * clear nonprintable characters
 *
 * @param {String} str
 * @return {String}
 */
function clearNonPrintableCharacter(str) {
  var str2 = "";
  for (var i = 0, len = str.length; i < len; i++) {
    str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
  }
  return _.trim(str2);
}

/**
 * get friendly attribute value
 *
 * @param {String} str
 * @return {String}
 */
function friendlyAttrValue(str) {
  str = unescapeQuote(str);
  str = escapeHtmlEntities(str);
  str = escapeDangerHtml5Entities(str);
  str = clearNonPrintableCharacter(str);
  return str;
}

/**
 * unescape attribute value
 *
 * @param {String} str
 * @return {String}
 */
function escapeAttrValue(str) {
  str = escapeQuote(str);
  str = escapeHtml(str);
  return str;
}

/**
 * `onIgnoreTag` function for removing all the tags that are not in whitelist
 */
function onIgnoreTagStripAll() {
  return "";
}

/**
 * remove tag body
 * specify a `tags` list, if the tag is not in the `tags` list then process by the specify function (optional)
 *
 * @param {array} tags
 * @param {function} next
 */
function StripTagBody(tags, next) {
  if (typeof next !== "function") {
    next = function() {};
  }

  var isRemoveAllTag = !Array.isArray(tags);
  function isRemoveTag(tag) {
    if (isRemoveAllTag) return true;
    return _.indexOf(tags, tag) !== -1;
  }

  var removeList = [];
  var posStart = false;

  return {
    onIgnoreTag: function(tag, html, options) {
      if (isRemoveTag(tag)) {
        if (options.isClosing) {
          var ret = "[/removed]";
          var end = options.position + ret.length;
          removeList.push([
            posStart !== false ? posStart : options.position,
            end
          ]);
          posStart = false;
          return ret;
        } else {
          if (!posStart) {
            posStart = options.position;
          }
          return "[removed]";
        }
      } else {
        return next(tag, html, options);
      }
    },
    remove: function(html) {
      var rethtml = "";
      var lastPos = 0;
      _.forEach(removeList, function(pos) {
        rethtml += html.slice(lastPos, pos[0]);
        lastPos = pos[1];
      });
      rethtml += html.slice(lastPos);
      return rethtml;
    }
  };
}

/**
 * remove html comments
 *
 * @param {String} html
 * @return {String}
 */
function stripCommentTag(html) {
  return html.replace(STRIP_COMMENT_TAG_REGEXP, "");
}
var STRIP_COMMENT_TAG_REGEXP = /<!--[\s\S]*?-->/g;

/**
 * remove invisible characters
 *
 * @param {String} html
 * @return {String}
 */
function stripBlankChar(html) {
  var chars = html.split("");
  chars = chars.filter(function(char) {
    var c = char.charCodeAt(0);
    if (c === 127) return false;
    if (c <= 31) {
      if (c === 10 || c === 13) return true;
      return false;
    }
    return true;
  });
  return chars.join("");
}

exports.whiteList = getDefaultWhiteList();
exports.getDefaultWhiteList = getDefaultWhiteList;
exports.onTag = onTag;
exports.onIgnoreTag = onIgnoreTag;
exports.onTagAttr = onTagAttr;
exports.onIgnoreTagAttr = onIgnoreTagAttr;
exports.safeAttrValue = safeAttrValue;
exports.escapeHtml = escapeHtml;
exports.escapeQuote = escapeQuote;
exports.unescapeQuote = unescapeQuote;
exports.escapeHtmlEntities = escapeHtmlEntities;
exports.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
exports.clearNonPrintableCharacter = clearNonPrintableCharacter;
exports.friendlyAttrValue = friendlyAttrValue;
exports.escapeAttrValue = escapeAttrValue;
exports.onIgnoreTagStripAll = onIgnoreTagStripAll;
exports.StripTagBody = StripTagBody;
exports.stripCommentTag = stripCommentTag;
exports.stripBlankChar = stripBlankChar;
exports.cssFilter = defaultCSSFilter;
exports.getDefaultCSSWhiteList = getDefaultCSSWhiteList;


/***/ }),

/***/ 2234:
/***/ (function(module, exports) {

/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */

function getDefaultWhiteList () {
  // 白名单值说明：
  // true: 允许该属性
  // Function: function (val) { } 返回true表示允许该属性，其他值均表示不允许
  // RegExp: regexp.test(val) 返回true表示允许该属性，其他值均表示不允许
  // 除上面列出的值外均表示不允许
  var whiteList = {};

  whiteList['align-content'] = false; // default: auto
  whiteList['align-items'] = false; // default: auto
  whiteList['align-self'] = false; // default: auto
  whiteList['alignment-adjust'] = false; // default: auto
  whiteList['alignment-baseline'] = false; // default: baseline
  whiteList['all'] = false; // default: depending on individual properties
  whiteList['anchor-point'] = false; // default: none
  whiteList['animation'] = false; // default: depending on individual properties
  whiteList['animation-delay'] = false; // default: 0
  whiteList['animation-direction'] = false; // default: normal
  whiteList['animation-duration'] = false; // default: 0
  whiteList['animation-fill-mode'] = false; // default: none
  whiteList['animation-iteration-count'] = false; // default: 1
  whiteList['animation-name'] = false; // default: none
  whiteList['animation-play-state'] = false; // default: running
  whiteList['animation-timing-function'] = false; // default: ease
  whiteList['azimuth'] = false; // default: center
  whiteList['backface-visibility'] = false; // default: visible
  whiteList['background'] = true; // default: depending on individual properties
  whiteList['background-attachment'] = true; // default: scroll
  whiteList['background-clip'] = true; // default: border-box
  whiteList['background-color'] = true; // default: transparent
  whiteList['background-image'] = true; // default: none
  whiteList['background-origin'] = true; // default: padding-box
  whiteList['background-position'] = true; // default: 0% 0%
  whiteList['background-repeat'] = true; // default: repeat
  whiteList['background-size'] = true; // default: auto
  whiteList['baseline-shift'] = false; // default: baseline
  whiteList['binding'] = false; // default: none
  whiteList['bleed'] = false; // default: 6pt
  whiteList['bookmark-label'] = false; // default: content()
  whiteList['bookmark-level'] = false; // default: none
  whiteList['bookmark-state'] = false; // default: open
  whiteList['border'] = true; // default: depending on individual properties
  whiteList['border-bottom'] = true; // default: depending on individual properties
  whiteList['border-bottom-color'] = true; // default: current color
  whiteList['border-bottom-left-radius'] = true; // default: 0
  whiteList['border-bottom-right-radius'] = true; // default: 0
  whiteList['border-bottom-style'] = true; // default: none
  whiteList['border-bottom-width'] = true; // default: medium
  whiteList['border-collapse'] = true; // default: separate
  whiteList['border-color'] = true; // default: depending on individual properties
  whiteList['border-image'] = true; // default: none
  whiteList['border-image-outset'] = true; // default: 0
  whiteList['border-image-repeat'] = true; // default: stretch
  whiteList['border-image-slice'] = true; // default: 100%
  whiteList['border-image-source'] = true; // default: none
  whiteList['border-image-width'] = true; // default: 1
  whiteList['border-left'] = true; // default: depending on individual properties
  whiteList['border-left-color'] = true; // default: current color
  whiteList['border-left-style'] = true; // default: none
  whiteList['border-left-width'] = true; // default: medium
  whiteList['border-radius'] = true; // default: 0
  whiteList['border-right'] = true; // default: depending on individual properties
  whiteList['border-right-color'] = true; // default: current color
  whiteList['border-right-style'] = true; // default: none
  whiteList['border-right-width'] = true; // default: medium
  whiteList['border-spacing'] = true; // default: 0
  whiteList['border-style'] = true; // default: depending on individual properties
  whiteList['border-top'] = true; // default: depending on individual properties
  whiteList['border-top-color'] = true; // default: current color
  whiteList['border-top-left-radius'] = true; // default: 0
  whiteList['border-top-right-radius'] = true; // default: 0
  whiteList['border-top-style'] = true; // default: none
  whiteList['border-top-width'] = true; // default: medium
  whiteList['border-width'] = true; // default: depending on individual properties
  whiteList['bottom'] = false; // default: auto
  whiteList['box-decoration-break'] = true; // default: slice
  whiteList['box-shadow'] = true; // default: none
  whiteList['box-sizing'] = true; // default: content-box
  whiteList['box-snap'] = true; // default: none
  whiteList['box-suppress'] = true; // default: show
  whiteList['break-after'] = true; // default: auto
  whiteList['break-before'] = true; // default: auto
  whiteList['break-inside'] = true; // default: auto
  whiteList['caption-side'] = false; // default: top
  whiteList['chains'] = false; // default: none
  whiteList['clear'] = true; // default: none
  whiteList['clip'] = false; // default: auto
  whiteList['clip-path'] = false; // default: none
  whiteList['clip-rule'] = false; // default: nonzero
  whiteList['color'] = true; // default: implementation dependent
  whiteList['color-interpolation-filters'] = true; // default: auto
  whiteList['column-count'] = false; // default: auto
  whiteList['column-fill'] = false; // default: balance
  whiteList['column-gap'] = false; // default: normal
  whiteList['column-rule'] = false; // default: depending on individual properties
  whiteList['column-rule-color'] = false; // default: current color
  whiteList['column-rule-style'] = false; // default: medium
  whiteList['column-rule-width'] = false; // default: medium
  whiteList['column-span'] = false; // default: none
  whiteList['column-width'] = false; // default: auto
  whiteList['columns'] = false; // default: depending on individual properties
  whiteList['contain'] = false; // default: none
  whiteList['content'] = false; // default: normal
  whiteList['counter-increment'] = false; // default: none
  whiteList['counter-reset'] = false; // default: none
  whiteList['counter-set'] = false; // default: none
  whiteList['crop'] = false; // default: auto
  whiteList['cue'] = false; // default: depending on individual properties
  whiteList['cue-after'] = false; // default: none
  whiteList['cue-before'] = false; // default: none
  whiteList['cursor'] = false; // default: auto
  whiteList['direction'] = false; // default: ltr
  whiteList['display'] = true; // default: depending on individual properties
  whiteList['display-inside'] = true; // default: auto
  whiteList['display-list'] = true; // default: none
  whiteList['display-outside'] = true; // default: inline-level
  whiteList['dominant-baseline'] = false; // default: auto
  whiteList['elevation'] = false; // default: level
  whiteList['empty-cells'] = false; // default: show
  whiteList['filter'] = false; // default: none
  whiteList['flex'] = false; // default: depending on individual properties
  whiteList['flex-basis'] = false; // default: auto
  whiteList['flex-direction'] = false; // default: row
  whiteList['flex-flow'] = false; // default: depending on individual properties
  whiteList['flex-grow'] = false; // default: 0
  whiteList['flex-shrink'] = false; // default: 1
  whiteList['flex-wrap'] = false; // default: nowrap
  whiteList['float'] = false; // default: none
  whiteList['float-offset'] = false; // default: 0 0
  whiteList['flood-color'] = false; // default: black
  whiteList['flood-opacity'] = false; // default: 1
  whiteList['flow-from'] = false; // default: none
  whiteList['flow-into'] = false; // default: none
  whiteList['font'] = true; // default: depending on individual properties
  whiteList['font-family'] = true; // default: implementation dependent
  whiteList['font-feature-settings'] = true; // default: normal
  whiteList['font-kerning'] = true; // default: auto
  whiteList['font-language-override'] = true; // default: normal
  whiteList['font-size'] = true; // default: medium
  whiteList['font-size-adjust'] = true; // default: none
  whiteList['font-stretch'] = true; // default: normal
  whiteList['font-style'] = true; // default: normal
  whiteList['font-synthesis'] = true; // default: weight style
  whiteList['font-variant'] = true; // default: normal
  whiteList['font-variant-alternates'] = true; // default: normal
  whiteList['font-variant-caps'] = true; // default: normal
  whiteList['font-variant-east-asian'] = true; // default: normal
  whiteList['font-variant-ligatures'] = true; // default: normal
  whiteList['font-variant-numeric'] = true; // default: normal
  whiteList['font-variant-position'] = true; // default: normal
  whiteList['font-weight'] = true; // default: normal
  whiteList['grid'] = false; // default: depending on individual properties
  whiteList['grid-area'] = false; // default: depending on individual properties
  whiteList['grid-auto-columns'] = false; // default: auto
  whiteList['grid-auto-flow'] = false; // default: none
  whiteList['grid-auto-rows'] = false; // default: auto
  whiteList['grid-column'] = false; // default: depending on individual properties
  whiteList['grid-column-end'] = false; // default: auto
  whiteList['grid-column-start'] = false; // default: auto
  whiteList['grid-row'] = false; // default: depending on individual properties
  whiteList['grid-row-end'] = false; // default: auto
  whiteList['grid-row-start'] = false; // default: auto
  whiteList['grid-template'] = false; // default: depending on individual properties
  whiteList['grid-template-areas'] = false; // default: none
  whiteList['grid-template-columns'] = false; // default: none
  whiteList['grid-template-rows'] = false; // default: none
  whiteList['hanging-punctuation'] = false; // default: none
  whiteList['height'] = true; // default: auto
  whiteList['hyphens'] = false; // default: manual
  whiteList['icon'] = false; // default: auto
  whiteList['image-orientation'] = false; // default: auto
  whiteList['image-resolution'] = false; // default: normal
  whiteList['ime-mode'] = false; // default: auto
  whiteList['initial-letters'] = false; // default: normal
  whiteList['inline-box-align'] = false; // default: last
  whiteList['justify-content'] = false; // default: auto
  whiteList['justify-items'] = false; // default: auto
  whiteList['justify-self'] = false; // default: auto
  whiteList['left'] = false; // default: auto
  whiteList['letter-spacing'] = true; // default: normal
  whiteList['lighting-color'] = true; // default: white
  whiteList['line-box-contain'] = false; // default: block inline replaced
  whiteList['line-break'] = false; // default: auto
  whiteList['line-grid'] = false; // default: match-parent
  whiteList['line-height'] = false; // default: normal
  whiteList['line-snap'] = false; // default: none
  whiteList['line-stacking'] = false; // default: depending on individual properties
  whiteList['line-stacking-ruby'] = false; // default: exclude-ruby
  whiteList['line-stacking-shift'] = false; // default: consider-shifts
  whiteList['line-stacking-strategy'] = false; // default: inline-line-height
  whiteList['list-style'] = true; // default: depending on individual properties
  whiteList['list-style-image'] = true; // default: none
  whiteList['list-style-position'] = true; // default: outside
  whiteList['list-style-type'] = true; // default: disc
  whiteList['margin'] = true; // default: depending on individual properties
  whiteList['margin-bottom'] = true; // default: 0
  whiteList['margin-left'] = true; // default: 0
  whiteList['margin-right'] = true; // default: 0
  whiteList['margin-top'] = true; // default: 0
  whiteList['marker-offset'] = false; // default: auto
  whiteList['marker-side'] = false; // default: list-item
  whiteList['marks'] = false; // default: none
  whiteList['mask'] = false; // default: border-box
  whiteList['mask-box'] = false; // default: see individual properties
  whiteList['mask-box-outset'] = false; // default: 0
  whiteList['mask-box-repeat'] = false; // default: stretch
  whiteList['mask-box-slice'] = false; // default: 0 fill
  whiteList['mask-box-source'] = false; // default: none
  whiteList['mask-box-width'] = false; // default: auto
  whiteList['mask-clip'] = false; // default: border-box
  whiteList['mask-image'] = false; // default: none
  whiteList['mask-origin'] = false; // default: border-box
  whiteList['mask-position'] = false; // default: center
  whiteList['mask-repeat'] = false; // default: no-repeat
  whiteList['mask-size'] = false; // default: border-box
  whiteList['mask-source-type'] = false; // default: auto
  whiteList['mask-type'] = false; // default: luminance
  whiteList['max-height'] = true; // default: none
  whiteList['max-lines'] = false; // default: none
  whiteList['max-width'] = true; // default: none
  whiteList['min-height'] = true; // default: 0
  whiteList['min-width'] = true; // default: 0
  whiteList['move-to'] = false; // default: normal
  whiteList['nav-down'] = false; // default: auto
  whiteList['nav-index'] = false; // default: auto
  whiteList['nav-left'] = false; // default: auto
  whiteList['nav-right'] = false; // default: auto
  whiteList['nav-up'] = false; // default: auto
  whiteList['object-fit'] = false; // default: fill
  whiteList['object-position'] = false; // default: 50% 50%
  whiteList['opacity'] = false; // default: 1
  whiteList['order'] = false; // default: 0
  whiteList['orphans'] = false; // default: 2
  whiteList['outline'] = false; // default: depending on individual properties
  whiteList['outline-color'] = false; // default: invert
  whiteList['outline-offset'] = false; // default: 0
  whiteList['outline-style'] = false; // default: none
  whiteList['outline-width'] = false; // default: medium
  whiteList['overflow'] = false; // default: depending on individual properties
  whiteList['overflow-wrap'] = false; // default: normal
  whiteList['overflow-x'] = false; // default: visible
  whiteList['overflow-y'] = false; // default: visible
  whiteList['padding'] = true; // default: depending on individual properties
  whiteList['padding-bottom'] = true; // default: 0
  whiteList['padding-left'] = true; // default: 0
  whiteList['padding-right'] = true; // default: 0
  whiteList['padding-top'] = true; // default: 0
  whiteList['page'] = false; // default: auto
  whiteList['page-break-after'] = false; // default: auto
  whiteList['page-break-before'] = false; // default: auto
  whiteList['page-break-inside'] = false; // default: auto
  whiteList['page-policy'] = false; // default: start
  whiteList['pause'] = false; // default: implementation dependent
  whiteList['pause-after'] = false; // default: implementation dependent
  whiteList['pause-before'] = false; // default: implementation dependent
  whiteList['perspective'] = false; // default: none
  whiteList['perspective-origin'] = false; // default: 50% 50%
  whiteList['pitch'] = false; // default: medium
  whiteList['pitch-range'] = false; // default: 50
  whiteList['play-during'] = false; // default: auto
  whiteList['position'] = false; // default: static
  whiteList['presentation-level'] = false; // default: 0
  whiteList['quotes'] = false; // default: text
  whiteList['region-fragment'] = false; // default: auto
  whiteList['resize'] = false; // default: none
  whiteList['rest'] = false; // default: depending on individual properties
  whiteList['rest-after'] = false; // default: none
  whiteList['rest-before'] = false; // default: none
  whiteList['richness'] = false; // default: 50
  whiteList['right'] = false; // default: auto
  whiteList['rotation'] = false; // default: 0
  whiteList['rotation-point'] = false; // default: 50% 50%
  whiteList['ruby-align'] = false; // default: auto
  whiteList['ruby-merge'] = false; // default: separate
  whiteList['ruby-position'] = false; // default: before
  whiteList['shape-image-threshold'] = false; // default: 0.0
  whiteList['shape-outside'] = false; // default: none
  whiteList['shape-margin'] = false; // default: 0
  whiteList['size'] = false; // default: auto
  whiteList['speak'] = false; // default: auto
  whiteList['speak-as'] = false; // default: normal
  whiteList['speak-header'] = false; // default: once
  whiteList['speak-numeral'] = false; // default: continuous
  whiteList['speak-punctuation'] = false; // default: none
  whiteList['speech-rate'] = false; // default: medium
  whiteList['stress'] = false; // default: 50
  whiteList['string-set'] = false; // default: none
  whiteList['tab-size'] = false; // default: 8
  whiteList['table-layout'] = false; // default: auto
  whiteList['text-align'] = true; // default: start
  whiteList['text-align-last'] = true; // default: auto
  whiteList['text-combine-upright'] = true; // default: none
  whiteList['text-decoration'] = true; // default: none
  whiteList['text-decoration-color'] = true; // default: currentColor
  whiteList['text-decoration-line'] = true; // default: none
  whiteList['text-decoration-skip'] = true; // default: objects
  whiteList['text-decoration-style'] = true; // default: solid
  whiteList['text-emphasis'] = true; // default: depending on individual properties
  whiteList['text-emphasis-color'] = true; // default: currentColor
  whiteList['text-emphasis-position'] = true; // default: over right
  whiteList['text-emphasis-style'] = true; // default: none
  whiteList['text-height'] = true; // default: auto
  whiteList['text-indent'] = true; // default: 0
  whiteList['text-justify'] = true; // default: auto
  whiteList['text-orientation'] = true; // default: mixed
  whiteList['text-overflow'] = true; // default: clip
  whiteList['text-shadow'] = true; // default: none
  whiteList['text-space-collapse'] = true; // default: collapse
  whiteList['text-transform'] = true; // default: none
  whiteList['text-underline-position'] = true; // default: auto
  whiteList['text-wrap'] = true; // default: normal
  whiteList['top'] = false; // default: auto
  whiteList['transform'] = false; // default: none
  whiteList['transform-origin'] = false; // default: 50% 50% 0
  whiteList['transform-style'] = false; // default: flat
  whiteList['transition'] = false; // default: depending on individual properties
  whiteList['transition-delay'] = false; // default: 0s
  whiteList['transition-duration'] = false; // default: 0s
  whiteList['transition-property'] = false; // default: all
  whiteList['transition-timing-function'] = false; // default: ease
  whiteList['unicode-bidi'] = false; // default: normal
  whiteList['vertical-align'] = false; // default: baseline
  whiteList['visibility'] = false; // default: visible
  whiteList['voice-balance'] = false; // default: center
  whiteList['voice-duration'] = false; // default: auto
  whiteList['voice-family'] = false; // default: implementation dependent
  whiteList['voice-pitch'] = false; // default: medium
  whiteList['voice-range'] = false; // default: medium
  whiteList['voice-rate'] = false; // default: normal
  whiteList['voice-stress'] = false; // default: normal
  whiteList['voice-volume'] = false; // default: medium
  whiteList['volume'] = false; // default: medium
  whiteList['white-space'] = false; // default: normal
  whiteList['widows'] = false; // default: 2
  whiteList['width'] = true; // default: auto
  whiteList['will-change'] = false; // default: auto
  whiteList['word-break'] = true; // default: normal
  whiteList['word-spacing'] = true; // default: normal
  whiteList['word-wrap'] = true; // default: normal
  whiteList['wrap-flow'] = false; // default: auto
  whiteList['wrap-through'] = false; // default: wrap
  whiteList['writing-mode'] = false; // default: horizontal-tb
  whiteList['z-index'] = false; // default: auto

  return whiteList;
}


/**
 * 匹配到白名单上的一个属性时
 *
 * @param {String} name
 * @param {String} value
 * @param {Object} options
 * @return {String}
 */
function onAttr (name, value, options) {
  // do nothing
}

/**
 * 匹配到不在白名单上的一个属性时
 *
 * @param {String} name
 * @param {String} value
 * @param {Object} options
 * @return {String}
 */
function onIgnoreAttr (name, value, options) {
  // do nothing
}

var REGEXP_URL_JAVASCRIPT = /javascript\s*\:/img;

/**
 * 过滤属性值
 *
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function safeAttrValue(name, value) {
  if (REGEXP_URL_JAVASCRIPT.test(value)) return '';
  return value;
}


exports.whiteList = getDefaultWhiteList();
exports.getDefaultWhiteList = getDefaultWhiteList;
exports.onAttr = onAttr;
exports.onIgnoreAttr = onIgnoreAttr;
exports.safeAttrValue = safeAttrValue;


/***/ }),

/***/ 2235:
/***/ (function(module, exports) {

module.exports = {
  indexOf: function (arr, item) {
    var i, j;
    if (Array.prototype.indexOf) {
      return arr.indexOf(item);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      if (arr[i] === item) {
        return i;
      }
    }
    return -1;
  },
  forEach: function (arr, fn, scope) {
    var i, j;
    if (Array.prototype.forEach) {
      return arr.forEach(fn, scope);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      fn.call(scope, arr[i], i, arr);
    }
  },
  trim: function (str) {
    if (String.prototype.trim) {
      return str.trim();
    }
    return str.replace(/(^\s*)|(\s*$)/g, '');
  },
  trimRight: function (str) {
    if (String.prototype.trimRight) {
      return str.trimRight();
    }
    return str.replace(/(\s*$)/g, '');
  }
};


/***/ }),

/***/ 2236:
/***/ (function(module, exports, __webpack_require__) {

/**
 * Simple HTML Parser
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var _ = __webpack_require__(1934);

/**
 * get tag name
 *
 * @param {String} html e.g. '<a hef="#">'
 * @return {String}
 */
function getTagName(html) {
  var i = _.spaceIndex(html);
  if (i === -1) {
    var tagName = html.slice(1, -1);
  } else {
    var tagName = html.slice(1, i + 1);
  }
  tagName = _.trim(tagName).toLowerCase();
  if (tagName.slice(0, 1) === "/") tagName = tagName.slice(1);
  if (tagName.slice(-1) === "/") tagName = tagName.slice(0, -1);
  return tagName;
}

/**
 * is close tag?
 *
 * @param {String} html 如：'<a hef="#">'
 * @return {Boolean}
 */
function isClosing(html) {
  return html.slice(0, 2) === "</";
}

/**
 * parse input html and returns processed html
 *
 * @param {String} html
 * @param {Function} onTag e.g. function (sourcePosition, position, tag, html, isClosing)
 * @param {Function} escapeHtml
 * @return {String}
 */
function parseTag(html, onTag, escapeHtml) {
  "user strict";

  var rethtml = "";
  var lastPos = 0;
  var tagStart = false;
  var quoteStart = false;
  var currentPos = 0;
  var len = html.length;
  var currentTagName = "";
  var currentHtml = "";

  for (currentPos = 0; currentPos < len; currentPos++) {
    var c = html.charAt(currentPos);
    if (tagStart === false) {
      if (c === "<") {
        tagStart = currentPos;
        continue;
      }
    } else {
      if (quoteStart === false) {
        if (c === "<") {
          rethtml += escapeHtml(html.slice(lastPos, currentPos));
          tagStart = currentPos;
          lastPos = currentPos;
          continue;
        }
        if (c === ">") {
          rethtml += escapeHtml(html.slice(lastPos, tagStart));
          currentHtml = html.slice(tagStart, currentPos + 1);
          currentTagName = getTagName(currentHtml);
          rethtml += onTag(
            tagStart,
            rethtml.length,
            currentTagName,
            currentHtml,
            isClosing(currentHtml)
          );
          lastPos = currentPos + 1;
          tagStart = false;
          continue;
        }
        if ((c === '"' || c === "'") && html.charAt(currentPos - 1) === "=") {
          quoteStart = c;
          continue;
        }
      } else {
        if (c === quoteStart) {
          quoteStart = false;
          continue;
        }
      }
    }
  }
  if (lastPos < html.length) {
    rethtml += escapeHtml(html.substr(lastPos));
  }

  return rethtml;
}

var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9_:\.\-]/gim;

/**
 * parse input attributes and returns processed attributes
 *
 * @param {String} html e.g. `href="#" target="_blank"`
 * @param {Function} onAttr e.g. `function (name, value)`
 * @return {String}
 */
function parseAttr(html, onAttr) {
  "user strict";

  var lastPos = 0;
  var retAttrs = [];
  var tmpName = false;
  var len = html.length;

  function addAttr(name, value) {
    name = _.trim(name);
    name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
    if (name.length < 1) return;
    var ret = onAttr(name, value || "");
    if (ret) retAttrs.push(ret);
  }

  // 逐个分析字符
  for (var i = 0; i < len; i++) {
    var c = html.charAt(i);
    var v, j;
    if (tmpName === false && c === "=") {
      tmpName = html.slice(lastPos, i);
      lastPos = i + 1;
      continue;
    }
    if (tmpName !== false) {
      if (
        i === lastPos &&
        (c === '"' || c === "'") &&
        html.charAt(i - 1) === "="
      ) {
        j = html.indexOf(c, i + 1);
        if (j === -1) {
          break;
        } else {
          v = _.trim(html.slice(lastPos + 1, j));
          addAttr(tmpName, v);
          tmpName = false;
          i = j;
          lastPos = i + 1;
          continue;
        }
      }
    }
    if (/\s|\n|\t/.test(c)) {
      html = html.replace(/\s|\n|\t/g, " ");
      if (tmpName === false) {
        j = findNextEqual(html, i);
        if (j === -1) {
          v = _.trim(html.slice(lastPos, i));
          addAttr(v);
          tmpName = false;
          lastPos = i + 1;
          continue;
        } else {
          i = j - 1;
          continue;
        }
      } else {
        j = findBeforeEqual(html, i - 1);
        if (j === -1) {
          v = _.trim(html.slice(lastPos, i));
          v = stripQuoteWrap(v);
          addAttr(tmpName, v);
          tmpName = false;
          lastPos = i + 1;
          continue;
        } else {
          continue;
        }
      }
    }
  }

  if (lastPos < html.length) {
    if (tmpName === false) {
      addAttr(html.slice(lastPos));
    } else {
      addAttr(tmpName, stripQuoteWrap(_.trim(html.slice(lastPos))));
    }
  }

  return _.trim(retAttrs.join(" "));
}

function findNextEqual(str, i) {
  for (; i < str.length; i++) {
    var c = str[i];
    if (c === " ") continue;
    if (c === "=") return i;
    return -1;
  }
}

function findBeforeEqual(str, i) {
  for (; i > 0; i--) {
    var c = str[i];
    if (c === " ") continue;
    if (c === "=") return i;
    return -1;
  }
}

function isQuoteWrapString(text) {
  if (
    (text[0] === '"' && text[text.length - 1] === '"') ||
    (text[0] === "'" && text[text.length - 1] === "'")
  ) {
    return true;
  } else {
    return false;
  }
}

function stripQuoteWrap(text) {
  if (isQuoteWrapString(text)) {
    return text.substr(1, text.length - 2);
  } else {
    return text;
  }
}

exports.parseTag = parseTag;
exports.parseAttr = parseAttr;


/***/ }),

/***/ 2237:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * 错误提示类型
 */
var ErrorAlertType = exports.ErrorAlertType = undefined;
(function (ErrorAlertType) {
  /**
   * toast 提醒
   */
  ErrorAlertType["TOAST"] = "TOAST";
  /**
   * 弹窗提醒
   */
  ErrorAlertType["DIALOG"] = "DIALOG";
})(ErrorAlertType || (exports.ErrorAlertType = ErrorAlertType = {}));
/**
 * 弹窗按钮类型
 */
var ButtonType = exports.ButtonType = undefined;
(function (ButtonType) {
  ButtonType["DEFAULT"] = "default";
  ButtonType["PRIMARY"] = "primary";
  ButtonType["WARN"] = "warn";
})(ButtonType || (exports.ButtonType = ButtonType = {}));

/***/ }),

/***/ 2238:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SUITE_TO_MENTION = exports.MENTION_TO_SUITE = exports.TARGET_ENUM = exports.SOURCE_ENUM = exports.TYPE_ENUM = undefined;

var _defineProperty2 = __webpack_require__(9);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _MENTION_TO_SUITE, _SUITE_TO_MENTION;

var _common = __webpack_require__(19);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @ 文档类型
 */
var TYPE_ENUM = exports.TYPE_ENUM = {
    USER: 0,
    FILE: 1,
    FOLDER: 2,
    SHEET: 3,
    SHEET_DOC: 4,
    CHAT: 5,
    GROUP: 6,
    BLOCK: 7,
    BITABLE: 8,
    TABLE: 9,
    INLINE_BLOCK: 10,
    MINDNOTE: 11,
    BOX: 12,
    SLIDE: 15
};
/**
 * 从哪里发起的 @
 */
var SOURCE_ENUM = exports.SOURCE_ENUM = {
    DOC: 0,
    DOC_COMMENT: 1,
    SHEET: 2,
    SHEET_COMMENT: 3,
    BITABLE: 4,
    OPEN_DOC: 6,
    BOX_COMMENT: 9,
    MINDNOTE: 10,
    MINDNOTE_COMMENT: 11
};
/**
 * @ 提醒类型
 */
var TARGET_ENUM = exports.TARGET_ENUM = {
    LARK: 0
};
/**
 * mention type 转为 suite type
 * @description 主要是 doc 的类型不一样
 */
var MENTION_TO_SUITE = exports.MENTION_TO_SUITE = (_MENTION_TO_SUITE = {}, (0, _defineProperty3.default)(_MENTION_TO_SUITE, TYPE_ENUM.FILE, _common.NUM_FILE_TYPE.DOC), (0, _defineProperty3.default)(_MENTION_TO_SUITE, TYPE_ENUM.SHEET, _common.NUM_FILE_TYPE.SHEET), (0, _defineProperty3.default)(_MENTION_TO_SUITE, TYPE_ENUM.BITABLE, _common.NUM_FILE_TYPE.BITABLE), (0, _defineProperty3.default)(_MENTION_TO_SUITE, TYPE_ENUM.MINDNOTE, _common.NUM_FILE_TYPE.MINDNOTE), (0, _defineProperty3.default)(_MENTION_TO_SUITE, TYPE_ENUM.BOX, _common.NUM_FILE_TYPE.FILE), (0, _defineProperty3.default)(_MENTION_TO_SUITE, TYPE_ENUM.SLIDE, _common.NUM_FILE_TYPE.SLIDE), _MENTION_TO_SUITE);
/**
 * suite type 转为 mention type
 * @description 主要是 doc 的类型不一样
 */
var SUITE_TO_MENTION = exports.SUITE_TO_MENTION = (_SUITE_TO_MENTION = {}, (0, _defineProperty3.default)(_SUITE_TO_MENTION, _common.NUM_FILE_TYPE.DOC, TYPE_ENUM.FILE), (0, _defineProperty3.default)(_SUITE_TO_MENTION, _common.NUM_FILE_TYPE.SHEET, TYPE_ENUM.SHEET), (0, _defineProperty3.default)(_SUITE_TO_MENTION, _common.NUM_FILE_TYPE.BITABLE, TYPE_ENUM.BITABLE), (0, _defineProperty3.default)(_SUITE_TO_MENTION, _common.NUM_FILE_TYPE.MINDNOTE, TYPE_ENUM.MINDNOTE), (0, _defineProperty3.default)(_SUITE_TO_MENTION, _common.NUM_FILE_TYPE.FILE, TYPE_ENUM.BOX), (0, _defineProperty3.default)(_SUITE_TO_MENTION, _common.NUM_FILE_TYPE.SLIDE, TYPE_ENUM.SLIDE), _SUITE_TO_MENTION);

/***/ }),

/***/ 2256:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/@byted-mind-note/editor/lib/index.js
var lib = __webpack_require__(1663);

// EXTERNAL MODULE: ./node_modules/lodash-es/cloneDeep.js
var cloneDeep = __webpack_require__(754);

// EXTERNAL MODULE: ./node_modules/lodash-es/forEach.js
var forEach = __webpack_require__(90);

// EXTERNAL MODULE: ./node_modules/lodash-es/keys.js
var keys = __webpack_require__(77);

// EXTERNAL MODULE: ./node_modules/lodash-es/has.js + 1 modules
var has = __webpack_require__(3877);

// EXTERNAL MODULE: ./node_modules/lodash-es/isEqual.js
var isEqual = __webpack_require__(225);

// EXTERNAL MODULE: ./node_modules/lodash-es/map.js
var map = __webpack_require__(229);

// EXTERNAL MODULE: ./node_modules/lodash-es/toInteger.js
var toInteger = __webpack_require__(194);

// CONCATENATED MODULE: ./node_modules/lodash-es/isInteger.js


/**
 * Checks if `value` is an integer.
 *
 * **Note:** This method is based on
 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
 * @example
 *
 * _.isInteger(3);
 * // => true
 *
 * _.isInteger(Number.MIN_VALUE);
 * // => false
 *
 * _.isInteger(Infinity);
 * // => false
 *
 * _.isInteger('3');
 * // => false
 */
function isInteger(value) {
  return typeof value == 'number' && value == Object(toInteger["a" /* default */])(value);
}

/* harmony default export */ var lodash_es_isInteger = (isInteger);

// EXTERNAL MODULE: ./node_modules/lodash-es/isString.js
var isString = __webpack_require__(232);

// EXTERNAL MODULE: ./node_modules/lodash-es/reduce.js + 1 modules
var reduce = __webpack_require__(236);

// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayEvery.js
/**
 * A specialized version of `_.every` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 */
function arrayEvery(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (!predicate(array[index], index, array)) {
      return false;
    }
  }
  return true;
}

/* harmony default export */ var _arrayEvery = (arrayEvery);

// EXTERNAL MODULE: ./node_modules/lodash-es/_baseEach.js + 1 modules
var _baseEach = __webpack_require__(174);

// CONCATENATED MODULE: ./node_modules/lodash-es/_baseEvery.js


/**
 * The base implementation of `_.every` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`
 */
function baseEvery(collection, predicate) {
  var result = true;
  Object(_baseEach["a" /* default */])(collection, function(value, index, collection) {
    result = !!predicate(value, index, collection);
    return result;
  });
  return result;
}

/* harmony default export */ var _baseEvery = (baseEvery);

// EXTERNAL MODULE: ./node_modules/lodash-es/_baseIteratee.js + 9 modules
var _baseIteratee = __webpack_require__(79);

// EXTERNAL MODULE: ./node_modules/lodash-es/isArray.js
var isArray = __webpack_require__(22);

// EXTERNAL MODULE: ./node_modules/lodash-es/_isIterateeCall.js
var _isIterateeCall = __webpack_require__(211);

// CONCATENATED MODULE: ./node_modules/lodash-es/every.js






/**
 * Checks if `predicate` returns truthy for **all** elements of `collection`.
 * Iteration is stopped once `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * **Note:** This method returns `true` for
 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
 * elements of empty collections.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * _.every([true, 1, null, 'yes'], Boolean);
 * // => false
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.every(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.every(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.every(users, 'active');
 * // => false
 */
function every(collection, predicate, guard) {
  var func = Object(isArray["default"])(collection) ? _arrayEvery : _baseEvery;
  if (guard && Object(_isIterateeCall["a" /* default */])(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, Object(_baseIteratee["a" /* default */])(predicate, 3));
}

/* harmony default export */ var lodash_es_every = (every);

// EXTERNAL MODULE: ./node_modules/lodash-es/merge.js + 5 modules
var merge = __webpack_require__(3885);

// EXTERNAL MODULE: ./node_modules/byted-ot-json/dist/byted-ot-json.es5.js
var byted_ot_json_es5 = __webpack_require__(1813);

// CONCATENATED MODULE: ./node_modules/@byted-mind-note/adapter-plugin/lib/index.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdapterEvent", function() { return AdapterEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "actionToOperation", function() { return actionToOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "operationToAction", function() { return operationToAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "composeActions", function() { return composeActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transform", function() { return transform; });
/* eslint-disable */




/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var Operations;
(function (Operations) {
    Operations["CREATE"] = "CREATE";
    Operations["DELETE"] = "DELETE";
    Operations["UPDATE"] = "UPDATE";
    Operations["MOVE"] = "MOVE";
    Operations["SETTING"] = "SETTING";
    Operations["UNKNOWN"] = "UNKNOWN";
})(Operations || (Operations = {}));
/**
 * 断言不应该出现的类型
 */
function assertNever(x) {
    console.error(x + " is not a never type");
}

/**
 * 把 action 转为 ot operation
 * @param action action
 * @param model ot model
 * @throws action type 不支持时会抛出错误
 */
function actionToOperation(action, model) {
    var actionCopy = Object(cloneDeep["default"])(action);
    switch (actionCopy.name) {
        case lib["Actions"].CREATE: {
            return createActionToOpeartion(actionCopy, model);
        }
        case lib["Actions"].DELETE: {
            return deleteActionToOperation(actionCopy, model);
        }
        case lib["Actions"].UPDATE: {
            return updateActionToOpeartion(actionCopy, model);
        }
        case lib["Actions"].STRUCTURE_CHANGE: {
            return moveActionToOpeartion(actionCopy, model);
        }
        case lib["Actions"].SETTING_CHANGE: {
            return settingActionToOperation(actionCopy, model);
        }
        case lib["Actions"].INPUT: {
            return inputActionToOperation(actionCopy, model);
        }
        default: {
            assertNever(actionCopy);
            throw new Error('Unknown action');
        }
    }
}
/**
 * 生成更新 object 的 ot operation
 * @param updated 新 object
 * @param model ot model
 * @param pathPrefix path 前缀
 * @returns oi od operation 数组
 */
function updateObjectHelper(updated, original, pathPrefix) {
    var ops = [];
    // updated key 比对 original key，处理增加的 key
    Object(forEach["default"])(Object(keys["default"])(updated), function (key) {
        if (!Object(has["default"])(original, key)) {
            // 新增 key
            ops.push({
                p: pathPrefix.concat([key]),
                action: {
                    oi: updated[key],
                },
            });
        }
        else if (!Object(isEqual["default"])(updated[key], original[key])) {
            // 更新 key 值
            ops.push({
                p: pathPrefix.concat([key]),
                action: {
                    od: original[key],
                    oi: updated[key],
                },
            });
        }
    });
    return ops;
}
/**
 * CreateAction 转为 li operation
 * @param action CreateAction
 * @param model ot model
 * @returns li operation 数组
 */
function createActionToOpeartion(action, model) {
    return Object(map["default"])(action.created, function (nodeSetting) {
        return {
            p: nodeSetting.path,
            action: {
                li: nodeSetting.node,
            },
        };
    });
}
/**
 * DeleteAction 转为 ld operation
 * @param action DeleteAction
 * @param model ot model
 * @returns ld operation 数组
 */
function deleteActionToOperation(action, model) {
    return Object(map["default"])(action.deleted, function (nodeSetting) {
        return {
            p: nodeSetting.path,
            action: {
                ld: model.get(nodeSetting.path),
            },
        };
    })
        // 从后往前删除
        .reverse();
}
/**
 * UpdateAction 转为 oi od operation
 * @param action UpdateAction
 * @param model ot model
 * @returns oi od operation 数组
 */
function updateActionToOpeartion(action, model) {
    var ops = [];
    Object(forEach["default"])(action.updated, function (act) {
        // 比对 key 值，转为 oi od operation
        ops = ops.concat(updateObjectHelper(act.updated, model.get(act.path), act.path));
    });
    return ops;
}
/**
 * StructureChangeAction 转为 lm 或 mv operation
 * @description 同级移动时转为 lm，跨级移动转为 mv
 * @param action StructureChangeAction
 * @param model ot model
 * @returns lm 或 mv operation 数组
 */
function moveActionToOpeartion(action, model) {
    var ops = [];
    // 复制一份 model，为了实时找出 mv 的 value，转换一个执行一下
    var modelCopy = new byted_ot_json_es5["default"](null, Object(cloneDeep["default"])(model.getSnapshot()));
    Object(forEach["default"])(action.changed, function (act) {
        var moveOp;
        if (act.changed.parentId === act.original.parentId) {
            // lm
            moveOp = {
                p: act.original.path,
                action: {
                    lm: act.changed.index,
                },
            };
        }
        else {
            // mv
            moveOp = {
                p: act.original.path,
                action: {
                    mv: act.changed.path,
                    value: modelCopy.get(act.original.path),
                },
            };
        }
        ops.push(moveOp);
        modelCopy.apply([moveOp]);
    });
    return ops;
}
/**
 * SettingChangeAction 转为 oi od operation
 * @description 每个 key 值的变化，转为一个 oi od operation
 * @param action SettingChangeAction
 * @param model ot model
 * @returns oi od operation 数组
 */
function settingActionToOperation(action, model) {
    return updateObjectHelper(action.changed, model.get([]), []);
}
/**
 * inputAction 转为 oi od operation
 * @param action inputAction
 * @param model ot model
 * @returns oi od operation 数组
 */
function inputActionToOperation(action, model) {
    var ops = [];
    var key = action.type === lib["InputActionTypes"].NOTE ? 'note' : 'text';
    var path = action.path.concat([key]);
    var prevContent = model.get(path);
    // update text
    if (prevContent !== action.nextContent) {
        ops.push({
            p: path,
            action: {
                od: prevContent,
                oi: action.nextContent,
            },
        });
    }
    // update modified
    if (action.modified) {
        path = action.path.concat(['modified']);
        ops.push({
            p: path,
            action: {
                od: model.get(path),
                oi: action.modified,
            },
        });
    }
    return ops;
}

/**
 * 把 ot operation 转为 action
 * @param operation ot operation
 * @param model ot model
 * @throws path 或 type 有误时会抛错
 * @returns action
 */
function operationToAction(operation, model) {
    var operationCopy = Object(cloneDeep["default"])(operation);
    var type = getOperationType(operationCopy);
    switch (type) {
        case Operations.CREATE: {
            return createOperationToAction(operationCopy, model);
        }
        case Operations.DELETE: {
            return deleteOperationToAction(operationCopy, model);
        }
        case Operations.UPDATE: {
            return updateOperationToAction(operationCopy, model);
        }
        case Operations.MOVE: {
            return moveOperationToAction(operationCopy, model);
        }
        case Operations.SETTING: {
            return settingOperationToAction(operationCopy);
        }
        default: {
            throw new Error('Unknown operation');
        }
    }
}
/**
 * 检测 ot operation 的类型
 * @param operation ot operation
 * @returns operation 类型
 */
function getOperationType(operation) {
    var action = operation.action;
    if (Object(has["default"])(action, 'od') || Object(has["default"])(action, 'oi')) {
        // path 长度为 1 就是 setting change，否则认为是 update node
        return operation.p.length > 1 ? Operations.UPDATE : Operations.SETTING;
    }
    // 创建 node
    if (Object(has["default"])(action, 'li')) {
        return Operations.CREATE;
    }
    // 删除 node
    if (Object(has["default"])(action, 'ld')) {
        return Operations.DELETE;
    }
    // 移动 node
    if (Object(has["default"])(action, 'lm') || Object(has["default"])(action, 'mv')) {
        return Operations.MOVE;
    }
    // 不支持的 operation
    return Operations.UNKNOWN;
}
/**
 * 通过 path 获取 parent 和 index，补齐为 nodeSet
 * @description 创建 node 时需要这样，因为此时 model 上还没有此 node
 * @param p path
 * @param model ot model
 * @param node node
 * @throws path 不符合要求时会抛错
 */
function getNodeSetting(p, model, node) {
    // 这里 p 应该是 [..., 'children | nodes', 'index'], 强校验
    var path = Array.from(p);
    var index = path.pop();
    var childKey = path.pop();
    if (!lodash_es_isInteger(index) || index < 0 || (childKey !== 'nodes' && childKey !== 'children')) {
        throw new Error('Invalid path for node setting');
    }
    return {
        // 父级 node 的 path 为空，则没父级，设为 null
        parentId: path.length !== 0 ? model.get(path).id : null,
        index: index,
        node: node || model.get(p),
        path: p,
    };
}
/**
 * 检查 object 的 key 是不是合法的，不是则报错
 * @param key object key
 * @throws key 不合法时报错
 */
function throwIfKeyInvalid(key) {
    if (!Object(isString["default"])(key) || key === '') {
        throw new Error('Invalid object key');
    }
}
/**
 * li operation 转为 CreateAction
 * @param operation ot operation: li
 * @param model ot model
 */
function createOperationToAction(operation, model) {
    var node = operation.action.li;
    return {
        name: lib["Actions"].CREATE,
        created: [getNodeSetting(operation.p, model, node)],
    };
}
/**
 * ld operation 转为 DeleteAction
 * @param operation ot operation: ld
 * @param model ot model
 */
function deleteOperationToAction(operation, model) {
    return {
        name: lib["Actions"].DELETE,
        deleted: [getNodeSetting(operation.p, model)],
    };
}
/**
 * oi od operation 转为 UpdateAction
 * @param operation ot operation: oi od
 * @param model ot model
 * @throws path 不合法时会抛错
 */
function updateOperationToAction(operation, model) {
    var _a;
    // p 应为 【..., 'nodes | children', index, key】
    if (operation.p.length < 3) {
        throw new Error('Invalid path for node update');
    }
    var path = Array.from(operation.p);
    var key = path.pop();
    throwIfKeyInvalid(key);
    var original = model.get(path);
    return {
        name: lib["Actions"].UPDATE,
        updated: [{
                path: path,
                updated: (_a = {
                        id: original.id
                    },
                    // 有 od 无 oi 则为删除 key，此时值为 undefined
                    _a[key] = operation.action.oi,
                    _a),
                original: original,
            }],
    };
}
/**
 * lm mv operation 转为 StructureChangeAction
 * @param operation ot operation: lm mv
 * @param model ot model
 */
function moveOperationToAction(operation, model) {
    var original = getNodeSetting(operation.p, model);
    var newPath;
    var newIndex;
    var newParentId;
    if (operation.action.lm !== undefined) {
        // lm
        newIndex = operation.action.lm;
        // path 为 [..., 'nodes | children', index]
        newPath = Array.from(operation.p);
        newPath[newPath.length - 1] = newIndex;
        newParentId = original.parentId;
    }
    else {
        // mv
        newPath = operation.action.mv;
        newIndex = newPath[newPath.length - 1];
        // path 为 [..., 'nodes | children', parentIndex, 'children', index]，有 parent
        //      或 ['nodes', index]，无 parent
        var parentPath = newPath.slice(0, newPath.length - 2);
        if (parentPath.length === 0) {
            // root node
            newParentId = null;
        }
        else {
            // parent path 是基于 node 被删后的，所以这里复制一份 model，执行删除后，再去找到 parentId
            var modelCopy = new byted_ot_json_es5["default"](null, Object(cloneDeep["default"])(model.getSnapshot()));
            modelCopy.apply([{
                    p: operation.p,
                    action: {
                        ld: modelCopy.get(operation.p),
                    },
                }]);
            newParentId = modelCopy.get(parentPath).id;
        }
    }
    return {
        name: lib["Actions"].STRUCTURE_CHANGE,
        changed: [{
                changed: __assign({}, original, { parentId: newParentId, index: newIndex, path: newPath }),
                original: original,
            }],
    };
}
/**
 * oi od operation 转为 SettingChangeAction
 * @param operation ot operation: oi od
 * @throws path 不符合要去时会抛错
 */
function settingOperationToAction(operation) {
    var _a, _b;
    // path 应该是 ['theme'] 或 ['structure'] 等
    if (operation.p.length !== 1) {
        throw new Error('Invalid path for setting');
    }
    var key = operation.p[0];
    throwIfKeyInvalid(key);
    return {
        name: lib["Actions"].SETTING_CHANGE,
        changed: (_a = {},
            // 有 od 无 oi 则为删除 key，此时值为 undefined
            _a[key] = operation.action.oi,
            _a),
        original: (_b = {},
            _b[key] = operation.action.od,
            _b),
    };
}

var AdapterEvent;
(function (AdapterEvent) {
    /**
     * 本地发生编辑事件
     */
    AdapterEvent["EDIT"] = "EDIT";
    /**
     * 执行远端消息事件
     */
    AdapterEvent["APPLY"] = "APPLY";
})(AdapterEvent || (AdapterEvent = {}));
/**
 * 适配器插件，用于适配 Editor 和 OT-JSON 消息的转换
 * @description 注意此插件初始化需要在 undo 之下，保证 undo 插件能够获取正确的模型
 */
var lib_AdapterPlugin = /** @class */ (function (_super) {
    __extends(AdapterPlugin, _super);
    function AdapterPlugin(editor, snapshot) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.snapshot = snapshot;
        return _this;
    }
    /**
     * 连接 Editor 和副本的同步
     */
    AdapterPlugin.prototype.connect = function () {
        this.editor.addEventListener(lib["MindNoteEvent"].EDIT, this.adapt.bind(this));
    };
    /**
     * 取消和副本层的连接
     */
    AdapterPlugin.prototype.disconnect = function () {
        this.editor.removeEventListener(lib["MindNoteEvent"].EDIT, this.adapt.bind(this));
    };
    /**
     * 执行远端发送过来的消息
     * @param ops 收到的操作
     * @throws execute 过程失败会抛出错误
     */
    AdapterPlugin.prototype.execute = function (ops) {
        var _this = this;
        /* 将OT-JSON格式的消息转换成编辑器消息 */
        var actions = Object(reduce["default"])(ops, function (prev, op) {
            /**
             * 注意此处需要对每个op单独应用，因为如果有一组带层级结构的创建，在父节点没有被创建出来的时候，无法获取父节点的 NodeSet
             */
            var action = operationToAction(op, _this.snapshot);
            _this.snapshot.apply([op]);
            return prev.concat(action);
        }, []);
        /* editor 视图层执行 */
        this.editor.execute(actions, lib["ExecuteType"].SERVER);
        /* 触发事件 */
        this.trigger(AdapterEvent.APPLY, actions);
        return actions;
    };
    /**
     * 执行本地操作到副本层的适配
     * @param actions editor 操作
     */
    AdapterPlugin.prototype.adapt = function (actions) {
        var _this = this;
        /* 将编辑器原始消息转换成OT-JSON格式 */
        var ops = Object(reduce["default"])(actions, function (prev, action) {
            var op = actionToOperation(action, _this.snapshot);
            return prev.concat(op);
        }, []);
        /* 更新模型 */
        this.snapshot.apply(ops);
        /* 触发事件 */
        this.trigger(AdapterEvent.EDIT, ops);
        return ops;
    };
    /**
     * editor 操作符
     * @param op OT-JSON 操作符
     * @throws
     */
    AdapterPlugin.prototype.operationToAction = function (op) {
        return operationToAction(op, this.snapshot);
    };
    /**
     * 转换 editor 操作符
     * @param action editor 操作符
     * @throws
     */
    AdapterPlugin.prototype.actionToOperation = function (action) {
        return actionToOperation(action, this.snapshot);
    };
    return AdapterPlugin;
}(lib["Observable"]));

/**
 * compose 相同的 action
 */
function composeActions(actions) {
    if (actions.length === 0) {
        throw new Error('can\'t compose empty actions');
    }
    var type = actions[0].name;
    var isOnlyOneType = lodash_es_every(actions, function (action) { return action.name === type; });
    if (!isOnlyOneType) {
        throw new Error('can\'t compose different actions');
    }
    switch (type) {
        case lib["Actions"].CREATE: {
            return composeCreateAction(actions);
        }
        case lib["Actions"].DELETE: {
            return composeDeleteAction(actions);
        }
        case lib["Actions"].UPDATE: {
            return composeUpdateAction(actions);
        }
        case lib["Actions"].STRUCTURE_CHANGE: {
            return composeStructureChangeAction(actions);
        }
        case lib["Actions"].SETTING_CHANGE: {
            return composeSettingChangeAction(actions);
        }
        case lib["Actions"].INPUT: {
            throw new Error('can\'t compose input action');
        }
        default: {
            assertNever(type);
            throw new Error('Unknown action');
        }
    }
}
/**
 * compose 多个 CreateAction
 */
function composeCreateAction(actions) {
    var created = Object(reduce["default"])(actions, function (prev, action) { return prev.concat(action.created); }, []);
    return {
        name: lib["Actions"].CREATE,
        created: created,
    };
}
/**
 * compose 多个 DeleteAction
 */
function composeDeleteAction(actions) {
    var deleted = Object(reduce["default"])(actions, function (prev, action) { return prev.concat(action.deleted); }, []);
    return {
        name: lib["Actions"].DELETE,
        deleted: deleted,
    };
}
/**
 * compose 多个 UpdateAction
 */
function composeUpdateAction(actions) {
    var updated = Object(reduce["default"])(actions, function (prev, action) { return prev.concat(action.updated); }, []);
    return {
        name: lib["Actions"].UPDATE,
        updated: updated,
    };
}
/**
 * compose 多个 StructureChangeAction
 */
function composeStructureChangeAction(actions) {
    var changed = Object(reduce["default"])(actions, function (prev, action) { return prev.concat(action.changed); }, []);
    return {
        name: lib["Actions"].STRUCTURE_CHANGE,
        changed: changed,
    };
}
/**
 * compose 多个 SettingChangeAction
 */
function composeSettingChangeAction(actions) {
    var changed = Object(reduce["default"])(actions, function (prev, action) { return Object(merge["a" /* default */])(prev, action.changed); }, {});
    var original = Object(reduce["default"])(actions, function (prev, action) { return Object(merge["a" /* default */])(prev, action.original); }, {});
    return {
        name: lib["Actions"].SETTING_CHANGE,
        changed: changed,
        original: original,
    };
}

/**
 * 转换 ops
 * @param localOps 客户端产生的 ops
 * @param serverOps 服务端发来的 ops
 * @throws
 * @description
 * server = apply(apply(initial, serverOps), transform(localOps, serverOps, left))
 * local = apply(apply(initial, localOps), transform(serverOps, localOps, right))
 * 最终, server === local
 * 即:
 * applyToServer = transform(localOps, serverOps, left)
 * applyToLocal = transform(serverOps, localOps, right)
 */
function transform(localOps, serverOps) {
    return {
        /**
         * 要在远端运用的 ops
         */
        applyToServer: byted_ot_json_es5["default"].transform(localOps, serverOps, byted_ot_json_es5["TransformType"].LEFT),
        /**
         * 要在本地运用的 ops
         */
        applyToLocal: byted_ot_json_es5["default"].transform(serverOps, localOps, byted_ot_json_es5["TransformType"].RIGHT),
    };
}

/* harmony default export */ var adapter_plugin_lib = __webpack_exports__["default"] = (lib_AdapterPlugin);

//# sourceMappingURL=index.js.map


/***/ }),

/***/ 2257:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/byted-ot-json/dist/byted-ot-json.es5.js
var byted_ot_json_es5 = __webpack_require__(1813);

// EXTERNAL MODULE: ./node_modules/@byted-mind-note/editor/lib/index.js
var lib = __webpack_require__(1663);

// EXTERNAL MODULE: ./node_modules/lodash-es/map.js
var map = __webpack_require__(229);

// EXTERNAL MODULE: ./node_modules/lodash-es/forEach.js
var forEach = __webpack_require__(90);

// EXTERNAL MODULE: ./node_modules/lodash-es/includes.js
var includes = __webpack_require__(753);

// EXTERNAL MODULE: ./node_modules/lodash-es/_createFind.js
var _createFind = __webpack_require__(719);

// EXTERNAL MODULE: ./node_modules/lodash-es/_baseFindIndex.js
var _baseFindIndex = __webpack_require__(406);

// EXTERNAL MODULE: ./node_modules/lodash-es/_baseIteratee.js + 9 modules
var _baseIteratee = __webpack_require__(79);

// EXTERNAL MODULE: ./node_modules/lodash-es/toInteger.js
var toInteger = __webpack_require__(194);

// CONCATENATED MODULE: ./node_modules/lodash-es/findLastIndex.js




/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * This method is like `_.findIndex` except that it iterates over elements
 * of `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=array.length-1] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': true },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': false }
 * ];
 *
 * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
 * // => 2
 *
 * // The `_.matches` iteratee shorthand.
 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
 * // => 0
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findLastIndex(users, ['active', false]);
 * // => 2
 *
 * // The `_.property` iteratee shorthand.
 * _.findLastIndex(users, 'active');
 * // => 0
 */
function findLastIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = length - 1;
  if (fromIndex !== undefined) {
    index = Object(toInteger["a" /* default */])(fromIndex);
    index = fromIndex < 0
      ? nativeMax(length + index, 0)
      : nativeMin(index, length - 1);
  }
  return Object(_baseFindIndex["a" /* default */])(array, Object(_baseIteratee["a" /* default */])(predicate, 3), index, true);
}

/* harmony default export */ var lodash_es_findLastIndex = (findLastIndex);

// CONCATENATED MODULE: ./node_modules/lodash-es/findLast.js



/**
 * This method is like `_.find` except that it iterates over elements of
 * `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=collection.length-1] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * _.findLast([1, 2, 3, 4], function(n) {
 *   return n % 2 == 1;
 * });
 * // => 3
 */
var findLast = Object(_createFind["a" /* default */])(lodash_es_findLastIndex);

/* harmony default export */ var lodash_es_findLast = (findLast);

// EXTERNAL MODULE: ./node_modules/@byted-mind-note/adapter-plugin/lib/index.js + 4 modules
var adapter_plugin_lib = __webpack_require__(2256);

// CONCATENATED MODULE: ./node_modules/@byted-mind-note/undo-plugin/lib/index.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UndoEvent", function() { return UndoEvent; });
/* eslint-disable */





/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var lib_UndoStack = /** @class */ (function () {
    function UndoStack() {
        /**
         * undo 栈
         * @description 每次 undo 都是一组 action，二维数组
         */
        this.undoStack = [];
        /**
         * redo 栈
         */
        this.redoStack = [];
        /**
         * redo/undo 栈最大值
         */
        this.maxLength = 100;
    }
    /**
     * 用户操作入栈
     * @description 传入正向操作
     */
    UndoStack.prototype.addCommand = function (actions) {
        if (actions.length === 0) {
            return;
        }
        // 传入的是正向操作，进入 undo 栈要取反
        var undoActions = this.invert(actions);
        this.undoStack.push(undoActions);
        this.redoStack = [];
        if (this.undoStack.length > this.maxLength) {
            // 超过最大限制后删除第一个
            this.undoStack.shift();
        }
    };
    /**
     * 把相邻的 input 操作合并到最后一个 undo 操作里
     * @description 传入正向操作
     */
    UndoStack.prototype.appendCommand = function (actions) {
        var lastActions = this.undoStack[this.undoStack.length - 1];
        if (lastActions) {
            // 传入的是正向操作，进入 undo 栈要取反
            var undoActions = this.invert(actions);
            // append 的 action 是该组 action 最先执行的，所以是 unshift
            lastActions.unshift.apply(lastActions, undoActions);
        }
    };
    /**
     * 转换 redo/undo 栈里的 op
     * @description 收到服务端发来的 op 时要对本地 redo/undo 栈里的 op 做转换
     */
    UndoStack.prototype.transform = function (serverOps) {
        var res = null;
        var transFunc = function (action) {
            try {
                res = Object(adapter_plugin_lib["transform"])(action.ops, res ? res.applyToLocal : serverOps);
            }
            catch (err) {
                // 打印 transform 错误
                console.error('Transform failed:', action.ops, res ? res.applyToLocal : serverOps);
                throw err;
            }
            return __assign({}, action, { ops: res.applyToServer });
        };
        // 二维数组
        this.undoStack = Object(map["default"])(this.undoStack.reverse(), function (undoActions) { return Object(map["default"])(undoActions, transFunc); }).reverse();
        res = null;
        this.redoStack = Object(map["default"])(this.redoStack.reverse(), function (redoActions) { return Object(map["default"])(redoActions, transFunc); }).reverse();
    };
    /**
     * redo
     */
    UndoStack.prototype.popRedo = function () {
        if (this.redoStack.length === 0) {
            return;
        }
        var redoActions = this.redoStack.pop();
        var undoActions = this.invert(redoActions);
        this.undoStack.push(undoActions);
        return redoActions;
    };
    /**
     * undo
     */
    UndoStack.prototype.popUndo = function () {
        if (this.undoStack.length === 0) {
            return;
        }
        var undoActions = this.undoStack.pop();
        var redoActions = this.invert(undoActions);
        this.redoStack.push(redoActions);
        return undoActions;
    };
    /**
     * 获取 Redo 栈的大小
     */
    UndoStack.prototype.getRedoStackSize = function () {
        return this.redoStack.length;
    };
    /**
     * 获取 Undo 栈的大小
     */
    UndoStack.prototype.getUndoStackSize = function () {
        return this.undoStack.length;
    };
    /**
     * 对 undo action (op) 取反
     * @description 从 redo 进入 undo 或从 undo 进入 redo 时用到
     */
    UndoStack.prototype.invert = function (actions) {
        return Object(map["default"])(actions, function (action) {
            // 对 type 取反
            var type = action.type;
            if (type === lib["Actions"].CREATE) {
                type = lib["Actions"].DELETE;
            }
            else if (type === lib["Actions"].DELETE) {
                type = lib["Actions"].CREATE;
            }
            // 对 op 取反（执行顺序也翻转了，revert）
            var ops = byted_ot_json_es5["default"].invert(action.ops);
            // cursor 取反
            var cursor = action.cursor;
            if (cursor) {
                if (cursor.type === lib["CursorType"].NOTE || cursor.type === lib["CursorType"].TEXT) {
                    cursor = __assign({}, cursor, { prevPos: cursor.nextPos, nextPos: cursor.prevPos });
                }
                else if (cursor.type === lib["CursorType"].DRILL) {
                    cursor = __assign({}, cursor, { from: cursor.to, to: cursor.from });
                }
                else if (cursor.type === lib["CursorType"].TITLE) {
                    cursor = __assign({}, cursor, { prevTitle: cursor.nextTitle, nextTitle: cursor.prevTitle, prevPos: cursor.nextPos, nextPos: cursor.prevPos });
                }
            }
            return {
                cursor: cursor,
                type: type,
                ops: ops,
            };
        })
            // 执行顺序翻转
            .reverse();
    };
    return UndoStack;
}());

var UndoEvent;
(function (UndoEvent) {
    /**
     * Undo/Redo 栈变化事件
     */
    UndoEvent["STACK_CHANGE"] = "STACK_CHANGE";
})(UndoEvent || (UndoEvent = {}));

/**
 * redo/undo 插件
 * @description 注意此插件的初始化需要保证在客户端发送 changeset 事件之前，因为发送 changeset 的时候同样会
 * 改变 snapshot
 */
var lib_UndoPlugin = /** @class */ (function () {
    function UndoPlugin(editor, snapshot) {
        var _this = this;
        this.undoStack = new lib_UndoStack();
        /**
         * 最后进栈的 action，用来 compose
         */
        this.lastAction = null;
        this.inputTimer = null;
        this.maxInputTime = 2000;
        /**
         * 需要 compose 的 action
         */
        this.COMPOSE_ACTIONS = [lib["Actions"].INPUT, lib["Actions"].TITLE_CHANGE];
        /**
           * 事件池
           */
        this.handlerMap = {};
        /**
           * 把 redo/undo 栈里的 op 根据服务端发来的 op 做 transform
         * @throws transform 失败则会抛出错误
           */
        this.transform = function (serverOps) {
            _this.undoStack.transform(serverOps);
        };
        /**
           * Editor 编辑事件
           */
        this.handleEdit = function (actions) {
            _this.addCommand(actions);
        };
        /**
           * 翻页钻取事件
           */
        this.handleDrill = function (e) {
            _this.addCommand([e]);
        };
        /**
           * 标题修改事件
           */
        this.handleTitleChange = function (e) {
            _this.addCommand([e]);
        };
        this.editor = editor;
        this.snapshot = snapshot;
    }
    /**
       * 触发 Editor 事件
       * @param type 事件类型
       * @param e 事件参数
       */
    UndoPlugin.prototype.trigger = function (type, e) {
        var handlers = this.handlerMap[type];
        if (handlers) {
            Object(forEach["default"])(handlers, function (v) {
                v(e);
            });
        }
    };
    /**
     * 注册 Undo 插件内部事件
     * @param type 事件类型
     * @param callback 回调
     */
    UndoPlugin.prototype.addEventListener = function (type, callback) {
        var handlers = this.handlerMap[type];
        if (!handlers) {
            this.handlerMap[type] = [callback];
        }
        else {
            handlers.push(callback);
        }
    };
    /**
     * 注销事件
     * @param type
     * @param callback
     */
    UndoPlugin.prototype.removeEventListener = function (type, callback) {
        var handlers = this.handlerMap[type];
        if (handlers) {
            var index = handlers.findIndex(function (val) {
                return val === callback;
            });
            if (index !== -1) {
                handlers.splice(index, index + 1);
            }
        }
    };
    /**
     * 注册监听事件
     */
    UndoPlugin.prototype.init = function () {
        this.editor.addEventListener(lib["MindNoteEvent"].EDIT, this.handleEdit);
        this.editor.addEventListener(lib["MindNoteEvent"].DRILL, this.handleDrill);
        this.editor.addEventListener(lib["MindNoteEvent"].TITLE_CHANGE, this.handleTitleChange);
    };
    /**
     * 移除监听事件
     */
    UndoPlugin.prototype.destroy = function () {
        this.editor.removeEventListener(lib["MindNoteEvent"].EDIT, this.handleEdit);
        this.editor.removeEventListener(lib["MindNoteEvent"].DRILL, this.handleDrill);
        this.editor.removeEventListener(lib["MindNoteEvent"].TITLE_CHANGE, this.handleTitleChange);
    };
    /**
     * 用户操作入栈
     * @description 传入正向操作
     */
    UndoPlugin.prototype.addCommand = function (commands) {
        if (commands.length === 0) {
            return;
        }
        // TODO: mindnote 从 editor 复制的逻辑，需要确认一下 editor 为什么会发不带 id 的 input 事件
        if (commands[0].name === lib["Actions"].INPUT && !commands[0].id) {
            console.warn('mindnote invalid redo/undo commands: ', commands);
            return;
        }
        var undoActions = this.commandsToUndoActions(commands);
        var isAppend = false;
        // input, title change action 都是单独发出来的
        if (commands.length === 1 && Object(includes["default"])(this.COMPOSE_ACTIONS, commands[0].name)) {
            var action = commands[0];
            // 合并相邻 input, title change
            if (this.lastAction
                && action.name === this.lastAction.name
                && action.id === this.lastAction.id
                && action.type === this.lastAction.type) {
                isAppend = true;
            }
            // 重新开始计时
            this.resetInputTimer();
        }
        // 记录 action
        this.lastAction = commands[commands.length - 1];
        if (isAppend) {
            this.undoStack.appendCommand(undoActions);
        }
        else {
            this.undoStack.addCommand(undoActions);
        }
        this.trigger(UndoEvent.STACK_CHANGE, {
            undoStackSize: this.getUndoStackSize(),
            redoStackSize: this.getRedoStackSize()
        });
    };
    /**
       * redo
       */
    UndoPlugin.prototype.redo = function () {
        var actions = this.undoStack.popRedo();
        this.lastAction = null;
        if (!actions) {
            return null;
        }
        this.execute(actions, false);
        this.setCursor(actions);
        this.trigger(UndoEvent.STACK_CHANGE, {
            undoStackSize: this.getUndoStackSize(),
            redoStackSize: this.getRedoStackSize()
        });
        return actions;
    };
    /**
       * undo
       */
    UndoPlugin.prototype.undo = function () {
        var actions = this.undoStack.popUndo();
        this.lastAction = null;
        if (!actions) {
            return null;
        }
        this.execute(actions, true);
        this.setCursor(actions);
        this.trigger(UndoEvent.STACK_CHANGE, {
            undoStackSize: this.getUndoStackSize(),
            redoStackSize: this.getRedoStackSize()
        });
        return actions;
    };
    /**
     * 获取 Redo 栈的大小
     */
    UndoPlugin.prototype.getRedoStackSize = function () {
        return this.undoStack.getRedoStackSize();
    };
    /**
     * 获取 Undo 栈的大小
     */
    UndoPlugin.prototype.getUndoStackSize = function () {
        return this.undoStack.getUndoStackSize();
    };
    /**
     * 更新 input 定时器
     */
    UndoPlugin.prototype.resetInputTimer = function () {
        var _this = this;
        if (this.inputTimer) {
            window.clearTimeout(this.inputTimer);
        }
        this.inputTimer = window.setTimeout(function () {
            _this.inputTimer = null;
            _this.lastAction = null;
        }, this.maxInputTime);
    };
    /**
     * 执行 op
     */
    UndoPlugin.prototype.execute = function (actions, isUndo) {
        var _this = this;
        var ops = [];
        // 依次转换、运用一个 op
        Object(forEach["default"])(actions, function (action) {
            var editorActions = Object(map["default"])(action.ops, function (op) {
                var editorAction = Object(adapter_plugin_lib["operationToAction"])(op, _this.snapshot);
                // 本地 snapshot 运用 op
                _this.snapshot.apply([op]);
                ops.push(op);
                return editorAction;
            });
            // 编辑器执行 action
            _this.editor.execute(editorActions, isUndo ? lib["ExecuteType"].UNDO : lib["ExecuteType"].REDO);
        });
        // 返回执行的操作
        return ops;
    };
    /**
     * 设置光标
     */
    UndoPlugin.prototype.setCursor = function (actions) {
        // 以最后一个带光标信息的 action 的光标为准
        var lastAction = lodash_es_findLast(actions, function (action) { return action.cursor !== null; });
        if (lastAction && lastAction.cursor) {
            this.editor.setCursor(lastAction.cursor);
            // 修改标题
            if (lastAction.cursor.type === lib["CursorType"].TITLE) {
                var title = lastAction.cursor.nextTitle;
                this.editor.setTitle(title);
            }
        }
    };
    /**
     * editor command 转为 undo action (op)
     */
    UndoPlugin.prototype.commandsToUndoActions = function (commands) {
        var _this = this;
        return Object(map["default"])(commands, function (command) {
            var ops = _this.commandToOperation(command);
            var cursor = _this.commandToCursor(command);
            return {
                type: command.name,
                ops: ops,
                cursor: cursor,
            };
        });
    };
    /**
     * editor command 转为 action
     */
    UndoPlugin.prototype.commandToOperation = function (command) {
        switch (command.name) {
            case lib["Actions"].INPUT:
            case lib["Actions"].CREATE:
            case lib["Actions"].DELETE:
            case lib["Actions"].UPDATE:
            case lib["Actions"].STRUCTURE_CHANGE: {
                return Object(adapter_plugin_lib["actionToOperation"])(command, this.snapshot);
            }
            // drill 和 title change 不产生 op
            case lib["PureActions"].DRILL:
            case lib["Actions"].TITLE_CHANGE:
            default: {
                return [];
            }
        }
    };
    /**
     * editor command 取出光标信息
     */
    UndoPlugin.prototype.commandToCursor = function (command) {
        switch (command.name) {
            case lib["Actions"].INPUT: {
                return {
                    type: command.type === lib["InputActionTypes"].TEXT ? lib["CursorType"].TEXT : lib["CursorType"].NOTE,
                    id: command.id,
                    prevPos: command.prevPos,
                    nextPos: command.nextPos,
                };
            }
            case lib["PureActions"].DRILL: {
                return {
                    type: lib["CursorType"].DRILL,
                    from: command.from,
                    to: command.to,
                };
            }
            case lib["Actions"].TITLE_CHANGE: {
                return {
                    type: lib["CursorType"].TITLE,
                    prevTitle: command.original,
                    nextTitle: command.title,
                    prevPos: command.nextPos,
                    nextPos: command.prevPos,
                };
            }
            case lib["Actions"].CREATE:
            case lib["Actions"].DELETE:
            case lib["Actions"].UPDATE:
            case lib["Actions"].STRUCTURE_CHANGE: {
                return {
                    type: lib["CursorType"].NODE,
                    selected: (command.selected || []),
                };
            }
            default: {
                return null;
            }
        }
    };
    return UndoPlugin;
}());

/* harmony default export */ var undo_plugin_lib = __webpack_exports__["default"] = (lib_UndoPlugin);

//# sourceMappingURL=index.js.map


/***/ }),

/***/ 3617:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactRedux = __webpack_require__(300);

var _reactRouterDom = __webpack_require__(344);

var _Mindnote = __webpack_require__(3618);

var _Mindnote2 = _interopRequireDefault(_Mindnote);

var _suite = __webpack_require__(84);

var _network = __webpack_require__(1733);

var _suite2 = __webpack_require__(223);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapDispatchToProps = {
    fetchMobileCurrentSuite: _suite2.fetchMobileCurrentSuite,
    getTokenInfo: _suite2.getTokenInfo
};
var mapStateToProps = function mapStateToProps(state) {
    return {
        curSuiteToken: (0, _suite.selectCurrentSuiteToken)(state),
        curSuite: (0, _suite.selectCurrentSuiteByObjToken)(state),
        onLine: (0, _network.selectNetworkState)(state).connected,
        clientVars: {},
        messageShowing: (0, _suite.selectMessageShowing)(state),
        newMessageNum: (0, _suite.selectNewMessageNum)(state)
    };
};
exports.default = (0, _reactRouterDom.withRouter)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Mindnote2.default));

/***/ }),

/***/ 3618:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(10);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(11);

var _inherits3 = _interopRequireDefault(_inherits2);

var _mindNote = __webpack_require__(3619);

var _mindNote2 = _interopRequireDefault(_mindNote);

var _react = __webpack_require__(1);

var React = _interopRequireWildcard(_react);

var _watermark = __webpack_require__(1703);

var _watermark2 = _interopRequireDefault(_watermark);

var _header = __webpack_require__(1776);

var _header2 = _interopRequireDefault(_header);

var _common = __webpack_require__(19);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MindNote = function (_React$Component) {
    (0, _inherits3.default)(MindNote, _React$Component);

    function MindNote(props) {
        (0, _classCallCheck3.default)(this, MindNote);

        var _this = (0, _possibleConstructorReturn3.default)(this, (MindNote.__proto__ || Object.getPrototypeOf(MindNote)).call(this, props));

        _this.state = {};
        _this.setEditor = function (editor) {
            _this.setState({ editor: editor });
        };
        return _this;
    }

    (0, _createClass3.default)(MindNote, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var curSuiteToken = this.props.curSuiteToken;
            var fetchMobileCurrentSuite = this.props.fetchMobileCurrentSuite;

            fetchMobileCurrentSuite(curSuiteToken, _common.NUM_FILE_TYPE.MINDNOTE);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                curSuite = _props.curSuite,
                onLine = _props.onLine,
                getTokenInfo = _props.getTokenInfo,
                messageShowing = _props.messageShowing,
                newMessageNum = _props.newMessageNum;

            return React.createElement("div", { className: "mindnote-main-wrap", id: "mindnote-main" }, React.createElement(_watermark2.default, { platform: "mobile" }), React.createElement(_header2.default, { currentNote: curSuite, onLine: onLine, getTokenInfo: getTokenInfo, isTemplate: false, messageShowing: messageShowing, newMessageNum: newMessageNum }), React.createElement(_mindNote2.default, { setEditor: this.setEditor }));
        }
    }]);
    return MindNote;
}(React.Component);

exports.default = MindNote;

/***/ }),

/***/ 3619:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _container = __webpack_require__(3620);

var _container2 = _interopRequireDefault(_container);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _container2.default;

window.native = window.native || {};
window.native.mindnote = window.native.mindnote || {};
window.native.assetBrowser = window.native.assetBrowser || {};

/***/ }),

/***/ 3620:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactRedux = __webpack_require__(300);

var _permissionHelper = __webpack_require__(302);

var _suite = __webpack_require__(84);

var _user = __webpack_require__(72);

var _share = __webpack_require__(342);

var _suite2 = __webpack_require__(223);

var _permissions = __webpack_require__(1775);

var _MindNote = __webpack_require__(3621);

var _MindNote2 = _interopRequireDefault(_MindNote);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
    return {
        user: (0, _user.selectCurrentUser)(state).toJSON(),
        token: (0, _suite.selectCurrentSuiteToken)(state),
        suite: (0, _suite.selectCurrentSuiteByObjToken)(state),
        permission: (0, _permissionHelper.getUserPermissions)((0, _share.selectCurrentPermission)(state)),
        otherPermission: (0, _share.selectCurrentSuiteOtherPermissions)(state)
    };
};
var mapDispatchToProps = {
    updateTitle: _suite2.updateTitle,
    syncNoteMeta: _suite2.syncNoteMeta,
    syncTabTitle: _suite2.syncTabTitle,
    updateDocTitle: _suite2.updateDocTitle,
    copyTextWithoutPermission: _permissions.copyTextWithoutPermission
};
exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_MindNote2.default);

/***/ }),

/***/ 3621:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(t) {

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NoteMetaSyncTypes = undefined;

var _regenerator = __webpack_require__(12);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(99);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(10);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(11);

var _inherits3 = _interopRequireDefault(_inherits2);

var _typeof2 = __webpack_require__(82);

var _typeof3 = _interopRequireDefault(_typeof2);

var _uniqueId2 = __webpack_require__(453);

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _get2 = __webpack_require__(14);

var _get3 = _interopRequireDefault(_get2);

var _isEqual2 = __webpack_require__(225);

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _debounce2 = __webpack_require__(226);

var _debounce3 = _interopRequireDefault(_debounce2);

var _reduce2 = __webpack_require__(236);

var _reduce3 = _interopRequireDefault(_reduce2);

var _react = __webpack_require__(1);

var React = _interopRequireWildcard(_react);

var _jquery = __webpack_require__(4);

var _jquery2 = _interopRequireDefault(_jquery);

var _sync = __webpack_require__(3622);

var _sync2 = _interopRequireDefault(_sync);

var _toolbar = __webpack_require__(3710);

var _toolbar2 = _interopRequireDefault(_toolbar);

var _editor = __webpack_require__(1663);

var _editor2 = _interopRequireDefault(_editor);

var _contextMenu = __webpack_require__(3719);

var _contextMenu2 = _interopRequireDefault(_contextMenu);

var _selectionController = __webpack_require__(3722);

var _selectionController2 = _interopRequireDefault(_selectionController);

var _permissionController = __webpack_require__(3724);

var _permissionController2 = _interopRequireDefault(_permissionController);

var _comment = __webpack_require__(1935);

var _comment2 = _interopRequireDefault(_comment);

var _eventEmitter = __webpack_require__(110);

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _mindNoteContext = __webpack_require__(1777);

var _mindNoteContext2 = _interopRequireDefault(_mindNoteContext);

var _MindNoteContext = __webpack_require__(1671);

var _bytedOtJson = __webpack_require__(1813);

var _bytedOtJson2 = _interopRequireDefault(_bytedOtJson);

var _errorHandler = __webpack_require__(3726);

var _errorHandler2 = _interopRequireDefault(_errorHandler);

var _adapterPlugin = __webpack_require__(2256);

var _undoPlugin = __webpack_require__(2257);

var _undoPlugin2 = _interopRequireDefault(_undoPlugin);

var _error = __webpack_require__(1932);

var _common = __webpack_require__(19);

var _toastHelper = __webpack_require__(301);

var _toast = __webpack_require__(554);

var _toast2 = _interopRequireDefault(_toast);

var _permissionHelper = __webpack_require__(302);

var _moirae = __webpack_require__(449);

var _moirae2 = _interopRequireDefault(_moirae);

var _moirae3 = __webpack_require__(2232);

var _domainHelper = __webpack_require__(557);

var _hideLoadingHelper = __webpack_require__(456);

var _plugins = __webpack_require__(3732);

var _plugins2 = _interopRequireDefault(_plugins);

var _sdkCompatibleHelper = __webpack_require__(45);

var _multiTask = __webpack_require__(795);

var _dateHelper = __webpack_require__(564);

var _suiteHelper = __webpack_require__(52);

var _i18nHelper = __webpack_require__(222);

var _tea = __webpack_require__(42);

var _tea2 = _interopRequireDefault(_tea);

var _compatible = __webpack_require__(1819);

var _constants = __webpack_require__(5);

var _highlight = __webpack_require__(1938);

var _classnames = __webpack_require__(127);

var _classnames2 = _interopRequireDefault(_classnames);

var _touch = __webpack_require__(3743);

var _touch2 = _interopRequireDefault(_touch);

var _message = __webpack_require__(3744);

var _message2 = _interopRequireDefault(_message);

var _networkStateHelper = __webpack_require__(129);

var _$decorators = __webpack_require__(553);

var _teaLogger = __webpack_require__(450);

var _teaLogger2 = _interopRequireDefault(_teaLogger);

__webpack_require__(3747);

__webpack_require__(3748);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var NoteMetaSyncTypes = exports.NoteMetaSyncTypes = undefined;
(function (NoteMetaSyncTypes) {
    /**
     * 当前客户端正在提交数据
     */
    NoteMetaSyncTypes["USER_CHANGES"] = "USER_CHANGES";
    /**
     * 编辑数据已经提交成功
     */
    NoteMetaSyncTypes["ACCEPT_COMMIT"] = "ACCEPT_COMMIT";
    /**
     * 同步远端的数据
     */
    NoteMetaSyncTypes["NEW_CHANGES"] = "NEW_CHANGES";
})(NoteMetaSyncTypes || (exports.NoteMetaSyncTypes = NoteMetaSyncTypes = {}));
/**
 * MindNote 入口组件
 */

var MindNote = function (_React$Component) {
    (0, _inherits3.default)(MindNote, _React$Component);

    function MindNote(props) {
        (0, _classCallCheck3.default)(this, MindNote);

        var _this = (0, _possibleConstructorReturn3.default)(this, (MindNote.__proto__ || Object.getPrototypeOf(MindNote)).call(this, props));

        _this.mindNoteContext = _mindNoteContext2.default.getInstance();
        /**
         * 由于 start 是异步的，在拉取到了 clientVars 后可能状态发生了变化
         */
        _this.isStop = false;
        /**
         * toolbar ref
         */
        _this.toolbarRef = null;
        _this.onlineHandler = function () {
            _this.editor.setEditable(_this.props.permission.editable);
        };
        _this.offlineHandler = function () {
            _this.editor.setEditable(false);
        };
        _this.handleDragNodeStart = function () {
            window.lark.biz.util.toggleSwipeGesture({
                enabled: false
            });
        };
        _this.handleDragNodeEnd = function () {
            window.lark.biz.util.toggleSwipeGesture({
                enabled: true
            });
        };
        _this.handleCloseMap = function (data) {
            window.lark.biz.util.toggleTitlebar({
                states: 1
            });
            var htmlDom = document.querySelector('html') || {};
            htmlDom.classList.remove('openMap');
        };
        _this.handleSave2Image = function (data) {
            window.lark.biz.util.save2Image({
                name: data.name,
                data: data.base64Data
            }, function (data) {
                if (data.code === '1') {
                    (0, _toastHelper.showToast)({
                        type: 0,
                        message: t('mobile.save_img_success'),
                        duration: 3
                    });
                } else {
                    (0, _toastHelper.showToast)({
                        type: 1,
                        message: t('mobile.save_img_failed'),
                        duration: 3
                    });
                }
            });
        };
        _this.handleDrill = function (e) {
            // 进 redo/undo 栈
            _this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.DRILL, e);
        };
        _this.previewImage = function (data) {
            _eventEmitter2.default.trigger('onKeyboard', [{ isOpenKeyboard: 0 }]);
            data['imageList'] = data['imageList'] || [];
            var imageList = [];
            var curImage = data['imageList'][data.index];
            var image = {
                title: '',
                src: (0, _domainHelper.prependAPI)(curImage.uri),
                uuid: curImage.nodeId + '___' + curImage.id
            };
            data.imageList.forEach(function (element) {
                var item = {
                    title: '',
                    src: (0, _domainHelper.prependAPI)(element.uri),
                    uuid: element.nodeId + '___' + element.id
                };
                imageList.push(item);
            });
            window.lark.biz.util.openImg({
                tool_status: {
                    delete: _this.props.permission.editable,
                    copy: _this.props.otherPermission.copyable
                },
                image: image,
                image_list: imageList
            });
        };
        _this.nodeClick = function () {
            if (_this.props.permission.editable && !_this.hasEditNotice) {
                _this.hasEditNotice = true;
                (0, _toastHelper.showToast)({
                    type: 3,
                    message: t('mindnote.mobile.editnotice'),
                    duration: 2
                });
            }
        };
        /**
         * 编辑器本地操作
         */
        _this.handleClientChange = function (actions) {
            try {
                /* 将编辑器原始消息转换成OT-JSON格式 */
                var ops = (0, _reduce3.default)(actions, function (prev, action) {
                    var op = (0, _adapterPlugin.actionToOperation)(action, _this.snapshot);
                    return prev.concat(op);
                }, []);
                _this.snapshot.apply(ops);
                _this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.CHANGE_CLIENT, ops);
            } catch (error) {
                _moirae2.default.count(_moirae3.MoiraeKeys.APPLY_CLIENT_OP_FAILED);
                _moirae2.default.ravenCatch(error);
                console.error(error);
                _this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.ERROR, {
                    type: _error.ErrorType.COLLABORATION_ERROR,
                    code: _error.ClientErrorCode.APPLY_ACTION_FAILED
                });
            }
        };
        _this.openlink = function (url) {
            location.href = url;
        };
        /**
         * 远端推送的change
         */
        _this.handleServerChange = function (ops) {
            /* 应用远端消息 */
            try {
                /* 将OT-JSON格式的消息转换成编辑器消息 */
                var actions = (0, _reduce3.default)(ops, function (prev, op) {
                    /**
                     * 注意此处需要对每个op单独应用，因为如果有一组带层级结构的创建，在父节点没有被创建出来的时候，无法获取父节点的 NodeSet
                     */
                    var action = (0, _adapterPlugin.operationToAction)(op, _this.snapshot);
                    _this.snapshot.apply([op]);
                    return prev.concat(action);
                }, []);
                console.info('Receive:', actions);
                _this.editor.execute(actions, _editor.ExecuteType.SERVER);
                // 更新文档 meta
                _this.props.syncNoteMeta({
                    type: NoteMetaSyncTypes.NEW_CHANGES
                });
            } catch (error) {
                _moirae2.default.count(_moirae3.MoiraeKeys.APPLY_SERVER_OP_FAILED);
                _moirae2.default.ravenCatch(error);
                console.error(error);
                _this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.ERROR, {
                    type: _error.ErrorType.COLLABORATION_ERROR,
                    code: _error.ClientErrorCode.APPLY_ACTION_FAILED
                });
            }
            /* 对 Undo/Redo 栈操作做 transform */
            try {
                _this.undoPlugin.transform(ops);
            } catch (error) {
                _moirae2.default.count(_moirae3.MoiraeKeys.TRANSFORM_UNDO_FAILED);
                _moirae2.default.ravenCatch(error);
                console.error(error);
                _this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.ERROR, {
                    type: _error.ErrorType.COLLABORATION_ERROR,
                    code: _error.ClientErrorCode.APPLY_ACTION_FAILED
                });
            }
        };
        /**
         * 编辑器里面标题更新后，要更新meta
         */
        _this.handleClientTitleChange = function (e) {
            var _this$props = _this.props,
                token = _this$props.token,
                updateTitle = _this$props.updateTitle,
                syncTabTitle = _this$props.syncTabTitle;

            _this.setMobileTitle(e.title);
            updateTitle({
                token: token,
                type: _common.NUM_SUITE_TYPE.MINDNOTE,
                title: e.title,
                memberId: _this.sync._memberId + '' || ''
            }).then(function () {
                syncTabTitle({
                    token: token,
                    type: _common.NUM_SUITE_TYPE.MINDNOTE,
                    title: e.title
                });
            });
        };
        /**
         * 远端推送修改标题事件
         */
        _this.handleServerTitleChange = function (title) {
            _this.editor.setTitle(title);
            _this.setMobileTitle(title);
            var _this$props2 = _this.props,
                token = _this$props2.token,
                updateDocTitle = _this$props2.updateDocTitle,
                syncTabTitle = _this$props2.syncTabTitle;

            updateDocTitle({
                token: token,
                type: _common.NUM_SUITE_TYPE.MINDNOTE,
                title: title
            });
            syncTabTitle({
                token: token,
                type: _common.NUM_SUITE_TYPE.MINDNOTE,
                title: title
            });
        };
        /**
         * 点击演示模式
         */
        _this.handleOpenPresentation = function () {
            _this.editor.openPresentation();
        };
        /**
         * 远端推送权限变更
         */
        _this.handlePermissionChange = function (permission) {
            if (_this.editor) {
                var commentable = (0, _compatible.isCommentEnabled)() && permission.commentable;
                _this.editor.setEditable(permission.editable && (0, _networkStateHelper.isOnLine)());
                _this.editor.setState({
                    commentEnabled: commentable
                });
            }
            if (_this.commentRef) {
                _this.commentRef.setCommentPermission(permission.commentable);
            }
            // 权限变更显示提示
            if (!_this.isInitialPermission(_this.props.permission) && _this.props.permission.editable !== permission.editable) {
                var msg = permission.editable ? t('common.editable') : t('common.readable');
                (0, _toastHelper.showToast)({
                    type: 3,
                    message: msg,
                    duration: 2
                });
            }
        };
        _this.handleSaving = function () {
            _this.props.syncNoteMeta({
                type: NoteMetaSyncTypes.USER_CHANGES
            });
        };
        _this.handleSaved = function () {
            _this.props.syncNoteMeta({
                type: NoteMetaSyncTypes.ACCEPT_COMMIT
            });
        };
        /**
         * 若当前用户正在翻页钻取的节点内，且节点被协同删除
         */
        _this.handleDrillRemoved = function () {
            _toast2.default.show({
                key: 'MINDNOTE_DRILL_REMOVED',
                type: 'info',
                content: t('mindnote.drill.removed'),
                duration: 3000,
                closable: true
            });
        };
        /**
         * 点击评论按钮，可以是点击气泡，也可以是点击 toolbar
         */
        _this.handleClickComment = function (source) {
            if (_this.commentRef) {
                _this.commentRef.startNewComment(source);
            }
        };
        /**
         * 判断元素是否在 mindnote 里面
         */
        _this.containsElement = function (element) {
            if (_this.paperRef) {
                return _this.paperRef.contains(element);
            }
            return false;
        };
        _this.handleClientTitleChange = (0, _debounce3.default)(_this.handleClientTitleChange, 500);
        _this.state = {
            editor: null
        };
        return _this;
    }

    (0, _createClass3.default)(MindNote, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            this.start(this.props);
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            this.stop();
            this.plugins && this.plugins.destroy();
        }
    }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
            var otherPermission = nextProps.otherPermission,
                permission = nextProps.permission;

            if (nextProps.token && nextProps.token === this.props.token && !(0, _isEqual3.default)(this.props.otherPermission, otherPermission)) {
                if (this.editor) {
                    this.editor.setState({
                        copyEnabled: otherPermission.copyable,
                        exportEnabled: otherPermission.exportable
                    });
                }
            }
            if (nextProps.token && nextProps.token === this.props.token && !(0, _isEqual3.default)(this.props.permission, permission)) {
                this.handlePermissionChange(permission);
                this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.PERMISSION_CHANGE, permission);
            }
        }
        /**
         * 启动协同编辑器
         * @description 注意调用 start 时的生命周期，props 使用注入的方式防止生命周期的问题
         * @async
         */

    }, {
        key: "start",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
                var _this2 = this;

                var clientVars, permissionSum, permission, otherPermission, pos;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.touchEventManager = _touch2.default.createEventManager();
                                this.isStop = false;
                                this.sync = new _sync2.default({
                                    objToken: props.token,
                                    userId: (0, _get3.default)(window, ['User', 'id'], props.user.id)
                                });

                                if (!this.sync.io.getStockObj) {
                                    _context.next = 6;
                                    break;
                                }

                                _context.next = 6;
                                return this.sync.io.getStockObj();

                            case 6:
                                _context.next = 8;
                                return this.sync.start();

                            case 8:
                                clientVars = _context.sent;

                                if (!this.isStop) {
                                    _context.next = 11;
                                    break;
                                }

                                return _context.abrupt("return");

                            case 11:
                                this.setMobileTitle(clientVars.title);
                                /**
                                 * 从 ClientVars 中取权限的和
                                 * @description 注意此处的权限需要从clientVars中取，因为explorer获取权限的生命周期不一样
                                 */
                                permissionSum = (0, _reduce3.default)(clientVars.permissions, function (prev, curr) {
                                    return prev + curr;
                                }, 0);
                                permission = (0, _permissionHelper.permission2Booleans)(permissionSum);
                                otherPermission = props.otherPermission;

                                this.editor = new _editor2.default({
                                    root: this.paperRef,
                                    id: props.user.id + ":" + this.sync.getMemberId() + ":" + (0, _uniqueId3.default)('editor'),
                                    titlePlaceholder: t('common.unnamed_mindnote'),
                                    contentPlaceholder: t('mindnote.content.placeholder'),
                                    env: _editor.MindNoteEnvironment.APP,
                                    delayRelocateMindMap: true,
                                    statusBarSpacing: 34,
                                    imageUrlPrefix: (0, _domainHelper.getAPIPrefix)(),
                                    dateFormat: _dateHelper.showDate,
                                    locale: (0, _i18nHelper.getLocale)()
                                });
                                this.editor.nativeplugins = this.editor.nativeplugins || {};
                                // 给 editor 和 cursor 设置权限
                                if (_sdkCompatibleHelper.isSupportMindNoteEdit) {
                                    this.editor.setEditable(permission.editable && (0, _networkStateHelper.isOnLine)());
                                } else {
                                    this.editor.setEditable(false);
                                }
                                this.editor.setState({
                                    mentionEnabled: (0, _compatible.isMentionEnabled)(),
                                    commentEnabled: (0, _compatible.isCommentEnabled)() && permission.commentable,
                                    copyEnabled: otherPermission.copyable,
                                    exportEnabled: otherPermission.exportable
                                });
                                if (this.toolbarRef) {
                                    this.toolbarRef.setCommentPermission(permission.commentable);
                                }
                                /* 初始化副本 */
                                this.snapshot = new _bytedOtJson2.default(null, clientVars.collab_client_vars);
                                // 初始化 redo/undo 插件(这里需要确保undo插件在本地发送消息之前)
                                this.undoPlugin = new _undoPlugin2.default(this.editor, this.snapshot);
                                this.undoPlugin.init();
                                /* 注册 editor 以及 content 中的事件 */
                                this.editor.addEventListener(_editor.MindNoteEvent.EDIT, this.handleClientChange);
                                this.editor.addEventListener(_editor.MindNoteEvent.TITLE_CHANGE, this.handleClientTitleChange);
                                this.editor.addEventListener(_editor.MindNoteEvent.DRILL_REMOVED, this.handleDrillRemoved);
                                this.editor.addEventListener(_editor.MindNoteEvent.DRILL, this.handleDrill);
                                this.editor.addEventListener(_editor.MindNoteEvent.MIND_MAP_EXPORT, this.handleSave2Image);
                                this.editor.addEventListener(_editor.MindNoteEvent.MIND_MAP_CLOSE, this.handleCloseMap);
                                this.editor.addEventListener(_editor.MindNoteEvent.PREVIEW_IMAGE, this.previewImage);
                                this.editor.addEventListener(_editor.MindNoteEvent.OPEN_LINK, this.openlink);
                                this.editor.addEventListener(_editor.MindNoteEvent.DRAG_NODE_START, this.handleDragNodeStart);
                                this.editor.addEventListener(_editor.MindNoteEvent.DRAG_NODE_END, this.handleDragNodeEnd);
                                if (!_sdkCompatibleHelper.isSupportMindNoteEdit) {
                                    this.editor.addEventListener(_editor.MindNoteEvent.NODE_CLICK, this.nodeClick);
                                }
                                this.mindNoteContext.bind(_MindNoteContext.MindNoteEvent.CHANGE_SERVER, this.handleServerChange);
                                this.mindNoteContext.bind(_MindNoteContext.MindNoteEvent.OPEN_PRESENTATION, this.handleOpenPresentation);
                                this.mindNoteContext.bind(_MindNoteContext.MindNoteEvent.OPEN_MINDMAP, this.handleOpenMindMap);
                                this.mindNoteContext.bind(_MindNoteContext.MindNoteEvent.SAVING, this.handleSaving);
                                this.mindNoteContext.bind(_MindNoteContext.MindNoteEvent.SAVED, this.handleSaved);
                                this.mindNoteContext.bind(_MindNoteContext.MindNoteEvent.TITLE_CHANGE_SERVER, this.handleServerTitleChange);
                                window.addEventListener('offline', this.offlineHandler);
                                window.addEventListener('online', this.onlineHandler);
                                this.editor.nativeplugins.undoPlugin = this.undoPlugin;
                                this.editor.containerWrap = document.getElementById('mindnote-main');
                                this.plugins = new _plugins2.default(this.editor);
                                this.props.setEditor(this.editor);
                                /**
                                 * 打开文档
                                 * @description 初始化编辑器是一个同步操作，所以插件初始化放在下面👇即可
                                 */
                                this.editor.open({
                                    token: props.token,
                                    data: clientVars.collab_client_vars,
                                    title: clientVars.title
                                });
                                this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.LOADED, {
                                    permission: permission,
                                    version: clientVars.version
                                });
                                /* 还原上次滚动位置 */
                                pos = (0, _multiTask.getSavedScrollPos)();

                                if (pos && (0, _suiteHelper.isFromMultiTask)()) {
                                    window.scrollTo(pos.x, pos.y);
                                    (0, _multiTask.setSavedScrollPos)(null);
                                }
                                try {
                                    (0, _tea2.default)('client_file_open', {});
                                } catch (error) {
                                    console.warn(error);
                                }
                                (0, _hideLoadingHelper.hideLoading)();
                                (0, _highlight.tryHighLightMention)();
                                this.setState({
                                    editor: this.editor
                                }, function () {
                                    /* 第一次创建文档，默认 focus 标题 */
                                    if (clientVars.version === 0 && _this2.props.permission.editable && (0, _networkStateHelper.isOnLine)()) {
                                        (0, _jquery2.default)('.mindnote-title-content').focus();
                                        window.lark.biz.util.showKeyBoard({ onSuccess: function onSuccess() {
                                                return null;
                                            } });
                                    }
                                });

                            case 54:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function start(_x) {
                return _ref.apply(this, arguments);
            }

            return start;
        }()
        /**
         * 关闭协同编辑器
         * @async
         */

    }, {
        key: "stop",
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                this.isStop = true;
                                /* 注销 editor 以及 content 中的事件 */
                                if (this.editor) {
                                    this.editor.removeEventListener(_editor.MindNoteEvent.EDIT, this.handleClientChange);
                                    this.editor.removeEventListener(_editor.MindNoteEvent.TITLE_CHANGE, this.handleClientTitleChange);
                                    this.editor.removeEventListener(_editor.MindNoteEvent.DRILL_REMOVED, this.handleDrillRemoved);
                                    this.editor.removeEventListener(_editor.MindNoteEvent.DRILL, this.handleDrill);
                                    this.editor.removeEventListener(_editor.MindNoteEvent.MIND_MAP_EXPORT, this.handleSave2Image);
                                    this.editor.removeEventListener(_editor.MindNoteEvent.MIND_MAP_CLOSE, this.handleCloseMap);
                                    this.editor.removeEventListener(_editor.MindNoteEvent.PREVIEW_IMAGE, this.previewImage);
                                    this.editor.removeEventListener(_editor.MindNoteEvent.OPEN_LINK, this.openlink);
                                    this.editor.removeEventListener(_editor.MindNoteEvent.DRAG_NODE_START, this.handleDragNodeStart);
                                    this.editor.removeEventListener(_editor.MindNoteEvent.DRAG_NODE_END, this.handleDragNodeEnd);
                                    if (!_sdkCompatibleHelper.isSupportMindNoteEdit) {
                                        this.editor.removeEventListener(_editor.MindNoteEvent.NODE_CLICK, this.nodeClick);
                                    }
                                    this.editor.destroy();
                                }
                                this.mindNoteContext.unbind(_MindNoteContext.MindNoteEvent.CHANGE_SERVER, this.handleServerChange);
                                this.mindNoteContext.unbind(_MindNoteContext.MindNoteEvent.OPEN_PRESENTATION, this.handleOpenPresentation);
                                this.mindNoteContext.unbind(_MindNoteContext.MindNoteEvent.OPEN_MINDMAP, this.handleOpenMindMap);
                                this.mindNoteContext.unbind(_MindNoteContext.MindNoteEvent.SAVING, this.handleSaving);
                                this.mindNoteContext.unbind(_MindNoteContext.MindNoteEvent.SAVED, this.handleSaved);
                                this.mindNoteContext.unbind(_MindNoteContext.MindNoteEvent.TITLE_CHANGE_SERVER, this.handleServerTitleChange);
                                window.removeEventListener('offline', this.offlineHandler);
                                window.removeEventListener('online', this.onlineHandler);
                                _context2.next = 12;
                                return this.sync.stop();

                            case 12:
                                if (this.undoPlugin) {
                                    this.undoPlugin.destroy();
                                }
                                if (this.touchEventManager) {
                                    this.touchEventManager.destroy();
                                }

                            case 14:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function stop() {
                return _ref2.apply(this, arguments);
            }

            return stop;
        }()
        /**
         * 设置客户端 title
         */

    }, {
        key: "setMobileTitle",
        value: function setMobileTitle(title) {
            var name = title || t('common.unnamed_mindnote');
            // 多任务 title
            _eventEmitter2.default.trigger(_constants.events.MOBILE.COMMON.TITLE_CHANGE, [{ title: name }]);
            // 离线编辑 title
            window.lark.biz.util.setOfflineName({
                objToken: this.props.token,
                newName: name,
                editTime: Math.floor(Date.now() / 1000)
            });
            // 标题栏 title
            window.lark.biz.navigation.setTitle({ title: '', doc_name: name });
        }
        /**
         * 点击思维导图
         */

    }, {
        key: "handleOpenMindMap",
        value: function handleOpenMindMap() {
            this.editor.openMindMap();
        }
    }, {
        key: "isInitialPermission",
        value: function isInitialPermission(permission) {
            return !permission.commentable && !permission.editable && !permission.readable && !permission.shareable;
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            var minHeight = window.innerHeight - 90;
            var _props = this.props,
                token = _props.token,
                permission = _props.permission;

            return React.createElement("div", { className: (0, _classnames2.default)('mindnote-main', {
                    readonly: !permission.editable
                }), style: { minHeight: minHeight } }, React.createElement(_contextMenu2.default, { onClickComment: this.handleClickComment, token: token, permission: permission }), React.createElement(_selectionController2.default, { token: token, editable: permission.editable && (0, _networkStateHelper.isOnLine)() }), this.state.editor && React.createElement(_permissionController2.default, { otherPermission: this.props.otherPermission, editor: this.editor, copyTextWithoutPermission: this.props.copyTextWithoutPermission, isFromMindnote: this.containsElement }), this.state.editor && React.createElement(_comment2.default, { token: token, editor: this.state.editor, commentable: permission.commentable, ref: function ref(comment) {
                    return _this3.commentRef = comment;
                }, context: this.mindNoteContext }), this.state.editor && React.createElement(_toolbar2.default, { onClickComment: this.handleClickComment, editor: this.state.editor, ref: function ref(_ref3) {
                    return _this3.toolbarRef = _ref3;
                } }), this.state.editor && React.createElement(_message2.default, { memberId: this.sync.getMemberId(), permission: permission, user: this.props.user, token: this.props.token, context: this.mindNoteContext }), React.createElement(_errorHandler2.default, { context: this.mindNoteContext }), React.createElement("div", { className: "mindnote-box" }, React.createElement("div", { className: "mindnote-root" }, React.createElement("div", { className: "mindnote-root-paper", ref: function ref(_ref4) {
                    return _this3.paperRef = _ref4;
                } }))));
        }
    }]);
    return MindNote;
}(React.Component);

__decorate([(0, _$decorators.Bind)(), (0, _teaLogger2.default)('toggle_attribute', function (_ref5, data) {
    var context = _ref5.context,
        store = _ref5.store;

    return {
        action: 'enter_mindmap',
        attr_op_status: 'effective',
        eventType: 'mouseclick',
        source: 'headerbar',
        mode: 'outline',
        view_level: _editor.teaUtils.getCurrentLevel(),
        select_type: _editor.teaUtils.getCurrentSelectType()
    };
})], MindNote.prototype, "handleOpenMindMap", null);
exports.default = MindNote;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(25)))

/***/ }),

/***/ 3622:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Sync = __webpack_require__(3623);

var _Sync2 = _interopRequireDefault(_Sync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _Sync2.default;

/***/ }),

/***/ 3623:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ReadyState = exports.CLIENT_VARS = undefined;

var _defineProperty2 = __webpack_require__(9);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _regenerator = __webpack_require__(12);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(99);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _objectWithoutProperties2 = __webpack_require__(38);

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _forEach2 = __webpack_require__(90);

var _forEach3 = _interopRequireDefault(_forEach2);

var _map2 = __webpack_require__(229);

var _map3 = _interopRequireDefault(_map2);

var _cloneDeep2 = __webpack_require__(754);

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _unset2 = __webpack_require__(3624);

var _unset3 = _interopRequireDefault(_unset2);

var _get2 = __webpack_require__(14);

var _get3 = _interopRequireDefault(_get2);

var _util = __webpack_require__(354);

var _$constants = __webpack_require__(5);

var _sliApiMap = __webpack_require__(309);

var _offlineEditHelper = __webpack_require__(220);

var _offline = __webpack_require__(148);

var _networkStateHelper = __webpack_require__(129);

var _io = __webpack_require__(1894);

var _io2 = __webpack_require__(345);

var _bytedOtJson = __webpack_require__(1813);

var _bytedOtJson2 = _interopRequireDefault(_bytedOtJson);

var _types = __webpack_require__(2231);

var _memberHelper = __webpack_require__(766);

var _mindNoteContext = __webpack_require__(1777);

var _mindNoteContext2 = _interopRequireDefault(_mindNoteContext);

var _MindNoteContext = __webpack_require__(1671);

var _sync = __webpack_require__(166);

var _error = __webpack_require__(1932);

var _async = __webpack_require__(3708);

var _moirae = __webpack_require__(449);

var _moirae2 = _interopRequireDefault(_moirae);

var _moirae3 = __webpack_require__(2232);

var _tea = __webpack_require__(42);

var _tea2 = _interopRequireDefault(_tea);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CLIENT_VARS = exports.CLIENT_VARS = 'MINDNOTE_CLIENT_VARS';
var ReadyState = exports.ReadyState = undefined;
(function (ReadyState) {
    ReadyState[ReadyState["READY"] = 0] = "READY";
    ReadyState[ReadyState["SUBMITTING"] = 1] = "SUBMITTING";
})(ReadyState || (exports.ReadyState = ReadyState = {}));
/**
 * 头像的type
 */
var MEMBER_TYPE = 'MindNote';
/**
 * 本地与服务端版本最大差值，超过则提示刷新
 */
var MISS_VERSION_THRESHOLD = 100;
/**
 * 发送 userChange 与 cursorInfo 的节流时间，毫秒
 */
var REQUEST_THROTTLE_TIME = 300;

var Sync = function () {
    function Sync(props) {
        var _this = this;

        (0, _classCallCheck3.default)(this, Sync);

        this.io = (0, _io2.IOCreator)().getInstance({});
        this.mindNoteContext = _mindNoteContext2.default.getInstance();
        /**
         * 当前文档的版本
         * @description 远端存储的 changset 记录的版本为应用之后文档的版本，即+1
         */
        this.version = -1;
        /**
         * 当前网络通道的状态
         */
        this.readyState = ReadyState.READY;
        /**
         * Changeset 缓存池，缓存发出去但还没有收到 ACK 的 Changeset
         * @description 当发送出一组 Changeset 后，需先进入缓存池，若 ACK 中有超前的版本，需与缓存池中的 Changeset 做OT
         */
        this.changesetCache = [];
        /**
         * 上一次标题修改的时间戳
         * @description 标题修改事件不保证有序到达，需要客户端判断
         */
        this.lastTitleTimestamp = 0;
        /**
         * 待发送的 Changeset
         * @description 当一组 Changeset 发送到服务端还未收到 ACK 时，这时不允许发送新的 Changeset，需先进入缓冲池，待 ACK 收到时再发送。
         */
        this.changesetQueue = [];
        /**
         * 是否收到了 clientVars
         * @description 收到 clientVars 之前，不要更新心跳版本
         */
        this.receivedClientVars = false;
        /**
         * IO 层有个问题，若通过文档 token 进入页面，则会触发两次watch，IO 层每次连接的时候，内部会触发一次 watch
         */
        this.isWatched = false;
        /**
         * 处理远端的消息
         */
        this.handleMessage = function (message) {
            var data = message.data;
            switch (data.type) {
                case _types.MessageType.NEW_CHANGES:
                    /* 若字段为0，则代表没有溢出 */
                    if (data.over_size === 0) {
                        _this.handleNewChange(data);
                    } else if (_this.version < data.version) {
                        _this.fetchMissChangsets(_this.version + 1, data.version);
                    }
                    break;
                case _types.MessageType.ENGAGEMENT_CURSOR:
                    _this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.CURSOR_SERVER, data);
                    break;
                case _types.MessageType.USER_NEWINFO:
                    var entities = data.entities,
                        _data = (0, _objectWithoutProperties3.default)(data, ['entities']);

                    var users = (0, _get3.default)(entities, 'users', {});
                    var userInfo = Object.assign(_data, users[_data.user_id]);
                    (0, _memberHelper.handleUserNewInfo)(MEMBER_TYPE, userInfo);
                    _this.syncMemberBaseRev(data.version);
                    _this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.USER_ENTER, userInfo);
                    break;
                case _types.MessageType.USER_LEAVE:
                    (0, _memberHelper.handleUserLeave)(MEMBER_TYPE, data);
                    _this.syncMemberBaseRev(data.version);
                    _this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.USER_LEAVE, data);
                    break;
                case _types.MessageType.OBJ_TITLE_CHANGE:
                    _this.handleTitleChange(data);
                    break;
                default:
                    break;
            }
        };
        /**
         * 远端修改标题
         * @param title 标题
         */
        this.handleTitleChange = function (data) {
            /**
             * 标题修改操作不保证有序，所以要判断下时间戳
             */
            if (data.timestamp >= _this.lastTitleTimestamp && '' + _this._memberId !== data.member_id) {
                _this.lastTitleTimestamp = data.timestamp;
                _this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.TITLE_CHANGE_SERVER, data.title);
            }
        };
        /**
         * Watch 成功之后再拉取 members 信息
         */
        this.handleAcceptWatch = function (ack) {
            if (!_this.isWatched) {
                _this.fetchRoomMembers();
                _this.isWatched = true;
            }
        };
        /**
         * 收到远端新 Change 消息
         * @description 由于上行消息和下行的消息都用了统一的格式，所以ops里面会是一个数组，在远端主动推送中，理论上ops中只有一个
         * 元素，外层version和op的version也是唯一对其的，如果有例外，则是后端的BUG
         */
        this.handleNewChange = function (data) {
            /* 若此条消息版本已经过时，则丢弃 */
            if (data.version <= _this.version) {
                return;
            } else if (data.version === _this.version + 1) {
                /* 若此条消息的版本与当前版本连续，则直接应用 */
                _this.apply(data.ops[0].operations);
            } else if (data.version > _this.version + 1) {
                /* 若版本超出了连续的值，值需要拉取缺失的版本 */
                _this.fetchMissChangsets(_this.version + 1, data.version);
            }
        };
        /**
         * 客户端产生编辑消息
         * @param 被转换后的 ops
         */
        this.handleClientChange = function (ops) {
            /**
             * 先压如缓冲队列而不是缓存队列
             * @description 此处发送的时候需要 compose 聚合一次，90%以上的情况可能都是 update 操作
             */
            _this.changesetQueue = _bytedOtJson2.default.compose(_this.changesetQueue, ops);
            /* 然后再尝试冲洗 */
            _this.flush();
        };
        /**
         * 客户端产生光标消息
         * @param cursorInfo 光标信息
         */
        this.handleClientCursor = function (cursorInfo) {
            var cursorRequest = {
                type: _types.MessageType.ENGAGEMENT_CURSOR,
                token: _this.props.objToken,
                memberId: _this.getMemberId(),
                cursor_info: cursorInfo,
                user_id: _this.props.userId
            };
            _this.request(cursorRequest, _io.Channel.socket);
        };
        /**
         * 处理 engine 心跳信息
         */
        this.handleEngineChannelMessage = function (version, oldVersion) {
            /* 如果没有收到clientVars的时候不处理 */
            if (!_this.receivedClientVars) {
                return;
            }
            // 本地与服务端版本差异过大，提示刷新
            if (version - oldVersion > MISS_VERSION_THRESHOLD) {
                _this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.ERROR, {
                    code: _error.ClientErrorCode.REVISION_MAX_GAP_EXCEED,
                    type: _error.ErrorType.COLLABORATION_ERROR
                });
                return;
            }
            if (_this.version < version) {
                _this.fetchMissChangsets(_this.version + 1, version);
            }
        };
        /**
         * 处理 member 心跳信息
         */
        this.handleMemberChannelMessage = function () {
            _this.fetchRoomMembers();
        };
        this.props = props;
        this.entity = {
            type: _types.EngineType.MIND_NOTE,
            token: props.objToken
        };
    }
    /**
     * 启动 Sync 层，注册 IO 通道，拉取并返回 ClientVars
     * @async
     */


    (0, _createClass3.default)(Sync, [{
        key: 'start',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var clientVars, clientVarsRequest;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                /* 注册 IO 层 */
                                this.io.watch(this.entity);
                                this.io.register(this.entity, {
                                    message: {
                                        handler: this.handleMessage,
                                        filter: this.entity
                                    },
                                    heartbeats: Object.assign({}, (0, _sync.getHeartbeatsOption)(), {
                                        engine_channel: {
                                            callback: this.handleEngineChannelMessage
                                        },
                                        member_channel: {
                                            callback: this.handleMemberChannelMessage
                                        }
                                    }),
                                    acceptWatchHandler: this.handleAcceptWatch
                                });
                                /* 注册默认版本号，用于初始化判定 */
                                this.syncEngineBaseRev(-1);
                                /* 注册客户端操作事件 */
                                this.mindNoteContext.bind(_MindNoteContext.MindNoteEvent.CHANGE_CLIENT, this.handleClientChange);
                                this.mindNoteContext.bind(_MindNoteContext.MindNoteEvent.CURSOR_CLIENT, this.handleClientCursor);
                                /* 从模板里尝试获取 clientVars */
                                clientVars = (0, _get3.default)(window, ['DATA', 'clientVars', 'data']);

                                if (clientVars) {
                                    _context.next = 13;
                                    break;
                                }

                                clientVarsRequest = {
                                    type: _types.MessageType.CLIENT_VARS,
                                    token: this.props.objToken
                                };
                                _context.next = 10;
                                return this.request(clientVarsRequest);

                            case 10:
                                clientVars = _context.sent;
                                _context.next = 14;
                                break;

                            case 13:
                                (0, _unset3.default)(window, ['DATA', 'clientVars']);

                            case 14:
                                /* 记录当前文档的版本 */
                                this.version = clientVars.version;
                                /* 设置收到 clientVars 标志 */
                                this.receivedClientVars = true;
                                /* 设置心跳版本 */
                                this.syncEngineBaseRev(this.version);
                                return _context.abrupt('return', clientVars);

                            case 18:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function start() {
                return _ref.apply(this, arguments);
            }

            return start;
        }()
        /**
         * 注销 IO 通道，并发送 Unwatch 操作
         * @async
         */

    }, {
        key: 'stop',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                /* 注销 IO 通道 */
                                this.io.unRegister(this.entity);
                                /* 注销客户端事件 */
                                this.mindNoteContext.unbind(_MindNoteContext.MindNoteEvent.CHANGE_CLIENT, this.handleClientChange);
                                this.mindNoteContext.unbind(_MindNoteContext.MindNoteEvent.CURSOR_CLIENT, this.handleClientCursor);
                                // 重置协作者列表
                                (0, _memberHelper.handleResetMembers)(MEMBER_TYPE, this.entity.token);

                            case 4:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function stop() {
                return _ref2.apply(this, arguments);
            }

            return stop;
        }()
        /**
         * 获取 IO memberId
         */

    }, {
        key: 'getMemberId',
        value: function getMemberId() {
            if (this._memberId) return this._memberId;
            if (!this.io.getMemberId()) {
                console.info('-----随机_memberId');
                this._memberId = (0, _util.getDeviceId)(new Date().valueOf());
                return this._memberId;
            }
            this._memberId = this.io.getMemberId();
            return this._memberId;
        }
        /**
         * 请求消息，并效验返回的状态码
         * @param data 请求消息体
         * @param channel 消息通道，默认为 http
         * @async
         */

    }, {
        key: 'request',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(data) {
                var channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _io.Channel.http;
                var response;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.prev = 0;

                                // 统计请求次数，用于计算失败率
                                _moirae2.default.count(_moirae3.MoiraeKeys.SYNC_REQUEST);
                                _context3.next = 4;
                                return this.autoRetryRequest(data, channel);

                            case 4:
                                response = _context3.sent;

                                if (!(response.code !== 0)) {
                                    _context3.next = 7;
                                    break;
                                }

                                throw response;

                            case 7:
                                if (!(response.data.code !== _types.StatusCode.SUCCESS)) {
                                    _context3.next = 9;
                                    break;
                                }

                                throw response.data;

                            case 9:
                                if (data.type === 'CLIENT_VARS') {
                                    (0, _offlineEditHelper.setData)({
                                        key: CLIENT_VARS,
                                        data: response,
                                        token: this.props.objToken,
                                        dataType: _offline.DATA_TYEP_MAIN,
                                        needSync: false
                                    });
                                }
                                return _context3.abrupt('return', response.data);

                            case 13:
                                _context3.prev = 13;
                                _context3.t0 = _context3['catch'](0);

                                // 统计请求失败次数
                                _moirae2.default.count(_moirae3.MoiraeKeys.SYNC_REQUEST_FAILED);
                                _moirae2.default.ravenCatch(_context3.t0);
                                this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.ERROR, {
                                    type: _error.ErrorType.SERVER_ERROR,
                                    code: _context3.t0.code
                                });
                                console.log(_context3.t0);
                                throw new Error(_context3.t0.msg);

                            case 20:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this, [[0, 13]]);
            }));

            function request(_x) {
                return _ref3.apply(this, arguments);
            }

            return request;
        }()
    }, {
        key: 'requestByhttp',
        value: function requestByhttp(payload) {
            var memberId = this.getMemberId();
            var options = {
                key: CLIENT_VARS,
                headers: (0, _defineProperty3.default)({
                    'Content-Type': 'application/json'
                }, _sliApiMap.X_COMMAND, _sliApiMap.API_RCE_PANDORA),
                priority: 9,
                noStore: true,
                readStore: true,
                body: {
                    type: payload.type,
                    data: Object.assign({}, payload.data, {
                        member_id: memberId,
                        user_ticket: this.io.getTicket(),
                        base_rev: 0
                    }),
                    version: payload.version || 0,
                    req_id: payload.req_id || 1
                }
            };
            if ((0, _networkStateHelper.isOnLine)()) {
                // 有网情况下不读缓存
                options.readStore = false;
            }
            this.promise = (0, _offlineEditHelper.fetch)(_$constants.apiUrls.POST_RCE_MESSAGE + '?member_id=' + memberId, options);
            return this.promise;
        }
        // private async autoRetryRequest(
        //   data: PandoraRequestData,
        //   channel: Channel = Channel.http,
        //   retry: number = 3): Promise<PandoraResponse<PandoraResponseData>> {
        //   let response: PandoraResponse<PandoraResponseData>;
        //   if (channel === Channel.socket) {
        //     response = await this.io.request({
        //       type: EngineType.MIND_NOTE,
        //       data,
        //     });
        //   } else {
        //     response = await this.requestByhttp({
        //       type: EngineType.MIND_NOTE,
        //       data,
        //     });
        //   }
        //   /* 重试次数为0直接返回 */
        //   if (retry <= 0) {
        //     return response;
        //   }
        //   /* 满足错误码，则进行重试 */
        //   if (response.code === StatusCode.SERVICE_ERROR
        //     || response.code === StatusCode.SERVER_BUSY
        //     || response.data.code === StatusCode.SERVICE_ERROR
        //     || response.data.code === StatusCode.SERVER_BUSY
        //     || response.data.code === StatusCode.DATABASE_CONFLICT) {
        //     /**
        //      * 睡眠
        //      * @description 睡眠时间 = 基数 / 剩余重试次数
        //      * @example 例如剩余重试三次，睡眠 3 / 3 = 1s，剩余重试一次，睡眠 3 / 1 = 3s.
        //      */
        //     await sleep((3 / retry) * 1000);
        //     return this.autoRetryRequest(data, Channel.http, retry - 1);
        //   }
        //   return response;
        // }
        /**
         * 自动重试请求
         * @param data 请求数据
         * @param channel 请求通道
         * @param retry 重试次数
         * @throws {IError} 网络出错则抛出异常
         * @description Pandora 中有些错误码是需要自动重试的，这里枚举了所有需要重试的错误码进行重试操作
         */

    }, {
        key: 'autoRetryRequest',
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(data) {
                var channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _io.Channel.http;
                var retry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;
                var response;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                response = void 0;
                                _context4.prev = 1;

                                if (!(channel === _io.Channel.socket)) {
                                    _context4.next = 8;
                                    break;
                                }

                                _context4.next = 5;
                                return this.io.request({
                                    type: _types.EngineType.MIND_NOTE,
                                    data: data
                                });

                            case 5:
                                response = _context4.sent;
                                _context4.next = 11;
                                break;

                            case 8:
                                _context4.next = 10;
                                return this.requestByhttp({
                                    type: _types.EngineType.MIND_NOTE,
                                    data: data
                                });

                            case 10:
                                response = _context4.sent;

                            case 11:
                                if (!(retry <= 0)) {
                                    _context4.next = 13;
                                    break;
                                }

                                return _context4.abrupt('return', response);

                            case 13:
                                if (!(response.code === _types.StatusCode.SERVICE_ERROR || response.code === _types.StatusCode.SERVER_BUSY || response.data.code === _types.StatusCode.SERVICE_ERROR || response.data.code === _types.StatusCode.SERVER_BUSY || response.data.code === _types.StatusCode.DATABASE_CONFLICT)) {
                                    _context4.next = 17;
                                    break;
                                }

                                _context4.next = 16;
                                return (0, _async.sleep)(3 / retry * 1000);

                            case 16:
                                return _context4.abrupt('return', this.autoRetryRequest(data, _io.Channel.http, retry - 1));

                            case 17:
                                _context4.next = 26;
                                break;

                            case 19:
                                _context4.prev = 19;
                                _context4.t0 = _context4['catch'](1);

                                if (!(retry <= 0)) {
                                    _context4.next = 23;
                                    break;
                                }

                                throw new MError(_error.ErrorType.UNKNOWN, _types.StatusCode.FAILED, '', _context4.t0);

                            case 23:
                                _context4.next = 25;
                                return (0, _async.sleep)(3 / retry * 1000);

                            case 25:
                                return _context4.abrupt('return', this.autoRetryRequest(data, _io.Channel.http, retry - 1));

                            case 26:
                                return _context4.abrupt('return', response);

                            case 27:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this, [[1, 19]]);
            }));

            function autoRetryRequest(_x3) {
                return _ref4.apply(this, arguments);
            }

            return autoRetryRequest;
        }()
        /**
         * 冲洗缓冲区和缓存区，检查当前缓存的 op 状态，并发送给服务端
         * @description 注意 flush 操作中如果要修改逻辑则一定要确认不会被 throttle 影响，目前 flush 操作一定是保证上一次
         * flush 完成时才会触发第二次逻辑，所以 throttle 本身不会影响 flush
         * @async
         */

    }, {
        key: 'flush',
        value: function () {
            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
                var userChangeRequest, data;
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                if (!(this.changesetQueue.length > 0 && this.readyState === ReadyState.READY)) {
                                    _context5.next = 11;
                                    break;
                                }

                                /* 更新状态 */
                                this.readyState = ReadyState.SUBMITTING;
                                /* 派发事件 */
                                this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.SAVING);
                                this.changesetCache = this.changesetQueue;
                                this.changesetQueue = [];
                                /* 发送消息 */
                                userChangeRequest = {
                                    type: _types.MessageType.USER_CHANGES,
                                    token: this.props.objToken,
                                    operations: (0, _cloneDeep3.default)(this.changesetCache),
                                    version: this.version
                                };
                                /* 提交 changeset 打点 */

                                try {
                                    (0, _tea2.default)('client_file_edit', {});
                                } catch (error) {
                                    console.warn(error);
                                }
                                _context5.next = 9;
                                return this.request(userChangeRequest, _io.Channel.socket);

                            case 9:
                                data = _context5.sent;

                                /* 若版本号连续，则接受 */
                                if (data.version === this.version + 1) {
                                    this.accept();
                                    /* 若版本号超出，则拉取缺失的changeset */
                                } else if (data.version > this.version + 1) {
                                    this.fetchMissChangsets(this.version + 1, data.version);
                                }

                            case 11:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function flush() {
                return _ref5.apply(this, arguments);
            }

            return flush;
        }()
        /**
         * 成功收到 ACK
         */

    }, {
        key: 'accept',
        value: function accept() {
            /* 更新状态 */
            this.readyState = ReadyState.READY;
            /* 派发事件 */
            this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.SAVED);
            /* 清空缓存队列 */
            this.changesetCache = [];
            /* 版本+1 */
            this.version = this.version + 1;
            /* 更新心跳版本 */
            this.syncEngineBaseRev(this.version);
            /* 接收后继续尝试冲洗 */
            this.flush();
        }
        /**
         * 转换 ops
         * @param localOps 客户端产生的 ops
         * @param serverOps 服务端发来的 ops
         * @description
         * server = apply(apply(initial, serverOps), transform(localOps, serverOps, left))
         * local = apply(apply(initial, localOps), transform(serverOps, localOps, right))
         * 最终, server === local
         * 即:
         * applyToServer = transform(localOps, serverOps, left)
         * applyToLocal = transform(serverOps, localOps, right)
         */

    }, {
        key: 'transform',
        value: function transform(localOps, serverOps) {
            try {
                return {
                    /**
                     * 要在远端运用的 ops
                     */
                    applyToServer: _bytedOtJson2.default.transform(localOps, serverOps, _bytedOtJson.TransformType.LEFT),
                    /**
                     * 要在本地运用的 ops
                     */
                    applyToLocal: _bytedOtJson2.default.transform(serverOps, localOps, _bytedOtJson.TransformType.RIGHT)
                };
            } catch (err) {
                // 统计 transform 失败次数
                _moirae2.default.count(_moirae3.MoiraeKeys.TRANSFORM_FAILED);
                _moirae2.default.ravenCatch(err);
                this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.ERROR, {
                    type: _error.ErrorType.COLLABORATION_ERROR,
                    code: _error.ClientErrorCode.TRANSFORM_FAILED
                });
                throw err;
            }
        }
        /**
         * 应用一组 Changeset
         * @param ops 应用的 ops
         */

    }, {
        key: 'apply',
        value: function apply(ops) {
            var serverOps = ops;
            // 转换 cache ops
            var res = this.transform(this.changesetCache, serverOps);
            this.changesetCache = res.applyToServer;
            serverOps = res.applyToLocal;
            // 转换 queue ops
            res = this.transform(this.changesetQueue, serverOps);
            this.changesetQueue = res.applyToServer;
            serverOps = res.applyToLocal;
            /* 抛出change事件 */
            this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.CHANGE_SERVER, serverOps);
            /* 版本+1 */
            this.version = this.version + 1;
            /* 更新心跳版本 */
            this.syncEngineBaseRev(this.version);
        }
        /**
         * 更新 engine_channel 心跳版本
         * @param revision 新版本号
         */

    }, {
        key: 'syncEngineBaseRev',
        value: function syncEngineBaseRev(revision) {
            this.syncBaseRev(_types.MessageChannel.ENGINE_CHANNEL, revision);
        }
        /**
         * 更新 member_channel 心跳版本
         * @param revision 新版本号
         */

    }, {
        key: 'syncMemberBaseRev',
        value: function syncMemberBaseRev(revision) {
            var _entity = this.entity,
                type = _entity.type,
                token = _entity.token;

            var entityHeartbeat = this.io.getHeartbeatInfo(type, token) || {};
            var memberHeartBeat = entityHeartbeat.member_channel;
            if (!memberHeartBeat) return;
            var curVersion = memberHeartBeat.version;
            var nextVersion = curVersion + 1;
            if (revision === nextVersion) {
                this.syncBaseRev(_types.MessageChannel.MEMBER_CHANNEL, revision);
                return;
            }
            /**
             * 人数超过 150 人，就延后到心跳时去拉
             * 避免出现极端情况下频繁拉取，把后台拉挂
             */
            var members = (0, _memberHelper.getSuiteMembers)(type, token);
            if (revision > nextVersion && members.length < 150) {
                this.fetchRoomMembers();
            }
        }
        /**
         * 更新 channel 心跳版本
         * @param channel channel
         * @param revision 新版本号
         */

    }, {
        key: 'syncBaseRev',
        value: function syncBaseRev(channel, revision) {
            /* 未收到ClientVar，且版本不是初始化标志版本，则不更新 */
            if (!this.receivedClientVars && revision !== -1) {
                return;
            }
            var _entity2 = this.entity,
                type = _entity2.type,
                token = _entity2.token;

            this.io.setHeartbeatVersion({ type: type, token: token }, channel, revision);
        }
        /**
         * 获取房间成员
         * @async
         */

    }, {
        key: 'fetchRoomMembers',
        value: function () {
            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
                var data, response, users, members;
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                _context6.prev = 0;
                                data = {
                                    type: _types.MessageType.MESSAGE_CHANNEL,
                                    name: _types.MessageChannel.MEMBER_CHANNEL,
                                    token: this.props.objToken
                                };
                                /* 异步获取 */

                                _context6.next = 4;
                                return this.request(data);

                            case 4:
                                response = _context6.sent;
                                users = response.entities.users;
                                /* 后端返回的 member 数据不一致，这里要把数据 merge 一下 */

                                members = (0, _map3.default)(response.members, function (memberInfo) {
                                    return Object.assign({}, memberInfo, users[memberInfo.user_id]);
                                });
                                /* 这里会交给 member 相关的 action 处理 */

                                (0, _memberHelper.handleMembersMessage)(MEMBER_TYPE, {
                                    token: response.token,
                                    members: members
                                });
                                /* 更新心跳版本 */
                                this.syncBaseRev(_types.MessageChannel.MEMBER_CHANNEL, response.version);
                                _context6.next = 15;
                                break;

                            case 11:
                                _context6.prev = 11;
                                _context6.t0 = _context6['catch'](0);

                                this.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.ERROR, {
                                    type: _error.ErrorType.RESPONSE_ERROR,
                                    code: _types.StatusCode.FAILED
                                });
                                console.error(_context6.t0);

                            case 15:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this, [[0, 11]]);
            }));

            function fetchRoomMembers() {
                return _ref6.apply(this, arguments);
            }

            return fetchRoomMembers;
        }()
        /**
         * 拉取缺失的 Changesets
         * @param from 起始版本，起始版本应该为当前 version + 1
         * @param to 终止版本
         * @description 默认我们在调用中，拉取的 ops 中的 version 最小值应该不大于当前的 version + 1
         * @async
         */

    }, {
        key: 'fetchMissChangsets',
        value: function () {
            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(from, to) {
                var _this2 = this;

                var data, response;
                return _regenerator2.default.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                data = {
                                    type: _types.MessageType.NEW_CHANGES,
                                    token: this.props.objToken,
                                    rev_list: [from + '-' + to]
                                };
                                // 打点统计 fetch miss 次数

                                _moirae2.default.count(_moirae3.MoiraeKeys.FETCH_MISS_CHANGESET);
                                _context7.next = 4;
                                return this.request(data);

                            case 4:
                                response = _context7.sent;

                                /* 应用 changesets */
                                (0, _forEach3.default)(response.ops, function (changeset) {
                                    if (changeset.version === _this2.version + 1) {
                                        /* 有逻辑的操作全部转成string，防止number与string不兼容 */
                                        if (changeset.member_id + '' === _this2.getMemberId() + '') {
                                            /* 接收ACK */
                                            _this2.accept();
                                        } else {
                                            _this2.apply(changeset.operations || []);
                                        }
                                    }
                                });

                            case 6:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));

            function fetchMissChangsets(_x6, _x7) {
                return _ref7.apply(this, arguments);
            }

            return fetchMissChangsets;
        }()
    }]);
    return Sync;
}();

exports.default = Sync;

/***/ }),

/***/ 3624:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _baseUnset_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(597);


/**
 * Removes the property at `path` of `object`.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
 * _.unset(object, 'a[0].b.c');
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 *
 * _.unset(object, ['a', '0', 'b', 'c']);
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 */
function unset(object, path) {
  return object == null ? true : Object(_baseUnset_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(object, path);
}

/* harmony default export */ __webpack_exports__["default"] = (unset);


/***/ }),

/***/ 3625:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(1719)
exports.createHash = exports.Hash = __webpack_require__(1747)
exports.createHmac = exports.Hmac = __webpack_require__(2204)

var algos = __webpack_require__(3641)
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = __webpack_require__(2207)
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = __webpack_require__(3643)

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = __webpack_require__(3660)

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = __webpack_require__(3665)

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = __webpack_require__(3703)

var publicEncrypt = __webpack_require__(3704)

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = __webpack_require__(3707)

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}


/***/ }),

/***/ 3626:
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ 3627:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3628:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__(1587).Buffer;
var util = __webpack_require__(3629);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),

/***/ 3629:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3630:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(71)))

/***/ }),

/***/ 3631:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(2201);

/*<replacement>*/
var util = __webpack_require__(1748);
util.inherits = __webpack_require__(1585);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ 3632:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1924);


/***/ }),

/***/ 3633:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1696);


/***/ }),

/***/ 3634:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1923).Transform


/***/ }),

/***/ 3635:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1923).PassThrough


/***/ }),

/***/ 3636:
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = __webpack_require__(1585)
var Hash = __webpack_require__(1720)
var Buffer = __webpack_require__(1587).Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


/***/ }),

/***/ 3637:
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__(1585)
var Hash = __webpack_require__(1720)
var Buffer = __webpack_require__(1587).Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1


/***/ }),

/***/ 3638:
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(1585)
var Sha256 = __webpack_require__(2202)
var Hash = __webpack_require__(1720)
var Buffer = __webpack_require__(1587).Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224


/***/ }),

/***/ 3639:
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1585)
var SHA512 = __webpack_require__(2203)
var Hash = __webpack_require__(1720)
var Buffer = __webpack_require__(1587).Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384


/***/ }),

/***/ 3640:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(1585)
var Buffer = __webpack_require__(1587).Buffer

var Base = __webpack_require__(1680)

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac


/***/ }),

/***/ 3641:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2206)


/***/ }),

/***/ 3642:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {var checkParameters = __webpack_require__(2208)
var defaultEncoding = __webpack_require__(2209)
var sync = __webpack_require__(2210)
var Buffer = __webpack_require__(1587).Buffer

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}

function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }

  checkParameters(password, salt, iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(71), __webpack_require__(221)))

/***/ }),

/***/ 3643:
/***/ (function(module, exports, __webpack_require__) {

var DES = __webpack_require__(3644)
var aes = __webpack_require__(1928)
var aesModes = __webpack_require__(1929)
var desModes = __webpack_require__(3659)
var ebtk = __webpack_require__(1816)

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),

/***/ 3644:
/***/ (function(module, exports, __webpack_require__) {

var CipherBase = __webpack_require__(1680)
var des = __webpack_require__(1927)
var inherits = __webpack_require__(1585)
var Buffer = __webpack_require__(1587).Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}


/***/ }),

/***/ 3645:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};


/***/ }),

/***/ 3646:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(1638);

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};


/***/ }),

/***/ 3647:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(1638);
var inherits = __webpack_require__(1585);

var des = __webpack_require__(1927);
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};


/***/ }),

/***/ 3648:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(1638);
var inherits = __webpack_require__(1585);

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};


/***/ }),

/***/ 3649:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(1638);
var inherits = __webpack_require__(1585);

var des = __webpack_require__(1927);
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;


/***/ }),

/***/ 3650:
/***/ (function(module, exports, __webpack_require__) {

var MODES = __webpack_require__(1929)
var AuthCipher = __webpack_require__(2214)
var Buffer = __webpack_require__(1587).Buffer
var StreamCipher = __webpack_require__(2215)
var Transform = __webpack_require__(1680)
var aes = __webpack_require__(1815)
var ebtk = __webpack_require__(1816)
var inherits = __webpack_require__(1585)

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher


/***/ }),

/***/ 3651:
/***/ (function(module, exports) {

exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}


/***/ }),

/***/ 3652:
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(1749)

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}


/***/ }),

/***/ 3653:
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1587).Buffer
var xor = __webpack_require__(1749)

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}


/***/ }),

/***/ 3654:
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1587).Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),

/***/ 3655:
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1587).Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),

/***/ 3656:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(1749)

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(741).Buffer))

/***/ }),

/***/ 3657:
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1587).Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH


/***/ }),

/***/ 3658:
/***/ (function(module, exports, __webpack_require__) {

var AuthCipher = __webpack_require__(2214)
var Buffer = __webpack_require__(1587).Buffer
var MODES = __webpack_require__(1929)
var StreamCipher = __webpack_require__(2215)
var Transform = __webpack_require__(1680)
var aes = __webpack_require__(1815)
var ebtk = __webpack_require__(1816)
var inherits = __webpack_require__(1585)

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv


/***/ }),

/***/ 3659:
/***/ (function(module, exports) {

exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}


/***/ }),

/***/ 3660:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var generatePrime = __webpack_require__(2216)
var primes = __webpack_require__(3663)

var DH = __webpack_require__(3664)

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(741).Buffer))

/***/ }),

/***/ 3661:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3662:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3663:
/***/ (function(module) {

module.exports = {"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}};

/***/ }),

/***/ 3664:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var BN = __webpack_require__(1604);
var MillerRabin = __webpack_require__(2217);
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = __webpack_require__(2216);
var randomBytes = __webpack_require__(1719);
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(741).Buffer))

/***/ }),

/***/ 3665:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(1747)
var stream = __webpack_require__(1922)
var inherits = __webpack_require__(1585)
var sign = __webpack_require__(3666)
var verify = __webpack_require__(3702)

var algorithms = __webpack_require__(2206)
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(741).Buffer))

/***/ }),

/***/ 3666:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = __webpack_require__(2204)
var crt = __webpack_require__(1930)
var EC = __webpack_require__(1626).ec
var BN = __webpack_require__(1604)
var parseKeys = __webpack_require__(1818)
var curves = __webpack_require__(2227)

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [ 0 ].concat(r)
  if (s[0] & 0x80) s = [ 0 ].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([ zeros, x ])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([ zeros, out ])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = new Buffer(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([ t, kv.v ])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(741).Buffer))

/***/ }),

/***/ 3667:
/***/ (function(module) {

module.exports = {"name":"elliptic","version":"6.4.1","description":"EC cryptography","main":"lib/elliptic.js","files":["lib"],"scripts":{"jscs":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","jshint":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","lint":"npm run jscs && npm run jshint","unit":"istanbul test _mocha --reporter=spec test/index.js","test":"npm run lint && npm run unit","version":"grunt dist && git add dist/"},"repository":{"type":"git","url":"git@github.com:indutny/elliptic"},"keywords":["EC","Elliptic","curve","Cryptography"],"author":"Fedor Indutny <fedor@indutny.com>","license":"MIT","bugs":{"url":"https://github.com/indutny/elliptic/issues"},"homepage":"https://github.com/indutny/elliptic","devDependencies":{"brfs":"^1.4.3","coveralls":"^2.11.3","grunt":"^0.4.5","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^8.6.2","istanbul":"^0.4.2","jscs":"^2.9.0","jshint":"^2.6.0","mocha":"^2.1.0"},"dependencies":{"bn.js":"^4.4.0","brorand":"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0","inherits":"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"}};

/***/ }),

/***/ 3668:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;
var BN = __webpack_require__(1604);
var minAssert = __webpack_require__(1638);
var minUtils = __webpack_require__(2219);

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;



/***/ }),

/***/ 3669:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(1604);
var elliptic = __webpack_require__(1626);
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};


/***/ }),

/***/ 3670:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(1817);
var elliptic = __webpack_require__(1626);
var BN = __webpack_require__(1604);
var inherits = __webpack_require__(1585);
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};


/***/ }),

/***/ 3671:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(1817);
var BN = __webpack_require__(1604);
var inherits = __webpack_require__(1585);
var Base = curve.base;

var elliptic = __webpack_require__(1626);
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};


/***/ }),

/***/ 3672:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(1817);
var elliptic = __webpack_require__(1626);
var BN = __webpack_require__(1604);
var inherits = __webpack_require__(1585);
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;


/***/ }),

/***/ 3673:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__(1931);
var elliptic = __webpack_require__(1626);

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = __webpack_require__(3680);
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});


/***/ }),

/***/ 3674:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.sha1 = __webpack_require__(3675);
exports.sha224 = __webpack_require__(3676);
exports.sha256 = __webpack_require__(2221);
exports.sha384 = __webpack_require__(3677);
exports.sha512 = __webpack_require__(2222);


/***/ }),

/***/ 3675:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1649);
var common = __webpack_require__(1750);
var shaCommon = __webpack_require__(2220);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),

/***/ 3676:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1649);
var SHA256 = __webpack_require__(2221);

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};



/***/ }),

/***/ 3677:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1649);

var SHA512 = __webpack_require__(2222);

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};


/***/ }),

/***/ 3678:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1649);
var common = __webpack_require__(1750);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];


/***/ }),

/***/ 3679:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1649);
var assert = __webpack_require__(1638);

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};


/***/ }),

/***/ 3680:
/***/ (function(module, exports) {

module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};


/***/ }),

/***/ 3681:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(1604);
var HmacDRBG = __webpack_require__(3682);
var elliptic = __webpack_require__(1626);
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = __webpack_require__(3683);
var Signature = __webpack_require__(3684);

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};


/***/ }),

/***/ 3682:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(1931);
var utils = __webpack_require__(2219);
var assert = __webpack_require__(1638);

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};


/***/ }),

/***/ 3683:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(1604);
var elliptic = __webpack_require__(1626);
var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};


/***/ }),

/***/ 3684:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(1604);

var elliptic = __webpack_require__(1626);
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};


/***/ }),

/***/ 3685:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(1931);
var elliptic = __webpack_require__(1626);
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = __webpack_require__(3686);
var Signature = __webpack_require__(3687);

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};


/***/ }),

/***/ 3686:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = __webpack_require__(1626);
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;


/***/ }),

/***/ 3687:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(1604);
var elliptic = __webpack_require__(1626);
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;


/***/ }),

/***/ 3688:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.


var asn1 = __webpack_require__(1751)

exports.certificate = __webpack_require__(3699)

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})


/***/ }),

/***/ 3689:
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__(1751);
var inherits = __webpack_require__(1585);

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = __webpack_require__(3690).runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};


/***/ }),

/***/ 3690:
/***/ (function(module, exports, __webpack_require__) {

var indexOf = __webpack_require__(3691);

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};


/***/ }),

/***/ 3691:
/***/ (function(module, exports) {


var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ }),

/***/ 3692:
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1585);

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};


/***/ }),

/***/ 3693:
/***/ (function(module, exports, __webpack_require__) {

var Reporter = __webpack_require__(1752).Reporter;
var EncoderBuffer = __webpack_require__(1752).EncoderBuffer;
var DecoderBuffer = __webpack_require__(1752).DecoderBuffer;
var assert = __webpack_require__(1638);

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};


/***/ }),

/***/ 3694:
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__(2224);

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);


/***/ }),

/***/ 3695:
/***/ (function(module, exports, __webpack_require__) {

var decoders = exports;

decoders.der = __webpack_require__(2225);
decoders.pem = __webpack_require__(3696);


/***/ }),

/***/ 3696:
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1585);
var Buffer = __webpack_require__(741).Buffer;

var DERDecoder = __webpack_require__(2225);

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};


/***/ }),

/***/ 3697:
/***/ (function(module, exports, __webpack_require__) {

var encoders = exports;

encoders.der = __webpack_require__(2226);
encoders.pem = __webpack_require__(3698);


/***/ }),

/***/ 3698:
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1585);

var DEREncoder = __webpack_require__(2226);

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};


/***/ }),

/***/ 3699:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen



var asn = __webpack_require__(1751)

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate


/***/ }),

/***/ 3700:
/***/ (function(module) {

module.exports = {"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"};

/***/ }),

/***/ 3701:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
var evp = __webpack_require__(1816)
var ciphers = __webpack_require__(1928)
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = new Buffer(match[2], 'hex')
    var cipherText = new Buffer(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(741).Buffer))

/***/ }),

/***/ 3702:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = __webpack_require__(1604)
var EC = __webpack_require__(1626).ec
var parseKeys = __webpack_require__(1818)
var curves = __webpack_require__(2227)

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = new Buffer(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(741).Buffer))

/***/ }),

/***/ 3703:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var elliptic = __webpack_require__(1626)
var BN = __webpack_require__(1604)

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(741).Buffer))

/***/ }),

/***/ 3704:
/***/ (function(module, exports, __webpack_require__) {

exports.publicEncrypt = __webpack_require__(3705)
exports.privateDecrypt = __webpack_require__(3706)

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}


/***/ }),

/***/ 3705:
/***/ (function(module, exports, __webpack_require__) {

var parseKeys = __webpack_require__(1818)
var randomBytes = __webpack_require__(1719)
var createHash = __webpack_require__(1747)
var mgf = __webpack_require__(2228)
var xor = __webpack_require__(2229)
var BN = __webpack_require__(1604)
var withPublic = __webpack_require__(2230)
var crt = __webpack_require__(1930)
var Buffer = __webpack_require__(1587).Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}


/***/ }),

/***/ 3706:
/***/ (function(module, exports, __webpack_require__) {

var parseKeys = __webpack_require__(1818)
var mgf = __webpack_require__(2228)
var xor = __webpack_require__(2229)
var BN = __webpack_require__(1604)
var crt = __webpack_require__(1930)
var createHash = __webpack_require__(1747)
var withPublic = __webpack_require__(2230)
var Buffer = __webpack_require__(1587).Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}


/***/ }),

/***/ 3707:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = __webpack_require__(1587)
var randombytes = __webpack_require__(1719)
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(71), __webpack_require__(221)))

/***/ }),

/***/ 3708:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sleep = sleep;
/**
 * 睡眠操作
 * @param 睡眠时间（单位：ms）
 */
function sleep(time) {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve();
        }, time);
    });
}

/***/ }),

/***/ 3709:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _baseAssignValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(138);
/* harmony import */ var _baseForOwn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(276);
/* harmony import */ var _baseIteratee_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79);




/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */
function mapValues(object, iteratee) {
  var result = {};
  iteratee = Object(_baseIteratee_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(iteratee, 3);

  Object(_baseForOwn_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(object, function(value, key, object) {
    Object(_baseAssignValue_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(result, key, iteratee(value, key, object));
  });
  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (mapValues);


/***/ }),

/***/ 3710:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(10);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(11);

var _inherits3 = _interopRequireDefault(_inherits2);

var _toConsumableArray2 = __webpack_require__(58);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _typeof2 = __webpack_require__(82);

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys2 = __webpack_require__(77);

var _keys3 = _interopRequireDefault(_keys2);

var _forEach2 = __webpack_require__(90);

var _forEach3 = _interopRequireDefault(_forEach2);

var _noop2 = __webpack_require__(304);

var _noop3 = _interopRequireDefault(_noop2);

var _cloneDeep2 = __webpack_require__(754);

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _isEqual2 = __webpack_require__(225);

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _values2 = __webpack_require__(212);

var _values3 = _interopRequireDefault(_values2);

var _react = __webpack_require__(1);

var React = _interopRequireWildcard(_react);

var _toolbarMap = __webpack_require__(3711);

var _debounce2 = __webpack_require__(556);

var _debounce3 = _interopRequireDefault(_debounce2);

var _eventEmitter = __webpack_require__(110);

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _browserHelper = __webpack_require__(27);

var _browserHelper2 = _interopRequireDefault(_browserHelper);

var _editor = __webpack_require__(1663);

var _undoPlugin = __webpack_require__(2257);

var _mindNoteContext = __webpack_require__(1777);

var _mindNoteContext2 = _interopRequireDefault(_mindNoteContext);

var _MindNoteContext = __webpack_require__(1671);

var _compatible = __webpack_require__(1819);

var _comment = __webpack_require__(1935);

var _$decorators = __webpack_require__(553);

var _teaLogger = __webpack_require__(450);

var _teaLogger2 = _interopRequireDefault(_teaLogger);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ToolBarList = [_toolbarMap.OUTDENT, _toolbarMap.INDENT, _toolbarMap.FINISH, _toolbarMap.NOTE, _toolbarMap.INSERT_IMAGE, {
    name: _toolbarMap.ATTRIBUTION,
    children: [_toolbarMap.BOLD, _toolbarMap.ITALIC, _toolbarMap.UNDERLINE, _toolbarMap.H1, _toolbarMap.H2, _toolbarMap.H3].concat((0, _toConsumableArray3.default)((0, _compatible.isHighlightEnabled)() ? [_toolbarMap.HIGHLIGHT] : []))
},
// 注意：mention 菜单在未开启 feature gating 时会被移除，看下面 👇
_toolbarMap.MENTION,
// 评论是否启用除了受 feature gating 控制还与文档评论权限有关
_toolbarMap.COMMENT, _toolbarMap.UNDO, _toolbarMap.REDO, _toolbarMap.DELETE];
/**
 * 开启/关闭 @
 */
if (!(0, _compatible.isMentionEnabled)()) {
    ToolBarList.splice(ToolBarList.indexOf(_toolbarMap.MENTION), 1);
}
if (!(0, _compatible.isCommentEnabled)()) {
    ToolBarList.splice(ToolBarList.indexOf(_toolbarMap.COMMENT), 1);
}

var AppBottomToolbar = function (_React$Component) {
    (0, _inherits3.default)(AppBottomToolbar, _React$Component);

    function AppBottomToolbar(props) {
        (0, _classCallCheck3.default)(this, AppBottomToolbar);

        var _this = (0, _possibleConstructorReturn3.default)(this, (AppBottomToolbar.__proto__ || Object.getPrototypeOf(AppBottomToolbar)).call(this, props));

        _this.mindNoteContext = _mindNoteContext2.default.getInstance();
        /**
         * 当前键盘是否唤起
         */
        _this.activeKeyBoard = false;
        _this.setInit = function () {
            var initToolBarList = ToolBarList.map(function (item) {
                var newItem = {
                    id: item.name || item,
                    enable: true
                };
                if (item.children) {
                    newItem.children = item.children.map(function (item) {
                        var childItem = {
                            id: item,
                            selected: false,
                            enable: true
                        };
                        // 高亮加上选项列表
                        if (childItem.id === _toolbarMap.HIGHLIGHT) {
                            childItem.list = (0, _values3.default)(_editor.HighlightColorMap);
                        }
                        return childItem;
                    });
                }
                return newItem;
            });
            _this.toolState = {
                toolBarList: [].concat((0, _toConsumableArray3.default)(initToolBarList)),
                newToolBarList: [].concat((0, _toConsumableArray3.default)(initToolBarList)),
                commentEnabled: (0, _compatible.isMentionEnabled)()
            };
        };
        _this.setToolbar = function (items) {
            var needChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if ((0, _isEqual3.default)(items, _this.toolState.newToolBarList)) {
                return;
            }
            if (needChange) {
                _this.toolState.newToolBarList = items;
            }
            window.lark.biz.navigation.setMindnoteToolbar({
                items: items,
                onSuccess: _this.handleClickItem
            });
        };
        /**
         * 监听键盘的唤起和收回事件
         */
        _this.watchKeyboard = function (e) {
            // menuEvent事件无需处理, 而且它会导致全选节点时键盘收起
            if (e.keyboardType === 'menuEvent') {
                return;
            }
            if (!e.isOpenKeyboard || e.keyboardType !== 'editor') {
                // 收起键盘
                window._currentViewHeight = window.innerHeight; // 恢复当前webview可视区域的高度
                _this.editor.containerWrap.classList.remove('activeKeyBoard');
                _this.editor.executeEditAction({
                    action: _editor.EditActions.BLUR
                });
                _this.setToolbar([], true);
                _this.activeKeyBoard = false;
            } else {
                // 弹出键盘
                window._currentViewHeight = e.innerHeight; // 保存当前webview可视区域的高度
                if (_browserHelper2.default.isAndroid) {
                    // 解决文字在底部的时候，键盘挡住的问题；
                    _this.editor.containerWrap.classList.add('activeKeyBoard');
                    _this.editor.nativeplugins.scrollToView.toScroll();
                }
                _this.activeKeyBoard = true;
            }
        };
        /**
         * 编辑器焦点变动时触发工具栏换出
         */
        _this.handleToolBarStatusChange = function (e) {
            // 控制显示什么图标
            var toolBarList = _this.toolState.toolBarList;

            var focusNodeState = _this.editor.getFocusNode();
            var newToolBarList = [];
            toolBarList.forEach(function (item) {
                var newItem = Object.assign({}, item);
                if (newItem.id === _toolbarMap.UNDO) {
                    newItem.enable = _this.undoPlugin.getUndoStackSize() > 0;
                } else if (newItem.id === _toolbarMap.REDO) {
                    newItem.enable = _this.undoPlugin.getRedoStackSize() > 0;
                } else if (newItem.id === _toolbarMap.MENTION && e.type !== 'title') {
                    newItem.enable = true;
                } else if (newItem.id === _toolbarMap.COMMENT && e.type === 'content') {
                    if (_this.toolState.commentEnabled) {
                        newItem.enable = true;
                    } else {
                        return;
                    }
                } else if (e.type === 'content') {
                    _this.changeItemState(newItem, focusNodeState);
                } else {
                    return;
                }
                if (newItem.children) {
                    newItem.children = newItem.children.map(function (childrenItem) {
                        var newChildrenItem = Object.assign({}, childrenItem);
                        _this.changeItemState(newChildrenItem, focusNodeState);
                        return newChildrenItem;
                    });
                }
                newToolBarList.push(newItem);
            });
            _this.setToolbar(newToolBarList, true);
        };
        /**
         * undo/redo栈状态变化
         */
        _this.handleUndoStackChange = function () {
            _this.toChangeToolbar();
        };
        /**
         * 权限变化
         */
        _this.handlePermissionChange = function (permission) {
            /* 权限变更时收起工具栏 */
            if (!permission.editable) {
                _this.watchKeyboard({ isOpenKeyboard: 0 });
            }
        };
        /**
         * 工具栏 action 执行后改变工具栏状态
         */
        _this.toChangeToolbar = function () {
            if (!_this.activeKeyBoard) {
                return;
            }
            var newToolBarList = [];
            var focusNodeState = _this.editor.getFocusNode();
            _this.toolState.newToolBarList.forEach(function (item) {
                var newItem = (0, _cloneDeep3.default)(item);
                switch (newItem.id) {
                    case _toolbarMap.UNDO:
                        newItem.enable = _this.undoPlugin.getUndoStackSize() > 0;
                        break;
                    case _toolbarMap.REDO:
                        newItem.enable = _this.undoPlugin.getRedoStackSize() > 0;
                        break;
                    case _toolbarMap.MENTION:
                        newItem.enable = true;
                        break;
                    case _toolbarMap.COMMENT:
                        newItem.enable = true;
                        break;
                    default:
                        _this.changeItemState(newItem, focusNodeState);
                        break;
                }
                if (newItem.children) {
                    newItem.children.forEach(function (childrenItem) {
                        _this.changeItemState(childrenItem, focusNodeState);
                    });
                }
                return newToolBarList.push(newItem);
            });
            _this.setToolbar(newToolBarList, true);
            _this.toolState.newToolBarList = newToolBarList;
        };
        /**
         * 根据节点的状态来修改工具项
         */
        _this.changeItemState = function (newItem, focusNodeState) {
            /* 如果没有 focus 节点 */
            if (!focusNodeState) {
                newItem.enable = false;
                newItem.selected = false;
                return;
            }
            newItem.enable = true;
            switch (newItem.id) {
                case _toolbarMap.BOLD:
                case _toolbarMap.ITALIC:
                case _toolbarMap.UNDERLINE:
                    newItem.selected = focusNodeState[newItem.id];
                    break;
                case _toolbarMap.INDENT:
                    newItem.enable = !!focusNodeState.canIndent;
                    break;
                case _toolbarMap.OUTDENT:
                    newItem.enable = !!focusNodeState.canOutdent;
                    break;
                case _toolbarMap.H1:
                case _toolbarMap.H2:
                case _toolbarMap.H3:
                    newItem.selected = false;
                    if ((focusNodeState.node && focusNodeState.node.heading) === _toolbarMap.TOOLBARMAP[newItem.id].value) {
                        newItem.selected = true;
                    }
                    break;
                case _toolbarMap.HIGHLIGHT:
                    newItem.selected = false;
                    // value 是颜色值
                    newItem.value = focusNodeState.node && focusNodeState.node.highlight ? _editor.HighlightColorMap[focusNodeState.node.highlight] || '' : '';
                    break;
            }
        };
        _this.editor = props.editor;
        _this.undoPlugin = _this.editor.nativeplugins.undoPlugin;
        _this.imageUploader = _this.editor.nativeplugins.imageUpload;
        _this.setInit();
        _this.handleToolBarStatusChange = (0, _debounce3.default)(_this.handleToolBarStatusChange, 10, { leading: false, trailing: true });
        _this.watchKeyboard = (0, _debounce3.default)(_this.watchKeyboard, 200, { leading: false, trailing: true });
        return _this;
    }

    (0, _createClass3.default)(AppBottomToolbar, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            this.editor.addEventListener(_editor.MindNoteEvent.INPUT_FOCUS, this.handleToolBarStatusChange);
            this.undoPlugin.addEventListener(_undoPlugin.UndoEvent.STACK_CHANGE, this.handleUndoStackChange);
            this.mindNoteContext.bind(_MindNoteContext.MindNoteEvent.PERMISSION_CHANGE, this.handlePermissionChange);
            _eventEmitter2.default.on('onKeyboard', this.watchKeyboard);
            window.lark.biz.util.onKeyboardChanged(this.watchKeyboard);
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            this.editor.removeEventListener(_editor.MindNoteEvent.INPUT_FOCUS, this.handleToolBarStatusChange);
            this.undoPlugin.removeEventListener(_undoPlugin.UndoEvent.STACK_CHANGE, this.handleUndoStackChange);
            this.mindNoteContext.unbind(_MindNoteContext.MindNoteEvent.PERMISSION_CHANGE, this.handlePermissionChange);
            _eventEmitter2.default.off('onKeyboard', this.watchKeyboard);
            window.lark.biz.util.onKeyboardChanged(_noop3.default);
        }
        /**
         * 设置文档评论权限
         */

    }, {
        key: "setCommentPermission",
        value: function setCommentPermission(enabled) {
            this.toolState.commentEnabled = (0, _compatible.isCommentEnabled)() && enabled;
        }
    }, {
        key: "triggerUndo",
        value: function triggerUndo(type) {
            var _this2 = this;

            var actions = null;
            if (type === 'undo') {
                actions = this.undoPlugin.undo();
            } else if (type === 'redo') {
                actions = this.undoPlugin.redo();
            }
            /* undo/redo 应用后发送 changeset */
            if (actions) {
                (0, _forEach3.default)(actions, function (_ref) {
                    var ops = _ref.ops;

                    if (ops && ops.length > 0) {
                        _this2.mindNoteContext.trigger(_MindNoteContext.MindNoteEvent.CHANGE_CLIENT, ops);
                    }
                });
            }
        }
        /**
         * 工具栏点击回调
         */

    }, {
        key: "handleClickItem",
        value: function handleClickItem(data) {
            if (_toolbarMap.TOOLBARMAP[data.id]) {
                switch (data.id) {
                    case _toolbarMap.UNDO:
                        this.triggerUndo('undo');
                        break;
                    case _toolbarMap.REDO:
                        this.triggerUndo('redo');
                        break;
                    case _toolbarMap.INSERT_IMAGE:
                        this.imageUploader.setFocusNode(); // 解决进入选择相册图片的时候，focus节点丢失问题
                        break;
                    case _toolbarMap.COMMENT:
                        if (this.props.onClickComment) {
                            this.props.onClickComment(_comment.ActiveCommentSources.OUTLINE_TOOLBAR);
                        }
                        break;
                    default:
                        break;
                }
                var action = typeof _toolbarMap.TOOLBARMAP[data.id] === 'string' ? _toolbarMap.TOOLBARMAP[data.id] : _toolbarMap.TOOLBARMAP[data.id]['action'];
                var value = _toolbarMap.TOOLBARMAP[data.id].value;
                // 把高亮颜色值转为颜色名称
                if (data.id === _toolbarMap.HIGHLIGHT) {
                    value = (0, _keys3.default)(_editor.HighlightColorMap).find(function (colorType) {
                        return _editor.HighlightColorMap[colorType] === data.value;
                    });
                }
                this.editor.executeEditAction({
                    action: action,
                    value: value
                });
            }
        }
    }, {
        key: "render",
        value: function render() {
            return null;
        }
    }]);
    return AppBottomToolbar;
}(React.Component);

exports.default = AppBottomToolbar;

__decorate([(0, _$decorators.Bind)(), (0, _teaLogger2.default)('toggle_attribute', function (_ref2, type) {
    var context = _ref2.context,
        store = _ref2.store;

    return {
        action: type,
        attr_op_status: 'effective',
        eventType: 'mouseclick',
        source: 'outline_toolbar',
        mode: 'outline',
        view_level: _editor.teaUtils.getCurrentLevel(),
        select_type: _editor.teaUtils.getCurrentSelectType()
    };
})], AppBottomToolbar.prototype, "triggerUndo", null);
__decorate([(0, _$decorators.Bind)(), (0, _teaLogger2.default)('toggle_attribute', function (_ref3, data) {
    var context = _ref3.context,
        store = _ref3.store;

    if (data.id === _toolbarMap.INSERT_IMAGE) {
        return {
            action: 'add_image',
            attr_op_status: 'effective',
            eventType: 'mouseclick',
            source: 'outline_toolbar',
            mode: 'outline',
            view_level: _editor.teaUtils.getCurrentLevel(),
            select_type: _editor.teaUtils.getCurrentSelectType()
        };
    }
})], AppBottomToolbar.prototype, "handleClickItem", null);

/***/ }),

/***/ 3711:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TOOLBARMAP = exports.INLINE_CODE = exports.CODELIST = exports.UNORDEREDLIST = exports.ORDEREDLIST = exports.CHECKBOX = exports.ALIGNRIGHT = exports.ALIGNCENTER = exports.ALIGNLEFT = exports.INSERTSEPARATOR = exports.BLOCKQUOTE = exports.HIGHLIGHT = exports.STRIKETHROUGH = exports.UNDERLINE = exports.ITALIC = exports.BOLD = exports.H3 = exports.H2 = exports.H1 = exports.NOTE = exports.OUTDENT = exports.INDENT = exports.DELETE = exports.FINISH = exports.REDO = exports.UNDO = exports.COMMENT = exports.MENTION = exports.INSERT_IMAGE = exports.ATTRIBUTION = undefined;

var _defineProperty2 = __webpack_require__(9);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _TOOLBARMAP;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 一级菜单
var ATTRIBUTION = exports.ATTRIBUTION = 'mnAttribute';
var INSERT_IMAGE = exports.INSERT_IMAGE = 'insertImage';
var MENTION = exports.MENTION = 'mention';
var COMMENT = exports.COMMENT = 'comment';
// export const INDENTRIGHT = 'indentRight';
// export const INDENTLEFT = 'indentLeft';
var UNDO = exports.UNDO = 'undo';
var REDO = exports.REDO = 'redo';
var FINISH = exports.FINISH = 'finish';
var DELETE = exports.DELETE = 'delete';
var INDENT = exports.INDENT = 'indent';
var OUTDENT = exports.OUTDENT = 'outdent';
var NOTE = exports.NOTE = 'note';
// 二级菜单
var H1 = exports.H1 = 'h1';
var H2 = exports.H2 = 'h2';
var H3 = exports.H3 = 'h3';
var BOLD = exports.BOLD = 'bold';
var ITALIC = exports.ITALIC = 'italic';
var UNDERLINE = exports.UNDERLINE = 'underline';
var STRIKETHROUGH = exports.STRIKETHROUGH = 'strikethrough';
var HIGHLIGHT = exports.HIGHLIGHT = 'highlight';
var BLOCKQUOTE = exports.BLOCKQUOTE = 'blockQuote';
var INSERTSEPARATOR = exports.INSERTSEPARATOR = 'insertSeparator';
var ALIGNLEFT = exports.ALIGNLEFT = 'alignLeft';
var ALIGNCENTER = exports.ALIGNCENTER = 'alignCenter';
var ALIGNRIGHT = exports.ALIGNRIGHT = 'alignRight';
var CHECKBOX = exports.CHECKBOX = 'checkbox';
var ORDEREDLIST = exports.ORDEREDLIST = 'orderedList';
var UNORDEREDLIST = exports.UNORDEREDLIST = 'unorderedList';
var CODELIST = exports.CODELIST = 'codeList';
var INLINE_CODE = exports.INLINE_CODE = 'inlineCode';
// 接口数据与editor操作的映射
var TOOLBARMAP = exports.TOOLBARMAP = (_TOOLBARMAP = {}, (0, _defineProperty3.default)(_TOOLBARMAP, BOLD, 'bold'), (0, _defineProperty3.default)(_TOOLBARMAP, ITALIC, 'italic'), (0, _defineProperty3.default)(_TOOLBARMAP, UNDERLINE, 'underline'), (0, _defineProperty3.default)(_TOOLBARMAP, STRIKETHROUGH, 'strikethrough'), (0, _defineProperty3.default)(_TOOLBARMAP, H1, {
    action: 'heading',
    value: 1
}), (0, _defineProperty3.default)(_TOOLBARMAP, H2, {
    action: 'heading',
    value: 2
}), (0, _defineProperty3.default)(_TOOLBARMAP, H3, {
    action: 'heading',
    value: 3
}), (0, _defineProperty3.default)(_TOOLBARMAP, HIGHLIGHT, 'highlight'), (0, _defineProperty3.default)(_TOOLBARMAP, FINISH, 'finish'), (0, _defineProperty3.default)(_TOOLBARMAP, DELETE, 'delete'), (0, _defineProperty3.default)(_TOOLBARMAP, INDENT, 'indent'), (0, _defineProperty3.default)(_TOOLBARMAP, OUTDENT, 'outdent'), (0, _defineProperty3.default)(_TOOLBARMAP, NOTE, 'note'), (0, _defineProperty3.default)(_TOOLBARMAP, CODELIST, 'insertcodelist'), (0, _defineProperty3.default)(_TOOLBARMAP, BLOCKQUOTE, 'blockquote'), (0, _defineProperty3.default)(_TOOLBARMAP, ALIGNLEFT, 'alignleft'), (0, _defineProperty3.default)(_TOOLBARMAP, ALIGNCENTER, 'aligncenter'), (0, _defineProperty3.default)(_TOOLBARMAP, ALIGNRIGHT, 'alignright'), (0, _defineProperty3.default)(_TOOLBARMAP, INSERTSEPARATOR, 'insertseparator'), (0, _defineProperty3.default)(_TOOLBARMAP, INSERT_IMAGE, 'insertimage'), (0, _defineProperty3.default)(_TOOLBARMAP, REDO, 'redo'), (0, _defineProperty3.default)(_TOOLBARMAP, UNDO, 'undo'), (0, _defineProperty3.default)(_TOOLBARMAP, MENTION, 'mention'), (0, _defineProperty3.default)(_TOOLBARMAP, COMMENT, 'comment'), _TOOLBARMAP);

/***/ }),

/***/ 3712:
/***/ (function(module, exports, __webpack_require__) {

/**
 * xss
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var DEFAULT = __webpack_require__(2233);
var parser = __webpack_require__(2236);
var FilterXSS = __webpack_require__(3715);

/**
 * filter xss function
 *
 * @param {String} html
 * @param {Object} options { whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml }
 * @return {String}
 */
function filterXSS(html, options) {
  var xss = new FilterXSS(options);
  return xss.process(html);
}

exports = module.exports = filterXSS;
exports.filterXSS = filterXSS;
exports.FilterXSS = FilterXSS;
for (var i in DEFAULT) exports[i] = DEFAULT[i];
for (var i in parser) exports[i] = parser[i];

// using `xss` on the browser, output `filterXSS` to the globals
if (typeof window !== "undefined") {
  window.filterXSS = module.exports;
}

// using `xss` on the WebWorker, output `filterXSS` to the globals
function isWorkerEnv() {
  return typeof self !== 'undefined' && typeof DedicatedWorkerGlobalScope !== 'undefined' && self instanceof DedicatedWorkerGlobalScope;
}
if (isWorkerEnv()) {
  self.filterXSS = module.exports;
}


/***/ }),

/***/ 3713:
/***/ (function(module, exports, __webpack_require__) {

/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */

var DEFAULT = __webpack_require__(2234);
var parseStyle = __webpack_require__(3714);
var _ = __webpack_require__(2235);


/**
 * 返回值是否为空
 *
 * @param {Object} obj
 * @return {Boolean}
 */
function isNull (obj) {
  return (obj === undefined || obj === null);
}

/**
 * 浅拷贝对象
 *
 * @param {Object} obj
 * @return {Object}
 */
function shallowCopyObject (obj) {
  var ret = {};
  for (var i in obj) {
    ret[i] = obj[i];
  }
  return ret;
}

/**
 * 创建CSS过滤器
 *
 * @param {Object} options
 *   - {Object} whiteList
 *   - {Function} onAttr
 *   - {Function} onIgnoreAttr
 *   - {Function} safeAttrValue
 */
function FilterCSS (options) {
  options = shallowCopyObject(options || {});
  options.whiteList = options.whiteList || DEFAULT.whiteList;
  options.onAttr = options.onAttr || DEFAULT.onAttr;
  options.onIgnoreAttr = options.onIgnoreAttr || DEFAULT.onIgnoreAttr;
  options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
  this.options = options;
}

FilterCSS.prototype.process = function (css) {
  // 兼容各种奇葩输入
  css = css || '';
  css = css.toString();
  if (!css) return '';

  var me = this;
  var options = me.options;
  var whiteList = options.whiteList;
  var onAttr = options.onAttr;
  var onIgnoreAttr = options.onIgnoreAttr;
  var safeAttrValue = options.safeAttrValue;

  var retCSS = parseStyle(css, function (sourcePosition, position, name, value, source) {

    var check = whiteList[name];
    var isWhite = false;
    if (check === true) isWhite = check;
    else if (typeof check === 'function') isWhite = check(value);
    else if (check instanceof RegExp) isWhite = check.test(value);
    if (isWhite !== true) isWhite = false;

    // 如果过滤后 value 为空则直接忽略
    value = safeAttrValue(name, value);
    if (!value) return;

    var opts = {
      position: position,
      sourcePosition: sourcePosition,
      source: source,
      isWhite: isWhite
    };

    if (isWhite) {

      var ret = onAttr(name, value, opts);
      if (isNull(ret)) {
        return name + ':' + value;
      } else {
        return ret;
      }

    } else {

      var ret = onIgnoreAttr(name, value, opts);
      if (!isNull(ret)) {
        return ret;
      }

    }
  });

  return retCSS;
};


module.exports = FilterCSS;


/***/ }),

/***/ 3714:
/***/ (function(module, exports, __webpack_require__) {

/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */

var _ = __webpack_require__(2235);


/**
 * 解析style
 *
 * @param {String} css
 * @param {Function} onAttr 处理属性的函数
 *   参数格式： function (sourcePosition, position, name, value, source)
 * @return {String}
 */
function parseStyle (css, onAttr) {
  css = _.trimRight(css);
  if (css[css.length - 1] !== ';') css += ';';
  var cssLength = css.length;
  var isParenthesisOpen = false;
  var lastPos = 0;
  var i = 0;
  var retCSS = '';

  function addNewAttr () {
    // 如果没有正常的闭合圆括号，则直接忽略当前属性
    if (!isParenthesisOpen) {
      var source = _.trim(css.slice(lastPos, i));
      var j = source.indexOf(':');
      if (j !== -1) {
        var name = _.trim(source.slice(0, j));
        var value = _.trim(source.slice(j + 1));
        // 必须有属性名称
        if (name) {
          var ret = onAttr(lastPos, retCSS.length, name, value, source);
          if (ret) retCSS += ret + '; ';
        }
      }
    }
    lastPos = i + 1;
  }

  for (; i < cssLength; i++) {
    var c = css[i];
    if (c === '/' && css[i + 1] === '*') {
      // 备注开始
      var j = css.indexOf('*/', i + 2);
      // 如果没有正常的备注结束，则后面的部分全部跳过
      if (j === -1) break;
      // 直接将当前位置调到备注结尾，并且初始化状态
      i = j + 1;
      lastPos = i + 1;
      isParenthesisOpen = false;
    } else if (c === '(') {
      isParenthesisOpen = true;
    } else if (c === ')') {
      isParenthesisOpen = false;
    } else if (c === ';') {
      if (isParenthesisOpen) {
        // 在圆括号里面，忽略
      } else {
        addNewAttr();
      }
    } else if (c === '\n') {
      addNewAttr();
    }
  }

  return _.trim(retCSS);
}

module.exports = parseStyle;


/***/ }),

/***/ 3715:
/***/ (function(module, exports, __webpack_require__) {

/**
 * filter xss
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var FilterCSS = __webpack_require__(1933).FilterCSS;
var DEFAULT = __webpack_require__(2233);
var parser = __webpack_require__(2236);
var parseTag = parser.parseTag;
var parseAttr = parser.parseAttr;
var _ = __webpack_require__(1934);

/**
 * returns `true` if the input value is `undefined` or `null`
 *
 * @param {Object} obj
 * @return {Boolean}
 */
function isNull(obj) {
  return obj === undefined || obj === null;
}

/**
 * get attributes for a tag
 *
 * @param {String} html
 * @return {Object}
 *   - {String} html
 *   - {Boolean} closing
 */
function getAttrs(html) {
  var i = _.spaceIndex(html);
  if (i === -1) {
    return {
      html: "",
      closing: html[html.length - 2] === "/"
    };
  }
  html = _.trim(html.slice(i + 1, -1));
  var isClosing = html[html.length - 1] === "/";
  if (isClosing) html = _.trim(html.slice(0, -1));
  return {
    html: html,
    closing: isClosing
  };
}

/**
 * shallow copy
 *
 * @param {Object} obj
 * @return {Object}
 */
function shallowCopyObject(obj) {
  var ret = {};
  for (var i in obj) {
    ret[i] = obj[i];
  }
  return ret;
}

/**
 * FilterXSS class
 *
 * @param {Object} options
 *        whiteList, onTag, onTagAttr, onIgnoreTag,
 *        onIgnoreTagAttr, safeAttrValue, escapeHtml
 *        stripIgnoreTagBody, allowCommentTag, stripBlankChar
 *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`
 */
function FilterXSS(options) {
  options = shallowCopyObject(options || {});

  if (options.stripIgnoreTag) {
    if (options.onIgnoreTag) {
      console.error(
        'Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time'
      );
    }
    options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
  }

  options.whiteList = options.whiteList || DEFAULT.whiteList;
  options.onTag = options.onTag || DEFAULT.onTag;
  options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
  options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
  options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
  options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
  options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
  this.options = options;

  if (options.css === false) {
    this.cssFilter = false;
  } else {
    options.css = options.css || {};
    this.cssFilter = new FilterCSS(options.css);
  }
}

/**
 * start process and returns result
 *
 * @param {String} html
 * @return {String}
 */
FilterXSS.prototype.process = function(html) {
  // compatible with the input
  html = html || "";
  html = html.toString();
  if (!html) return "";

  var me = this;
  var options = me.options;
  var whiteList = options.whiteList;
  var onTag = options.onTag;
  var onIgnoreTag = options.onIgnoreTag;
  var onTagAttr = options.onTagAttr;
  var onIgnoreTagAttr = options.onIgnoreTagAttr;
  var safeAttrValue = options.safeAttrValue;
  var escapeHtml = options.escapeHtml;
  var cssFilter = me.cssFilter;

  // remove invisible characters
  if (options.stripBlankChar) {
    html = DEFAULT.stripBlankChar(html);
  }

  // remove html comments
  if (!options.allowCommentTag) {
    html = DEFAULT.stripCommentTag(html);
  }

  // if enable stripIgnoreTagBody
  var stripIgnoreTagBody = false;
  if (options.stripIgnoreTagBody) {
    var stripIgnoreTagBody = DEFAULT.StripTagBody(
      options.stripIgnoreTagBody,
      onIgnoreTag
    );
    onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;
  }

  var retHtml = parseTag(
    html,
    function(sourcePosition, position, tag, html, isClosing) {
      var info = {
        sourcePosition: sourcePosition,
        position: position,
        isClosing: isClosing,
        isWhite: whiteList.hasOwnProperty(tag)
      };

      // call `onTag()`
      var ret = onTag(tag, html, info);
      if (!isNull(ret)) return ret;

      if (info.isWhite) {
        if (info.isClosing) {
          return "</" + tag + ">";
        }

        var attrs = getAttrs(html);
        var whiteAttrList = whiteList[tag];
        var attrsHtml = parseAttr(attrs.html, function(name, value) {
          // call `onTagAttr()`
          var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
          var ret = onTagAttr(tag, name, value, isWhiteAttr);
          if (!isNull(ret)) return ret;

          if (isWhiteAttr) {
            // call `safeAttrValue()`
            value = safeAttrValue(tag, name, value, cssFilter);
            if (value) {
              return name + '="' + value + '"';
            } else {
              return name;
            }
          } else {
            // call `onIgnoreTagAttr()`
            var ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
            if (!isNull(ret)) return ret;
            return;
          }
        });

        // build new tag html
        var html = "<" + tag;
        if (attrsHtml) html += " " + attrsHtml;
        if (attrs.closing) html += " /";
        html += ">";
        return html;
      } else {
        // call `onIgnoreTag()`
        var ret = onIgnoreTag(tag, html, info);
        if (!isNull(ret)) return ret;
        return escapeHtml(html);
      }
    },
    escapeHtml
  );

  // if enable stripIgnoreTagBody
  if (stripIgnoreTagBody) {
    retHtml = stripIgnoreTagBody.remove(retHtml);
  }

  return retHtml;
};

module.exports = FilterXSS;


/***/ }),

/***/ 3716:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(a,b){if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}})(this,function(){"use strict";function b(a,b){return"undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(b,c,d){var e=new XMLHttpRequest;e.open("GET",b),e.responseType="blob",e.onload=function(){a(e.response,c,d)},e.onerror=function(){console.error("could not download file")},e.send()}function d(a){var b=new XMLHttpRequest;return b.open("HEAD",a,!1),b.send(),200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"))}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof global&&global.global===global?global:void 0,a=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i)})}}:function(a,b,d,e){if(e=e||open("","_blank"),e&&(e.document.title=e.document.body.innerText="downloading..."),"string"==typeof a)return c(a,b,d);var g="application/octet-stream"===a.type,h=/constructor/i.test(f.HTMLElement)||f.safari,i=/CriOS\/[\d]+/.test(navigator.userAgent);if((i||g&&h)&&"object"==typeof FileReader){var j=new FileReader;j.onloadend=function(){var a=j.result;a=i?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),e?e.location.href=a:location=a,e=null},j.readAsDataURL(a)}else{var k=f.URL||f.webkitURL,l=k.createObjectURL(a);e?e.location=l:location.href=l,e=null,setTimeout(function(){k.revokeObjectURL(l)},4E4)}});f.saveAs=a.saveAs=a,"undefined"!=typeof module&&(module.exports=a)});

//# sourceMappingURL=FileSaver.min.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(71)))

/***/ }),

/***/ 3717:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ActiveCommentSources = undefined;

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(10);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(11);

var _inherits3 = _interopRequireDefault(_inherits2);

var _typeof2 = __webpack_require__(82);

var _typeof3 = _interopRequireDefault(_typeof2);

var _react = __webpack_require__(1);

var React = _interopRequireWildcard(_react);

var _editor = __webpack_require__(1663);

var _comment = __webpack_require__(1936);

var _comment2 = _interopRequireDefault(_comment);

var _common = __webpack_require__(19);

var _teaLogger = __webpack_require__(1611);

var _$decorators = __webpack_require__(553);

var _teaLogger2 = __webpack_require__(450);

var _teaLogger3 = _interopRequireDefault(_teaLogger2);

var _getFileInfo = __webpack_require__(472);

var _url = __webpack_require__(3718);

var _cursorHelper = __webpack_require__(1820);

var _eventEmitter = __webpack_require__(110);

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _MindNoteContext = __webpack_require__(1671);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ActiveCommentSources = exports.ActiveCommentSources = undefined;
(function (ActiveCommentSources) {
    ActiveCommentSources["OUTLINE_TOOLBAR"] = "outline_toolbar";
    ActiveCommentSources["POPUP"] = "popup";
})(ActiveCommentSources || (exports.ActiveCommentSources = ActiveCommentSources = {}));

var Comment = function (_React$PureComponent) {
    (0, _inherits3.default)(Comment, _React$PureComponent);

    function Comment(props) {
        (0, _classCallCheck3.default)(this, Comment);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Comment.__proto__ || Object.getPrototypeOf(Comment)).call(this, props));

        _this.comments = [];
        /**
         * 收到 feed 消息
         */
        _this.handleMessageChange = function (allMessages, newMessages) {
            _this.props.context.trigger(_MindNoteContext.MindNoteEvent.FEED_MESSAGE, {
                allMessages: allMessages,
                newMessages: newMessages
            });
        };
        /**
         * 解决评论
         */
        _this.handleResolveComment = function (commentId) {
            var editorCommentManager = _this.props.editor.getCommentManager();
            editorCommentManager.resolveComment(commentId);
            return Promise.resolve();
        };
        /**
         * 删除评论
         */
        _this.handleDeleteComment = function (commentId) {
            var editorCommentManager = _this.props.editor.getCommentManager();
            editorCommentManager.deleteComment(commentId);
            return Promise.resolve();
        };
        /**
         * 确定保存评论
         */
        _this.handleSaveComment = function (tempCommentId, commentId) {
            var editorCommentManager = _this.props.editor.getCommentManager();
            editorCommentManager.saveComment(tempCommentId, commentId);
            _this.setCommentsData();
            return Promise.resolve();
        };
        /**
         * 激活评论变化
         */
        _this.handleActiveCommentChange = function (prevCommentId, nextCommentId) {
            if (!prevCommentId && !nextCommentId) {
                return;
            }
            var editorCommentManager = _this.props.editor.getCommentManager();
            editorCommentManager.activeNodeComment({
                commentId: nextCommentId || '',
                isActive: !!nextCommentId
            });
        };
        /**
         * 取消评论
         */
        _this.handleCancelNewComment = function (tempCommentId) {
            var editorCommentManager = _this.props.editor.getCommentManager();
            editorCommentManager.cancelComment(tempCommentId, true);
        };
        /**
         * 评论数据变化
         */
        _this.handleCommentsDataChange = function (commentsData) {
            var editorCommentManager = _this.props.editor.getCommentManager();
            var comments = _this.transformCommentsData(commentsData);
            editorCommentManager.setCommentsData(comments);
            _this.setCommentsData();
            _this.comments = comments;
        };
        /**
         * 设置评论 id
         */
        _this.setCommentsData = function () {
            var editorCommentManager = _this.props.editor.getCommentManager();
            var allComments = editorCommentManager.getAllComments();
            _this.commentManager.setSortedCommentIds(allComments);
        };
        _this.teaLogger = new _teaLogger.CommentTeaLogger({ type: _teaLogger.CommentType.PART_COMMENT });
        _this.commentManager = new _comment2.default({
            type: _common.SUITE_ENGINE_TYPE.MINDNOTE,
            token: _this.props.token,
            // 提供埋点服务
            teaLogger: _this.teaLogger,
            // 启用消息服务
            useMessageService: true
        });
        // 权限
        _this.commentManager.setCommentable(_this.props.commentable);
        // 设置回调监听
        _this.commentManager.setEventListener({
            onCommentDataChange: _this.handleCommentsDataChange,
            onActiveCommentChange: _this.handleActiveCommentChange,
            onAddComment: _this.handleSaveComment,
            onResolveComment: _this.handleResolveComment,
            onDeleteComment: _this.handleDeleteComment,
            onCancelNewComment: _this.handleCancelNewComment,
            onMessageChange: _this.handleMessageChange
        });
        // 加载评论
        _this.commentManager.startLoadComment().then(function () {
            _this.commentLoaded();
        });
        var editor = _this.props.editor;

        editor.addEventListener(_editor.MindNoteEvent.ADD_COMMENT, _this.handleAddComment);
        editor.addEventListener(_editor.MindNoteEvent.ACTIVE_COMMENT, _this.handleActiveComment);
        editor.addEventListener(_editor.MindNoteEvent.REFRESH_COMMENT, _this.setCommentsData);
        // 设置评论面板高度
        var commentManager = editor.getCommentManager();
        var height = _this.commentManager.getPanelHeight() + 74;
        commentManager.setMobileCommentHeight(height);
        return _this;
    }

    (0, _createClass3.default)(Comment, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            var editor = this.props.editor;

            editor.removeEventListener(_editor.MindNoteEvent.ADD_COMMENT, this.handleAddComment);
            editor.removeEventListener(_editor.MindNoteEvent.ACTIVE_COMMENT, this.handleActiveComment);
            editor.removeEventListener(_editor.MindNoteEvent.REFRESH_COMMENT, this.setCommentsData);
            this.commentManager.destroy();
        }
        /**
         * 设置评论权限
         */

    }, {
        key: "setCommentPermission",
        value: function setCommentPermission(enabled) {
            this.commentManager.setCommentable(enabled);
        }
        /**
         * 评论加载后
         */

    }, {
        key: "commentLoaded",
        value: function commentLoaded() {
            var commentId = (0, _url.getParamFromQuery)('comment_id');
            if (commentId && this.comments.find(function (comment) {
                return comment.id === commentId;
            })) {
                this.highlightComment(commentId);
            }
        }
        /**
         * 新增评论
         */

    }, {
        key: "handleAddComment",
        value: function handleAddComment(e) {
            this.hideKeyBoard();
            var editorCommentManager = this.props.editor.getCommentManager();
            var tempId = this.commentManager.startNewComment(e.quote);
            editorCommentManager.addComment(e.nodeId, {
                id: tempId,
                total: 0
            });
            this.setCommentsData();
        }
        /**
         * 激活评论
         */

    }, {
        key: "handleActiveComment",
        value: function handleActiveComment(e) {
            if (e.commentId) {
                this.hideKeyBoard();
            }
            this.activeComment(e.commentId || '');
        }
        /**
         * 激活评论（editor & panel）
         */

    }, {
        key: "highlightComment",
        value: function highlightComment(commentId) {
            var editorCommentManager = this.props.editor.getCommentManager();
            editorCommentManager.activeNodeComment({
                commentId: commentId,
                isActive: !!commentId
            });
            this.activeComment(commentId);
        }
        /**
         * 激活评论（panel）
         */

    }, {
        key: "activeComment",
        value: function activeComment(commentId) {
            this.commentManager.activeComment(commentId);
        }
        /**
         * 获取评论数据
         */

    }, {
        key: "transformCommentsData",
        value: function transformCommentsData(commentsData) {
            return commentsData.map(function (item) {
                return {
                    id: item.commentId,
                    total: item.commentList.length
                };
            });
        }
        /**
         * 隐藏键盘
         * @description 会在 toolbar 那里监听处理
         */

    }, {
        key: "hideKeyBoard",
        value: function hideKeyBoard() {
            _eventEmitter2.default.trigger('onKeyboard', [{ isOpenKeyboard: 0 }]);
        }
        /**
         * 新建评论
         */

    }, {
        key: "startNewComment",
        value: function startNewComment(source) {
            this.activeCommentSource = source;
            var info = (0, _cursorHelper.getNodeInfoBySelection)();
            if (info && info.nodeType === 'content') {
                this.hideKeyBoard();
                (0, _cursorHelper.blurSelection)();
                var editorCommentManager = this.props.editor.getCommentManager();
                editorCommentManager.activeOrAddComment(info.nodeId);
            }
        }
    }, {
        key: "render",
        value: function render() {
            return null;
        }
    }]);
    return Comment;
}(React.PureComponent);

__decorate([(0, _$decorators.Bind)(), (0, _teaLogger3.default)('toggle_attribute', function (_ref) {
    var context = _ref.context,
        store = _ref.store;

    var fileInfo = (0, _getFileInfo.getFileInfoObj)();
    return {
        action: 'click_comment_btn',
        attr_op_status: 'effective',
        eventType: 'mouseclick',
        fileid: context.props.token,
        file_type: 'mindnote',
        module: 'mindnote',
        source: context.activeCommentSource,
        select_type: 'text',
        file_tenant_id: fileInfo.file_tenant_id,
        file_is_cross_tenant: fileInfo.file_is_cross_tenant,
        mode: 'outline',
        view_level: _editor.teaUtils.getCurrentLevel()
    };
})], Comment.prototype, "handleAddComment", null);
__decorate([(0, _$decorators.Bind)(), (0, _teaLogger3.default)('toggle_attribute', function (_ref2) {
    var context = _ref2.context,
        store = _ref2.store;

    var fileInfo = (0, _getFileInfo.getFileInfoObj)();
    return {
        action: 'click_comment_bubble',
        attr_op_status: 'effective',
        eventType: 'mouseclick',
        fileid: context.props.token,
        file_type: 'mindnote',
        module: 'mindnote',
        source: 'popup',
        select_type: 'text',
        file_tenant_id: fileInfo.file_tenant_id,
        file_is_cross_tenant: fileInfo.file_is_cross_tenant,
        mode: 'outline',
        view_level: _editor.teaUtils.getCurrentLevel()
    };
})], Comment.prototype, "handleActiveComment", null);
exports.default = Comment;

/***/ }),

/***/ 3718:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getParamFromQuery = getParamFromQuery;
exports.resetQueryParam = resetQueryParam;
/**
 * 从 url 获取参数
 */
function getParamFromQuery(name) {
    var search = window.location.search || '';
    var reg = new RegExp('(?:\\?|&)' + name + '=([a-z0-9]+)', 'i');
    var res = reg.exec(search);
    return res ? res[1] : '';
}
/**
 * 删除 url 的参数
 */
function resetQueryParam(name) {
    if (window.history.replaceState) {
        var reg = new RegExp('(\\?|&)' + name + '=[a-z0-9]+&?', 'i');
        var newSearch = window.location.search.replace(reg, function (match, $1) {
            return $1 || '';
        });
        var newUrl = '' + window.location.pathname + newSearch + window.location.hash;
        window.history.replaceState({}, document.title, newUrl);
    }
}

/***/ }),

/***/ 3719:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ContextMenu = __webpack_require__(3720);

var _ContextMenu2 = _interopRequireDefault(_ContextMenu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _ContextMenu2.default;

/***/ }),

/***/ 3720:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(10);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(11);

var _inherits3 = _interopRequireDefault(_inherits2);

var _typeof2 = __webpack_require__(82);

var _typeof3 = _interopRequireDefault(_typeof2);

var _noop2 = __webpack_require__(304);

var _noop3 = _interopRequireDefault(_noop2);

var _react = __webpack_require__(1);

var React = _interopRequireWildcard(_react);

var _jquery = __webpack_require__(4);

var _jquery2 = _interopRequireDefault(_jquery);

var _bowser = __webpack_require__(73);

var _bowser2 = _interopRequireDefault(_bowser);

var _$decorators = __webpack_require__(553);

var _cursorHelper = __webpack_require__(1820);

var cursorHelper = _interopRequireWildcard(_cursorHelper);

var _compatible = __webpack_require__(1819);

var _networkStateHelper = __webpack_require__(129);

var _type = __webpack_require__(3721);

var _comment = __webpack_require__(1935);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ContextMenu = function (_React$PureComponent) {
    (0, _inherits3.default)(ContextMenu, _React$PureComponent);

    function ContextMenu() {
        (0, _classCallCheck3.default)(this, ContextMenu);

        // 标识是否长按，这里需要这个变量来做一些特殊逻辑
        var _this = (0, _possibleConstructorReturn3.default)(this, (ContextMenu.__proto__ || Object.getPrototypeOf(ContextMenu)).apply(this, arguments));

        _this.afterLongPress = false;
        // 标识是否移动了手指，需要这个变量来做一些特殊逻辑
        _this.afterTouchMove = false;
        // 标识是否显示了系统 contextMenu，如果显示了，手动调用的 contextMenu 就不显示了
        _this.showSystemContextMenu = false;
        _this.handleTouchEnd = function () {
            // 这段逻辑只适用于 ios
            if (!_bowser2.default.ios) {
                return;
            }
            var nodeInfo = cursorHelper.getNodeInfoBySelection();
            // 如果长按一个空节点也要显示 contextMenu
            if (_this.afterLongPress && _bowser2.default.ios && !_this.props.permission.editable && nodeInfo && !nodeInfo.node.textContent) {
                _this.showContextMenu();
            }
            _this.afterTouchMove = false;
            _this.afterLongPress = false;
        };
        /**
         * Android 需要双击唤起 contextMenu
         */
        _this.handleDoubleClick = function () {
            var selection = window.getSelection();
            if (selection && selection.isCollapsed) {
                _this.showContextMenu();
            }
        };
        _this.handleContextMenu = function (e) {
            // 有评论功能的时候才使用自定义 contextMenu
            if (_bowser2.default.android && (0, _compatible.isCommentEnabled)()) {
                e.preventDefault();
                _this.showContextMenu();
            }
        };
        /**
         * Native 请求菜单项
         */
        _this.requestCustomContextMenu = function () {
            var selection = window.getSelection();
            var nodeInfo = cursorHelper.getNodeInfoBySelection();
            var options = {
                items: [],
                onSuccess: 'window.lark.biz.navigation.onContextMenuClick'
            };
            /* 选区无内容不处理 */
            if (!selection || !selection.anchorNode || !selection.focusNode || !nodeInfo) {
                return options;
            }
            var isFullySelected = _this.isFullySelected();
            var isCrossNode = cursorHelper.isSelectionCrossNode();
            /* 编辑态 */
            if (_this.props.permission.editable) {
                if (selection.isCollapsed) {
                    /* 未选中文字 */
                    options.items = [_type.selectMenu, _type.selectAllMenu, _type.pasteMenu];
                    if (nodeInfo.nodeType === 'content') {
                        options.items.push(_type.commentTopicMenu);
                    }
                } else {
                    /* 选中文字 */
                    options.items = [_type.selectAllMenu, _type.cutMenu, _type.copyMenu, _type.pasteMenu];
                    if (nodeInfo.nodeType === 'content') {
                        options.items.push(_type.commentTopicMenu);
                    }
                }
            } else {
                /* 阅读态 */
                if (!selection.isCollapsed) {
                    /* 选中文字 */
                    options.items = [_type.selectAllMenu, _type.copyMenu];
                    if (!isCrossNode && nodeInfo.nodeType === 'content') {
                        options.items.push(_type.commentTopicMenu);
                    }
                } else {
                    options.items = [_type.commentTopicMenu];
                }
            }
            if (isFullySelected) {
                options.items = options.items.filter(function (item) {
                    return item !== _type.selectAllMenu;
                });
            }
            // 如果不满足显示评论的要求，那么干掉评论功能
            if (nodeInfo.nodeType !== 'content' || !(0, _compatible.isCommentEnabled)() || !_this.props.permission.commentable) {
                options.items = options.items.filter(function (item) {
                    return item !== _type.commentTopicMenu;
                });
            }
            // 离线状态下不显示剪切，粘贴，评论主题
            if (!(0, _networkStateHelper.isOnLine)()) {
                var offlineBannedList = [_type.commentTopicMenu, _type.cutMenu, _type.pasteMenu];
                options.items = options.items.filter(function (item) {
                    return !offlineBannedList.includes(item);
                });
            }
            return options;
        };
        _this.handleContextMenuClick = function (e) {
            var action = e.id;

            switch (action) {
                case _type.ContextMenuID.COPY:
                    window.lark.biz.navigation.handleCopyMenuClick();
                    break;
                case _type.ContextMenuID.CUT:
                    window.lark.biz.navigation.handleCutMenuClick();
                    break;
                case _type.ContextMenuID.PASTE:
                    window.lark.biz.navigation.handlePasteMenuClick();
                    break;
                case _type.ContextMenuID.SELECT:
                    _this.selectItem();
                    _this.showContextMenu();
                    break;
                case _type.ContextMenuID.SELECT_ALL:
                    if (_this.props.permission.editable) {
                        _this.selectItem(true);
                    } else {
                        document.execCommand('selectall');
                    }
                    _this.showContextMenu();
                    break;
                case _type.ContextMenuID.DELETE:
                    document.execCommand('delete');
                    break;
                case _type.ContextMenuID.COMMENT:
                    _this.showComment();
                    break;
                default:
                    break;
            }
        };
        return _this;
    }

    (0, _createClass3.default)(ContextMenu, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this2 = this;

            document.addEventListener('selectionchange', this.handleSelectionChange);
            document.addEventListener('touchend', this.handleTouchEnd);
            document.addEventListener('touchmove', this.handleTouchMove);
            document.addEventListener('longpress', this.handleLongPress);
            document.addEventListener('contextmenu', this.handleContextMenu);
            window.lark.biz.navigation.requestCustomContextMenu = this.requestCustomContextMenu;
            window.lark.biz.navigation.onContextMenuClick = this.handleContextMenuClick;
            // 兼容多个地方可能都注册了长按的回调
            var doubleClickCb = window.lark.biz.selection.doubleClick;
            window.lark.biz.selection.doubleClick = function () {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                if (typeof doubleClickCb === 'function') {
                    doubleClickCb.apply(null, args);
                }
                _this2.handleDoubleClick();
            };
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            document.removeEventListener('selectionchange', this.handleSelectionChange);
            document.removeEventListener('touchend', this.handleTouchEnd);
            document.removeEventListener('touchmove', this.handleTouchMove);
            document.removeEventListener('longpress', this.handleLongPress);
            document.removeEventListener('contextmenu', this.handleContextMenu);
            window.lark.biz.navigation.requestCustomContextMenu = _noop3.default;
            window.lark.biz.navigation.onContextMenuClick = _noop3.default;
            window.lark.biz.selection.doubleClick = _noop3.default;
        }
    }, {
        key: "handleTouchMove",
        value: function handleTouchMove() {
            this.afterTouchMove = true;
        }
        /**
         * 这里加一个 afterLongPress 是为了ios只读模式下长按后松手显示 contextMenu
         */

    }, {
        key: "handleLongPress",
        value: function handleLongPress(event) {
            var _this3 = this;

            this.afterLongPress = true;
            var _event$detail = event.detail,
                x = _event$detail.x,
                y = _event$detail.y;

            if (!x || !y) return;
            var element = document.elementFromPoint(x, y);
            var $editor = element ? cursorHelper.findContentEditable((0, _jquery2.default)(element)) : null;
            if (!element || !$editor) {
                return;
            }
            // 这里考虑到有气泡的情况，长按气泡后面区域的时候也要显示 contextMenu
            if (element.className.trim().includes('content-wrapper') && _bowser2.default.android) {
                setTimeout(function () {
                    _this3.showContextMenu();
                }, 350);
                return;
            }
        }
    }, {
        key: "handleSelectionChange",
        value: function handleSelectionChange() {
            var _this4 = this;

            var selection = window.getSelection();
            var nodeInfo = cursorHelper.getNodeInfoBySelection();
            if (!nodeInfo) {
                return;
            }
            // 选区变化时需要清空 contextMenu 里的内容，否则contextMenu 会跳
            // 仅在 ios 下有用
            if (_bowser2.default.ios) {
                this.setContextMenu();
                return;
            }
            /* 多选区且不是安卓才触发 */
            if (selection && !selection.isCollapsed && !_bowser2.default.android) {
                this.showContextMenu();
                return;
            }
            // 安卓长按一个空节点也要显示 contextMenu
            if (this.afterLongPress) {
                // 和系统冲突了，所以延后一点展示
                setTimeout(function () {
                    _this4.showContextMenu();
                }, 200);
                this.afterLongPress = false;
                return;
            }
        }
    }, {
        key: "showComment",
        value: function showComment() {
            if (this.props.onClickComment) {
                this.props.onClickComment(_comment.ActiveCommentSources.POPUP);
            }
        }
    }, {
        key: "setContextMenu",
        value: function setContextMenu(menuItems) {
            var _this5 = this;

            if (!_bowser2.default.ios) {
                return;
            }
            var items = menuItems ? menuItems : this.requestCustomContextMenu().items;
            window.lark.biz.navigation.setCustomContextMenu({
                items: items,
                onSuccess: function onSuccess(res) {
                    _this5.handleContextMenuClick(res);
                }
            });
        }
    }, {
        key: "showContextMenu",
        value: function showContextMenu() {
            if (_bowser2.default.android && !(0, _compatible.isCommentEnabled)()) {
                return;
            }
            var selection = window.getSelection();
            // 安卓下选区变化会自动显示 contextMenu，不需要手动显示
            if (selection && !selection.isCollapsed) {
                return;
            }
            if (selection && selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                var rect = _bowser2.default.ios ? range.getClientRects()[0] : range.getBoundingClientRect();
                var position = {
                    top: Math.floor(rect.top + window.scrollY),
                    left: Math.floor(rect.left),
                    bottom: Math.floor(rect.bottom + window.scrollY),
                    right: Math.floor(rect.right)
                };
                // 当选区为空时也需要显示 contextMenu 来进行粘贴等操作
                if (rect.top === 0 && rect.left === 0 && rect.right === 0 && rect.bottom === 0) {
                    var container = range.startContainer;
                    rect = _bowser2.default.ios ? container.getClientRects()[0] : container.getBoundingClientRect();
                    Object.assign(position, {
                        top: Math.floor(rect.top + window.scrollY),
                        left: Math.floor(rect.left),
                        bottom: Math.floor(rect.bottom + window.scrollY),
                        // 这里加了 22+28 是因为 content 默认左右 padding 是 28 和 22
                        // 再加 10是为了向右偏移一点来使 contextMenu 得位置更合理
                        right: Math.floor(rect.left + 28 + 22 + 10)
                    });
                }
                console.trace('show context menu...');
                window.lark.biz.navigation.showCustomContextMenu({ position: position });
            }
        }
        /*
         * 检查是否是全选
         */

    }, {
        key: "isFullySelected",
        value: function isFullySelected() {
            var selection = window.getSelection();
            var nodeInfo = cursorHelper.getNodeInfoBySelection();
            if (!selection || !nodeInfo || !nodeInfo.node) return false;
            var content = nodeInfo.node.textContent || '';
            var isFullySelected = content.trim() === selection.toString().trim();
            return isFullySelected;
        }
        /**
         * 节点多选
         * @param all 是否全选
         */

    }, {
        key: "selectItem",
        value: function selectItem() {
            var all = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var selection = window.getSelection();
            var $anchor = (0, _jquery2.default)(selection.anchorNode);
            var $target = $anchor.is(cursorHelper.CONTENTEDITABLE_SELECTORS.join(',')) ? $anchor : $anchor.parents(cursorHelper.CONTENTEDITABLE_SELECTORS.join(','));
            var length = $target.text().length;
            if (all) {
                cursorHelper.setCursorPosition($target, {
                    start: 0,
                    end: length
                });
            } else {
                var _cursorHelper$getCurs = cursorHelper.getCursorInfo($anchor, $target, selection.anchorOffset),
                    offset = _cursorHelper$getCurs.offset;

                if (offset === 0) {
                    cursorHelper.setCursorPosition($target, {
                        start: 0,
                        end: 1
                    });
                } else {
                    cursorHelper.setCursorPosition($target, {
                        start: offset - 1,
                        end: offset
                    });
                }
            }
        }
    }, {
        key: "render",
        value: function render() {
            return null;
        }
    }]);
    return ContextMenu;
}(React.PureComponent);

__decorate([(0, _$decorators.Bind)(), (0, _$decorators.Throttle)(50)], ContextMenu.prototype, "handleTouchMove", null);
__decorate([_$decorators.Bind], ContextMenu.prototype, "handleLongPress", null);
__decorate([(0, _$decorators.Bind)()], ContextMenu.prototype, "handleSelectionChange", null);
__decorate([(0, _$decorators.Bind)(), (0, _$decorators.Debounce)(200)], ContextMenu.prototype, "showContextMenu", null);
exports.default = ContextMenu;

/***/ }),

/***/ 3721:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(t) {

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.deleteMenu = exports.commentTopicMenu = exports.commentMenu = exports.pasteMenu = exports.copyMenu = exports.cutMenu = exports.selectAllMenu = exports.selectMenu = exports.ContextMenuID = undefined;

var _uppercaseTitleHelper = __webpack_require__(1774);

// 菜单顺序：「选择、全选、剪切、复制、粘贴、评论」
var ContextMenuID = exports.ContextMenuID = undefined;
(function (ContextMenuID) {
    ContextMenuID["SELECT"] = "SELECT";
    ContextMenuID["SELECT_ALL"] = "SELECT_ALL";
    ContextMenuID["CUT"] = "CUT";
    ContextMenuID["COPY"] = "COPY";
    ContextMenuID["PASTE"] = "PASTE";
    ContextMenuID["COMMENT"] = "COMMENT";
    ContextMenuID["DELETE"] = "DELETE";
})(ContextMenuID || (exports.ContextMenuID = ContextMenuID = {}));
var selectMenu = exports.selectMenu = {
    id: ContextMenuID.SELECT,
    text: (0, _uppercaseTitleHelper.uppercaseTitleHelper)(t('mobile.menu.select'))
};
var selectAllMenu = exports.selectAllMenu = {
    id: ContextMenuID.SELECT_ALL,
    text: (0, _uppercaseTitleHelper.uppercaseTitleHelper)(t('mobile.menu.select_all'))
};
var cutMenu = exports.cutMenu = {
    id: ContextMenuID.CUT,
    text: (0, _uppercaseTitleHelper.uppercaseTitleHelper)(t('mobile.menu.cut'))
};
var copyMenu = exports.copyMenu = {
    id: ContextMenuID.COPY,
    text: (0, _uppercaseTitleHelper.uppercaseTitleHelper)(t('mobile.menu.copy'))
};
var pasteMenu = exports.pasteMenu = {
    id: ContextMenuID.PASTE,
    text: (0, _uppercaseTitleHelper.uppercaseTitleHelper)(t('mobile.menu.paste'))
};
var commentMenu = exports.commentMenu = {
    id: ContextMenuID.COMMENT,
    text: (0, _uppercaseTitleHelper.uppercaseTitleHelper)(t('mobile.menu.comment'))
};
var commentTopicMenu = exports.commentTopicMenu = {
    id: ContextMenuID.COMMENT,
    text: (0, _uppercaseTitleHelper.uppercaseTitleHelper)(t('mobile.menu.comment_topic'))
};
var deleteMenu = exports.deleteMenu = {
    id: ContextMenuID.DELETE,
    text: (0, _uppercaseTitleHelper.uppercaseTitleHelper)(t('mobile.menu.delete'))
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(25)))

/***/ }),

/***/ 3722:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _SelectionController = __webpack_require__(3723);

var _SelectionController2 = _interopRequireDefault(_SelectionController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _SelectionController2.default;

/***/ }),

/***/ 3723:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(10);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(11);

var _inherits3 = _interopRequireDefault(_inherits2);

var _typeof2 = __webpack_require__(82);

var _typeof3 = _interopRequireDefault(_typeof2);

var _noop2 = __webpack_require__(304);

var _noop3 = _interopRequireDefault(_noop2);

var _react = __webpack_require__(1);

var React = _interopRequireWildcard(_react);

var _bowser = __webpack_require__(73);

var _bowser2 = _interopRequireDefault(_bowser);

var _jquery = __webpack_require__(4);

var _jquery2 = _interopRequireDefault(_jquery);

var _cursorHelper = __webpack_require__(1820);

var cursorHelper = _interopRequireWildcard(_cursorHelper);

var _$decorators = __webpack_require__(553);

var _compatible = __webpack_require__(1819);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var SelectionController = function (_React$PureComponent) {
    (0, _inherits3.default)(SelectionController, _React$PureComponent);

    function SelectionController() {
        (0, _classCallCheck3.default)(this, SelectionController);

        var _this = (0, _possibleConstructorReturn3.default)(this, (SelectionController.__proto__ || Object.getPrototypeOf(SelectionController)).apply(this, arguments));

        _this.selectionStartRange = null;
        _this.selectionEndRange = null;
        /**
         * 用来设置安卓光标下面的小点点的位置
         */
        _this.handleGetCursorBounds = function () {
            var selection = window.getSelection();
            if (!selection || selection.rangeCount === 0) {
                return {
                    top: 0,
                    left: 0,
                    bottom: 0,
                    right: 0
                };
            }
            var range = selection.getRangeAt(0);
            var rect = _bowser2.default.ios ? range.getClientRects()[0] : range.getBoundingClientRect();
            var position = {
                top: Math.floor(rect.top + window.scrollY),
                left: Math.floor(rect.left),
                bottom: Math.floor(rect.bottom + window.scrollY),
                right: Math.floor(rect.right)
            };
            // 当选区为空时也需要显示 contextMenu 来进行粘贴等操作
            if (rect.top === 0 && rect.left === 0 && rect.right === 0 && rect.bottom === 0) {
                var container = range.startContainer;
                var _rect = _bowser2.default.ios ? container.getClientRects()[0] : container.getBoundingClientRect();
                Object.assign(position, {
                    top: Math.floor(_rect.top + window.scrollY),
                    left: Math.floor(_rect.left),
                    bottom: Math.floor(_rect.bottom + window.scrollY),
                    // 这里加了 22+28 是因为 content 默认左右 padding 是 28 和 22
                    // 再加 10是为了向右偏移一点来使 contextMenu 得位置更合理
                    right: Math.floor(_rect.left + 28 + 22 + 10)
                });
            }
            return position;
        };
        /**
         * 通知清空选区，此时清空选区并且移除锚点
         */
        _this.handleClearSelectionExcludeCursor = function () {
            var selection = window.getSelection();
            var oldRange = selection.getRangeAt(0);
            _this.removeCaret();
            // 如果只读模式就清除选区
            if (!_this.props.editable) {
                selection.removeAllRanges();
                return;
            }
            var range = document.createRange();
            range.setStart(oldRange.endContainer, oldRange.endOffset);
            range.setEnd(oldRange.endContainer, oldRange.endOffset);
            selection.removeAllRanges();
            selection.addRange(range);
        };
        /**
         * 锚点拖动完毕, 如果开始和结束的锚点前后位置交换了，那么也要交换存储的数据
         */
        _this.handleDragFinish = function (isFinished) {
            var startCaret = _this.selectionStartRange,
                endCaret = _this.selectionEndRange;

            var selection = window.getSelection();
            var range = selection.getRangeAt(0);
            // 这里的特殊逻辑主要是处理选区跨越评论气泡时光标会停留在气泡右边的问题
            if (range.endContainer && range.endContainer.className === 'comment-bubble') {
                var content = range.endContainer.parentElement.querySelector('.content');
                var lastTextNode = _this.findLastTextNode(content);
                if (lastTextNode && lastTextNode.textContent) {
                    range.setEnd(lastTextNode, lastTextNode.textContent.length);
                    selection.removeAllRanges();
                    selection.addRange(range);
                }
            }
            _this.setCaretPosition();
            if (startCaret && endCaret && startCaret.compareBoundaryPoints(Range.START_TO_END, endCaret) > 0) {
                var tempRange = startCaret;
                _this.selectionStartRange = endCaret;
                _this.selectionEndRange = tempRange;
            }
        };
        /**
         * 因为只读模式下文档不可选择，所以双击某个节点的时候需要手动选中整个节点
         */
        _this.handleDoubleClick = function (x, y) {
            if (_bowser2.default.android && !(0, _compatible.isCommentEnabled)()) {
                return;
            }
            if (!_this.props.editable) {
                _this.findAndSelectElement(x, y);
            }
            _this.setRanges();
        };
        return _this;
    }

    (0, _createClass3.default)(SelectionController, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this2 = this;

            window.lark.biz.selection.dragSelectionStart = this.handleDragSelectionStart;
            window.lark.biz.selection.dragSelectionEnd = this.handleDragSelectionEnd;
            window.lark.biz.selection.dragFinish = this.handleDragFinish;
            window.lark.biz.selection.clearSelectionExcludeCursor = this.handleClearSelectionExcludeCursor;
            window.lark.biz.selection.getCursorBounds = this.handleGetCursorBounds;
            document.addEventListener('selectionchange', this.handleSelectionChange);
            document.addEventListener('longpress', this.handleLongPress);
            document.addEventListener('keydown', this.handleKeyDown);
            document.addEventListener('cut', this.handleCut);
            // 兼容多个地方可能都注册了长按的回调
            var doubleClickCb = window.lark.biz.selection.doubleClick;
            window.lark.biz.selection.doubleClick = function () {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                if (typeof doubleClickCb === 'function') {
                    doubleClickCb.apply(null, args);
                }
                _this2.handleDoubleClick.apply(_this2, args);
            };
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            window.lark.biz.selection.dragSelectionStart = _noop3.default;
            window.lark.biz.selection.dragSelectionEnd = _noop3.default;
            window.lark.biz.selection.dragFinish = _noop3.default;
            window.lark.biz.selection.clearSelectionExcludeCursor = _noop3.default;
            window.lark.biz.selection.getCursorBounds = _noop3.default;
            document.removeEventListener('selectionchange', this.handleSelectionChange);
            document.removeEventListener('longpress', this.handleLongPress);
            document.removeEventListener('keydown', this.handleKeyDown);
            document.removeEventListener('cut', this.handleCut);
        }
        /**
         * 选区改变时需要重设锚点位置
         */

    }, {
        key: "handleSelectionChange",
        value: function handleSelectionChange() {
            if (_bowser2.default.ios) {
                return;
            }
            var selection = window.getSelection();
            if (!selection || !selection.anchorNode) {
                this.removeCaret();
            }
            this.setSelectionNode();
            this.setCaretPosition();
        }
        /**
         * 拖动开始的锚点
         */

    }, {
        key: "handleDragSelectionStart",
        value: function handleDragSelectionStart(x, y) {
            // 在 y 轴上添加一点向上的偏移量，这样用户拖动时即使锚点偏下也能正确选到东西
            var caret = document.caretRangeFromPoint(x, y - 10);
            if (!this.isValidSelection(caret)) return;
            // 只读模式下可以任意选择节点，可编辑模式下只能选择同一个节点范围内的内容
            if (!this.props.editable || this.isSameNode(caret)) {
                this.selectionStartRange = caret;
            }
            window.lark.biz.navigation.closeCustomContextMenu();
            this.selectBetweenRanges();
        }
        /**
         * 拖动结尾锚点
         */

    }, {
        key: "handleDragSelectionEnd",
        value: function handleDragSelectionEnd(x, y) {
            // 在 y 轴上添加一点向上的偏移量，这样用户拖动时即使锚点偏下也能正确选到东西
            var caret = document.caretRangeFromPoint(x, y - 10);
            if (!this.isValidSelection(caret)) return;
            // 只读模式下可以任意选择节点，可编辑模式下只能选择同一个节点范围内的内容
            if (!this.props.editable || this.isSameNode(caret)) {
                this.selectionEndRange = caret;
                this.selectBetweenRanges();
            }
            window.lark.biz.navigation.closeCustomContextMenu();
        }
        /**
         * 长按有几个操作，如果长按内容节点那么全选这个节点
         * 如果长按说明节点那么选中一些字符
         */

    }, {
        key: "handleLongPress",
        value: function handleLongPress(event) {
            var _this3 = this;

            if (_bowser2.default.android && !(0, _compatible.isCommentEnabled)()) {
                return;
            }
            var _event$detail = event.detail,
                x = _event$detail.x,
                y = _event$detail.y;

            this.selectionNodeInfo = null;
            if (!x || !y) return;
            var element = document.elementFromPoint(x, y);
            var $editor = element ? cursorHelper.findContentEditable((0, _jquery2.default)(element)) : null;
            if (!element || !$editor) {
                return;
            }
            if (!$editor.text().trim()) {
                var range = document.caretRangeFromPoint(x, y);
                var _selection = window.getSelection();
                _selection.removeAllRanges();
                _selection.addRange(range);
                return;
            } else if (!this.props.editable) {
                // 只读模式下长按非空节点需要清除选区防止系统显示 contextMenu
                var _selection2 = window.getSelection();
                _selection2.removeAllRanges();
            }
            if (this.props.editable) {
                // 这里考虑到有气泡的情况，所以长按气泡后面的区域的时候光标要移动到气泡前面文字的最后面
                if (element.className.trim().includes('content-wrapper')) {
                    var lastTextNode = this.findLastTextNode($editor.get(0));
                    var _range = document.createRange();
                    var _selection3 = window.getSelection();
                    _range.setStart(lastTextNode, lastTextNode.length);
                    _range.setEnd(lastTextNode, lastTextNode.length);
                    setTimeout(function () {
                        _selection3.removeAllRanges();
                        _selection3.addRange(_range);
                    }, 300);
                    return;
                }
                if (['content', 'note', 'title'].includes(element.className.trim())) {
                    var _selection4 = window.getSelection();
                    var _range2 = _selection4.getRangeAt(0);
                    _selection4.removeAllRanges();
                    _selection4.addRange(_range2);
                    return;
                }
            }
            // 安卓系统长按后系统会设置选区，我们需要在系统设置选区后设置锚点数据
            setTimeout(function () {
                _this3.setRanges();
            }, 200);
            // this.findAndSelectElement(x, y);
        }
    }, {
        key: "handleKeyDown",
        value: function handleKeyDown(e) {
            if (!_bowser2.default.ios) {
                return;
            }
            var keyCode = e.keyCode;
            // 解决 ios 下删除文字光标消失的问题

            if (keyCode === 8) {
                this.resetCursorPosition();
            }
        }
    }, {
        key: "handleCut",
        value: function handleCut() {
            if (!_bowser2.default.ios) {
                return;
            }
            // 解决 ios 下删除文字光标消失的问题
            this.resetCursorPosition();
        }
    }, {
        key: "resetCursorPosition",
        value: function resetCursorPosition() {
            var range = document.createRange();
            range.setStart(oldRange.startContainer, oldRange.startOffset);
            range.setEnd(oldRange.startContainer, oldRange.startOffset);
            selection.removeAllRanges();
            selection.addRange(range);
        }
        /**
         * 选中两个锚点之间的内容
         *
         * @private
         * @memberof SelectionController
         */

    }, {
        key: "selectBetweenRanges",
        value: function selectBetweenRanges() {
            try {
                var startCaret = this.selectionStartRange,
                    endCaret = this.selectionEndRange;

                if (startCaret && endCaret) {
                    var range = document.createRange();
                    if (startCaret.compareBoundaryPoints(Range.START_TO_END, endCaret) > 0) {
                        range.setStart(endCaret.startContainer, endCaret.startOffset);
                        range.setEnd(startCaret.startContainer, startCaret.startOffset);
                    } else {
                        range.setStart(startCaret.startContainer, startCaret.startOffset);
                        range.setEnd(endCaret.startContainer, endCaret.startOffset);
                    }
                    var _selection5 = window.getSelection();
                    _selection5.removeAllRanges();
                    _selection5.addRange(range);
                }
            } catch (error) {
                console.error('selection: selection between ranges failed.', error);
            }
        }
        /**
         * 设置选中的节点信息
         */

    }, {
        key: "setSelectionNode",
        value: function setSelectionNode() {
            var selection = window.getSelection();
            if (!selection || selection.rangeCount === 0) return;
            var range = selection.getRangeAt(0);
            var $element = (0, _jquery2.default)(range.startContainer);
            var $editor = cursorHelper.findContentEditable($element);
            if ($editor) {
                this.selectionNodeInfo = cursorHelper.getNodeInfo($editor);
            }
        }
        /**
         * 判断锚点移动的范围和选区是否在同一范围内
         */

    }, {
        key: "isSameNode",
        value: function isSameNode(caret) {
            var element = caret.startContainer;
            if (!element || !this.selectionNodeInfo) return;
            var $element = (0, _jquery2.default)(element);
            var $editor = cursorHelper.findContentEditable($element);
            // 这里还需要考虑选中了 comment bubble 的情况
            if ($element.hasClass('comment-bubble')) {
                $editor = $element.siblings('[contenteditable]:first');
            }
            var caretNodeInfo = cursorHelper.getNodeInfo($editor);
            if (!caretNodeInfo) {
                return false;
            }
            return this.selectionNodeInfo.nodeId === caretNodeInfo.nodeId && this.selectionNodeInfo.nodeType === caretNodeInfo.nodeType;
        }
        /**
         * 判断选区是不是在思维笔记文档范围内
         */

    }, {
        key: "isValidSelection",
        value: function isValidSelection(caret) {
            var container = document.getElementById('mindnote-main');
            var target = void 0;
            if (caret.startContainer.nodeName !== '#text') {
                target = caret.startContainer;
            } else {
                target = caret.startContainer.parentNode;
            }
            return !!container && container.contains(target);
        }
        /**
         * 因为只读模式下无法获得光标，需要通过点击的位置来获得元素， 再进行下一步操作
         *
         * @private
         * @param {number} x
         * @param {number} y
         * @returns
         * @memberof SelectionController
         */

    }, {
        key: "findAndSelectElement",
        value: function findAndSelectElement(x, y) {
            // 当长按某个节点的时候选中这个区域的单词
            var element = document.elementFromPoint(x, y);
            if (!element) return;
            var $element = (0, _jquery2.default)(element);
            var $editor = cursorHelper.findContentEditable($element);
            this.selectionNodeInfo = cursorHelper.getNodeInfo($editor);
            if (!element) {
                return;
            }
            // 如果双击的区域是某个元素的空白区域，那么选中这个元素的所有文字
            if (element.className === 'note' || element.className === 'content') {
                this.fullySelectElement(element);
                return;
            }
            var caret = document.caretRangeFromPoint(x, y);
            // 如果双击的不是空白区域，那么选中一些文字
            var selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(caret);
            selection.modify('extend', 'forward', 'word');
            this.setRanges();
            this.setCaretPosition();
        }
    }, {
        key: "setRanges",
        value: function setRanges() {
            var selection = window.getSelection();
            if (!selection || !selection.rangeCount) return;
            var selectionRange = selection.getRangeAt(0).cloneRange();
            var startRange = document.createRange();
            var endRange = document.createRange();
            startRange.setStart(selectionRange.startContainer, selectionRange.startOffset);
            endRange.setStart(selectionRange.endContainer, selectionRange.endOffset);
            this.selectionStartRange = startRange;
            this.selectionEndRange = endRange;
        }
        /**
         * 全选某个元素
         */

    }, {
        key: "fullySelectElement",
        value: function fullySelectElement(element) {
            if (!element) {
                return;
            }
            cursorHelper.setCursorPosition((0, _jquery2.default)(element), {
                start: 0,
                end: (0, _jquery2.default)(element).text().length
            });
        }
        /**
         * 设置锚点位置
         */

    }, {
        key: "setCaretPosition",
        value: function setCaretPosition() {
            var selection = window.getSelection();
            if (!selection || !selection.anchorNode) {
                this.removeCaret();
                return;
            }
            if (selection.isCollapsed) {
                this.removeCaret();
                return;
            }
            var range = selection.getRangeAt(0);
            var clientRects = range.getClientRects();
            var startRect = clientRects.item(0);
            var endRect = clientRects.item(clientRects.length - 1);
            if (!startRect || !endRect) return;
            var lineHeight = startRect.bottom - startRect.top;
            var param = {
                lineHeight: lineHeight,
                startLeft: startRect.left,
                // 如果选择的起始点不是在文字之间，而是div边缘，则无法获得位置，改为获取div的左上角位置，如果出现起始点bottom更大，则以结束点的为准
                startBottom: (startRect.bottom > endRect.bottom ? endRect.bottom : startRect.bottom) + scrollY,
                endRight: endRect.right,
                endBottom: endRect.bottom + scrollY
            };
            window.lark.biz.selection.onSelectionChanged(param);
        }
        /**
         * 找到某个节点的最后一个文本节点，用于选区设置
         */

    }, {
        key: "findFirstTextNode",
        value: function findFirstTextNode(element) {
            var childNode = element.childNodes[0];
            if (childNode.nodeType === Node.TEXT_NODE) {
                return childNode;
            }
            return this.findFirstTextNode(childNode);
        }
        /**
         * 找到某个节点的最后一个文本节点，用于选区设置
         */

    }, {
        key: "findLastTextNode",
        value: function findLastTextNode(element) {
            var childNode = element.childNodes[element.childNodes.length - 1];
            if (childNode.nodeType === Node.TEXT_NODE) {
                return childNode;
            }
            return this.findLastTextNode(childNode);
        }
        /**
         * 移除锚点位置
         */

    }, {
        key: "removeCaret",
        value: function removeCaret() {
            window.lark.biz.selection.onSelectionChanged({
                lineHeight: 0,
                startLeft: 0,
                // 如果选择的起始点不是在文字之间，而是div边缘，则无法获得位置，改为获取div的左上角位置，如果出现起始点bottom更大，则以结束点的为准
                startBottom: 0,
                endRight: 0,
                endBottom: 0
            });
        }
    }, {
        key: "render",
        value: function render() {
            return null;
        }
    }]);
    return SelectionController;
}(React.PureComponent);

__decorate([(0, _$decorators.Bind)(), (0, _$decorators.Throttle)(50)], SelectionController.prototype, "handleSelectionChange", null);
__decorate([(0, _$decorators.Bind)()], SelectionController.prototype, "handleDragSelectionStart", null);
__decorate([(0, _$decorators.Bind)()], SelectionController.prototype, "handleDragSelectionEnd", null);
__decorate([(0, _$decorators.Bind)()], SelectionController.prototype, "handleLongPress", null);
__decorate([_$decorators.Bind], SelectionController.prototype, "handleKeyDown", null);
__decorate([_$decorators.Bind], SelectionController.prototype, "handleCut", null);
exports.default = SelectionController;

/***/ }),

/***/ 3724:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _PermissionController = __webpack_require__(3725);

var _PermissionController2 = _interopRequireDefault(_PermissionController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _PermissionController2.default;

/***/ }),

/***/ 3725:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(10);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(11);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(1);

var React = _interopRequireWildcard(_react);

var _editor = __webpack_require__(1663);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 复制功能管理，如果没有复制权限的话进行复制会进行提示
 */
var PermissionController = function (_React$PureComponent) {
    (0, _inherits3.default)(PermissionController, _React$PureComponent);

    function PermissionController() {
        (0, _classCallCheck3.default)(this, PermissionController);

        var _this = (0, _possibleConstructorReturn3.default)(this, (PermissionController.__proto__ || Object.getPrototypeOf(PermissionController)).apply(this, arguments));

        _this.handleCopyDenied = function () {
            _this.showToast();
        };
        _this.handleExportDenied = function () {
            _this.showToast();
        };
        /**
         * 不允许复制的话图片上右键不出现 contextMenu
         */
        _this.handleContextMenu = function (e) {
            if (!_this.isImageElement(e.target)) {
                return;
            }
            var otherPermission = _this.props.otherPermission;

            if (!otherPermission.copyable) {
                e.preventDefault();
            }
        };
        _this.handleCutOrCopy = function (e) {
            var target = e.target;
            var otherPermission = _this.props.otherPermission;
            // 来自于思维笔记外部的复制不会被阻止

            if (!_this.props.isFromMindnote(target)) {
                return;
            }
            if (!otherPermission.copyable) {
                e.preventDefault();
                _this.showToast();
            }
        };
        return _this;
    }

    (0, _createClass3.default)(PermissionController, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            document.addEventListener('copy', this.handleCutOrCopy);
            document.addEventListener('cut', this.handleCutOrCopy);
            document.addEventListener('contextmenu', this.handleContextMenu);
            this.props.editor.addEventListener(_editor.MindNoteEvent.COPY_DENIED, this.handleCopyDenied);
            this.props.editor.addEventListener(_editor.MindNoteEvent.EXPORT_DENED, this.handleExportDenied);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            document.removeEventListener('copy', this.handleCutOrCopy);
            document.removeEventListener('cut', this.handleCutOrCopy);
            document.removeEventListener('contextmenu', this.handleContextMenu);
            this.props.editor.removeEventListener(_editor.MindNoteEvent.COPY_DENIED, this.handleCopyDenied);
            this.props.editor.removeEventListener(_editor.MindNoteEvent.EXPORT_DENIED, this.handleExportDenied);
        }
    }, {
        key: 'isImageElement',
        value: function isImageElement(element) {
            if (!element) {
                return false;
            }
            return element.nodeName === 'IMG';
        }
    }, {
        key: 'showToast',
        value: function showToast() {
            this.props.copyTextWithoutPermission();
        }
    }, {
        key: 'render',
        value: function render() {
            return null;
        }
    }]);
    return PermissionController;
}(React.PureComponent);

exports.default = PermissionController;

/***/ }),

/***/ 3726:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ErrorHandler = __webpack_require__(3727);

var _ErrorHandler2 = _interopRequireDefault(_ErrorHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _ErrorHandler2.default;

/***/ }),

/***/ 3727:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(10);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(11);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _bytedSpark = __webpack_require__(1854);

var _toast = __webpack_require__(554);

var _toast2 = _interopRequireDefault(_toast);

var _MindNoteContext = __webpack_require__(1671);

var _types = __webpack_require__(2237);

var _manager = __webpack_require__(3728);

var _type = __webpack_require__(3730);

__webpack_require__(3731);

var _modalHelper = __webpack_require__(747);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TOAST_KEY = '__mindnote_net_state__';
var CLASS_PREFIX = 'mindnote-error-handler';

var ErrorHandler = function (_React$PureComponent) {
    (0, _inherits3.default)(ErrorHandler, _React$PureComponent);

    function ErrorHandler(props) {
        (0, _classCallCheck3.default)(this, ErrorHandler);

        var _this = (0, _possibleConstructorReturn3.default)(this, (ErrorHandler.__proto__ || Object.getPrototypeOf(ErrorHandler)).call(this, props));

        _this.state = {
            visiable: false,
            config: {
                title: '',
                message: '',
                buttons: []
            }
        };
        _this.errorHandler = function (error) {
            var config = (0, _manager.getErrorAlertConfig)(error);
            switch (config.type) {
                // 弹窗
                case _types.ErrorAlertType.DIALOG:
                    {
                        var btns = [];
                        config.buttons.forEach(function (item) {
                            var obj = {
                                text: item.text,
                                onPress: item.onClick
                            };
                            btns.push(obj);
                        });
                        (0, _modalHelper.showAlert)(config.title, config.message, btns);
                        break;
                    }
                // toast 提醒
                case _types.ErrorAlertType.TOAST:
                    {
                        _this.showToast(config.title);
                        break;
                    }
                default:
                    {
                        (0, _type.assertNever)(config.type);
                        break;
                    }
            }
        };
        _this.closeDialog = function () {
            _this.setState({
                visiable: false
            });
        };
        _this.bindEvents();
        return _this;
    }

    (0, _createClass3.default)(ErrorHandler, [{
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.unbindEvents();
        }
    }, {
        key: 'bindEvents',
        value: function bindEvents() {
            this.props.context.bind(_MindNoteContext.MindNoteEvent.ERROR, this.errorHandler);
        }
    }, {
        key: 'unbindEvents',
        value: function unbindEvents() {
            this.props.context.unbind(_MindNoteContext.MindNoteEvent.ERROR, this.errorHandler);
        }
    }, {
        key: 'getButtonClickHandler',
        value: function getButtonClickHandler(onClick) {
            var _this2 = this;

            if (!onClick) {
                return this.closeDialog;
            }
            return function () {
                var result = onClick();
                /* 返回 false 则不关闭弹窗，默认关闭 */
                if (result !== false) {
                    _this2.closeDialog();
                }
            };
        }
    }, {
        key: 'showToast',
        value: function showToast(text) {
            _toast2.default.error({
                content: text
            });
        }
    }, {
        key: 'renderFooter',
        value: function renderFooter(buttons) {
            var _this3 = this;

            return _react2.default.createElement("div", { className: CLASS_PREFIX + '--footer' }, buttons.map(function (button, index) {
                return _react2.default.createElement(_bytedSpark.Button, { key: index, type: button.type, onClick: _this3.getButtonClickHandler(button.onClick) }, button.text);
            }));
        }
    }, {
        key: 'render',
        value: function render() {
            return null;
            var _state = this.state,
                visiable = _state.visiable,
                config = _state.config;

            var footer = this.renderFooter(config.buttons);
            return _react2.default.createElement(_bytedSpark.Dialog, { className: CLASS_PREFIX, visible: visiable, title: config.title, onClose: this.closeDialog, footer: footer, center: true, escCancel: false, closeble: false, maskClick: false, width: 400, zIndex: 3000 }, config.message);
        }
    }]);
    return ErrorHandler;
}(_react2.default.PureComponent);

exports.default = ErrorHandler;

/***/ }),

/***/ 3728:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(t) {

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getErrorAlertConfig = getErrorAlertConfig;

var _types = __webpack_require__(2231);

var _error = __webpack_require__(1932);

var _types2 = __webpack_require__(2237);

var _feedbackHelper = __webpack_require__(3729);

/**
 * 弹窗标题
 */
var ErrorTitle = {
    SERVER_ERROR: t('error.server'),
    PERMISSION_ERROR: t('error.no_permission'),
    COLLABORATION_ERROR: t('common.prompt'),
    MODEL_ERROR: t('common.prompt'),
    NET_ERROR: t('mindnote.network_abnormal'),
    UNKNOWN_ERROR: t('request.unknown_mistake'),
    COMMON_ERROR: t('common.prompt')
};
/**
 * 刷新按钮，严重错误必须刷新网页
 */
var RELOAD_BUTTON = {
    text: t('common.confirm'),
    type: _types2.ButtonType.PRIMARY,
    onClick: function onClick() {
        window.reload();
        return true;
    }
};
/**
 * 联系我们按钮，打开 lark 值班号
 */
var CONTACT_US_BUTTON = {
    text: t('common.contact'),
    type: _types2.ButtonType.DEFAULT,
    onClick: function onClick() {
        (0, _feedbackHelper.clickFeedBack)();
        /* 不用关闭弹窗，方便用户截图 */
        return false;
    }
};
/**
 * 按错误码处理错误
 */
function getErrorConfigByCode(error) {
    switch (error.code) {
        // 权限相关问题
        case _types.StatusCode.COMMENT_PERMISSION_DENIED:
        case _types.StatusCode.WRITE_PERMISSION_DENIED:
        case _types.StatusCode.FORBIDDEN:
        case _types.StatusCode.LOGIN_REQUIRED:
        case _types.StatusCode.NOT_IN_SESSION:
            return {
                type: _types2.ErrorAlertType.DIALOG,
                title: ErrorTitle.PERMISSION_ERROR,
                message: t('mindnote.permission_error', error.code),
                buttons: [RELOAD_BUTTON]
            };
        // 协同相关问题
        case _types.StatusCode.CHAGESET_INVALID:
        case _types.StatusCode.SYNC_FAILED:
        case _types.StatusCode.CHANGESET_LIMIT_EXCEED:
        case _error.ClientErrorCode.APPLY_ACTION_FAILED:
        case _error.ClientErrorCode.INVALID_OPERATION:
        case _error.ClientErrorCode.TRANSFORM_FAILED:
            return {
                type: _types2.ErrorAlertType.DIALOG,
                title: ErrorTitle.COLLABORATION_ERROR,
                message: t('mindnote.colla_error', error.code),
                buttons: [RELOAD_BUTTON]
            };
        // 文档被删除
        case _types.StatusCode.OBJECT_DELETED:
        case _types.StatusCode.NOT_FOUND:
            return {
                type: _types2.ErrorAlertType.DIALOG,
                title: ErrorTitle.SERVER_ERROR,
                message: t('mindnote.deleted_tip'),
                buttons: [RELOAD_BUTTON]
            };
        // 客户端版本过旧
        case _types.StatusCode.VERSION_TOO_OLD:
        case _error.ClientErrorCode.REVISION_MAX_GAP_EXCEED:
            return {
                type: _types2.ErrorAlertType.DIALOG,
                title: ErrorTitle.COLLABORATION_ERROR,
                message: t('mindnote.version_too_old'),
                buttons: [RELOAD_BUTTON]
            };
        // 请求超时
        case _error.ClientErrorCode.REQUEST_TIMEOUT:
            return {
                type: _types2.ErrorAlertType.TOAST,
                title: ErrorTitle.NET_ERROR
            };
        // 服务端响应数据异常
        case _error.ClientErrorCode.RESPONSE_INVALID:
            return {
                type: _types2.ErrorAlertType.DIALOG,
                title: ErrorTitle.SERVER_ERROR,
                message: t('mindnote.server_api_error', error.code),
                buttons: [CONTACT_US_BUTTON, RELOAD_BUTTON]
            };
        // model 数据错误
        case _error.ClientErrorCode.RESPONSE_UNEXPECTED:
        case _error.ClientErrorCode.MODEL_INVALID_DATA:
            return {
                type: _types2.ErrorAlertType.DIALOG,
                title: ErrorTitle.MODEL_ERROR,
                message: t('mindnote.server_api_error', error.code),
                buttons: [CONTACT_US_BUTTON, RELOAD_BUTTON]
            };
        // 上传文件的文件名不合法
        case _error.ClientErrorCode.INVALID_FILENAME:
            return {
                type: _types2.ErrorAlertType.TOAST,
                title: t('drive.file_name_char')
            };
        // 未知错误码
        case _error.ClientErrorCode.UNKNOWN:
            return {
                type: _types2.ErrorAlertType.DIALOG,
                title: ErrorTitle.UNKNOWN_ERROR,
                message: t('mindnote.unknown_error', error.code),
                buttons: [CONTACT_US_BUTTON, RELOAD_BUTTON]
            };
        default:
            return null;
    }
}
/**
 * 按错误类型处理错误
 */
function getErrorConfigByType(error) {
    switch (error.type) {
        // 服务端错误
        case _error.ErrorType.SERVER_ERROR:
        case _error.ErrorType.RESPONSE_ERROR:
            return {
                type: _types2.ErrorAlertType.DIALOG,
                title: ErrorTitle.SERVER_ERROR,
                message: t('mindnote.server_api_error', error.code),
                buttons: [CONTACT_US_BUTTON, RELOAD_BUTTON]
            };
        // 未知类型错误
        case _error.ErrorType.UNKNOWN:
        default:
            return {
                type: _types2.ErrorAlertType.DIALOG,
                title: ErrorTitle.UNKNOWN_ERROR,
                message: t('mindnote.unknown_error', error.code),
                buttons: [CONTACT_US_BUTTON, RELOAD_BUTTON]
            };
    }
}
function getErrorAlertConfig(error) {
    // 针对错误码的错误处理
    var config = getErrorConfigByCode(error);
    // 按类型错误处理
    if (!config) {
        config = getErrorConfigByType(error);
    }
    return config;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(25)))

/***/ }),

/***/ 3729:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(t) {

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.clickFeedBack = undefined;

var _bindedActions = __webpack_require__(356);

var _bindedActions2 = _interopRequireDefault(_bindedActions);

var _apiUrls = __webpack_require__(307);

var _toast = __webpack_require__(554);

var _toast2 = _interopRequireDefault(_toast);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clickFeedBack = exports.clickFeedBack = function clickFeedBack() {
    var concatChatId = _bindedActions2.default.fetchDocsCustomerServiceChatId();
    concatChatId.then(function (res) {
        var chatId = res.payload && res.payload.chat_id;
        location.href = _apiUrls.LARK_CHAT_SCHEMA + chatId;
    }).catch(function (e) {
        _toast2.default.error({
            content: t('feedback.additional_fail')
        });
    });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(25)))

/***/ }),

/***/ 3730:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertNever = assertNever;
/**
 * 断言不应该出现的类型
 */
function assertNever(x) {
  console.error(x + " is not a never type");
}

/***/ }),

/***/ 3731:
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ 3732:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _index = __webpack_require__(3733);

var _index2 = _interopRequireDefault(_index);

var _index3 = __webpack_require__(3734);

var _index4 = _interopRequireDefault(_index3);

var _index5 = __webpack_require__(3737);

var _index6 = _interopRequireDefault(_index5);

var _index7 = __webpack_require__(3738);

var _index8 = _interopRequireDefault(_index7);

var _index9 = __webpack_require__(3740);

var _index10 = _interopRequireDefault(_index9);

var _index11 = __webpack_require__(3741);

var _index12 = _interopRequireDefault(_index11);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Plugin = function Plugin(editor) {
    var _this = this;

    (0, _classCallCheck3.default)(this, Plugin);

    this.init = function () {
        _this.statistics = new _index2.default();
        _this.screenshot = new _index4.default();
        _this.assetBrowser = new _index6.default(_this.editor);
        _this.imageUpload = new _index8.default(_this.editor);
        _this.scrollToView = new _index10.default(_this.editor);
        _this.editor.nativeplugins.scrollToView = _this.scrollToView;
        _this.editor.nativeplugins.imageUpload = _this.imageUpload;
        _this.mention = new _index12.default(_this.editor);
    };
    this.destroy = function () {
        _this.statistics.destroy();
        _this.assetBrowser.destroy();
        _this.scrollToView.destroy();
        _this.mention.destroy();
    };
    console.log('init plugin');
    this.editor = editor;
    this.init();
};

exports.default = Plugin;

/***/ }),

/***/ 3733:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _tea = __webpack_require__(42);

var _performanceStatisticHelper = __webpack_require__(311);

var _suiteHelper = __webpack_require__(52);

var _$constants = __webpack_require__(5);

var _eventEmitter = __webpack_require__(110);

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var editorInfo = void 0;

var Statistics = function Statistics(editor) {
  var _this = this;

  (0, _classCallCheck3.default)(this, Statistics);

  this.init = function () {
    _this.destroy();
    _eventEmitter2.default.on(_$constants.events.MOBILE.DOCS.Statistics.fetchClientVarsEnd, fetchClientVarsEnd);
    _eventEmitter2.default.on(_$constants.events.MOBILE.DOCS.Statistics.fetchClientVarsStart, fetchClientVarsStart);
    _eventEmitter2.default.on(_$constants.events.MOBILE.DOCS.Statistics.renderEnd, renderEnd);
    _eventEmitter2.default.on(_$constants.events.MOBILE.DOCS.Statistics.fetchClientVarDelete, fetchClientVarDelete);
  };

  this.destroy = function () {
    _eventEmitter2.default.off(_$constants.events.MOBILE.DOCS.Statistics.fetchClientVarsEnd, fetchClientVarsEnd);
    _eventEmitter2.default.off(_$constants.events.MOBILE.DOCS.Statistics.fetchClientVarsStart, fetchClientVarsStart);
    _eventEmitter2.default.off(_$constants.events.MOBILE.DOCS.Statistics.renderEnd, renderEnd);
    _eventEmitter2.default.off(_$constants.events.MOBILE.DOCS.Statistics.fetchClientVarDelete, fetchClientVarDelete);
  };

  this.init();
};

exports.default = Statistics;
;

var normalData = {
  docs_result_key: 'other',
  docs_result_code: 0
};
var fetchClientVarsEnd = function fetchClientVarsEnd(data) {
  var token = (0, _suiteHelper.getToken)();
  var recordData = _performanceStatisticHelper.REPORTDATA[token];
  // 防止重复打点，REPORTDATA[token + '-' + 'fetchClientVarsStart']有开始后才打点，新建文档的时候token会不一样，所以加上这个判断；
  if (_performanceStatisticHelper.REPORTDATA[token + '-' + 'fetchClientVarsEnd'] || !_performanceStatisticHelper.REPORTDATA[token + '-' + 'fetchClientVarsStart']) return;
  var endTime = new Date().getTime();
  _performanceStatisticHelper.REPORTDATA[token + '-' + 'fetchClientVarsEnd'] = 1;
  _performanceStatisticHelper.REPORTDATA[token + '-' + 'docs_result_code'] = data.docs_result_code;
  _performanceStatisticHelper.REPORTDATA[token + '-' + 'startTime_renderDocStart'] = endTime;
  recordData.time_fetchClientVars = endTime - (_performanceStatisticHelper.REPORTDATA[token + '-' + 'startTime_fetchClientVarsStart'] || 0);
  var sendData = {
    data: Object.assign({
      stage: 'pull_data',
      file_id: (0, _tea.getEncryToken)()
    }, normalData, recordData, data),
    event_type: 3
  };
  console.info('fileopen pull_data_end: ' + JSON.stringify(sendData));
  window.lark.biz.statistics.sendEvent(sendData);
  if (!data.docs_result_code) {
    // 没有异常
    var renderDocData = {
      data: {
        stage: 'render_doc',
        file_id: (0, _tea.getEncryToken)()
      },
      event_type: 2
    };
    _performanceStatisticHelper.REPORTDATA[token + '-' + 'render_doc_start'] = 1;
    console.info('fileopen render_doc_start: ' + JSON.stringify(renderDocData));
    window.lark.biz.statistics.sendEvent(renderDocData);
  } else if (data.docs_result_code < 0) {
    var _sendData = {
      result_code: data.docs_result_code,
      data: Object.assign({}, recordData)
    };
    console.info('fileopen failEvent: ' + JSON.stringify(_sendData));
    window.lark.biz.util.failEvent(_sendData);
  }
};
var fetchClientVarsStart = function fetchClientVarsStart(data) {
  var token = (0, _suiteHelper.getToken)();
  var recordData = _performanceStatisticHelper.REPORTDATA[token] || {};
  var sendData = {
    data: Object.assign({
      stage: 'pull_data',
      file_id: (0, _tea.getEncryToken)()
    }, recordData),
    event_type: 2
  };
  // 默认为doc
  if (!sendData.data.file_type) {
    sendData.data.file_type = 'doc';
  }
  if (_performanceStatisticHelper.REPORTDATA[token + '-' + 'fetchClientVarsStart']) return;
  _performanceStatisticHelper.REPORTDATA[token + '-' + 'fetchClientVarsStart'] = 1;
  var endTime = new Date().getTime();
  _performanceStatisticHelper.REPORTDATA[token + '-' + 'startTime_fetchClientVarsStart'] = endTime;
  _performanceStatisticHelper.REPORTDATA[token + '-' + 'time_beforefetchClientVars'] = endTime - (_performanceStatisticHelper.REPORTDATA[token + '-' + 'startTime_openfile'] || 0);
  console.info('fileopen pull_data_start: ' + JSON.stringify(sendData));
  window.lark && window.lark.biz.statistics.sendEvent(sendData);
  try {
    console.info('scm: ' + JSON.stringify(window.scm));
    var newScm = {};
    for (var i in window.scm) {
      newScm['scm_' + i] = window.scm[i];
    }
    window.lark.biz.statistics.reportEvent({
      event_name: 'scm',
      data: Object.assign({}, newScm)
    });
  } catch (e) {
    console.log(e);
  }
};

var renderEnd = function renderEnd() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var token = (0, _suiteHelper.getToken)();
  var recordData = _performanceStatisticHelper.REPORTDATA[token];
  if (_performanceStatisticHelper.REPORTDATA[token + '-' + 'render_doc_end'] || !_performanceStatisticHelper.REPORTDATA[token + '-' + 'fetchClientVarsStart']) return;
  _performanceStatisticHelper.REPORTDATA[token + '-' + 'render_doc_end'] = 1;
  var endTime = new Date().getTime();
  recordData.time_renderDoc = endTime - (_performanceStatisticHelper.REPORTDATA[token + '-' + 'startTime_renderDocStart'] || 0);
  recordData.time_fileopen = endTime - (_performanceStatisticHelper.REPORTDATA[token + '-' + 'startTime_openfile'] || 0);
  recordData.time_beforefetchClientVars = _performanceStatisticHelper.REPORTDATA[token + '-' + 'time_beforefetchClientVars'];
  window.lark.biz.statistics.sendEvent({
    data: Object.assign({}, recordData, {
      file_id: (0, _tea.getEncryToken)()
    }),
    event_type: 1 // doc visible for user
  });
  var sendData = {
    data: Object.assign({
      stage: 'render_doc'
    }, recordData, normalData, data, {
      isBlockRender: editorInfo && editorInfo.blockRender && editorInfo.blockRender.getUsageState ? editorInfo.blockRender.getUsageState() : false,
      file_id: (0, _tea.getEncryToken)()
    }),
    event_type: 3
  };
  window.lark.biz.statistics.sendEvent(sendData);
  console.info('fileopen render_doc_end: ' + JSON.stringify(sendData));
  // log空白文档秒开率,特殊上报；
  var captureData = Object.assign({}, recordData, window.EDITOR_RENDER_LOG || {}, _performanceStatisticHelper.REPORTDATA['editor'], {
    file_id: (0, _tea.getEncryToken)()
  });
  console.info('-----------fileopen-------------');
  console.info(JSON.stringify(captureData));
  if (recordData.text_length === 2) {
    window.Raven && window.Raven.captureMessage('fileopen:blank file', {
      level: 'info',
      tags: {
        reporter: 'statistics',
        scm: JSON.stringify(window.scm || {})
      },
      extra: Object.assign({}, captureData)
    });
  }
  (0, _performanceStatisticHelper.setPageState)(_performanceStatisticHelper.PAGE_STATE.RENDER_END);
};
var fetchClientVarDelete = function fetchClientVarDelete(command) {
  var token = (0, _suiteHelper.getToken)();
  // 解决DM-1674。
  if (command !== 'doClear') {
    if (_performanceStatisticHelper.REPORTDATA[token + '-' + 'fetchClientVarsStart'] && !_performanceStatisticHelper.REPORTDATA[token + '-' + 'fetchClientVarsEnd']) return;
    if (_performanceStatisticHelper.REPORTDATA[token + '-' + 'render_doc_start'] && !_performanceStatisticHelper.REPORTDATA[token + '-' + 'render_doc_end']) return;
  }
  (0, _performanceStatisticHelper.resetREPORTDATA)();
};

/***/ }),

/***/ 3734:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(t) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

__webpack_require__(3735);

var _waitLoader = __webpack_require__(3736);

var _logger = __webpack_require__(305);

var _logger2 = _interopRequireDefault(_logger);

var _browserHelper = __webpack_require__(27);

var _browserHelper2 = _interopRequireDefault(_browserHelper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var bodyClassName = '';
var timeOut = null;
var hasRuned = null;

var ScreenShot = function ScreenShot(editor) {
  (0, _classCallCheck3.default)(this, ScreenShot);
  this.className = 'ScreenShot';

  this.init = function () {
    window.native.screenshot = function (state) {
      if (state === 0) {
        beforeScreenshot();
        screenReady();
      } else {
        afterScreenshot();
      }
    };
  };

  this.init();
};

exports.default = ScreenShot;

function screenReady(that) {
  hasRuned = false;
  (0, _waitLoader.waitAllLoad)().then(function () {
    timeOut = setTimeout(function () {
      clearTimeout(timeOut);
      !hasRuned && window.lark.biz.doc.screenshotReady({ success: true });
      hasRuned = true;
    }, 20);
  });
  timeOut = setTimeout(function () {
    // 10s超时
    clearTimeout(timeOut);
    if (!hasRuned) {
      window.lark.biz.doc.screenshotReady({ success: false });
      hasRuned = true;
      _logger2.default.info('导出长图超时显示');
    }
  }, 10000);
}
function beforeScreenshot() {
  var body = document.getElementsByTagName('body')[0];
  bodyClassName = body.className;
  if (bodyClassName.indexOf('screenshoting') === -1) {
    body.className = bodyClassName + ' screenshoting';
  }
  initFooter();
}
function afterScreenshot(editor) {
  var body = document.getElementsByTagName('body')[0];
  body.className = bodyClassName;
  hasRuned = true;
}
function initFooter() {
  var domFooter = document.getElementById('screen-footer-wrap');
  if (!domFooter) {
    var footerHtml = '<div class="screen-footer-wrap" id="screen-footer-wrap">\n        <div class="screenFooterContent">\n        ' + (_browserHelper2.default.isDocsSDK ? t('mobile.screenshot.notify') : t('mobile.screenshot.notify_docsapp')) + '\n        </div>\n      </div>';
    var elem = document.createElement('div');
    elem.innerHTML = footerHtml;
    document.getElementById('mindnote-main').appendChild(elem);
    domFooter = document.getElementById('screen-footer-wrap');
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(25)))

/***/ }),

/***/ 3735:
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ 3736:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _es6Promise = __webpack_require__(779);

var _es6Promise2 = _interopRequireDefault(_es6Promise);

var _logger = __webpack_require__(305);

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import _each from 'lodash/each';
// const AttributePool = require('$etherpad/static/js/AttributePool');
var container = '.mindnote-paper';
window.allSheetIds = [];
var duration = 500;
function waitAllLoad() {
  if (isMindnote()) {
    return _es6Promise2.default.all([waitFirstScreenImageLoaded(), waitFirstScreenMentionLoaded()]).then(function () {
      return { code: 0 };
    });
  }
}

function waitFirstScreenImageLoaded() {
  return new _es6Promise2.default(function (resolve, reject) {
    var images = document.querySelectorAll(container + ' img');
    var allImageNum = images.length;
    var loadedNum = 0;
    var isReject = false;
    if (images) {
      for (var i = 0; i < allImageNum; i++) {
        var img = images[i];
        if (!img.complete) {
          img.onload = function () {
            loadedNum++;
            if (loadedNum === allImageNum) {
              resolve({});
            }
          };
          img.onerror = function () {
            if (!isReject) {
              var reason = 'image loaded fail';
              postError({ reason: reason });
              reject(new Error(reason));
            }
          };
        } else {
          loadedNum++;
        }
      }
    }
    if (loadedNum === allImageNum) {
      resolve({});
    }
  });
}

// function waitSheetLoaded() {
//   return new Promise(function (resolve, reject) {
//     let checkTimes = 0;
//     const maxCheckTimes = 250;
//     // 轮训是否首屏SheetLoaded都渲染完了
//     setTimeout(function checkSheetLoaded() {
//       checkTimes++;
//       if (checkTimes > maxCheckTimes) {
//         return ({ code: -1 });
//       }
//       if (isSheetLoaded()) {
//         resolve({});
//       } else {
//         setTimeout(checkSheetLoaded, duration);
//       }
//     }, duration);
//   });
// }
// function isSheetLoaded() {
//   const canvasList = document.querySelectorAll('.spreadsheet-canvas');
//   if (canvasList) {
//     const sheetLoaded = document.querySelectorAll('.spread-loaded') || [];
//     if (sheetLoaded.length === canvasList.length) {
//       let result = true;
//       for (const i in canvasList) {
//         if (canvasList[i].width === 0) {
//           result = false;
//         }
//       }
//       return result;
//     }
//   } else {
//     return false;
//   }
// }
function waitFirstScreenMentionLoaded() {
  return new _es6Promise2.default(function (resolve, reject) {
    var checkTimes = 0;
    var maxCheckTimes = 250;
    // 轮训是否首屏mention都渲染完了
    setTimeout(function checkMentionLoaded() {
      checkTimes++;
      if (checkTimes > maxCheckTimes) {
        return postError({ reason: 'mention loaded time out' });
      }
      if (isMentionLoaded()) {
        resolve({});
      } else {
        setTimeout(checkMentionLoaded, duration);
      }
    }, duration);
  });
}

function isMentionLoaded() {
  var chatMentions = document.querySelectorAll('.mention-type_5');
  var firstScreenMentions = chatMentions;
  for (var i = 0, len = firstScreenMentions.length; i < len; i++) {
    var mention = firstScreenMentions[i];
    var title = mention.querySelector('.mention-chat-tit').innerText;
    if (!title) {
      return false;
    }
  }
  return true;
}
function postError(param) {
  _logger2.default.info(param);
}

function isMindnote() {
  return (/\/mindnote\//.test(location.href)
  );
}

module.exports = {
  waitAllLoad: waitAllLoad
};

/***/ }),

/***/ 3737:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AssetBrowser = function () {
    function AssetBrowser(editor) {
        (0, _classCallCheck3.default)(this, AssetBrowser);

        this.editor = editor;
        this.init();
    }

    (0, _createClass3.default)(AssetBrowser, [{
        key: 'init',
        value: function init() {
            var _this = this;

            window.native.assetBrowser.deleteImg = function (data) {
                if (!data.uuid) return;
                var imgdata = data.uuid.split('___');
                _this.editor.removeImage(imgdata[0], imgdata[1]);
                window.lark.biz.util.deleteImgCallback(Object.assign({}, data, {
                    success: true
                }));
            };
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            console.info('destroy assetBrowser');
        }
    }]);
    return AssetBrowser;
}();

exports.default = AssetBrowser;

/***/ }),

/***/ 3738:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(t) {

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _typeof2 = __webpack_require__(82);

var _typeof3 = _interopRequireDefault(_typeof2);

var _modalHelper = __webpack_require__(747);

var _eventEmitter = __webpack_require__(110);

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _const = __webpack_require__(3739);

var _uploadHelper = __webpack_require__(596);

var _suiteHelper = __webpack_require__(52);

var _common = __webpack_require__(19);

var _$decorators = __webpack_require__(553);

var _teaLogger = __webpack_require__(450);

var _teaLogger2 = _interopRequireDefault(_teaLogger);

var _editor = __webpack_require__(1663);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// import { setData } from '$m_helpers/offlineEditHelper';
// import { getToken } from '$common/helpers/suiteHelper';
// import { NUM_SUITE_TYPE } from '$constants/common';
// import { restoreRepsIfNeeded } from '$m_helpers/repHelper';

// import events from '$constants/events';

// types

var Uploader = function () {
    function Uploader(editor) {
        var _this = this;

        (0, _classCallCheck3.default)(this, Uploader);

        this.setFocusNode = function () {
            _this.focusNode = _this.editor.getFocusNode() || { node: { id: '' } };
        };
        this.getFocusNode = function () {
            return _this.focusNode;
        };
        this.selectNativeImage = function () {
            window.lark.biz.util.selectImage({
                compress: true,
                maxSize: _const.IMAGE_MAX_SIZE,
                maxHeight: 1000,
                maxWidth: 1000,
                autoRotate: true,
                callback: function callback(res) {
                    if (res.code !== 0) {
                        // return error
                    }
                    var thumbs = res.thumbs;

                    thumbs = thumbs.map(function (v) {
                        v = typeof v === 'string' ? JSON.parse(v) : v;
                        // v.uuid = (Math.random() + '').split('.').join('');
                        // v.src = 'https://docs.bytedance.net/file/f/5sNv61S40YJ0GHneREjxPh/';
                        return v;
                    });
                    var focusNode = _this.getFocusNode();
                    thumbs.forEach(function (imgOriginData) {
                        var curUploadImg = _this.editor.addImage(focusNode.node.id, {
                            uri: imgOriginData.src,
                            ow: parseFloat(imgOriginData.width),
                            oh: parseFloat(imgOriginData.height)
                        });
                        var imgData = {};
                        imgData.uuids = [imgOriginData.uuid];
                        imgData.url = _const.UPLOAD_URL;
                        imgData.file_url = imgOriginData.src;
                        imgData.doc_url = window.location.href;
                        imgData.token = (0, _suiteHelper.getToken)();
                        imgData.multiparts = {
                            token: imgData.token,
                            obj_type: _common.NUM_SUITE_TYPE.MINDNOTE
                        };
                        _this.uploadFile(imgData, curUploadImg);
                    });
                }
            });
        };
        this.editor = editor;
        this.selectNativeImage();
    }

    (0, _createClass3.default)(Uploader, [{
        key: "uploadFile",
        value: function uploadFile(data, uploader) {
            (0, _uploadHelper.uploadFile)(Object.assign({}, data, {
                callback: function callback(ret) {
                    if (ret && ret.data && (ret.data.url || ret.data.data && ret.data.data.url)) {
                        console.info('upload image file:  success');
                        uploader.onProgress(100);
                        ret.data.url = ret.data.url.replace(window.location.origin, '');
                        uploader.onSuccess(ret.data.url);
                        _eventEmitter2.default.trigger('onKeyboard', [{ isOpenKeyboard: 0 }]);
                    } else {
                        /* 图片上传失败 */
                        (0, _modalHelper.showAlert)(t('common.error'), t('mindnote.upload_image_failed'), [{
                            text: t('common.determine'),
                            onPress: function onPress(e) {
                                uploader.onError(null);
                            }
                        }]);
                    }
                }
            }));
        }
    }]);
    return Uploader;
}();

exports.default = Uploader;

__decorate([(0, _$decorators.Bind)(), (0, _teaLogger2.default)('toggle_attribute', function (_ref) {
    var context = _ref.context,
        store = _ref.store;

    return {
        action: 'upload_image',
        attr_op_status: 'effective',
        eventType: 'mouseclick',
        source: 'outline_toolbar',
        mode: 'outline',
        view_level: _editor.teaUtils.getCurrentLevel(),
        select_type: _editor.teaUtils.getCurrentSelectType()
    };
})], Uploader.prototype, "uploadFile", null);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(25)))

/***/ }),

/***/ 3739:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var uploadPrefix = exports.uploadPrefix = 'image-upload';
var pluginName = exports.pluginName = 'imageUpload';
var MIN_RECT = exports.MIN_RECT = 20; // 最小的缩放尺寸
var containerPaddingTop = exports.containerPaddingTop = 10;
var POINTS = exports.POINTS = ['tl', 'tc', 'tr', 'cr', 'br', 'bc', 'bl', 'lc'];
var IMAGE_LOAD_TIMEOUT = exports.IMAGE_LOAD_TIMEOUT = 90 * 1000; // 90s加载图片超时
var IMAGE_MAX_SIZE = exports.IMAGE_MAX_SIZE = 1024 * 1024 * 20;
var MARK_DECODE_IMAGE = exports.MARK_DECODE_IMAGE = 'mark_decode_image';
var UPLOAD_URL = exports.UPLOAD_URL = '/api/file/upload/';

/***/ }),

/***/ 3740:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _editor = __webpack_require__(1663);

var _scrollHelper = __webpack_require__(751);

var _debounce2 = __webpack_require__(556);

var _debounce3 = _interopRequireDefault(_debounce2);

var _browserHelper = __webpack_require__(27);

var _browserHelper2 = _interopRequireDefault(_browserHelper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Scroll = function Scroll(editor) {
    var _this = this;

    (0, _classCallCheck3.default)(this, Scroll);

    this.init = function () {
        _this.editor.addEventListener(_editor.MindNoteEvent.EDIT, _this.toScroll);
        _this.editor.addEventListener(_editor.MindNoteEvent.CHANGE, _this.toScroll);
        // ios focus 会自己滚动，不用管
        if (!_browserHelper2.default.ios) {
            _this.editor.addEventListener(_editor.MindNoteEvent.INPUT_FOCUS, _this.toScroll);
        }
    };
    this.destroy = function () {
        _this.editor.removeEventListener(_editor.MindNoteEvent.EDIT, _this.toScroll);
        _this.editor.removeEventListener(_editor.MindNoteEvent.CHANGE, _this.toScroll);
        if (!_browserHelper2.default.ios) {
            _this.editor.removeEventListener(_editor.MindNoteEvent.INPUT_FOCUS, _this.toScroll);
        }
    };
    this.toScroll = (0, _debounce3.default)(function () {
        if (!window.getSelection().focusNode) return;
        if (window._currentViewHeight === window.innerHeight) return; // 等待js-bridege成功；
        var gap = 30;
        var innerHeight = (window._currentViewHeight || window.innerHeight || document.documentElement.clientHeight) - gap;
        var container = document.getElementById('mindnote-main');
        var target = window.getSelection().focusNode.parentElement;
        var cursorRect = $(target).offset();
        var outerTop = $(container).offset().top;
        var distBelowTop = cursorRect.top + outerTop - window.scrollY;
        var distAboveBottom = window.scrollY + innerHeight - (cursorRect.top + outerTop + $(target).height());
        if (distBelowTop < 0) {
            (0, _scrollHelper.wrapScroll)({ distance: distBelowTop, useAnimate: true });
        } else if (distAboveBottom < 0) {
            (0, _scrollHelper.wrapScroll)({ distance: -distAboveBottom, useAnimate: true });
        }
    }, 10, { leading: false, trailing: true });
    this.editor = editor;
    this.init();
};

exports.default = Scroll;

/***/ }),

/***/ 3741:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(t) {

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _regenerator = __webpack_require__(12);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(99);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _typeof2 = __webpack_require__(82);

var _typeof3 = _interopRequireDefault(_typeof2);

var _get2 = __webpack_require__(14);

var _get3 = _interopRequireDefault(_get2);

var _assign2 = __webpack_require__(105);

var _assign3 = _interopRequireDefault(_assign2);

var _noop2 = __webpack_require__(304);

var _noop3 = _interopRequireDefault(_noop2);

var _editor = __webpack_require__(1663);

var _jsBase = __webpack_require__(752);

var _const = __webpack_require__(2238);

var _apis = __webpack_require__(3742);

var _teaLogger = __webpack_require__(450);

var _teaLogger2 = _interopRequireDefault(_teaLogger);

var _generateRequestIdHelper = __webpack_require__(457);

var _permissionHelper = __webpack_require__(302);

var _suiteHelper = __webpack_require__(52);

var _common = __webpack_require__(19);

var _highlight = __webpack_require__(1938);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};

/**
 * 通知延迟发送时间，期间可以撤销
 */
var DELAY_TIME = 6000;

var MentionPlugin = function () {
    function MentionPlugin(editor) {
        var _this = this;

        (0, _classCallCheck3.default)(this, MentionPlugin);

        this.options = null;
        this.requestId = '';
        this.selectIndex = -1;
        /**
         * 解析粘贴的 url
         */
        this.parsePasteUrl = function (options) {
            var result = (0, _apis.getMentionByUrl)(options.text);
            if (result) {
                result.then(function (res) {
                    if (res) {
                        options.onSuccess(options, {
                            id: '',
                            type: _editor.TextType.Mention,
                            mentionNotify: false,
                            mentionType: res.type,
                            token: res.token,
                            link: res.url,
                            text: res.title,
                            textEn: res.title
                        });
                    }
                }).catch(function (err) {
                    console.error(err);
                });
            }
        };
        /**
         * 打开 @ 人的资料页面
         */
        this.openUserProfile = function (data) {
            window.lark.biz.util.showProfile({
                userId: data.token
            });
        };
        /**
         * 打开/关闭/更新 @
         */
        this.updateMention = function (options) {
            var isUpdate = _this.options && _this.options.show && options.show;
            _this.options = (0, _assign3.default)({}, _this.options || {}, options);
            if (!options.show) {
                _this.closeMention();
            } else if (!isUpdate) {
                _this.openMention();
            } else {
                _this.updateMentionSearch(options.searchWord);
            }
        };
        /**
         * @ 选中后回调
         */
        this.onSuccess = function (data) {
            if (!_this.options) {
                return;
            }
            if (data.canceled || !data.data || !data.data.result_list || !data.data.result_list[0]) {
                _this.options.onSelect(null);
            } else {
                var item = data.data.result_list[0];
                _this.requestId = (0, _generateRequestIdHelper.generateRequestId)();
                _this.selectIndex = item.sequenceNum || 0;
                // 成功回调
                _this.confirmMention({
                    id: _this.options.id,
                    mentionType: Number(item.type) || 0,
                    mentionNotify: item.type === 0,
                    // 文档为 token，用户为 id
                    token: item.token || item.id || '',
                    // 文档为 url，用户为 avatar_url
                    link: item.url || item.avatar_url || '',
                    // 用户：iOS：item.en_name item.cn_name 安卓：item.en_name item.name；文档：IOS：item.content （base 64 编码）安卓：item.title
                    textEn: item.en_name || item.name || item.cn_name || item.title || _jsBase.Base64.decode(item.content || '') || '',
                    text: item.cn_name || item.name || item.en_name || item.title || _jsBase.Base64.decode(item.content || '') || '',
                    atHolderId: _this.options.atHolderId,
                    nodeId: _this.options.nodeId,
                    isNote: _this.options.isNote
                });
                // 给 @ 人发消息
                if (Number(item.type) === _const.TYPE_ENUM.USER && item.id !== window.User.id) {
                    _this.sendNotifyAndSetPermission(item.id, item.name || item.cn_name || item.en_name, _this.options.id);
                }
            }
        };
        this.editor = editor;
        this.init();
    }

    (0, _createClass3.default)(MentionPlugin, [{
        key: "init",
        value: function init() {
            this.editor.addEventListener(_editor.MindNoteEvent.UPDATE_MENTION, this.updateMention);
            this.editor.addEventListener(_editor.MindNoteEvent.OPEN_USER_PROFILE, this.openUserProfile);
            this.editor.addEventListener(_editor.MindNoteEvent.PASTE_URL, this.parsePasteUrl);
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.editor.removeEventListener(_editor.MindNoteEvent.UPDATE_MENTION, this.updateMention);
            this.editor.removeEventListener(_editor.MindNoteEvent.OPEN_USER_PROFILE, this.openUserProfile);
            this.editor.removeEventListener(_editor.MindNoteEvent.PASTE_URL, this.parsePasteUrl);
        }
        /**
         * 打开 mention
         */

    }, {
        key: "openMention",
        value: function openMention() {
            if (this.options) {
                (0, _highlight.scrollAtHolderToTop)(this.options.atHolderId);
            }
            (0, _apis.atFinder)('', true, this.onSuccess);
        }
        /**
         * 更新 mention 搜索参数
         */

    }, {
        key: "updateMentionSearch",
        value: function updateMentionSearch(searchWord) {
            (0, _apis.atFinder)(searchWord, true, this.onSuccess);
        }
        /**
         * 关闭 mention
         */

    }, {
        key: "closeMention",
        value: function closeMention() {
            (0, _apis.atFinder)('', false, _noop3.default);
        }
        /**
         * 确定 @
         */

    }, {
        key: "confirmMention",
        value: function confirmMention(data) {
            this.options.onSelect(data);
        }
        /**
         * 给 @ 用户通知 & 设置文档权限
         */

    }, {
        key: "sendNotifyAndSetPermission",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(userId, userName, mentionId) {
                var _this2 = this;

                var shouldSetPermission, timer;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                // 因为安全性问题 mention 不再自动赋权
                                shouldSetPermission = false;
                                // let shouldSetPermission = false;
                                // // 1. 判断被 @ 的用户是否有阅读权限
                                // const readable = await this.getPermission(userId, 'readable');
                                // if (readable === false) {
                                //   // 2. 判断当前用户是否有分享权限
                                //   const shareable = await this.getPermission(window.User.id, 'shareable');
                                //   if (shareable === true) {
                                //     // 3. 给被 @ 的用户设置阅读权限
                                //     shouldSetPermission = true;
                                //   }
                                // }
                                // 定时器

                                timer = window.setTimeout(function () {
                                    // 通知
                                    (0, _apis.notifyAtUser)(userId, mentionId, _this2.requestId).then(function (data) {
                                        var notifyId = (0, _get3.default)(data, ['data', 'entities', 'users', userId]);
                                        if (notifyId && _this2.options && _this2.options.setNotifyId) {
                                            _this2.options.setNotifyId({
                                                mentionId: _this2.options.id,
                                                nodeId: _this2.options.nodeId,
                                                isNote: _this2.options.isNote,
                                                notifyId: notifyId
                                            });
                                        }
                                    }).catch(function (err) {
                                        console.error(err);
                                    });
                                    // 赋权
                                    if (shouldSetPermission) {
                                        (0, _apis.updateUserPermission)({
                                            token: (0, _suiteHelper.getToken)(),
                                            type: _common.NUM_FILE_TYPE.MINDNOTE,
                                            owner_id: userId,
                                            owner_type: _common.OWNER_TYPE_UNDER_SHARE_FOLDER.USER,
                                            permission: _common.PERMISSION.READABLE,
                                            source: 'mindnote_mention'
                                        }).catch(function (err) {
                                            console.error(err);
                                        });
                                    }
                                    window.lark.biz.util.hideTips({ onSuccess: _noop3.default });
                                }, DELAY_TIME);
                                // toast

                                window.lark.biz.util.showTips({
                                    items: [{
                                        id: 1,
                                        base64Image: '',
                                        text: ''
                                    }, {
                                        id: 2,
                                        base64Image: '',
                                        text: shouldSetPermission ? t('permission.mention.user', userName) : t('notice.mention.user', userName)
                                    }, {
                                        id: 3,
                                        base64Image: '',
                                        text: t('mobile.mention.notify.undo')
                                    }],
                                    onSuccess: function onSuccess(id) {
                                        if (id === 3) {
                                            window.clearTimeout(timer);
                                            window.lark.biz.util.hideTips({ onSuccess: _noop3.default });
                                        }
                                    }
                                });

                            case 3:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function sendNotifyAndSetPermission(_x, _x2, _x3) {
                return _ref.apply(this, arguments);
            }

            return sendNotifyAndSetPermission;
        }()
        /**
         * 获取用户的权限
         */

    }, {
        key: "getPermission",
        value: function getPermission(userId, permissionType) {
            return (0, _apis.getUserPermission)((0, _suiteHelper.getToken)(), _common.NUM_FILE_TYPE.MINDNOTE, userId).then(function (res) {
                var code = (0, _get3.default)(res, ['code']);
                var permission = (0, _get3.default)(res, ['data', 'permissions']);
                if (code === 0 && permission && (0, _permissionHelper.permission2Booleans)(permission)[permissionType]) {
                    return Promise.resolve(true);
                } else {
                    return Promise.resolve(false);
                }
            }).catch(function (err) {
                console.error(err);
                return Promise.resolve(false);
            });
        }
    }]);
    return MentionPlugin;
}();

exports.default = MentionPlugin;

__decorate([(0, _teaLogger2.default)('docs_open_mention', function (_ref2) {
    var context = _ref2.context,
        store = _ref2.store;

    return {
        source: context.options.fromToolbar ? 'toolbar' : 'keyboard',
        module: 'mindnote',
        zone: 'default',
        position: context.options && context.options.isNote ? 'note' : 'text'
    };
})], MentionPlugin.prototype, "openMention", null);
__decorate([(0, _teaLogger2.default)('docs_confirm_mention', function (_ref3, data) {
    var context = _ref3.context,
        store = _ref3.store;

    var typeNum = _const.MENTION_TO_SUITE[data.mentionType] || data.mentionType;
    var typeName = _common.mapTypeNumToFileType[typeNum] || '';
    return {
        mention_type: data.mentionType === _const.TYPE_ENUM.USER ? 'user' : 'link_file',
        source: context.options.fromToolbar ? 'toolbar' : 'keyboard',
        zone: 'default',
        mention_sequence_num: context.selectIndex,
        mention_sub_type: typeName,
        uuid: context.requestId,
        module: 'mindnote',
        position: context.options && context.options.isNote ? 'note' : 'text'
    };
})], MentionPlugin.prototype, "confirmMention", null);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(25)))

/***/ }),

/***/ 3742:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getMentionByUrl = undefined;

var _regenerator = __webpack_require__(12);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(99);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

/**
 * url 转为 mention
 */
var getMentionByUrl = exports.getMentionByUrl = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(url) {
        var result, typeNum, isSuiteType;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        result = (0, _urlHelper.parseOriginUrl)(url || '');

                        if (!(result.type && result.token)) {
                            _context.next = 6;
                            break;
                        }

                        typeNum = _common.mapFileType2TypeNum[result.type] || -1;
                        isSuiteType = !!_const.SUITE_TO_MENTION[typeNum];

                        if (!isSuiteType) {
                            _context.next = 6;
                            break;
                        }

                        return _context.abrupt('return', getSuiteMeta(result.token, typeNum).then(function (data) {
                            if (data.code === 0 && data.data) {
                                return {
                                    type: _const.SUITE_TO_MENTION[typeNum],
                                    title: data.data.title || _common.suiteType2UnnamedTitle[typeNum] || '',
                                    token: result.token,
                                    url: data.data.url || '',
                                    edit_time: data.data.edit_time,
                                    is_cross_tenant: data.data.is_external
                                };
                            }
                            return null;
                        }));

                    case 6:
                        return _context.abrupt('return', null);

                    case 7:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    return function getMentionByUrl(_x) {
        return _ref.apply(this, arguments);
    };
}();

exports.notifyAtUser = notifyAtUser;
exports.atFinder = atFinder;
exports.getUserPermission = getUserPermission;
exports.updateUserPermission = updateUserPermission;
exports.getSuiteMeta = getSuiteMeta;

var _fetch = __webpack_require__(814);

var _suiteHelper = __webpack_require__(52);

var _const = __webpack_require__(2238);

var _common = __webpack_require__(19);

var _urlHelper = __webpack_require__(128);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @ 人之后给用户发消息
 * @param toUserId 用户 id
 * @param requestId 请求 id
 * @see https://bytedance.feishu.cn/space/doc/K6jOeETzcZjmsZE1BxTXxh#nc3Dre
 */
function notifyAtUser(toUserId, mentionId, requestId) {
    var url = '/api/mention/notification/';
    var param = {
        source: _const.SOURCE_ENUM.MINDNOTE,
        target: _const.TARGET_ENUM.LARK,
        token: (0, _suiteHelper.getToken)(),
        entities: {
            users: [{
                id: toUserId,
                query: {
                    mentionId: mentionId
                }
            }]
        }
    };
    return (0, _fetch.fetch)(url, {
        headers: {
            'Request-Id': requestId
        },
        body: JSON.stringify(param),
        method: 'POST',
        contentType: 'application/json',
        noStore: true,
        readCache: false
    });
}
/**
 * 搜索 @
 * @param search 搜索文字
 * @param show 是否显示
 * @see https://wiki.bytedance.net/pages/viewpage.action?pageId=145996596
 */
function atFinder(search, show, callback) {
    window.lark.biz.util.atfinder({
        id: 'atfinder',
        type: [_const.TYPE_ENUM.USER, _const.TYPE_ENUM.FILE, _const.TYPE_ENUM.SHEET, _const.TYPE_ENUM.BITABLE, _const.TYPE_ENUM.MINDNOTE, _const.TYPE_ENUM.BOX, _const.TYPE_ENUM.SLIDE].join(','),
        content: search,
        show: show ? 1 : 0,
        token: (0, _suiteHelper.getToken)(),
        source: _const.SOURCE_ENUM.MINDNOTE,
        onSuccess: callback
    });
}
/**
 * 获取用户对某个文档的权限
 * @param token 文档 token
 * @param type 文档类型
 * @param userId 用户 id
 * @see https://bytedance.feishu.cn/space/doc/NuM5adQ91RnB4BbOw7HwAe#UK8Ukn
 */
function getUserPermission(token, type, userId) {
    var url = '/api/suite/permission.v2/user/?token=' + token + '&type=' + type + '&user_id=' + userId;
    return (0, _fetch.fetch)(url, {
        method: 'GET',
        noStore: true,
        readCache: false
    });
}
/**
 * 更新用户对某个文档的权限
 * @param data 数据
 * @see https://bytedance.feishu.cn/space/doc/NuM5adQ91RnB4BbOw7HwAe#e2gyV7
 */
function updateUserPermission(data) {
    var url = '/api/suite/permission.v2/members/update/';
    return (0, _fetch.fetch)(url, {
        body: data,
        method: 'POST',
        noStore: true,
        readCache: false
    });
}
/**
 * 获取文档 meta
 */
function getSuiteMeta(token, type) {
    return (0, _fetch.fetch)('/api/meta/?token=' + token + '&type=' + type, {
        method: 'GET',
        noStore: true,
        readCache: false
    });
}

/***/ }),

/***/ 3743:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _bowser = __webpack_require__(73);

var _bowser2 = _interopRequireDefault(_bowser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TouchEventManager = function () {
    function TouchEventManager() {
        var _this = this;

        (0, _classCallCheck3.default)(this, TouchEventManager);

        this.delayTid = null;
        // 长按延时
        this.MAX_DELAY = 300;
        this.event = null;
        this.handleTouchStart = function (e) {
            _this.event = e;
            // 只允许一个点长按
            if (e.touches.length > 1) {
                return;
            }
            if (_this.delayTid) {
                clearTimeout(_this.delayTid);
            }
            _this.delayTid = setTimeout(function () {
                _this.dispatchEvent();
            }, _this.MAX_DELAY);
        };
        this.handleTouchCanceled = function () {
            if (_this.delayTid) {
                _this.event = null;
                clearTimeout(_this.delayTid);
            }
        };
        this.handleTouchEnd = function () {
            if (_this.delayTid) {
                _this.event = null;
                clearTimeout(_this.delayTid);
            }
        };
        this.handleTouchMove = function () {
            if (_this.delayTid) {
                _this.event = null;
                clearTimeout(_this.delayTid);
            }
        };
        document.addEventListener('touchstart', this.handleTouchStart);
        document.addEventListener('touchend', this.handleTouchEnd);
        document.addEventListener('touchcancel', this.handleTouchCanceled);
        document.addEventListener('touchmove', this.handleTouchMove);
    }

    (0, _createClass3.default)(TouchEventManager, [{
        key: 'destroy',
        value: function destroy() {
            document.removeEventListener('touchstart', this.handleTouchStart);
            document.removeEventListener('touchend', this.handleTouchEnd);
            document.removeEventListener('touchcancel', this.handleTouchCanceled);
            document.removeEventListener('touchmove', this.handleTouchMove);
            if (this.delayTid) {
                clearTimeout(this.delayTid);
            }
        }
    }, {
        key: 'dispatchEvent',
        value: function dispatchEvent() {
            if (this.delayTid) {
                clearTimeout(this.delayTid);
                this.delayTid = null;
            }
            if (!this.event || !this.event.touches || !this.event.target) {
                return;
            }
            var touch = this.event.touches[0];
            var event = new CustomEvent('longpress', {
                // 允许冒泡才能让 document 捕获到
                bubbles: true,
                detail: {
                    x: touch.clientX,
                    y: touch.clientY
                }
            });
            this.event.target.dispatchEvent(event);
            // ios 没什么卵用，所以无需 dispatch touchcancel 事件
            if (!_bowser2.default.ios) {
                var cancelEvent = new TouchEvent('touchcancel', {
                    bubbles: true
                });
                this.event.target.dispatchEvent(cancelEvent);
            }
        }
    }], [{
        key: 'createEventManager',
        value: function createEventManager() {
            if (!TouchEventManager.touchEventManager) {
                TouchEventManager.touchEventManager = new TouchEventManager();
            }
            return TouchEventManager.touchEventManager;
        }
    }]);
    return TouchEventManager;
}();

exports.default = TouchEventManager;

/***/ }),

/***/ 3744:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _container = __webpack_require__(3745);

var _container2 = _interopRequireDefault(_container);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _container2.default;

/***/ }),

/***/ 3745:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactRedux = __webpack_require__(300);

var _Message = __webpack_require__(3746);

var _Message2 = _interopRequireDefault(_Message);

var _message = __webpack_require__(466);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapDispatchToProps = {
    setMessageShowState: _message.setMessageShowState,
    fetchMessageList: _message.fetchMessageMobileListData,
    setMessageRead: _message.setMessageMobileRead,
    resetMessageList: _message.resetMessageMobileList,
    setLocalMessageRead: _message.setLocalMessageMobileRead,
    updateMessageList: _message.updateMessageMobileListData
};
exports.default = (0, _reactRedux.connect)(null, mapDispatchToProps)(_Message2.default);

/***/ }),

/***/ 3746:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _classCallCheck2 = __webpack_require__(6);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(7);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(10);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(11);

var _inherits3 = _interopRequireDefault(_inherits2);

var _typeof2 = __webpack_require__(82);

var _typeof3 = _interopRequireDefault(_typeof2);

var _noop2 = __webpack_require__(304);

var _noop3 = _interopRequireDefault(_noop2);

var _get2 = __webpack_require__(14);

var _get3 = _interopRequireDefault(_get2);

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _constant = __webpack_require__(571);

var _eventEmitter = __webpack_require__(110);

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _constants = __webpack_require__(5);

var _urlHelper = __webpack_require__(128);

var _messageFeedHelper = __webpack_require__(758);

var _cursorHelper = __webpack_require__(1820);

var _highlight = __webpack_require__(1938);

var _MindNoteContext = __webpack_require__(1671);

var _common = __webpack_require__(19);

var _$decorators = __webpack_require__(553);

var _teaLogger = __webpack_require__(450);

var _teaLogger2 = _interopRequireDefault(_teaLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var Message = function (_React$PureComponent) {
    (0, _inherits3.default)(Message, _React$PureComponent);

    function Message() {
        (0, _classCallCheck3.default)(this, Message);

        /**
         * 分享消息、已解决评论自动设置已读
         */
        var _this = (0, _possibleConstructorReturn3.default)(this, (Message.__proto__ || Object.getPrototypeOf(Message)).apply(this, arguments));

        _this.autoReadMessage = function (res) {
            var _res$payload = res.payload,
                messages = _res$payload.message,
                comments = _res$payload.comment;

            var autoReadMsgIds = [];
            var newMessages = messages.map(function (item) {
                var type = item.type,
                    message_id = item.message_id,
                    comment_id = item.comment_id;

                var status = item.status;
                // 分享消息或已解决的评论 直接设置已读
                if ((type === _constant.MESSAGE_SHARE_TYPE || (0, _get3.default)(comments, comment_id + ".finish")) && status === _constant.MESSAGE_UNREAD) {
                    // 后续小红点逻辑需要依赖status进行判断
                    status = _constant.MESSAGE_READ;
                    autoReadMsgIds.push(message_id);
                }
                return Object.assign({}, item, { status: status });
            });
            if (autoReadMsgIds.length > 0) {
                _this.setMessageRead({ ids: autoReadMsgIds });
            }
            return newMessages;
        };
        /**
         * 处理收到的 feed 消息
         */
        _this.handleNewMessage = function (data) {
            // 所有未读且相关消息
            data.newMessages.filter(function (msg) {
                return msg.related && msg.status === _constant.MESSAGE_UNREAD;
            }).map(_this.transformMessage).forEach(function (message) {
                // 设置消息列表（也会更新小红点）
                // 不能直接更新小红点数量，因为小红点数量是通过列表计算的，更新列表才行
                _this.props.updateMessageList({ message: message, user: _this.props.user, comment: {} });
            });
            // 未读相关分享消息
            var autoReadMsgIds = data.newMessages.filter(function (msg) {
                return msg.related && msg.status === _constant.MESSAGE_UNREAD && msg.type === _constant.MESSAGE_SHARE_TYPE;
            }).map(function (msg) {
                return msg.messageId;
            });
            // 自动已读
            if (autoReadMsgIds.length > 0) {
                _this.setMessageRead({ ids: autoReadMsgIds });
            }
        };
        /**
         * 评论中台的消息转为 redux 的格式
         */
        _this.transformMessage = function (message) {
            var messageId = message.messageId,
                status = message.status,
                type = message.type,
                related = message.related,
                userId = message.userId;
            var _message$mentionId = message.mentionId,
                mentionId = _message$mentionId === undefined ? '' : _message$mentionId;
            var _message$commentId = message.commentId,
                commentId = _message$commentId === undefined ? '' : _message$commentId,
                _message$replyId = message.replyId,
                replyId = _message$replyId === undefined ? '' : _message$replyId;

            return {
                comment_id: commentId,
                reply_id: replyId,
                message_id: messageId,
                type: type,
                status: status,
                avatar_url: '',
                create_time: '',
                name: '',
                mention_id: mentionId,
                user_id: userId,
                related: related
            };
        };
        /**
         * 处理消息面板隐藏
         */
        _this.handleMessagePanelHide = function () {
            _this.props.setMessageShowState(false);
            _this.fetchMessage(_this.autoReadMessage);
        };
        /**
         * 拉取消息数据
         */
        _this.fetchMessage = function (onSuccess) {
            var _this$props = _this.props,
                fetchMessageList = _this$props.fetchMessageList,
                token = _this$props.token,
                user = _this$props.user;

            return fetchMessageList(token, user, { serverFirst: true }, _common.NUM_SUITE_TYPE.MINDNOTE).then(function (action) {
                onSuccess && onSuccess(action);
            }).catch(function (err) {
                console.error(err);
            });
        };
        /**
         * 设置消息已读
         */
        _this.setMessageRead = function (data) {
            var ids = data.ids || [];
            _this.props.setLocalMessageRead(ids);
            _this.fetchSetMessageRead(ids);
        };
        /**
         * 点击消息后滚动到视口
         */
        _this.scrollMessage = function (data) {
            // mention
            if (data.mentionId) {
                (0, _highlight.highLightMentionByFeed)(data.mentionId);
            }
        };
        return _this;
    }

    (0, _createClass3.default)(Message, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            this.bindEvents();
            this.initData();
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            this.unbindEvents();
            this.props.resetMessageList();
        }
        /**
         * 绑定事件
         */

    }, {
        key: "bindEvents",
        value: function bindEvents() {
            this.props.context.bind(_MindNoteContext.MindNoteEvent.FEED_MESSAGE, this.handleNewMessage);
            _eventEmitter2.default.on(_constants.events.MOBILE.DOCS.MESSAGE.SHOW_MESSAGE_PANEL, this.showMessagePanel);
            window.lark.biz.feed.scrollToMessage = this.scrollMessage;
            window.lark.biz.feed.setMessagesRead = this.setMessageRead;
            window.lark.biz.feed.hideMessages = this.handleMessagePanelHide;
        }
        /**
         * 解绑事件
         */

    }, {
        key: "unbindEvents",
        value: function unbindEvents() {
            this.props.context.unbind(_MindNoteContext.MindNoteEvent.FEED_MESSAGE, this.handleNewMessage);
            _eventEmitter2.default.off(_constants.events.MOBILE.DOCS.MESSAGE.SHOW_MESSAGE_PANEL, this.showMessagePanel);
            window.lark.biz.feed.scrollToMessage = _noop3.default;
            window.lark.biz.feed.setMessagesRead = _noop3.default;
            window.lark.biz.feed.hideMessages = _noop3.default;
        }
        /**
         * 初始化
         */

    }, {
        key: "initData",
        value: function initData() {
            var _this2 = this;

            this.fetchMessage(function (action) {
                var newMessages = _this2.autoReadMessage(action);
                // 显示消息面板
                if ((0, _messageFeedHelper.hasNewMessages)(newMessages) && (0, _urlHelper.parseQuery)(window.location.href).sourceType === 'feed') {
                    _this2.showMessagePanel(false);
                }
            });
        }
        /**
         * 设置消息已读的请求，3次重试
         */

    }, {
        key: "fetchSetMessageRead",
        value: function fetchSetMessageRead(ids) {
            var _this3 = this;

            var retryTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            if (retryTime >= 3) {
                console.error('setMessageRead max retry time exceed');
                return;
            }
            var _props = this.props,
                setMessageRead = _props.setMessageRead,
                memberId = _props.memberId;

            setMessageRead({ member_id: memberId, msg_id: ids }).catch(function () {
                _this3.fetchSetMessageRead(ids, ++retryTime);
            });
        }
        /**
         * 展示客户端 feed 面板
         */

    }, {
        key: "showMessagePanel",
        value: function showMessagePanel() {
            var isUserAction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            var permission = this.props.permission;
            // 失去焦点，隐藏键盘

            (0, _cursorHelper.blurSelection)();
            _eventEmitter2.default.trigger('onKeyboard', [{ isOpenKeyboard: 0 }]);
            // 唤起面板
            window.lark.biz.feed.showMessages({
                isUserAction: isUserAction,
                canComment: permission.commentable
            });
            // 设置 redux 状态
            this.props.setMessageShowState(true);
        }
    }, {
        key: "render",
        value: function render() {
            return null;
        }
    }]);
    return Message;
}(_react2.default.PureComponent);

exports.default = Message;

__decorate([(0, _$decorators.Bind)(), (0, _teaLogger2.default)('show_docs_feed', function () {
    return {
        location: 'lark_docs_feed'
    };
})], Message.prototype, "showMessagePanel", null);

/***/ }),

/***/ 3747:
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ 3748:
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ 3886:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/lodash-es/_baseRepeat.js
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeFloor = Math.floor;

/**
 * The base implementation of `_.repeat` which doesn't coerce arguments.
 *
 * @private
 * @param {string} string The string to repeat.
 * @param {number} n The number of times to repeat the string.
 * @returns {string} Returns the repeated string.
 */
function baseRepeat(string, n) {
  var result = '';
  if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
    return result;
  }
  // Leverage the exponentiation by squaring algorithm for a faster repeat.
  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
  do {
    if (n % 2) {
      result += string;
    }
    n = nativeFloor(n / 2);
    if (n) {
      string += string;
    }
  } while (n);

  return result;
}

/* harmony default export */ var _baseRepeat = (baseRepeat);

// EXTERNAL MODULE: ./node_modules/lodash-es/_isIterateeCall.js
var _isIterateeCall = __webpack_require__(211);

// EXTERNAL MODULE: ./node_modules/lodash-es/toInteger.js
var toInteger = __webpack_require__(194);

// EXTERNAL MODULE: ./node_modules/lodash-es/toString.js + 1 modules
var lodash_es_toString = __webpack_require__(94);

// CONCATENATED MODULE: ./node_modules/lodash-es/repeat.js





/**
 * Repeats the given string `n` times.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to repeat.
 * @param {number} [n=1] The number of times to repeat the string.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the repeated string.
 * @example
 *
 * _.repeat('*', 3);
 * // => '***'
 *
 * _.repeat('abc', 2);
 * // => 'abcabc'
 *
 * _.repeat('abc', 0);
 * // => ''
 */
function repeat(string, n, guard) {
  if ((guard ? Object(_isIterateeCall["a" /* default */])(string, n, guard) : n === undefined)) {
    n = 1;
  } else {
    n = Object(toInteger["a" /* default */])(n);
  }
  return _baseRepeat(Object(lodash_es_toString["a" /* default */])(string), n);
}

/* harmony default export */ var lodash_es_repeat = __webpack_exports__["a"] = (repeat);


/***/ }),

/***/ 3887:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/lodash-es/_baseIteratee.js + 9 modules
var _baseIteratee = __webpack_require__(79);

// EXTERNAL MODULE: ./node_modules/lodash-es/_baseUnset.js + 1 modules
var _baseUnset = __webpack_require__(597);

// EXTERNAL MODULE: ./node_modules/lodash-es/_isIndex.js
var _isIndex = __webpack_require__(137);

// CONCATENATED MODULE: ./node_modules/lodash-es/_basePullAt.js



/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * The base implementation of `_.pullAt` without support for individual
 * indexes or capturing the removed elements.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {number[]} indexes The indexes of elements to remove.
 * @returns {Array} Returns `array`.
 */
function basePullAt(array, indexes) {
  var length = array ? indexes.length : 0,
      lastIndex = length - 1;

  while (length--) {
    var index = indexes[length];
    if (length == lastIndex || index !== previous) {
      var previous = index;
      if (Object(_isIndex["a" /* default */])(index)) {
        splice.call(array, index, 1);
      } else {
        Object(_baseUnset["a" /* default */])(array, index);
      }
    }
  }
  return array;
}

/* harmony default export */ var _basePullAt = (basePullAt);

// CONCATENATED MODULE: ./node_modules/lodash-es/remove.js



/**
 * Removes all elements from `array` that `predicate` returns truthy for
 * and returns an array of the removed elements. The predicate is invoked
 * with three arguments: (value, index, array).
 *
 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
 * to pull elements from an array by value.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new array of removed elements.
 * @example
 *
 * var array = [1, 2, 3, 4];
 * var evens = _.remove(array, function(n) {
 *   return n % 2 == 0;
 * });
 *
 * console.log(array);
 * // => [1, 3]
 *
 * console.log(evens);
 * // => [2, 4]
 */
function remove(array, predicate) {
  var result = [];
  if (!(array && array.length)) {
    return result;
  }
  var index = -1,
      indexes = [],
      length = array.length;

  predicate = Object(_baseIteratee["a" /* default */])(predicate, 3);
  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result.push(value);
      indexes.push(index);
    }
  }
  _basePullAt(array, indexes);
  return result;
}

/* harmony default export */ var lodash_es_remove = __webpack_exports__["a"] = (remove);


/***/ })

}]);
//# sourceMappingURL=https://s3.pstatp.com/eesz/resource/bear/js/mindnote.eaf5341f1bc460a7db81.js.map