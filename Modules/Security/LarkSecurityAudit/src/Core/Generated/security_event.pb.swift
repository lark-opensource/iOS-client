// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: security_event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// 这是protobuf的版本

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 定义数据结构，message 类似golang中的struct
public enum SecurityEvent_ModuleType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case moduleUnknown // = 0

  /// CCM doc文档
  case moduleDocs // = 1

  /// CCM 表格
  case moduleSheets // = 2

  /// CCM  文件
  case moduleFiles // = 3

  /// CCM 文件夹
  case moduleFolders // = 4

  /// 登录管理
  case modulePassport // = 5

  /// CCM
  case moduleMindNote // = 6

  /// CCM
  case moduleBitable // = 7

  /// CCM
  case moduleSlide // = 8

  /// IM 聊天窗口
  case moduleChat // = 9

  /// IM 图片/视频查看器
  case moduleImimageAndVideo // = 10

  /// VC，IM勿用
  case moduleVideo // = 11

  /// IM 文件预览页
  case moduleImfile // = 12

  /// 13IM通讯相关
  case moduleCommunication // = 13

  /// 14 日历
  case moduleCalendar // = 14

  /// 15 通讯录模块
  case moduleAddressBook // = 15

  /// 16 应用模块
  case moduleApp // = 16

  /// 17 邮件模块
  case moduleEmail // = 17

  /// 18 IM模块
  case moduleIm // = 18

  /// 19 docx模块
  case moduleDocx // = 19

  /// 20 people模块
  case modulePeople // = 20

  /// 21设备
  case moduleDevice // = 21

  /// 公司圈
  case moduleMoments // = 22

  public init() {
    self = .moduleUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .moduleUnknown
    case 1: self = .moduleDocs
    case 2: self = .moduleSheets
    case 3: self = .moduleFiles
    case 4: self = .moduleFolders
    case 5: self = .modulePassport
    case 6: self = .moduleMindNote
    case 7: self = .moduleBitable
    case 8: self = .moduleSlide
    case 9: self = .moduleChat
    case 10: self = .moduleImimageAndVideo
    case 11: self = .moduleVideo
    case 12: self = .moduleImfile
    case 13: self = .moduleCommunication
    case 14: self = .moduleCalendar
    case 15: self = .moduleAddressBook
    case 16: self = .moduleApp
    case 17: self = .moduleEmail
    case 18: self = .moduleIm
    case 19: self = .moduleDocx
    case 20: self = .modulePeople
    case 21: self = .moduleDevice
    case 22: self = .moduleMoments
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .moduleUnknown: return 0
    case .moduleDocs: return 1
    case .moduleSheets: return 2
    case .moduleFiles: return 3
    case .moduleFolders: return 4
    case .modulePassport: return 5
    case .moduleMindNote: return 6
    case .moduleBitable: return 7
    case .moduleSlide: return 8
    case .moduleChat: return 9
    case .moduleImimageAndVideo: return 10
    case .moduleVideo: return 11
    case .moduleImfile: return 12
    case .moduleCommunication: return 13
    case .moduleCalendar: return 14
    case .moduleAddressBook: return 15
    case .moduleApp: return 16
    case .moduleEmail: return 17
    case .moduleIm: return 18
    case .moduleDocx: return 19
    case .modulePeople: return 20
    case .moduleDevice: return 21
    case .moduleMoments: return 22
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_ModuleType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum SecurityEvent_ClientType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case clientUnknown // = 0

  /// pc 端
  case clientLarkPc // = 1

  /// android 移动端
  case clientAndroid // = 2

  /// ios 移动端
  case clientIos // = 3

  /// web 端
  case clientWeb // = 4

  public init() {
    self = .clientUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .clientUnknown
    case 1: self = .clientLarkPc
    case 2: self = .clientAndroid
    case 3: self = .clientIos
    case 4: self = .clientWeb
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .clientUnknown: return 0
    case .clientLarkPc: return 1
    case .clientAndroid: return 2
    case .clientIos: return 3
    case .clientWeb: return 4
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_ClientType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum SecurityEvent_FlagType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 正常
  case flagNormal // = 0

  /// 测试
  case flagTest // = 1

  /// 压测
  case flagStress // = 2

  public init() {
    self = .flagNormal
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .flagNormal
    case 1: self = .flagTest
    case 2: self = .flagStress
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .flagNormal: return 0
    case .flagTest: return 1
    case .flagStress: return 2
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_FlagType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum SecurityEvent_OperationType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0

  /// 创建
  case operationCreate // = 1

  /// 访问
  case operationRead // = 2

  /// 编辑
  case operationUpdate // = 3

  /// 删除
  case operationDelete // = 4

  /// 评论
  case operationComment // = 5

  /// 导出
  case operationExport // = 6

  /// 下载
  case operationDownload // = 7

  /// 打印
  case operationPrint // = 8

  /// 修改协作者
  case operationUpdateCollaborator // = 9

  /// 分享到第三方应用
  case operationShareTo3RdApp // = 10

  /// 更改分享设置
  case operationUpdateShareSetting // = 11

  /// 前端生成CSV或长图
  case operationFrontExport // = 12

  /// 使用其它应用打开
  case operationOpenWith3RdApp // = 13

  /// 14 导入
  case operationImport // = 14

  /// 15 登录
  case operationLogin // = 15

  /// 16 加入
  case operationJoin // = 16

  /// 17 退出
  case operationQuit // = 17

  /// 18 另存为
  case operationSaveAs // = 18

  /// 19 用户选中内容并点击复制
  case operationCopyContent // = 19

  /// 20 转发
  case operationForward // = 20

  /// 21 加载到本地
  case operationLoadToLocal // = 21

  /// 22 添加外部联系人为好友
  case operationAddExternalFriend // = 22

  /// 23 对陌生人发起单聊
  case operationStartExternalChat // = 23

  /// 24 上传日历附件
  case operationUploadCalendarAppendix // = 24

  /// 25 查看组织架构
  case operationLookDeptStruct // = 25

  /// 26 获取手机号
  case operationObtainMobile // = 26

  /// 27 查看profile
  case operationLookProfile // = 27

  /// 63 截屏
  case operationScreenShot // = 63

  /// 90 录屏
  case operationScreenRecording // = 90

  /// 创建知识空间副本
  case operationCreateSpaceCopy // = 100000001

  /// 分享文件/文件夹
  case operationSpaceShare // = 100000002

  /// 分享文件中内容
  case operationSpaceShareContent // = 100000003

  /// 移动到文件夹/知识库
  case operationSpaceMove // = 100000004

  /// 创建副本
  case operationCreateCopy // = 100000005

  /// 保存为我的模板
  case operationSaveModule // = 100000006

  /// 修改协作者权限
  case operationSpaceUpdateCollaboratorAuth // = 100000007

  /// 转移所有权
  case operationSpaceMoveOwner // = 100000008

  /// 查看历史版本
  case operationSpaceViewHistory // = 100000009

  /// 下载历史版本
  case operationSpaceDownLoadHistory // = 100000010

  /// 还原历史版本
  case operationSpaceRecoverHistory // = 100000011

  /// 删除评论
  case operationSpaceDeleteComment // = 100000012

  /// Slides演示文件
  case operationSpaceDemoSlides // = 100000026

  /// 点击打开文档
  case operationSpaceDocClickDocPlugin // = 100000028

  /// 200000006 在线预览非图片\视频文件
  case operationImchatPreviewFile // = 200000006

  /// 200000008 编辑图片
  case operationImchatEditImage // = 200000008

  /// 200000010 保存到我的空间
  case operationImsaveToSpace // = 200000010

  /// 截屏pc
  case operationImsnaphot // = 200000017

  /// 录屏pc
  case operationImscreenCap // = 200000018

  /// 提取图片文字
  case operationImocr // = 200000019
  case operationImonlineEdit // = 200000020

  /// 登陆邮箱
  case operationEmailLogin // = 1600000017

  /// 下载邮件
  case operationEmailDownloadMail // = 1600000018

  /// 下载附件图片
  case operationEmailDownloadFile // = 1600000019

  /// 本地应用打开附件
  case operationEmailLocalOpen // = 1600000020

  /// 分享附件文件至会话
  case operationEmailShareFile // = 1600000021

  /// 打印邮件
  case operationEmailPrint // = 1600000022

  /// 复制邮件内容
  case operationEmailCopy // = 1600000023

  /// 点击邮件正文链接
  case operationEmailUrlclick // = 1600000024

  /// 登陆第三方邮箱客户端
  case operationEmailLoginThird // = 1600000025

  /// 开启关闭自动转发
  case operationEmailEditForward // = 1600000026

  /// 分享邮件
  case operationEmailShareMail // = 1600000027

  /// 回复邮件
  case operationEmailReplay // = 1600000028

  /// 发送邮件
  case operationEmailSend // = 1600000029

  /// 删除邮件
  case operationEmailDelete // = 1600000030

  /// 阅读邮件
  case operationEmailRead // = 1600000031

  /// 移动邮件
  case operationEmailMove // = 1600000032

  /// 邮件转附件
  case operationEmailEmlAsAttachment // = 1600000033

  /// 邮件批量导出
  case operationEmailBatchExport // = 1600000034

  /// 邮件删除超大附件
  case operationEmailDelBigFile // = 1600000035

  /// 邮件复制附件
  case operationEmailCopyAttachment // = 1600000036

  /// 点击置顶消息 “回到原文”
  case operationChatPinBackToChat // = 200000201

  /// 点击置顶链接卡片后打开链接
  case operationChatPinOpenURL // = 200000202

  /// 在置顶链接菜单内点击“在浏览器中打开”
  case operationChatPinOpenBrowser // = 200000203

  /// 在置顶链接菜单内点击“复制链接”
  case operationChatPinCopyURL // = 200000204

  /// 查看置顶内容（进入会话&且会话内有置顶内容就上报）
  case operationChatPinShowInChat // = 200000205

  /// 展开置顶看板
  case operationChatPinShowPinList // = 200000206

  /// PC Hover 查看置顶预览卡片
  case operationChatPinHoverShow // = 200000207

  /// PC 点击工具栏中的“搜索”
  case operationChatPinSideBarSearch // = 200000208

  /// PC 点击工具栏中的“文件”
  case operationChatPinSideBarFile // = 200000209

  /// PC 点击工具栏中的“添加置顶链接”
  case operationChatPinSideBarAddLink // = 200000210

  /// PC 点击工具栏中的“添加/查看群公告”
  case operationChatPinSideBarAnnounce // = 200000211

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .operationCreate
    case 2: self = .operationRead
    case 3: self = .operationUpdate
    case 4: self = .operationDelete
    case 5: self = .operationComment
    case 6: self = .operationExport
    case 7: self = .operationDownload
    case 8: self = .operationPrint
    case 9: self = .operationUpdateCollaborator
    case 10: self = .operationShareTo3RdApp
    case 11: self = .operationUpdateShareSetting
    case 12: self = .operationFrontExport
    case 13: self = .operationOpenWith3RdApp
    case 14: self = .operationImport
    case 15: self = .operationLogin
    case 16: self = .operationJoin
    case 17: self = .operationQuit
    case 18: self = .operationSaveAs
    case 19: self = .operationCopyContent
    case 20: self = .operationForward
    case 21: self = .operationLoadToLocal
    case 22: self = .operationAddExternalFriend
    case 23: self = .operationStartExternalChat
    case 24: self = .operationUploadCalendarAppendix
    case 25: self = .operationLookDeptStruct
    case 26: self = .operationObtainMobile
    case 27: self = .operationLookProfile
    case 63: self = .operationScreenShot
    case 90: self = .operationScreenRecording
    case 100000001: self = .operationCreateSpaceCopy
    case 100000002: self = .operationSpaceShare
    case 100000003: self = .operationSpaceShareContent
    case 100000004: self = .operationSpaceMove
    case 100000005: self = .operationCreateCopy
    case 100000006: self = .operationSaveModule
    case 100000007: self = .operationSpaceUpdateCollaboratorAuth
    case 100000008: self = .operationSpaceMoveOwner
    case 100000009: self = .operationSpaceViewHistory
    case 100000010: self = .operationSpaceDownLoadHistory
    case 100000011: self = .operationSpaceRecoverHistory
    case 100000012: self = .operationSpaceDeleteComment
    case 100000026: self = .operationSpaceDemoSlides
    case 100000028: self = .operationSpaceDocClickDocPlugin
    case 200000006: self = .operationImchatPreviewFile
    case 200000008: self = .operationImchatEditImage
    case 200000010: self = .operationImsaveToSpace
    case 200000017: self = .operationImsnaphot
    case 200000018: self = .operationImscreenCap
    case 200000019: self = .operationImocr
    case 200000020: self = .operationImonlineEdit
    case 200000201: self = .operationChatPinBackToChat
    case 200000202: self = .operationChatPinOpenURL
    case 200000203: self = .operationChatPinOpenBrowser
    case 200000204: self = .operationChatPinCopyURL
    case 200000205: self = .operationChatPinShowInChat
    case 200000206: self = .operationChatPinShowPinList
    case 200000207: self = .operationChatPinHoverShow
    case 200000208: self = .operationChatPinSideBarSearch
    case 200000209: self = .operationChatPinSideBarFile
    case 200000210: self = .operationChatPinSideBarAddLink
    case 200000211: self = .operationChatPinSideBarAnnounce
    case 1600000017: self = .operationEmailLogin
    case 1600000018: self = .operationEmailDownloadMail
    case 1600000019: self = .operationEmailDownloadFile
    case 1600000020: self = .operationEmailLocalOpen
    case 1600000021: self = .operationEmailShareFile
    case 1600000022: self = .operationEmailPrint
    case 1600000023: self = .operationEmailCopy
    case 1600000024: self = .operationEmailUrlclick
    case 1600000025: self = .operationEmailLoginThird
    case 1600000026: self = .operationEmailEditForward
    case 1600000027: self = .operationEmailShareMail
    case 1600000028: self = .operationEmailReplay
    case 1600000029: self = .operationEmailSend
    case 1600000030: self = .operationEmailDelete
    case 1600000031: self = .operationEmailRead
    case 1600000032: self = .operationEmailMove
    case 1600000033: self = .operationEmailEmlAsAttachment
    case 1600000034: self = .operationEmailBatchExport
    case 1600000035: self = .operationEmailDelBigFile
    case 1600000036: self = .operationEmailCopyAttachment
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .operationCreate: return 1
    case .operationRead: return 2
    case .operationUpdate: return 3
    case .operationDelete: return 4
    case .operationComment: return 5
    case .operationExport: return 6
    case .operationDownload: return 7
    case .operationPrint: return 8
    case .operationUpdateCollaborator: return 9
    case .operationShareTo3RdApp: return 10
    case .operationUpdateShareSetting: return 11
    case .operationFrontExport: return 12
    case .operationOpenWith3RdApp: return 13
    case .operationImport: return 14
    case .operationLogin: return 15
    case .operationJoin: return 16
    case .operationQuit: return 17
    case .operationSaveAs: return 18
    case .operationCopyContent: return 19
    case .operationForward: return 20
    case .operationLoadToLocal: return 21
    case .operationAddExternalFriend: return 22
    case .operationStartExternalChat: return 23
    case .operationUploadCalendarAppendix: return 24
    case .operationLookDeptStruct: return 25
    case .operationObtainMobile: return 26
    case .operationLookProfile: return 27
    case .operationScreenShot: return 63
    case .operationScreenRecording: return 90
    case .operationCreateSpaceCopy: return 100000001
    case .operationSpaceShare: return 100000002
    case .operationSpaceShareContent: return 100000003
    case .operationSpaceMove: return 100000004
    case .operationCreateCopy: return 100000005
    case .operationSaveModule: return 100000006
    case .operationSpaceUpdateCollaboratorAuth: return 100000007
    case .operationSpaceMoveOwner: return 100000008
    case .operationSpaceViewHistory: return 100000009
    case .operationSpaceDownLoadHistory: return 100000010
    case .operationSpaceRecoverHistory: return 100000011
    case .operationSpaceDeleteComment: return 100000012
    case .operationSpaceDemoSlides: return 100000026
    case .operationSpaceDocClickDocPlugin: return 100000028
    case .operationImchatPreviewFile: return 200000006
    case .operationImchatEditImage: return 200000008
    case .operationImsaveToSpace: return 200000010
    case .operationImsnaphot: return 200000017
    case .operationImscreenCap: return 200000018
    case .operationImocr: return 200000019
    case .operationImonlineEdit: return 200000020
    case .operationChatPinBackToChat: return 200000201
    case .operationChatPinOpenURL: return 200000202
    case .operationChatPinOpenBrowser: return 200000203
    case .operationChatPinCopyURL: return 200000204
    case .operationChatPinShowInChat: return 200000205
    case .operationChatPinShowPinList: return 200000206
    case .operationChatPinHoverShow: return 200000207
    case .operationChatPinSideBarSearch: return 200000208
    case .operationChatPinSideBarFile: return 200000209
    case .operationChatPinSideBarAddLink: return 200000210
    case .operationChatPinSideBarAnnounce: return 200000211
    case .operationEmailLogin: return 1600000017
    case .operationEmailDownloadMail: return 1600000018
    case .operationEmailDownloadFile: return 1600000019
    case .operationEmailLocalOpen: return 1600000020
    case .operationEmailShareFile: return 1600000021
    case .operationEmailPrint: return 1600000022
    case .operationEmailCopy: return 1600000023
    case .operationEmailUrlclick: return 1600000024
    case .operationEmailLoginThird: return 1600000025
    case .operationEmailEditForward: return 1600000026
    case .operationEmailShareMail: return 1600000027
    case .operationEmailReplay: return 1600000028
    case .operationEmailSend: return 1600000029
    case .operationEmailDelete: return 1600000030
    case .operationEmailRead: return 1600000031
    case .operationEmailMove: return 1600000032
    case .operationEmailEmlAsAttachment: return 1600000033
    case .operationEmailBatchExport: return 1600000034
    case .operationEmailDelBigFile: return 1600000035
    case .operationEmailCopyAttachment: return 1600000036
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_OperationType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum SecurityEvent_EntityType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0

  /// 用户 ID
  case entityUserID // = 1

  /// 部门 ID
  case entityDepartmentID // = 2

  /// 租户 ID
  case entityTenantID // = 3

  /// chatID
  case entityChatID // = 4

  /// Doc CCM Token
  case entityDocID // = 5

  /// Sheet CCM token
  case entitySheetID // = 6

  /// File CCM Token
  case entityFileID // = 7

  /// Folder CCM Token
  case entityFolderID // = 8
  case entityMindNoteID // = 9
  case entityBitableID // = 10
  case entitySlideID // = 11

  /// 机器人 ID
  case entityBotID // = 12

  /// vc ID，IM勿用
  case entityVideoID // = 13

  /// 走driverSDK的文件，值类型为app_id与app_file_id的json格式
  case entityDriverSdkfileID // = 14

  /// 链接
  case entityLink // = 15

  /// chatter的用户传递的user可能为bot可能为user，后续入库时区分
  case entityChatter // = 16

  /// IM image
  case entityImage // = 17

  /// IM video
  case entityVideoIm // = 18

  /// IM 文件
  case entityFileIm // = 19

  /// 小程序和H5
  case entityMiniProgramsAndH5 // = 20

  /// 打开的本地文件，传入{app_id: xx, app_file_id:xx}的json格式
  case entityLocalFile // = 21

  /// 22 用户邮箱
  case entityUserEmail // = 22

  /// 23 公共邮箱
  case entityPublicEmail // = 23

  /// 24 邮件组
  case entityEmailGroup // = 24

  /// 25 用户手机号
  case entityUserMobile // = 25

  /// 26 邮件内容
  case entityEmailContent // = 26

  /// 27 邮件主题
  case entityEmailSubject // = 27

  /// 28 邮件附件
  case entityEmailAttachment // = 28

  /// 29 OKR
  case entityOkrtype // = 29

  /// 30 IM 消息
  case entityImcontent // = 30

  /// 31 Docx文档
  case entityDocxID // = 31

  /// 45 设备截屏、录屏使用
  case entityDevice // = 45

  /// 公司圈动态
  case entityMomentsPost // = 75

  /// 公司圈评论
  case entityMomentsComment // = 76

  /// 公司圈图片
  case entityMomentsImage // = 77

  /// 公司圈视频
  case entityMomentsVideo // = 78

  /// slides云文档
  case entitySlidesDocs // = 106

  /// 知识空间
  case entityCcmspace // = 107

  /// 144 Wiki云文档
  case entityWikiToken // = 144

  ///公司圈详情页
  case entityMomentsPostDetail // = 2001

  /// 499 群架构置顶ID
  case entityChatPinID // = 499

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .entityUserID
    case 2: self = .entityDepartmentID
    case 3: self = .entityTenantID
    case 4: self = .entityChatID
    case 5: self = .entityDocID
    case 6: self = .entitySheetID
    case 7: self = .entityFileID
    case 8: self = .entityFolderID
    case 9: self = .entityMindNoteID
    case 10: self = .entityBitableID
    case 11: self = .entitySlideID
    case 12: self = .entityBotID
    case 13: self = .entityVideoID
    case 14: self = .entityDriverSdkfileID
    case 15: self = .entityLink
    case 16: self = .entityChatter
    case 17: self = .entityImage
    case 18: self = .entityVideoIm
    case 19: self = .entityFileIm
    case 20: self = .entityMiniProgramsAndH5
    case 21: self = .entityLocalFile
    case 22: self = .entityUserEmail
    case 23: self = .entityPublicEmail
    case 24: self = .entityEmailGroup
    case 25: self = .entityUserMobile
    case 26: self = .entityEmailContent
    case 27: self = .entityEmailSubject
    case 28: self = .entityEmailAttachment
    case 29: self = .entityOkrtype
    case 30: self = .entityImcontent
    case 31: self = .entityDocxID
    case 45: self = .entityDevice
    case 75: self = .entityMomentsPost
    case 76: self = .entityMomentsComment
    case 77: self = .entityMomentsImage
    case 78: self = .entityMomentsVideo
    case 106: self = .entitySlidesDocs
    case 107: self = .entityCcmspace
    case 144: self = .entityWikiToken
    case 499: self = .entityChatPinID
    case 2001: self = .entityMomentsPostDetail
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .entityUserID: return 1
    case .entityDepartmentID: return 2
    case .entityTenantID: return 3
    case .entityChatID: return 4
    case .entityDocID: return 5
    case .entitySheetID: return 6
    case .entityFileID: return 7
    case .entityFolderID: return 8
    case .entityMindNoteID: return 9
    case .entityBitableID: return 10
    case .entitySlideID: return 11
    case .entityBotID: return 12
    case .entityVideoID: return 13
    case .entityDriverSdkfileID: return 14
    case .entityLink: return 15
    case .entityChatter: return 16
    case .entityImage: return 17
    case .entityVideoIm: return 18
    case .entityFileIm: return 19
    case .entityMiniProgramsAndH5: return 20
    case .entityLocalFile: return 21
    case .entityUserEmail: return 22
    case .entityPublicEmail: return 23
    case .entityEmailGroup: return 24
    case .entityUserMobile: return 25
    case .entityEmailContent: return 26
    case .entityEmailSubject: return 27
    case .entityEmailAttachment: return 28
    case .entityOkrtype: return 29
    case .entityImcontent: return 30
    case .entityDocxID: return 31
    case .entityDevice: return 45
    case .entityMomentsPost: return 75
    case .entityMomentsComment: return 76
    case .entityMomentsImage: return 77
    case .entityMomentsVideo: return 78
    case .entitySlidesDocs: return 106
    case .entityCcmspace: return 107
    case .entityWikiToken: return 144
    case .entityChatPinID: return 499
    case .entityMomentsPostDetail: return 2001
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_EntityType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum SecurityEvent_PermissionSettingType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 未知
  case unknown // = 0

  /// "不开启链接分享"
  case disableLinkShare // = 1

  /// "组织内获得链接可访问"
  case canReadByLinkInTenant // = 2

  /// "组织内获得链接可编辑"
  case canEditByLinkInTenant // = 3

  /// "互联网获得链接可访问"
  case canReadByLinkInInternet // = 4

  /// "互联网获得链接可编辑"
  case canEditByLinkInInternet // = 5

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .disableLinkShare
    case 2: self = .canReadByLinkInTenant
    case 3: self = .canEditByLinkInTenant
    case 4: self = .canReadByLinkInInternet
    case 5: self = .canEditByLinkInInternet
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .disableLinkShare: return 1
    case .canReadByLinkInTenant: return 2
    case .canEditByLinkInTenant: return 3
    case .canReadByLinkInInternet: return 4
    case .canEditByLinkInInternet: return 5
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_PermissionSettingType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum SecurityEvent_PermissionActionType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 未知
  case unknown // = 0

  ///"添加用户"
  case addUser // = 1

  ///"添加用户"
  case removeUser // = 2

  ///"添加群"
  case addChat // = 3

  ///"移除群"
  case removeChat // = 4

  ///"添加部门"
  case addDepartment // = 5

  ///"移除部门"
  case removeDepartment // = 6

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .addUser
    case 2: self = .removeUser
    case 3: self = .addChat
    case 4: self = .removeChat
    case 5: self = .addDepartment
    case 6: self = .removeDepartment
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .addUser: return 1
    case .removeUser: return 2
    case .addChat: return 3
    case .removeChat: return 4
    case .addDepartment: return 5
    case .removeDepartment: return 6
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_PermissionActionType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum SecurityEvent_CommentType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 未知
  case unknown // = 0

  ///`添加评论`
  case addComment // = 1

  ///"添加回复"
  case addReply // = 2

  ///`编辑回复`
  case editReply // = 3

  ///`删除回复`
  case deleteReply // = 4

  ///`更新评论`
  case updateComment // = 5

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .addComment
    case 2: self = .addReply
    case 3: self = .editReply
    case 4: self = .deleteReply
    case 5: self = .updateComment
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .addComment: return 1
    case .addReply: return 2
    case .editReply: return 3
    case .deleteReply: return 4
    case .updateComment: return 5
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_CommentType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum SecurityEvent_Status: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case success // = 0
  case fail // = 1

  public init() {
    self = .success
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .success
    case 1: self = .fail
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .success: return 0
    case .fail: return 1
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_Status: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum SecurityEvent_AppDetail: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 未知
  case unknown // = 0

  /// 微信
  case weChat // = 1

  /// 朋友圈
  case weChatMoments // = 2

  /// qq
  case qq // = 3

  /// 微博
  case weibo // = 4

  /// 其他
  case others // = 5

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .weChat
    case 2: self = .weChatMoments
    case 3: self = .qq
    case 4: self = .weibo
    case 5: self = .others
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .weChat: return 1
    case .weChatMoments: return 2
    case .qq: return 3
    case .weibo: return 4
    case .others: return 5
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_AppDetail: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum SecurityEvent_ContainerType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 未知
  case unknown // = 0

  /// wiki类型
  case wiki // = 1

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .wiki
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .wiki: return 1
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_ContainerType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum SecurityEvent_RenderTypeValue: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 普通文本
  case plainText // = 1

  /// 可复制文本
  case copyText // = 2

  /// 时间文本
  case timeText // = 3

  public init() {
    self = .plainText
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .plainText
    case 2: self = .copyText
    case 3: self = .timeText
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .plainText: return 1
    case .copyText: return 2
    case .timeText: return 3
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_RenderTypeValue: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// RenderItem 中Key的枚举
public enum SecurityEvent_RenderItemKey: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 操作结果 成功/失败
  case opResult // = 1

  /// 文件ID
  case fileID // = 2

  /// 文件名
  case fileName // = 3

  /// 文件类型
  case fileType // = 4

  /// 发送的url内容
  case link // = 5

  /// 聊天类型 单聊/群聊
  case chatType // = 6

  /// 公司圈动态id
  case momentsPostID // = 9000011

  /// 公司圈评论id
  case momentsCommentID // = 9000012

  /// 转发chat_id
  case momentsForwardIds // = 9000013

  /// 公司圈帖子url
  case momentsPostURL // = 9000014

  /// 图片key
  case momentsImageKeys // = 9000015

  /// 视频url
  case momentsVideoKeys // = 9000016

  /// 官方号id
  case momentsOfficialID // = 9000017

  public init() {
    self = .opResult
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .opResult
    case 2: self = .fileID
    case 3: self = .fileName
    case 4: self = .fileType
    case 5: self = .link
    case 6: self = .chatType
    case 9000011: self = .momentsPostID
    case 9000012: self = .momentsCommentID
    case 9000013: self = .momentsForwardIds
    case 9000014: self = .momentsPostURL
    case 9000015: self = .momentsImageKeys
    case 9000016: self = .momentsVideoKeys
    case 9000017: self = .momentsOfficialID
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .opResult: return 1
    case .fileID: return 2
    case .fileName: return 3
    case .fileType: return 4
    case .link: return 5
    case .chatType: return 6
    case .momentsPostID: return 9000011
    case .momentsCommentID: return 9000012
    case .momentsForwardIds: return 9000013
    case .momentsPostURL: return 9000014
    case .momentsImageKeys: return 9000015
    case .momentsVideoKeys: return 9000016
    case .momentsOfficialID: return 9000017
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_RenderItemKey: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// RenderItemKey 中 OpResult 的枚举值
public enum SecurityEvent_OpResultValue: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// success
  case opSuccess // = 0

  /// failed
  case opFailed // = 1

  public init() {
    self = .opSuccess
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .opSuccess
    case 1: self = .opFailed
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .opSuccess: return 0
    case .opFailed: return 1
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_OpResultValue: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// RenderItemKey 中 ChatType 的枚举值
public enum SecurityEvent_ChatTypeValue: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 单聊天
  case p2P // = 1

  /// 群聊
  case group // = 2

  public init() {
    self = .p2P
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .p2P
    case 2: self = .group
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .p2P: return 1
    case .group: return 2
    }
  }

}

#if swift(>=4.2)

extension SecurityEvent_ChatTypeValue: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct SecurityEvent_ObjectDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 克隆源，克隆时使用
  public var cloneSource: String {
    get {return _cloneSource ?? String()}
    set {_cloneSource = newValue}
  }
  /// Returns true if `cloneSource` has been explicitly set.
  public var hasCloneSource: Bool {return self._cloneSource != nil}
  /// Clears the value of `cloneSource`. Subsequent reads from it will return its default value.
  public mutating func clearCloneSource() {self._cloneSource = nil}

  /// 其他文本 object detail
  public var textDetail: String {
    get {return _textDetail ?? String()}
    set {_textDetail = newValue}
  }
  /// Returns true if `textDetail` has been explicitly set.
  public var hasTextDetail: Bool {return self._textDetail != nil}
  /// Clears the value of `textDetail`. Subsequent reads from it will return its default value.
  public mutating func clearTextDetail() {self._textDetail = nil}

  /// 文件名
  public var fileName: String {
    get {return _fileName ?? String()}
    set {_fileName = newValue}
  }
  /// Returns true if `fileName` has been explicitly set.
  public var hasFileName: Bool {return self._fileName != nil}
  /// Clears the value of `fileName`. Subsequent reads from it will return its default value.
  public mutating func clearFileName() {self._fileName = nil}

  /// 第三方AppID，如开放平台ISV的AppID
  public var thirdPartyAppID: String {
    get {return _thirdPartyAppID ?? String()}
    set {_thirdPartyAppID = newValue}
  }
  /// Returns true if `thirdPartyAppID` has been explicitly set.
  public var hasThirdPartyAppID: Bool {return self._thirdPartyAppID != nil}
  /// Clears the value of `thirdPartyAppID`. Subsequent reads from it will return its default value.
  public mutating func clearThirdPartyAppID() {self._thirdPartyAppID = nil}

  /// 权限设置类型
  public var permissionSettingType: SecurityEvent_PermissionSettingType {
    get {return _permissionSettingType ?? .unknown}
    set {_permissionSettingType = newValue}
  }
  /// Returns true if `permissionSettingType` has been explicitly set.
  public var hasPermissionSettingType: Bool {return self._permissionSettingType != nil}
  /// Clears the value of `permissionSettingType`. Subsequent reads from it will return its default value.
  public mutating func clearPermissionSettingType() {self._permissionSettingType = nil}

  public var containerType: SecurityEvent_ContainerType {
    get {return _containerType ?? .unknown}
    set {_containerType = newValue}
  }
  /// Returns true if `containerType` has been explicitly set.
  public var hasContainerType: Bool {return self._containerType != nil}
  /// Clears the value of `containerType`. Subsequent reads from it will return its default value.
  public mutating func clearContainerType() {self._containerType = nil}

  public var containerID: String {
    get {return _containerID ?? String()}
    set {_containerID = newValue}
  }
  /// Returns true if `containerID` has been explicitly set.
  public var hasContainerID: Bool {return self._containerID != nil}
  /// Clears the value of `containerID`. Subsequent reads from it will return its default value.
  public mutating func clearContainerID() {self._containerID = nil}

  public var currentPage: String {
    get {return _currentPage ?? String()}
    set {_currentPage = newValue}
  }
  /// Returns true if `currentPage` has been explicitly set.
  public var hasCurrentPage: Bool {return self._currentPage != nil}
  /// Clears the value of `currentPage`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentPage() {self._currentPage = nil}

  /// 公司圈动态ID
  public var postID: String {
    get {return _postID ?? String()}
    set {_postID = newValue}
  }
  /// Returns true if `postID` has been explicitly set.
  public var hasPostID: Bool {return self._postID != nil}
  /// Clears the value of `postID`. Subsequent reads from it will return its default value.
  public mutating func clearPostID() {self._postID = nil}

  /// 公司圈转发会话或userIds
  public var forwardIds: [String] = []

  /// 图片keys
  public var imageKeys: [String] = []

  /// 视频keys
  public var videoKeys: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _cloneSource: String? = nil
  fileprivate var _textDetail: String? = nil
  fileprivate var _fileName: String? = nil
  fileprivate var _thirdPartyAppID: String? = nil
  fileprivate var _permissionSettingType: SecurityEvent_PermissionSettingType? = nil
  fileprivate var _containerType: SecurityEvent_ContainerType? = nil
  fileprivate var _containerID: String? = nil
  fileprivate var _currentPage: String? = nil
  fileprivate var _postID: String? = nil
}

public struct SecurityEvent_RecipientDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 修改权限协作者
  public var permissionActionType: SecurityEvent_PermissionActionType {
    get {return _permissionActionType ?? .unknown}
    set {_permissionActionType = newValue}
  }
  /// Returns true if `permissionActionType` has been explicitly set.
  public var hasPermissionActionType: Bool {return self._permissionActionType != nil}
  /// Clears the value of `permissionActionType`. Subsequent reads from it will return its default value.
  public mutating func clearPermissionActionType() {self._permissionActionType = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _permissionActionType: SecurityEvent_PermissionActionType? = nil
}

public struct SecurityEvent_OperatorDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct SecurityEvent_Extend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 评论类型
  public var commentType: SecurityEvent_CommentType {
    get {return _commentType ?? .unknown}
    set {_commentType = newValue}
  }
  /// Returns true if `commentType` has been explicitly set.
  public var hasCommentType: Bool {return self._commentType != nil}
  /// Clears the value of `commentType`. Subsequent reads from it will return its default value.
  public mutating func clearCommentType() {self._commentType = nil}

  ///  App信息
  public var appDetail: SecurityEvent_AppDetail {
    get {return _appDetail ?? .unknown}
    set {_appDetail = newValue}
  }
  /// Returns true if `appDetail` has been explicitly set.
  public var hasAppDetail: Bool {return self._appDetail != nil}
  /// Clears the value of `appDetail`. Subsequent reads from it will return its default value.
  public mutating func clearAppDetail() {self._appDetail = nil}

  /// 创建群组
  public var createGroup: Int64 {
    get {return _createGroup ?? 0}
    set {_createGroup = newValue}
  }
  /// Returns true if `createGroup` has been explicitly set.
  public var hasCreateGroup: Bool {return self._createGroup != nil}
  /// Clears the value of `createGroup`. Subsequent reads from it will return its default value.
  public mutating func clearCreateGroup() {self._createGroup = nil}

  /// 解散群组
  public var dismissGroup: Int64 {
    get {return _dismissGroup ?? 0}
    set {_dismissGroup = newValue}
  }
  /// Returns true if `dismissGroup` has been explicitly set.
  public var hasDismissGroup: Bool {return self._dismissGroup != nil}
  /// Clears the value of `dismissGroup`. Subsequent reads from it will return its default value.
  public mutating func clearDismissGroup() {self._dismissGroup = nil}

  /// Do not update this
  public var commonDrawer: SecurityEvent_CommonDrawer {
    get {return _commonDrawer ?? SecurityEvent_CommonDrawer()}
    set {_commonDrawer = newValue}
  }
  /// Returns true if `commonDrawer` has been explicitly set.
  public var hasCommonDrawer: Bool {return self._commonDrawer != nil}
  /// Clears the value of `commonDrawer`. Subsequent reads from it will return its default value.
  public mutating func clearCommonDrawer() {self._commonDrawer = nil}

  /// 操作成功/失败
  public var status: SecurityEvent_Status {
    get {return _status ?? .success}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commentType: SecurityEvent_CommentType? = nil
  fileprivate var _appDetail: SecurityEvent_AppDetail? = nil
  fileprivate var _createGroup: Int64? = nil
  fileprivate var _dismissGroup: Int64? = nil
  fileprivate var _commonDrawer: SecurityEvent_CommonDrawer? = nil
  fileprivate var _status: SecurityEvent_Status? = nil
}

public struct SecurityEvent_CommonDrawer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var itemList: [SecurityEvent_RenderItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct SecurityEvent_RenderItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 上报数据的Key，例如 OpSuccess
  public var key: String {
    get {return _key ?? String()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {self._key = nil}

  /// 上报数据的Value , 例如 0
  public var value: String {
    get {return _value ?? String()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  /// 上报Value的渲染方式，默认为PlainText
  public var renderTypeValue: SecurityEvent_RenderTypeValue {
    get {return _renderTypeValue ?? .plainText}
    set {_renderTypeValue = newValue}
  }
  /// Returns true if `renderTypeValue` has been explicitly set.
  public var hasRenderTypeValue: Bool {return self._renderTypeValue != nil}
  /// Clears the value of `renderTypeValue`. Subsequent reads from it will return its default value.
  public mutating func clearRenderTypeValue() {self._renderTypeValue = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _key: String? = nil
  fileprivate var _value: String? = nil
  fileprivate var _renderTypeValue: SecurityEvent_RenderTypeValue? = nil
}

public struct SecurityEvent_Env {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 端类型
  public var client: SecurityEvent_ClientType {
    get {return _client ?? .clientUnknown}
    set {_client = newValue}
  }
  /// Returns true if `client` has been explicitly set.
  public var hasClient: Bool {return self._client != nil}
  /// Clears the value of `client`. Subsequent reads from it will return its default value.
  public mutating func clearClient() {self._client = nil}

  /// 设备 id 若did存在则必填。其余信息可不填
  public var did: String {
    get {return _did ?? String()}
    set {_did = newValue}
  }
  /// Returns true if `did` has been explicitly set.
  public var hasDid: Bool {return self._did != nil}
  /// Clears the value of `did`. Subsequent reads from it will return its default value.
  public mutating func clearDid() {self._did = nil}

  /// 地理位置
  public var location: String {
    get {return _location ?? String()}
    set {_location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  public var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  public mutating func clearLocation() {self._location = nil}

  /// user-agent
  public var ua: String {
    get {return _ua ?? String()}
    set {_ua = newValue}
  }
  /// Returns true if `ua` has been explicitly set.
  public var hasUa: Bool {return self._ua != nil}
  /// Clears the value of `ua`. Subsequent reads from it will return its default value.
  public mutating func clearUa() {self._ua = nil}

  /// ip 地址
  public var ip: String {
    get {return _ip ?? String()}
    set {_ip = newValue}
  }
  /// Returns true if `ip` has been explicitly set.
  public var hasIp: Bool {return self._ip != nil}
  /// Clears the value of `ip`. Subsequent reads from it will return its default value.
  public mutating func clearIp() {self._ip = nil}

  /// 事件标记, 如正常/测试/压测/...
  public var flag: SecurityEvent_FlagType {
    get {return _flag ?? .flagNormal}
    set {_flag = newValue}
  }
  /// Returns true if `flag` has been explicitly set.
  public var hasFlag: Bool {return self._flag != nil}
  /// Clears the value of `flag`. Subsequent reads from it will return its default value.
  public mutating func clearFlag() {self._flag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _client: SecurityEvent_ClientType? = nil
  fileprivate var _did: String? = nil
  fileprivate var _location: String? = nil
  fileprivate var _ua: String? = nil
  fileprivate var _ip: String? = nil
  fileprivate var _flag: SecurityEvent_FlagType? = nil
}

public struct SecurityEvent_OperatorEntity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 实体类型
  public var type: SecurityEvent_EntityType {
    get {return _type ?? .unknown}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {self._type = nil}

  /// 实体值
  public var value: String {
    get {return _value ?? String()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  /// 详情，OperatorEntity级别的扩展字段
  public var detail: SecurityEvent_OperatorDetail {
    get {return _detail ?? SecurityEvent_OperatorDetail()}
    set {_detail = newValue}
  }
  /// Returns true if `detail` has been explicitly set.
  public var hasDetail: Bool {return self._detail != nil}
  /// Clears the value of `detail`. Subsequent reads from it will return its default value.
  public mutating func clearDetail() {self._detail = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _type: SecurityEvent_EntityType? = nil
  fileprivate var _value: String? = nil
  fileprivate var _detail: SecurityEvent_OperatorDetail? = nil
}

public struct SecurityEvent_RecipientEntity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 实体类型
  public var type: SecurityEvent_EntityType {
    get {return _type ?? .unknown}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {self._type = nil}

  /// 实体值
  public var value: String {
    get {return _value ?? String()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  /// 详情，RecipientEntity级别的扩展字段
  public var detail: SecurityEvent_RecipientDetail {
    get {return _detail ?? SecurityEvent_RecipientDetail()}
    set {_detail = newValue}
  }
  /// Returns true if `detail` has been explicitly set.
  public var hasDetail: Bool {return self._detail != nil}
  /// Clears the value of `detail`. Subsequent reads from it will return its default value.
  public mutating func clearDetail() {self._detail = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _type: SecurityEvent_EntityType? = nil
  fileprivate var _value: String? = nil
  fileprivate var _detail: SecurityEvent_RecipientDetail? = nil
}

public struct SecurityEvent_ObjectEntity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 实体类型
  public var type: SecurityEvent_EntityType {
    get {return _type ?? .unknown}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {self._type = nil}

  /// 实体值
  public var value: String {
    get {return _value ?? String()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  /// 详情，ObjectEntity级别的扩展字段
  public var detail: SecurityEvent_ObjectDetail {
    get {return _detail ?? SecurityEvent_ObjectDetail()}
    set {_detail = newValue}
  }
  /// Returns true if `detail` has been explicitly set.
  public var hasDetail: Bool {return self._detail != nil}
  /// Clears the value of `detail`. Subsequent reads from it will return its default value.
  public mutating func clearDetail() {self._detail = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _type: SecurityEvent_EntityType? = nil
  fileprivate var _value: String? = nil
  fileprivate var _detail: SecurityEvent_ObjectDetail? = nil
}

public struct SecurityEvent_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 业务模块
  public var module: SecurityEvent_ModuleType {
    get {return _storage._module ?? .moduleUnknown}
    set {_uniqueStorage()._module = newValue}
  }
  /// Returns true if `module` has been explicitly set.
  public var hasModule: Bool {return _storage._module != nil}
  /// Clears the value of `module`. Subsequent reads from it will return its default value.
  public mutating func clearModule() {_uniqueStorage()._module = nil}

  /// 操作类型
  public var operation: SecurityEvent_OperationType {
    get {return _storage._operation ?? .unknown}
    set {_uniqueStorage()._operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  public var hasOperation: Bool {return _storage._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  public mutating func clearOperation() {_uniqueStorage()._operation = nil}

  /// 发生时间
  public var timeStamp: String {
    get {return _storage._timeStamp ?? String()}
    set {_uniqueStorage()._timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  public var hasTimeStamp: Bool {return _storage._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimeStamp() {_uniqueStorage()._timeStamp = nil}

  /// 租户ID 尽量填
  public var tenantID: String {
    get {return _storage._tenantID ?? String()}
    set {_uniqueStorage()._tenantID = newValue}
  }
  /// Returns true if `tenantID` has been explicitly set.
  public var hasTenantID: Bool {return _storage._tenantID != nil}
  /// Clears the value of `tenantID`. Subsequent reads from it will return its default value.
  public mutating func clearTenantID() {_uniqueStorage()._tenantID = nil}

  /// 操作者, 一般为 User，若类型为bot则租户ID必填
  public var `operator`: SecurityEvent_OperatorEntity {
    get {return _storage._operator ?? SecurityEvent_OperatorEntity()}
    set {_uniqueStorage()._operator = newValue}
  }
  /// Returns true if ``operator`` has been explicitly set.
  public var hasOperator: Bool {return _storage._operator != nil}
  /// Clears the value of ``operator``. Subsequent reads from it will return its default value.
  public mutating func clearOperator() {_uniqueStorage()._operator = nil}

  /// 接收者列表, 一般为 User/Department/Tenant/...
  public var recipients: [SecurityEvent_RecipientEntity] {
    get {return _storage._recipients}
    set {_uniqueStorage()._recipients = newValue}
  }

  /// 操作对象列表, 至少为1，如 User/Department/Tenant/Doc/Mail/Msg/...，
  public var objects: [SecurityEvent_ObjectEntity] {
    get {return _storage._objects}
    set {_uniqueStorage()._objects = newValue}
  }

  /// 环境信息，Env字段中若did存在则必填
  public var env: SecurityEvent_Env {
    get {return _storage._env ?? SecurityEvent_Env()}
    set {_uniqueStorage()._env = newValue}
  }
  /// Returns true if `env` has been explicitly set.
  public var hasEnv: Bool {return _storage._env != nil}
  /// Clears the value of `env`. Subsequent reads from it will return its default value.
  public mutating func clearEnv() {_uniqueStorage()._env = nil}

  /// 事件级别的扩展字段
  public var extend: SecurityEvent_Extend {
    get {return _storage._extend ?? SecurityEvent_Extend()}
    set {_uniqueStorage()._extend = newValue}
  }
  /// Returns true if `extend` has been explicitly set.
  public var hasExtend: Bool {return _storage._extend != nil}
  /// Clears the value of `extend`. Subsequent reads from it will return its default value.
  public mutating func clearExtend() {_uniqueStorage()._extend = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct SecurityEvent_EventsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var events: [SecurityEvent_Event] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension SecurityEvent_ModuleType: @unchecked Sendable {}
extension SecurityEvent_ClientType: @unchecked Sendable {}
extension SecurityEvent_FlagType: @unchecked Sendable {}
extension SecurityEvent_OperationType: @unchecked Sendable {}
extension SecurityEvent_EntityType: @unchecked Sendable {}
extension SecurityEvent_PermissionSettingType: @unchecked Sendable {}
extension SecurityEvent_PermissionActionType: @unchecked Sendable {}
extension SecurityEvent_CommentType: @unchecked Sendable {}
extension SecurityEvent_Status: @unchecked Sendable {}
extension SecurityEvent_AppDetail: @unchecked Sendable {}
extension SecurityEvent_ContainerType: @unchecked Sendable {}
extension SecurityEvent_RenderTypeValue: @unchecked Sendable {}
extension SecurityEvent_RenderItemKey: @unchecked Sendable {}
extension SecurityEvent_OpResultValue: @unchecked Sendable {}
extension SecurityEvent_ChatTypeValue: @unchecked Sendable {}
extension SecurityEvent_ObjectDetail: @unchecked Sendable {}
extension SecurityEvent_RecipientDetail: @unchecked Sendable {}
extension SecurityEvent_OperatorDetail: @unchecked Sendable {}
extension SecurityEvent_Extend: @unchecked Sendable {}
extension SecurityEvent_CommonDrawer: @unchecked Sendable {}
extension SecurityEvent_RenderItem: @unchecked Sendable {}
extension SecurityEvent_Env: @unchecked Sendable {}
extension SecurityEvent_OperatorEntity: @unchecked Sendable {}
extension SecurityEvent_RecipientEntity: @unchecked Sendable {}
extension SecurityEvent_ObjectEntity: @unchecked Sendable {}
extension SecurityEvent_Event: @unchecked Sendable {}
extension SecurityEvent_EventsRequest: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "security_event"

extension SecurityEvent_ModuleType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ModuleUnknown"),
    1: .same(proto: "ModuleDocs"),
    2: .same(proto: "ModuleSheets"),
    3: .same(proto: "ModuleFiles"),
    4: .same(proto: "ModuleFolders"),
    5: .same(proto: "ModulePassport"),
    6: .same(proto: "ModuleMindNote"),
    7: .same(proto: "ModuleBitable"),
    8: .same(proto: "ModuleSlide"),
    9: .same(proto: "ModuleChat"),
    10: .same(proto: "ModuleIMImageAndVideo"),
    11: .same(proto: "ModuleVideo"),
    12: .same(proto: "ModuleIMFile"),
    13: .same(proto: "ModuleCommunication"),
    14: .same(proto: "ModuleCalendar"),
    15: .same(proto: "ModuleAddressBook"),
    16: .same(proto: "ModuleAPP"),
    17: .same(proto: "ModuleEmail"),
    18: .same(proto: "ModuleIM"),
    19: .same(proto: "ModuleDocx"),
    20: .same(proto: "ModulePeople"),
    21: .same(proto: "ModuleDevice"),
    22: .same(proto: "ModuleMoments"),
  ]
}

extension SecurityEvent_ClientType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ClientUnknown"),
    1: .same(proto: "ClientLarkPC"),
    2: .same(proto: "ClientAndroid"),
    3: .same(proto: "ClientIOS"),
    4: .same(proto: "ClientWeb"),
  ]
}

extension SecurityEvent_FlagType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FlagNormal"),
    1: .same(proto: "FlagTest"),
    2: .same(proto: "FlagStress"),
  ]
}

extension SecurityEvent_OperationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OperationTypeUnknown"),
    1: .same(proto: "OperationCreate"),
    2: .same(proto: "OperationRead"),
    3: .same(proto: "OperationUpdate"),
    4: .same(proto: "OperationDelete"),
    5: .same(proto: "OperationComment"),
    6: .same(proto: "OperationExport"),
    7: .same(proto: "OperationDownload"),
    8: .same(proto: "OperationPrint"),
    9: .same(proto: "OperationUpdateCollaborator"),
    10: .same(proto: "OperationShareTo3rdApp"),
    11: .same(proto: "OperationUpdateShareSetting"),
    12: .same(proto: "OperationFrontExport"),
    13: .same(proto: "OperationOpenWith3rdApp"),
    14: .same(proto: "OperationImport"),
    15: .same(proto: "OperationLogin"),
    16: .same(proto: "OperationJoin"),
    17: .same(proto: "OperationQuit"),
    18: .same(proto: "OperationSaveAs"),
    19: .same(proto: "OperationCopyContent"),
    20: .same(proto: "OperationForward"),
    21: .same(proto: "OperationLoadToLocal"),
    22: .same(proto: "OperationAddExternalFriend"),
    23: .same(proto: "OperationStartExternalChat"),
    24: .same(proto: "OperationUploadCalendarAppendix"),
    25: .same(proto: "OperationLookDeptStruct"),
    26: .same(proto: "OperationObtainMobile"),
    27: .same(proto: "OperationLookProfile"),
    63: .same(proto: "OperationScreenShot"),
    90: .same(proto: "OperationScreenRecording"),
    100000001: .same(proto: "OperationCreateSpaceCopy"),
    100000002: .same(proto: "OperationSpaceShare"),
    100000003: .same(proto: "OperationSpaceShareContent"),
    100000004: .same(proto: "OperationSpaceMove"),
    100000005: .same(proto: "OperationCreateCopy"),
    100000006: .same(proto: "OperationSaveModule"),
    100000007: .same(proto: "OperationSpaceUpdateCollaboratorAuth"),
    100000008: .same(proto: "OperationSpaceMoveOwner"),
    100000009: .same(proto: "OperationSpaceViewHistory"),
    100000010: .same(proto: "OperationSpaceDownLoadHistory"),
    100000011: .same(proto: "OperationSpaceRecoverHistory"),
    100000012: .same(proto: "OperationSpaceDeleteComment"),
    100000026: .same(proto: "OperationSpaceDemoSlides"),
    100000028: .same(proto: "OperationSpaceDocClickDocPlugin"),
    200000006: .same(proto: "OperationIMChatPreviewFile"),
    200000008: .same(proto: "OperationIMChatEditImage"),
    200000010: .same(proto: "OperationIMSaveToSpace"),
    200000017: .same(proto: "OperationIMSnaphot"),
    200000018: .same(proto: "OperationIMScreenCap"),
    200000019: .same(proto: "OperationIMOCR"),
    200000020: .same(proto: "OperationIMOnlineEdit"),
    200000201: .same(proto: "OperationChatPinBackToChat"),
    200000202: .same(proto: "OperationChatPinOpenUrl"),
    200000203: .same(proto: "OperationChatPinOpenBrowser"),
    200000204: .same(proto: "OperationChatPinCopyUrl"),
    200000205: .same(proto: "OperationChatPinShowInChat"),
    200000206: .same(proto: "OperationChatPinShowPinList"),
    200000207: .same(proto: "OperationChatPinHoverShow"),
    200000208: .same(proto: "OperationChatPinSideBarSearch"),
    200000209: .same(proto: "OperationChatPinSideBarFile"),
    200000210: .same(proto: "OperationChatPinSideBarAddLink"),
    200000211: .same(proto: "OperationChatPinSideBarAnnounce"),
    1600000017: .same(proto: "OperationEmailLogin"),
    1600000018: .same(proto: "OperationEmailDownloadMail"),
    1600000019: .same(proto: "OperationEmailDownloadFile"),
    1600000020: .same(proto: "OperationEmailLocalOpen"),
    1600000021: .same(proto: "OperationEmailShareFile"),
    1600000022: .same(proto: "OperationEmailPrint"),
    1600000023: .same(proto: "OperationEmailCopy"),
    1600000024: .same(proto: "OperationEmailURLClick"),
    1600000025: .same(proto: "OperationEmailLoginThird"),
    1600000026: .same(proto: "OperationEmailEditForward"),
    1600000027: .same(proto: "OperationEmailShareMail"),
    1600000028: .same(proto: "OperationEmailReplay"),
    1600000029: .same(proto: "OperationEmailSend"),
    1600000030: .same(proto: "OperationEmailDelete"),
    1600000031: .same(proto: "OperationEmailRead"),
    1600000032: .same(proto: "OperationEmailMove"),
    1600000033: .same(proto: "OperationEmailEmlAsAttachment"),
    1600000034: .same(proto: "OperationEmailBatchExport"),
    1600000035: .same(proto: "OperationEmailDelBigFile"),
    1600000036: .same(proto: "OperationEmailCopyAttachment"),
  ]
}

extension SecurityEvent_EntityType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EntityTypeUnknown"),
    1: .same(proto: "EntityUserID"),
    2: .same(proto: "EntityDepartmentID"),
    3: .same(proto: "EntityTenantID"),
    4: .same(proto: "EntityChatID"),
    5: .same(proto: "EntityDocID"),
    6: .same(proto: "EntitySheetID"),
    7: .same(proto: "EntityFileID"),
    8: .same(proto: "EntityFolderID"),
    9: .same(proto: "EntityMindNoteID"),
    10: .same(proto: "EntityBitableID"),
    11: .same(proto: "EntitySlideID"),
    12: .same(proto: "EntityBotID"),
    13: .same(proto: "EntityVideoID"),
    14: .same(proto: "EntityDriverSDKFileID"),
    15: .same(proto: "EntityLink"),
    16: .same(proto: "EntityChatter"),
    17: .same(proto: "EntityImage"),
    18: .same(proto: "EntityVideoIM"),
    19: .same(proto: "EntityFileIM"),
    20: .same(proto: "EntityMiniProgramsAndH5"),
    21: .same(proto: "EntityLocalFile"),
    22: .same(proto: "EntityUserEmail"),
    23: .same(proto: "EntityPublicEmail"),
    24: .same(proto: "EntityEmailGroup"),
    25: .same(proto: "EntityUserMobile"),
    26: .same(proto: "EntityEmailContent"),
    27: .same(proto: "EntityEmailSubject"),
    28: .same(proto: "EntityEmailAttachment"),
    29: .same(proto: "EntityOKRType"),
    30: .same(proto: "EntityIMContent"),
    31: .same(proto: "EntityDocxID"),
    45: .same(proto: "EntityDevice"),
    75: .same(proto: "EntityMomentsPost"),
    76: .same(proto: "EntityMomentsComment"),
    77: .same(proto: "EntityMomentsImage"),
    78: .same(proto: "EntityMomentsVideo"),
    106: .same(proto: "EntitySlidesDocs"),
    107: .same(proto: "EntityCCMSpace"),
    144: .same(proto: "EntityWikiToken"),
    499: .same(proto: "EntityChatPinId"),
    2001: .same(proto: "EntityMomentsPostDetail"),
  ]
}

extension SecurityEvent_PermissionSettingType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PermissionSettingTypeUnknown"),
    1: .same(proto: "DisableLinkShare"),
    2: .same(proto: "CanReadByLinkInTenant"),
    3: .same(proto: "CanEditByLinkInTenant"),
    4: .same(proto: "CanReadByLinkInInternet"),
    5: .same(proto: "CanEditByLinkInInternet"),
  ]
}

extension SecurityEvent_PermissionActionType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PermissionActionTypeUnknown"),
    1: .same(proto: "AddUser"),
    2: .same(proto: "RemoveUser"),
    3: .same(proto: "AddChat"),
    4: .same(proto: "RemoveChat"),
    5: .same(proto: "AddDepartment"),
    6: .same(proto: "RemoveDepartment"),
  ]
}

extension SecurityEvent_CommentType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CommentTypeUnknown"),
    1: .same(proto: "AddComment"),
    2: .same(proto: "AddReply"),
    3: .same(proto: "EditReply"),
    4: .same(proto: "DeleteReply"),
    5: .same(proto: "UpdateComment"),
  ]
}

extension SecurityEvent_Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Success"),
    1: .same(proto: "Fail"),
  ]
}

extension SecurityEvent_AppDetail: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AppDetailUnknown"),
    1: .same(proto: "WeChat"),
    2: .same(proto: "WeChatMoments"),
    3: .same(proto: "QQ"),
    4: .same(proto: "Weibo"),
    5: .same(proto: "Others"),
  ]
}

extension SecurityEvent_ContainerType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ContainerTypeUnknown"),
    1: .same(proto: "Wiki"),
  ]
}

extension SecurityEvent_RenderTypeValue: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PlainText"),
    2: .same(proto: "CopyText"),
    3: .same(proto: "TimeText"),
  ]
}

extension SecurityEvent_RenderItemKey: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "OpResult"),
    2: .same(proto: "FileID"),
    3: .same(proto: "FileName"),
    4: .same(proto: "FileType"),
    5: .same(proto: "Link"),
    6: .same(proto: "ChatType"),
    9000011: .same(proto: "MomentsPostID"),
    9000012: .same(proto: "MomentsCommentID"),
    9000013: .same(proto: "MomentsForwardIDs"),
    9000014: .same(proto: "MomentsPostUrl"),
    9000015: .same(proto: "MomentsImageKeys"),
    9000016: .same(proto: "MomentsVideoKeys"),
    9000017: .same(proto: "MomentsOfficialId"),
  ]
}

extension SecurityEvent_OpResultValue: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OpSuccess"),
    1: .same(proto: "OpFailed"),
  ]
}

extension SecurityEvent_ChatTypeValue: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "P2P"),
    2: .same(proto: "GROUP"),
  ]
}

extension SecurityEvent_ObjectDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObjectDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CloneSource"),
    2: .same(proto: "TextDetail"),
    3: .same(proto: "FileName"),
    4: .same(proto: "ThirdPartyAppID"),
    5: .same(proto: "PermissionSettingType"),
    6: .same(proto: "ContainerType"),
    7: .same(proto: "ContainerID"),
    8: .same(proto: "CurrentPage"),
    31: .same(proto: "PostID"),
    32: .same(proto: "ForwardIDs"),
    9000002: .same(proto: "ImageKeys"),
    9000003: .same(proto: "VideoKeys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._cloneSource) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._textDetail) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._fileName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._thirdPartyAppID) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._permissionSettingType) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self._containerType) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._containerID) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._currentPage) }()
      case 31: try { try decoder.decodeSingularStringField(value: &self._postID) }()
      case 32: try { try decoder.decodeRepeatedStringField(value: &self.forwardIds) }()
      case 9000002: try { try decoder.decodeRepeatedStringField(value: &self.imageKeys) }()
      case 9000003: try { try decoder.decodeRepeatedStringField(value: &self.videoKeys) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._cloneSource {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._textDetail {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._fileName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._thirdPartyAppID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._permissionSettingType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._containerType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._containerID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._currentPage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._postID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 31)
    } }()
    if !self.forwardIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.forwardIds, fieldNumber: 32)
    }
    if !self.imageKeys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.imageKeys, fieldNumber: 9000002)
    }
    if !self.videoKeys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.videoKeys, fieldNumber: 9000003)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SecurityEvent_ObjectDetail, rhs: SecurityEvent_ObjectDetail) -> Bool {
    if lhs._cloneSource != rhs._cloneSource {return false}
    if lhs._textDetail != rhs._textDetail {return false}
    if lhs._fileName != rhs._fileName {return false}
    if lhs._thirdPartyAppID != rhs._thirdPartyAppID {return false}
    if lhs._permissionSettingType != rhs._permissionSettingType {return false}
    if lhs._containerType != rhs._containerType {return false}
    if lhs._containerID != rhs._containerID {return false}
    if lhs._currentPage != rhs._currentPage {return false}
    if lhs._postID != rhs._postID {return false}
    if lhs.forwardIds != rhs.forwardIds {return false}
    if lhs.imageKeys != rhs.imageKeys {return false}
    if lhs.videoKeys != rhs.videoKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SecurityEvent_RecipientDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RecipientDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PermissionActionType"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._permissionActionType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._permissionActionType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SecurityEvent_RecipientDetail, rhs: SecurityEvent_RecipientDetail) -> Bool {
    if lhs._permissionActionType != rhs._permissionActionType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SecurityEvent_OperatorDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OperatorDetail"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SecurityEvent_OperatorDetail, rhs: SecurityEvent_OperatorDetail) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SecurityEvent_Extend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Extend"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CommentType"),
    2: .same(proto: "AppDetail"),
    3: .same(proto: "CreateGroup"),
    4: .same(proto: "DismissGroup"),
    100: .same(proto: "CommonDrawer"),
    9000001: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._commentType) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._appDetail) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self._createGroup) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self._dismissGroup) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._commonDrawer) }()
      case 9000001: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._commentType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._appDetail {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._createGroup {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._dismissGroup {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._commonDrawer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 9000001)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SecurityEvent_Extend, rhs: SecurityEvent_Extend) -> Bool {
    if lhs._commentType != rhs._commentType {return false}
    if lhs._appDetail != rhs._appDetail {return false}
    if lhs._createGroup != rhs._createGroup {return false}
    if lhs._dismissGroup != rhs._dismissGroup {return false}
    if lhs._commonDrawer != rhs._commonDrawer {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SecurityEvent_CommonDrawer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommonDrawer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ItemList"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.itemList) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.itemList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.itemList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SecurityEvent_CommonDrawer, rhs: SecurityEvent_CommonDrawer) -> Bool {
    if lhs.itemList != rhs.itemList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SecurityEvent_RenderItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Key"),
    2: .same(proto: "Value"),
    3: .same(proto: "RenderTypeValue"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._value) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._renderTypeValue) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._key {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._renderTypeValue {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SecurityEvent_RenderItem, rhs: SecurityEvent_RenderItem) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs._value != rhs._value {return false}
    if lhs._renderTypeValue != rhs._renderTypeValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SecurityEvent_Env: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Env"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Client"),
    2: .same(proto: "DID"),
    3: .same(proto: "Location"),
    4: .same(proto: "UA"),
    5: .same(proto: "IP"),
    6: .same(proto: "Flag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._client) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._did) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._location) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._ua) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._ip) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self._flag) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._client {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._did {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._location {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._ua {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._ip {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._flag {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SecurityEvent_Env, rhs: SecurityEvent_Env) -> Bool {
    if lhs._client != rhs._client {return false}
    if lhs._did != rhs._did {return false}
    if lhs._location != rhs._location {return false}
    if lhs._ua != rhs._ua {return false}
    if lhs._ip != rhs._ip {return false}
    if lhs._flag != rhs._flag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SecurityEvent_OperatorEntity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OperatorEntity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Type"),
    2: .same(proto: "Value"),
    3: .same(proto: "Detail"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._value == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._value) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._detail) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._detail {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SecurityEvent_OperatorEntity, rhs: SecurityEvent_OperatorEntity) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._value != rhs._value {return false}
    if lhs._detail != rhs._detail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SecurityEvent_RecipientEntity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RecipientEntity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Type"),
    2: .same(proto: "Value"),
    3: .same(proto: "Detail"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._value == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._value) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._detail) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._detail {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SecurityEvent_RecipientEntity, rhs: SecurityEvent_RecipientEntity) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._value != rhs._value {return false}
    if lhs._detail != rhs._detail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SecurityEvent_ObjectEntity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObjectEntity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Type"),
    2: .same(proto: "Value"),
    3: .same(proto: "Detail"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._value == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._value) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._detail) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._detail {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SecurityEvent_ObjectEntity, rhs: SecurityEvent_ObjectEntity) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._value != rhs._value {return false}
    if lhs._detail != rhs._detail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SecurityEvent_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Event"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Module"),
    2: .same(proto: "Operation"),
    3: .same(proto: "TimeStamp"),
    4: .same(proto: "TenantID"),
    5: .same(proto: "Operator"),
    6: .same(proto: "Recipients"),
    7: .same(proto: "Objects"),
    8: .same(proto: "Env"),
    9: .same(proto: "Extend"),
  ]

  fileprivate class _StorageClass {
    var _module: SecurityEvent_ModuleType? = nil
    var _operation: SecurityEvent_OperationType? = nil
    var _timeStamp: String? = nil
    var _tenantID: String? = nil
    var _operator: SecurityEvent_OperatorEntity? = nil
    var _recipients: [SecurityEvent_RecipientEntity] = []
    var _objects: [SecurityEvent_ObjectEntity] = []
    var _env: SecurityEvent_Env? = nil
    var _extend: SecurityEvent_Extend? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _module = source._module
      _operation = source._operation
      _timeStamp = source._timeStamp
      _tenantID = source._tenantID
      _operator = source._operator
      _recipients = source._recipients
      _objects = source._objects
      _env = source._env
      _extend = source._extend
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._module == nil {return false}
      if _storage._operation == nil {return false}
      if _storage._timeStamp == nil {return false}
      if _storage._operator == nil {return false}
      if let v = _storage._operator, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._recipients) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._objects) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._module) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._operation) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._timeStamp) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._tenantID) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._operator) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._recipients) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._objects) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._env) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._extend) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._module {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._operation {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._timeStamp {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._tenantID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._operator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._recipients.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._recipients, fieldNumber: 6)
      }
      if !_storage._objects.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._objects, fieldNumber: 7)
      }
      try { if let v = _storage._env {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._extend {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SecurityEvent_Event, rhs: SecurityEvent_Event) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._module != rhs_storage._module {return false}
        if _storage._operation != rhs_storage._operation {return false}
        if _storage._timeStamp != rhs_storage._timeStamp {return false}
        if _storage._tenantID != rhs_storage._tenantID {return false}
        if _storage._operator != rhs_storage._operator {return false}
        if _storage._recipients != rhs_storage._recipients {return false}
        if _storage._objects != rhs_storage._objects {return false}
        if _storage._env != rhs_storage._env {return false}
        if _storage._extend != rhs_storage._extend {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SecurityEvent_EventsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Events"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.events) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SecurityEvent_EventsRequest, rhs: SecurityEvent_EventsRequest) -> Bool {
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
